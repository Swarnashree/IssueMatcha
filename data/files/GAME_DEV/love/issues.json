[{"title":"Regression 11.5: key events not triggered when an IME language is active (windows)","body":"If you have a CJK language active then the corresponding keypressed\/keyreleased events are not triggered.\r\n\r\nIt's the same kind of problem that Minecraft has (which uses glfw), so it might have something to do with naive handling of scancode\/virtual-key codes.\r\n\r\ntested on 11.5\r\n\r\nEDIT: works correctly in 11.4 so it's a regression.\r\n\r\ntest code: \r\n\r\n```lua\r\nlocal vkeycode_count = 0\r\nlocal scancode_count = 0\r\n\r\nfunction love.keypressed(vkey,scan,isRepeat)\r\n    if vkey==\"w\" then vkeycode_count = vkeycode_count + 1 end\r\n    if scan==\"w\" then scancode_count = scancode_count + 1 end\r\nend\r\nfunction love.keyreleased(vkey,scan)\r\n    if vkey==\"w\" then vkeycode_count = vkeycode_count - 1 end\r\n    if scan==\"w\" then scancode_count = scancode_count - 1 end\r\nend\r\nfunction love.draw()\r\n    love.graphics.print(\r\n        \"love.keyboard.isDown('w') = \"         .. (love.keyboard.isDown('w')         and \"true\" or \"false\") .. \"\\n\" .. \r\n        \"love.keyboard.isScancodeDown('w') = \" .. (love.keyboard.isScancodeDown('w') and \"true\" or \"false\") .. \"\\n\" .. \r\n        \"vkey w press count = \" .. vkeycode_count .. \"\\n\" ..\r\n        \"scan w press count = \" .. scancode_count\r\n    )\r\nend\r\n```","comments":["Is there a game you know of that does work as you expect on your system?\r\n\r\nThat being said, since love uses SDL for input handling, if it is even possible for apps to control that behaviour then SDL's code would have to change rather than love's code.","re-tested 11.4 works correctly, so it's a regression.\r\n\r\n> Is there a game you know of that does work as you expect on your system?\r\n\r\nOverwatch for example, and basically pretty much any game that started off with an AAA-ish engine.","Are you able to test directly with the latest SDL and file a bug there if needed? love 11.4 used SDL 2.0.18, and 11.5 uses 2.28.5.","latest SDL.dll fails for both 11.4 and 11.5\r\n\r\n11.4's SDL.dll works when copied to 11.5 as well.\r\n\r\nSo it's upstream.","A couple clarifying questions:\r\n* do you get `love.textedited` and `love.textinput` events in that situation?\r\n* is an IME dialog \/ UI element visible at all?\r\n* if you turn text input off, does the behaviour change?","1. first time I've heard of those events. Will test.\r\n2. no element visible whatsoever. Just like with Minecraft\r\n3. what do you mean by turning it off?","> first time I've heard of those events.\r\n\r\nIf you ever want to have a text box or handle typed text from users, you'll definitely want to use those instead of love.keypressed (whereas the latter is good for other game input unrelated to text). :) \r\n\r\n> what do you mean by turning it off?\r\n\r\n[love.keyboard.setTextInput](https:\/\/love2d.org\/wiki\/love.keyboard.setTextInput)\r\n","In both versions, during IME mode no `textinput` events are generated, and `textedited` events are only generated when _changing_ the key pressed (repeat presses do not generate new events, nor do key releases).\r\n\r\nWith `love.keyboard.setTextInput(false)` the IME toolbar is locked into alphanumeric mode, and the keypresses registers correctly.\r\n\r\nSo the only difference between 11.4 and 11.5 is whether or not `isDown\/isScancodeDown\/keypressed\/keyreleased` registers during IME, the `textinput\/textedit\/setTextInput` behaviors are identical.\r\n\r\n```lua\r\nlocal vkeycode_accu = 0\r\nlocal scancode_accu = 0\r\nlocal input_count = 0\r\nlocal edit_count = 0\r\n\r\n\r\nfunction love.mousepressed(x,y,button,istouch,presses)\r\n    if button==3 then love.keyboard.setTextInput( not love.keyboard.hasTextInput() ) end\r\nend\r\n\r\nfunction love.textinput(text)\r\n    input_count = input_count + 1\r\nend\r\n\r\nfunction love.textedited( text, start, length )\r\n    edit_count = edit_count + 1\r\nend\r\n\r\nfunction love.keypressed(vkey,scan,isRepeat)\r\n    if vkey==\"w\" then vkeycode_accu = vkeycode_accu + 1 end\r\n    if scan==\"w\" then scancode_accu = scancode_accu + 1 end\r\nend\r\nfunction love.keyreleased(vkey,scan)\r\n    if vkey==\"w\" then vkeycode_accu = vkeycode_accu - 1 end\r\n    if scan==\"w\" then scancode_accu = scancode_accu - 1 end\r\nend\r\nfunction love.draw()\r\n    love.graphics.print(\r\n        \"love.keyboard.isDown('w') = \"         .. (love.keyboard.isDown('w')         and \"true\" or \"false\") .. \"\\n\" .. \r\n        \"love.keyboard.isScancodeDown('w') = \" .. (love.keyboard.isScancodeDown('w') and \"true\" or \"false\") .. \"\\n\" .. \r\n        \"vkey w accu = \" .. vkeycode_accu .. \"\\n\" ..\r\n        \"scan w accu = \" .. scancode_accu .. \"\\n\" ..\r\n        \"textinput count = \" .. input_count .. \"\\n\" .. \r\n        \"textedited count = \" .. edit_count\r\n    )\r\nend\r\n```","@expikr can you verify if SDL release [2.24.2](https:\/\/github.com\/libsdl-org\/SDL\/releases\/tag\/release-2.24.2) already had this issue or if it still worked? The dll can be found in either the win32 assets ([x86](https:\/\/github.com\/libsdl-org\/SDL\/releases\/download\/release-2.24.2\/SDL2-2.24.2-win32-x86.zip) or [x64](https:\/\/github.com\/libsdl-org\/SDL\/releases\/download\/release-2.24.2\/SDL2-2.24.2-win32-x64.zip)).","2.24.2 fails.","> no element visible whatsoever\r\n\r\n> With love.keyboard.setTextInput(false) the IME toolbar is locked into alphanumeric mode\r\n\r\nI'm a bit confused by this - is there IME-related UI visible and active while text input is active, or is there not?","The IME toolbar is a status indicator in the systray, next to the system clock. \r\n\r\nThe IME character selection overlay element is never visible in Love2D."],"labels":["library dependency","Windows"]},{"title":"Low FPS on certain monitor","body":"My CPU is 7800X3D and the graphics card is 7900XTX. Recently, I've been taking a game development course and trying a very simple demo. The only possible reason for the demo running under 300 frames per second might be some software restrictions.\r\n\r\nI have 3 display devices connected to my computer:\r\n\r\nAn LG UltraGear GP95R, which is a 4K 144Hz monitor, connected via DisplayPort.\r\nAn MSI mag274qrf-qd, which is a 2K 165Hz monitor, also connected via DisplayPort.\r\nAnd an LG C1, using an HDMI connection.\r\nWhen I simultaneously connect and enable all three display devices and then launch the demo, the frame rates vary on all three devices. The demo runs at over 500 frames per second on the C1, 144 frames per second on the MSI, and less than 60 frames per second on the GP95R, and it's extremely unstable.\r\nLater, I tried connecting only the GP95R, but the result was the same.\r\n\r\nNormally, when playing games like BG3, such significant differences in frame rates or GPU usage among different devices wouldn't occur.","comments":["> The only possible reason for the demo running under 300 frames per second might be some software restrictions.\r\n\r\nvsync is enabled by default in L\u00d6VE. If your demo's code doesn't turn it off, that'd be a reason for things running at lower than 300 frames per second.\r\n\r\n> less than 60 frames per second on the GP95R, and it's extremely unstable.\r\n\r\nAssuming vsync is enabled, which version of L\u00d6VE are you using? If you're using 11.4 or older maybe try 11.5. Or if you are using 11.5, see if it behaves any differently with [11.4](https:\/\/github.com\/love2d\/love\/releases\/tag\/11.4).\r\n\r\nThat being said, the results of what you've tested so far could be a system display configuration issue on your end (for example if vsync is on in your project, your graphics driver settings on your computer may be overriding it in some situations). It's hard to guess from the info you've provided. The forums or discord server or subreddit may be more appropriate places to figure that sort of thing out.","> > The only possible reason for the demo running under 300 frames per second might be some software restrictions.\r\n> \r\n> vsync is enabled by default in L\u00d6VE. If your demo's code doesn't turn it off, that'd be a reason for things running at lower than 300 frames per second.\r\n> \r\n> > less than 60 frames per second on the GP95R, and it's extremely unstable.\r\n> \r\n> Assuming vsync is enabled, which version of L\u00d6VE are you using? If you're using 11.4 or older maybe try 11.5. Or if you are using 11.5, see if it behaves any differently with [11.4](https:\/\/github.com\/love2d\/love\/releases\/tag\/11.4).\r\n> \r\n> That being said, the results of what you've tested so far could be a system display configuration issue on your end (for example if vsync is on in your project, your graphics driver settings on your computer may be overriding it in some situations). It's hard to guess from the info you've provided. The forums or discord server or subreddit may be more appropriate places to figure that sort of thing out.\r\n\r\nThe 11.4 version works fine on both of my monitors and the demo could easily reach 500 fps.","Thanks for testing. Can you confirm whether you have vsync enabled or disabled in your demo project? And whether you have vsync or adaptive sync overridden in your graphics driver settings? Also uploading your demo project or a test project that reproduces the issue for you here would be helpful.","You can find the demo here. https:\/\/github.com\/games50\/pong \r\nI have tried enabling or disabling vsync in the demo, but the frame rate performance did not show significant changes.\r\n\r\n> And whether you have vsync or adaptive sync overridden in your graphics driver settings? \r\n\r\nI\u2019m not quite sure about this. Here are the screenshots of my AMD software panel.\r\n\r\n![display1](https:\/\/github.com\/love2d\/love\/assets\/47963792\/ae7d1edb-9d57-4729-9205-73069825d114)\r\n![display2](https:\/\/github.com\/love2d\/love\/assets\/47963792\/1f79e17a-35df-423c-82f3-1409da7b6559)\r\n\r\n","If you turn freesync off for the LG display, does love 11.5 behave more consistently there?\r\n\r\nEither way it's super weird that vsync doesn't affect things for you, unless you've forced it off in a driver setting somewhere else."],"labels":["more info needed"]},{"title":"Feature request: love.filesystem.newTempFile","body":"there are two ways this could be implemented:\r\n1. create a file in \/tmp and delete it when the program exits as part of the cleanup hook\r\n2. emulate a file via an in-memory buffer.  this could be used on platforms that don't have a ramdisk, although it is a bit more difficult since love2d files have a more complicated interface than lua files\r\n\r\nadditionally, some way to easily move a temporary file to a permanent file would be nice.","comments":["What sort of things would you use this for?\r\n\r\nI'm not sure I like the idea of having a step to clean up files, because L\u00d6VE ultimately doesn't control how it closes (it may crash or be force-quit etc. depending on what people do.)","Not the OP, but it sounds like they just want access to the platform-equivalent 'tmpfile' system call, which if used would mean there'd be no cleanup to register as the operating system itself would handle that.\r\n\r\n[Linux](https:\/\/man7.org\/linux\/man-pages\/man3\/tmpfile.3.html) [Windows](https:\/\/learn.microsoft.com\/en-us\/cpp\/c-runtime-library\/reference\/tmpfile-s) [Mac](https:\/\/developer.apple.com\/library\/archive\/documentation\/System\/Conceptual\/ManPages_iPhoneOS\/man3\/tmpfile.3.html) [Android](https:\/\/developer.android.com\/reference\/java\/io\/File#createTempFile\\(java.lang.String,%20java.lang.String\\))\r\n\r\nI apologize but I'm not able to find a good direct link for a pre-built system call on Apple iOS devices to do this.\r\n\r\nThis is mostly used on desktop platforms for various purposes relating to building a file such as a game save then copying it over to a permanent location as a single operation when done, so that in case of a crash temporary files won't accumulate and won't corrupt the save game without having to assemble the whole save-file in memory first.","Overall I'd rather implement exactly what people actually want\/need rather than a more general temp file API - otherwise situations like this can happen https:\/\/github.com\/libsdl-org\/SDL\/issues\/9256 \r\n\r\nThat being said, from what I understand some uses of temp files are actually extremely hard or even impossible to do in a way that's atomic and safe across different platforms. I also don't want to add an API that seems like it's intended to be safe but actually can't be in practice. So we'd need to do a lot of research into the specifics of individual use cases before implementing anything, I think.","The only two I can think of that's a reasonably sane use, one would be the example I gave above honestly and the other a strained variation of it that doesn't map well to Lua semantics at all so I'll skip it.\r\n\r\nRealistically since there's no piecemeal assembling of files in Love2D anyways only an atomic-ish \"replace the whole file with this data\" there's no way to really benefit from this, for all use-cases I can think of looking across all manner of game engines I'm poking at... the existing filesystem.write() just does what's needed.\r\n\r\nIf in doubt write to a fixed file for the purpose\/phase in the code, then .write(.read()) to its final destination is as atomic as one can get in Love2D AFAIK?","> Realistically since there's no piecemeal assembling of files in Love2D\r\n\r\nthis hasn't been true for some time, see File:write and File:seek","Fwiw on our game we had a numbered backup system for the purposes of safe save files, you don't necessarily need a temporary file; instead you rotate your files and do redundancy checks","yeah, i was actually implementing a replay system, in my case i just write it to a certain position in the save dir."],"labels":["more info needed"]},{"title":"Multithreaded job\/task system","body":"Computers, consoles, and phones all have more than one CPU core these days. But aside from audio\/video decoding, all of love's own internal code is singlethreaded. We do have APIs to run Lua code in multiple OS threads, but because each thread needs its own Lua instance it takes work to use efficiently in a lot of situations - independent heavy algorithm processing and asset loading are the two easiest ways to use love's threads right now.\r\n\r\nMost modern game engines have an integrated job\/task system they use with a thread pool, to parallelize their own work (for example render command generation or physics simulation) and often to parallelize game code, all in a fairly simple manner.\r\n\r\nIt'd be nice to have something like that in love - maybe just for internal use to start (if good uses can be found) since more infrastructure and profiling work would need to be done to make it really solid in Lua code. In particular it becomes a lot easier to know how to use and misuse a job\/task system when there's a way to visualize the different parts of a frame and what job threads are doing in a given section, and there would be details to figure out for keeping jobified Lua functions side effect free in a given job thread.\r\n\r\n[enkiTS](https:\/\/github.com\/dougbinks\/enkiTS) seems like a solid library for the base of this sort of thing.","comments":["It is also very good to transfer network interaction (especially UDP) to a child thread, otherwise lags in the game can lead to the loss of datagrams, both receiving and sending. Perhaps it would also be nice to transfer interaction with ENet to other threads.","For networking, a dedicated thread (which is already possible) might make more sense than a job system (which is also already possible, just not as integrated as I'd like). However I'm not sure even a dedicated thread is super useful most of the time for realtime networking.","> However I'm not sure even a dedicated thread is super useful most of the time for realtime networking.\r\n\r\nYes, no one is stopping you from using love2d threads for network activity in versions 7-12. There is no need to build them into the framework."],"labels":["feature"]},{"title":"Request: Add x and y params to filedropped() and directorydropped() event callbacks","body":"filedropped(file) => filedropped(file, x, y)\r\ndirectorydropped(path) => directorydropped(path, x, y)\r\n\r\nIn most cases the correct coords can be obtained using mouse.getPosition() inside those two callbacks but not always. Consider the case where the Love2D application has halted because it's waiting for a file dialog to close. If you drag a file or directory from the file dialog onto the halted application window and then close the file dialog, the application has no way of knowing the actual coords of the drop because the mouse has possibly moved between the time of the drop and the closing of the dialog. Adding x and y params to those callbacks will allow the programmer to always know the exact location of the drop.","comments":["Unfortunately SDL2 doesn't provide this with the event, but SDL3 will.","Sounds like my library can jump in here https:\/\/github.com\/EngineerSmith\/isdropping","Perhaps SDL could have an option for automatically bringing a window to the foreground (or making an attempt to) when a drag and drop event occurs (on the release of the mouse button). I think this would be acceptable window behavior (ie. not focus-stealing). Maybe also have an option for bringing the window to the foreground when a mousewheel event occurs. These options could be set with a call like SDL_SetWindowForeground(SDL_DROPFILE | SDL_MOUSEWHEEL) or something better."],"labels":["feature","library dependency","SDL3"]},{"title":"Keyboard and mouse button states are lost when love.window.setMode() is called (11.5 on Windows)","body":"I've been noticing some buggy keyboard and mouse behavior occurring after love.window.setMode() is called (this is with 11.5 on Windows). What happens is that Love2D 'forgets' all of the keys and mouse buttons that were being held down at the time setMode() was called. I know that the window gets a new Windows handle when setMode() is called--could that be the cause? It's problematic because Love2D invokes love.keyreleased() for all the keys that were being held down (even though they're still being held down). This issue also causes problems with the mouse buttons, Love2D gets confused because it doesn't know the correct state of the buttons and it doesn't invoke the pressed\/released callbacks as it should. Mouse setGrabbed() also fails to confine the pointer to the window client area if you hold down any of the mouse buttons during setMode(). Again, could the change of the window's hWnd be the root cause of all these issues? I know a lot of Win32 API calls rely on that handle.","comments":["You'll run into a bunch of issues if you recreate the window inside an input press event. I recommend doing it on release instead.","It might also be a good idea to use an event bus, for example:\r\n```\r\nfunction love.changescreenmode(width, height)\r\n  love.window.setMode(width, height)\r\nend\r\n\r\nfunction love.keypressed(key)\r\n  if key == \"f\" and love.keyboard.isDown(\"lctrl\") then\r\n    love.event.push(\"changescreenmode\", 800, 600)\r\n  end\r\nend\r\n```\r\n\r\nThe event execution will be delayed until the next frame, so you can collect everything what you need in current.","I think SDL assumes that all keys\/buttons are in an unpressed state when it creates a window because any keypress that happened prior to the window being created is considered to be outside the scope or \"jurisdiction\" of the window. The input event system ignores keypresses and mouse clicks that happen outside the window and the isDown() states need to correspond with the events received. However, in the case of subsequent windows being created (such as toggling fullscreen) maybe the handover from one window to another could be handled better because even though it's a new window there is (or should be) continuity in the application.\r\n\r\nSomething that might not be too difficult to fix: When you hold down a mouse button in relative mode (with grabbed pointer) during a love.window.setMode() call the grab stops functioning and the pointer can leave the confines of the newly created window. I think this can be solved by re-grabbing the new window. I tried this using Win32 API calls and it worked. I'm not sure if this is an issue for Love2D or SDL."],"labels":["library dependency"]},{"title":"Both key and scankey has some problems on AZERTY keyboards","body":"When getting the key and scankey with [love.keypressed(key, scancode, isrepeat)](https:\/\/love2d.org\/wiki\/love.keypressed). Looks like that's a [SDL2 issue](https:\/\/wiki.libsdl.org\/SDL2\/SDL_Scancode)\r\n\r\nTo understand how an AZERTY keyboard work, numbers are obtained by shift + \"number line\". (on linux caps + \"numbers line\"\r\n\r\nDefault keys, without shift, on this kind of keyboard is:\r\nfirst line:\r\n<pre><code>\r\n|&|\u00e9|\"|'|(|-|\u00e8|_|\u00e7|\u00e0|)|=| AZERTY line1\r\n|1|2|3|4|5|6|7|8|9|0|-|=| QWERTY line1\r\n|a|z|e|r|t|y|u|i|o|p|^|$| AZERTY line2 \r\n|q|w|e|r|t|y|u|i|o|p|[|]| QWERTY line2\r\n<\/code><\/pre>\r\n* ^ on AZERTY line 2 is dead key (only return something if\r\n\r\nOn second range,  scancode is qwerty code, and key is azerty code\r\nOn first range, for managed keys, both key and scancode are number, on keys with diacritics (2=\u00e9, 7=\u00e8, 9=\u00e7, 0=\u00e0, nothing is returned at all in both scancode and key.\r\n\r\nOn the second line, key=a scancode=q, etc but at the end of the line, where ^, there is scancode=[ and key = unknown.\r\n\r\nMaybe a way to obtain the raw keycode number as reported by driver would be better for these cases?\r\n","comments":["What OS and love version are you testing with? If you're on Linux, are you using the love AppImage or love installed through a package manager?","This is the last L\u00d6VE version, from package manager (tested on Arch x86_64 and Manjaro Aarch64 (ARM64), but after some verifications, the problem come from libSDL2, verified on other libSDL2 application (TIC-80) and libSDL2 API, I will try to report to libSDL2, and when it is resolved, will close it here.","Make sure your version of SDL2 is up to date (the latest release is 2.28.5, and 2.30 is coming shortly). If you use love's AppImage instead of relying on system package manager dependencies, then it'll use SDL 2.28.5. I believe there have been several fixes to scancode detection on Linux recently, so I think there's a high chance using the latest version will solve your issue if you have an older version.","ArchLinux packages are always up to date (that's a rolling release), its goal is to upstream bugs instead of adding patch, as most as possible. So yes, this is the latest release, but the bug is very old. I think to invest more time in SDL improvement anyway, encounter some other part where it is behind in term of functionalities on Linux, despite it was first created for Linux around 2000 (lot of good work made since).\r\n\r\n"],"labels":["library dependency","Linux"]},{"title":"Joysticks rapidly disconnect and reconnect on 11.5, but not on 11.4","body":"Encountered on macOS 12.0 (Apple Silicon). Occurs both with love application running on Rosetta and running natively.\r\n\r\nmain.lua to reproduce:\r\n\r\n```\r\nfunction love.joystickadded()\r\n    print(os.date(\"%Y-%m-%d %H:%M:%S\"), \"love.joystickadded()\")\r\nend\r\n\r\nfunction love.joystickremoved()\r\n    print(os.date(\"%Y-%m-%d %H:%M:%S\"), \"love.joystickremoved()\")\r\nend\r\n\r\nfunction love.quit()\r\n    print(os.date(\"%Y-%m-%d %H:%M:%S\"), \"love.quit()\")\r\n    return false\r\nend\r\n```\r\n\r\nExample log for 11.4:\r\n\r\n```\r\n$ \/Applications\/love-11.4.app\/Contents\/MacOS\/love .\r\n2024-01-27 20:21:18\tlove.joystickadded()\r\n2024-01-27 20:21:29\tlove.quit()\r\n```\r\n\r\nExample log for 11.5 (notice the rapid stream of prints):\r\n\r\n```\r\n$ \/Applications\/love-11.5.app\/Contents\/MacOS\/love .\r\n2024-01-27 20:21:33\tlove.joystickadded()\r\n2024-01-27 20:21:34\tlove.joystickremoved()\r\n2024-01-27 20:21:34\tlove.joystickadded()\r\n2024-01-27 20:21:35\tlove.joystickremoved()\r\n2024-01-27 20:21:35\tlove.joystickadded()\r\n2024-01-27 20:21:36\tlove.joystickremoved()\r\n2024-01-27 20:21:36\tlove.joystickadded()\r\n2024-01-27 20:21:36\tlove.joystickremoved()\r\n2024-01-27 20:21:37\tlove.joystickadded()\r\n2024-01-27 20:21:37\tlove.joystickremoved()\r\n2024-01-27 20:21:37\tlove.joystickadded()\r\n2024-01-27 20:21:38\tlove.joystickremoved()\r\n2024-01-27 20:21:39\tlove.joystickadded()\r\n2024-01-27 20:21:40\tlove.joystickremoved()\r\n2024-01-27 20:21:40\tlove.joystickadded()\r\n2024-01-27 20:21:42\tlove.joystickremoved()\r\n2024-01-27 20:21:43\tlove.joystickadded()\r\n2024-01-27 20:21:45\tlove.joystickremoved()\r\n2024-01-27 20:21:45\tlove.joystickadded()\r\n2024-01-27 20:21:46\tlove.joystickremoved()\r\n2024-01-27 20:21:46\tlove.joystickadded()\r\n2024-01-27 20:21:47\tlove.joystickremoved()\r\n2024-01-27 20:21:47\tlove.joystickadded()\r\n2024-01-27 20:21:48\tlove.joystickremoved()\r\n2024-01-27 20:21:49\tlove.joystickadded()\r\n2024-01-27 20:21:49\tlove.joystickremoved()\r\n2024-01-27 20:21:49\tlove.quit()\r\n```","comments":["This is likely a bug in SDL 2.28's joystick backend code. What joystick models do you have connected?","> This is likely a bug in SDL 2.28's joystick backend code. What joystick models do you have connected?\r\n\r\nGood question, I should have tried a couple. I can reproduce the issue with a Dualshock 4 (PS4), but not with an Xbox Wireless Controller (both over bluetooth).","Do you mind testing with this version of L\u00d6VE 11.5? It's using a prerelease version of SDL 2.30, which apparently has some changes to its macOS joystick code.\r\n\r\n[love.zip](https:\/\/github.com\/love2d\/love\/files\/14077498\/love.zip)\r\n","Thanks for the quick investigation. That version appears to work as expected, no disconnects!"],"labels":["bug","library dependency","macOS"]},{"title":"integration with zig cc","body":"that would make easier to add Zig\/C code to love2d projects, `zig cc`'s cross-compilation features are VERY good, good enough to consider this imo","comments":["Can you describe what doesn't work and what would need to change to make it work? And what sort of goals and specific platforms in mind do you have for cross-compilation? Keeping in mind most people don't ever need to compile love for any platform themselves (aside from iOS\/Android support, maybe).","On the top of my mind would be compilation speed if we use Zig \ud83e\udd14","Well, I want simply to be able to add optimizations through Zig if I want and then use them in lua,\r\nI might get it to work, but I would probably need to do it manually,\r\nI think that's an ugly solution considering that in android I have to\r\nrecompile to each architecture, so I want a build system for that,\r\nI'm mentioning the cross-compilation because I believe that it would make\r\nthe integration easier, it seems that the Zig compiler managed to compile to android\r\nwithout the android NDK https:\/\/lists.sr.ht\/~andrewrk\/ziglang\/%20%3CCACZYt3T8jACL+3Z_NMW8yYvcJ+5oyP%3Dh1s2HHdDL_VxYQH5rzQ%40mail.gmail.com%3E\r\n\r\nAs a plus the user can also add C optimization with it","I was also under impression that compiling native modules for Android would mean adding like 10 different targets including ARMv6, ARMv7, ARMv8, MIPS32, MIPS64, i686, x86_64 and probably some other...\r\n\r\nTurns out I was wrong (I did a little bit of research here: https:\/\/github.com\/love2d\/love\/issues\/2008#issuecomment-1902276500), and Android only officially supports ARMv8 at the moment, and maybe will also support RV64 in the future.\r\n\r\nThis means the same tool chain that you use to compile for RPi for example would also work for Android. The only difference is that the binaries need to be linked against bionic instead of glibc.","x86_64 is for emulator maybe?\r\nand armv* can serve for compatibility with old devices","> Well, I want simply to be able to add optimizations through Zig if I want and then use them in lua\r\n\r\nWhat sort of optimizations do you have in mind? Since love uses LuaJIT, your Lua code is JIT-compiled (on platforms where that's supported) and it also has its FFI library so you can directly call C functions or use C data structures.\r\n\r\nSo far from what's been described here, I don't really have a good picture of practical problems people ran into with current setups and how zig overcomes those problems, and how people imagine changing the compiler toolchain would actually work with love's build setup."],"labels":["more info needed"]},{"title":"love.system.getArch() proposal","body":"Similar to `love.system.getOS()`, it should just return the architecture that Love is running on. This is particularly useful for loading native code.\r\n\r\nI am now using [https](https:\/\/github.com\/love2d\/lua-https), and I want to use it on x86_64 and ARM64. Love2D can be compiled to both these architectures, but doesn't provide the interface that tells for which architecture is was compiled. If Love2D had such method, it would be easy to conditionally load the correct version of the library based on the values returned by getOS and getArch (or print a message that the combination that the user is using is not supported by the game).\r\n\r\nThis information is easy to get from LuaJIT.","comments":["And since l\u00f6ve itself by default uses luaJIT, you can just do `local arch = require('jit').arch` or something, and you have the architecture.","The jit module is always loaded when LuaJIT is used, so just `jit.arch` would work as well.","Yes, I am using `jit.arch` now to load the library conditionally. But I can also use `jit.os`, so redundancy is not a problem for `getOS()`. Why should it be for `getArch()`?","Maybe this could be added to the info table proposal in #1595 - in a new `love.system.getInfo` function or something.","In the mean time, if you add all architectures to the search path, don't love and lua automatically pick the first one that loads successfully?","Yes, I think lua will try to load all the libraries with matching name in the order that is listed in the search path, and will be satisfied with the first one that doesn't fail. Can be checked with strace.","One curious thing that I discovered just now is the inclusion of CpuArch.h from LZMA here:\r\nhttps:\/\/github.com\/love2d\/love\/blob\/0df51cf74376c7bf0e8479c276041e5c8e0f7b6b\/src\/libraries\/physfs\/physfs_lzmasdk.h#L482-L483\r\n\r\n[Newer version of this header](https:\/\/github.com\/veracrypt\/VeraCrypt\/blob\/master\/src\/Common\/lzma\/CpuArch.h) has `#define MY_CPU_NAME \"string\"` where string is the name of CPU arch. Perhaps this is what should be returned by `getArch()`?\r\n\r\nIt's also possible that with complete CMake migration (https:\/\/github.com\/love2d\/love\/issues\/1991) this preprocessor trickery is unnecessary, and CMake could just set the target architecture in a predefined macro (or could it?), and then only a small workaround would be needed for Apple platforms as they won't be using CMake.","Using preprocessor checks is much preferred to putting it in a build system generator, the latter is really inflexible and stops code from working on more than one type of system without generating things again. For example on iOS and macOS the Xcode project builds for multiple architectures together and bundles the result together. Whereas on Windows where we use CMake, I can't switch between x64 and x86 in Visual Studio without regenerating the visual studio projects and other build setup.\r\n\r\nI'm not worried about implementing that part of the code, we already do similar preprocessor checks for a few things - e.g. in [config.h](https:\/\/github.com\/love2d\/love\/blob\/12.0-development\/src\/common\/config.h).","I am curious, how many combinations of OS\/Arch does L\u00d6VE support.\r\n\r\nThis is the list of possible operating systems:\r\n\r\n- OS X (should be renamed to macOS? https:\/\/github.com\/apple\/swift\/pull\/70364)\r\n- iOS\r\n- UWP\r\n- Windows\r\n- Android\r\n- Linux\r\n- Unknown (wonder if there are 11.5 builds which report their OS as unknown)\r\n\r\nWhile it should be relatively easy to determine the possible architectures for the top of the list, the last options have some variety:\r\n\r\n1. Modern macOS runs only on x86_64 and ARM64; version 10.14.6 is the last supporting running 32-bit x86 applications, 10.6.8 is the last that could be installed on a 32-bit x86 hardware, and it is also the last version that can run PPC64 applications, 10.5.8 is the last that could be installed on PPC64 hardware, and 10.4.11 is the last that could be installed on 32-bit PPC. Are any of these versions still supported? What is the minimum requirement?\r\n2. iOS now only runs on ARM64. If L\u00d6VE can run on anything older than iPhone 5s, then there's a second option: 32-bit ARMv7 (also ARMv6 for iPhone 3G and the original iPhone, but I am sure there's no L\u00d6VE on these devices).\r\n3. UWP\/Windows have at most 4 options: x86, x86_64 (simply called x64), ARMv7 and ARM64. Starting with Windows 11, 32-bit x86 and ARMv7 are no longer supported, reducing the number to just 2. Older versions of Windows supported more architectures: XP also supported Itanium, NT up to 4.0 supported Alpha, MIPS, PPC. These operating systems are ancient, I expect some trouble compiling L\u00d6VE for these platforms.\r\n4. Android is where it gets interesting. Officially, only ARM64 is supported. However, because it's using Linux kernel and lots of open-source tools, it can be compiled for many other platforms: x86, x86_64, ARMv7, RV64 (the last one is about to become officially supported).\r\n5. Finally, Linux is a wild territory. The kernel itself runs on dozens of architectures, however every distro picks a subset of them to support. Additionally, every distro that adds L\u00d6VE to its repos choses to compile or not to compile it for one or another architecture that the distro supports. I picked a few popular ones (only checking the latest versions and not historical ones):\r\n  - Ubuntu 24.04 (Noble Numbat): building L\u00d6VE for x86_64, ARMv7, ARM64, PPC64, RV64; not building L\u00d6VE for x86 and S390X.\r\n  - Debian 13 (Trixie): building L\u00d6VE for x86, x86_64, ARMv6, ARMv7, ARM64, MIPS64, PPC64; not building L\u00d6VE for S390X.\r\n  - Alpine 3.19: building L\u00d6VE for x86, x86_64, ARMv6, ARMv7, ARM64; not building L\u00d6VE for PPC64 and S390X.\r\n  - FreeBSD is not Linux, but is compiled using similar preprocessor definitions, thus would identify as Linux: https:\/\/github.com\/love2d\/love\/blob\/50b18d1ac7f61fb3da5bf8a53e643ddabe1df786\/src\/common\/config.h#L50\r\n  I just wanted to include one BSD to the list. So FreeBSD port marks L\u00d6VE incompatible with MIPS, MIPS64 and PPC, but it is being built for x86, x86_64, ARMv6, ARMv7, ARM64, PPC64.\r\n\r\nThis is probably a pain to read, but I tried to list the architectures more or less uniformly. There are a lot of variations, and different operating systems might give them different names. Also, I was rewriting and editing my lists to be consistent as I was adding new info to it, so I might have made mistakes, used sources with false information in them, so this is for reference only, don't trust this information without confirming by doing your own research!\r\n\r\nAnyway, if you absolutely need to bundle native code with your library, compile it for these 5 architectures:\r\n\r\n- macOS x86_64\r\n- Windows x86_64\r\n- Linux x86_64\r\n- iOS ARM64\r\n- Android ARM64\r\n\r\nThis would cover like 90% of the users. And if you want to get it to 99%, then also add these 3:\r\n\r\n- macOS ARM64\r\n- Windows ARM64\r\n- Linux ARM64\r\n\r\nFinally, if you want to get it to like 99,9% then consider adding some legacy 32-bit architectures as well:\r\n\r\n- Windows x86\r\n- Linux x86\r\n\r\nI am sure Windows and UWP builds will use exactly the same binary format, so I combined them into one. Not so sure about macOS ARM64 and iOS ARM64 code, pretty sure it must be different. And once again, Linux is a completely wild territory: if you will be linking against libc (and you probably will), Linux ARM64 and Android ARM64 binaries will be different (Android is using bionic libc, and most of the Linux distros are using GNU libc). And some Linux distros like Alpine are using musl libc, so neither binary would be compatible with it. What's the solution? `love.system.getLibc()` to differentiate between `linux-gnu-arm64` and `linux-musl-arm64`? And this is not even touching BSD, because it is completely different yet identified as Linux by `getOS()`...\r\n\r\nIn conclusion, I must say that the only way to support 100% of the platforms that L\u00d6VE runs on, just avoid using native code, write in Lua. I have no other solution.\r\n\r\nIf I made a mistake somewhere, please, feel free to correct me!","> I am curious, how many combinations of OS\/Arch does L\u00d6VE support.\r\n\r\n* macOS: arm64 (Apple Silicon), x64\r\n* iOS: arm64-iOS (device), arm64-macOS (Simulator), x64-macOS (Simulator)\r\n* Windows: x86, x64 (you can support arm64 but love does not officially support it for Windows at the moment).\r\n* Linux: x64 (for the official appimage), or also x86, maybe arm64, and maybe armv7 depending on what other niche devices you want to compile for like Raspberry Pi.\r\n* Android: arm64 (device), armv7 (device), not sure about emulators\/simulators on desktop.\r\n\r\nOn macOS and iOS it's fairly easy to compile for all architectures at once and have one library binary that has everything, like I mentioned earlier. x86 on Windows is close to being extinct. If you want, you could just have one binary for macOS, one for Windows, one for Linux, one for iOS, and one for Android (or take away the last two if you don't need to support mobile).\r\n\r\n> OS X (should be renamed to macOS?)\r\n\r\nSo far we haven't wanted to break code compatibility for this, but maybe it'll happen in the future.\r\n\r\nAccording to https:\/\/store.steampowered.com\/hwsurvey\/Steam-Hardware-Software-Survey-Welcome-to-Steam?platform=mac 70% of mac steam users have an arm64 system, so you might not want to leave that out - and your x64 library will fail to work on those systems anyway unless you strip out the arm64 part of love.app to make it use Rosetta x64 emulation. :) "],"labels":["feature"]},{"title":"Emit an event for SDL_WINDOWEVENT_EXPOSED","body":"In the i3 window manager, when switching from one workspace to the workspace with an SDL application running, SDL emits the `SDL_WINDOWEVENT_EXPOSED` event. (I'm guessing this happens in other X desktops as well, and probably elsewhere, but I haven't tested anything else.)\r\n\r\nI proposed emitting `love.visible(true)` when this happens (#2003), and @slime73 thought this didn't quite align with `love.visible` well enough. She suggested waiting to add something for this until SDL3, which is also adding an `occluded` event, which will be the opposite half of `exposed`.\r\n\r\n(Edit: also, for what it's worth, I'm working on a non-game desktop app in Love. My graphics are static most of the time, so I have my own main loop where I only redraw when necessary, etc. I imagine in a game this isn't much of a concern, so I understand if this isn't added or isn't a priority.)\r\n \r\nThis issue is to track getting those events in a future Love version.","comments":[],"labels":["feature","SDL3"]},{"title":"love.filesystem.setCRequirePath doesn't work under Linux","body":"I've made a minimum reproducible example:  \r\n[requirePathTest.zip](https:\/\/github.com\/love2d\/love\/files\/13749165\/requirePathTest.zip)  \r\n\r\nmain.lua\r\n```lua\r\nlocal https\r\nlocal os = love.system.getOS()\r\nif os == \"Windows\" then\r\n    love.filesystem.setCRequirePath(\"windows\/??\")\r\n    https = require(\"https\")\r\nelseif os == \"Linux\" then\r\n    love.filesystem.setCRequirePath(\"linux\/??\")\r\n    https = require(\"https\")\r\nelse\r\n    print(\"os is not windows, not loading https\")\r\nend\r\nprint(https)\r\n```\r\n\r\nAnd then have the https.dll under the folder windows and the https.so under the folder linux. You can probably use empty files, if you don't want to download the zip. Just make sure you get the right error (not found).   \r\nThis code works on windows but not on linux.    \r\nIf you move the https.so in root dir, it will work, even though we've set the requireCPath to a subfolder.   \r\n```\r\nError\r\n\r\nmain.lua:8: module 'https' not found:\r\nno field package.preload['https']\r\nno 'https' in LOVE game directories.\r\nno file 'https' in LOVE paths.\r\nno file '.\/https.lua'\r\nno file '\/usr\/share\/luajit-2.1.0-beta3\/https.lua'\r\nno file '\/usr\/local\/share\/lua\/5.1\/https.lua'\r\nno file '\/usr\/local\/share\/lua\/5.1\/https\/init.lua'\r\nno file '\/usr\/share\/lua\/5.1\/https.lua'\r\nno file '\/usr\/share\/lua\/5.1\/https\/init.lua'\r\nno file '.\/https.so'\r\nno file '\/usr\/local\/lib\/lua\/5.1\/https.so'\r\nno file '\/usr\/lib\/x86_64-linux-gnu\/lua\/5.1\/https.so'\r\nno file '\/usr\/local\/lib\/lua\/5.1\/loadall.so'\r\n\r\n\r\nTraceback\r\n\r\n[C]: in function 'require'\r\nmain.lua:8: in main chunk\r\n[C]: in function 'require'\r\n[C]: in function 'xpcall'\r\n[C]: in function 'xpcall'\r\n```  \r\n  \r\nLove2D version: 11.3 and 11.5 (probably 11.4 as well)\r\n\r\n","comments":["I cannot reproduce this in WSL2 running Debian 12.\r\n\r\nCan you try if loading the `https.so` standalone using LuaJIT works?","I can reproduce this in WSL1 running Ubuntu 20. The original issue was produced on a native Ubuntu machine.      \r\n![image](https:\/\/github.com\/love2d\/love\/assets\/19154414\/b56bb31c-5167-4bd5-a41b-73cabc64e676)    \r\nI can load the https.so if I place it in root dir with love2d, so there's no point in testing LuaJIT specifically.   \r\n(I assume LuaJIT doesn't have setCRequirePath)  ","Place breakpoint in this line and see what is `filepath` and the resulting `handle`.\r\n\r\nhttps:\/\/github.com\/love2d\/love\/blob\/11.5\/src\/modules\/filesystem\/wrap_Filesystem.cpp#L836\r\n\r\nAgain, can't reproduce it using 11.5 AppImage in Debian 12 in WSL2.\r\n![gambar](https:\/\/github.com\/love2d\/love\/assets\/7500438\/f917c2c9-0d50-43c6-9aa1-8a455b4adde9)\r\n\r\n","I don't have my build toolchain set up. Best I can do is for you to provide\nme with a custom build for linux with that variable printed in console,and\nI'll test it in January (I'm not available for the rest of the month)\n","Keep in mind operating systems cannot directly load dll \/ .so files that are inside a zip (or .love file). You can copy them to the save directory in that situation.","They are not in a zip\/love in my case. Using them straight from source\nfiles and opening the game using lovec .\n","Does it work if you specify the folder name when running the game instead of using `.`?","Some further development, I can also reproduce this on a different Windows\n(10) machine, so it seems it's not related to the OS on first glance.\n","@slime73 On windows at least, it doesn't make a difference using the folder\nname.\n","If the Windows 10 machine happen not to have VS2022 redistributable installed, that explains everything. Currently our CI compiles lua-https using VS2022 runtime.","It has love 11.5 installed, shouldn't that be enough?\nIt's not mentioned in the wiki that you need VS2022 redistributable\ninstalled to use setCRequirePath. Also if I used love 10, what version of\nthe redistributable would I need? 2017?\n","And yes, it most likely it doesn't have it as it's a clean install of\nWindows.\n","Downloaded VS 2015-2022 redist and now it works. Is it a similar issue for\r\nlinux as well?\r\n","LOVE 11.5 uses VS2013 runtime compiled through AppVeyor. GitHub Actions only provides VS2019 as their oldest toolchain. In Linux, it's likely that your glibc is too old which can only be solved by recompiling lua-https yourself or updating your distro.","Why is the error \"module not found\" and not something else? How does an\noutdated toolchain make a file invisible to love?\n","Because [`SDL_LoadObject`](https:\/\/wiki.libsdl.org\/SDL2\/SDL_LoadObject) (which LOVE uses for its C loader) doesn't provide neat way to tell if the file doesn't exist or fails to load.","Makes sense. Would you consider doing SDL_GetError (with SDL_ClearError\nbefore doing SDL_LoadObject), to get more info or just leave it as is?\n","The dll load function (SDL_LoadObject in this case) is called for every viable extension (e.g. both `.dylib` and `.so` on macOS) and for every search path specified in setCRequirePath. That'd be a lot of error messages for you to sort through - most of them useless information - if it dumped them all out.\r\n\r\nAlso keep in mind Lua will run the dll loader function even for regular lua files, so it would dump \"failed to load dll at [path]\" a bunch of times for regular Lua files.","I see. Okay, we can close this issue.\n","Did you figure out the Linux issue?","If Windows needs VS2022 redistributable, what would be the linux equivalent for this requirement?","love for windows is bundled with the C\/C++ redistributable DLLs that it needs to run on its target platforms, it doesn't need a separate download. For example the official love 11.5 downloads for Windows include VS2013's `msvcp120.dll` and `msvcr120.dll`, since it's built with VS2013.\r\n\r\nThe love appimage is similarly self-contained, it has all the C\/C++ library dependencies it needs in order to run on target systems down to the minimum supported one, inside the AppImage container.\r\n\r\nOn the other hand if you're using someone's build of love from a package manager on Linux, usually it's not drop-in runnable on other systems because it might depend on libraries that are elsewhere on your computer. Similarly if you're using an unofficial or otherwise custom packaged build on Linux you'll need to make sure it's runnable where you want on your own.","If it's glibc issue then there's no way other than updating your distro."],"labels":["more info needed","Linux"]},{"title":"Request: For future iOS release, please set SupportsOpeningDocumentsInPlace to true","body":"Will let users easily add projects to their love2d documents folder from other folders on their iOS device instead of needing to connect to iTunes on their Mac to do the same. \r\n\r\nThanks!","comments":[],"labels":["feature","iOS"]},{"title":"[12.0] love.graphics.print(): misordered characters when using fallback fonts","body":"**Version:** 12.0-development (8951635)\r\n\r\n**Repro:** [12-fallbacks.zip](https:\/\/github.com\/love2d\/love\/files\/13593093\/12-fallbacks.zip)\r\n\r\n**Problem:** When drawing text with `love.graphics.print()` using a font that has been configured with fallbacks, glyphs originating from the fallback fonts may appear in the wrong place.\r\n\r\n\r\nExpected appearance of text, using NotoSans with NotoSansSymbol2 as a fallback:\r\n\r\n`a\u21e8b\u21e8c`\r\n`The\u21e8quick\u21e8brown\u21e8fox`\r\n`a\u23cea\u23ce\u21e8\u23ce`\r\n\r\n\r\nObserved:\r\n\r\n`a\u21e8\u21e8bc`\r\n`The\u21e8\u21e8\u21e8quickbrownfox`\r\n`a\u23ce\u23ce\u21e8\u23cea`\r\n\r\n\r\nThe expected order appears in L\u00d6VE 11.5:\r\n\r\n![11 5](https:\/\/github.com\/love2d\/love\/assets\/23288188\/526eb0dc-55dd-46c4-8f05-c594d34848fd)\r\n![12 0-dev-8951635](https:\/\/github.com\/love2d\/love\/assets\/23288188\/9be41889-c9cd-428f-8d63-af7d3b8d2dd6)\r\n","comments":[],"labels":["bug"]},{"title":"Warning in console when running `love` on MacOS Sonoma","body":"Hello,\r\n\r\nSince I updated my MacBook to Sonoma (MacOS 14.0), I came accross the following error when running the `love` command in the terminal:\r\n\r\n```\r\n2023-10-28 13:47:24.355 love[74482:608153] WARNING: Secure coding is not enabled for restorable state! \r\nEnable secure coding by implementing NSApplicationDelegate.applicationSupportsSecureRestorableState: and returning YES.\r\n```\r\n\r\nMy `love` version is the following:\r\n\r\n```zsh\r\n~ love --version\r\nLOVE 11.4 (Mysterious Mysteries)\r\n```\r\n\r\nIt doesn't affect the working of `love` in any way (as far as I know), but I didn't see it reported here yet so here you go \ud83d\ude42.\r\n\r\n---\r\n\r\nSpecs:\r\n```\r\nChip - Apple M1 Max\r\nMemory - 32 GB\r\nmacOS - 14.0 (23A344)\r\n```","comments":["I'm seeing the same warning when running a LOVE game on Mac. With 11.4 I was seeing the above error message, now on 11.5 I'm seeing this (slightly different):\r\n\r\n`love[19276:1446537] WARNING: Secure coding is automatically enabled for restorable state! However, not on all supported macOS versions of this application. Opt-in to secure coding explicitly by implementing NSApplicationDelegate.applicationSupportsSecureRestorableState:.`\r\n\r\nMy specs are Apple M2 Max, 32GB Memory, MacOS 14.0\r\n\r\nLooking around online, I'm having trouble figuring out if I should ignore this warning, or if it should be addressed first before sharing it with players. If anyone is aware, let me know.","It's 100% ignorable, love does not use any API that it covers. \r\n\r\nI think Apple just wasn't able to limit the warning to only apps that use relevant features (or they made a mistake when trying to do so)."],"labels":["library dependency","macOS"]},{"title":"Canvas rendering issue with Metal in 12.0","body":"L\u00f6ve 12.0 - MacOSX - Monteray 12.5.1 - Mac Studio (2022)\r\n\r\nCame across some weird rendering artifacts when testing canvas drawing in 12.0 with the Metal renderer on a new(ish) Mac.\r\nDrawing canvases draws a bunch of weird flickering artifacts around the edge of where the canvas is drawn.\r\n\r\nThis doesn't happen for me with the same code in 11.4, and also doesn't happen in 12.0 when `t.renderers = {\"opengl\"}` is set in the `conf.lua`\r\n\r\nmain.lua:\r\n```lua\r\nlove.load = function()\r\n  Canvas = love.graphics.newCanvas(32, 32)\r\nend\r\n\r\nlove.draw = function()\r\n  love.graphics.clear(0, 0, 0, 1)\r\n  love.graphics.setCanvas(Canvas)\r\n    love.graphics.clear(255, 255, 255, 1)\r\n  love.graphics.setCanvas()\r\n  love.graphics.draw(Canvas, 0, 0, 0, 4, 4)\r\nend\r\n```\r\n\r\nWhen run you'll see a bunch of flickering artifacts around the outside of where the canvas is drawn - moving the canvas moves the artifacts, it's always in the area nearby. Changing the size\/scale of the canvas or what was drawn to the canvas had doesn't seem to affect it. Multiple canvases give multiple effects (it's kinda sick ngl)\r\n\r\nExample visual attached\r\nhttps:\/\/github.com\/love2d\/love\/assets\/77150506\/eb9fb955-1a6d-49d4-9be8-b08032f5c557","comments":["Tried replication with a couple other machines, an old Macbook Pro w\/ Intel Iris and an old iMac w\/ AMD Radeon - both ran fine without seeing any artifacts at all, so might be specific to the Apple M1 Max chip\r\n\r\nNot sure if helpful but the MBP listed Metal Support as \"Metal GPUFamily macOS 1\", the iMac listed it as \"Metal GPUFamily macOS 2\" but the Mac Studio lists it as \"Metal GPUFamily Apple 7\""],"labels":["bug","macOS","iOS"]},{"title":"`love.timer.sleep(0.001)` locks game to 500fps rather than 1000fps","body":"The default `love.run` yields via `love.timer.sleep(0.001)` to reduce CPU usage.\r\n\r\nI'm just curious why the result is a stable 500fps rather than 1000fps?","comments":["The duration of sleep is ultimately up to what the OS scheduler decides. Recent Windows updates changed its standard OS sleep function to have a minimum possible duration of 2ms apparently, instead of 1ms.\r\n\r\nMicrosoft also introduced a new sleep function recently which can theoretically have shorter durations (although I'm not sure how short exactly, in practice). love calls into SDL2's sleep function which doesn't use that new API, although SDL3 exposes a new function which does.","Here's the relevant SDL3 change. love will use the new API eventually, once SDL3 is released and stable. https:\/\/github.com\/libsdl-org\/SDL\/pull\/6232","Had the same issue a few days ago actually, I wanted a 8000hz thread to poll input at 8000hz (those new 8khz mouses) but love.timer.sleep couldn't wait less than 1ms.\r\n\r\nMy solution was love2d uses LuaJIT, so you have access to C functions too through ffi.cdef, and nanosleep worked like a charm.\r\n\r\nI'm guessing this is also a solution love2d could make use of natively. ","Just a heads up, love.event.pump is not safe to call on non-main threads. Multiple events within a single frame won't be missed if it's called once per frame though.","Unless you are explicitly capturing timestamps at 8000hz, there is precisely zero benefit to do anything other than pumping events at the start of frame. Subtick input processing can easily be implemented by processing the pumped events individually and emit events when a change happens (as opposed to lumping them into a \"current frame state\")\n\nIf you need to capture precise timestamps at 8000Hz, you should be rolling your own message loop with `user32.GetMessage` in a blocking thread dedicated to listening for WM_INPUT and call `kernel32.QueryPerformaneCounter` as the first thing after GetMessage unblocks. \n\nSDL (and by extension Love) is completely unsuitable for precise message timestamping because they uses PeekMessage -- which polls rather than blocks -- for both SDL_PollEvent and SDL_WaitEvent","Well I'd love to talk more about my project but the specifics of that aren't relevant here. It was just anecdotal and the main point was there is an easy way to perform more granular sleeps on Love2D.\r\n\r\nAnd I'm on Linux, Windows doesn't have nanosleep. \r\n\r\nI believe on Windows your options are extremely limited. The only way to perform sub 1ms sleeps without using busy-waits is waitable timer objects. Any modules you use on C or C++ is either using waitable timer objects or a busy loop with QueryPerformaneCounter under the hood. Waitable timer objects poses it's own issues since they aren't as fast as busy-waits or regular sleeps despite the higher precision.\r\n\r\nSo you're left with choosing between the cpu intensive busy wait, or the slower waitable timer object. ","On windows, GetMessage() blocks the thread until there is a message that satisfies the specified filter. In other words, it is the lowest possible latency method to timestamp when a message is received by the process, far more accurate than any busy-wait loops could possible get you. ","Did you forget the topic of this issue? You started this issue raising question about the resolution of love.timer.sleep()\r\n\r\nInputs and GetMessage() are not relevant to this issue.","Ultimately there's not much we can do here I guess. You can always redefine your own `love.run` with the `love.timer.sleep` call removed.","> Did you forget the topic of this issue? You started this issue raising question about the resolution of love.timer.sleep()\r\n> \r\n> Inputs and GetMessage() are not relevant to this issue.\r\n\r\nIt's in response to your use case of wanting to sample 8000Hz inputs. I'm saying that using Love2D for that premise is wrong to begin with, you should be rolling your own input thread with `GetMessage`.","just in case , i made a fork of love2d that remove love.timer.sleep(0.001) : https:\/\/github.com\/quentin452\/love-experiments","You don't need to fork love to do that, you can customize [love.run](https:\/\/love2d.org\/wiki\/love.run) already.\r\n\r\nHowever, an extra 1-2ms per frame is not a drastic improvement in most situations. Don't be fooled by the big FPS numbers, they aren't linear. :) ","does love.timer.sleep(0) yield at all?","It can, however the behaviour is pretty dependent on outside factors. Here's an article talking about it on Windows: https:\/\/randomascii.wordpress.com\/2012\/06\/05\/in-praise-of-idleness\/","> :)\r\n\r\nlike i want to optimize my game , when i see more FPS i am happy :D","Then look up how many watts your PC is consuming running at full speed, and see the costs of electricity to be less happy :D"],"labels":["library dependency","Windows","SDL3"]},{"title":"iOS: love.textinput(text) callback stops working after Love app looses focus","body":"Noted when using love console libraries love-console and Vudu that unable to enter further text in console after returning to Love app after Love app looses focus (e.g. after utilizing browser app and returning to Love app). Problem seems to be in love.textinput callback; love.keypressed() still works after returning to Love app after Love app looses focus. Problem does not occur in Love on Linux or Mac. \r\n\r\nTested with the following script (top left of screen shows input received by keypressed; below that shows input received by textinput which stops showing user input after Love app looses focus)\r\n\r\nfunction love.load()\r\nlove.keyboard.setKeyRepeat(true)\r\nlove.keyboard.setTextInput(true)\r\nkeyvalue = \"\"\r\ntextvalue = \"\"\r\nend\r\n\r\nfunction love.keypressed(key, scancode, isrepeat)\r\n\tif key then keyvalue = key end\r\nend\r\n\r\nfunction love.textinput(text)\r\n\tif text then textvalue = textvalue..text end\r\nend\r\n\r\nfunction love.update(dt)\r\nend\r\n\r\nfunction love.draw()\r\n  love.graphics.setColor(0,1,0)\r\n  love.graphics.print(keyvalue,20,30)\r\n  love.graphics.setColor(0,0,1)\r\n  love.graphics.print(textvalue,20,80)\r\nend\r\n\r\nFyi,\r\n\r\nThanks","comments":["Fyi,\r\n\r\nTo clarify this bug, I did further testing. It turns out that love.textinput(text) callback works if the love app is moved to the background and then comes back to the foreground again (i.e. LOVE window loses and gains focus); it doesn't work when one runs LOVE app 'split screen' with another app and go to the other app and type in the other app then return to LOVE app (love.textinput(text) no longer works in that case (but love.keypressed(key) still does in that situation). \r\n\r\nAnd, if I try and keep love.textinput on by putting \r\n```\r\nlove.keyboard.setTextInput(true)\r\n```\r\n\r\nInside love update:\r\n```\r\nfunction love.update(dt)\r\nlove.keyboard.setTextInput(true)\r\nend\r\n```\r\n\r\nWhat ends up happening is that when one tries to type in the app one is using split screen, it is very difficult to do so (almost every keystroke instead gets sent back to the LOVE app) despite the cursor being focused on and otherwise being able to use functions on the other app in the split screen mode\r\n\r\n*Interestingly, there is a strategically placed one statement workaround that remedies this bug:\r\nPlace:\r\n```\r\nlove.keyboard.setTextInput(true)\r\n```\r\n\r\ninto the love.keypressed(key) callback. \r\n\r\nThe love.textinput(text) then works fine in split screen mode after that! :-)\r\n\r\n\r\n","One more piece of the puzzle: it looks like calls to `love.window.setMode` reliably cause L\u00d6VE on iOS to stop triggering `love.textinput` events.\r\n\r\nCombined with the rest of this issue above, it seems like textinput on iOS is just really fragile. Resizing breaks textinput, and something else is breaking textinput on any\/most frames, that necessitates the hack above.","The text input field in iOS is part of the window, so it makes sense that it wouldn't stay around longer than the window if it's destroyed via `setMode`. love's code might be able to restore it manually afterward though.\r\n\r\nFor situations where another app takes focus and the text input field doesn't come back afterward, have you tried re-enabling text input in `love.focus` instead of every frame in `love.update`?\r\n\r\nIf `love.focus` is not called in that multi-window situation, that's probably the root issue.\r\n","I'll let @SugarRayLua answer that, but FYI we're currently enabling text input in `love.keypressed` rather than `love.update`.","My question remains the same. :) ","> The text input field in iOS is part of the window, so it makes sense that it wouldn't stay around longer than the window if it's destroyed via `setMode`.\r\n\r\n:bulb: :boom:","Thanks, Everyone for the additional input.\r\n\r\nI hadn't used love.focus before, but inserting:\r\n```\r\nfunction love.focus()\r\n     love.keyboard.setTextInput(true)\r\nend\r\n```\r\n\r\nInto that test snippet at the top of this issue did not restore test input functionality in the test snippet\r\nfyi"],"labels":["bug","library dependency","iOS"]},{"title":"Support to-be-closed variable in Lua 5.4 for LOVE objects.","body":"Just a little good addition for Lua 5.4 support, although we don't use Lua 5.4 for official builds.\r\n\r\n> A to-be-closed variable behaves like a constant local variable, except that its value is closed whenever the variable goes out of scope, including normal block termination, exiting its block by **break\/goto\/return**, or exiting by an error. \r\n\r\nExample use-case:\r\n```lua\r\nfunction loadText(path)\r\n    local file <close> = love.filesystem.openFile(path, \"r\")\r\n    return file:read()\r\n    -- file:close() and file:release() is called automatically.\r\nend\r\n\r\nfunction rasterizeStuff(stuff)\r\n    local canvas <close> = love.graphics.newCanvas()\r\n    love.graphics.push(\"all\")\r\n    love.graphics.reset()\r\n    love.graphics.setCanvas(canvas)\r\n    love.graphics.draw(stuff)\r\n    love.graphics.pop()\r\n    return canvas:newImageData()\r\n    -- canvas:release() is called automatically.\r\nend\r\n```","comments":[],"labels":["feature"]},{"title":"Unexpected outcomes when using RTL in L\u00f6ve12","body":"It seems that `Font:setFallbacks( )` is complicated in how it works in the background, I tested it more to see if it works perfectly with RTL languages when used together with LTR fonts. And I apologize for not testing it thoroughly the first time. The results as follows:\r\n\r\n- When RTL (Arabic for example) font used as the fallback, its words are displayed correctly, but organized wrongly from left to right and with no spaces between the words.\r\n\r\n![RTL fallback](https:\/\/github.com\/love2d\/love\/assets\/7659180\/40dc4042-256c-49f9-9794-d4f860b517b0)\r\n\r\nIt's supposed to look like this \"\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0639\u0631\u0628\u064a\u0629\".\r\n\r\n- When LTR (English for example) font used as the fallback, its words are displayed and organized correctly, but with no spaces between them.\r\n\r\n![LTR fallback](https:\/\/github.com\/love2d\/love\/assets\/7659180\/175cff4f-5525-43e3-9749-c3c8af7506fb)\r\n\r\n- A Third case is, if you print both texts in one string, the result will be different depending on who is the primary font or the fallback font, or who you started writing with.\r\n\r\nThis is the code, switch the order of the fonts and comment\/uncomment the prints as you see fit.\r\n\r\n```lua\r\nlocal love = require(\"love\")\r\n\r\nlocal font = love.graphics.newFont(\"NotoSans-Regular.ttf\", 30)\r\nlocal fallback = love.graphics.newFont(\"NotoNaskhArabic-Regular.ttf\", 30)\r\nlove.graphics.setFont(font)\r\nfont:setFallbacks(fallback)\r\n\r\nfunction love.draw()\r\n    love.graphics.print(\"\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0639\u0631\u0628\u064a\u0629\")\r\n    love.graphics.print(\"Hello world\")\r\n    love.graphics.print(\"\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Hello world\")\r\nend\r\n```\r\n\r\nThere is another problem, it happens when using `love.graphics.printf`. It happens with RTL  (Arabic in this case) and not LTR fonts. It displays the text like this when using a big limit:\r\n\r\n![Screenshot_20230610_214302](https:\/\/github.com\/love2d\/love\/assets\/7659180\/4378228b-a4f9-47ee-844c-e09c5444a037)\r\n\r\nI used this code:\r\n\r\n```lua\r\nlocal love = require(\"love\")\r\n\r\nlocal font = love.graphics.newFont(\"NotoNaskhArabic-Regular.ttf\", 30)\r\nlove.graphics.setFont(font)\r\n\r\nfunction love.draw()\r\n    love.graphics.printf(\"\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0639\u0631\u0628\u064a\u0629\", 0, 0, 900, \"right\") -- This line will display correctly in vscode\r\nend\r\n```\r\n\r\nThe fonts [here](https:\/\/github.com\/love2d\/love\/files\/11713129\/fonts.zip) to test with.\r\n","comments":["Huh, there is one BIG topic about this\r\nhttps:\/\/faultlore.com\/blah\/text-hates-you\/\r\nSo I guess love2d needs a big beautiful handmade font rendering framework to support this. \r\nOr not.","The current version (L\u00d6VE 11.4) actually has good support for font and text rendering, it also supports unicode. What is missing from the current system is support for text direction and shaping, which can be done manually. With L\u00d6VE 12, support for HarfBuzz was added and the mentioned shortcomings should be gone, it only needs testing and fixing to make sure it's working as intended.","> With L\u00d6VE 12, support for HarfBuzz was added and the mentioned shortcomings should be gone, it only needs testing and fixing to make sure it's working as intended.\r\n\r\nWoah, harfbuzz is good news\r\n","[48e23a0](https:\/\/github.com\/love2d\/love\/commit\/48e23a048deb16b563e3947187f9484482daa352) seems to have fixed the printf wrapping issue.","Yes it works. But there is a small issue, by wrapping it takes with it the last letter from the previous word:\r\n![Screenshot_20230909_211801](https:\/\/github.com\/love2d\/love\/assets\/7659180\/ba4114fc-46a0-4cec-826d-c6dcde63b612)\r\n\r\nit's supposed to look like this:\r\n![Screenshot_20230909_212311](https:\/\/github.com\/love2d\/love\/assets\/7659180\/dd5eb689-603a-4761-a4b7-a8f6b5bcc122)\r\n\r\nYou can test it using the code above and change the limit to 100. Thanks (\u0634\u0643\u0631\u0627)."],"labels":["bug"]},{"title":"love2d doesn't list items inside the root level of a symlink on Windows","body":"First of all, I love love2d, it is a great engine!\r\n**Issue**\r\n`love.filesystem.getDirectoryItems()` won't list any files inside a symlink, except if it is at least one level in. Symlinks are enabled. I am using love 11.4 on Windows 10.\r\n\r\n**Reproduce**\r\n1. Create a new folder\r\n2. Create a file with subdirectories: `real\/inner\/test.txt`\r\n3. Create a directory symlink with `mklink \/D sym real`\r\n4. Create main.lua\r\n```lua\r\nprint(\"Real dir: \"..#love.filesystem.getDirectoryItems 'real')\r\nprint(\"Real dir inner: \"..#love.filesystem.getDirectoryItems 'real\/inner')\r\nprint(\"Sym dir: \"..#love.filesystem.getDirectoryItems 'sym')\r\nprint(\"Sym dir inner: \"..#love.filesystem.getDirectoryItems 'sym\/inner')\r\n\r\nlove.event.quit()\r\n```\r\n5. Run `lovec .`\r\n\r\n**Expected output:**\r\n```\r\nReal dir: 1\r\nReal dir inner: 1\r\nSym dir: 1\r\nSym dir inner: 1\r\n```\r\n**Actual output**\r\n```\r\nReal dir: 1\r\nReal dir inner: 1\r\nSym dir: 0\r\nSym dir inner: 1\r\n```","comments":["This is probably where it's failing - the filetype would be symlink rather than directory, so physfs doesn't try to enumerate it as a directory: https:\/\/github.com\/love2d\/love\/blob\/93c2709f7ce7e2256a6f334a86bd20aad57bc547\/src\/libraries\/physfs\/physfs.c#L2585-L2586"],"labels":["bug","library dependency"]},{"title":"Add Microphone access for iOS in Love 12.0 [enhancement]","body":"Would be great if could add microphone access for Love2D in the future Love 12.0 release. I can tell from love.audio.getRecordingDevices() that Love can already detect an iOS microphone. Thanks for the consideration.","comments":["If the microphone is detected, which part isn't working for you? \r\n\r\nYou'll probably need to make sure you have this set in your info.plist if you don't already: https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsmicrophoneusagedescription","Thanks, @slime73. I was helping out test another Love2D developers app that works on his Android Love and Desktop. I am supposed to push a button to start recording but when I do so the Love2D app crashes without an error message. I then tried out the sample code from this Android Love 2D developer's microphone test:\r\nhttps:\/\/love2d.org\/forums\/viewtopic.php?t=88151, and it also acknowledge that it detected a microphone and was ready to record but then crashed when I released the mouse to record (without generating an error message).\r\n\r\nI can try in the future setting the info.plist in my Xcode build of Love 2D iOS; if it wasn't already set up in the Xcode download project then I likely hadn't set it. If that doesn't work, I can write back. ","I did some testing. I could get the permission popup to appear when `RecordingDevice:start` is called by adding that key\/value to Info.plist, but it still hard-crashed inside Apple's OpenAL implementation even with that.\r\n\r\nIt's possible MojoAL (#1764) might allow it to work, I'll see about reevaluating that before 12.0 is done in case it no longer has the bugs it had when I last checked.\r\n\r\nThat being said, the documentation for `love.audio.getRecordingDevices` does already say that iOS isn't currently supported.\r\n\r\nFor 11.5 I've updated it to fail without hard-crashing."],"labels":["iOS"]},{"title":"[Build Failed on RISC-V] Please consider updating autotool scripts","body":"Hi,\r\n\r\nThis is Jimmy from the ArchLinux RISC-V Team.\r\n\r\nThe `config.guess` file contained in the source code is too old to build on the latest architecture, such as RISC-V.\r\n\r\nThis can be fixed by generating new tarball by latest autotools.\r\n\r\nHere's a patch below(in ArchLinux PKGBUILD file):\r\n\r\n```diff\r\n--- PKGBUILD\r\n+++ PKGBUILD\r\n@@ -12,6 +12,12 @@ depends=('luajit' 'freetype2' 'mpg123' 'openal' 'libvorbis' 'libmodplug' 'sdl2'\r\n\r\n+prepare() {\r\n+  cd $pkgname-$pkgver\r\n+  autoupdate\r\n+  autoreconf -fiv\r\n+}\r\n+\r\n```\r\n\r\nWe propose a one-time fix for this via upstream, which benefits all downstream package maintainers.\r\n\r\nThanks.","comments":["I think this is only about the generated love linux source-with-automagic-already-run downloads in our releases section, rather than our actual untouched source code, right? (`config.guess` is not contained in the source code in this git repository.)\r\n\r\nIn general I don't think we usually change existing older released versions of love unless something is broken with their setup on platforms we already officially support (which does not include RISC-V architectures right now).","With updated Autotools, does LOVE compiles on such RISC-V platforms? If so could you send a PR to acomodate the necessary changes?","This is interesting. Sure, Love will compile on hardware with Risc-V architechture. The development is still ongoing in the newest kernels 6.6. because not all is implemented yet.\r\nDebian, Freebsd, Archlinux offichially support Risc-V.\r\nPlease integrate it. It will work later."],"labels":["more info needed","Linux"]},{"title":"Support `vibrate(intensity, mode)` for iOS","body":"On `iOS 10.0+`, `iPadOS 10.0+` and `Mac Catalyst 13.1+`, it is possible for iPhones and iPads to generate different type of viberations, Not just a fixed 400ms one. Just Mapping seconds to `UIFeedbackGenerator`'s subclasses like this:\r\n```objective-c\r\nif (@available(iOS 10.0, *)) {\r\n\t\/\/ iOS 10.0 and above\r\n\tUIImpactFeedbackGenerator *impact = nil;\r\n\tif (seconds >= 0.5 && seconds < 1.5) {\r\n\t\timpact = [[UIImpactFeedbackGenerator alloc] initWithStyle:UIImpactFeedbackStyleLight];\r\n\t} else if (seconds >= 1.5 && seconds < 2.5) {\r\n\t\timpact = [[UIImpactFeedbackGenerator alloc] initWithStyle:UIImpactFeedbackStyleMedium];\r\n\t} else if (seconds >= 2.5) {\r\n\t\timpact = [[UIImpactFeedbackGenerator alloc] initWithStyle:UIImpactFeedbackStyleHeavy];\r\n\t} else {\r\n\t\treturn;\r\n\t}\r\n\t[impact impactOccurred];\r\n\treturn;\r\n}\r\n```","comments":["And iOS13+ seems have even more options, I'll test them later","Add the second param to vibrate method with default value `default`, while on iOS `default` means the old fixed 500ms vibration, so it won't affect existing codes:\r\n```c++\r\n\/\/ src\/modules\/system\/wrap_System.cpp\r\nint w_vibrate(lua_State *L)\r\n{\r\n\tdouble seconds = luaL_optnumber(L, 1, 0.5);\r\n\tconst char *mode = luaL_optstring(L, 2, \"default\");\r\n\tinstance()->vibrate(seconds, mode);\r\n\treturn 0;\r\n}\r\n```\r\nAnd ignore mode param on Android(For now):\r\n```c++\r\n\/\/ src\/modules\/system\/System.cpp\r\nvoid System::vibrate(double seconds, const std::string &mode) const\r\n{\r\n#ifdef LOVE_ANDROID\r\n\tlove::android::vibrate(seconds);\r\n\tLOVE_UNUSED(mode);\r\n#elif defined(LOVE_IOS)\r\n\tlove::ios::vibrate(seconds, mode);\r\n#else\r\n\tLOVE_UNUSED(seconds);\r\n\tLOVE_UNUSED(mode);\r\n#endif\r\n}\r\n```\r\nThen process them on iOS:\r\n```objective-c\r\nvoid vibrate(const double intensity, const std::string &mode)\r\n{\r\n\t@autoreleasepool\r\n\t{\r\n\t\tif (mode != \"default\" && @available(iOS 10.0, *)) {\r\n\t\t\t\/\/ iOS 10.0 and above\r\n\t\t\tUIImpactFeedbackGenerator *impact = nil;\r\n\t\t\tif (mode == \"light\") {\r\n\t\t\t\timpact = [[UIImpactFeedbackGenerator alloc] initWithStyle:UIImpactFeedbackStyleLight];\r\n\t\t\t} else if (mode == \"medium\") {\r\n\t\t\t\timpact = [[UIImpactFeedbackGenerator alloc] initWithStyle:UIImpactFeedbackStyleMedium];\r\n\t\t\t} else if (mode == \"heavy\") {\r\n\t\t\t\timpact = [[UIImpactFeedbackGenerator alloc] initWithStyle:UIImpactFeedbackStyleHeavy];\r\n\t\t\t}\r\n\t\t\tif (@available(iOS 13.0, *)) {\r\n\t\t\t\t\/\/ iOS 13.0 and above\r\n\t\t\t\tif (mode == \"soft\") {\r\n\t\t\t\t\timpact = [[UIImpactFeedbackGenerator alloc] initWithStyle:UIImpactFeedbackStyleSoft];\r\n\t\t\t\t} else if (mode == \"rigid\") {\r\n\t\t\t\t\timpact = [[UIImpactFeedbackGenerator alloc] initWithStyle:UIImpactFeedbackStyleRigid];\r\n\t\t\t\t}\r\n\t\t\t\tif(impact != nil){\r\n\t\t\t\t\t[impact impactOccurredWithIntensity:(intensity < 0 ? 0 : (intensity > 1 ? 1 : intensity))];\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(impact != nil){\r\n\t\t\t\t[impact impactOccurred];\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tAudioServicesPlaySystemSound(kSystemSoundID_Vibrate);\r\n\t}\r\n}\r\n```","Per my comment in the pull request (https:\/\/github.com\/love2d\/love\/pull\/1905#issuecomment-1445454068), I don't really feel good about having platform-specific function parameters. I wonder if some of Android's haptic feedback APIs are similar enough to the ones you've investigated for iOS that the two backends can both implement a mode parameter.","Android actually has similar \"light\", \"medium\" and \"heavy\" [haptic feedbacks](https:\/\/source.android.com\/docs\/core\/interaction\/haptics\/haptics-ux-foundation). Like `EFFECT_TICK`, `EFFECT_CLICK` and `EFFECT_HEAVY_CLICK` on Android 10+ , while android has much more customization options.","Another solution is continue using simgle `seconds` parameter, since Android can automatically switch between haptic vibration and normal long vibration depends on how long the vibration is (On my OnePlus 7 Pro with A 13, shorter than 0.3s are haptic vibrations), maybe we could manually set a custom curve to tell iOS when to switch from haptic vibration to long vibration."],"labels":["feature","iOS"]},{"title":"fullscreen config in `conf.lua` prevents setting initial orientation on iOS 16","body":"It seems this issue [love-android #196](https:\/\/github.com\/love2d\/love-android\/issues\/196) happens on iOS16 again. If you use the following configs:\r\n```lua\r\nt.window.width,t.window.height=1280,720\r\nt.window.fullscreen=true\r\nt.window.resizeable=false\r\n```\r\nThen launch the game with your phone standing portrait, the game would be in portrait mode even the `window.width` is greater than `window.height`.\r\n\r\nThis didn't happen on iOS 15. See discussions in our game's issue: [Techmino #847](https:\/\/github.com\/26F-Studio\/Techmino\/issues\/847)\r\n\r\nExample project code on [Techmino\/ci-ios-test](https:\/\/github.com\/26F-Studio\/Techmino\/tree\/ci-ios-test), result on 15 and 16:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/38580644\/220306287-9e4cc38c-6144-41f6-af27-5e0df1011939.png)\r\n","comments":["Here's the commit for that Android fix: 9c4db00e9490742317d4a493f5c11d7f7e200124\r\n\r\nIf you could change the relevant codepath to also run on iOS, by changing the `#if` by adding `LOVE_IOS` define check too, does it solves the issue?","Would test with git patch and [love-actions-ios](https:\/\/github.com\/love-actions\/love-actions-ios) CI, since I have no mac dev env for now","I doubt that Android-specific change would affect much at all on iOS. The two platforms have radically different codepaths in SDL (which is meant to handle this stuff) - historically SDL's Android backend has sort of been its own thing, whereas the iOS backend behaves similarly to other platforms.\r\n\r\nAs a workaround, setting the available orientations via the Xcode project will probably work in the meantime. See `platform\/xcode\/love-ios.plist` if you want to edit the file that has that information (`UISupportedInterfaceOrientations` etc).","> I doubt that Android-specific change would affect much at all on iOS. The two platforms have radically different codepaths in SDL (which is meant to handle this stuff) - historically SDL's Android backend has sort of been its own thing, whereas the iOS backend behaves similarly to other platforms.\r\n> \r\n> As a workaround, setting the available orientations via the Xcode project will probably work in the meantime. See `platform\/xcode\/love-ios.plist` if you want to edit the file that has that information (`UISupportedInterfaceOrientations` etc).\r\n\r\nI've tried, but our game need to change orientation with in game settings","Actually it behaves weird, as if the game read the wrong width and length data, the game scene is cropped.\r\n\r\nLaunch portrait:\r\n![F9F4FC9D-CC08-414F-A053-8FEC36EE1C1C](https:\/\/user-images.githubusercontent.com\/38580644\/220391562-125d1def-68ca-4d54-acea-bca1e6f6f333.png)\r\n\r\nLaunch landscape:\r\n![3E94B503-36EC-4211-A56E-32F24C509C74](https:\/\/user-images.githubusercontent.com\/38580644\/220391743-4e525f6b-6f93-43dc-b561-58f91c8d2201.png)\r\n\r\nSorry but I can\u2019t provide any debugging information, since my Mac is too old and keeps running out of memory.\r\nTest branch: [ci-ios-fix](https:\/\/github.com\/26F-Studio\/Techmino\/tree\/ci-ios-fix)\r\nGit patch: [love.patch](https:\/\/github.com\/26F-Studio\/Techmino\/blob\/ci-ios-fix\/.github\/build\/iOS\/love.patch)","This isn't something love's own source code can likely fix either way. There was a workaround recently for something similar inside SDL's source code (https:\/\/github.com\/libsdl-org\/SDL\/issues\/6289) but I don't think the workaround will necessarily fix this issue - you could try using the latest SDL2 release even so.","is there any build script let me can build `SDL2.xcframework` library??\r\nhttps:\/\/github.com\/love2d\/love-apple-dependencies\/tree\/main\/iOS\/libraries\/SDL2.xcframework\r\n\r\nI'm new to iOS develop, I think may it has a script like: https:\/\/github.com\/love2d\/love\/blob\/9963d1247c05b303caf7c61e8016315a1cd33465\/platform\/xcode\/ios\/luajit-iOS.sh#L10","> is there any build script let me can build SDL2.xcframework library?\r\n\r\nThe Xcode project in the latest SDL2 versions has an xcframework iOS target I believe. I haven't tested it myself yet but hopefully it'll work without needing to change anything. Otherwise you can build a static library and use the `xcodebuild -create-xcframework` command to generate one from one or more static libraries.","the xcframework target in SDL2 framework's structure like this:\r\n<img width=\"350\" alt=\"CleanShot 2023-02-22 at 21 34 06@2x\" src=\"https:\/\/user-images.githubusercontent.com\/13938334\/220634913-c3326837-f0e4-4fb8-8c19-9b25778a2633.png\">\r\n\r\nbut the xcframework of love2d is:\r\n<img width=\"345\" alt=\"CleanShot 2023-02-22 at 21 35 55@2x\" src=\"https:\/\/user-images.githubusercontent.com\/13938334\/220635312-8ea03ec6-7f6b-4b62-90d5-14fe5f06db84.png\">\r\n\r\nthis will cause an error:\r\n<img width=\"314\" alt=\"CleanShot 2023-02-22 at 21 38 35@2x\" src=\"https:\/\/user-images.githubusercontent.com\/13938334\/220635955-e2d3cb2b-fccb-4beb-a449-8da728cfd4e8.png\">\r\n\r\n","Thanks for your second advice, I will try it later.","looks like SDL2 2.26.3(latest) still have this problem.\r\n\r\n---\r\n\r\nyou can use follow steps to create a new `SDL2.xcframework`\r\n\r\nFirstly, build static library for iOS:\r\n\r\n<img width=\"533\" alt=\"CleanShot 2023-03-03 at 19 53 33@2x\" src=\"https:\/\/user-images.githubusercontent.com\/13938334\/222713938-92ac9b47-a8d7-4e75-ae24-d09d45229a10.png\">\r\n\r\n\r\nthen open the build folder and copy that path:\r\n<img width=\"297\" alt=\"CleanShot 2023-03-03 at 19 54 08@2x\" src=\"https:\/\/user-images.githubusercontent.com\/13938334\/222714034-925bce6b-6519-4249-b02c-ba5565fe521c.png\">\r\n\r\n\r\n```sh\r\nxcodebuild -create-xcframework -library {BUILD_PATH}\/Products\/Release-iphoneos\/libSDL2.a -headers {SOURCE_DIR}\/include -library  {BUILD_PATH}\/Products\/Release-iphonesimulator\/libSDL2.a -headers {SOURCE_DIR}\/include -output SDL2.xcframework\r\n```\r\n\r\nreplace the `{SOURCE_DIR}` to source code path, replace the `{BUILD_PATH}` to the xcode build folder.\r\n","I've done some debugging and I have a potential fix for the issue in SDL, but I need to test it more.\r\n\r\nHowever, setting fullscreen without setting *exclusive* fullscreen will use fullscreen-desktop mode. Fullscreen-desktop always uses the native screen resolution instead of changing it based on the requested dimensions. On iOS that means even if you request landscape or whatever via setting width and height it won't use it, and will likely default to portrait mode.\r\n\r\nThe bug still exists when you request exclusive fullscreen with landscape though, and that's what I'm fixing."],"labels":["bug","library dependency","iOS"]},{"title":"Phase Out 32-bit Binaries","body":"Currently LOVE still provides 32-bit builds in Windows and Android. On other platforms, 32-bit binaries are no longer provided.\r\n\r\nSome rationale to motivate this change:\r\n* On macOS, LOVE already provides 64-bit macOS binary since 0.9.x releases and starting from macOS 10.15, 32-bit-only apps are no longer executable.\r\n* iOS support in LOVE is 64-bit by default (I guess?)\r\n* On Android, 64-bit binaries are provided starting from 11.2 and 32-bit Android are declining rapidly.\r\n* On Windows, Windows 11 users are always 64-bit. Users who are running Windows 10 32-bit (with supported hardware) can't upgrade to Windows 11 unless they (re)install (to) 64-bit Windows first.\r\n* On Linux, 32-bit AppImage is no longer provided starting from 11.4 because it's not easy to create them anymore. Furthermore, some distros already dropping 32-bit OS:\r\n  * Ubuntu phased out 32-bit OS in 19.10.\r\n  * ArchLinux phased out 32-bit OS way earlier at 2017.\r\n\r\nNote that this only for binaries that we distribute. Users should able to compile for 32-bit on certain platforms if they really need it at least.\r\n\r\nI don't think doing this in 12.0 is a good idea, so maybe in 13.0.","comments":["Hmm, in Android there's possible potential I have to drop 32-bit x86 binary when LOVE 12.0 comes out. android\/ndk#1772."],"labels":["change"]},{"title":"AudioSource stop should do nothing if the sound isn't playing","body":"Just a little nice to have feature. Right now you need to keep track of what sounds are playing or check if a sound is playing before telling it to stop.\r\n\r\nWould be nice if stop did nothing if it wasn't playing. \r\n\r\nDocumentation should be updated as well.","comments":["Does `Source:pause` cover what you want? I'm not sure I understand the scenario where Source:stop's current behaviour causes trouble.","We want to stop the sound altogether if its playing, and set its seek back to the beginning, but do nothing if its not already playing.","What's the larger context for wanting that specific behaviour? Right now I still don't really understand why you'd want that instead of for example just not seeking the source before calling :stop().","> We want to stop the sound altogether if its playing, and set its seek back to the beginning, but do nothing if its not already playing.\r\n\r\nYou don't need to keep track of anything, just check `source:isPlaying()` and if it's true, call `source:stop()` on it, which will also reset the position to the beginning; if the check was false, then do nothing with it; that'll result in the behaviour you want.\r\n\r\nBy the way, the reason sources work like this is due to an internal simplification that happened a few major versions prior; now, there's no different pause and stop states, just one.","That's what we do right now, we have a function that doesn't call stop if its not \"isPlaying\" but it seems weird that that's not the default behavior of stop. So we have to maintain a util function or something to do this everywhere.","Since the proposed change has the potential to break a lot of other people's code in a way that's hard to debug, I'd really like to understand the full context around your code and why this behaviour would be better than some of the alternatives suggested above (e.g. why is stop being called in a situation where the Source is not playing but is expected to have a non-zero seek offset?)","I think the seek is a zero offset typically. \r\n\r\nI guess maybe it just needs to be documented what does happen if you call stop when the source isn't playing? We assumed it was doing a non trivial amount of work. If all it does is set the seek to zero and doesn't have any performance impact then that's fine, just needs to be documented.\r\n\r\nWe are just blindly calling stop on all our sounds if they are playing in certain cases.","It actually looks like Source:stop already doesn't do anything to the seek position when the Source isn't playing\/paused. Maybe that's something to fix, because the [documentation](https:\/\/love2d.org\/wiki\/Source) claims it does. But if we implement that I doubt it would meaningfully affect performance, especially for static Sources.","Oh I forgot about that documentation page. That's one thing that's weird about the docs, there are some pages that give good summaries, but then the method details don't point back to those or give the same details.\r\n\r\nBut yes it should rewind then, and good to know its not a performance thing."],"labels":["more info needed"]},{"title":"WCG\/HDR color space support","body":"It'd be really nice to have access to wider color gamuts than sRGB, particularly of interest being display p3, bt2020, bt2100 (i.e. bt2020 + pq transfer function, aka hdr10). API-wise I'd just like to be able to request a color space (preferably not only at window creation time, but whenever!) and query the one the surface is actually using later, so I can use the appropriate render path. It might be worth including conversion functions in `love.math` and shaders for linear sRGB <-> display p3\/rec2020 (essentially just a mat3 mul) and PQ curve (forward + inverse). It's useful to be able to query display nominal (SDR white) and peak luminance values for HDR, but these things can be handled on user-side too, so it's not a prerequisite.\r\n\r\non Metal at least the configuration for rec2100\/hdr is pretty straightforward, just needs bgr10a2unorm backbuffer with `wantsExtendedDynamicRangeContent` flag set and color space `ITUR_2100_PQ`. On Vulkan the surface color space can be set to `HDR10_ST2084_EXT`.\r\n\r\nI believe it's useful for all of them larger than sRGB to bump the backbuffer color depth to at least bgr10a2.","comments":["I think (unless I'm misunderstanding the purpose) this SDL feature request would be helpful for that: https:\/\/github.com\/libsdl-org\/SDL\/issues\/6587","Yes, that'd be very useful, without that you need to make some assumptions by default and offer some manual knobs for the users' display for appropriate HDR brightness - games do this, but it's a bit inconvenient."],"labels":["feature","SDL3"]},{"title":"Improve `require` Error Message","body":"Currently, it only says \"no \\<module\\> in LOVE game directories\". I think this should give more information about paths it searches too so it says \"no file \\<path\/to\/module.lua\\> in LOVE game directories\", one for each paths specified from `love.filesystem.getRequirePath` and `love.filesystem.getCRequirePath`.","comments":[],"labels":["change","11.4"]},{"title":"Add 'outline' \/ 'stroke' option to font drawing","body":"I'd love to see the capability to specify an outline\/stroke for drawing fonts, which uses the actual TTF vector path instead of hacks like drawing the font offset 8 times (suggested by the top hits on Google for \"love2d text outline\").\r\n\r\nThis is how SDL_ttf does it:\r\n\r\nhttps:\/\/github.com\/libsdl-org\/SDL_ttf\/search?q=TTF_SetFontOutline\r\nhttps:\/\/github.com\/libsdl-org\/SDL_ttf\/search?q=outline_val\r\nhttps:\/\/github.com\/libsdl-org\/SDL_ttf\/blob\/485916c8da3b01a9e5aa2a66c00d97ba73033207\/SDL_ttf.c#L2231\r\n\r\n\ud83d\ude4f","comments":[],"labels":["feature"]},{"title":"Add way to convert GlyphData to something usable","body":"The documentation on the wiki is not very clear about this, so it took some digging through love's source code to figure out -\r\n`GlyphData`'s content consists of the glyph's pixels stored in the `la8` pixel format.\r\nThe problem with this format is that it can't be easily converted to something drawable, because it's not supported by `ImageData` or `Canvas`es.\r\nSo, it makes sense to me that `GlyphData` should provide a way to convert it to `ImageData`, or get a pixel from its image. Without this, `GlyphData` is pretty much pointless on the Lua side, because it just provides methods to get data about the character's metrics, but no way to convert the glyph's graphic to something usable.","comments":["GlyphData is already pretty useful. But it would be possible to add a function to convert to imageData of the desired format so as not to mess around with strings (and do not load garbage collection).\r\n\r\nBest solution: `rasterizer:getGlyph(\"P\"[, \"la8\", \"rgba8\", \"rgb\"])` etc.\r\n\r\n![boobs regex included](https:\/\/i.imgur.com\/35mQdq4.png)","Also adding `polygon_tbl = Font:getVertices(\"abcdef\")` and\/or `mesh_tbl = Font:getColoredVertices(\"abcdef\")` should be wery useful for custom \"text\" objects, for truly vector text, for pseudo 3d (or true 3d) mesh generation etc.","Yes!  In L\u00d6VR I recently added both `Rasterizer:getCurves(string|codepoint)` (bezier curves for a glyph's outline) and `Font:getVertices` (quad vertices for a string).  :getVertices lets Lua implement a Text-object-like system for caching glyphs.","It would be really cool if it was ported to L\u00d6VE!"],"labels":["feature"]},{"title":"Expose VideoStream Sync objects","body":"Currently, VideoStream syncs with either Source position or automatically incremented based on the delta-time. Would it be a good idea to have these exposed to user?\r\n\r\nMy use case is to play video with custom delta sync that I'd like to increment myself for offline rendering purpose. My previous approach was to always seeking paused video such that it renders correct frame, but this approach causes distortion to the drawn video (like in #1477).\r\n\r\nMy proposal is to have `VideoSync` abstract class. This class doesn't have any methods. Then the `VideoStream` class accepts `VideoSync` class for the `VideoStream:setSync` method. The `VideoStream:getSync` retrieves the current `VideoSync` object used.\r\n\r\nFor the actual implementation of `VideoSync` class, there are `SourceSync` that uses audio `Source` for their sync or `DeltaSync` that uses delta time which can be incremented either by user (`DeltaSync:update(dt)`) or by LOVE itself.\r\n\r\nUsing silent Source file for workaround is not ideal as it's hard to determine the video duration (parsing Theora packets is hard).","comments":["One tricky thing with this is I don't believe it's possible for a DeltaSync to drive audio playback speed\/position. So if users are able to change and manipulate the Sync object associated with a video, DeltaSync would de-sync audio from video in situations where a video has audio.\r\n\r\nMaybe there needs to be a higher level API for what you want, or something.","I think if user changes the sync object of a video stream then users can expect desync to happen. Of course if the video is created with audio, SourceSync is used by default, which keeps audio and video synchronized."],"labels":["feature"]},{"title":"Feature request: write image to clipboard","body":"Currently, `love.system.setClipboardText` only supports text, and not images. I would appreciate it if we could write images to the clipboard too, in the same way selecting part of an image in MS Paint, then pasting it onto a different program, works.","comments":["What about OS cross-compatibility? How would this work on Linux \/ OSX?\r\n\r\nEven Windows has a pretty complicated clipboard system if you looked into it, Linuxes don't even have just one option in regards to the clipboard implementation (and more importantly, the interface).","How does L\u00d6VE handle clipboard on Linux right now? Would implementing this be dissimilar to how setClipboardText currently works?","It just [calls](https:\/\/github.com\/love2d\/love\/blob\/main\/src\/modules\/system\/sdl\/System.cpp#L63) SDL's `SDL_SetClipboardText` function. SDL does not have a clipboard API for content that isn't text, so unless that gets added to SDL (I don't think there are plans for that at the moment), there's not much love's own code can do.","There's a feature request in SDL's issue tracker for it now: https:\/\/github.com\/libsdl-org\/SDL\/issues\/7625"],"labels":["feature","library dependency","SDL3"]},{"title":"[SUGGESTION] Consider to use MojoAL instead of OpenALSoft.","body":"https:\/\/icculus.org\/mojoAL\/\r\n\r\nPros:\r\n+ is licensed under the zlib license.\r\n+ identical api from OpenALSoft \r\n+ get rid of OpenAL32.dll\r\n+ written in C, in a single source file (.c), and can be glued to love2d source-code without any new dlls.\r\n+ requires SDL2 only.\r\n\r\nAlso i hope, change to MojoAL will be possible without any problems or modifications in source-code.\r\n\r\n\r\n","comments":["I do want to switch to MojoAL instead of Apple's OpenAL implementation for iOS. But on other platforms, OpenAL-Soft exposes some features love uses which MojoAL doesn't provide I believe - for example audio effects (EFX) and filters.","It should be feasible to have a compile flag to choose MojoAL instead of OpenAL-Soft \/ system OpenAL, at least.","I tried MojoAL and it blows up when trying to seek a streaming source. So any use of it in love will have to wait until it's more robust.","There is a library called MINIAUDIO, it seems good and it's actively developed. Not sure if the library fits LOVE or not, take a look at it.\r\n\r\nhttps:\/\/miniaud.io","OpenAL-Soft works on iOS doesn't it? Why not use it there as well? Then we'd also get effects like reverb, HRTF, etc. on iOS as well. Would be quite useful. ","OpenAL-soft works on iOS yes. Unfortunately, licensing issue prevents the usage of OpenAL-soft in iOS.","In particular, OpenAL-Soft uses the LGPL license which is incompatible with iOS App Store distribution and other related parts of iOS app packaging and installation.","Ah sorry, I missed that bit. That's really unfortunate and quite disappointing... Thanks for the clarification. ","> tried MojoAL and it blows up when trying to seek a streaming source\r\n\r\nCan you still reproduce this?","I haven't tried recently, but I did file a bug report about it which got solved."],"labels":["change"]},{"title":"The LuaJIT profiler fails to collect samples under Linux.","body":"I suspect this is because of a bad interaction of multi\/single-threaded signal handling between [Audio.cpp:105](https:\/\/github.com\/love2d\/love\/blob\/main\/src\/modules\/audio\/openal\/Audio.cpp#L105) and [lj_profile.c:191](https:\/\/github.com\/LuaJIT\/LuaJIT\/blob\/v2.1\/src\/lj_profile.c#L191), causing the SIGPROF signal from not being received.\r\n\r\nA workaround is to disable the audio module in `conf.lua`.\r\n\r\nThe same issue can probably happen when creating L\u00d6VE threads.","comments":["I don't have a Linux setup so someone else will have to investigate this.","Could you try again with the latest branch? I think b3b1317f6184b2fb6c7d78cb7338f9c83ebb4abd fixes it, but not sure.","That commit will only change things in situations where the code would early-exit (for example if the audio module doesn't fully initialize, or if `Thread:start` on a Lua thread returned false) so I'm not sure if it will affect this issue.","Sorry if I have misunderstood everything, but I tried to reproduce problem like this and I couldn't:\r\n```lua\r\nlocal profile = require(\"jit.profile\")\r\n\r\nfunction love.load()\r\n    profile.start(\"l\", function(thread, samples, vmstate)\r\n        print(thread, samples, vmstate)\r\n    end)\r\nend\r\n\r\nfunction love.update()\r\n    local num = 0\r\n    for i = 1, 100000 do\r\n        num = num * 2\r\n    end\r\nend\r\n``` \r\nand conf.lua:\r\n```lua\r\nfunction love.conf(t)\r\n    --t.modules.audio = nil\r\n    --t.modules.sound = nil\r\nend\r\n```\r\nEven when both lines are commented out, i.e. audio and sound are enabled, samples is >= 1 (mostly 1, sometimes 2).\r\nI am Pop!OS 22.04, Kernel 6.2.6 and l\u00f6ve c8e7d4e28 (current main as of writing this). I'd be interested to look into this issue. Would you mind sharing a small reproduction of your problem?\r\n\r\nBtw. I added that loop in love.update because I thought that maybe I need to do *some* work in Lua to be a more realistic test, but it didn't help.","This issue made me investigate the reason for the signal blocking and I could not really figure it out.\r\nIt was introduced in a4a62f3, but I think the real fix for `os.execute` (#1047) in that commit was the removal of the `SIGCHLD` signal handler. If I remove the signal blocking (`pthread_setprocmask`), `os.execute` still works just fine. \r\nI also made a working fix for reaping child processes of `openURL` (#1928), that does not break `os.execute`, because that was the reason the signal handler was introduced in the first place in f7d226d and 30ff7d4.\r\n\r\nDoes @bartbes remember the reason for blocking the signals? If it's still necessary to block them, it's likely not necessary to block them all, right? ","To clarify my first post, signal handling and multi-threading do not interact well.\r\n\r\nSee this discussion on [stackoverflow](https:\/\/stackoverflow.com\/questions\/2575106\/posix-threads-and-signals).\r\n\r\nAlso this comment from [LuaJIT](https:\/\/github.com\/LuaJIT\/LuaJIT\/blob\/e19db605129ea755b325e4396f58141dbdfd23a0\/src\/lj_profile.c#LL84C14-L84C14):\r\n```\r\n\/* Sadly, we have to use a static profiler state.\r\n**\r\n** The SIGPROF variant needs a static pointer to the global state, anyway.\r\n** And it would be hard to extend for multiple threads. You can still use\r\n** multiple VMs in multiple threads, but only profile one at a time.\r\n*\/\r\n```\r\n\r\nSignal handling seems to be mostly considered as a per-process concept and it is easy to mess with it in a multi-threading scenario. I cannot reproduce the issue currently, but it doesn't mean that it is necessarily gone (as a kind of undefined behavior).\r\n\r\nEdit: as pointed out in this issue, two potential causes of the problem has been worked on since, thus I don't mind if the issue is closed; I would report again if encountered.\r\n","> Does @bartbes remember the reason for blocking the signals? If it's still necessary to block them, it's likely not necessary to block them all, right?\r\n\r\nI only have a vague recollection of why I did it. As far as I remember, the problem is simply that the signal handler can run on any thread, and the only way to make sure it happened on the main thread, was disabling handling on any other threads. Unfortunately, since (at least) OpenAL spawns its own threads, the only way to get those to co-operate, was to make sure it automatically inherited the right settings.\r\n\r\nSure, you can probably mostly get away with allowing some signals, but that will only cause them to potentially be handled by random threads.\r\n\r\nI'm not sure if the situation has improved? Maybe there is a way to set it just for child threads? Some quick googling reveals that `pthread_setattr_default_np` and `pthread_attr_setsigmask_np` might allow you to keep the signal handlers on the main thread active."],"labels":["bug","help wanted","Linux"]},{"title":"Package LuaJIT debug extensions with L\u00d6VE","body":"Hi,\r\n\r\nIs it planned to properly integrate LuaJIT 2.1 by including all its Lua modules (`jit.*`) on all supported platforms ? I think this has been an overlook of previous L\u00d6VE versions and with the switch to LuaJIT 2.1 it is an opportunity to fix it.\r\n\r\nThe `jit.*` modules are necessary, especially for performance analysis (e.g. high-level API for the built-in profiler).  They are tied to a specific build of LuaJIT (by version and built `vmdef.lua`). Thus they are not third-party resources that can be distributed separately and it is even more problematic because LuaJIT seems to move away from explicit versioning to commit hashes (but it only aggravates the original issue).","comments":["If it's too large size-wise, another option could be a debug-build binary release where they are included?\r\n\r\n(i can attest to the difficulty of getting them separately if one doesn't build l\u00f6ve themselves from source... and even then, it is possible that it would need to be enabled for those modules to be built as well, although i'm not sure on this part.)","We wouldn't be able to include them in love's source like we do with every other Lua module L\u00d6VE comes with, because we don't necessarily use the same LuaJIT commit on every platform (nor could we guarantee it).\r\n\r\nWe'd have to come up with a way to distribute them alongside the executable in a manner that lets love.filesystem load them. It would need to be done separately for each platform L\u00d6VE supports. Keeping them outside the executable would also let people swap them out if they choose to replace the LuaJIT dll with a different one (which people can do without recompiling love).\r\n\r\nThat being said, as far as I understand they are typically meant for debugging LuaJIT's internals rather than being part of LuaJIT's core extensions, which is why they aren't inside LuaJIT itself and are only installed with the standalone executable. They have some use cases with L\u00d6VE of course, but they're intentionally an extra thing on top of all of LuaJIT's built-in modules, rather than a part of it. It's not something we overlooked, it was a choice by LuaJIT to prevent easy use of those modules when LuaJIT is embedded with an app as is the case with love.","If you feel strongly that the modules should be more easily usable in embedded situations, it's probably worth raising that on the LuaJIT issue tracker too.","> [...] it was a choice by LuaJIT to prevent easy use of those modules when LuaJIT is embedded with an app as is the case with love\r\n\r\nI don't see how this has anything to do with LuaJIT's design. With LuaJIT and Lua, as the host program, you can load (or not) what you want; the fact that they are pure Lua modules doesn't make them less usable (quite the contrary to me).\r\n(A more important question may be: what makes it so hard to include pure Lua modules with L\u00d6VE ?)\r\n\r\nIf it's not an overlook, then it's a deliberate choice of not including them and it means this issue is only about a conflicting POV. To me, they are mandatory to exploit LuaJIT's full potential.\r\n\r\nE.g\r\n\r\n> they are typically meant for debugging LuaJIT's internals\r\n\r\n> They have *some* use cases with L\u00d6VE of course\r\n\r\nis definitely not how I would resume the usefulness of the `jit.*` modules.\r\n\r\nI can, of course, build the `jit` directory for a specific commit of LuaJIT and a specific platform (I don't know if `vmdef.lua` generates platform-dependent data), but it's a burden.\r\nAnd that burden will probably prevent most users from using the built-in profiler.\r\n\r\n> If it's too large size-wise, another option could be a debug-build binary release where they are included?\r\n-- zorggn \r\n\r\nProbably not much better than not having it at all, and then we would be weirdly thinking about profiling a debug build. If it is not transparently available in L\u00d6VE, it would probably be a better solution to just distribute the built `jit` directory with each L\u00d6VE release for each platform to let everyone include it in their app.\r\n\r\nI don't understand what makes it hard to include the modules for each platform, but I (can) only consider the Windows  (everything in the final app, next to the `*.dll`) way and the POSIX\/distributions way (a specific directory where L\u00d6VE stores resources).","> I don't see how this has anything to do with LuaJIT's design. With LuaJIT and Lua, as the host program, you can load (or not) what you want; the fact that they are pure Lua modules doesn't make them less usable (quite the contrary to me).\r\n\r\nEvery [documented LuaJIT module](http:\/\/luajit.org\/extensions.html) and every [documented Lua module](https:\/\/www.lua.org\/manual\/5.1\/#index) is available to `require` when LuaJIT is loaded.\r\n\r\nThese extra internal debug libraries are not available in that situation and not documented (the only official online documentation related to them is for the standalone executable's command line arguments, which love doesn't use). They need extra free-floating Lua files that are tied to the internal commit-specific details of the LuaJIT library despite being free-floating.\r\n\r\nIf LuaJIT wanted these modules easily accessible by every user of the library, they'd be part of the actual LuaJIT library itself (similar to the main jit, ffi, and bit modules) rather than free-floating files separate from the library. As-is they're distributed with the LuaJIT standalone executable rather than being distributed as part of the LuaJIT library.\r\n\r\n> I don't understand what makes it hard to include the modules for each platform\r\n\r\nIf you have a proposal or pull request for love's build setups that automatically bundles these files with the executables in a manner that meets the following requirements, I'm interested. As you can see it's not as trivial as adding other Lua modules:\r\n* Each platform needs to bundle the Lua files in a manner that fits with the folder hierarchy of apps in the platform. For example in Windows they can be next to the executable, in macOS they need to be somewhere in the .app (perhaps in Resources), etc.\r\n* They need to be automatically moved into those locations when building, it can't be a manual step.\r\n* They should be copied from the precise LuaJIT version that love links with on that platform. This means they need to be available along with prebuilt LuaJIT binaries in situations where we use those, so any build scripts for making those need to be updated accordingly.\r\n* They should be removable\/replaceable by users of love without rebuilding love, because LuaJIT can be replaced and because many developers won't want to ship them with their games.\r\n* love.filesystem needs to be able to load them on every OS at runtime.\r\n\r\nMy point earlier is that no other part of any of love's dependencies or code needs this, but these debug modules do for the reasons outlined earlier. Therefore it's not a change that can use existing functionality in love's build setups and needs special handling compared to any other module that LuaJIT and Lua provides itself. \r\n\r\nConsidering it would be easy to forget to remove them when distributing a game but in my opinion most games should not ship with them, I'd rather either have separate downloads for them, or update every love fuser\/builder to strip them (perhaps with an opt-in to keep them).\r\n","Also, a side note: many of these internal debug modules use io.write (which needs platform-dependent file paths to use) - and the high level profiler `jit.p` only seems to have a single line of code that relies on vmdef. It might not be a lot of work for someone to fork some of those modules to use less platform and jit-internal dependent code, which would avoid needing love to bundle them for you.","I think this is a good example of something simple not going to be simple because of all the complexifying choices and constraints made by multiple parties along the lines. It's possible to do it properly and I value generalization, i.e. to give to all L\u00d6VE users the abstraction over this, but it doesn't seem to fit with the framework\/community intents and thus is not really worth the generalization effort.\r\n\r\nDistributing the built files with each platform release and letting users embed them as they see fit seems to be the most effective solution.","I may be the only one who voiced concerns about this issue, thus I want to add that as long as the LuaJIT's version is known (which should not require anything from L\u00d6VE ultimately, see https:\/\/github.com\/LuaJIT\/LuaJIT\/issues\/711), it is not as important as I first though.\r\n\r\nHaving those modules in end-user environments would be nice, but it's not essential.","I'm not quite sure about iOS or macOS, but I think this is sort-of shipped already.\r\n\r\n* For Linux AppImage, this is built-in. You don't have to do anything.\r\n* For Windows, the JIT modules are available in our Discord server (search for \"jit modules has:file\") and in our releases page.\r\n* For Android, the prebuilt contains JIT modules in each of the ABI subdirectory. https:\/\/github.com\/love2d\/love-android\/tree\/11.4\/love\/src\/jni\/LuaJIT-2.1\/android","> For Windows, the JIT modules are available in our Discord server (only at the moment).\r\n\r\nThey're here: https:\/\/github.com\/love2d\/love\/releases\/tag\/11.4\r\n\r\nAs well as in the artifacts of CI builds."],"labels":["feature"]},{"title":"Love2d flashing when changing focus in fullscreen","body":"When I have Love2d open in fullscreen, desktop or exclusive, or borderless, changing focus causes the windows to flash briefly.\r\n\r\nhttps:\/\/user-images.githubusercontent.com\/36278229\/144137141-04d270aa-c22a-4cc4-b02b-233d5fef7bff.mp4\r\n\r\nIn screen recording you can't see the problem very well because as soon as I switch focus the recording just records black for a couple seconds. I'm using OBS Studio with a display capture of the monitor. When I use a window capture the recording shows no flashing at all, although takes a few seconds to start recording the window after I've opened it.\r\n\r\nhttps:\/\/user-images.githubusercontent.com\/36278229\/144137653-2ed25e93-93a8-4170-a208-64556214208c.mp4\r\n\r\nWith this video you can better see the flashing.\r\n\r\nFor the project in the videos I'm using following main.lua with no other files in Love2d 11.3, although I get the same problem with all other the projects I've tried:\r\n```\r\nfunction love.load()\r\n    love.window.setMode(0, 0, {\r\n        fullscreen = true,\r\n    })\r\n    font200 = love.graphics.newFont(200)\r\nend\r\n\r\nfunction love.draw()\r\n    love.graphics.print('test',font200)\r\nend\r\n```\r\nWhen using volume keys\/mute to change volume the Windows media pop-up doesn't show when tabbed-in. Opening the Xbox Game bar using Win + G it does work, but shows this pop-up and refuses to screen record. When I press Win + Shift + S to screenshot the screenshot is always a few seconds or more delayed. If I then click escape and screenshot again it screenshots at the time of the last screenshot.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/36278229\/144138674-ec64d742-b3da-48ce-ace9-03cfb1a5a42a.png)\r\n\r\nI'm using Windows 10 21H2 with a GTX 980, Nvidia driver version 496.76 (latest at the time of writing). I tried using SDL 2.0.18 instead of the one included in Love2d 11.3, but got the same results.\r\n\r\nOn my laptop I don't get any screen flashing at all. Windows volume control shows, Xbox game bar doesn't come up with that error and screen records correctly and screenshots are taken at the right time. Its GPU is an Intel UHD Graphics 615, with a 8100Y.","comments":["I have same issue with 2 of my laptops:\r\n1. With my old laptop (dual GPU), it only occurs if I set the rendering mode to integrated graphics, not nvidia GPU\r\n2. With my current laptop (Ryzen APU), it only occurs if I set LOVE DPI scale to 100% explicitly.\r\n\r\nUnfortunately, this is slime response in Discord:\r\n> yeah it just sounds like your graphics driver is switching to its internal exclusive fullscreen mode when it thinks it can (when it knows the game is covering the whole screen), but it doesn't handle app switching very well. not much love's source can change about that. the graphics driver probably has different codepaths for that for dx12 vs dx11 vs opengl vs dx9 etc\r\n\r\nI found that using [ANGLE](https:\/\/love2d.org\/wiki\/GLES_Shader_Testing_in_Desktop) prevents that issue from happening.\r\n\r\nEDIT: I'm surprised no one actually reported this to SDL yet. I'll see if I can get a proper test case on weekend.","Using ANGLE also resolved the issues for me, and for another couple of computers I tested on. Those computers were having variations of the problem, one has an RX 580 and the other Intel HD Graphics 2500 with a 3220T","After further inspection, setting this to 0 prevents the issue.\r\nhttps:\/\/github.com\/love2d\/love\/blob\/cee8f8ae4854f4a7f7067b7a4b200e991a05c66f\/src\/modules\/window\/sdl\/Window.cpp#L103\r\n\r\nAlthough I'm not sure about the implications.","@MikuAuahDark I don't know too much single buffering vs double buffering but [it sounds like you should test this with a moving image](https:\/\/topic.alibabacloud.com\/a\/the-difference-between-opengl-single-buffer-and-double-buffering_8_8_10270591.html). It may very well be worse.\r\n\r\n> Single buffering, is actually all the drawing instructions in the window execution, is directly in the window drawing, such a drawing efficiency is relatively slow, if the use of a single buffer, and the computer is relatively slow, the screen will blink.\r\n> double buffering, the actual drawing instruction is completed in a buffer, here the drawing is very fast, after the drawing instruction is completed, and then through the exchange of instructions to the completed graphics immediately displayed on the screen, which avoids the appearance of incomplete drawings, and high efficiency.\r\n> In general, OpenGL drawings are double-buffered, and a single buffer is typically used only to display a single, non-dynamic image."],"labels":["library dependency","Windows"]},{"title":"The maximize window cannot be restored from the taskbar","body":"I am using `love.window.maximize` to stretch the window to full screen. When I minimize the window, I can no longer maximize it back. There is an animation that it unfolds, but it immediately disappears as soon as the animation ends.\r\nIf the window is moved from its original position, it unfolds normally.\r\nwindows 10. love 11.4","comments":["it looks like a bug, if u want a quickfix :\r\nAdd or change your love.focus function\r\n```\r\nfunction love.focus(t)\r\n  if t and love.window.isMaximized() then\r\n    love.window.restore()\r\n    love.window.maximize()\r\n  end\r\nend\r\n```","This only seems to happen in non-resizable windows - so another workaround is to make it resizable.","`love.window.maximize` actually has no effect on some other platforms (like macOS) if the window isn't set as resizable - I wonder if love's code should change to ignore it in that situation (along with documentation updates)."],"labels":["bug","11.4","library dependency","Windows"]},{"title":"Window size incorrect when launching as maximized in Windows","body":"https:\/\/github.com\/26F-Studio\/Techmino\/issues\/100\r\n\r\nThe above issue is on a game built using the Love engine. In summary, that person created a shortcut to the game executable, in right click -> properties -> shortcut, set \"Run:\" to Maximized, then opened the shortcut. When the game launched, the game's window is slightly larger than desirable, with a few pixels on the bottom of the window covered by the task bar.\r\n\r\nI tried doing the same thing, but with the Love executable itself (without a game project), and it seems like this problem exists too, thus I believe this is a problem with the Love engine rather than the game.\r\n\r\nWe are both running Windows 10. There are screenshots in the issue linked above.","comments":[],"labels":["bug","library dependency","Windows"]},{"title":"no highdpi mouse cursor","body":"when i create a new mouse cursor it's always in low resolution on my macOS 10.15.7\r\nor am i missing something?","comments":["What version of l\u00f6ve are you using?","i am using 11.3","How are you setting up your window? Could you make a test program that shows this bug?","Since you're supplying your own image to newCursor, I suppose the best thing would be for you to be able to specify the image's intended DPI scale otherwise it's just making a guess at it (currently it's always guessing 1x DPI scale, which at least makes sure the cursor's size is consistent when highdpi is on versus off).\r\n\r\nSDL has no API for this, so maybe it's worth making a feature request ticket there."],"labels":["feature","library dependency"]},{"title":"add hrtf support to love.audio","body":"I'd like to request hrtf support using openAL in love.audio. The usage for this feature for me is that I plan to write mostly audio specific games, and without hrtf support openAL doesn't do a good job of placing sounds behind versus in front of the user (especially when the user cannot see what's on screen or there is intensionally nothing on screen to begin with which is often true of audio only games). If I remember correctly there is a quick code snippet on the openAL site, or it might have been in the mailing list, but changing hrtf settings in code didn't seem that hard last time I looked at it.\r\nLet me know if I can help anyway with this issue, or if I'm missing something.\r\nThanks!\r\n-Michael.\r\n","comments":["First, you need to create your alsoftrc.ini file, then set environment variable `ALSOFT_CONF` to point to absolute, OS-dependent path of the alsoftrc.ini (`love.filesystem.getSaveDirectory()..\"\/alsoftrc.ini\"` for example).\r\n\r\nYou need to do that **before** the `love.audio` module is loaded. Either by delay-load it by `t.modules.audio = false` at `conf.lua` then `require(\"love.audio\")` at `main.lua` or do everything in `love.conf`.\r\n\r\nThe relevant HRTF setting can be found at https:\/\/github.com\/kcat\/openal-soft\/blob\/openal-soft-1.19.1\/alsoftrc.sample#L122-L133","I quickly sketched out support for the OpenAL `ALC_HRTF_SOFT` extension [here](https:\/\/github.com\/love2d\/love\/compare\/12.0-development...bjornbytes:hrtf).  It enables HRTFs when supported and adds `love.audio.isSpatialized` to check if audio is being spatialized with HRTFs.  It has some serious flaws in its current state:\r\n\r\n- HRTF-based spatialization is always enabled when supported, there is no way to request or disable it.\r\n- The `isSpatialized` name is bad and could be confused with panning-based spatialization.  Feel free to bikeshed it.\r\n\r\nSolutions to the first issue could include adding a `conf.lua` flag (wasn't sure how to plumb this through so I didn't do it) and\/or `love.audio.setSpatializationEnabled` (this would require resetting the device which may not be desirable).","That sounds nice. I would like to mention, however, that you can load a different hrtf file at runtime. This could be used, for example, to allow users to hear an example of the hrtf using the game, and then pick their prefered one which would then be loaded.\nJust food for thought.\n-Michael.\n\n-- \nMichael Taboada, Creator of Games. Does that make me a god, well, sorta.\nMy pgp key: 79BC390E8864CD71305D4DD606CD2197A6EE5ED7\nMy website: https:\/\/michaels.world\n2MB website: https:\/\/2mb.games\nDon't believe everything you read on the internet. I might not be real, you might not be real, and this email certainly isn't real.\nSent from my hall closet...\nstationary bicycle\n","I found this issue while planning to request hrtf support, and I'm wondering if there's been any more interest or work on this? I'd like to use hrtf in some games, and I would ideally have the following features:\r\n\r\n1. The ability to turn hrtf on\/off at runtime. I know this would require resetting the device, but as long as this is noted I think it shouldn't be too much of an issue.\r\n2. The ability to load hrtfs at runtime, for example to allow users to trial the different hrtf profiles shipped with the application to determine which is best for them.\r\n3. No need to enable or disable hrtf in a config file. This might sound obvious, but if my users have to go mucking around with the olasoft config files, I might as well not have the feature.\r\n\r\nLet me know if there's anything I can do to test or anything else. I know I've got some c++ code for this very purpose in my game-kit collection of c++ stuff, maybe it could be a good reference: https:\/\/git.2mb.codes\/~lilmike\/game-kit (under the allegro-stuff\/sound3d folder) doesn't require allegro, not sure why I put it there...\r\n\r\n-Michael.\r\n"],"labels":["feature"]},{"title":"Love change saving directory without visible reasons","body":"Sometimes it uses directory ~\/.local\/share\/love\/lovegame then suddenly switches to ~\/.local\/share\/love\/game\r\nMain directory's name is game.","comments":["How do you run the game? If you don't explicitly set the game's identity via `t.identity` in conf.lua, then L\u00d6VE will try to guess one based on the game path you give as an argument when launching L\u00d6VE. If you run your game like  `love  .` then it probably won't be able to guess your game's folder from that.",">via t.identity\r\n>will try to guess\r\n\r\nGuess this can be the reason, I'll check if the t.identity is correct.","> L\u00d6VE will try to guess one based on the game path you give as an argument when launching L\u00d6VE. \r\n\r\nMaybe we can make L\u00d6VE normalize the path (including converting from CWD-relative to absolute) before using it for this. I'll look into it for 12.0."],"labels":["11.3"]},{"title":"Bold\/italic text rendering?","body":"I know that SDL_ttf has this feature, and they implement it by modifying the buffer that FreeType outputs.\r\n\r\nhttps:\/\/github.com\/SDL-mirror\/SDL_ttf\/blob\/ba21ecf375f3f87b13c3040157a1dbbaeb48d59d\/SDL_ttf.c#L270\r\n\r\nI'm wondering if LOVE could also implement this feature, since they use FreeType. My use case is backwards compatibility with a different 2D rendering engine.","comments":[],"labels":["feature"]},{"title":"C API","body":"A plain C external API for L\u00d6VE would be useful. It would allow any number of other languages to be used to write L\u00d6VE code, and it would make it easier to improve performance of L\u00d6VE code in Lua via LuaJIT's FFI.\r\n\r\nThat being said, it would also be a lot to maintain. Ideally all of the existing Lua wrapper code would call the new C APIs, to keep consistency.\r\n\r\nThere are a number of problems to solve and questions to answer when implementing a C API. A few I can think of off the top of my head:\r\n* Errors are currently propagated to the Lua wrapper code via C++ exceptions. C APIs would need to return an error status (perhaps also with a thread-local GetLastErrorMessage API) or some other mechanism, instead. Ideally the only exceptions in any of L\u00d6VE's code would be inside constructors and they would be caught and converted as early as possible, but that's more for future convenience rather than necessary for a C wrapper.\r\n\r\n* Some of the argument and return value types used in the C++ API are not directly C compatible, for example `std::vector` and `std::string`. Those should be wrapped cleanly, somehow.\r\n\r\n* L\u00d6VE's enums are usually declared inside class code, or inside namespaces if not classes. They'll either need to be duplicated for the C wrapper, or moved to separate C files included by both the C++ code and C wrapper.\r\n\r\n* How will sub\/superclass method flexibility interact with type safety? For example how will the equivalent of `Object:release` be defined (would it accept a base type, or would a separate Release function be declared for each type? If the former, is there anything preventing the wrong object type from being passed to other functions?)\r\n\r\n* C has no namespaces, so there should be a well-defined naming convention. Should the equivalent of `Texture:getWidth` contain the Graphics namespace name (e.g. `loveGraphicsTextureGetWidth(Texture *tex);`), or not (e.g. `loveTextureGetWidth(Texture *tex);`)?\r\n\r\n* Many L\u00d6VE APIs have several function variants. C has no function overloading. Different variants will generally need uniquely named functions, but I'd also like to cut back on 'convenience' variants in favour of keeping the API smaller, for the C API. It might make sense to create extra convenience functions in some cases for common variant functionality.\r\n\r\n* All L\u00d6VE objects use reference counting. This will need to be exposed directly in the C API, while still keeping it automatic in Lua bindings.","comments":["This [post](https:\/\/floooh.github.io\/2020\/08\/23\/sokol-bindgen.html) has a few useful tips on the section \"Binding-Friendly C-APIs\".","I build the C# version of L\u00d6VE, this is fully file about C binding to C#\r\nit covering lots of APIs and work  on windows\/debain\/macos\r\njust two file:\r\nhttps:\/\/github.com\/endlesstravel\/Love2dCS\/blob\/master\/c_api_src\/wrap_love_dll.cpp\r\nhttps:\/\/github.com\/endlesstravel\/Love2dCS\/blob\/master\/c_api_src\/wrap_love_dll.h\r\n\r\nIn dealing with these problems, I used some crude methods for reference only:\r\n\r\n1. Errors: all the c function return int(bool) value to indicate is there an error:\r\nfunction that can throw error will wrap an function to :\r\n```C++\r\n    char errStrBuffer[MaxBuffer]; \r\n    bool4 exported_function_xxx(.....) {\r\n        try {\r\n            \/\/ xxxxxxxxx\r\n            sprint(errStrBuffer, \"xxxxx\") \/\/ set error message\r\n            return 1; \/\/ no error\r\n        } catch (e) {\r\n            return 0; \/\/ have error\r\n        }\r\n    }\r\n\r\n```\r\nTo simplify the structure, there is a special function to do this\r\n`wrap_catchexcept` at https:\/\/github.com\/endlesstravel\/Love2dCS\/blob\/master\/c_api_src\/wrap_love_dll.h#L195\r\n\r\nuse `wrap_love_dll_last_error` to get error message later.\r\n\r\n```C++\r\n#define int bool4 \/\/ return type\r\nchar errStrBuffer[MaxBuffer]; \/\/ https:\/\/github.com\/endlesstravel\/Love2dCS\/blob\/master\/c_api_src\/wrap_love_dll.cpp#L118\r\n\r\n   bool4 wrap_love_dll_filesystem_newFileData_content(const void *contents, int contents_length, const char *filename, FileData** out_filedata)\r\n    {\r\n        return wrap_catchexcept([&]() {\r\n            FileData *t = fsInstance->newFileData(contents, contents_length, filename);\r\n            *out_filedata = t;\r\n        });\r\n    }\r\n```\r\n\r\n2. For array arguments:\r\n    * for input: i use the two arguments, input address and input length\r\n        example : `love.graphics.setCanvas` -> `wrap_love_dll_graphics_setCanvas` https:\/\/github.com\/endlesstravel\/Love2dCS\/blob\/master\/c_api_src\/wrap_love_dll.cpp#L3701\r\n        then convert the array to std:vector<T> in c code\r\n    * for output:  i use the two arguments, receive address(Multi level pointer) and output length\r\n        example `ImageData:getPixel` -> `wrap_love_dll_type_ImageData_getPixel` https:\/\/github.com\/endlesstravel\/Love2dCS\/blob\/master\/c_api_src\/wrap_love_dll.cpp#L6493\r\n        then convert the unmanaged memeory to managed C# heap memeory\r\n\r\n3. For enums : just use as int values\r\n\r\n4. For sub\/superclass : It's not accuracy available in C, This is explained in high-level languages like C#\r\n\r\n        for `Rasterizer` build to `Font`: \r\n        first `wrap_love_dll_font_newRasterizer` `wrap_love_dll_font_newTrueTypeRasterizer` `wrap_love_dll_font_newImageRasterizer` to get `Rasterizer` object from different source:\r\n\r\n        then: use `wrap_love_dll_graphics_newFont(Rasterizer *rasterizer, love::graphics::Font** out_font)` to get font \r\n\r\n5. namespaces:   i just simple use `wrap_love_dll_{Module\/Object type}_{name}` as name\r\n\r\n6. C has no function overloading :   You are right. Can achieve the effect by providing as few overloading as possible.\r\n    for `graphics.newImage` it can be a lot of overloading -- but it has chain:\r\n        string(file name) -->  File  --> FileData --> ImageData --> Image\r\n    for other `\"new object function\"` have same chain, for example `graphics.newFont`:\r\n        string(file name) -->  File  --> FileData --> Rasterizer --> Font\r\n    Common convert links can be merged:\r\n    then C api have about all 60 function  to `new(create)` object:\r\n\r\n        https:\/\/github.com\/endlesstravel\/Love2dCS\/blob\/master\/c_api_src\/wrap_love_dll.h#L276\r\n![image](https:\/\/user-images.githubusercontent.com\/10757838\/96712916-6b593380-13d2-11eb-97ec-c7b5fc881033.png)\r\n\r\n7. reference counting(Resource Manage): \r\n    I followed the rules:\r\n    * for C part, it response to `retain` object for all `new` action or `get` action\r\n        `wrap_love_dll_graphics_newCanvas`\r\n        `wrap_love_dll_graphics_getCanvas`\r\n    * for C# part, it response to `release` object in Dispose stage\r\n\r\n\r\n8. Other: There are many other tasks, such as comparing whether the acquired object and the newly created object are the same object\r\n    graphics.newCanvas  & graphics.getCanvas\r\n    `wrap_love_dll_graphics_newCanvas` &   `wrap_love_dll_graphics_getCanvas`\r\n    ....\r\n    There are too many details, so I won\u2019t be long-winded :yum:\r\n\r\nExcuse me for any possible mistake. \ud83d\ude04 \r\n\r\nBuild log:\r\nhttps:\/\/github.com\/endlesstravel\/Love2dCS\/blob\/master\/develop.md","Can anyone enlighten me to what a c api specifically would allow? Isn't the c++ already established a sufficient api? Or do scripting languages have trouble with c++ apis?","C++'s ABI makes it practically impossible for any other language to use functions and methods directly from a C++ library. On the other hand, C's ABI is simple and consistent and almost every language supports some form of calling C code from the language (for example LuaJIT's FFI).\r\n\r\nC wrappers of love's functions are necessary for any use of love outside of its existing hand-written Lua wrapper code.","I see, so we just need functions that can wrap the classes used in love since runtime ABI interfacers like FFI doesn't support classes.","> How will sub\/superclass method flexibility interact with type safety? For example how will the equivalent of Object:release be defined (would it accept a base type, or would a separate Release function be declared for each type? If the former, is there anything preventing the wrong object type from being passed to other functions?)\r\n\r\nIs there any intention of making love objects available as anything but opaque handles \/ void*? That seems like the most straightforward solution, in which case all typechecking would be done internally anyway. A function such as `love_Object_release(void* object)` could then take care of any kind of love object, and eg. `draw` or a method like `love_Texture_getFormat` would check some identity flag in the object and emit an error if necessary (not unlike how it works for the lua API internally).","Yeah I suppose you're right. I've been thinking in terms of having those checks be at the language binding level because that's how it's done right now and different languages have different type safety guarantees, but that's probably the best approach even if it'll add error checks to pretty much every API.","I made an attempt at porting `love.filesystem` to be exposed entirely through C. It seems to work okay at a superficial level, but my C(++) is rusty.\r\n\r\nhttps:\/\/github.com\/Ruin0x11\/love\/tree\/c-api\r\nhttps:\/\/github.com\/Ruin0x11\/love\/blob\/c-api\/src\/modules\/filesystem\/c_Filesystem.h\r\nhttps:\/\/github.com\/Ruin0x11\/love\/blob\/c-api\/src\/modules\/filesystem\/c_Filesystem.cpp\r\nhttps:\/\/github.com\/Ruin0x11\/love\/blob\/c-api\/src\/test\/love_c.c\r\n\r\nMy methodology was to take the code in the `wrap_*.cpp` files and rewrite it to have no dependencies on Lua. I wrapped the functions that can throw exceptions with a boolean return value\/pointer to error string (same as LLVM's C bindings). The API makes no assumptions about object ownership, but the retain\/release functions are also exposed through C.\r\n\r\nI think having L\u00d6VE available for languages like C#, Ruby or Rust would be very interesting. I was always frustrated by \"game engine\" frameworks in other languages that are really just low-level bindings to SDL\/OpenGL\/etc., and ones like MonoGame with unwieldy asset pipelines that overcomplicate things.","A lot of C wrapper APIs don't actually do a ton of type checking and pass things around as opaque pointers. I feel like it's safe to assume that if you're savvy enough to be using bindings for L\u00d6VE from a separate language it's acceptable to get a segfault\/panic if you try to canvas-clear an audio source. A lot of C APIs end up getting wrapped over for a given language rather than used directly (e.g. especially in OOP languages like Crystal or C# people tend to write elaborate class wrappers over the imperative C stuff), so type checking, if it's provided, can probably be done in a per-language way rather than with a lot of guarding code L\u00d6VE-side.","Is this being worked on currently? I'm interested in this feature so I think I might take a stab at it","I don't think anyone's actively working on it right now - @Ruin0x11's stuff (above) might be one place to start from, although I'd base it on the 12.0-development branch instead of main."],"labels":["help wanted","feature"]},{"title":"Unlocked vsync when in a different space on macOS","body":"There's a strange one here.\r\n\r\nWhen a love2d window is in a different space on macOS, so on another desktop, or if you have it running on your desktop and switch to a full screened app, CPU and GPU load are doubled (or tripled). This is could be up to 30-40% CPU from under 6% otherwise, on a quad core machine and 100% GPU up from 30% on a discrete AMD card: all with no game loaded.\r\n\r\nThe CPU issue was also replicated on any game I tested, where if a game is in the same space (with or without focus) CPU usage on my machine is always under 10%, but on a different space (without focus, obviously), it climbs up to 40 or 50%, every time. The GPU doubling issue is present on every game run with hiDPI.\r\n\r\nThis was tested on a 2015 and 2019 MBP with discrete graphics, on Mojave and Catalina both.\r\n\r\n**To test:**\r\nOpen Activity Monitor, select Window > CPU History and GPU History. Then open any love2d game with hiDPI or just the no game app. See the the normal load on the monitors. Then open Mission Control, create a new desktop, and drag the love2d window into Desktop 2. Now come back to Desktop 1, and see the change in load.","comments":["From what I remember, the OS doesn't enforce vsync in opengl windows that aren't in focus.","> From what I remember, the OS doesn't enforce vsync in opengl windows that aren't in focus.\r\n\r\nThat's crazy that that's default behaviour. Is there any way around this?","> Is there any way around this?\r\n\r\nAs a developer you can't rely on a specific vsync rate regardless (because graphics drivers tend to give users the option to force vsync on or off, and because monitors use all sorts of different refresh rates - I have a 60hz and a 120hz monitor connected to my PC).\r\n\r\nA typical approach to lowering CPU\/GPU load while a game isn't in focus is to use love.timer.sleep to pause for a few ms every frame while the window isn't in focus or isn't visible.\r\n\r\nmacOS also provides apps some extra information about window visibility (whether it's completely covered by other windows or not), but love doesn't expose that at the moment unfortunately.","> A typical approach to lowering CPU\/GPU load while a game isn't in focus is to use love.timer.sleep to pause for a few ms every frame while the window isn't in focus or isn't visible.\r\n\r\nI've been looking in the love forums and every one has their own way of handling this, which I've had some trouble implementing and seeing consistent results. Is there any optimal way you recommend? Does does the sleep function need to be handled within love.update or can love.run be modified instead?\r\n\r\n> macOS also provides apps some extra information about window visibility (whether it's completely covered by other windows or not), but love doesn't expose that at the moment unfortunately.\r\n\r\nWhat's odd here is that it's specifically being on another space that uncaps vysync. When I'm on on the desktop but unfocused, it's all normal. Also, somehow demo-ing my game on Zoom screen sharing makes it go crazy, 100-200% CPU usage and max GPU always, even love is in focus, on the desktop or full-screened.","I have since arrived at a solution with this code, a 30fps cap when unfocused.\r\n\r\n```\r\nfunction love.focus(f)\r\n    focus = f\r\nend\r\n\r\nfunction love.update(dt)\r\n    if not focus then love.timer.sleep(0.03) end\r\nend\r\n```\r\n\r\n> As a developer you can't rely on a specific vsync rate regardless\r\n\r\nI think it would be helpful for love.window.setVsync to accept enums instead of -1, 0, 1 and accept numbers to force a specific frame rate, but since the sleep function is more than good enough to solve this, feel free to close. I still feel this should be prevented though, since anyone that doesn't implement this runs the risk of making their games impossible to leave running in the background.\r\n\r\nI remember writing to a developer once about their love game's performance spikes many years ago, and they had no idea why this was happening since they didn't own a Mac machine.\r\n\r\n","The latest version of SDL seems to address this for OpenGL by using a different method for vsync. But love 12's metal backend doesn't have access to that method right now so it's still an issue there.\r\n\r\nI wonder if I can design something in SDL to expose what we'd need to take advantage of it with Metal."],"labels":["11.3","library dependency","macOS"]},{"title":"Multi-touch support for trackpads and touch displays","body":"Allowing the trackpad under macOS to trigger pre-exisiting love.touch functionality through SDL's native SDL_TouchFingerEvent [(which already supports it)](https:\/\/discourse.libsdl.org\/t\/mac-multitouch\/17695\/3) would make testing mobile applications on desktop a breeze, and allow gestures for interface navigation (which would be a godsend).","comments":["Trackpads don't behave like touch screens at all, because there's no correlation between where the user presses the trackpad and a location on the screen.\r\n\r\nI added this functionality to SDL relatively recently to account for that difference https:\/\/hg.libsdl.org\/SDL\/rev\/eb60e952b13f - I wouldn't feel good about exposing trackpad touches in love without making sure the API made that touch type distinction very clear, so people don't write code that will break when a trackpad is used (especially since end users actually use their trackpad to move the mouse cursor).","I described the problem a bit more here https:\/\/bugzilla.libsdl.org\/show_bug.cgi?id=3542#c1 (although I wrote that before the above APIs were added to SDL).","Thank you for the detailed explanation, I understand what you mean.\r\n> Trackpads don't behave like touch screens at all, because there's no correlation between where the user presses the trackpad and a location on the screen.\r\n\r\nMy hypothetical case of testing mobile apps in Love doesn't make a whole lot of sense, I realise now. Still, I think this is worth including just for the sake of location-agnostic gestures like pinch to zoom or drawing with multi touch. I personally know of a lot of people (myself included) whose programs could benefit from this weird hybrid place the trackpad sits in. Maybe only allowing ignoring the mouse data in favour of trackpad when the mouse has been captured and hidden by the window? Like how Preview accepts signatures.\r\n\r\n<img width=\"580\" alt=\"Screenshot 2020-10-05 at 02 38 02\" src=\"https:\/\/user-images.githubusercontent.com\/9658355\/95027153-01434d80-06b4-11eb-9c46-e1049a3af4d7.png\">\r\n\r\nAnd in the other case keeping the two separate, that is, if the trackpad has multiple fingers on it, it no longer sending any love.mouse signals, only multitouch info, which can be manually sifted by the coder (I think this happens automatically at OS level though.)\r\n\r\n> I added this functionality to SDL relatively recently to account for that difference https:\/\/hg.libsdl.org\/SDL\/rev\/eb60e952b13f - I wouldn't feel good about exposing trackpad touches in love without making sure the API made that touch type distinction very clear, so people don't write code that will break when a trackpad is used (especially since end users actually use their trackpad to move the mouse cursor).\r\n\r\nIs API naming the biggest hurdle here? I'm guessing a love.trackpad class might be too much fragmentation for your liking, which I understand. If so, I would be glad to draft documentation that could fit it into love.touch or love.mouse.","For the sake of cross-platform feature compatibility, how would this work on windows and linux?","> For the sake of cross-platform feature compatibility, how would this work on windows and linux?\n\nI was unable to find documentation for a multitouch API in either for trackpads but... [found someone talking about it here, about SDL_MultiGestureEvent](\nhttps:\/\/discourse.libsdl.org\/t\/no-gesture-events-from-touchpad-on-windows-or-linux-why\/25205).\n\n\nLooks to me that Mac has trackpads triggering MultiGestureEvent natively, while Windows and Linux have touch panels doing the same. So it would benefit all three platforms. :) ","@slime73 Is the [Touch FFI](https:\/\/github.com\/slime73\/love-snippets\/tree\/master\/Touch) from love-snippets still expected to be functional? I can't get it to work with 11.3. Otherwise, would it be non-trivial to get it running with the new SDL functionality you added?"," I have the [Touch FFI](https:\/\/github.com\/slime73\/love-snippets\/tree\/master\/Touch) and therefore trackpad multitouch working when I build love2d with SDL_SetHint(SDL_HINT_MOUSE_TOUCH_EVENTS, \"1\") added to the int main() in love.cpp.","AFAIK there's no equivalent API in Windows and Linux for this one, so having it working in all platforms that LOVE supports would be next to impossible.\r\n\r\nMultitouch on touch displays has been supported since 0.10.0. However multitouch (and absolute coordinate) for trackpads are another story.","But surely there isn't a downside to having the SDL hint enabled by default, since it needs FFI to be usable anyway?","Not sure but after checking it, `SDL_HINT_MOUSE_TOUCH_EVENTS` is responsible whetever LOVE will also fire `mousepressed`\/`moved`\/`released` when the input comes from touchscreen and this is enabled by default."],"labels":["feature"]},{"title":"AV1 video playback","body":"Ogg Theora (which love.video currently supports) isn't very good as a format in general, and the backend code in love is hard to maintain and has bugs. The main reason Theora was used in the first place is at the time all the alternatives had other major downsides that made them less viable.\r\n\r\nNow AV1 exists, and while decoding it on the CPU is expensive, [dav1d](https:\/\/code.videolan.org\/videolan\/dav1d) seems like it should be fast enough while also having a simple API, a permissive license, a relatively small library size, and no patent issues. It doesn't provide cmake build setup (currently), so we'd have to create that.\r\n\r\nIdeally we'd completely remove Ogg Theora support in favour of AV1.","comments":["Don't worry about CMake build setup. I've created one here https:\/\/github.com\/MikuAuahDark\/dav1d-cmake\r\n\r\nIt's not the latest version but should be easy to modify to match upstream.\r\n\r\nPersonally I'm against AV1 because none of the libraries seem provide promising performance without ASM. Not sure if we should add \"NASM\" as another dependency to LOVE just for building dav1d. Also encoding video to AV1 takes ages even with high-end computer, which makes people more less interested on it.\r\n\r\nRegarding Theora, maybe some bugs were fixed when we update Theora to 1.2.0-alpha1 (like in Android) or to upstream. This needs more testing though.\r\n\r\nAnother alternative is to use OS-specific API for video decoding. This will require us to write lots of OS-specific codes which is not ideal, but we can support many video formats this way. Windows has MediaFoundation, Linux has FFmpeg or GStreamer, Android has Media API (but the NDK interface only exists when targetting Lollipop).","> none of the libraries seem provide promising performance without ASM. Not sure if we should add \"NASM\" as another dependency to LOVE just for building dav1d.\r\n\r\nAll we have to do is only build AV1 support on architectures dav1d natively supports (x86\/x64\/armv7\/arm64) and there should be no extra dependencies, right?\r\n\r\n> encoding video to AV1 takes ages even with high-end computer\r\n\r\nThat is a bit of an issue, but encoding is something people only have to do once for a video, and tools support for AV1 is being adopted pretty much everywhere. Unlike Theora AV1 is on track to become a real standard format.","> All we have to do is only build AV1 support on architectures dav1d natively supports (x86\/x64\/armv7\/arm64) and there should be no extra dependencies, right?\r\n\r\nBuilding for x86\/x64 requires \"NASM\" (external program) to build the assembly-optimized program, which translates pretty much to \"mandatory\" given the state of current AV1 CPU decoding requirements.\r\n\r\n> AV1 is on track to become a real standard format.\r\n\r\nYet we still need to add support for video containers like MP4 or MKV (and demuxing it). Unlike AV1, Theora commonly stored in Ogg container and can be demuxed with `libogg`, saving the hassle of additional demuxer library.","> Yet we still need to add support for video containers like MP4 or MKV (and demuxing it). Unlike AV1, Theora commonly stored in Ogg container and can be demuxed with `libogg`, saving the hassle of additional demuxer library.\r\n\r\nI'm a bit fuzzy on the details, but when I was implementing vp8\/webm support a while back, I did also implement a webm (\/mkv!) demuxer. A result of that experiment was separating out demuxing and decoding in the existing codebase. At one point I was displaying vp8 from an ogg container and theora from an mkv container, so that is all already supported.. in theory.","Another alternative to dav1d for AV1 video decoding is [libgav1](https:\/\/chromium.googlesource.com\/codecs\/libgav1). It provides CMake build scripts and doesn't need NASM to build on x86(-64) platforms, but this means I have to write Android.mk for Android (which is probably not easy, I haven't looked into detail of their CMake scripts).","What about using [libmpv](https:\/\/github.com\/mpv-player\/mpv\/tree\/master\/libmpv)?","We can't use libmpv because it's LGPL, which means we can't ship it for iOS. Same reason why we didn't use FFmpeg in the first place.","@MikuAuahDark , hey, about [libgav1](https:\/\/chromium.googlesource.com\/codecs\/libgav1), I see it pull abseil as a dependency. While Theora has it's flaws it's a very small, easy to build dependency, have you played around libgav1? I like it uses CMake and has no nasm requirement, and it uses the [Apache License](https:\/\/chromium.googlesource.com\/codecs\/libgav1\/+\/refs\/heads\/main\/LICENSE), which looks ok for iOS.","libgav1 sounds promising, but I don't think this is being in our high priority at the moment.","Ah ok, so I built libdav1d.dll here to have an idea (used msys2), and it's around 3MB and go to 2MB after using strip. I haven't tried to build libgav1 yet. With love being 3.5MB it's quite hard to find something as small I imagine."],"labels":["change","help wanted","feature"]},{"title":"Please include love.js on the homepage","body":"Hello, it's me \"ivan\" (aka \"2dengine\") from the love2d forums.\r\nJust wanted to humbly ask if we can include a mention of love.js on the homepage:\r\nhttps:\/\/github.com\/Davidobot\/love.js\/\r\nIt's not 100% stable but with a little bit of work I managed to get all of my commercial games running with love.js.\r\nThis project desperately deserves more attention and commits.\r\nI have already reported several bugs and Davidobot has diligently patched them.\r\nPlease add a link on the homepage and hopefully other devs can get involved too.","comments":["As Davidobot mentioned in the forum thread, we're interested in making the port official if\/when it becomes stable without being too divergent in terms of supported features.","To add to that, official platforms \/ backends come with a significant maintenance burden for everyone involved, especially a web port because it's such a different platform from the others love currently supports. We'll want to make sure we can actually continue to support it rather than having an initial release and then not being able to support it in the future and having to remove our claim of supporting it, once it's stable enough to be considered for merging into love's official platforms.","Hey, Slime\r\nThank you so much for reading.\r\nI understand that love.js requires a lot more work compared to the other ports.\r\nIt doesn't have to be an \"official\" port, but the project deserves a lot more shine.\r\nMaybe at least make the love.js topic a sticky in the forums?","Maybe mention it under a \"Third party ports\" section? That would be nice!","> We'll want to make sure we can actually continue to support it rather than having an initial release...\r\n\r\nThis is very important for a good port. Tanner's work is super, but since he was the sole maintainer as soon as he stopped supporting the project, it went out of date real quick. This is *doubly* true for emscripten\/web because both of those things move fast - the openAL problems Tanner was reporting were solved just by virtue of an emscripten update.\r\n\r\nI think if the port is publicised more, it should definitely fall under either a **3rd-Party** heading, or a **In Development**."],"labels":["help wanted","feature","documentation"]},{"title":"Minor inconsistencies between Windows and Linux when using love.graphics.circle","body":"Hello!\r\n\r\nWhile working on a hobby game project, I set up some integration tests which compare game frames with pre-existing screenshots (both obtained via `love.graphics.captureScreenshot`). The goal is to mark tests as failed when the result of the capture differs from the known correct screenshot. To implement this, I load the reference image using `love.image.newImageData(path)` and and use `:getPixel()` to compare each pixel against its equivalent in the `ImageData` obtained via `love.graphics.captureScreenshot`.\r\n\r\nThis is working great on my Windows development machine. However, when running the tests on Linux (in Github Actions), some colors come out slightly different from the reference screenshots (taken on Windows). This results in false positives in the tests.\r\n\r\nI attached two images to this ticket illustrating the problem on a simple test case. Notice how the pixel at (32, 24) is a slightly different shade of blue (`<Red 0, Green 42, Blue 45>` vs `<Red 0, Green 49, Blue 53>`):\r\n\r\n![linux](https:\/\/user-images.githubusercontent.com\/817256\/91655803-6b8b2180-ea68-11ea-8b4c-9b13571ec8f8.png)\r\n![windows](https:\/\/user-images.githubusercontent.com\/817256\/91655804-6c23b800-ea68-11ea-8ba2-0ea89508e1ea.png)\r\n\r\nBoth images were saved using `captureScreenshot` and calling `:encode():toString()` on the resulting `ImageData`. Specifically, I did not use OS print screen functionality or any image editing program which could have altered the colors.\r\n\r\nThe code I used to draw this blue circle boils down to:\r\n\r\n```lua\r\nlove.graphics.setColor({0\/255, 234\/255, 255\/255, 0.6});\r\nlove.graphics.circle(\"fill\", 40, 40, 10, 16);\r\nlove.graphics.setColor({0\/255, 234\/255, 255\/255});\r\nlove.graphics.circle(\"line\", 40, 40, 10, 16);\r\n```\r\n\r\nI understand this is a very minor issue and is probably difficult to investigate, so no worries if not much can be done about it.\r\n\r\nIn case you are curious about the test harness code, you can look at the `compareFrame` function [here](https:\/\/github.com\/agersant\/crystal\/blob\/fbb2383bce241fb67add810db483aba20c2bd76f\/game\/engine\/dev\/TestSuite.lua#L113) - although I did my best to mention all the important details in this ticket.","comments":["I can't seem reproduce this in ArchLinux, as pixels laid in (32, 24) are (0, 0, 0). Tried both with Intel GPU with Mesa 20.1.6 driver and NVidia GPU with proprietary 450.66 driver.\r\n\r\nHere's my test code.\r\n```lua\r\nfunction love.draw()\r\n    love.graphics.setColor({0\/255, 234\/255, 255\/255, 0.6});\r\n    love.graphics.circle(\"fill\", 40, 40, 10, 16);\r\n    love.graphics.setColor({0\/255, 234\/255, 255\/255});\r\n    love.graphics.circle(\"line\", 40, 40, 10, 16);\r\nend\r\n\r\nfunction love.keyreleased(k)\r\n    if k == \"space\" then\r\n        love.graphics.captureScreenshot(function(imageData)\r\n            local r, g, b = imageData:getPixel(32, 24)\r\n            print(r * 255, g * 255, b * 255)\r\n        end)\r\n    end\r\nend\r\n```\r\nPress spacebar to print the pixel at (32, 24).\r\n\r\nAre you sure the pixel coordinates are correct? Do you altered the graphics transformation stack beforehand?","Is it possible the Linux\/Github Actions machine you're testing on is using a graphics driver that uses a different internal backbuffer color format than other platforms? (For example 16 bit or 30 bit colors instead of 24 bit). Does the issue still happen if you render to a canvas and use `Canvas:newImageData` instead of rendering to the backbuffer?","Thanks a lot for taking a look!\r\n\r\n> Is it possible the Linux\/Github Actions machine you're testing on is using a graphics driver that uses a different internal backbuffer color format than other platforms?\r\n\r\nI thought you hit the nail on the head with this one. I looked into it and the `xvfb` virtual framebuffer defaults to only 8 bits per pixel! I updated the test setup to use 24 bits per pixels and it did not seem to make a difference :(\r\n\r\nI also tried rendering onto a canvas (see below) and the issue still reproduces.\r\n\r\n> Are you sure the pixel coordinates are correct? Do you altered the graphics transformation stack beforehand?\r\n\r\nThe coordinates in my original report were referencing the attached images, not the simplified test code. You are correct that the test image had some `translate` transforms in the stack. Sorry about not making that clearer.\r\n\r\n----------\r\n\r\nI created a [new repository](https:\/\/github.com\/agersant\/love-1618) with a clean setup for reproducing the bug. I expanded the test cases to drawing a filled circle, a line circle and a square, with various opacity and using either canvas\/backbuffer. \r\n\r\nFindings:\r\n- Drawing on canvas or backbuffer makes no difference\r\n- The only test cases that are failing are drawing line circles (ie. not filled) at specific opacities\r\n\r\nYou can view the test results [here](https:\/\/github.com\/agersant\/love-1618\/runs\/1048861057?check_suite_focus=true). Unfortunately the Windows machines on Github actions don't support OpenGL 2 so the Windows tests have to be ran locally. They are all passing on my machine.\r\n\r\n\r\n","I tried to run your test repository under ArchLinux and here's the result\r\n\r\nIntel HD Graphics 620, Mesa 2.0.16\r\n[mesa_2.0.16.log](https:\/\/github.com\/love2d\/love\/files\/5147722\/mesa_2.0.16.log)\r\n\r\nNVidia GT 930 MX, proprietary 450.66\r\n[proprietary_450.66.log](https:\/\/github.com\/love2d\/love\/files\/5147728\/proprietary_450.66.log)\r\n\r\nSo this is looks like Intel driver problem? Probably. I have to boot to Windows to make sure.","Yikes, the failures listed in your test using the Intel drivers are also not exactly the same as the ones in Github actions - although they are very similar. I can't find any info on what hardware\/drivers are used on Github Actions.\r\n\r\nFor reference, my testing on Windows is being done with an Nvidia GPU (RTX 2070 Super) and recent official drivers (451.48). The 'expected' images in the test repository were generated on this setup.","I just booted up to Windows 10 2004 with same iGPU but with version 27.20.100.8587 and here's the output.\r\n[27.20.100.8587.txt](https:\/\/github.com\/love2d\/love\/files\/5202486\/27.20.100.8587.txt)\r\n\r\nThe NVidia driver in Windows is 452.06, slightly more updated than in my ArchLinux, but this doesn't seem to affect the output (all outputs are identical when using NVidia GPU).\r\n\r\nWe probably need someone to test with AMD GPU.\r\n","(accidentally clicked the close button, sorry about that)","I tested this again in laptop with integrated driver in Ryzen 7 4700U CPU, outputs are identical to Intel (except square-line test, is that added recently?).\r\n\r\nSo it's probably Nvidia that introduces inconsistency.","You are right, the square-line test was added a few hours after the others (reference image was from the same Nvidia GPU and driver). Interesting that it's the only one where AMD and Intel don't match :(\r\n\r\n","Are the filled shapes mismatching, or is it the lines? (Or both?)\r\n\r\nIf it's the lines, does it only happen with rendering smooth lines, or is it reproducible with rough lines (`love.graphics.setLineStyle(\"rough\")`) too? Narrowing this down will help inform if\/how it can be addressed.","I just updated the test suite to run with both `rough` and `smooth` line styles (was always `smooth` before).\r\nResults: https:\/\/github.com\/agersant\/love-1618\/runs\/4812199379?check_suite_focus=true\r\n\r\nIn summary:\r\n\u2705 Filled shapes\r\n\u2705 Rough lines\r\n\u274cSmooth lines\r\n\r\n"],"labels":["bug","11.3"]},{"title":"One number variant of setColor","body":"```\r\nlove.graphics.setColor(n)\r\n```\r\nwill be the same as (if type(n) == \"number\")\r\n```\r\nlove.graphics.setColor(n, n, n, 1.0)\r\n```\r\nThis will be very useful to quickly set colors to white or black or gray","comments":["lovr has a one number variant but it's for hexcodes:\r\n\r\n```lua\r\nlove.graphics.setColor(0xc0ffee) -- (no alpha support)\r\n```\r\n\r\nFor a while it seemed sketchy but now I can't really live without it","Both could technically be implemented on the lua side, question is how useful it'd be to support it on the C++ side...\r\n```lua\r\nlocal oldsetcolor = love.graphics.setColor\r\nfunction love.graphics.setColor(a,b,c,d)\r\n  if type(a) == 'string' then\r\n    local s = a:gsub('0x','')-- sub potential 0x from start of string\r\n    -- if # of characters is 6, set rgb, if it's 8, set rgba\r\n    if #s == 8 then\r\n      d = tonumber(s:sub(7,8), 16)\/255\r\n    end\r\n    a,b,c = tonumber(s:sub(1,2), 16)\/255, tonumber(s:sub(3,4), 16)\/255, tonumber(s:sub(5,6), 16)\/255 -- probably there's a better solution; this is just an example\r\n  elseif type(a) == 'number' and type(b) == 'nil' and type(c) == 'nil' then\r\n    b, c = a, a -- set others to the same number\r\n  end\r\n  d = d or 1.0 -- default for alpha\r\n  oldsetcolor(a,b,c,d)\r\nend\r\n```","I don't think it's worth supporting this in C side since it's very trivial to be done in Lua side\r\n```lua\r\nlocal function GRAYSCALE(n, a)\r\n    return n, n, n, a or 1\r\nend\r\n\r\nfunction love.draw()\r\n    -- Sets color to 0.5, 0.5, 0.5, 1.0\r\n    love.graphics.setColor(GRAYSCALE(0.5))\r\n    love.graphics.print(\"grayscale 0.5\")\r\nend\r\n```\r\n\r\nWe also can't add support for bjornbytes's `lovr.graphics.setColor` variant because LOVE 11.0 and later changes the color range from 0..255 to 0..1 but if you really need one for (constant) hexcodes, you can use my [color.lua](https:\/\/github.com\/MikuAuahDark\/livesim2\/blob\/ec982ca536fafb654d524b165c9b5ce2d6da5830\/color.lua).\r\n```lua\r\nlocal color = require(\"color\")\r\n\r\nfunction love.draw()\r\n    love.graphics.setColor(color.hex00FFFF)\r\n    love.graphics.print(\"color.hex00FFFF\")\r\nend\r\n```\r\n","This would be convenient, but I don't think that this would be *L\u00d6VEly* (i.e. fit in with rest of the API) so I don't think it should be added.\r\n\r\nBut, it is true that it would be a convenient way to set the color to a grayscale color, especially black or white, I'm sure we've all written `love.graphics.setColor(0, 0, 0)` and `love.graphics.setColor(1, 1, 1)` countless times.\r\n\r\n@zorggn and @MikuAuahDark both mention that it can be done with Lua. But why does this matter?\r\n\r\nrude kind of touched on it in [this interview](http:\/\/blogs.love2d.org\/content\/l%C3%B6vely-interviews-rude):\r\n\r\n> **L\u00d6VE doesn't have tilemaps, UI, Camera, etc. The Animation object was even removed. Why do you choose to keep L\u00d6VE to the basics like that?**\r\n> \r\n> \"High level\" things are (for me) mostly just in the way, and never work quite the way I need for a specific case. It's really easy to create a high level component which seems nice, but in reality is too inflexible for many cases, leaving lovers to develop their own e.g. tilemap component anyway, feeling sad that the built-in component is just uselessly standing there. So it's better if such things are made as third-party Lua libraries, so they're easier to modify or extend.\r\n> \r\n> Also, there is an unwritten \"emergent\" guideline, which says that things which can be easily done in pure Lua should be done in pure Lua. This is affecting the API a bit, I think.\r\n\r\nOf course this change to `love.graphics.setColor` isn't \"high level\" at all, but it *is* something that can be done in pure Lua.\r\n\r\nIf you look around L\u00d6VE's API, there's not much that could be done in pure Lua unless it provides a significant performance benefit (i.e. particle systems or the physics engine), or it's just that useful (i.e. `love.filesystem.read\/write\/append` whose functionality could be replicated with File objects, but it would be quite inconvenient).\r\n\r\nBut why not have more convenience functions? One reason, which I think is related to the \"high level\" things that rude talked about, is that they might be a bit arbitrary, and not exactly what you want. What if I use transparency a lot, and I want `love.graphics.setColor(0.5)` to mean `love.graphics.setColor(1, 1, 1, 0.5)`? Or what if I type `love.graphics.setColor(1, 1, 1)` so often that I want `love.graphics.setColor()` without an argument to set the color to pure white? And why is the API encouraging me to color things in 256 shades of gray?\r\n\r\nAnd if this convenience function is OK, why not \\<insert other potential convenience function here\\>? For example, being able to set HSL colors would be convenient, but if this was also added, I would expect many more functions based on the same reasoning. And why this would be an issue brings me to the main reason why I think convenience functions should be limited in L\u00d6VE's API: each one is simply one more thing to learn.\r\n\r\nAs a side note, L\u00d6VE is similar to Lua in this regard. Compared with Python for example, there's a lot less to the language (and it doesn't have many \"high level\" libraries). Lua and L\u00d6VE both being minimal like this has its pros and cons.\r\n\r\nAnother thing to consider is what precedent this sets within the API. For example, would `love.graphics.setBackgroundColor(0)` also behave like `setColor`? What about `ImageData:setPixel(x, y, 0)`? It's not obvious either way. These functions also take tables of color values, so would `love.graphics.setColor({0})` work? And does `love.graphics.setColor(1, 0.5) set a white pixel with 50% opacity, or error? It's not obvious."],"labels":["change"]},{"title":"love.system.getOS() should also return the OS version information","body":"The information is returned after the OS version string. Various returns values of `love.system.getOS()` in various OS:\r\n\r\n* Windows 10 1909: `Windows`, `10`, `0`, `18363`, `900`, `1909`. Note that the last value (`1909`) may not present in all Windows 10 versions, so that can be `nil`.\r\n\r\n* Windows 7 SP1: `Windows`, `6`, `7`, `7601`\r\n\r\n* macOS 14.15: `OS X`, `14`, `15`. Should it return `macOS` in 12.0 or keep it `OS X`?\r\n\r\n* iOS 13.5.1: `iOS`, `13`, `5`, `1`\r\n\r\n* Android 5.1: `Android`, `22`. Note that `22` correspond to the API level.\r\n\r\n* Android 10.0: `Android`, `29`\r\n\r\nIf no version information is available, notably in Linux, then only the 1st return value is valid, which is the OS name. The 2nd value and so on simply doesn't exit. So `love.system.getOS()` in Linux just return `Linux` as it was.\r\n","comments":["https:\/\/github.com\/love2d\/love\/issues\/850 (https:\/\/bitbucket.org\/rude\/love\/issues\/845\/lovesystemgetos-more-detailed-information)","Ah should've look at the issue tracker better next time. Should I close it?\r\n\r\nTo answer all bartbes's questions there:\r\n\r\n> concrete proposal about what to expose\r\n\r\nFor my proposal, just version numbers.\r\n\r\n> why it needs to be exposed\r\n> why love would need to support it itself\r\n\r\nIn my game I have a special page which shows all information like the renderer info, all supported texture formats, and including the OS for bug reporting. Sadly I have to write lots of code for it in Lua side. Also after thinking about it, this is what `love.system` is meant for, provide information about user system.\r\n\r\n> how to obtain the information\r\n\r\nI have a code to retrieve the all of those necessary info for Windows at https:\/\/github.com\/MikuAuahDark\/livesim2\/blob\/e5496da47d128c4f9c6d21bb6f811ff84d9eaf63\/game\/systeminfo.lua#L36-L58\r\n\r\nFor Android, assume SDL 2.0.12, it's as simple as calling [`SDL_GetAndroidSDKVersion()`](https:\/\/discourse.libsdl.org\/t\/sdl-2-0-12-released\/27318).\r\n","Personally I think numbers are way too version-specific to expose properly - if getOS were to return more information, I'd prefer it if it was a string (as a second return value). If you know what the numbers represent enough to use them, then you can probably also parse those numbers from a string if you need.","If that approach is also used, it's also possible to construct a string containing that information as shown later in the code I linked above. Sadly for Android, this means tables of Android codenames must be used.","I didn't mean only exposing codename strings for operating system versions, I meant that the OS- and version-specific numbers (and other info) should be a string rather than a series of Lua numbers.","Yeah, I completely understand. So, in Windows 7 SP1, `love.system.getOS()` returns `Windows` and `6.1.7601` right?","I guess that would depend on what people want to use it for - if it's for data collection or branching logic, having the internal version numbers makes sense. If it's for display purposes, having the 'pretty' name makes sense.","I was thinking of adding optional 1st argument for it which returns all the versions as Lua numbers when set to true, and version string otherwise. However that would bloat LOVE code significantly, so I think it's either version string for display purpose or series of Lua numbers for branching logic.","What about `return OS, prettyname, internalversionstring`?","In that case, here's list of cases for `love.system.getOS()`:\r\n\r\n* Windows 10 1909 build 10.0.18363.900: `Windows`, `10 1909`, `10.0.18363.900`\r\n\r\n* Windows 7 SP1: `Windows`, `7`, `6.1.7601` (note that `7` for the 2nd value is string, not number)\r\n\r\n* macOS 14.16: `OS X`, `Mojave`, `14.16`\r\n\r\n* iOS 13.5.1: `iOS`, `(empty string)`, `13.5.1` (I don't know what to put at 2nd returned value)\r\n\r\n* Android 5.1: `Android`, `Lollipop (5.1)`, `22`\r\n\r\n* Android 10.0: `Android`, `10`, `29` (note that `10` for the 2nd value is string, not number)\r\n\r\nIf that looks good, then I'd need assistance on implementing it for macOS and iOS since I don't have those devices.","Of course it's also possible to return more structured data in a table:\r\n\r\n```lua\r\n{\r\n  os = \"Windows\",\r\n  majorVersion = 10,\r\n  displayVersion = \"Windows 10, 1909\"\r\n  fullVersion = {10, 0, 18363, 900}\r\n}\r\n```\r\n\r\nOf course that raises the follow up question what to return and with what names, but it's extensible and forces the lover to make a choice what to display."],"labels":["feature"]},{"title":"l\u00f6ve crashing on exit when requiring \"love.window\" in conf.lua","body":"sample game that replicates the crash:\r\n[bug.zip](https:\/\/github.com\/love2d\/love\/files\/4786871\/bug.zip)\r\n\r\nIn textform:\r\nmain.lua:\r\n```lua\r\nfunction love.draw()\r\n    love.graphics.print(\"hello\")\r\nend\r\n```\r\n\r\nconf.lua:\r\n```lua\r\nrequire(\"love.window\")\r\n```\r\n\r\n\r\nA workaround has already been found by adding a `require(\"love.font\")` before `require(\"love.window\")` in `conf.lua`.","comments":[],"labels":["bug","11.3"]},{"title":"liblove naming convention","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1534) by Will Sinatra (Bitbucket: [Will Sinatra](https:\/\/bitbucket.org\/Will Sinatra), ).**\n\n----------------------------------------\n\nThe naming convention of the love library is off it is currently liblove-11-3.so when it should be liblove.so.11.3 and have a liblove.so.11 symlink.\n\n[https:\/\/gitlab.alpinelinux.org\/alpine\/aports\/merge\\_requests\/2402](https:\/\/gitlab.alpinelinux.org\/alpine\/aports\/merge_requests\/2402)\n","comments":["That naming scheme does imply a level of compatibility that we simply do not guarantee. liblove.so.11.2 can be ABI and API-incompatible with liblove.so.11.3, so the common liblove.so.11 symlink is misleading and useless."],"labels":["11.3","Linux"]},{"title":"Stream audio decoder","body":"\r\n[radio.love.zip](https:\/\/github.com\/love2d\/love\/files\/4238681\/radio.love.zip)\r\n**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1531) by Snusmumriken (Bitbucket: [MainTomato](https:\/\/bitbucket.org\/MainTomato), GitHub: [MainTomato](https:\/\/github.com\/MainTomato)).**\r\n\r\n----------------------------------------\r\n\r\nI wrote online radio player, but it have some issues:\r\n\r\n1. Decoder really needed to use _files_, it can't bufferize string streams.\r\n2. Every time file is updated, decoder needs to be recreated and seeked to \"current\" position. It may took a lot of time and, most important, it reads and decode all content of saved file from the start while seeking. So it consumes more and more memory for tempfile decoding.\r\n\r\nSo it will be very nice if decoder gets an queueable interface like\r\n\r\n```lua\r\n-- MaxSize it's max internal buffer for encoded data\r\n-- ChunkSize it's size of decoded chunks\r\ndecoder = love.sound.newDecoder(int MaxSize, int ChunkSize)\r\n-- Now it's \"empty\" decoder\r\n\r\n-- Now it parses string filedata from chunk \r\n-- and fills internal Rate, Channels, BitDepth fields of decoder etc\r\ndecoder:queue(string EncodedData)\r\n\r\n-- Seeking may be little hard, but it may resets \r\n-- if decoder buffer is stripped to \"current position\"\r\ndecoder:seek(1.2345)\r\nlocal chunk = decoder:decode()\r\n\r\n-- decoder stripping\r\ndecoder:strip(float TimeUnit)\r\n```\r\n\r\nAlso similar interface will be very helpful with video streams.\r\n\r\n\u200c\r\n","comments":["**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nSince a couple of released versions, QueueableSources exist in L\u00f6ve, that you should use for realtime audio playback, not Decoders; do look that up on the wiki.\n\nThey take raw samplepoints though, not an encoded format, but that can be solved relatively easily.\n\n\u200c\n\nThe Decoders still loading the files in completely is a known issue though, and i did hear some potential solutions for that in the future. \\(Not sure about string streams though, but i agree that they could be useful\\)\n","**Original comment by Snusmumriken (Bitbucket: [MainTomato](https:\/\/bitbucket.org\/MainTomato), GitHub: [MainTomato](https:\/\/github.com\/MainTomato)).**\n\n----------------------------------------\n\nSo at now, decoder bufferizes files, but it can bufferize strings with a little internal changes. I might be able to write an OGG stream decoder for a pure lua, but it will be expensive.\n\n\u200c\n","**Original comment by Mi 28 (Bitbucket: [rcoaxil](https:\/\/bitbucket.org\/rcoaxil), ).**\n\n----------------------------------------\n\nTry your luck implementing `decoder:feed` function where you pass in encoded data chunk and it returns decoded `SoundData`, make sure to submit a pull request on this.\n"],"labels":["feature"]},{"title":"crc32","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1514) by itraykov (Bitbucket: [itraykov](https:\/\/bitbucket.org\/itraykov), GitHub: [itraykov](https:\/\/github.com\/itraykov)).**\n\n----------------------------------------\n\nWould be nice to have native support for crc32 in love.math.\n\nI need it for the following lib so we can build ZIP\/LOVE files:\n\n[https:\/\/love2d.org\/forums\/viewtopic.php?f=5&t=86893](https:\/\/love2d.org\/forums\/viewtopic.php?f=5&t=86893&p=229613#p229613)\n","comments":[],"labels":["feature"]},{"title":"BezierCurve:insertControlPoint() cannot insert at the last index","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1500) by Krunklehorn (Bitbucket: [Krunklehorn](https:\/\/bitbucket.org\/Krunklehorn), GitHub: [Krunklehorn](https:\/\/github.com\/Krunklehorn)).**\n\n----------------------------------------\n\nFrom the wiki...\n\n> BezierCurve:insertControlPoint  \n> Insert control point as the new i-th control point. Existing control points from i onwards are pushed back by 1. Indices start with 1. Negative indices wrap around: -1 is the last control point, -2 the one before the last, etc.\n\n\u200c\n\nIf I'm reading this correctly, the following code...\n\n```lua\n-- a simple curve with four points in a counter-clockwise motion\n-- default index is -1 (last), but was included for clarity\ncurve:insertControlPoint(0, 0, -1)\t-- bottom left\ncurve:insertControlPoint(100, 0, -1)\t-- bottom right\ncurve:insertControlPoint(100, -100, -1)\t-- top right\ncurve:insertControlPoint(0, -100, -1)\t-- top left\n\nprint(curve:getControlPoint(1))\nprint(curve:getControlPoint(2))\nprint(curve:getControlPoint(3))\nprint(curve:getControlPoint(4))\n```\n\n...should yield the following result.\n\n```lua\n0\t0\n100\t0\n100\t100\n0\t100\n```\n\nSince each point is supposed to be inserted at the last index, we expect the points to be in order as shown.  \nHere's what happens instead...\n\n```lua\n100\t0\t-- (2nd)\n100\t100\t-- (3rd)\n0\t100\t-- (4th)\n0\t0\t-- (1st)\n```\n\nAttempting to insert a point at the last index \\(-1\\) actually inserts it at the _second_ last index.  \n\nOkay, so we think to try inserting at index 0 maybe?  \nUnfortunately that doesn't work....\n\n```lua\n0\t100\t-- (4th)\n100\t100\t-- (3rd)\n100\t0\t-- (2nd)\n0\t0\t-- (1st)\n```\n\nThis gets treated as if you were inserting at index 1, which keeps your points in line but reverses their order since you're constantly pushing the whole list forward.  \n  \nAdditionally: the wiki's description, \"points from i onwards are pushed back by 1\" should actually say that the points are pushed _forward_, at least that's the intended result, right?\n","comments":["**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\n> Since each point is supposed to be inserted at the last index, we expect the points to be in order as shown.\n\nWell.. the docs suggest otherwise, though I do agree it\u2019s not the behaviour you\u2019d want. What happens is:\n\n* Insert _a_ at -1 into an empty list: the list becomes your first element _a_\n* Insert _b_ at -1 aka 1 into \\[_a_\\], this means _b_ will be at the new index 1, and everything from 1 on is pushed back, result is \\[_b_, _a_\\]\n* Insert _c_ at -1 aka 2, _c_ will be at 2, 2 and on will be pushed back, result is \\[_b_, _c_, _a_\\]\n* Insert _d_ at -1 aka 3, _d_ will be at 3, 3 and on will be pushed back, result is \\[_b_, _c_, _d_, _a_\\]\n\nWhich is exactly what you found. You can specify a past-the-end index to actually make the new element be the last element, rather than the second-to-last element. The following code does the make the sequence you\u2019d expect:  \n\n```lua\n\tcurve:insertControlPoint(0, 0, 1)\n\tcurve:insertControlPoint(100, 0, 2)\n\tcurve:insertControlPoint(100, -100, 3)\n\tcurve:insertControlPoint(0, -100, 4)\n```\n\n\u200c\n\n> Additionally: the wiki's description, \"points from i onwards are pushed back by 1\" should actually say that the points are pushed _forward_, at least that's the intended result, right?\n\nI\u2019d say they do get pushed back, if we consider index 1 the front. I guess strictly speaking they\u2019re pushed towards the end.\n\nI _think_ the reasonable behaviour for `insertControlPoint` is to insert after the specified element, not before, if the index is negative, but maybe someone else has input on that?\n","**Original comment by Krunklehorn (Bitbucket: [Krunklehorn](https:\/\/bitbucket.org\/Krunklehorn), GitHub: [Krunklehorn](https:\/\/github.com\/Krunklehorn)).**\n\n----------------------------------------\n\nAhh, I understand now. I misunderstood thinking the default behavior of -1 would operate the same as the default for lua\u2019s table.insert\\(\\), essentially a push operation. Thus I think the wraparound mechanic is fine, but the default behavior is all that needs changing. Unless there is some other reason for this, I think it should default to the number of control points plus one, just as table.insert\\(\\) does.\n"],"labels":["change"]},{"title":"Cannot change macOS Icon 11.x","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1466) by Tim Anema (Bitbucket: [tanema](https:\/\/bitbucket.org\/tanema), GitHub: [tanema](https:\/\/github.com\/tanema)).**\n\n----------------------------------------\n\nI cannot seem to change the Icon in a OSX build in the normal way. I tried changing the plist file as well as just replacing the default icons with my own. (using the same names as the old one) \n\nNow I am vaguely aware that the Assets.car file might have something to do with this. Is there a recommended tool to change this file or is there some way we can alter the icon some other way?\n","comments":["**Original comment by LetXPlay Ixam (Bitbucket: [Letexplay](https:\/\/bitbucket.org\/Letexplay), ).**\n\n----------------------------------------\n\nI have exactly the issue. Just emailed an administrator.\n","**Original comment by Vexatos (Bitbucket: [Vexatos](https:\/\/bitbucket.org\/Vexatos), GitHub: [Vexatos](https:\/\/github.com\/Vexatos)).**\n\n----------------------------------------\n\nCan confirm it also doesn't work on Linux. (Using Linux Mint 19.1 Cinnamon)\n","**Original comment by Julian Webb (Bitbucket: [julianwebb](https:\/\/bitbucket.org\/julianwebb), GitHub: [julianwebb](https:\/\/github.com\/julianwebb)).**\n\n----------------------------------------\n\nCan someone create a love file that displays this issue so others can test and be sure they are testing correctly?\n","**Original comment by Vexatos (Bitbucket: [Vexatos](https:\/\/bitbucket.org\/Vexatos), GitHub: [Vexatos](https:\/\/github.com\/Vexatos)).**\n\n----------------------------------------\n\nThis one tries to change the default icon using conf.lua. Confirmed to correctly update the window icon on Windows, and not doing so on Linux (using love 11.2): http:\/\/mirror2.openshell.no\/mirror\/vexatos\/icon-test-1.love\n","**Original comment by Tim Anema (Bitbucket: [tanema](https:\/\/bitbucket.org\/tanema), GitHub: [tanema](https:\/\/github.com\/tanema)).**\n\n----------------------------------------\n\nMy intention for this was the distribution and not the `love.window.setIcon` API. Following the distribution instructions here: https:\/\/love2d.org\/wiki\/Game_Distribution#Creating_a_Mac_OS_X_Application I am no longer able to change the default icon of an OSX distribution.\n","**Original comment by Vexatos (Bitbucket: [Vexatos](https:\/\/bitbucket.org\/Vexatos), GitHub: [Vexatos](https:\/\/github.com\/Vexatos)).**\n\n----------------------------------------\n\nI apologize, I misunderstood. These must be two different issues, then.\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nYes, Apple uses a new format for icon bundles now which is much more flexible and powerful than the old .icns container format. I don't know if there are any decent third party tools to edit them yet.\r\n"],"labels":["bug","11.2","macOS"]},{"title":"l.a.newSource can be created with 'queue' type -> getType returns 'stream'","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1450) by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nAs discovered by @MikuAuahDark , `love.audio.newSource` can be given a SourceType of `queue`, and instead of erroring, it will create a stream source:\n\n```\naudio = love.audio.newSource(\"filename.wav\", \"queue\")\n\nprint(audio:getType()) -- stream\n```\n\nNow, users might not expect this kind of separation, since all 3 types of sources are in one definition (SourceType), and they could rightfully expect that `love.audio.newSource` could indeed have a variant that would be equivalent to the currently extant separate `love.audio.newQueuableSource` constructor.\n\n\n\n*Maybe this might not be the best place for such a discussion, but maybe the reasons could be reiterated for that separation, since one could argue that love.audio.newStreamSource and love.audio.newStaticSource could also have merit, or on the more logical flip-side, merging newQueueableSource back into newSource.*\n","comments":["**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nI'm not sure if a merge is good idea... the arguments are too different\n\n```lua\nsource = love.audio.newSource(filename, \"static\/stream\")\nsource = love.audio.newQueueableSource( samplerate, bitdepth, channels, buffercount )\n```\nIf we merged it it would be:\n```lua\nsource = love.audio.newSource(\"queue\", samplerate, bitdepth, channels, buffercount )\n```\nWhich has the type first, and then all the arguments which is entirely different to the `newSource` variant... you could have the arguments first but again, this variant has way more arguments than `newSource` has.\n\nI do agree that `love.audio.newSource(\"filename.wav\", \"queue\")` should error with something like `Error: \"queue\" SourceType is not supported in love.audio.newSource. To create a queauable source, check love.audio.newQueauableSource instead` or something like that\n","**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nI don't think that the too varied argument (parameter) lists are an issue, but i agree that the fact that the sourcetype parameter isn't first in most cases (with the one exception being passing a SoundData to newSource), is a bigger roadblock for my suggestion; otherwise it would be pretty tolerable to have (type, ...) as argument lists; just look at love.sound.newSoundData.\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nI believe `QueuableSource` is actually a subtype of `Source` which means that it can be used as `Source` and it can have methods a `Source` wouldn't have (like `:queue` and `:getFreeBufferCount`) and it also warrants a separate constructor aka `love.audio.newQueauableSource`\n\nSo a `Source` isn't necessarily a `QueauableSource` but `QueauableSource` is always a `Source`\n\nI believe this distinction would make total sense for the API.\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nI just pushed 2bae7ed27a35, which makes this an error. That said, it's probably right to solve this properly for the next major release. I'm leaning towards moving the type parameter to the front, thereby supporting a combined newQueue. The question then becomes what to do with the shorthand for SoundData and Decoder.\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nOn Discord we discussed about separating Sources from Queues and having a common parent type (no name yet) that would act like Texture does for Canvas and Images, Sources would have their own methods while Queues would have their own, and those shared would be in that new abstract type.\n\nSo @z0r8 investigated which methods made sense for them to share and which don't work for both, I think that would be the best way forwards, and makes sense considering how it's done in different modules.\n","**Original comment by Miku AuahDark (Bitbucket: [AuahDark](https:\/\/bitbucket.org\/AuahDark), GitHub: [MikuAuahDark](https:\/\/github.com\/MikuAuahDark)).**\n\n----------------------------------------\n\nProbably these:\n\n* `love.audio.newSource(SoundData)` always create `static` source.\n\n* `love.audio.newSource(type, path\/decoder)` either create `stream` or `static` source.\n\n* `love.audio.newSource(\"queue\", samplerate, bitdepth, channels, buffercount) for queueable source.\n","**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nI envisioned it like this, to be honest, the constructor, i mean:\n```\nlove.audio.newSource(SoundData)            -- always static\nlove.audio.newSource(Decoder)              -- always stream\nlove.audio.newSource(typestring, string)   -- from a path (static or stream)\nlove.audio.newSource(typestring, File)     -- from a file (static or stream)\nlove.audio.newSource(typestring, FileData) -- from a filedata (static or stream)\nlove.audio.newSource('queue', SamplingRate, BitDepth, ChannelCount, BufferCount)\n```\n\nAlso, i would deprecate allowing a Decoder to be loaded in as a static source, because in that case, you'd just load it in as a static from a path\/file\/filedata, or create one from a SoundData directly; i do not see any reason to keep that variant around...\n\nThen again, now that i look at it, creating a queueable source can only be done in one way, so the type argument doesn't make too much sense there either... then again, it shouldn't be too big of an issue. Now, i'm not sure whether the above or the below variant is better.\n```\nlove.audio.newSource(nSR, nBD, nCC, nBC)   -- always queue\nlove.audio.newSource(SoundData)            -- always static\nlove.audio.newSource(Decoder)              -- always stream\nlove.audio.newSource(string, stype)        -- from a path (static or stream)\nlove.audio.newSource(File, stype)          -- from a file (static or stream)\nlove.audio.newSource(FileData, stype)      -- from a filedata (static or stream)\n```\n","**Original comment by Miku AuahDark (Bitbucket: [AuahDark](https:\/\/bitbucket.org\/AuahDark), GitHub: [MikuAuahDark](https:\/\/github.com\/MikuAuahDark)).**\n\n----------------------------------------\n\nI'm actually against deprecating `love.audio.newSource(\"static\", Decoder)`\nbecause that means I can't load static source from library like LVEP, which\nonly returns Decoder object and not SoundData.\n","**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nIt would make the API just a bit more cleaner, though; at least hopefully we can agree that a `'stream', SoundData` variant doesn't make any sense.\n\nLet me ask you, if you already have a Decoder for that, why would you want to decode the file -completely- into a SoundData? To me, i'd rather just implement a SoundData constructor in your lib, to be honest, which would return that by default.\n\nBesides, you can still do that by (if you don't have it, implement it first) calling `:getDuration` on your custom Decoder, then create a SoundData with that size, and copy the data into them yourself; l\u00f6ve kinda does this internally at the moment for this one specific case.\n","**Original comment by Miku AuahDark (Bitbucket: [AuahDark](https:\/\/bitbucket.org\/AuahDark), GitHub: [MikuAuahDark](https:\/\/github.com\/MikuAuahDark)).**\n\n----------------------------------------\n\nAlright I forgot that I can construct SoundData from Decoder with `love.sound.newSoundData`. Deprecating static + Decoder variant then is left to developers.\n\nBut yeah I agree that `love.audio.newSource(\"stream\", SoundData)` doesn't make any sense.\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nAlso remember that the constructor is not the only difference between QueueableSources and normal Sources.\n\nQueues have two additional methods (which don't work or have no use with normal Sources, `queue` and `getFreeBufferCount`) while there are some functions from Sources that don't work for Queues (`set\/isLooping` maybe there are more...)\n\nI think that means splitting makes more sense given that consideration. I do agree on @z0r8 proposal on SoundData being always static and Decoder being always stream, but not on the queue constructor.\n","**Original comment by Mi 28 (Bitbucket: [rcoaxil](https:\/\/bitbucket.org\/rcoaxil), ).**\n\n----------------------------------------\n\nWhen the functionality was being developed, it was decided against having `newSource` constructor for Qsources, hence it has its own constructor. The way it's handled is very different from normal sources. Was it brought back, or was it never removed properly in the first place? Either way, the Qsource shouldn't be created through `newSource` because it's basically a different type, if it's factually possible then it should be made impossible.\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nYeah making a separate type would be better then, specially if implementation differs that much.\n\nWhat's a good name for the abstract type that is parent for Source and Queue?\n","**Original comment by Mi 28 (Bitbucket: [rcoaxil](https:\/\/bitbucket.org\/rcoaxil), ).**\n\n----------------------------------------\n\nJust Source. Qsource is a subtype of Source, it has a little bit of additional functionality that Sources don't have.\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nSource is not an abstract type... and there are methods on Source that don't work correctly on QSources like `isLooping\/setLooping`\n","**Original comment by Mi 28 (Bitbucket: [rcoaxil](https:\/\/bitbucket.org\/rcoaxil), ).**\n\n----------------------------------------\n\nThey're both playable through OpenAL with all the bells and whistles, so I suppose `Playable` could be a base class. The major difference then is that normal sources are created from files and handle their own playback, and qsources are created blank to certain audio specs and fed audio data manually. It should be pretty obvious why looping qsource doesn't makes sense and is not supported. To that end, Static and Stream sources should be different classes, because Static sources could have additional functionality of looping points (exists in OpenAL but not exposed to LOVE) which Stream sources obviously can't have.\n","OP here; just an addendum that with the upcoming 12.0 release, there has been an addition to Sources:\r\n\r\n`stream` type Source objects now have an additional **stream type** parameter, deciding whether their internal Decoder reads the non-decoded data from memory (`memory`), or from storage (`file`).\r\n\r\nBasically, this implements a middle ground between keeping the entirety of the decoded data in memory ala `static` sources and the previous functionality of streaming sources where data was always read from storage.\r\n\r\n_(of course, this benefit does not exist if you're decoding an uncompressed wav in the first place)_","The previous functionality was actually how the new `memory` stream type behaved. `file` streaming is completely new and is also the new default."],"labels":["change"]},{"title":"Proposal for an \"immediate\" mesh rendering\/vertex submission API","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1446) by Max Cahill (Bitbucket: [geti](https:\/\/bitbucket.org\/geti), GitHub: [geti](https:\/\/github.com\/geti)).**\n\n----------------------------------------\n\nAn immediate mode vertex submission API would provide:\n\n- a low friction way to submit arbitrary textured geometry\n- a very versatile primitive for building other userland rendering APIs\n- a way to get started experimenting with vertex attributes in shaders\n- a \"lower level\" way of interacting with the rendering API without managing Mesh objects\n\nThis was discussed briefly in discord; slime seemed possibly interested and it was suggested that it be further discussed on bitbucket, so here it is.\n\n**Minimum Spec:**\n\n```\n#!lua\n\nlove.graphics.vertices(\n  optional_texture,\n  vertex_table_or_data,\n  primitive_mode,\n  optional_indices\n)\n```\n\nBasically a \"textured tri\" version of the existing polygon API, with the ability to submit positions, uvs, and colours directly. The vertex format would match the existing \"built in\" mesh format, with the same defaults.\n\nThe primitive mode may require flushing the batch; the most useful mode would be \"triangles\" and could be provided as the only option at a pinch.\n\nOptional user submitted indices (relative to the submitted geometry, not the whole batch) would be ideal, to reduce the amount of data to be transferred and kept up to date for redundant geometry.\n\n**Possible Spec Extensions:**\n\n```\n#!lua\n\nlove.graphics.setVertexFormat(\n  same args as mesh:newMesh vertexformat\n)\n```\n\nThe ability to set a custom vertex format would allow users to experiment with custom vertex formats and shaders in a lower-friction environment than with persistent mesh objects, and avoid \"reusing\" existing attributes like colour components.\n\nAlternatively, an enum could at least be used to set just from the \"existing\" batching vertex formats (and those could maybe be extended a little) to avoid extensive reworking of the batching system.\n\n```\n#!lua\n\nlove.graphics.setBatchSize(\n  size_enum\n)\n```\n\nThe ability to set the batch index size (to 8, 16, 32 bit at least) would allow people to trade off larger or smaller batches for cache bandwidth; 8 bit indices could be used for rendering a lot of heterogeneous sprites, 32 bit for huge meshes\/high definition lines\/etc. This would either require draw-splitting or \"accepting\" the current truncation of large draws.\n\nApparently 32 bit indices are not supported on GL ES platforms - 16 bit is a sane default anyway, and a warning about this could be provided in the documentation.\n\n**Things this proposal is not:**\n\nThis is not intended as a replacement for the Mesh API. The mesh API would still be a significant optimisation for most cases of static geometry.\n\nThis is not intended as a replacement for submitting simple textured quads or untextured primitives.\n","comments":["Just to note, my github is now @1bardesign, not @geti \ud83d\udc4d","You can just write a wrapper function that does this. ","Sure, you can \"just\" write a wrapper function for batched geometry using a mesh, but as a user of love you can't easily do the following:\r\n\r\n- continue to batch with existing compatible geometry from other `lg` calls\r\n- transform verts on the cpu across transformation stack mutations without repeated copying of the transform\r\n- hook the transformation stack mutations without monkeypatching all the `lg` transformation functions,\r\n- integrate with `lg.present` to auto-flush without monkeypatching it, alternatives would be either useing a `renderTo(f)` style api or manual batch flushes, neither give the same user experience\r\n- utilise the already-extant streaming vertex buffers used for batching on the love side to save memory\r\n\r\nI feel that the requirement for monkeypatching so much core lg functionality to achieve anything close to this proposal makes it pretty clear that it would be better accomplished from inside love, with access to all the internal data structures.\r\n\r\nFurther, it's pretty clear that to implement something like this in user space, you'd end up re-implementing all of the batching machinery, which already exists inside of love.","So basically, you wish that SpriteBatch would accept meshes, not just quads. That's actually perfectly reasonable and not at all difficult to implement. With that in mind, the autobatching mechanism should also add meshes to current batch when possible (I don't know if it currently does but I assume that it doesn't), thereby satisfying your concerns. \r\n\r\nWhat you originally described had virtually nothing to do with batching and it was implied that it was somewhat a debug kind of functionality, all which was just a wrapper over existing functions - there was no reason to implement any of that.","To clarify, this proposal is not really intended to be on top of a `SpriteBatch` object, but to complement the existing immediate drawing API, nor is my concern that meshes themselves aren't batched.\r\n\r\nThe batching system transforms vertices before submitting them to the gpu as they are assumed to be streamed - meshes do not (and spritebatches do not, iirc).\r\nFurther, changing that behaviour would be unhelpful as you would lose the ability to transform a static mesh or spritebatch (think terrain patch, tilemap, vegetation) around using the transformation stack without re-uploading verts.\r\n\r\nThis proposal requires:\r\n- a way to submit arbitrary vertex geometry to the built in batching system, with immediate-style calls.\r\n- as an extension, allow the batching system to accept non-builtin vertex formats, for streaming geometry with custom attributes to shaders without needing a retained mesh in \"userland\".\r\n\r\nIf `SpriteBatch` would be extended to accept arbitrary geometry too (perhaps `GeometryBatch` at that point?) that would be welcome, of course.\r\n\r\nSidenote: the string \"batch\" appears 7 times in the initial proposal, so I'm not sure how it quite had nothing to do with batching :wink: It also never mentioned being debug functionality.\r\n\r\nThis is the heart of the proposal:\r\n\r\n> An immediate mode vertex submission API would provide:\r\n> - a low friction way to submit arbitrary textured geometry","You mentioned batches but I don't believe it actually has to do with batches. Does the following script implements your idea? \r\n```\r\nlove.graphics.setVertexFormat = function ( vertexformat )\r\n    if not vertexformat then\r\n        love.graphics._vertexformat = nil\r\n    else\r\n        local success, errmsg = pcall ( love.graphics.newMesh, vertexformat, { { } }, 'fan', 'dynamic' )\r\n        if not success then\r\n            error ( errmsg )\r\n        end\r\n        love.graphics._vertexformat = deepcopy ( vertexformat )\r\n    end\r\nend\r\n\r\nlove.graphics.getVertexFormat = function ( )\r\n    return deepcopy ( love.graphics._vertexformat )\r\nend\r\n\r\nlove.graphics.vertices = function ( texture, vertices, mode )\r\n    local mesh\r\n    if love.graphics._vertexformat then\r\n        mesh = love.graphics.newMesh ( love.graphics._vertexformat, vertices, mode, 'dynamic' )\r\n    else\r\n        mesh = love.graphics.newMesh ( vertices, mode, 'dynamic' )\r\n    end\r\n\r\n    if texture then\r\n        mesh:setTexture ( texture )\r\n    end\r\n    love.graphics.draw ( mesh )\r\nend\r\n```\r\n\r\nI don't exactly understand your concern with transformations and batching: you can't really batch multiple large meshes because you have to transform every single vertex (since the entire mesh shares a global transformation) and that's not really feasible, particularly not in immediate mode, so naturally you default to not transforming anything, and by extension to breaking the batch - as it currently is. Not to mention, shall you use custom vertex format or a texture for your polygon you'll have to do a shader and\/or texture switch, which will break the batch regardless - and doing so seems to be the idea.","**Batch** (verb): arrange (things) in sets or groups.\r\n\r\nL\u00d6VE 11.0+ (since 0d2e08baff01f0a103e5548d1636557887e40205) Auto-batches draw calls  that use the same resources, for example `love.graphics.circle` and `love.graphics.rectangle` don't need to be two separate draw calls, they can be grouped as one. All the vertices are put in the same mesh, and once they need to be draw to the screen they will be rendered in the same draw call.\r\n\r\nThe same applies to rendering the same image multiple times (with or without different Quads), the draw calls can be **batched** into a single one. To do this, L\u00d6VE uses an internal \"SpriteBatch\".\r\n\r\nBut this is not really the same as a SpriteBatch exposed to the Lua side, it has some other logics and checks for state changes during `love.draw` that may require the batch to be flushed and rendered to screen and it also transforms the vertices on the CPU and some other things.\r\n\r\nThis **batch** logic could be used with Mesh data, in addition to the Quads I mentioned before.\r\n\r\nThe idea proposed here is that you could feed data to the internal mesh used by L\u00d6VE Auto-batching mechanism, and as long as the state remains the same (no BlendMode change, no Shader change, no Texture change, etc) you could continue grouping it.\r\n\r\nOnce the contents are flushed it would all belong to a single draw call.\r\n\r\nYour example doesn't do this, each call to `love.graphics.vertices` becomes one draw call. There is no **batching**\r\n\r\nI hope this clarifies the idea so that the issue can be discussed properly.\r\n\r\nSome notes to clarify some of your doubts: When feeding a large amount of data you would split the draw call because the Buffer would be full. Different vertex formats and Textures would break the batch, but that's the same as it is right now when rendering quads, so no issues there.","This is a great answer to a question that nobody asked, thank you. To paraphrase: why concern with batching if it cannot be achieved under intended use case?","Intended use case of streaming arbitrary textured geometry _can_ be batched, just as textured quads can be batched currently with `love.graphics.draw(t, q, x, y)`.\r\n\r\nAll that is required to do so, in fact, is a way of submitting geometry to exactly the same code as is already batching the aforementioned call, which is what this issue proposes.","It can be achieved.\r\n\r\nIt's of course limited, you won't always benefit from batching.\r\n\r\nYou need to fill the requirements:\r\n* Small amount of Geometry (so it doesn't exceed the Buffer limits)\r\n* Same Vertex Format\r\n* Same Texture\r\n\r\nAs long as you have this, you'll benefit of the batching mechanism.\r\n\r\nIf you are not interested in the proposal I would suggest to just leave it to the devs to decide.","I don't find anything contentious about adding ability to draw textured polygons (with is a small step up from existing functionality of drawing untextured polygons) and throwing in vertex format definition while we're at it - it should exist and I believe it should've been like this to begin with. Your original post made it sound like a narrow scope duplicate feature, instead. Perhaps if you phrased the original post like this the entire argument could've been avoided."],"labels":["feature"]},{"title":"Video playback freezes after resume on iOS","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1438) by Evan Barger (Bitbucket: [epbarger](https:\/\/bitbucket.org\/epbarger), GitHub: [epbarger](https:\/\/github.com\/epbarger)).**\n\n----------------------------------------\n\n- Play a video within your love app\n- Suspend the app by going to the home screen, or opening another app.\n- Resume the love app. The video will be frozen. video:isPlaying() will return true, but the video won't move. Video:tell() will return a value longer than the video length. Rewinding and toggling pause\/play doesn't seem to change anything.\n","comments":["**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nYou mention `tell` returns a value past the end of the video. Does seeking change that value at all? If you can attach a debugger, or anyone else can, is the video decoding thread still running and in an endless loop, or has it stopped altogether?\n\nOh, and another thought, does this happen when the video has audio, has no audio, or in both cases?\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nI did a bit of testing and this seems to only happen with theora videos that don't have audio. It looks like it's looping infinitely inside `OggDemuxer::readPage` \\(`ogg_sync_pageout` is never returning 1 I guess\\), and the call stack has it inside the `seekDecoder` call caused by the lag counter logic.\r\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nIt\u2019s possible this is the same issue as part of #1401.\r\n","**Original comment by Evan Barger (Bitbucket: [epbarger](https:\/\/bitbucket.org\/epbarger), GitHub: [epbarger](https:\/\/github.com\/epbarger)).**\n\n----------------------------------------\n\nFor the record, I believe I was using a theora video with no audio when I opened this original ticket.\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nGiven the location of the loop as reported by slime, it probably isn\u2019t fixed, but can you check if it still happens after commit 753ffd906b04f548a6323ea1c36bdfc16fa18e89?\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nAs of that commit it no longer freezes, but it does seem to keep playing in the background for a while. The test video I\u2019m using is pretty short so it often just ends up completing by the time love is in the foreground again.\r\n\r\nI suppose something like our code to pause Sources when backgrounding on Android might be necessary.\r\n"],"labels":["bug","11.1","iOS"]},{"title":"Support loop points in .wav files","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1432) by Joel Schumacher (Bitbucket: [dudeguy](https:\/\/bitbucket.org\/dudeguy), GitHub: [dudeguy](https:\/\/github.com\/dudeguy)).**\n\n----------------------------------------\n\nYou can specify which region to loop in a wave file and currently l\u00f6ve ignores this data. You can edit custom loop points using [Wavosaur](https:\/\/www.wavosaur.com\/tutorials\/how-to-make-loop.php), but I also prepared a test file from the first two CC0 sound effects I found on opengameart (see attachments - only the second grunt sound should be looping).\n\nThey are stored in the .wav files as described here: https:\/\/sites.google.com\/site\/musicgapi\/technical-documents\/wav-file-format#cue \n\nI would be willing to contribute the changes necessary to Wuff, if that would be helpful, but it seems to me some changes are necessary to SoundData, Sound and Decoder, which I have no real clue about. \n\nIt might also be nice to give the option of specifying those loop points via l\u00f6ve yourself (not as part of the .wav file).\n","comments":["**Original comment by Mi 28 (Bitbucket: [rcoaxil](https:\/\/bitbucket.org\/rcoaxil), ).**\n\n----------------------------------------\n\nLoop points are not supported in the audio engine, much less in the codecs. It would not be wise to implement this just for one audio file type, and the one not commonly used to boot. \n\nHowever, looping of the entire audio track is supported, and you could trivially produce looping points effect using queueable audio sources, by feeding it samples or track sections appropriately.\n\nSince the underlying audio framework supports this, it's not difficult to implement support of generic nondescript loop points that you set up manually. But it will not play nicely with stream sources, and will not work altogether with queueable sources.\n","**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nFor one, l\u00f6ve treats all non-queue sources the same in terms of it not caring what file format has been specified; wav, ogg, mp3 or even the module formats that libmodplug can parse and render. They are chunks of samplepoints either decoded with a Decoder object for non-static sources, or a SoundData kept in memory for static sources.\n\n\nTo have l\u00f6ve support loop points for one specific format would break the assumption that all other formats should have that support, which some simply don't have. (Module files could have their tracks toggled, for instance, but that's also not supported by the framework since they're also treated as just audio bitstreams)\n\n\nThe other thing is, you absolutely can make use of that information for looping, if you want! just load the file in, seek to the appropriate place in the file (wav has a neat chunk based structure, which i'm sure you know about), and load in the starting and end points, then you have two options:\n\n- Use a simple Source, and use :tell and :seek on it in love.update to have the playing source jump back to where it should be; disadvantages of this method is that :tell isn't that precise in terms of the update loop being called relatively slower than you'd need it to be (especially with vsync on).\n- Use a QueuableSource and a SoundData as buffer; I'd say to use a Decoder to load in the wav, then :decode chunks, and if they passed the loop end point you defined, copy over the samplepoints that are just before the loop end point, then seek the decoder back to where it should be, :decode again to get the data from the loop start point, copy over the data until the buffer's full, queue the buffer, copy in the rest, decode, repeat.\n\nAlso, @rcoaxil , i'm pretty sure the formats themselves support them, if not the codec and OpenAlSoft itself; again, software implementation of such a thing is possible; and i expanded on your second paragraph a bit, and since that's a good enough solution, your 3rd paragraph is a bit moot since nothing else has to work together nicely or not with any of the source types. Let's not confuse people too much :P\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nI think there are two paths to implementing this:\n\n - The simplest, easiest solution is to implement this at the Decoder level. Just do the looping while decoding and streaming sources just work. As far as I know, that's how loop points work for tracker formats right now. The big downside being that static sources will probably loop infinitely unless you deal with them separately.\n - The cleaner solution is to define loop points at the love.audio\/(streaming) Source level. Decoders are then responsible for parsing them and passing them up. This is way more invasive, but the big advantage is that it's then trivial to provide a lua API to define your own loop points. Additionally, it may not always be easy to find loop points up front, but I'm not sure how most decoders deal with them.\n","**Original comment by Mi 28 (Bitbucket: [rcoaxil](https:\/\/bitbucket.org\/rcoaxil), ).**\n\n----------------------------------------\n\nI'm pretty sure that for most file types, stream source looping will produce obnoxious clicking that's impossible to get rid of, due to waveform mismatch at the edges. In lossless files with sufficiently good codecs you may be able to work around this, but lossy files are guaranteed to have this problem. For static sources that would be fine; OpenAL supports loop points.\n","**Original comment by Joel Schumacher (Bitbucket: [dudeguy](https:\/\/bitbucket.org\/dudeguy), GitHub: [dudeguy](https:\/\/github.com\/dudeguy)).**\n\n----------------------------------------\n\nIt is true that queueable sources are able to emulate this behaviour, so there is no strict necessity for it anymore. But I have heard this question asked a couple of times on the l\u00f6ve Discord (how to loop specific ranges) and I think it would be nice, as bartbes suggested, to define your own loop points at the Source level.\n","[loop_point.wav.zip](https:\/\/github.com\/love2d\/love\/files\/4238670\/loop_point.wav.zip)\r\n"],"labels":["feature"]},{"title":"When other applications are running, videos start to get artifacts and can lock up","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1401) by Varun Ramesh (Bitbucket: [varunr](https:\/\/bitbucket.org\/varunr), GitHub: [varunr](https:\/\/github.com\/varunr)).**\n\n----------------------------------------\n\nWhen other applications are running (generally video players \/ recorders), videos in Love start to get artifacts. This is unfortunate, but what's worse is the video will permanently lock up after artifacts accumulate. video:tell() freezes at a certain value and video:isPlaying() always returns true.\n\nWhen this happens, love.update and love.draw callbacks are still being called, so ui elements still work correctly. However, when the game quits, the process does not exit and must be killed.\n\nI've attached a repro .love. I recommend running it while another video player is playing or OBS is recording.\n","comments":["**Original comment by Varun Ramesh (Bitbucket: [varunr](https:\/\/bitbucket.org\/varunr), GitHub: [varunr](https:\/\/github.com\/varunr)).**\n\n----------------------------------------\n\nHere's a recording of what the artifacts \/ lockup look like.\n","**Original comment by Varun Ramesh (Bitbucket: [varunr](https:\/\/bitbucket.org\/varunr), GitHub: [varunr](https:\/\/github.com\/varunr)).**\n\n----------------------------------------\n\nAs far as I can tell, the freezing is due to an infinite loop in [OggDemuxer::readPage()](https:\/\/bitbucket.org\/rude\/love\/src\/55f6c5a90b3edd23782e0595ee00740ea76a3a20\/src\/modules\/video\/theora\/OggDemuxer.cpp?at=default&fileviewer=file-view-default#OggDemuxer.cpp-49). `ogg_sync_pageout` always returns zero and `file->read` also always returns zero.\n","**Original comment by Varun Ramesh (Bitbucket: [varunr](https:\/\/bitbucket.org\/varunr), GitHub: [varunr](https:\/\/github.com\/varunr)).**\n\n----------------------------------------\n\nCommenting out the `lagCounter` code in `TheoraVideoStream::threadedFillBackBuffer` seems to fix the lockup. I still get artifacts, but that's not as big of a problem. I'm thinking that the issue has to do with trying to seek past the end of the file while trying to compensate for lag.\n\n```\n#!c++\n\/\/\t\tif (lagCounter++ > 5)\n\/\/\t\t{\n\/\/\t\t\tseekDecoder(position);\n\/\/\t\t\tlagCounter = 0;\n\/\/\t\t}\n```\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nI still need to find a better way to detect when to seek forwards... I should be able to do something about EOF, though I hoped I'd had the last of the EOF issues.\n","[video_artifacts_lockup.zip](https:\/\/github.com\/love2d\/love\/files\/4238665\/video_artifacts_lockup.zip)\r\n"],"labels":["bug","11.0"]},{"title":"Video playback doesn't always end on last frame.","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1400) by Varun Ramesh (Bitbucket: [varunr](https:\/\/bitbucket.org\/varunr), GitHub: [varunr](https:\/\/github.com\/varunr)).**\n\n----------------------------------------\n\nI'm currently working on an pre-rendered FMV game, and I've found that videos don't always end playback on the last frame. I've attached a simple repro which consists of a 60 frame video played at 60fps. Most of the time, the video ends on frame 59, and frequently it ends on frame 58 and 57.\n\nIf you play the video in Chrome and Firefox, it always ends on frame 60.\n","comments":["**Original comment by Varun Ramesh (Bitbucket: [varunr](https:\/\/bitbucket.org\/varunr), GitHub: [varunr](https:\/\/github.com\/varunr)).**\n\n----------------------------------------\n\nHere's the actual video that's being played.\n","**Original comment by Varun Ramesh (Bitbucket: [varunr](https:\/\/bitbucket.org\/varunr), GitHub: [varunr](https:\/\/github.com\/varunr)).**\n\n----------------------------------------\n\nOn closer inspection, I'm also finding that `video:tell()` continues on forever, despite the video only being one second long. This problem might be related - instead of `tell` going on forever, it should probably be clamped to the duration of the video.\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nThe tell thing is because there is no audio in the file. It's.. unintuitive, I know, but it shouldn't be harmful.\n\nAs for the main issue, I remember seeing some problems with final frames in the past, I wonder if it doesn't decode, or simply doesn't display. I think last time the issue was the decoder being done before the final frame was drawn, and the drawing code bailing thinking it was done too.\n","[video_lastframe.zip](https:\/\/github.com\/love2d\/love\/files\/4238663\/video_lastframe.zip)\r\n"],"labels":["bug","11.0"]},{"title":"Decoder and RecordingDevice being able to utilize user-given SoundData to dump data into.","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1393) by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nVia either giving an extra version for Decoder:decode and RecordingDevice:getData that one can supply an existing SoundData to, or giving users access to the internal getBuffer function in case of Decoders, or the alcCaptureSamples function in case of RecordingDevices (although in both cases, you set the buffer size when creating the Decoder or starting the RecordingDevice anyway... with exceptions being that the buffer would be semi-empty... then just return a samplepoint-count along with the user-supplied SoundData, or something along those lines.)\n\n\nProposal reason is worryment that a.) creating new SD objects take tons of cycles, especially when realtime decoding\/recording is done with small buffer \/ SD sizes; and b.) garbage collection is also probably strained when this is happening.\n","comments":["**Original comment by Mi 28 (Bitbucket: [rcoaxil](https:\/\/bitbucket.org\/rcoaxil), ).**\n\n----------------------------------------\n\nUnless the data storage unit you provided exactly matches the data that these devices have in them (and nearly 100% of the time it won't), internal buffer needs to be reallocated and all of its parameters overwritten. At that point it's basically the same as just creating new SoundDataf. It would make a little more sense to do that if you could use an exact fraction of SoundData, but it doesn't work that way.\n","**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nI'll come back to this when i'll have a bit more time and when i'll be able to look more deeply into OAL(S)' documentation and how the L\u00d6VE implementation does things; i'm still convinced that optimization is possible.\n","**Original comment by Mi 28 (Bitbucket: [rcoaxil](https:\/\/bitbucket.org\/rcoaxil), ).**\n\n----------------------------------------\n\nIt was implemented like this to start with, but then that was dropped. It did not improved performance most of the time, and when it did it was so marginal that it was not worth the user effort.\n\nThe expensive part of the data dumping is copying over the data. The cost of memory allocation and filling in 4 class values is minimal compared to that.\n","**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nNot seeing test suites makes me question whether my use cases were tested; also, copying from where and to what, exactly? Also, do address the GC concern i also mentioned in the OP, please.\n","**Original comment by Mi 28 (Bitbucket: [rcoaxil](https:\/\/bitbucket.org\/rcoaxil), ).**\n\n----------------------------------------\n\nCopying from OpenAL\/decoder's buffer to game's RAM. Buffer will be gone shortly thereafter so there's no way around it. You won't be creating SoundData objects for these buffers at such rate that it starts tanking GC performance, i.e. millions per second.\n\nThe testing was simply creating an object and copying over the memory, and just creating the object. It showed that copying the memory took between 90% and 99% of the total time, depending on buffer size. Vast majority of the rest is C++ overhead, the memory allocation cost is minuscule, barely a blip on the radar. Absurd buffer sizes such as 32 bytes weren't tested, but even then memory copying and C++ overhead would dominate the performance.\n","**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nHmm, even if we assume i'm doing 1ms long buffers, that's still *only* 1000s of SoundData objects per second, not a million; by your logic, that shouldn't affect GC performance... hopefully it won't eat up RAM either...\n","**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nI want to put this on hold still, for the time being, since i still want to test a few things, but ultimately, you may be right.\n","**Original comment by Mi 28 (Bitbucket: [rcoaxil](https:\/\/bitbucket.org\/rcoaxil), ).**\n\n----------------------------------------\n\nIt will eat up RAM at the rate of just over `samplerate * channels * bits` per second, typically ~200kb per second. Periodically this will be cleared. You can clear most of it immediately by manually destroying the SoundData, then it's just few bytes of Lua proxy object.\n"],"labels":["feature"]},{"title":"Alternative scalable font type?","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1387) by jarodwright (Bitbucket: [jarodwright](https:\/\/bitbucket.org\/jarodwright), ).**\n\n----------------------------------------\n\nBecause fonts are rasterized, when applying a transform to a font it doesn't scale well like most other draw functions. \n\nFor performance reasons rasterizing should be kept, however I propose that an alternative dynamic font which renders characters each frame would be desirable for scaling text.\n\nAn argument against this would be that you shouldn't ever be drawing text to the world and should instead be drawing it to the UI at a screen position based on the world.\n","comments":["**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nL\u00d6VE can load BMFont files, and there are tools to produce BMFont glyph atlases which use signed distance fields for the glyphs. You can then write a shader which renders those. https:\/\/github.com\/libgdx\/libgdx\/wiki\/Distance-field-fonts\r\n\r\nIt might be worth looking into making a shader included by default in L\u00d6VE for that, although I'm not sure how useful that would be since typically you'd want to tailor things a bit to how your game is going to use the distance field font. Some documentation on the wiki about this would be good, in any case.\r\n","Definite +1 here, I did search for SDF so missed this issue. Adding SDF to the comments so that it will be found for anyone else searching for that.","The Unity engine does a good job at implementing SDF text rendering with its TextMesh Pro component. It might be a good reference implementation. It would be good if the render function allowed the font size to be specified each time `love.graphics.printSdf(\"Hello\", 32, 0, 0)` or alternatively if there was a font size state `love.graphics.setFontSize(32)`.","All that you need is a shader that works with distance field font glyphs and a `love.graphics.setShader` call before printing text, everything else is already supported by love (for example `love.graphics.print` accepts scale parameters already, and `love.graphics.newFont` accepts BMFonts which can have SDF glyphs).","Upgrading FreeType to 2.11.0 or later would allow L\u00f6ve to use its SDF render mode to output SDF glyphs from any font. I already have a working proof of concept (adding \"sdf\" HintingMode paired with a shader)\r\n\r\n(excuse the experimental subpixel font test)\r\n![Screen Shot 2022-10-14 at 5 02 46 PM](https:\/\/github.com\/love2d\/love\/assets\/76017200\/8bd03be3-443d-4bc9-9615-b491171a1390)\r\n\r\n![Screen Shot 2022-10-14 at 6 48 26 PM](https:\/\/github.com\/love2d\/love\/assets\/76017200\/63044739-7bb7-4bf6-a31f-0748aef74bac)\r\n\r\nI'll probably clean it up and open a PR soon.","For now I've figured out you can use a simple shader that will use the antialiasing as a small section of a distance field, although it only works for upscaling:\r\n\r\n```glsl\r\nuniform float scl; \/\/ the scale factor you use to draw the text\r\nvec4 effect(vec4 color, Image texture, vec2 tc, vec2 sc) {\r\n\tvec4 c = gammaToLinear(color);\r\n\tfloat d = clamp(Texel(texture, tc).a * scl - 0.5 * scl + 0.5, 0.0, 1.0);\r\n\treturn linearToGamma(vec4(c.rgb, c.a * d));\r\n}\r\n```","@Labrium it would be cool if you did open a PR for this :D I am still wanting this","#1966 :)"],"labels":["feature"]},{"title":"love.graphics.print\/printf could possibly be named more accurately","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1364) by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\n(I kind of brought some of this up in an older issue along with some other stuff, and I feel bad for posting it here *again* especially if it was already considered and rejected, but I just wanted to make a proper case for it, even if it's a bad idea.)\n\n`love.graphics.print` doesn't output to console (like Lua's `print`), it draws text.\n\n(If L\u00d6VE did have a function which output to console for some reason, this might be a good name, although not in the graphics module.)\n\n`love.graphics.printf` doesn't output to console and it doesn't do string formatting (like its namesake, C's `printf`, or Lua's `string.format`), it draws text wrapped and aligned within a given width.\n\nOne might think \"but `love.graphics.printf` *does* print formatted text\", however I believe one would be using different definitions of \"printing\" and \"formatting\" than its namesake, which is kind of weird.\n\nI think that they could be named after what they do more accurately, like `love.graphics.text` and `textWrapped` or `formattedText` or something, I don't know.\n\nHowever, `print` and `printf` are clever names IMO in their recontextualizations of the terms, and they're short names too, and of course they have the benefit of already being the names.\n","comments":["**Original comment by Clyybber (Bitbucket: [Clyybber](https:\/\/bitbucket.org\/Clyybber), GitHub: [Clyybber](https:\/\/github.com\/Clyybber)).**\n\n----------------------------------------\n\nI think it doesn't cause too much confusion, mainly because its' name tells you it's part of the graphics module.\n","**Original comment by itraykov (Bitbucket: [itraykov](https:\/\/bitbucket.org\/itraykov), GitHub: [itraykov](https:\/\/github.com\/itraykov)).**\n\n----------------------------------------\n\nlove.graphics.text isn't very descriptive, it's usually better to use (short) verbs to describe functions, so possibly love.graphics.write or something like that.\n\nFurthermore, I have a question regarding love.graphics.printf:\nhttps:\/\/love2d.org\/forums\/viewtopic.php?f=4&t=84764\nNobody on the forums can confirm this:\nDoes love.graphics.printf support RTL languages?\nOr does it always wrap text from the right side?\n","**Original comment by Jeroen_Tricky_Broks (Bitbucket: [Jeroen_Tricky_Broks](https:\/\/bitbucket.org\/Jeroen_Tricky_Broks), ).**\n\n----------------------------------------\n\nFor me the purpose of love.graphics.print was very clear from the start when I saw it in the command summary. All I needed to know next was which parameters it took (and in which order). When it comes to console features, it's already there, then it's just \"print\" which is by the way just an internal Lua feature and not specific to L\u00d6VE.\n\nNow I am heavily against renaming the function. I don't think \"text\" or \"drawtext\" is any less confusing than \"print\", not to mention that \"print\" is a very much used command. Although there might be some people who only use print for debugging purposes, even then the command is used. I don't wanna dare to imagine to total lines of code that will have to be changed because of that.\n\nOf course, Lua is a language that can be used the dirty way. If love.graphics.print bothers you so much, why not put in the line \"text=love.graphics.print\" on top of your program? I've used that trick on countless love commands out of pure laziness as I always fall asleep by the time I typed something like \"love.graphics.setColor(a,b,c)\", so with a simple \"color=love.graphics.setColor\" I could now type \"Color(a,b,c)\".... Easy, huh?\n\nIn  a certain way \"love.graphics.print\" is true to its name. It PRINTS text onto the screen\/window. Some older gaming languages I've examined have a similar function called \"PRINTXY\". In the history of programming (Hey, I've been along in programming since 1983, mind you), PRINT has never been solely reserved for command-line console uses, you know :P\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\n@itraykov, I think `love.graphics.text` is descriptive because it draws text, and most of the other functions which draw to the screen aren't verbs, e.g. `love.graphics.rectangle`.\n\n@Jeroen\\_Tricky\\_Broks, do you know of any other current game framework or engine that uses the word \"print\" in this way?\n\nHere is what I have found:\n\n* HTML Canvas uses [fillText](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Canvas_API\/Tutorial\/Drawing_text)\n* Pygame Zero uses [text](https:\/\/pygame-zero.readthedocs.io\/en\/stable\/builtins.html)\n* GameMaker uses [draw\\_text](https:\/\/docs.yoyogames.com\/source\/dadiospice\/002_reference\/drawing\/drawing%20text\/draw_text.html)\n* MonoGame uses [DrawString](http:\/\/www.monogame.net\/documentation\/?page=N_Microsoft_Xna_Framework_Graphics)\n* Unreal Engine uses [DrawText](https:\/\/docs.unrealengine.com\/en-US\/API\/Runtime\/Engine\/Engine\/UCanvas\/DrawText\/1\/index.html)\n* Amulet uses [text](https:\/\/www.amulet.xyz\/doc\/#am.text)\n* Raylib uses [DrawText](https:\/\/www.raylib.com\/cheatsheet\/cheatsheet.html)\n* SDL\\_ttf uses [TTF\\_RenderText\\_Solid](https:\/\/www.libsdl.org\/projects\/SDL_ttf\/docs\/SDL_ttf_43.html)\n* [SFML](https:\/\/www.sfml-dev.org\/tutorials\/2.5\/graphics-text.php), [Godot](https:\/\/docs.godotengine.org\/en\/3.1\/classes\/class_label.html), [libGDX](https:\/\/libgdx.badlogicgames.com\/ci\/nightlies\/docs\/api\/com\/badlogic\/gdx\/graphics\/g2d\/BitmapFont.html), [Unity](https:\/\/docs.unity3d.com\/2018.3\/Documentation\/ScriptReference\/UI.Text.html), [JMonkeyEngine](https:\/\/javadoc.jmonkeyengine.org\/v3.x\/com\/jme3\/font\/BitmapText.html), [Corona](https:\/\/docs.coronalabs.com\/api\/library\/display\/newText.html) and [Phaser.io](https:\/\/phaser.io\/docs\/2.6.2\/Phaser.Text.html) seem to use objects for drawing text so there isn't an exact equivalent function but the term \"print\" isn't used.\n\n\u200c\n"],"labels":["change"]},{"title":"Add ability to load compressed image's mipmaps with a starting range","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1361) by Leandro Fonseca (Bitbucket: [shell64](https:\/\/bitbucket.org\/shell64), GitHub: [shell64](https:\/\/github.com\/shell64)).**\n\n----------------------------------------\n\nAdd ability to load compressed image's mipmaps with a starting range\n\nThis would allow an unique image fit various texture quality range instead of having multiple images compressed and mipmapped to fit multiple render quality targets (e.g. low, medium, high texture quality settings).\n\nShader's mipmapping could be used at the moment as a way to change the texturing quality but the memory requirements to load the original mipmapped texture would still be large for a low end hardware.\n\nThis method also does solve the problem of having multiple assets stored in hard disk by having an unique compressed image that fits all the targets.\n","comments":[],"labels":["feature"]},{"title":"add Mesh:setVertices to append mesh data for batching","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1357) by Colby Klein (Bitbucket: [shakesoda](https:\/\/bitbucket.org\/shakesoda), GitHub: [shakesoda](https:\/\/github.com\/shakesoda)).**\n\n----------------------------------------\n\nspritebatches aren't useful for more complex models, but it's still really useful to be able to batch things and this would make doing so easier.\n\nhaving `Mesh:setVertices(source, start, count)` append to the vertex list would help a lot for this use case\n\nirc log:\n```\n#!txt\n\n<holo> slime: Mesh:setVertices(othermesh, start, count) to batch meshes together would be wonderful\n<+slime> how does that work when drawing\n<+slime> or do you mean copying all the vertex data of another mesh?\n<holo> mesh a just gets the entire range from mesh b appended\n<holo> yeah, copying\n<+slime> hmm\n<+slime> i kind of want to keep the mesh size immutable\n<holo> you could require that the initial mesh be allocated at the maximum size and that's fine for me\n<+slime> make a bitbucket issue so i don't forget about it :P\n<+slime> is it also fine that the vertex formats of both meshes would have to match?\n<holo> hmmmm, my loaded models aren't always the same vertex format (some don't have UVs, or normals or whatever), but it seems like a reasonable thing to require that the vertex data match\n<holo> matching by attribute name and zero-filling if default values are needed is probably fine for any use I can think of\n<+slime> yeah\n```\n","comments":[],"labels":["feature"]},{"title":"Unwanted strippling for lines with line join \"none\" and line style \"smooth\"","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1351) by Joel Schumacher (Bitbucket: [dudeguy](https:\/\/bitbucket.org\/dudeguy), GitHub: [pfirsich](https:\/\/github.com\/pfirsich)).**\r\n\r\n----------------------------------------\r\n\r\nAs visible when executing the script attached to this issue the lines drawn with love.graphics.line and setLineJoin(\"none\") are not drawn through. \r\n\r\nUsing the left and right arrow keys the graph can be rescaled on the x-axis which will influence the frequency\/spacing of the strippling. By pressing space the points passed to love.graphics.line will drawn with love.graphics.points on top (in red), which shows that love.graphics.line really seems to be missing some points. It also seems to me that the gaps in the lines do not entirely coincide with points passed to it. \r\n\r\nChanging the line width (using up and down arrow keys) influences the frequency of the strippling as well, with higher widths reducing it.\r\n\r\nInterestingly the beginning of the line works fine and the number of points that render fine is not a universal fixed number (i.e. independent of total number of points).\r\n\r\nUsing setLineStyle(\"rough\") makes the unwanted strippling disappear.\r\n","comments":["[main.lua.zip](https:\/\/github.com\/love2d\/love\/files\/4238654\/main.lua.zip)\r\n","This issue was posted by @pfirsich"],"labels":["bug","0.10.2"]},{"title":"love.window.isDropping","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1341) by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nI think it would be nice if there was a function which returned whether the user is dragging a file\/directory over the window but hasn't released the mouse button yet, so a \"drop file here!\" message could display or something.\n\nBriefly looking at the SDL docs, I guess this would mean setting some internal value when SDL_DROPBEGIN and SDL_DROPFILE happen (if those events do what I assume they do).\n","comments":["**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nI'm kinda thinking this is OS-dependent; in windows, i'm not sure if the l\u00f6ve window can actually detect when the cursor is over it.\n\nI might be wrong though; no idea how (or when) DROPBEGIN is detected.\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nLooking at the docs, it kind of suggests DROPBEGIN and DROPCOMPLETE are a grouping mechanism. So if two files are dropped, you'd get DROPBEGIN, DROPFILE, DROPFILE and DROPCOMPLETE.\n","Callbacks are added in 8d37303.","The desired functionality here actually isn't possible yet, until SDL adds it: https:\/\/github.com\/libsdl-org\/SDL\/issues\/5292","For love 11.4, I've created a basic library https:\/\/github.com\/EngineerSmith\/isdropping to get a similar behaviour - but isn't perfect with the issue of not having a SDL event for it. Adding this comment here if anyone needs a solution around this for now"],"labels":["feature","library dependency"]},{"title":"Renaming ParticleSystem:get\/setRotation and ParticleSystem:has\/setRelativeRotation","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1321) by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nThe word \"rotation\" can be synonymous with \"spinning\", which isn't what `setRotation` does (but it is what `setSpin` does), so I think it's misleading in this regard.\n\n`ParticleSystem:get\/setAngle` would be consistent with `Body:get\/setAngle`.\n\n`has\/setRelativeRotation` could become `has\/setRelativeAngle`, but I don't think this name is clear because it doesn't say what the angle is relative to.\n\n(Also it would be inconsistent with `is\/setDirectionRelativeToEmissionArea` if that was used (see #1311), because that does say what the direction is relative to.)\n\nSo I would suggest that it could be more descriptive as `is\/setAngleRelativeToVelocity`.\n","comments":[],"labels":["change"]},{"title":"Error messages displaying given and max\/min values for ImageData:get\/setPixel and SoundData:get\/setSample","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1317) by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nI think it would be useful if, when an out-of-range coordinate\/index is given to `ImageData:get\/setPixel` or `SoundData:get\/setSample`, it displayed the coordinate\/index given and what the maximum valid values are, and a note that values start at 0 if a number less than 0 is given.\n\nFor example:\n\n```lua\nimagedata = love.image.newImageData(100, 100)\nimagedata:getPixel(50, 100)\n```\n\n```\nError\n\nmain.lua:2: Attempt to get pixel (50, 100), maximum coordinates are (99, 99)\n```\n\n```lua\nimagedata:getPixel(50, -1)\n```\n\n```\nError\n\nmain.lua:2: Attempt to get pixel (50, -1), coordinate values start at 0\n```\n\n```lua\nsounddata = love.sound.newSoundData(1)\nsounddata:getSample(2)\n```\n\n```\nError\n\nmain.lua:2: Attempt to get sample at index 2, last sample is at index 1\n```\n\nI'm not sure how it should be worded exactly, but that's the basic idea.\n\n(Also the current error messages end in exclamation marks, which I don't think is consistent with other error messages!)\n","comments":[],"labels":["change"]},{"title":"Renaming love.mouse.set\/isGrabbed to be more clear","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1316) by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nI don't think the names `setGrabbed` and `isGrabbed` make their functionality obvious.\n\nI don't think a lot of people will have heard of \"grabbing\" the mouse pointer before (at least I hadn't outside of LOVE, until looking it up now).\n\nAlso, from my minimal research, it seems that grabbing the mouse pointer actually can mean something different: for [XGrabPointer](https:\/\/tronche.com\/gui\/x\/xlib\/input\/XGrabPointer.html) and [gdk_pointer_grab](https:\/\/developer.gnome.org\/gdk3\/stable\/gdk3-General.html) it seems that grabbing the pointer means that all pointer events are passed to the window, but confining the pointer to the window is optional. \"Pointer grabs are used for operations which need complete control over mouse events, even if the mouse leaves the application.\"\n\nI think `setConfinedToWindow` and `isConfinedToWindow` are more descriptive, i.e. I think I'd know what `love.mouse.setConfinedToWindow(true)` does from its name whereas I'd have to look up what `love.mouse.setGrabbed(true)` does.\n","comments":["**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nWhat about just `setConfined` \/ `isConfined`?\r\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nI think `setConfined` is more descriptive than `setGrabbed`.\n\nI think `setConfinedToWindow` is self-explanatory though, whereas I don't think `setConfined` is.\n\nBy \"self-explanatory\" I mean that, with the subject implied from the object type\/module name\/argument, a function name reads like its explanation.\n\nFor example, I think someone seeing `love.mouse.setVisible` will probably know that it \"sets [mouse] visible [or not]\". You couldn't really add more words to make it more clear, it says what it does \"perfectly\" in a sense. (This is assuming the person reading it is familiar with LOVE's pattern of `setThing(boolean)` where the boolean sets whether the thing is true or not, i.e. they weren't expecting `setInvisible`.)\n\n(Sometimes the name says what the function does perfectly, but what it does requires additional explanation, for example `love.mouse.setRelativeMode` \"sets relative mode [for the mouse or not]\", but what \"relative mode\" is needs to be read about.)\n\nI don't think `setConfined` says what it does perfectly, because it \"sets [mouse] confined [to the window or not]\", i.e. \"to the window\" is missing information. \"Confined\" could mean confined to some other area, or the current display, or maybe that the mouse doesn't move at all. I don't necessarily think that someone would assume that it does mean one of these other options, but what I assume is that someone might think \"I'm not sure what this function does\".\n\nThe horribly long names I'm suggesting in #1302, #1311 and #1321 are also names which fill in the missing information to make them (hopefully) self-explanatory.\n\nReading through LOVE's function names, I would say that functions rarely have missing information like that.\n\nOf course, short names are preferable to long names (faster to read, faster to write, potentially easier to remember), so it's a trade-off.\n"],"labels":["change"]},{"title":"Support for Opus audio codec","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1314) by Muh Muhten (Bitbucket: [muhmuhten](https:\/\/bitbucket.org\/muhmuhten), GitHub: [muhmuhten](https:\/\/github.com\/muhmuhten)).**\n\n----------------------------------------\n\nIt would be nice to have support for the [Opus audio codec](https:\/\/opus-codec.org\/).\n\nThe big advantage here is that Opus is a pretty good speech codec at moderate bitrates (near-transparency for speech claimed at 24-32kbps), which can save a fair bit of space for voicing.\n\nIt also [achieves similar quality at substantially lower bitrates vs vorbis &c. for general audio](https:\/\/opus-codec.org\/comparison\/). Some other properties like latency which could plausibly be useful if someone wanted to implement in-game voice chat, I guess.\n\n[Some POC integration with OpenAL.](https:\/\/davidgow.net\/hacks\/opusal.html)\n\nLicense is identical to Vorbis, so it shouldn't be a problem.\n","comments":["**Original comment by Muh Muhten (Bitbucket: [muhmuhten](https:\/\/bitbucket.org\/muhmuhten), GitHub: [muhmuhten](https:\/\/github.com\/muhmuhten)).**\n\n----------------------------------------\n\n0001-Add-Opus-decoder.patch implements an Ogg Opus decoder which accepts the \"opus\" extension and seems to generally work, at least on single-stream files.\n\nUnfortunately I'm not familiar with the build system or the logistics of dependency management here, so it almost certainly won't *build*. It requires opusfile and libopus ([both Xiph libraries](https:\/\/opus-codec.org\/downloads\/) which are probably in your repos) in addition to libogg (which is already required for vorbis).\n\n0002-Just-enough-Xcode-project-mangling-to-build-with-Opu.patch is a horrible hack to make xcode build using libopusfile from \/usr\/local (e.g. homebrew). Obviously the resulting app isn't portable. Still not sure how to build a framework.\n","**Original comment by Muh Muhten (Bitbucket: [muhmuhten](https:\/\/bitbucket.org\/muhmuhten), GitHub: [muhmuhten](https:\/\/github.com\/muhmuhten)).**\n\n----------------------------------------\n\n\n","**Original comment by Mi 28 (Bitbucket: [rcoaxil](https:\/\/bitbucket.org\/rcoaxil), ).**\n\n----------------------------------------\n\nI suggest to use this to implement `SoundData:encode`, as a to-go solution for in-game VoIP.\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nThis seems good. I'll merge it in once I test it and add the dependency to cmake \/ megasource and create a .framework in macOS.\r\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nI've imported this patch in the love-experiments opus-decoder branch, updated it and added opusfile to the linux build system.\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nI did some testing and it seems to work fine, but beware of ffmpeg's encoder. I had a (transcoded) file with a negative start timestamp, which opusfile apparently really doesn't like, adding `-avoid_negative_ts make_zero` got me a file I could play. Given that the official opusfile rejects it, I'm putting the blame on ffmpeg, though.\n","**Original comment by Miku AuahDark (Bitbucket: [AuahDark](https:\/\/bitbucket.org\/AuahDark), GitHub: [MikuAuahDark](https:\/\/github.com\/MikuAuahDark)).**\n\n----------------------------------------\n\nI tired to add Opus codec into my custom build of LOVE 11.3 under Windows with some modification and it seems fine. However the changes require some attention especially in Megasource and LOVE CMake script. I can send Pull Request for this if the developers getting interested.\n","[opus_patches.zip](https:\/\/github.com\/love2d\/love\/files\/4238677\/opus_patches.zip)\r\n"],"labels":["feature"]},{"title":"Error on invalid flags for newImage, newCanvas, love.conf","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1312) by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nThese don't error but maybe they should:\n```lua\nlove.graphics.newCanvas(100, 100, {asdf = true})\nlove.graphics.newImage('image.png', {asdf = true})\n\nfunction love.conf(t)\n    t.asfd = true\nend\n```\n\n(Unlike this which does)\n\n```lua\nlove.window.setMode(800, 600, {asdf = true})\n```\n","comments":["**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nIt's hard to make a game that's compatible with multiple versions of love if love.conf were to cause an error in that manner.\r\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nWhat I'm currently thinking in regards to that is...\n\nIf a config setting is renamed, one would have to change love.conf to add the new setting name to keep the same settings between versions.\n\nIf a config table key has been removed\/renamed, it would need to be checked for so that it doesn't error when indexed.\n\nFor an example of the two cases above, if one wanted a LOVE 0.8.0 game to be compatible with later versions and it has window settings in love.conf one would need to check the version so that `t.screen.*` doesn't error and `t.window.*` settings are set.\n\nAlso, for compatibility between LOVE versions, I think one would have to check the version and provide wrapper functions or something due to changes elsewhere in the API.\n\nI guess my \"point\" here is: if compatibility with multiple versions is desired, it seems one would probably need to have wrapper functions anyway, and love.conf might need a wrapper function too.\n\nOr if compatibility isn't desired, I think one would want love.conf to error to find changes in settings and catch typos\/misuse.\n\nI might be missing something of course!\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nError when invalid setting names are used in the tables passed to love.graphics.newCanvas and newImage. See #1317.\r\n"],"labels":["change"]},{"title":"Non-abbreviated JoystickHat constants","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1299) by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nThe [JoystickHat](https:\/\/love2d.org\/wiki\/JoystickHat) constants ('c', 'd', 'l', 'ld', 'lu', 'r', 'rd', 'ru' and 'u') seem inconsistent with other constants in that that they shorten words to single letters.\n\n[GamepadButton](https:\/\/love2d.org\/wiki\/GamepadButton) for example has 'leftstick', [GamepadAxis](https:\/\/love2d.org\/wiki\/GamepadAxis) has 'triggerright', [AlignMode](https:\/\/love2d.org\/wiki\/AlignMode) has 'center' etc.\n\nSo I think JoystickHat should be 'center', 'leftdown', etc.\n","comments":["**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nI'm for this actually; mostly for consistency's sake, even if it shouldn't matter too much... or that it'd break a few things.\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nMakes sense to me. Would you prefer up\/right\/down\/left or north\/east\/south\/west? I feel like the latter combine better, I prefer `northeast` over `upright` (`rightup`?).\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nHow about separating them?\n\nSo you get `x, y` where x is the position in the x axis so `left`, `center` or `right` and y is the position in the y axis so `top`, `center` or `down`\n\nJust a different opinion\n","**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nI guess that would work, though i think everything else treats d-pads as just one input, instead of axis-separated like that; mostly because the diagonals are also \"first-class\" as it were.\n\nStill, it could work that way.\n\nAs for the cardinal directions, that solution sounds nice too, but i don't know if center would be the word i use in that case... not that i can think up a better term for it sadly.\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nI'm really not sure about the names. Up\/down\/left\/right are kind of more obvious because they're more commonly used words (i.e. I never think that I pressed the \"east\" button, I think that I pressed the \"right\" button, and when hearing \"east\" it can take me a second to think \"is east left or right?\"), and they are consistent with GamepadButton's dpup\/dpdown\/dpleft\/dpright, but it's a good point that north\/south\/east\/west combine in a standard manner. So, I'm unsure.\n\nHas anyone considered what it would be like if hat directions were turned into buttons like it seems d-pads are with virtual gamepads? My first thoughts were that it would be consistent with virtual gamepads and the API would be simpler via not having the concept of a hat anymore, but I have no idea what the consequences would be for API-using code.\n"],"labels":["change"]},{"title":"Enable 3rd party extensions","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1200) by Saggi Mizrahi (Bitbucket: [ficoos](https:\/\/bitbucket.org\/ficoos), GitHub: [ficoos](https:\/\/github.com\/ficoos)).**\n\n----------------------------------------\n\nIt would be nice to have a feature similar to MOAI where you can have a plugins directory specified where subdirectories define new C++ module to be compiled into the love binary.\nThis will make it easy for 3rd parties to add additional non-core functionality.\n\nThis is different than having a regular loadable Lua module since it could use the existing Lua modules without going through Lua. Also, for mobile platforms it's much better to statically link instead of using a dynamic library.\n\nCurrently just adding a directory under src\/modules somewhat works after you run automagic but adding Lua bindings for your code will require modification to files in src\/common making it so you can register types in-module instead of changing global data structures would make it much easier to integrate C++ extensions to existing love builds.\n\nUsing external plugins in MOAI:\nhttps:\/\/github.com\/moai\/moai-dev\/wiki\/Using-External-Plugins\n","comments":["**Original comment by David Serrano (Bitbucket: [Bobbyjones](https:\/\/bitbucket.org\/Bobbyjones), GitHub: [Bobbyjones](https:\/\/github.com\/Bobbyjones)).**\n\n----------------------------------------\n\nI also think having some sort of plugin support in the build systems would make doing certain things easier. For example there are a couple source modifications for the Android port that have to be add in by hand. By having support for plugins it could potentially make it as simple as just dropping the plugin into a plugin folder and the build system will check that folder and do whatever it has to do to integrate the plugin into the apk. I feel as though this could potentially be useful on iOS as well. This would make things easier for people who want to add third party support for ads or IAP. It would also make it easier for people to use APIs not exposed by love. For example on mobile there could be a camera plugin or GPS plugin. \n\nThe way I think this could work(I have no idea how build systems work) is that a plugin will be a folder including source code for the plugin and a file that the build system will use. That file will have the instructions on how the plugin should be built and also it should have whatever edits it needs to be done to the android manifest and etc for permissions and etc. This would make adding plugins simple. Although it could potentially make creating plugins a bit more complicated. \n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nI'm not quite sure what you're asking for. Unfortunately the way types are handled it's impossible to add love types dynamically, something we've not found a satisfactory solution to yet, but you usually won't have to do so. As for calling L\u00d6VE internal code directly, it's already possible, though its API is fairly unstable. So does it come down to being able to easily add static libraries?\n","**Original comment by Nathan 1852 (Bitbucket: [Nathan1852](https:\/\/bitbucket.org\/Nathan1852), GitHub: [Nathan1852](https:\/\/github.com\/Nathan1852)).**\n\n----------------------------------------\n\nI would really like it if at least the new Object stuff (the ability to define types yourself) would be open to use from c++. \nRight now it is possible on unix systems, but the LOVE_EXPORT directive is missing for windows.\n\nThe type and Object functions are usefull for any lua library, not just c++ libraries for love, so if you don't want to open up love, would it be an option to put this into an extra small library?\n\nAlso, what are the current arguments against allowing the use of love functions from c++?\nI don't think we need the ability to have custom modules be compiled into the love binary, but what is bad about the possibility for c++  addons to, for example, define a new Video type that inherits from loves Video Object (and for that needs access to the Videos methods) and adds the ability to stream youtube videos?\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nYou can already use L\u00d6VE from C++, but it's not officially supported as an external API. Having proper support would put a large burden on the L\u00d6VE developers and increase the scope of L\u00d6VE far beyond what it's currently designed for.\r\n\r\nMany of L\u00d6VE's APIs and internal code are designed from the ground up with Lua in mind. Designing for an external C++ API instead would take L\u00d6VE's code in a different direction. I don't think you can have a shared codebase with both at once as first-class citizens whose goals are both met.\r\n","**Original comment by Nathan 1852 (Bitbucket: [Nathan1852](https:\/\/bitbucket.org\/Nathan1852), GitHub: [Nathan1852](https:\/\/github.com\/Nathan1852)).**\n\n----------------------------------------\n\nWould it be at least possible to add the LOVE_EXTENSION Macro for windows to loves c++ functions? \nThat still wouldn't mean that love officially supports calling the functions from c++, but it at least would allow everyone on every platform to make use of it, supported or not\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nI view L\u00d6VE as providing solid base building blocks for 2D games to be created. If something is missing from a L\u00d6VE API that prevents a feature useful in that context from being implemented in a game, I would rather improve the base building blocks instead of adding lots of hooks or similar extensibility.\r\n\r\nDoing the latter would result in a codebase that is much harder to improve in the future while not reaching the goals that hooks promise, since it causes external library code to rely on L\u00d6VE's internal implementation details and it's questionable whether anyone can guess as to what hooks will be wanted before they're wanted.\r\n\r\nAn example of the former is queuable audio sources. Instead of adding C++ side hooks for Source subclasses or whatever, L\u00d6VE 0.11 adds new APIs to push any custom sound data into a Source. The solution is a base building block that anyone can use to stream real-time generated (or pre-created) sounds. If some third party C++ extension code had been created instead, it would already be broken because L\u00d6VE's internal implementation of love.audio has changed fairly significantly during 0.11's development.\r\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\n> Would it be at least possible to add the LOVE_EXTENSION Macro for windows to loves c++ functions? \r\n\r\n*Every* C++ function? Or just some? Which ones and why those, if the latter?\r\n","**Original comment by Nathan 1852 (Bitbucket: [Nathan1852](https:\/\/bitbucket.org\/Nathan1852), GitHub: [Nathan1852](https:\/\/github.com\/Nathan1852)).**\n\n----------------------------------------\n\nBut there are things which cant be built into L\u00d6VE. Take my use case for example: \nI am writing a bindung to NanoVG for L\u00d6VE. Something that will never be included inside of L\u00d6VE, I am sure.\nBut the ability to use L\u00d6VEs new Type and Object system allows me to add NanoVGs objects into the Lua State.\nIt doesn't manipulate L\u00d6VE in any way. If I don't have the ability to use the Object system, I would have to pretty much copy loves code into a seperate library, since the Object code itself is very useful and good.\n\nI can understand that you don't want to support the C++ side as well as the Lua side. \nBut I don't quite get why you don't say: \"The possibility to extend L\u00d6VE exists. There is no official support for it, so issues regarding that (other than bugs which affect the Lua side as well) will be deleted. But the ability exists\"\n\nEdit: I just saw your comment. I would love for the Object\/Type system to be open, so a user can use loves helper functions for userdata objects. I don't need anything else\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nAre you comfortable with your bindings \/ DLLs relying on a specific major\/minor\/patch L\u00d6VE official release, and potentially not working with a custom build of L\u00d6VE, if the custom build uses the same source code as the release version but just uses a different compiler version?\r\n\r\nIf I tell people about it officially, then it *is* effectively officially supported. I would be responsible for people having problems with it regardless of whether I'm willing to help them.\r\n","**Original comment by Nathan 1852 (Bitbucket: [Nathan1852](https:\/\/bitbucket.org\/Nathan1852), GitHub: [Nathan1852](https:\/\/github.com\/Nathan1852)).**\n\n----------------------------------------\n\nI don't quite get what you mean with the specific major\/minor\/patch release?\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nL\u00d6VE's C++ code is not API or ABI stable between patch releases of L\u00d6VE (this fact especially helps bug fixes). Also, if you compile a DLL with one specific compiler, it will not necessarily work with a build of L\u00d6VE compiled for a different compiler\/version.\r\n","**Original comment by Nathan 1852 (Bitbucket: [Nathan1852](https:\/\/bitbucket.org\/Nathan1852), GitHub: [Nathan1852](https:\/\/github.com\/Nathan1852)).**\n\n----------------------------------------\n\nAh, now I understand what you mean. I have no problem having to recompile my bindings for a new L\u00d6VE version.\n\nAlso, you *could* add the windows macro without writing it anywhere on the wiki, making it work, but not telling people about it officially.\nI mean, it already works on unix distibutions, since they don't have dllexport, did people have issues with it on unix?\n","I think #1640 might supersede most of this issue? I don't think L\u00d6VE will ever be getting functionality to use a C\/C++ compiler for user C\/C++ code, at least.","Not sure if this is relevant but I recently implemented plugins for lovr.  Plugin folders can be added to a `plugins` folder (via git submodules or just copying) and they'll automatically get built by CMake.  Their shared libraries get packaged in a place where they can get `require`d on the target platform (this required some changes to the filesystem module's library package loader).\r\n\r\nI'm hoping that this system makes it easier to use native libraries, but it's only been a couple of weeks so I'm still seeing how it goes.  I also made [enet](https:\/\/github.com\/bjornbytes\/lua-enet) and [cjson](https:\/\/github.com\/bjornbytes\/lua-cjson) plugins instead of including them by default.  Technically lovr plugins can rely on the internal object model stuff but it isn't officially recommended\/encouraged (that's where having some sort of C API comes into play I think).","Interesting. Making something like that work with L\u00d6VE would probably be more involved because of how many build systems it uses (xcode + autoconf\/etc + whatever Android uses + cmake), but if it ends up working well for lovr maybe it'll be worth it to solve that stuff for L\u00d6VE."],"labels":["feature"]},{"title":"Unify geometry types?","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1188) by Kyle McLamb (Bitbucket: [Alloyed](https:\/\/bitbucket.org\/Alloyed), GitHub: [Alloyed](https:\/\/github.com\/Alloyed)).**\n\n----------------------------------------\n\nquads\/spritebatches\/particle engines\/meshes all effectively describe which \"shape\" to render a texture in.\n\nQuads have a loose coupling to their textures. This means every time you want to draw a quad, you have to say what texture you mean:\n```\nlove.graphics.draw(texture, quad, ...)\nlove.graphics.draw(texture2, quad, ...)\n```\n\nEverything else holds a reference to a texture, which you can manipulate later with set\/getTexture:\n```\nlocal object = love.graphics.newObject(texture)\nlove.graphics.draw(object, ...)\nobject:setTexture(texture2)\nlove.graphics.draw(object, ...)\n```\n\nI'd personally prefer it if every Drawable that takes a texture parameter instead used quad's call signature here: it lets the user decide how they want to store\/reference their textures, and fits in better with the immediate mode nature of the rest of love.graphics.\n","comments":["**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nThat makes sense, I'm not sure if other people would prefer that, or the other way around, though. An advantage of tying Quads to images would be getting rid of the reference width\/height.\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nFor ParticleSystems \/ SpriteBatches \/ Meshes, the associated texture is usually only changed infrequently if ever. I feel like requiring it to be specified in `love.graphics.draw` for those classes would make them more annoying to use, even though it'd be more consistent and it maps closer to how the actual implementation behaves.\r\n\r\nQuads also probably don't change very frequently. However the existing APIs which take Quads (e.g. `SpriteBatch:add`, `ParticleSystem:setQuads`) use the Quad together with the already-set Texture for that object. If Quads were to get an associated Texture object of their own, it would make it unclear without reading documentation what would happen when the Quad's Texture doesn't match the SpriteBatch\/ParticleSystem's (and it's unclear to me what should happen. It's not feasible performance-wise to make it always prefer the Quad's Texture, as that would prevent batching from happening).\r\n","**Original comment by airstruck (Bitbucket: [airstruck](https:\/\/bitbucket.org\/airstruck), GitHub: [airstruck](https:\/\/github.com\/airstruck)).**\n\n----------------------------------------\n\nBefore reading that last comment I would have argued for \"the other way around,\" but that does explain why quads are the way they are.\n\nAnyway, I'd rather not see the textures removed from drawables. I've never encountered a case where I wanted anything other than a n:1 relationship between drawables and textures, and having to pass that separate piece of information around and store it alongside the object (like with a quad) can be cumbersome.\n\nAfter reading @slime73's comment, I wonder if there's really anything to be gained from changing quads\/drawables to be more like each other. Since a Quad is not a Drawable (quads seem to be lower-level than drawables), I see no particular reason why it should act like one.\n\nOne idea that might work to unify quads and drawables would be getting rid of the lg.draw that takes a Quad, and create a new type of Drawable that's basically a Quad associated with a texture. I'm not sure what you'd call that, but I'll just call it a DrawableQuad here. You could treat the DrawableQuad as a specialized type of Quad, and allow it to be passed to other things in place of a Quad, and then it would be clear what happens to its texture when used with SpriteBatch:add or similar (the texture would be ignored, because it's only relevant to DrawableQuad and not to the more general Quad that those functions want).\n\nI suppose this idea isn't the kind of thing the OP is hoping for, though, and I guess it would require multiple inheritance (at least at a conceptual level), which I'm not sure there's any precedent for. Either that, or documenting Drawable as being more like an interface than an abstract class, which I'm also not sure there's any precedent for.\n","**Original comment by Kyle McLamb (Bitbucket: [Alloyed](https:\/\/bitbucket.org\/Alloyed), GitHub: [Alloyed](https:\/\/github.com\/Alloyed)).**\n\n----------------------------------------\n\nI can live with the retained style, ultimately. For my game (which has palette swaps\/asset reloading) I just ended up sprinkling my code with setTexture(), and knowing that I should be doing that in my specific case isn't a real problem.\n\nWhat I'm wondering is how useful the quads are performance-wise. It'd be nice if we could just pass around {x, y, w, h} tables and let each drawable figure out what that means for their texture, but if we're adding the same quad thousands of times to a spritebatch I'd imagine that adds up.\n"],"labels":["change"]},{"title":"Batching multiple ParticleSystems for drawing","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1183) by mkdxdx (Bitbucket: [mkdxdx](https:\/\/bitbucket.org\/mkdxdx), GitHub: [mkdxdx](https:\/\/github.com\/mkdxdx)).**\n\n----------------------------------------\n\nI think people will find useful if ParticleSystem instances could be bound to a SpriteBatch.\nBy \"ParticleSystem bound to SpriteBatch\" i mean that the ParticleSystem that is bound to a SpriteBatch will use a range of sprite ids for itself (say if PS buffer size is 30, then it will use ids 1-30 if its a first system that is bound to that spritebatch). It will update those sprites as its particles and to render that said particle emitter, you will have to render either the particle system or the spritebatch it is bound to. \nNow here comes the part why exactly people might find it useful. It's going to be possible to bind multiple particle systems to one spritebatch (100 systems with buffer size 10 to one spritebatch that has buffer size of 1000, for example). Update calls still have to be done separately for each particle system, but to draw them all, user will just have to draw the spritebatch with one draw call. \nSpriteBatch and ParticleSystem will have to use same texture (otherwise emitter's texture will be overriden by the one that is used in spritebatch)\n","comments":["**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nI agree with the idea of batching together multiple particle systems that use the same sprites to improve performance, but I think this is a really hacky approach that will be more confusing than it's worth (and probably won't even work as people expect).\r\n\r\nIdeas for cleaner solutions are welcome :)\r\n","**Original comment by mkdxdx (Bitbucket: [mkdxdx](https:\/\/bitbucket.org\/mkdxdx), GitHub: [mkdxdx](https:\/\/github.com\/mkdxdx)).**\n\n----------------------------------------\n\nCan't say i'm experienced enough to describe exact ways to implement this feature, however i can imagine the least hacky way to do it. After particle system is bound to a spritebatch, it just handles spritebatch's range of ids as its own particles and that's it. The only thing that begs for question is how exactly spritebatch is going to know what range of sprite ids is \"marked\" as used by particle system. And buffer size for particle system is probably going to be static and unchangeable for start to avoid hacky id reallocation mechanisms. It's probably going to be okay that way mostly because \"batched particle system\" is going to be used, for example, for an array of fire torches on a level, and they all will have same buffer size etc.\n\n![bind.png](https:\/\/bitbucket.org\/repo\/A6ddy\/images\/2492869617-bind.png)\n\nNot sure how can i explain it better.\n\nI know modifying existing code to implement this feature may break something later, maybe there should be some more methods to flush reservation so that spritebatch can be used as normal spritebatch (but a batch that has reserved ids should just return ids past reservation for normal sb:add() operations).\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nMaybe it makes sense for a single particle system to power (and draw) multiple emitters within the ParticleSystem object?\r\n"],"labels":["change"]},{"title":"A nicer love.physics api","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1125) by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nAs highlighted in #1023, the current physics API isn't exactly nice. It's not the worst, but Fixtures especially are pains to deal with. I understand why Fixtures *can* be nice to have, but in most of the code I've written or read, one Shape becomes one Fixture, is attached to one Body.\n\nIdeally we'd have some api that kind of matches the love \"Hello world\" feel, it's just a few lines to do the simple things, but if you want to, you can get a more advanced api. In this case, if you want a circle that has collisions, you'd probably want to be able to quickly create a Body, a Circle shape and the corresponding Fixture, then attach that Fixture to the Body, ideally using only one or two functions.\n\nPerhaps a nice starting point, though I have only glanced at it, is the library @adonaac linked in #1023: https:\/\/github.com\/adonaac\/hxdx\n","comments":["**Original comment by David Serrano (Bitbucket: [Bobbyjones](https:\/\/bitbucket.org\/Bobbyjones), GitHub: [Bobbyjones](https:\/\/github.com\/Bobbyjones)).**\n\n----------------------------------------\n\nMaybe something like a love.physics-light and then regular love.physics. Of course it probably should not be called love.physics-light. The light version would be a layer over the physics api to make it easier. But I think it would be important to define what is easier. I feel as though the biggest hurdle with love.physics is that there is so many methods that a body, fixture or shape have. So it makes doing even the most simplest thing a chore to get right. I don't think there would be a good way to make dealing with all those methods and settings easier. Now if by easier you mean object creation then I think that can be accomplished relatively easily.\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\n> I understand why Fixtures *can* be nice to have, but in most of the code I've written or read, one Shape becomes one Fixture, is attached to one Body.\r\n\r\nAn small addition to L\u00d6VE could be to have shortcut methods in `Body`, e.g.:\r\n\r\n```\r\n#!Lua\r\n\r\nfixture = Body:newChainShape(looping, points)\r\nfixture = Body:newCircleShape(x, y, radius)\r\nfixture = Body:newEdgeShape(x1, y1, x2, y2)\r\nfixture = Body:newPolygonShape(points)\r\nfixture = Body:newRectangleShape(width, height)\r\n```\r\n\r\nAlthough those method names are kind of misleading, since they return Fixtures rather than Shapes.\r\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nYou also wouldn't be able to explicitly set the density during Fixture creation with those (although there is `Fixture:setDensity`).\r\n\r\nIt would probably also be good in general to move `love.physics.newFixture` to a Body method, since it'd be less verbose and still do the same thing. i.e.:\r\n\r\n```\r\n#!Lua\r\n\r\nfixture = love.physics.newFixture(body, shape [, density])\r\nfixture = body:newFixture(shape [, density])\r\n```\r\n","**Original comment by Bruce Hill (Bitbucket: [spilt](https:\/\/bitbucket.org\/spilt), GitHub: [spilt](https:\/\/github.com\/spilt)).**\r\n\r\n----------------------------------------\r\n\r\nOne aspect of the current API that I find pretty user-unfriendly is collision groups\/categories\/masks. I think my ideal collision API would be something like:\r\n```Lua\r\nworld:addCollisionCategories(\"terrain\",\"player\",\"enemy\",\"playerProjectile\",\"enemyProjectile\")\r\nlocal projectile = {\"playerProjectile\",\"enemyProjectile\"}\r\nworld:ignoreCollisionsBetween(projectile, projectile)\r\nworld:ignoreCollisionsBetween({\"playerProjectile\"},{\"player\"})\r\nworld:ignoreCollisionsBetween({\"enemyProjectile\"},{\"enemy\"})\r\n...\r\nplayer.fixture:setCollisionCategories({\"player\"})\r\n...\r\nenvironmentalHazard.fixture:setCollisionCategories(projectile) -- This would collide with both players and enemies\r\n```\r\nIf this system were used, it would also be nice to have a collision callback API that worked something like this:\r\n```Lua\r\n-- This sets callbacks that are called once, immediately before the physics engine handles two bodies making contact:\r\nplayer.fixture:setCollisionCallbacks({\r\n    -- Mapping from collision category -> callback function\r\n    enemy = function(self, other, contact)\r\n        self:getUserData():takeDamage(other:getUserData().damage)\r\n    end,\r\n    terrain = function(self, other, contact)\r\n        local nx, ny = contact:getNormal()\r\n        if ny < 0 then contact:setEnabled(false) end -- one-way platforms\r\n    end,\r\n})\r\n-- Similarly, this sets callbacks that are called once, just after two fixtures lose contact\r\nplayer.fixture:setEndCollisionCallbacks({})\r\n...\r\n-- There would be no equivalent to the current callbacks that get called once per frame, instead, you could just query what the current contacts are\r\nfunction love.update(dt)\r\n    world:update(dt)\r\n    -- Get a list of all contacts with an optional list of categories\r\n    local terrainContacts = player.fixture:getContacts({\"terrain\"})\r\n    player.onGround = false\r\n    for terrainFixture,contact in pairs(terrainContacts) do\r\n        local ix,iy = contact:getImpulse()\r\n        if iy < 0 then\r\n            player.onGround = true\r\n            break\r\n        end\r\n    end\r\n    ...\r\nend\r\n```\r\n(Collision callbacks would be called in an unspecified order.)\r\n","**Original comment by adn adn (Bitbucket: [adonaac](https:\/\/bitbucket.org\/adonaac), ).**\n\n----------------------------------------\n\nI've been using love.physics for a while now so I feel like I have a good grasp of its pain points. Most of what I'm gonna say can be seen in action in my [hxdx library](https:\/\/github.com\/adonaac\/hxdx). So let me start with what other people already said:\n\n>Ideally we'd have some api that kind of matches the love \"Hello world\" feel, it's just a few lines to do the simple things, but if you want to, you can get a more advanced api. In this case, if you want a circle that has collisions, you'd probably want to be able to quickly create a Body, a Circle shape and the corresponding Fixture, then attach that Fixture to the Body, ideally using only one or two functions.\n\nI think you can go even further and introduce the concept of Colliders. These would be new object types that are built on top of the existing objects box2d provides. Like you said, usually what most people do ends up being one body + one shape + one fixture. A collider would just be all this done automatically. In hxdx Colliders are just that and you can create a new one via something like:\n\n```\n#!lua\ncollider = world:createCircleCollider(x, y, radius, opts)\n```\n\nYou can then access the body, fixture and shape via collider.body, collider.fixture, collider.shape. .fixture and .shape are aliases for the 'main' fixture\/shape pair, since because you can have multiple fixture\/shape pairs they have to be in a list, but since most people will never do that it makes sense to present them as .fixture and .shape instead of something like .fixtures_list['main'] and .shapes_list['main']. If you want to have multiple pairs though you can add new shape fixture pairs to the list and operate like you would normally via some function like collider:addShape(shape_name, ...) and then it adds the shape + fixture automatically. I don't remember if I added this function on my own library.\n\nThe point is, a Collider can expose normal \"advanced\" functionality but also make things easier for new users. You could go a step further than I did with hxdx and instead of having the main way of users to interact with physics object be via collider.body\/fixture, you can just add the most used functions in a body\/fixture, like applyLinearImpulse or applyForce or setRestitution to the Collider object and make it so that for the most common use cases people don't even have to know about bodies, fixtures or shapes. Like:\n\n```\n#!lua\ncollider:applyLinearImpulse(0, 1000)\ncollider:setGravityScale(1.5)\ncollider:setBullet(true)\ncollider:setRestitution(0.5)\n```\n\nMost people only want to use physics to apply forces to objects and to make collision easy, so handling those use cases via the Collider object can dramatically decrease the number of things people have to care about. And if they wanna go deeper then sure, they can still access the body, fixture and shape all they want. This would create a nice tutorial-like feel to the API where it has multiple layers to it that people can dive into at their own pace instead of being showered with tons of concepts at once.\n\n---\n\n>One aspect of the current API that I find pretty user-unfriendly is collision groups\/categories\/masks. I think my ideal collision API would be something like:\n\nI agree with your solution and it's pretty much the same one that I arrived. Dealing with categories\/masks is really unintuitive. The solution I arrived at is similar to yours (https:\/\/github.com\/adonaac\/hxdx#add-collision-classes, https:\/\/github.com\/adonaac\/hxdx\/tree\/master\/docs#addcollisionclasscollision_class_name-collision_class) it just has a few differences in how things are specified but the idea is the same. The code for doing this is not trivial but not super hard. There was a good thread about it a while ago here https:\/\/love2d.org\/forums\/viewtopic.php?f=4&t=75441. It's not trivial because there's a maximum number of categories you can use (16) so you wanna make sure you do it in the optimal way.\n\n---\n\n>If this system were used, it would also be nice to have a collision callback API that worked something like this:\n\nI personally think callbacks are bad so I disagree with this. However this all comes down to personal preferences in the end I guess. The way I solved collision detection and callbacks was like this https:\/\/github.com\/adonaac\/hxdx\/tree\/master\/docs#enterother_collision_class_name. You just have an enter and exit function that will return true on the frame those events happen and from there you can do whatever. \n\npreSolve and postSolve functions have to still be callbacks though because they happen in the middle of some box2d operation being resolved, so they can't be queued for later like I did with enter and exit events. One of the reasons I think callbacks are bad is exactly because of this. preSolve and postSolve will never be able to not be callbacks because they're completely tied internally to how box2d works so this will leak forever and force every API on top of it to use callbacks too. It's much better to not repeat the mistake where possible and NOT make things callbacks unless absolutely necessary.\n\nAnyway, the way to easily deal with collisions is to use the earlier concept of collision categories to check for enter\/exit collision events. In other engines I think this is typically called a collision tag. You'd have something like:\n\n```\n#!lua\nif collider:enter('SomeOtherTag') then\n\nend\n```\n\nAnd then inside that if you'll do whatever you want to handle that collision. One of the things missing is being able to just check if an object is on top of another or not, like, `if collider:collidingWIth('SomeOtherTag')`. This is something I didn't do in my library in this exact way, but that can be done via query functions https:\/\/github.com\/adonaac\/hxdx\/tree\/master\/docs#querycircleareax-y-r-collision_class_names. The extra work here would be to check which shape the collider is and then use the appropriate query function, like:\n\n```\n#!lua\nfunction Collider:collidingWith(other_tags)\n    if self.shape_type == 'Circle' then\n        return world:queryCircleArea(self.x, self.y, self.r, other_tags)\n    elseif self.shape_type == 'Rectangle' then\n        return world:queryRectangleArea(self.x, self.y, self.w, self.h, other_tags)\n    ...\nend\n```\n\n---\n\nThe last important thing that no one mentioned is the idea of binding the parent object to the physics object. Currently this can be done via fixture:setUserData(). This binding is extremely useful because it's through it that when a collision event happens you can get the other object that the current one collided with and do things with it, like deal damage to it or whatever. Assuming the idea of Colliders, one common pattern I found is something like this:\n\n```\n#!lua\nfunction Enemy:new(...)\n    self.collider = world:createCircleCollider(...)\n    self.collider:setGameObject(self)\nend\n```\n\nAnd then whenever in a collision event you want to get the other game object you can do something like:\n\n```\n#!lua\nfunction Player:update(dt)\n    local colliding_with_enemy, enemy_collider = self.collider:enter('Enemy')\n    if colliding_with_enemy then\n        self:dealDamage(-10)\n        local enemy_object = enemy_collider:getGameObject()\n        enemy_object:knockback(100)\n   end\nend\n```\n","**Original comment by Bruce Hill (Bitbucket: [spilt](https:\/\/bitbucket.org\/spilt), GitHub: [spilt](https:\/\/github.com\/spilt)).**\n\n----------------------------------------\n\n> I think you can go even further and introduce the concept of Colliders. These would be new object types that are built on top of the existing objects box2d provides. Like you said, usually what most people do ends up being one body + one shape + one fixture. A collider would just be all this done automatically.\n\nYeah, I agree that the Collider (not sure about the name, maybe \"PhysicsObject\" instead?) model simplifies things well. Almost all of my use cases are 1-userData\/body\/fixture\/shape.\n\n***\n\n> The solution I arrived at is similar to yours (https:\/\/github.com\/adonaac\/hxdx#add-collision-classes, https:\/\/github.com\/adonaac\/hxdx\/tree\/master\/docs#addcollisionclasscollision_class_name-collision_class) it just has a few differences in how things are specified but the idea is the same.\n\nIt's similar, but I can't tell from looking at your implementation how it will behave in this example:\n```\n#!lua\nworld:addCollisionClass('Player', {ignores={'Enemy'}})\nworld:addCollisionClass('Enemy', {ignores={}})\n```\nWould players and enemies collide? The above code is ambiguous. That's why in my API example, I made ignoring collisions be symmetric, so this is how you would unambiguously express that you want players and enemies to pass through each other (argument order does not matter):\n```\n#!lua\nworld:ignoreCollisionsBetween({'Player'}, {'Enemy'})\n```\n\n***\n\n> I personally think callbacks are bad so I disagree with this. However this all comes down to personal preferences in the end I guess.\n\nIt's not just a matter of personal preference, it's also a matter of performance. Box2D has really efficient collision detection algorithms and using callbacks allows you to only run your code when Box2D determines that a collision happens, instead of performing a check on every object, every frame. Switching the API to use collidingWith() instead of callbacks would force people to use the less performant option.\n\nPersonally, I also prefer callbacks for collision handling because they more closely match what I'm trying to express, which is usually \"when I collide with X, do this behavior\", not \"every frame, ask if I just collided with X, and if I did, do this behavior\".\n\n***\n\nTwo other API suggestions that came to me recently: The first is to replace world:queryBoundingBox(...) with world:queryShape(shape). Right now, if you want to find the objects that overlap a circle, you need to create a Body, Shape, Fixture, set the fixture to be a sensor, update the world with a timestep of 0, and then iterate over the contacts. This all seems wasteful and cumbersome to me. The second suggestion is to have a fixture:draw(drawMode) (or PhysicsObject:draw(drawMode)) method, because it\u2019s irritating to have to type all this just to draw an arbitrary physics object:\n```\n#!lua\nif obj.shape.getRadius ~= nil then\n    love.graphics.circle('fill', obj.body:getX(), obj.body:getY(), obj.shape:getRadius())\nelse\n    love.graphics.polygon('fill', obj.body:getWorldPoints(obj.shape:getPoints()))\nend\n```\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nApple's SpriteKit APIs also wrap Box2D, it's worth looking at how they expose things:\r\n\r\nhttps:\/\/developer.apple.com\/library\/mac\/documentation\/SpriteKit\/Reference\/SKPhysicsBody_Ref\/index.html#\/\/apple_ref\/occ\/cl\/SKPhysicsBody\r\nhttps:\/\/developer.apple.com\/library\/mac\/documentation\/SpriteKit\/Reference\/SKPhysicsWorld_Ref\/index.html#\/\/apple_ref\/doc\/c_ref\/SKPhysicsWorld\r\n","**Original comment by adn adn (Bitbucket: [adonaac](https:\/\/bitbucket.org\/adonaac), ).**\n\n----------------------------------------\n\nSpriteKit seems to do with SKPhysicsBody the same idea I have with Colliders. Unity also does something similar although not from box2d. Their SKPhysicsWorld also seems to have the needed query functions (raycast, point, rect, missing circle and polygon I guess) as well as Fields, which is something that Unity's physics system also has (https:\/\/unity3d.com\/learn\/tutorials\/modules\/beginner\/live-training-archive\/2d-physics-fun-with-effectors) that are a really good idea on top of everything everyone has mentioned here.\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nYeah, I also noticed SpriteKit has fields:\r\n\r\nhttps:\/\/developer.apple.com\/library\/mac\/documentation\/SpriteKit\/Reference\/SKFieldNode_Ref\/index.html#\/\/apple_ref\/occ\/cl\/SKFieldNode\r\nhttps:\/\/developer.apple.com\/library\/mac\/documentation\/SpriteKit\/Reference\/SKPhysicsWorld_Ref\/index.html#\/\/apple_ref\/occ\/instm\/SKPhysicsWorld\/sampleFieldsAt:\r\n\r\nAlthough that might be a thing for a separate bitbucket issue.\r\n","**Original comment by airstruck (Bitbucket: [airstruck](https:\/\/bitbucket.org\/airstruck), GitHub: [airstruck](https:\/\/github.com\/airstruck)).**\n\n----------------------------------------\n\nTwo quick thoughts:\n\nI really like the current physics API (with one exception). I hope this new API will be a higher-level convenience thing on top of the current API, and the current API will be pretty much left alone.\n\nThe one part of the current API I dislike is setMeter. I wonder if setMeter might be a better fit for the new API, and could be removed entirely from the current API. If nothing else, this will make things much easier to document accurately (for example, we can simply say that some force is measured in Newtons rather than something contorted like \"kilogram units per second squared, where *units* means meters divided by the value most recently passed to setMeter\").\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nWe've discussed that particular before, and I still think you're blowing it out of proportion. The unit *is* Newton (aka kg\u00b7m\/s\u00b2), rather than something involving pixels (kg\u00b7px\/s\u00b2), setMeter simply determines the conversion rate between meters and pixels. If you're using meters internally, setMeter(1) accurately reflects that. (And any place it doesn't, is a bug.)\n","**Original comment by airstruck (Bitbucket: [airstruck](https:\/\/bitbucket.org\/airstruck), GitHub: [airstruck](https:\/\/github.com\/airstruck)).**\n\n----------------------------------------\n\n@bartbes, what you're saying now seems to contradict what we discussed earlier. To recap [the conversation](https:\/\/love2d.org\/forums\/viewtopic.php?f=4&t=78401&start=650), I asked if gravity was measured in m\/s\u00b2. Your response was: \"No, it's not m\/s\u00b2, it's unit\/s\u00b2, where \"unit\" is whatever is defined using setMeter.\" Then @pgimeno replied: \"I tend to think that setMeter is the pixels per metre conversion and that's not quite correct. It's actually for length unit conversion.\"\n\nFrom that conversation, my understanding is that force *is* actually measured in kg\u00b7px\/s\u00b2. I might just be confused about the whole thing, but that just indicates that setMeter is confusing (that, or I'm just too dense to understand it properly).\n\nI'm attaching a .love that might explain it better. My thinking is that if gravity were *really* measured in m\/s\u00b2, I could set the gravity of both worlds to the same value and they'd have the same gravity.\n\nSorry if this is going off-topic, but in my view this could be relevant to both improving and simplifying the physics API.\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nI do have this horrible habit of contradicting myself. Which I will now do again, by saying I was correct before. So basically, I got confused (which illustrates your point I guess), and yes, it would be measured in kg\u00b7px\/s\u00b2. I will defend that that makes more sense in code, if I set a speed of 50, I'd expect it to be 50 pixels further, not 50 meters, which may very well be off-screen.\n","**Original comment by airstruck (Bitbucket: [airstruck](https:\/\/bitbucket.org\/airstruck), GitHub: [airstruck](https:\/\/github.com\/airstruck)).**\n\n----------------------------------------\n\nI agree, that does make sense, although I think it makes more sense for a simplified API than it does for an API that mostly mirrors the Box2D API in a Lua-fied sort of way. I just mentioned it again here because I wanted to get the suggestion about moving it to the simplified API on the record (and because I promised @slime73 I'd update the wiki, but I honestly can't get my head around how to document units of measurement, so it's been on my mind again).\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nWhat would be a more accurate \/ descriptive name for it?\r\n","**Original comment by Pedro Gimeno Fortea (Bitbucket: [pgimeno](https:\/\/bitbucket.org\/pgimeno), ).**\n\n----------------------------------------\n\nI don't know, setLengthScale maybe?\n","**Original comment by Julio Felipe Angelini (Bitbucket: [brocoli](https:\/\/bitbucket.org\/brocoli), GitHub: [brocoli](https:\/\/github.com\/brocoli)).**\n\n----------------------------------------\n\n+1 on keeping the current physics API as is, except maybe for setMeter, and building any convenience and ease-of-use API on top of it. \n","**Original comment by itraykov (Bitbucket: [itraykov](https:\/\/bitbucket.org\/itraykov), GitHub: [itraykov](https:\/\/github.com\/itraykov)).**\r\n\r\n----------------------------------------\r\n\r\nI like Sasha's idea of simplifying the API:\r\n\r\n```\r\n#!lua\r\n\r\nfixture = Body:newChainShape(looping, points)\r\nfixture = Body:newCircleShape(x, y, radius)\r\nfixture = Body:newEdgeShape(x1, y1, x2, y2)\r\nfixture = Body:newPolygonShape(points)\r\nfixture = Body:newRectangleShape(width, height)\r\n```\r\n\r\nThis would be sort of like the old version of Box2D were fixtures\/shapes were combined in one object. The only benefit of separating the two is you want to \"re-use shapes\" which is not very practical in Lua anyways.\r\n\r\nMy personal gripe with the Love2D API is that some of \"constructors\" are out hand (ie newPulleyJoint).\r\nOne possible solution could be to have globally-modifiable defaults:\r\n\r\n\r\n```\r\n#!lua\r\n\r\nlove.physics.setDefaultDensity(d)\r\nlove.physics.setDefaultFriction(f)\r\nlove.physics.setDefaultRestitution(r)\r\n```\r\n","Original attachment: \r\n[setmeter-test.love.zip](https:\/\/github.com\/love2d\/love\/files\/4238658\/setmeter-test.love.zip)\r\n","> **Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n> \r\n> An small addition to L\u00d6VE could be to have shortcut methods in `Body`, e.g.:\r\n> \r\n> ```lua\r\n> \r\n> fixture = Body:newChainShape(looping, points)\r\n> fixture = Body:newCircleShape(x, y, radius)\r\n> fixture = Body:newEdgeShape(x1, y1, x2, y2)\r\n> fixture = Body:newPolygonShape(points)\r\n> fixture = Body:newRectangleShape(width, height)\r\n> ```\r\n> \r\n> Although those method names are kind of misleading, since they return Fixtures rather than Shapes.\r\n\r\nHow about:\r\n\r\n> ```lua\r\n> \r\n> fixture = Body:newChainFixture(looping, points)\r\n> fixture = Body:newCircleFixture(x, y, radius)\r\n> fixture = Body:newEdgeFixture(x1, y1, x2, y2)\r\n> fixture = Body:newPolygonFixture(points)\r\n> fixture = Body:newRectangleFixture(width, height)\r\n> ```\r\n","Sorry for a ping from the future, but as I have had to solve this (overcomplication) recently, I would definitely vote for having some high level API for simple physics.\r\n\r\nIt took me maybe a solid couple of hours to grasp what are the differences between body, shape, fixture etc. and why do I need `fixture` with multiple `bodies` instead of using `joints` (thanks to the forum as well, where somebody mentioned a `weld joint` is clearly not the right way to take). A case in point.\r\n\r\nIn the end I decided to build a helper that solves this by simplifying shape(s)->body\/ies->fixture creation into one function. That function still returns a fixture, but `love.physics` already allows easy access to bodies and shapes via each other.\r\n\r\nPS: I liked the approach of [HC](https:\/\/vrld.github.io\/HardonCollider\/reference.html#hardoncollidernew) although a couple of things could be further simplified (e.g. just generic function to create a collider instead of individual shape ones)."],"labels":["feature"]},{"title":"Investigate \/ evaluate threading love.graphics","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1121) by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nWith some (probably major) re-architecting of love.graphics, it would be possible to have a dedicated internal render thread which would consume render commands and generate OpenGL function calls.\r\n\r\nThe main thread (or another single thread, but not more than one thread at once) would generate render commands for the render thread to consume.\r\n\r\nSome care would need to be taken with things like Meshes and SpriteBatches \u2013 L\u00d6VE would probably have to make sure the render thread's queue is complete before allowing modifications to the data of said objects, see also #1111 (or there could be more specialized - but also more complicated - solutions in some circumstances).\r\n\r\nIt might also be useful to allow some sort of hooks for adding custom render commands (or something similar), to keep love.graphics somewhat \"hackable\".\r\n\r\n----\r\n\r\nIs the effort and maintenance required for said threading worth it? What kind of performance gains would there be? Would it make it a lot harder to add new features or change existing parts of love.graphics?\r\n\r\nA lot of the current CPU side overhead in love.graphics is simply the Lua\/C API boundary as well as non-OpenGL work L\u00d6VE does internally (e.g. memory allocations and calculations for lines). Putting the OpenGL part into its own thread wouldn't reduce those parts of the overhead, and could add some of its own (but how much?)\r\n\r\nIt would probably make it easier to add different non-OpenGL rendering backends as well.\r\n","comments":["**Original comment by Lucien Greathouse (Bitbucket: [LPGhatguy](https:\/\/bitbucket.org\/LPGhatguy), GitHub: [LPGhatguy](https:\/\/github.com\/LPGhatguy)).**\n\n----------------------------------------\n\nIf there ends up being a project or fork to implement or prototype this idea, I'd like to put forth \"chorizo\" as a codename.\n"],"labels":["feature"]},{"title":"filesystem.getSourceBaseDirectory behavior is not compliant with the documentation","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1095) by array93 (Bitbucket: [array93](https:\/\/bitbucket.org\/array93), GitHub: [array93](https:\/\/github.com\/array93)).**\n\n----------------------------------------\n\nA similar problem was reported under #892.\nLong story short: getSourceBaseDirectory does not always return full source base directory.\n\nI have performed several tests. Here are the results with a brief introduction.\n\nFirst of all, my testing environment.\n\n```\nD:\\env\n  - exe\n    - main.exe\n    - file.txt\n  - love\n    - main.love\n  - lua\n    - main.lua\n```\n\nSecondly, the code:\n```\n#!lua\nfunction love.load()\n  print '' -- just making the console output a little bit easier to copy\n  print('isFused', love.filesystem.isFused())\n  \n  local baseDirectory = love.filesystem.getSourceBaseDirectory()\n  print('baseDirectory', baseDirectory)\n\n  print '\\nfiles found:'\n  love.filesystem.mount(baseDirectory, '') -- mounting at empty string, I believe the same thing happened when mounted on '\/'\n  love.filesystem.getDirectoryItems('\/', print)\nend\n```\n\nNow the results that look alright to me:\n```\nD:\\env\\src> love --console .\n  isFused false\n  baseDirectory   D:\/env\n\n  files found:\n  main.lua\n\nD:\\env\\src> love --console --fused .\n  isFused true\n  baseDirectory   D:\/env\n\n  files found:\n  exe\n  love\n  main.lua\n  src\n\nD:\\env\\love> love --console main.love\n  isFused false\n  baseDirectory   D:\/env\/love\n\n  files found:\n  main.lua\n\nD:\\env> D:\\env\\exe\\main.exe --console\n  isFused true\n  baseDirectory   D:\\env\\exe\n\n  files found:\n  file.txt\n  main.exe\n  main.lua\n```\n\nAnd the ones that look dodgy, one by one, with my comments:\n```\nD:\\env\\love> love --console --fused main.love\n  isFused true\n  baseDirectory   D:\/env\/love\n\n  files found:\n  main.love\n```\nShouldn't files found also contain ```main.lua```? getDirectoryItems is used to show all files at root directory.\n\n```\nD:\\env\\exe> main.exe --console\n  isFused true\n  baseDirectory\n\n  files found:\n  main.lua\n```\nbaseDirectory is empty string.\n\n\n```\nD:\\env\\exe> main --console\n```\nLove starts with \"no game\" window.\n\n```\nD:\\env> exe\\main.exe --console\n  isFused true\n  baseDirectory   exe\n\n  files found:\n  file.txt\n  main.exe\n  main.lua\n```\nBase directory 'exe'\n\n\nCiting the wiki (https:\/\/love2d.org\/wiki\/love.filesystem.getSourceBaseDirectory)\n```Returns the full path to the directory containing the .love file.```\n\nKeep up the great work :)\n","comments":["**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nI've not been able to reproduce any weirdness on linux. I always see main.lua, and baseDirectory is never empty, and always an absolute path. Maybe this only affects windows?\n","**Original comment by Premek (Bitbucket: [premek](https:\/\/bitbucket.org\/premek), GitHub: [premek](https:\/\/github.com\/premek)).**\n\n----------------------------------------\n\nOne more case that I'm experiencing on linux:\n\n```\n#!bash\npremek@nuc:~\/prog\/forest$ ls src\/main.lua \nsrc\/main.lua\npremek@nuc:~\/prog\/forest$ love src\/\nSourceBaseDirectory \/home\/premek\/prog\/forest\nWorkingDirectory    \/home\/premek\/prog\/forest\n```\n\nThe name of the 'src' folder is lost and inacessible from lua. Is this correct? The documentation mentions only .love file but what about when you point to the directory and not the .love file?\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nThat is correct, it's the path that contains the source. To love there's really no difference between a .love file and a directory. You can get the actual source with the (currently undocumented) love.filesystem.getSource() function.\n"],"labels":["bug","0.9.2"]},{"title":"Expose coordinate of a specific glyph in a string","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/1016) by Landon \u201cKarai\u201d Manning (Bitbucket: [karai17](https:\/\/bitbucket.org\/karai17), GitHub: [karai17](https:\/\/github.com\/karai17)).**\n\n----------------------------------------\n\nI am trying to draw an input cursor for an input box. My problem is this: let's say I have the following string within a fixed width where `|` represents where I want the cursor to be:\n\n```\n[abc d|ef ghi      ]\n```\n\nTo get the cursor position, I must loop through the string and measure the size of the sub string to see if I am passing where the mouse clicked:\n\n```\nis \"a\" > | ?\nno\n\nis \"ab\" > | ?\nno\n\n...\n\nis \"abc de\" > | ?\nyes\n\ncursor is at \"abc d\"\n```\n\nGreat, that was easy. But what about if my textbox is aligned to the right? Or heaven forbid, justified? This problem because very tedious at best.\n\n```\n[      abc d|ef ghi]\n\n[abc    d|ef    ghi]\n```\n\nI propose exposing the coordinate of a particular glyph in a string:\n\n```lua\nlocal font = love.graphics.newFont(\"somefont.ttf\")\nlocal index = 9\nlocal text = \"Now this is a story all about how my life got flipped turned up-side-down!\"\nlocal x = 100\nlocal y = 150\nlocal limit = 300\nlocal align = \"right\"\n\nlove.graphics.setFont(font)\nlocal x, y = love.graphics.getGlyphPosition(index, text, x, y, limit, align)\n```\n\nYou will note in my proposition that `getGlyphPosition` uses the same arguments as printf preceded by the desired glyph index. This would give you the exact same data that would be drawn to screen via printf, allowing for you to accurately get the coordinates of a particular glyph.\n","comments":["**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nIf i might add something to this in the form of a question; might it make more sense to implement this as a method to the soon to-be 0.10 text objects, like to:posToCoords() or something instead? Or would this make sense even \"outside\" of text objects.\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nIt would most likely be a Font method.\r\n\r\nIt could work with Text objects too, but it would only make sense for text added to the object with `Text:set`, not `Text:add`.\r\n","**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nOkay, one more question, would it make sense for this or a similar function to work with l.g.print as well? (doesn't have alignment nor wrapping, but it does have transformations)\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nYou always know the transformations in `l.g.print` so you can take the difference of the coordinate minus the transformation and you have the real coordinate, then you would use the font method.\n\nThe problem comes with `right` and `center` alignment, then you would need to specify all the arguments you would pass to `l.g.printf` which is kinda ugly\n\n`Text` objects are not what I expected so I dont really like them hahaha.\nYet you could store the bounding boxes of each string `added`\/`setted` in the text object, and compare to that first, then use the standard method.\n\nI'm not sure about the API either... specially the alignment part (too many arguments)\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\n> Text objects are not what I expected so I dont really like them hahaha. \r\n\r\nWhat did you expect?\r\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nJust one text (it wouldnt store more than one string), percharacter format, utf8 functions (string like, not just the ones provided in UTF-8)... Better wrapping, like a printf but waaaaaay more useful and customizable with lot more methods and stuff...\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\n> utf8 functions (string like, not just the ones provided in UTF-8)\r\n\r\nThat doesn't seem like it should belong in a drawable object...\r\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nWell you are right there, haha \n\nAnyway the most important feature I wanted would be percharacter format or rich formating, which would imply multiple font and sizes and would make using the font methods really awful (How would you handle a text object with more than one font?) so you would need to have some methods (getWidth, getHeight, getWrap and such plus this ones getCoordinate, getCharacter)...\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nI don't think that's a direction that love.graphics text drawing will go in, for the foreseeable future. You can draw multiple individual pieces of text for that kind of thing (which, coincidentally, can now be a lot more efficient if Text objects \u2013 even multiple ones \u2013 are used.)\r\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nI though that was the issue you were trying to cover with Text objects but well (It's not like I hate them, they are really nice to have, plus are better than printing something a thousand times to the screen in a couple of seconds)\n\nComing back to the issue, how would you handle the `limit` and `alignment`? Would you need to pass them to the method? Also I consider the `x` and `y` of the text are pointless, you just need to pass the difference as I pointed above, same with translate and scale, the user can handle that I guess so you would assume that the text is drawn at 0,0 and that would reduce the number of arguments needed\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nAPI proposal\n\n```lua\nlocal x, y, width, height = font:getGlyphPosition(index, text, limit, align)\n```\n\nThis one returns the `x` and `y` position of the character at the `index` position of the `text` which has a `limit` and an `align` mode. The `index` should probably be UTF-8. The `width` and `height` are optional, but would be nice\n\n```lua\nlocal index = font:getPositionGlyph(x, y, text, limit, align)\n```\nThis one does the opposite, you pass the `x`, `y` position and it returns the `index` of the character under that point, if it is not over any character, returns `nil`. Again the `index` should probably be UTF-8.\n\nBoth of this functions assume that the text is drawn at 0,0 and `x` and `y` are relative to that.\n\n\nPS: Not sure about the names hahaha\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nWell after designing many API's with textareas in mind, the above proposal I made more than a year ago still makes sense, would change the names though, they are horrible!\n"],"labels":["feature"]},{"title":"Add an open-file popup dialog function","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/985) by Eliter Scripts (Bitbucket: [EliterScripts](https:\/\/bitbucket.org\/EliterScripts), GitHub: [EliterScripts](https:\/\/github.com\/EliterScripts)).**\n\n----------------------------------------\n\ncan there be something like love.graphics.UserSearch(Arg1,Arg2) can everyone who is looking at this go into Google Chrome (a web browser, look it up), type in \"Chrome:\/\/settings\" in the address bar, scroll down all the way to \"Show advanced settings...\" and click that. Then to the left of the \"Download location:\" there is a box, click it. See that window that popped up? can you guys put that into love2d, so like a User Avatar picture would be EASY for the user to locate. It would be so awesome. \nNow, for love.graphics.UserSearch(), the first Argument, being what directory to be looking first (Like, in chrome, it's probably at, by default, looking at \"C:\\USERNAME\\Downloads\"), the Second argument could be nil, OR a string. The second argument, if it is nil, then ALL the directories and files will be displayed. When the second argument is a string, it will look at ALL the directories, but will only view the file extension that is the same as the string that is Arg2.\n\nThat make sense?\n","comments":["**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nL\u00d6VE 0.10.0 will have support for dropping files and folders onto the game's window. Will that be enough for you, or would an open-file-dialog function still be useful?\r\n\r\n(Also, for reference, is there a standardized API for this in Linux? On Windows there's [GetOpenFileName](https:\/\/msdn.microsoft.com\/en-us\/library\/windows\/desktop\/ms646927(v=vs.85).aspx) and on OS X there's [NSOpenPanel](https:\/\/developer.apple.com\/library\/mac\/documentation\/Cocoa\/Reference\/ApplicationKit\/Classes\/NSOpenPanel_Class\/index.html).)\r\n","**Original comment by Eliter Scripts (Bitbucket: [EliterScripts](https:\/\/bitbucket.org\/EliterScripts), GitHub: [EliterScripts](https:\/\/github.com\/EliterScripts)).**\n\n----------------------------------------\n\nIm not sure what \"an openj-file-dialog function\" is. Sorry. Also, is there a possibility that there could be ability to move in and out of windows. Like, after you download something on Chrome, you can drag the file from the bottom bar, onto your desktop, or drag a file from somewhere else, and drop it into a website. I think you could play around with some ideas from love.window.showMessageBox() stuff.\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\n> Im not sure what \"an openj-file-dialog function\" is. Sorry.\r\n\r\nIt's this (the thing that Chrome displays in your description): http:\/\/blogs.msdn.com\/blogfiles\/wpfsdk\/WindowsLiveWriter\/OpenFileDialogsample_CAB7\/OpenFileDialog_Dev10_2_thumb_1.jpg\r\n","**Original comment by Eliter Scripts (Bitbucket: [EliterScripts](https:\/\/bitbucket.org\/EliterScripts), GitHub: [EliterScripts](https:\/\/github.com\/EliterScripts)).**\n\n----------------------------------------\n\nYeah, I think an \"open-file-dialog function\" would be pretty cool. But, if drag-and-drop is all you can do, it would totally work. It's just that I'm creating a program, that requires a directory to be chosen, and files being read in it, but I need the user to decide every time it runs, where the directory is.\n","**Original comment by Robert M. (Bitbucket: [rmcode](https:\/\/bitbucket.org\/rmcode), GitHub: [rmcode](https:\/\/github.com\/rmcode)).**\n\n----------------------------------------\n\n@slime73 \nI think the addition of an \"open-file dialog\" would especially be handy for tools like level editors, paint applications and other utilities made with L\u00d6VE. \n\nThen again \"drag & drop\" might be more convenient anyway ...\n","**Original comment by Eliter Scripts (Bitbucket: [EliterScripts](https:\/\/bitbucket.org\/EliterScripts), GitHub: [EliterScripts](https:\/\/github.com\/EliterScripts)).**\n\n----------------------------------------\n\nHow much is the bribe? I really need this API, so I can continue the program. This if fatal to the program!\n","**Original comment by Robin Wellner (Bitbucket: [gvx](https:\/\/bitbucket.org\/gvx), GitHub: [gvx](https:\/\/github.com\/gvx)).**\n\n----------------------------------------\n\nNew L\u00d6VE versions tend to take a long time, so I wouldn't wait on it, @EliterScripts\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nConsidering file drop events have been added to L\u00d6VE 0.10.0 and this feature wouldn't have complete cross-platform support, I'm marking this as wontfix for now.\r\n","**Original comment by Eliter Scripts (Bitbucket: [EliterScripts](https:\/\/bitbucket.org\/EliterScripts), GitHub: [EliterScripts](https:\/\/github.com\/EliterScripts)).**\n\n----------------------------------------\n\nDarn. :\\\n","**Original comment by yomgui oim (Bitbucket: [chafporte](https:\/\/bitbucket.org\/chafporte), ).**\n\n----------------------------------------\n\njust add tinyfiledialogs from sourceforge to your source and mark the issue as fixed.\n","**Original comment by Kyle McLamb (Bitbucket: [Alloyed](https:\/\/bitbucket.org\/Alloyed), GitHub: [Alloyed](https:\/\/github.com\/Alloyed)).**\n\n----------------------------------------\n\nFor anybody who comes across this issue, I made a set of bindings to get Windows\/MacOS\/Linux file pickers, that I've been using just fine with love:\n\nhttps:\/\/github.com\/Alloyed\/nativefiledialog\/tree\/master\/lua\n\nNote: it's a blocking API, so I suggest spawning a thread to handle dialog boxes, and since the underlying library doesn't ask for a parent window it doesn't do the thing native dialogs do where they redirect focus from their parent to them, but it works okay4me\n","**Original comment by Seppi (Bitbucket: [josefnpat](https:\/\/bitbucket.org\/josefnpat), GitHub: [josefnpat](https:\/\/github.com\/josefnpat)).**\n\n----------------------------------------\n\nI've done some research, and as @chafporte mentioned, as old as tinyfiledialogs looks, it most certainly looks accredited.\n\nhttps:\/\/sourceforge.net\/projects\/tinyfiledialogs\/\n\nThere have been many instances where a file picker would have been fantastic; drag and drop into the app doesn't really cut it from a UX standpoint.\n\nCan we mark this ticket as `open` again?\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nI'll look into it again at some point, but don't get your hopes up (yet).\n","**Original comment by Daniel Power (Bitbucket: [danielpower](https:\/\/bitbucket.org\/danielpower), GitHub: [danielpower](https:\/\/github.com\/danielpower)).**\n\n----------------------------------------\n\nIf you're willing to include imgui, I've written a file picker dialog that should work for you.\n![Screenshot_2017-07-26_14-40-52.png](https:\/\/bitbucket.org\/repo\/A6ddy\/images\/1022452956-Screenshot_2017-07-26_14-40-52.png)\n\nI wrote it for my animation editor called Motion. But I made sure when I wrote the file picker that it would be portable for use in future projects.\n\nYou can find it here: https:\/\/gitlab.com\/DanielPower\/motion\/tree\/master\nThe filedialog itself is in widgets\/imguiFile.lua\nFor an example of how to use it look at interface.lua since that's where all the calls are.\n\nEdit: A previous version had support for thumbnail previews, but it's been temporarily removed while I improve the layout.\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nOf course that does require luafilesystem. (It looks nice, btw.)\n","**Original comment by Daniel Power (Bitbucket: [danielpower](https:\/\/bitbucket.org\/danielpower), GitHub: [danielpower](https:\/\/github.com\/danielpower)).**\n\n----------------------------------------\n\nOnce 0.11 is released, I'm going to begin packaging luafilesystem and imgui with the file dialog, and dropping them into the save directory, since (according to holo on irc) love will 0.11 will use the save directory as cpath.\n\nThat way no dependencies will need to be installed manually.\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nI support @Alloyed proposal of using nativefiledialogs, the dependency is really small and pretty much crossplatform (works in Windows, Linux and MacOSX)\n\nFor me it just worked out of the box, it was really easy to build it too\n","**Original comment by Mi 28 (Bitbucket: [rcoaxil](https:\/\/bitbucket.org\/rcoaxil), ).**\n\n----------------------------------------\n\nGiven that you cannot mount a point you didn't select in current session, its usability is limited, at best. To leverage the filesystem you'll have to bite into physfs via FFI, and at that point you might as well bring your own binary library for native dialogs.\n","**Original comment by itraykov (Bitbucket: [itraykov](https:\/\/bitbucket.org\/itraykov), GitHub: [itraykov](https:\/\/github.com\/itraykov)).**\n\n----------------------------------------\n\nTo be honest, I don't think this is a good idea. Even if you were to write an editor in Love2D, the native file dialog would look out of place with your editor. Would not be very convenient in full-screen mode either. So yea, it's probably best to use something like Daniel Power's solution.\n","**Original comment by Ross Grams (Bitbucket: [rossgrams](https:\/\/bitbucket.org\/rossgrams), ).**\n\n----------------------------------------\n\nYes, built-in nativefiledialogs support (or similar) would be really, really nice. You can't beat the native dialogs for UX. I would use it constantly for various editors, tools, and loading user-made content (custom maps, mods, images, etc.). \n\nI have to disagree with itraykov. Personally, on the occasions when I would actually care about looks (i.e. not for an editor) I think a native dialog would look much more professional than any homebrew solution. \n\nDropping files and folders onto the window *is* nice, but for me it's not as good as an Open\/Save As dialog, and definitely not the first method that comes to mind.\n","**Original comment by Nicol\u00e1s Abram Luj\u00e1n (Bitbucket: [nicolas abram lujan](https:\/\/bitbucket.org\/nicolas abram lujan), ).**\n\n----------------------------------------\n\nI also think this would make a very nice feature. A lot of people like having os native popup windows (Like qt does afaik, compared to gtk which i think does the same ui for all systems). nativefiledialogs looks like a small, reliable dependency to add which would allow it. I think just adding it to the binary would be enough with the ffi if no one wants to actually add the bindings.\n","**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nIf people would be more sated with an \"in-game\" solution, i do believe that there's only three things stopping that;\n\n- a way to access files outside of l\u00f6ve's \"sandbox\",\n\n- a library over such a thing that could be themed to anything the user desires,\n\n- if SDL supports this, it would be real nice if the file\/directory-dropped callbacks would also contain in window-space the coordinates where you dropped the file\/directory.\n\nI've already wrote a semi-solution to the first issue (using only PhysFS, which already comes with l\u00f6ve; access is fine, but writing to arbitrary places is still problematic, and of course the two mobile backends might not work at all (hence why i'm not proposing this to be included in l\u00f6ve proper, for one); the rest was tested, i believe, on discord. The second issue is really not that big of a deal once the first works as much as it can. And if those two are done, the third would be just an extra nicety on top. (Example case would be, your game behaves differently where you drop a certain file let's say, in the window.)\n\n(Also, this is just a bit off-topic i think, but similar alternative solutions have been proposed above, so i didn't feel it to be too much of an issue.)\n","This is something that I was thinking about for a long time, and just now found an issue for it.\r\nAlthough `love.filedropped` can be nice in some cases, I still consider it \"secondary\" relative to the usual OS's file dialog.\r\nSometimes a file dialog can be more convenient, for example to ask the user where to save a file to.\r\n\r\nAre native file dialogs planned in any way for future versions of l\u00f6ve?","This has been brought recently too and the idea is to use Zenity or KDialog in Linux.\r\n\r\nThe next question is how would the API look like? On what module it should belong? Should it be in `love.window` because it deals with window, `love.system` because it's system-specific feature, or `love.filesystem` as it deal with files?"],"labels":["feature","library dependency","SDL3"]},{"title":"L\u00d6VE development tools","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/885) by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nL\u00d6VE currently works nicely as a development and runtime library\/framework without any split between the two, but there are some things that I feel are missing from the development side which wouldn't make sense to include in end-user runtime distributions, especially when Android and iOS are taken into account.\r\n\r\nA more robust no-game screen (maybe including a list of recently used .love files which you can click), [Shader validation](http:\/\/www.khronos.org\/opengles\/sdk\/tools\/Reference-Compiler\/), texture compression (especially when you add mobile since you'd want DXT-compressed images on desktop, PVR on iOS and ETC on Android), and some other asset-related things are a few ideas I've had which fit that scope.\r\n\r\nThe development stuff might be an extra dll and possibly a love-dev executable, although that's just my first thought on it.\r\n","comments":["**Original comment by Landon \u201cKarai\u201d Manning (Bitbucket: [karai17](https:\/\/bitbucket.org\/karai17), GitHub: [karai17](https:\/\/github.com\/karai17)).**\n\n----------------------------------------\n\nWould it be possible to add in direct debug support, such as listing data within variables, the ability to walk through lines, etc?\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nLua's `debug` library already lets you do that (e.g. http:\/\/unknownworlds.com\/decoda\/ or http:\/\/studio.zerobrane.com )\r\n","**Original comment by Landon \u201cKarai\u201d Manning (Bitbucket: [karai17](https:\/\/bitbucket.org\/karai17), GitHub: [karai17](https:\/\/github.com\/karai17)).**\n\n----------------------------------------\n\nUgh, the last thing I want to do is install yet another IDE. Do you know of any Lua debug plugins for sublime?\n","**Original comment by Carlo Cabanilla (Bitbucket: [clofresh](https:\/\/bitbucket.org\/clofresh), GitHub: [clofresh](https:\/\/github.com\/clofresh)).**\n\n----------------------------------------\n\nMaybe a packaging tool as well, since everyone tries to write their own brittle one and eventually gets bored of maintaining it?\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\n[love-release](https:\/\/github.com\/MisterDA\/love-release) is amazing. I hope that MisterDA wont give up on it. We should give more support to it and try to port it to windows at some point. But yeah I understand what you mean.\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nShader validation is now in love 0.11's main API as `love.graphics.validateShader`.\r\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nFor what it's worth, I don't think I would use the no-game screen for launching .love files on a non-mobile computer, I think I would always use the operating system's file manager instead.\n\nI also like how LOVE is \"portable\", i.e. it doesn't leave behind files (unless the .love file creates them).\n","> Maybe a packaging tool as well, since everyone tries to write their own brittle one and eventually gets bored of maintaining it?\r\n\r\nThis was brought up again recently and I think it's a good idea (to the extent that it's technically feasible on each platform at least - for example iOS might be off the table).\r\n\r\nPackaging has quirks and is tricky to get right for each platform, and isn't really 'self-contained' the way most of the rest of love is. It'd be good to make it as simple for users to do as possible.\r\n"],"labels":["feature"]},{"title":"Love Installer set path option?","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/878) by Matt Millwood (Bitbucket: [Aesthete](https:\/\/bitbucket.org\/Aesthete), GitHub: [Aesthete](https:\/\/github.com\/Aesthete)).**\n\n----------------------------------------\n\nI know I end up setting the path myself when using Love to call \"love .\/\" from the command line in the folder I'm working in to run my project. \n\ndoes anyone have any issues with this being an option for users?\n\nIs it a pain to implement across supported platforms?\n","comments":["**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nWait, what is it you actually want?\n","**Original comment by Matt Millwood (Bitbucket: [Aesthete](https:\/\/bitbucket.org\/Aesthete), GitHub: [Aesthete](https:\/\/github.com\/Aesthete)).**\n\n----------------------------------------\n\nSorry, to be clear - an option to add the love installation directory to the system PATH upon installation.\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nI asked for clarification in IRC, it's about setting the system PATH environment variable to include the binary path. I don't know anything about the installer, but I've assigned this to rude, who (hopefully) does.\n\nRude, can you make this a checkbox, maybe?\n"],"labels":["help wanted","feature","Windows"]},{"title":"ParticleSystem:setColorVariation","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/744) by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nI'm guessing that a method which does to color what `ParticleSystem:setSizeVariation` does to scale might look cool.\n\nHere's a demonstration of the effect the variation could have:\n\n\n```\n#!lua\n\ncolorVariation = 0.2\n\ncolors = {{0, 134, 240, 255}, {255, 0, 115, 255}}\n\nwidth = 300\nheight = 300\n\nfunction f()\n\toffset = math.random() * colorVariation\n\tinterval = (1 - math.random() * colorVariation) - offset\n\n\tc = {}\n\tfor i = 1, width do\n\t\tt = i \/ width\n\n\t\ts = offset + t * interval\n\t\ts = s * (#colors - 1)\n\t\ti = math.floor(s)\n\t\ts = s - i\n\n\t\tif i == #colors - 1 then\n\t\t\tk = i\n\t\telse\n\t\t\tk = i + 1\n\t\tend\n\n\t\tr = colors[i+1][1] * (1 - s) + colors[k+1][1] * s\n\t\tg = colors[i+1][2] * (1 - s) + colors[k+1][2] * s\n\t\tb = colors[i+1][3] * (1 - s) + colors[k+1][3] * s\n\t\ta = colors[i+1][4] * (1 - s) + colors[k+1][4] * s\n\t\ttable.insert(c, {r, g, b, a})\n\tend\nend\n\nfunction love.draw()\n\tfor i = 1, width do\n\t\tlove.graphics.setColor(c[i])\n\t\tlove.graphics.line(i, 0, i, height)\n\tend\n\n\tlove.graphics.setColor(255, 255, 255)\n\tlove.graphics.print('Color variation: '..colorVariation, 10, height + 10)\nend\n\nfunction love.load()\n\tf()\n\tlove.keyboard.setKeyRepeat(true)\nend\n\nfunction love.keypressed(key)\n\tif key == 'left' then\n\t\tcolorVariation = colorVariation - 0.1\n\t\tif colorVariation < 0 then\n\t\t\tcolorVariation = 0\n\t\tend\n\telseif key == 'right' then\n\t\tcolorVariation = colorVariation + 0.1\n\t\tif colorVariation > 1 then\n\t\t\tcolorVariation = 1\n\t\tend\n\telse\n\t\tf()\n\tend\nend\n```\n","comments":[],"labels":["feature"]},{"title":"lineCaps and lineJoins","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/659) by Karl Hobley (Bitbucket: [kaedroho](https:\/\/bitbucket.org\/kaedroho), GitHub: [kaedroho](https:\/\/github.com\/kaedroho)).**\n\n----------------------------------------\n\nlineCaps and lineJoins are very handy as they let you have things like smooth lines. I imagine the implementation won't be that easy but it will improve the quality of LOVE games. This is a feature found in HTML5 canvases\n\nHeres a couple of HTML5 tutorials describing how these are done in HTML5\n* http:\/\/www.html5canvastutorials.com\/tutorials\/html5-canvas-line-caps\/\n* http:\/\/www.html5canvastutorials.com\/tutorials\/html5-canvas-line-joins\/\n","comments":["**Original comment by Matthias Richter (Bitbucket: [vrld](https:\/\/bitbucket.org\/vrld), GitHub: [vrld](https:\/\/github.com\/vrld)).**\n\n----------------------------------------\n\nLine-join-modes have been on my to-do for some time, thogh only as 'none' (equivalent to several calls to love.graphics.line()), 'miter' (as it is now) and 'bevel' (see also [here](http:\/\/cairographics.org\/samples\/set_line_join\/)). A round line join could probably be added to the list too, though it wouldn't play too nice with the internal implementation - especially with anti-aliasing.\n\nSimilar things go for line caps: A square cap is simple enough, but the round one is more complicated.\n","**Original comment by Karl Hobley (Bitbucket: [kaedroho](https:\/\/bitbucket.org\/kaedroho), GitHub: [kaedroho](https:\/\/github.com\/kaedroho)).**\n\n----------------------------------------\n\nIn my game, I got \"round\" line caps by simply drawing circles at each end of the line and it actually looks alright. Obviously not a great solution though but it might work as a temporary fix\n","**Original comment by Matthias Richter (Bitbucket: [vrld](https:\/\/bitbucket.org\/vrld), GitHub: [vrld](https:\/\/github.com\/vrld)).**\n\n----------------------------------------\n\nHalf of it fixed as of a9e1ef3\n","**Original comment by SpotlightKid (Bitbucket: [SpotlightKid](https:\/\/bitbucket.org\/SpotlightKid), GitHub: [SpotlightKid](https:\/\/github.com\/SpotlightKid)).**\n\n----------------------------------------\n\nI get this error when trying to use `love.graphics.getLineJoin()`:\n\n```\nError: main.lua:89: Unknown line join\nstack traceback:\n\t[C]: in function 'getLineJoin'\n\tmain.lua:89: in function 'draw'\n\t[string \"boot.lua\"]:438: in function <[string \"boot.lua\"]:399>\n\t[C]: in function 'xpcall'\n```\n\nManjaro Linux x86_64 with L\u00d6VE installed from package manager (love 0.9.1-1)\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nThat's already fixed for L\u00d6VE 0.9.2.\r\n","**Original comment by SpotlightKid (Bitbucket: [SpotlightKid](https:\/\/bitbucket.org\/SpotlightKid), GitHub: [SpotlightKid](https:\/\/github.com\/SpotlightKid)).**\n\n----------------------------------------\n\nAh, ok. I only searched the changelog for the function name so I missed the entry.\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nIn the meantime adding this to the top of your main.lua should make `getLineJoin` work as expected, I think: `love.graphics.setLineJoin(\"miter\")`.\r\n","**Original comment by SpotlightKid (Bitbucket: [SpotlightKid](https:\/\/bitbucket.org\/SpotlightKid), GitHub: [SpotlightKid](https:\/\/github.com\/SpotlightKid)).**\n\n----------------------------------------\n\nYes, I figured that out. Since I'm using `getLineJoin` in a function to [save an unknown state](https:\/\/gist.github.com\/SpotlightKid\/5685c2ec3ba43e673527), I did this at the top of the module:\n\n```\nif not pcall(love.graphics.getLineJoin) then\n    love.graphics.setLineJoin('miter')\nend\n```\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\n#860 was marked as a duplicate of this issue.\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\n#1146 was marked as a duplicate of this issue.\n"],"labels":["feature"]},{"title":"Renaming Source\/Video:seek\/tell","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/642) by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nThere are few issues with `seek` and `tell` I think.\n\nThey set and get a property of the Source, rather than do an \"action\" on it, so I'd expect a \"set\/get\" prefix. Also, even though the names are good for what they are, they have an obvious setter\/getter relationship, and the name \"tell\" isn't super obvious, at least to me.\n\nHow about `set\/getLocation`? I know it's kinda similar to `set\/getPosition` though, but here's hoping that wouldn't be too confusing.\n","comments":["**Original comment by Minh Ngo (Bitbucket: [mngo](https:\/\/bitbucket.org\/mngo), GitHub: [mngo](https:\/\/github.com\/mngo)).**\n\n----------------------------------------\n\nI'm ok with `set\/getPosition`\n\nEDIT: Guess that's already taken.\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nThese are well-known names, consistent with Files, and used in just about every other piece of software. (See fseek, ftell.) I'm not sure this is more obvious, and it feels a bit like being different for the sake of being different.\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nAll else being equal it would nice if Sources and Files had the same names, but I think the consistency between Sources and Files isn't as important as the consistency between Sources and L\u00d6VE's naming convention for functions which set\/get state.\n\nI took a look at some other library-framework-engines to see what names they were using (accuracy not guaranteed).\n\n* SFML: `get\/setPlayingOffset`\n* Allegro: `al_get\/set_voice_position`\n* Slick2D: `get\/setPosition`\n* FlashPunk: `position` property\n* Polycode: `get\/setOffset` (samples), `getPlaybackTime` (time), `seekTo` (time)\n* openFrameworks: `get\/setPositionMS`, `get\/setPosition` (normalised)\n* jMonkeyEngine: `get\/setTimeOffset` (but I think this might be to set the sample that playback starts from)\n* Moai: `get\/setPosition`\n* Unity: `time` and `timeSamples` variables\n\nI'm now thinking that `get\/setPlaybackPosition` may be best names for L\u00d6VE.\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nThat is not something I would like, I mean, I use one file with many sounds and use a combination of `source:tell`, `source:seek`, and `love.update(dt)` to see wich sound is playing.\n\nWriting tell\/seek is easy and not confusing at all, even if they don't match the other functions. \n\nAlso they are short, just 3 or 4 letters long, and you want to change it for a function with a name like `get\/setPlaybackPosition` that has almost 20 letters... That definetly doesn't match love standards and I wouldn't write a function that long\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\n> Writing tell\/seek is easy and not confusing at all, even if they don't match the other functions.\r\n\r\nIf audio recording (#6) is added to L\u00d6VE, what should a function which returns the current position\/offset of the recording in samples or seconds be called?\r\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nI guess that recording wont be handled with sources, but instead return a source that you can save or play, so I guess that the API for that would be external to the source API.\n\nWas that what you mean? I don't really see a relationship with that sorry\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nIt would return a SoundData.\r\n\r\nI mentioned it because it's functionality that achieves the exact same thing as `Source:tell` does right now, but for recording instead of playback. I don't really see any option other than naming it to something like `love.audio.getRecordPosition` or something similar, and renaming `Source:tell` and `Source:seek` to be consistent.\r\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nI'm guessing but you could use something like `source:length` to get the total length of the audio source. It could also be used for other things too\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nTo clarify, an audio recording API will probably not return a `Source`. It will likely have a way to get all currently recorded audio as a `SoundData`, but it should also have a function for telling you how long you've been recording for (or how much time or samples will be in the SoundData if you wanted it now), hence `love.audio.getRecordPosition` or similar.\r\n\r\nBasically something like this: http:\/\/docs.unity3d.com\/Documentation\/ScriptReference\/Microphone.GetPosition.html\r\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nSorry I didn't wrote that right. What I mean is that you are getting the whole length of the data, it's quite different to seek or tell, so a `source:length` would match that function in the recorder. \n\n`love.audio.recordedLength()` would match `source:length()` and they do the same thing. But not the same thing as `source:tell()` (Althought `source:tell()` would return the same as `source:length()` after the source finished playing, and that would be useful to know if the source has already finished)\n\nAlso I don't think that the recorder should be part of the audio module since they do different things but whatever\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\n> What I mean is that you are getting the whole length of the data\r\n\r\nBut you aren't, you're getting the duration you've been recording for. The API will likely have a fixed maximum recording duration you set when you start recording, which would be the whole length (or use `SoundData:getDuration`).\r\n\r\n> Also I don't think that the recorder should be part of the audio module since they do different things but whatever\r\n\r\nThey don't. love.audio only deals with audio output right now because audio input hasn't been added to L\u00d6VE at all yet, but it's all under the umbrella of interacting with audio hardware on the system (and the underlying libraries that L\u00d6VE uses - OpenAL in this case - works that way too.)\r\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nI don't like that implementation, I should be able to record indefinetly until I say stop, And `length` would return the length of the `SoundData` at that time or if used with a preexisting source, the whole length of the source\n\nIf i want to set the duration of the recording then I would do:\n\n\tif love.recorder.length() > duration then\n\t\tsourcedata = love.recorder.stop()\n\tend\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nSide note: `Source:length` would do the same as `Source:getDuration` but is shorter and can be easily understanded (`getDuration` can be easily understanded too).\n\nBut this doesn't matter, I just want to point out that `length\/getDuration` and `tell` do different things\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\n> I don't like that implementation, I should be able to record indefinetly until I say stop\r\n\r\nThere are some technical and performance reasons why the implementation I described is the most likely one.\r\n\r\n> If i want to set the duration of the recording then I would do:\r\n\r\nIn the likely implementation I'm describing, you can still stop the recording early like that.\r\n\r\nRegardless, that's very off-topic for the actual issue - and the code you posted still gives the duration you've been recording for, just like `Source:tell` gives the duration the source has been playing for.\r\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nThe duration of the recorder is the same as the duration of the whole `SourceData` that you have until that time, If you stopped recording just after you got the duration of the recording then the duration of the recording would be equal to the duration of the whole `SourceData`, and that differs from what `tell` does. \n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nThis are the functions I would love to have:\n`Source:seek()`\n`Source:tell()`\n`Source:length()`\n`love.recorder.setDuration()`\n`love.recorder.start()`\n`love.recorder.getLength()`\n`love.recorder.stop()`\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\n> The duration of the recorder is the same as the duration of the whole `SourceData` that you have until that time, If you stopped recording just after you got the duration of the recording then the duration of the recording would be equal to the duration of the whole `SourceData`, and that differs from what `tell` does.\r\n\r\nThere's no such thing as a `SourceData`, but disregarding that, you can flip it around and say the same thing about Sources (except they go in the other direction, from data into hardware instead of from hardware into data):\r\n\r\nThe value returned by `Source:tell` is the same as the duration of the whole buffer that you have until that time. If you stopped playback just after you call `Source:tell`, then the duration of the sound that played back would be equal to the duration of what was used to play the audio.\r\n\r\nAs an aside, `Source:getDuration` doesn't exist - mostly because (IIRC) it's not really possible to be completely accurate with it for streaming Sources.\r\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nGood points, but I think that `seek` and `tell` should stay like that, even if they are not consistant with the recorder API. Thanks for the explanation It made lots of sense\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nSince most of this discussion has focused on recording, let me deal with the other frameworks name instead:\n\n* offset: Yes, it's an offset, it wouldn't be the name I'd be looking for, though.\n* position: We already have source positions, and they have nothing to do with time. In case you're thinking of renaming get\/setPosition, they actually describe a physical position.\n* time: Possible, but getTime and setTime just feel awkward.\n* seek\/tell: Matches up with Files, seeking is something found in media players everywhere, tell, well, not so much, but is usually seen as the opposite.\n\nI'm not saying seek\/tell are perfect, but in my opinion they do qualify for the least bad.\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\n@bartbes I agree with your judgements of those names, hence why my last suggestion was `get\/setPlaybackPosition`. :)\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nThat's so verbose :(\r\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nOf all these suggestions I like playback position the most, but then you'd probably have to disambiguate get\/setPosition too.\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\n@slime73 I know. :( But, it's only one character more than `get\/setBackgroundColor`. :P\n\nI think the verbosity makes it more obvious what it does though: `Source:tell` vs. `Source:getPlaybackPosition`... I think with the latter it's easier to *tell* (tee hee) what's going on.\n\nAnd plus, other than seek\/tell in Files, I think this may be the *only* place in the API where clear getter\/setter functions aren't named `get\/setState`.\n\n@bartbes Maybe... Would the problem be that someone could mistake `set\/getPosition` for methods which change the playback position? There's nothing stopping this misunderstanding currently, but I guess if that person had read about `set\/getPlaybackPosition` they might be more prone to misremember. Disambiguation doesn't strike me as a huge concern, but they are similar names.\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nI think I've found a good name! Maybe.\n\n`Source:set\/getPlaybackProgress`\n\n(Also `Video:set\/getPlaybackProgress` too now.)\n\nJust to reiterate the points I still think are valid about this:\n\n* The naming of `seek\/tell` for Sources and Videos is *conspicuously* inconsistent with other functions in the API.\n* `seek` would be a fine name if it wasn't for this inconsistency, `tell` less so in my opinion.\n* I don't think the verbosity of `set\/getPlaybackProgress` is a problem considering other function names in the API and how often these functions would be used.\n","**Original comment by Mi 28 (Bitbucket: [rcoaxil](https:\/\/bitbucket.org\/rcoaxil), ).**\n\n----------------------------------------\n\nAs far as data string navigation goes, seek\/tell are the industry standard and are used in virutally every single existing framework and library that does this. Maybe there are better names (which have not been presented this far, none of them are good replacement), but these were around since DOS and are extremely ubiquitous, so even if you found a good replacement, changing them for any reason whould achieve nothing but confuse people. \n\nIt's as if you renamed shaders to \"pixel effects\". That will just accomplish nothing.\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nTo be clear, I'm not suggesting changing the seek\/tell data string navigation function names (i.e. the File object methods), only for Sources and Videos.\n","**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nI'm against that change for the simple reason that it's clear. If it's not, the wiki helps you out.\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\n@z0r8, I agree that `seek` is clear, I don't know if `tell` is but it is analogous to the File method.\n\nJust for the fun of discussion, I'll share some ideas I have on LOVE's naming which are relevant to this particular issue, all just my current opinion of course:\n\n* If the name is descriptive enough there may be less reliance on docs. I think it's useful if a function's name reads similarly to its description. (I could even imagine alternative docs where descriptions aren't always needed if the function is simple in purpose and its name is clear enough. Maybe!)\n\n* All else being equal, I prefer shorter names because they are easier to read and write and are cuter.\n\n* With consistency, in this case setters\/getters prefixed by \"set\/get\" (although LOVE also has boolean-returning getters prefixed \"is\" and \"has\"), you can get benefits which may be unintended. For example, see [this section](https:\/\/github.com\/vrld\/slam\/blob\/c19dccec4828218e4a8746acfaf5b5ecf44a40ee\/slam.lua#L121) of the SLAM library, and how it makes use of how the functions share prefixes. Also see this [API reference](http:\/\/love2d-community.github.io\/love-api\/#mouse) that I made, and how the function navigation is simplified by the shared prefixes.\n\n* Also, when setters and getters differ only by prefix you only have to remember one \"thing\", i.e. the name of the state which it relates to (\"playback progress\" in this case). If you ever see `setPlaybackProgress` in code or otherwise remember it, you can assume that `getPlaybackProgress` exists too.\n\n* I think that consistency is a sign of quality. Inconsistency is kind of like a spelling mistake, it may still be obvious what is meant, but it's not confidence inspiring.\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nNow I think I prefer `get\/setPlaybackPosition`, and renaming the listener functions to disambiguate `get\/setPosition` and also because I think they might be better names (maybe), i.e. `get\/setListenerPosition`, `get\/setListenerOrientation` and `get\/setListenerVelocity`.\n\nThe reason I think they might be better is that the playback functions (`love.audio.play` etc.) are named the same as Source methods and operate on Sources, whereas the listener functions are also named the same as Source methods but operate on the listener, i.e. there is no indication in their naming of what they operate on.\n\n(Not that the playback functions would make sense for the listener of course, but both Sources and the listener have positional state.)\n\nI would also suggest that the names are more self-descriptive, i.e. `setListenerPosition` \"sets the listener position\".\n\nI don't think `get\/setDistanceModel` and `get\/setDopplerScale` would need to be changed because I think that these are about the relationship between Sources and the listener, and neither would `get\/setVolume` because this is about the relationship between L\u00d6VE's audio world and the computer's audio system, to the best of my understanding.\n"],"labels":["change"]},{"title":"Fix callback naming","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/573) by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nWe should really find a better way of naming callbacks, just look at the joystick ones, the function names are getting long, and are hard to read. Related, why are they not camelCase?\n\nIdeas are welcome!\n","comments":["**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\n#508 was marked as a duplicate of this issue.\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nNon-camelCase names just... *feel* nicer to me... I like them even though they're inconsistent... and I freakin' love consistency. One logical-esque reason for them being lowercase is that they \"look\" different from non-callback functions. But maybe I'm just used to them. :D\n\nI really like how most L\u00d6VE functions aren't abbreviated, their meaning is obvious and you can read them nicely. I think `love.joystickpressed` would be a much nicer name than `love.joyp` or something. Also I think the format of callbacks are important for recognising them, so I also don't think something like `love.joystick.pressed` would be so great.\n\nThere could be a single `love.joystick` callback which is given an extra argument for whether a button was pressed or released, but I'd suggest that would end up with recreations of the two callbacks using an if-else.\n\n\t:::lua\n\tfunction love.joystick(joystick, button, pressed)\n\t\tif pressed then\n\t\t\t...\n\t\telse\n\t\t\t...\n\t\tend\n\tend\n\nThis is basically what `love.focus` does however. So, should `love.focus` be split into `love.focusreceived` and `love.focuslost`? (Wow, those names really are a case for camelCase. :P) **Edit:** Maybe some better names: `love.focuson` and `love.focusoff`. I think it depends on whether it would be inevitably be completely divided with an if-else, like input callbacks would be.\n\nJust to recap from #503, I currently think that `love.errhand(msg)` and `love.releaseerrhand(msg)` should be combined into `love.error(msg, release)` (or `love.errorhandler`, or something), with \"release\" being whether the game is in release mode or not.\n\nI assume that error handilng may have enough similarities in release mode and non-release mode to have the same function with an argument. Perhaps the error messages are the same, perhaps they prepare the error message the same but display it differently, etc.\n\nI also assume (and I'm not so sure of this), that checking for release mode is something that a lover would almost only want to do in the error callback. If checking for release mode is something which a lover would want to do elsewhere as well, then they would be checking the global variable `love._release`, and having this as an argument to the error callback would be redundant.\n\nSpeaking of arguments-to-callbacks-made-redundant-by-global-variables, perhaps the command-line arguments givent to `love.load` are a bit redundant and presumptuous because of the global variable `arg`? If there is already a global variable, what's the point of the argument, and why for `love.load`, perhaps I want command-line arguments to change the window dimensions in `conf.lua`, or to toggle debug info in `love.draw`. And if I only knew that it was an argument to `love.load`, I'd probably assume that it wasn't a global variable, and therefore be confused as to how to use it in `conf.lua`. Is the global variable `arg` documented by the way?\n\n*INHALE!*\n\n**So, in summary:**\n\n* Should `love.focus` be split into two functions?\n* I'm still thinking `love.(release)errhand` should be something like `love.error(msg, release)`.\n* Consider removing the `arg` argument from `love.load`.\n* I like lowercase callbacks for some reason. :P\n","**Original comment by Minh Ngo (Bitbucket: [mngo](https:\/\/bitbucket.org\/mngo), GitHub: [mngo](https:\/\/github.com\/mngo)).**\n\n----------------------------------------\n\nI think adding camel cases to the callbacks would be consistent with the rest of the API. Everything else has function names with camel cases! Although keeping the names lowercase would imply that they're callbacks. \n\nI'm opposed to shortening names and would rather keep as much complete words as possible. I like that the devs changed the event names to full words as well. Function name shortening should be left to the individual like the popular lg = love.graphics.\n\nWith regards to `love.errhand` and `love.releaseerrhand`, I agree that they should be combined into one function like `love.errorhandler(msg,release)` with release as a boolean.\n\nWith regards to all the joystick callbacks added (love.joystickaxismoved, love.joystickballmoved, and love.joystickhatmoved), I think they should all be combined into `love.joystickinputted(joystick,type,...)`. The `...` are additional parameters according to the `type` string (button,hat,axis,ball).\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nPerhaps event callbacks could have an \"on\" prefix, and reside in their respective modules, e.g. `love.joystick.onPress`, `love.graphics.onFocus`, etc. (past-tense works as well).\r\n\r\nI'm not sure how `love.load`\/`love.update`\/`love.draw` would fit into that new scheme though, and it still has potential for some awkward names (`love.joystick.onAxis`? `love.joystick.onAxisMoved`?)\r\n\r\nIt might also present a problem if the modules aren't loaded when the callback functions are declared (confusing errors! yay!)\r\n","**Original comment by Robin Wellner (Bitbucket: [gvx](https:\/\/bitbucket.org\/gvx), GitHub: [gvx](https:\/\/github.com\/gvx)).**\n\n----------------------------------------\n\nI disagree on the `love.errorhandler(msg, release)`, because `errhand` and `releaseerrhand` have radically different purposes, even though they are called in similar situations:\n\n`errhand` has the purpose of delivering debugging information as fast as possible to either the lover who made the game or a playtester (who is often a lover as well).\n\n`releaseerrhand` has the purpose to explain *something* (not *what*) went wrong, and who to contact so it'll get fixed. They might see some debug information as well, but they're not expected to understand it or do anything with it except pass it on to the lover who made the game.\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nIn practice, the two end up being pretty much identical in most cases. It usually makes much more sense for game creators to have the error message and traceback displayed to end users than to omit them.\r\n","**Original comment by Landon \u201cKarai\u201d Manning (Bitbucket: [karai17](https:\/\/bitbucket.org\/karai17), GitHub: [karai17](https:\/\/github.com\/karai17)).**\r\n\r\n----------------------------------------\r\n\r\nAfter discussing this with Sasha on IRC, I think we both agree on the following convention:\r\n```\r\n#!lua\r\n-- Run cycle, not \"events\" per se\r\nlove.load\r\nlove.draw\r\nlove.update\r\n\r\n-- System events\t\r\nlove.onFocus\r\nlove.onJoystickPressed\r\nlove.onJoystickReleased\r\nlove.onKeyPressed\r\nlove.onKeyReleased\r\nlove.onMousePressed\r\nlove.onMouseReleased\r\nlove.onQuit\r\n```\r\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nYeah, although I think whatever happens, the callbacks should have consistent tenses. If we have `love.onFocus` then we should have `love.onJoystickPress` rather than `love.onJoystickPressed`.\r\n","**Original comment by Landon \u201cKarai\u201d Manning (Bitbucket: [karai17](https:\/\/bitbucket.org\/karai17), GitHub: [karai17](https:\/\/github.com\/karai17)).**\n\n----------------------------------------\n\nThat's a fair point, too.\n","**Original comment by Minh Ngo (Bitbucket: [mngo](https:\/\/bitbucket.org\/mngo), GitHub: [mngo](https:\/\/github.com\/mngo)).**\n\n----------------------------------------\n\nI agree with karai17\n","**Original comment by Landon \u201cKarai\u201d Manning (Bitbucket: [karai17](https:\/\/bitbucket.org\/karai17), GitHub: [karai17](https:\/\/github.com\/karai17)).**\n\n----------------------------------------\n\nMy vote is for present tense, not past tense.\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\n`love.onFocus` wouldn't really be *on* focus though... it would be more like \"on change of focus\", right? `love.onFocusRecieved` and `love.onFocusLost` could resolve this.\n\nWould the event names also change to have the \"on\" prefix?\n\nWhat about `love.joystickaxis` etc.? `love.onJoystickAxisMoved` I guess? In this case, it isn't really necessarily a more readable name though.\n\nRegarding combining the error callbacks, even though they have different purposes, do they have that much different code in them? A lot of the default error handlers seem to be copy and pasted from one to the other.\n\nBut, I'm not sure if release mode is actually an elegant way to change the error message and save directory (#579).\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nHere's what I'm thinking currently:\n\n* Callbacks should be easily distinguishable from other functions. Simply not having them in modules achieves this.\n\n* I don't think it's necessary to differentiate the system events from the run cycle events by name. I'm not such a fan of the \"on\" prefix.\n\n* Having camelCase and present tense is pretty cool. It's consistent, after all.\n\n* I don't think there is another name which makes as much sense for the error function as `love.error`. After all, you can say \"The love.*x* callback handles the \"*x*\" event\" meaningfully for everything else.\n\nWhat do people think of these?\n\n\n```\n#!lua\n\nlove.load\nlove.draw\nlove.update\nlove.quit\nlove.error\nlove.windowFocus\nlove.windowBlur\nlove.windowMouseOn\nlove.windowMouseOff\nlove.windowResize\nlove.joystickPress\nlove.joystickRelease\nlove.joystickHat\nlove.joystickAxis\nlove.keyPress\nlove.keyRelease\nlove.mousePress\nlove.mouseRelease\n```\n","**Original comment by Minh Ngo (Bitbucket: [mngo](https:\/\/bitbucket.org\/mngo), GitHub: [mngo](https:\/\/github.com\/mngo)).**\n\n----------------------------------------\n\nThinking about it again, the current naming convention is fine as it makes functions stand out as overridable. I'd be pretty OK with adding present tense, but adding \"on\" would make it superfluous\n","**Original comment by Anders Ruud (Bitbucket: [rude](https:\/\/bitbucket.org\/rude), GitHub: [rude](https:\/\/github.com\/rude)).**\r\n\r\n----------------------------------------\r\n\r\nA tense-consistent version of karai17's is a pretty good suggestion. However, what looks more correct than anything else is something like what slime (sometimes incorrectly referred to as \"Sasha\") suggested:\r\n\r\n```\r\n#!lua\r\n-- Non-events. Thus no \"on\" prefix. We are not\r\n-- notifying the game about something which happened,\r\n-- we are demanding that something takes place.\r\nlove.load\r\nlove.draw\r\nlove.update\r\n\r\n-- Events\r\nlove.window.onFocusReceived\r\nlove.joystick.onJoystickPressed\r\nlove.joystick.onJoystickReleased\r\n\r\n-- \"Key\" and \"Button\" could potentially be dropped.\r\nlove.keyboard.onKeyPressed\r\nlove.keyboard.onKeyReleased\r\nlove.mouse.onButtonPressed\r\nlove.mouse.onButtonReleased\r\n\r\nlove.window.onClosed -- Alternative to onQuit?\r\n\r\n```\r\nAs you can see I would argue for a past tense version, because in most cases at least, the thing which we are describing has already happened.\r\n\r\nThe only \"problem\" is that this would establish a new pattern of operation (POO) in L\u00d6VE: the events originate from love.event, but are forwarded to special user-defined functions residing in the tables of other modules, presumably by love.run. I *think* this is OK. It's certainly not that much worse than forwarding to love.whatevereventtookplace.\r\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nIs the quit event dependent on the window module? If not, perhaps it shouldn't be in that module, lest someone want to do something on exit but not load the window module.\n\nAlso, I'm wondering where the error callback would go? **Edit:** And what would it be called? I guess `onErrored` would be consistent, although it's not so pleasant grammatically.\n","**Original comment by Landon \u201cKarai\u201d Manning (Bitbucket: [karai17](https:\/\/bitbucket.org\/karai17), GitHub: [karai17](https:\/\/github.com\/karai17)).**\n\n----------------------------------------\n\n@rude the only problem with the way you have set up, and I think slime mentioned this at some point, is if you write code for all modules (keyboard, joystick, etc) but dynamically load them, then your code will crash (wtf is love.joystick? BSOL) unless love.joystick is loaded. This disallows slimming of unneeded modules, or pre-writing code.\n\nOn the other hand, if we leave them all as events, then we can code them up and dynamically use them when needed.\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nThere might be some xtreme metatable fudgery that could be done to make it not error if a callback function is written for a module that isn't loaded, but... I don't think I want that kind of *really hackish* behaviour. :p\r\n","**Original comment by Landon \u201cKarai\u201d Manning (Bitbucket: [karai17](https:\/\/bitbucket.org\/karai17), GitHub: [karai17](https:\/\/github.com\/karai17)).**\n\n----------------------------------------\n\nWell, if these are all events, why not just leave them in love.event and maybe add an alias to them from the other modules for semantic purposes?\n\nlove.joystick.onPressed = love.event.onButtonPressed\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nI'm unsure about the benefit of having callbacks in modules. I guess there's \"disabling a module also disables the callback\", but, like, I don't think anyone will disable the joystick module and then wonder why joystick callbacks aren't being called. :P\n\nIt's more verbose, which makes it harder and take more time to read, contrast `love.keyboard.onKeyPressed` with `love.keyPressed`.\n\nI also think it makes the distinction between callbacks and functions-that-you-call less visually and conceptually clear.\n\nCurrently it's \"Functions which start with `love.` are callbacks and functions which start with `love.module.` are functions you call\".\n\nIf the callbacks were in modules, it would be \"Functions which start with \"on\" are callbacks, as well as `love.run` which also calls `love.load` and `love.update` and `love.draw`, and functions in modules not starting with \"on\" are functions you call\".\n","**Original comment by Anders Ruud (Bitbucket: [rude](https:\/\/bitbucket.org\/rude), GitHub: [rude](https:\/\/github.com\/rude)).**\n\n----------------------------------------\n\nYeah, I'm not sure I like the in-module callbacks myself when I actually have to use them in code.\n\n```\n#!lua\n\nfunction love.keyboard.onKeyPressed(key)\n\t-- Stuff.\nend\n```\n\nMeh.\n\nIf not in the modules, then I also suggest this:\n\n```\n#!lua\n\n-- Present tense, because these (non-)events are taking\n-- place *now*.\n\nlove.load\nlove.draw\nlove.update\nlove.quit\nlove.err\n\n-- Past tense, because these events already happened.\n\nlove.keyPressed\nlove.keyReleased\nlove.mousePressed\nlove.mouseReleased\nlove.windowFocused\nlove.windowBlurred\nlove.windowResized\nlove.joystickPressed\nlove.joystickReleased\nlove.joystickAxisMoved\nlove.joystickHatWTFed -- Because WTF is a joystick hat.\n-- etc\n\n```\n\nSo in general ``love.nounVerbed`` for events which already happened.\n\nI actually wanted an \"on\" prefix on the callbacks:\n\n```\n#!lua\n\nlove.onKeyPressed\nlove.onKeyReleased\n-- etc\n```\n\nBut then it would also \"require\" a prefix for ``load``, ``update`` and ``draw``, for consistency:\n\n```\n#!lua\n\nfunction love.onLoad()\nend\n\nfunction love.onUpdate()\nend\n\nfunction love.onDraw()\nend\n```\n\nAnd that is clearly much uglier than the \"trademark\":\n\n```\n#!lua\n\nfunction love.load()\nend\n\nfunction love.update()\nend\n\nfunction love.draw()\nend\n```\n","**Original comment by Landon \u201cKarai\u201d Manning (Bitbucket: [karai17](https:\/\/bitbucket.org\/karai17), GitHub: [karai17](https:\/\/github.com\/karai17)).**\n\n----------------------------------------\n\nDifferentiating between events and non events could allow for some leeway in naming, no? Since load\/update\/draw aren't events, they are things that just happen, it could be read \"this is happening, do it now\", but with events, \"on\" is appropriate because it can be read \"WHEN this happens, do this\".\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nHmm, but 'onPoop' also kind of maybe suggests it registers something to happen when a poop occurs, not that it is the thing called when that happens. Like: love, on Poop, do this. Yet it's not a command, it's something you create, which is.. weird.\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nPfft, just go the Cocoa route: \r\n\r\n`love.windowDidBecomeVisible`\r\n\r\nI kid, I kid... :P\r\n","**Original comment by Anders Ruud (Bitbucket: [rude](https:\/\/bitbucket.org\/rude), GitHub: [rude](https:\/\/github.com\/rude)).**\n\n----------------------------------------\n\nkarai17: I thought so at first too, but then I discovered that it's perfectly logical to prefix \"on\" for ``load``, ``update``, ``draw``, ``error`` and ``quit`` (``LUDEQ``) too. The fact that they are taking place *now* does not really free them from having a prefix if the other callbacks have it, it only allows us to use the present tense on those names, so we would not need ``onUpdated``, but we would need ``onUpdate``, in my opinion.\n\nAt least to me ``onUpdate`` looks perfectly *correct* (in principle), and suggests that something else should happen while an update is happening.\n\nBut I don't like how ``onLUDEQ`` looks in the code, and I don't think anyone else does either.\n","**Original comment by Landon \u201cKarai\u201d Manning (Bitbucket: [karai17](https:\/\/bitbucket.org\/karai17), GitHub: [karai17](https:\/\/github.com\/karai17)).**\n\n----------------------------------------\n\nYeah I'm honestly just trying to rationalize it away since onLUDEQ is ugly (though technically correct). I'm not really sure what the best course of action is at this point but I think we all agree that onLUDEQ is a no-go, on onEvent is still desirable as an outcome of this discussion.\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nI think `love.verb`\\* for LUDTEQ\\*\\* and `love.nounVerbed` for all else might be quite nice.\n\nHowever, are `error` and `quit` actually happening now, or have they already happened and now they're being handled?\n\n\\* \"error\" is totally a verb now.\n\n\n\\*\\* Including \"threadError\".\n\n\n```\n#!lua\n\nlove.load\nlove.update\nlove.draw\nlove.error\nlove.threadError\nlove.quit\nlove.gamepadAxisMoved\nlove.gamepadPressed\nlove.gamepadReleased\nlove.joystickAxisMoved\nlove.joystickHatMoved\nlove.joystickPressed\nlove.joystickReleased\nlove.joystickAdded\nlove.joystickRemoved\nlove.keyPressed\nlove.keyReleased\nlove.mousePressed\nlove.mouseReleased\nlove.textEdited\nlove.textInputted\nlove.windowFocusGained\nlove.windowFocusLost\nlove.windowMouseFocusGained\nlove.windowMouseFocusLost\nlove.windowResized\nlove.windowVisibilityGained\nlove.windowVisibilityLost\n```\n\n(`love.windowVisibilityGained` is exactly the same length as `love.windowDidBecomeVisible`. :D)\n\nAnd here are some names which make *no sense.* Which I kind of like.\n\n\n```\n#!lua\n\nlove.load\nlove.update\nlove.draw\nlove.error\nlove.threadError\nlove.quit\nlove.gamepadAxis\nlove.gamepadDown\nlove.gamepadUp\nlove.joystickAxis\nlove.joystickHat\nlove.joystickDown\nlove.joystickUp\nlove.joystickAdded\nlove.joystickRemoved\nlove.keyDown\nlove.keyUp\nlove.mouseDown\nlove.mouseUp\nlove.textEdit\nlove.textInput\nlove.focus\nlove.unfocus\nlove.mouseOver\nlove.mouseOff\nlove.resize\nlove.visible\nlove.invisible\n```\n","**Original comment by Landon \u201cKarai\u201d Manning (Bitbucket: [karai17](https:\/\/bitbucket.org\/karai17), GitHub: [karai17](https:\/\/github.com\/karai17)).**\n\n----------------------------------------\n\nI'll verb YOUR noun. ;)\n\nlove.textInputted and love.textEdited seem a bit of a stretch, but the rest of them read well enough.\n","**Original comment by Anders Ruud (Bitbucket: [rude](https:\/\/bitbucket.org\/rude), GitHub: [rude](https:\/\/github.com\/rude)).**\n\n----------------------------------------\n\nlove.textEdited seems OK, but love.textInputted sounds quite bad to me.\n\n\"Inputted\" and \"input\" are both valid past tense forms, so perhaps we should use love.textInput instead.\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\n> However, are `error` and `quit` actually happening now, or have they already happened and now they're being handled?\r\n\r\n`quit` is triggered after the game has been requested to quit (either via `love.event.quit()` or the user pressing the close button on the window.) `error` is triggered after an error occurs.\r\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nWould it be consistent for `error` and `threadError` to be `errored` and `threadErrored` then? (I think `quit` can be past tense too.)\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nHow about this?\n\n\n```\n#!lua\n\nlove.[ time to ]load\nlove.[ time to ]update\nlove.[ time to ]draw\n\nlove.[ program has ]errored\nlove.thread[ has ]Errored\nlove.[ program was ]quit\n\nlove.gamepadAxis[ was ]Moved\nlove.gamepadButton[ was ]Pressed\nlove.gamepadButton[ was ]Released\nlove.joystickAxis[ was ]Moved\nlove.joystickHat[ was ]Moved\nlove.joystickButton[ was ]Pressed\nlove.joystickButton[ was ]Released\nlove.joystick[ was ]Added\nlove.joystick[ was ]Removed\nlove.key[ was ]Pressed\nlove.key[ was ]Released\nlove.mouse[ was ]Pressed\nlove.mouse[ was ]Released\nlove.text[ was ]Edited\nlove.text[ was ]Input\nlove.windowFocus[ was ]Gained\nlove.windowFocus[ was ]Lost\nlove.windowMouseFocus[ was ]Gained\nlove.windowMouseFocus[ was ]Lost\nlove.window[ was ]Resized\nlove.windowVisibility[ was ]Gained\nlove.windowVisibility[ was ]Lost\n```\n\nThe `Button` in `joystickButtonPressed` etc. might not be necessary... does `joystickPressed` make sense? Does `mousePressed` make sense?\n\nAlso these names assume that \"mouse focus\" is a thing, via `hasMouseFocus`.\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nWhen love.quit runs the program hasn't quit yet.\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nTrue! So, `love.[ time to ]quit[ maybe ]`. :D\n","**Original comment by Robert M. (Bitbucket: [rmcode](https:\/\/bitbucket.org\/rmcode), GitHub: [rmcode](https:\/\/github.com\/rmcode)).**\n\n----------------------------------------\n\nIn my humble opinion it is more important to choose meaningful names, rather than forcing some convention on them.\n\nTherefore my suggestion looks like this (if I had to choose, I'd go for camel casing btw.):\n\n```\n#!lua\n\n-- Do something 'on' occurence of the callback\n-- load, draw and update would also work nice w\/o the 'on' prefix\nonLoad\nonDraw\nonUpdate\n\nonErr\nonQuit\nonResize\n\n-- Apply the same pattern to joystick callbacks\nonKeyPressed\nonKeyReleased\nonMousePressed\nonMouseReleased\n\n-- Ask l\u00f6ve if it 'has focus' or 'is visible'\nhasMouseFocus\nhasFocus\nisVisible\n\n-- 'get' user's textinput\ngetInput\n```\n\nThat's what would make the most sense to _me_. \n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nExcept callbacks are *never* questions, so your `has` and `get` don't make sense.\n","**Original comment by Robert M. (Bitbucket: [rmcode](https:\/\/bitbucket.org\/rmcode), GitHub: [rmcode](https:\/\/github.com\/rmcode)).**\n\n----------------------------------------\n\nI know that they aren't questions, it's just how I read them when going over my code - but I see how that may be strange to other people.\n\nIf I had to vote, I'd go for hahawoo's suggestion then.\n","**Original comment by Matt Millwood (Bitbucket: [Aesthete](https:\/\/bitbucket.org\/Aesthete), GitHub: [Aesthete](https:\/\/github.com\/Aesthete)).**\r\n\r\n----------------------------------------\r\n\r\nI would have to say I find using `on` before actions to be most natural. The tense can really depend on what you're describing, and as rmcode mentioned, it's more important to choose meaningful names. The ultimate goal is to be as explicit as possible for the end user.\r\n\r\nI agree with on the format Landon and Sasha spoke about previously:\r\n\r\n\r\n```\r\n#!lua\r\n\r\nlove.onFocus\r\nlove.onJoystickPressed\r\nlove.onJoystickReleased\r\nlove.onKeyPressed\r\nlove.onKeyReleased\r\nlove.onMousePressed\r\nlove.onMouseReleased\r\nlove.onQuit\r\n```\r\n\r\nWith the following suggestions:\r\n\r\n- `onFocus` should be either `onFocusGained` or `onFocusLost`.\r\n- `onQuit` could possibly be `onQuitRequested` assuming the game hasn't quit yet, and the application is still running.\r\n\r\nAnother thing that irks me about keypress formats is anything with `pressed` in it. There is always confusion between implementations on what this actually means. It can be interpreted as meaning \"The key went down and it then went up\", or of course it can just mean \"the key is down\". In past experience I have found the following to be more expressive of the actual action:\r\n\r\n\r\n```\r\n#!lua\r\n\r\n-- A key went down\r\nonKeyDown\r\n-- A key went up.\r\nonKeyUp\r\n```\r\n\r\nIf a user wants to go ahead and write an `onKeyPressed` function that manages various key states, so be it.\r\n","**Original comment by Landon \u201cKarai\u201d Manning (Bitbucket: [karai17](https:\/\/bitbucket.org\/karai17), GitHub: [karai17](https:\/\/github.com\/karai17)).**\n\n----------------------------------------\n\nlove.focus is a change in focus, not a specific focus. It passes in a bool\nto determine if focus is gained or lost.\n\n```lua\nfunction love.focus(f)\n    if f then\n        print(\"Focus gained!\")\n    else\n        print(\"Focus lost!\")\n    end\nend\n```\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\n`focuschanged` \/ `onFocusChanged` \/ whatever would probably be a better name than just `focus` \/ `onFocus`.\r\n","**Original comment by Matt Millwood (Bitbucket: [Aesthete](https:\/\/bitbucket.org\/Aesthete), GitHub: [Aesthete](https:\/\/github.com\/Aesthete)).**\n\n----------------------------------------\n\nRight, well then `onFocusChanged`, or something similar makes more sense to me, making it explicit about when it's being called. `focus` sounds like _I_ should be calling it.\n\nEither that or just make two functions for focus gained and lost.\n","**Original comment by Anonymous.**\r\n\r\n----------------------------------------\r\n\r\nim all for camelCase. think because it will make it easier, in the long run. ive only just started with LOVE, but things like the keypressed etc can be a bit confusing.\r\n\r\ncompletely agree with the landon and sasha\r\n\r\n\r\n```\r\n#!lua\r\n\r\nlove.onFocus\r\nlove.onJoystickPressed\r\nlove.onJoystickReleased\r\nlove.onKeyPressed\r\nlove.onKeyReleased\r\nlove.onMousePressed\r\nlove.onMouseReleased\r\nlove.onQuit\r\n```\r\n\r\n\r\nthat to me is what it should be.\r\n\r\nanyhow, just wanted to share what i feel would be better from a guy just coming to the language. it does make it easier to read as well\r\n","**Original comment by OttoRobba (Bitbucket: [OttoRobba](https:\/\/bitbucket.org\/OttoRobba), ).**\n\n----------------------------------------\n\n### prepositionCallback ###\nI believe this is a bad idea for a couple of reasons:\n\n1 - In some cases, it is nonsensical. Like Landon points out, the focus callback is *not* used on focus, but rather to function depending on *where* focus is.\n\n2 - If pretty much every callback ends up using \"on\", then is it really needed? It just becomes a bit of noise.\nReminds me of the Python talk about the evolution of the language and how 'xrange' is that much uglier than 'range' simply because of one character.\n\n-------\n### is, has, get ###\nUsing 'is', 'has' and 'get' for callback is another issue:\n\n1 - I would say it is bad practice to have a love.isVisible callback for the simple fact that the expect return would be a boolean (either it is or it isn't). Same problem with 'has'.\n\n```\n#!lua\n\nif isVisible() then doSomething() end --read this out loud\n\nfunction love.isVisible(w) --now try reading this\n  if w then doSomething() end\nend\n```\n\n2 - Using 'get' means you are merely expecting it to return something and makes no sense in a callback. image:getWidth makes sense, love.windowGetVisibility doesn't.\n```\n#!lua\n\nw = image:getWidth --this looks fine\nfunction love.windowGetVisibility()\n    --I don't even...\nend\n\n```\n--------\n\nI honestly believe that code convention is extremely important (when sensible) because it decreases the learning curve. So creating a rule like love.verb and love.nounVerb using past tense is very sane. Basically, what hahawoo and rude suggested.\n\nFor reference on a very clean API, there is always [Processing](http:\/\/processing.org\/reference\/) - which, again, is pretty much what hahawoo suggested.\n","**Original comment by Matt Millwood (Bitbucket: [Aesthete](https:\/\/bitbucket.org\/Aesthete), GitHub: [Aesthete](https:\/\/github.com\/Aesthete)).**\n\n----------------------------------------\n\nThe purpose of having `on` isn't to differentiate the callbacks from one another, it's to differentiate them from _other functions._\n\nIt's to make it obvious that `onFocusChanged` is a callback, whereas `focus` would appear to be called to invoke some sort of focus functionality. I can immediately tell what's going to be called for me, and what I need to call.\n\nUsing `is`, `has`, or `get` before the callback name is a terrible idea, for the reasons mentioned.above, and I totally agree with that.\n","**Original comment by Landon \u201cKarai\u201d Manning (Bitbucket: [karai17](https:\/\/bitbucket.org\/karai17), GitHub: [karai17](https:\/\/github.com\/karai17)).**\n\n----------------------------------------\n\nMy latest proposition:\n\n```lua\nlove.load\nlove.update\nlove.draw\nlove.quit\n\nlove.onError\nlove.onThreadError\n\nlove.onGamepadAxisMoved\nlove.onGamepadButtonDown\nlove.onGamepadButtonUp\n\nlove.onJoystickAxisMoved\nlove.onJoystickHatMoved\nlove.onJoystickButtonDown\nlove.onJoystickButtonUp\nlove.onJoystickAdded\nlove.onJoystickRemoved\n\nlove.onKeyDown\nlove.onKeyUp\n\nlove.onMouseDown\nlove.onMouseUp\n\nlove.onTextEdited\nlove.onTextInput\n\nlove.onWindowFocusGained\nlove.onWindowFocusLost\nlove.onWindowMouseFocusGained\nlove.onWindowMouseFocusLost\nlove.onWindowResized\nlove.onWindowVisibilityGained\nlove.onWindowVisibilityLost\n```\n","**Original comment by OttoRobba (Bitbucket: [OttoRobba](https:\/\/bitbucket.org\/OttoRobba), ).**\n\n----------------------------------------\n\n@Aesthete True, focus vs onFocusChange makes sense.\n\n@karai17 Seems pretty good for the most part.\n\nThis seems rather verbose and a bit hard to read:\n\n```\n#!lua\n\nlove.onWindowFocusGained\nlove.onWindowFocusLost\nlove.onWindowMouseFocusGained\nlove.onWindowMouseFocusLost\nlove.onWindowResized\nlove.onWindowVisibilityGained\nlove.onWindowVisibilityLost\n```\n\nHow about:\n```\n#!lua\n\n\nlove.onFocusChanged\nlove.onMouseFocusChanged\nlove.onWindowResized\nlove.onVisibilityChanged\n```\n","**Original comment by Landon \u201cKarai\u201d Manning (Bitbucket: [karai17](https:\/\/bitbucket.org\/karai17), GitHub: [karai17](https:\/\/github.com\/karai17)).**\n\n----------------------------------------\n\nmuch better.\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nJust reiterating here, but in regards to focus, mouse focus and visibility changes being 1 function or 2, having them as 1 function leads to this:\n\n\n```\n#!lua\n\nlove.change(b)\n    if b then\n        ...\n    else\n        ...\n    end\nend\n```\n\n\nrather than this:\n\n\n```\n#!lua\n\nlove.on()\n    ...\nend\n\nlove.off()\n    ...\nend\n```\n\n\nand I'd say the latter is nicer (especially, perhaps, if only one of the on\/off functions is needed).\n\nIn regards to differentiating callbacks from other functions, I'd say they're already differentiated enough by being `love.function` instead of `love.module.function`, and I'd assume they wouldn't often be confused in practice.\n\nBut `love.getVersion` exists so I can't really say that. ;)\n\nAnd since I think they're already differentiated, I'd say the \"on\" prefix is a bit noisy.\n\nAnd as Rude mentioned, the `onLUDEQ` names are consistent with the `onEverythingElse` names, e.g. if there is `onKeyPressed`, it's consistent to have `onUpdate`.\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\n> And as Rude mentioned, the `onLUDEQ` names are consistent with the `onEverythingElse` names, e.g. if there is `onKeyPressed`, it's consistent to have onUpdate.\r\n\r\n`love.update`, `love.draw`, and `love.load` are different from the rest because they are more \"this draws things\" than \"this gets called when things are drawn\" (\/ updated \/ loaded).\r\n\r\n`love.quit` is triggered when the user wants the game to quit though, so it might be better named `love.onQuitRequested` or similar, although that's a bit wordy.\r\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nThey are indeed different in that way, but this is how I'm thinking about it:\n\n> I thought so at first too, but then I discovered that it's perfectly logical to prefix \"on\" for load, update, draw, error and quit (LUDEQ) too. The fact that they are taking place now does not really free them from having a prefix if the other callbacks have it, it only allows us to use the present tense on those names, so we would not need onUpdated, but we would need onUpdate, in my opinion.\n\n> At least to me onUpdate looks perfectly correct (in principle), and suggests that something else should happen while an update is happening.\n\n> But I don't like how onLUDEQ looks in the code, and I don't think anyone else does either.\n","**Original comment by OttoRobba (Bitbucket: [OttoRobba](https:\/\/bitbucket.org\/OttoRobba), ).**\n\n----------------------------------------\n\nI think part of the problem and the noise is that we are looking at the names as one big list. So, for the sake of comparison:\n```\n#!lua\n\nlove.onQuitRequested = function()\nend\n\nlove.onError = function()\nend\n\nlove.onThreadError = function()\nend\n\nlove.onKeyPressed = function(key)\nend\n\nlove.onKeyReleased = function(key)\nend\n\nlove.onFocusGained  = function()\n unpauseGame()\nend\n\nlove.onFocusLost  = function()\n  pauseGame()\nend\n```\n\n```\n#!lua\n\nlove.quitRequested = function()\nend\n\nlove.error = function()\nend\n\nlove.threadError = function()\nend\n\nlove.keyPressed = function(key)\nend\n\nlove.keyReleased = function(key)\nend\n\nlove.focusGained  = function()\n unpauseGame()\nend\n\nlove.focusLost  = function()\n  pauseGame()\nend\n```\n\nI honestly don't know anymore - 'on' makes sense but it just seems uglier.\n","**Original comment by Pablo Mayobre (Bitbucket: [PabloMayobre](https:\/\/bitbucket.org\/PabloMayobre), GitHub: [PabloMayobre](https:\/\/github.com\/PabloMayobre)).**\n\n----------------------------------------\n\nI hate writing the same thing many times... writing \"on\" in every single callback would be a pain.\n\nExcept for the Joystick callbacks I like the rest of them just as they are, they are easily understood. Keypressed is really easier to read and understand that onKeyPressed. I think of callbacks like \"When a key has been pressed do this\" so onKeyPressed doesn't fit in there. \n\nJust my thoughts\n","**Original comment by Stevie Hryciw (Bitbucket: [hryx](https:\/\/bitbucket.org\/hryx), GitHub: [hryx](https:\/\/github.com\/hryx)).**\n\n----------------------------------------\n\nI like the `onX` naming since it makes it easy to identify a function as a callback.\n\nAdditionally, the camel case makes it obvious they are functions. I used to have a hard time telling if e.g. `love.keyboard` was a callback or a main L\u00d6VE module.\n\n> I hate writing the same thing many times... writing \"on\" in every single callback would be a pain.\n\nMost functions are already verb-prefixed to make them clear: `newFont()`, `getDimensions()`, `setLineWidth()`, and so on. Arguably, people will be writing `on` far less than any of these -- callbacks are only defined once.\n\n> love.update, love.draw, and love.load are different from the rest because they are more \"this draws things\" than \"this gets called when things are drawn\" (\/ updated \/ loaded).\n\nMaybe, but does the user need to know that?\n\nFinally note regarding ugliness: I'm fond of tiny, all-lowercase naming, but L\u00d6VE is leaning toward consistency, hence my above comments.\n","**Original comment by David Serrano (Bitbucket: [Bobbyjones](https:\/\/bitbucket.org\/Bobbyjones), GitHub: [Bobbyjones](https:\/\/github.com\/Bobbyjones)).**\n\n----------------------------------------\n\nUsing on to identify callbacks would actually be neat and possibly increase the understandability of code for noobs\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\nI'm putting this on hold for two reasons. We can't agree on anything, and, in the 3 years since this issue has been open, I've heard no complaints, and have only ever seen one library that changes the callbacks (and it primarily changed the handling of them, not the names).\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nCan `love.errhand` be renamed in the meantime? I think\/hope everyone agrees with that.\n\nAnd everything could change to camelCase too, because everyone seems to like that. I know it would be lame to change everything to camelCase and then later (maybe) change the names of everything again, but, camelCase callbacks might still be nice in the meantime... (and isn't breaking things due to name changes a minor release tradition?)\n","**Original comment by Sasha Szpakowski (Bitbucket: [slime73](https:\/\/bitbucket.org\/slime73), GitHub: [slime73](https:\/\/github.com\/slime73)).**\r\n\r\n----------------------------------------\r\n\r\nRename love.errhand to love.errorhandler (see #578).\r\n\r\nlove.errhand will still be called if love.errorhandler doesn't exist, and love defines love.errhand by default rather than love.errorhandler, to prevent hard-to-diagnose problems with existing code that defines love.errhand.\r\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nI don't have strong opinions on this, but if someone where to ask me \"what do you think the callbacks should be named today?\", I might say, before I completely change my mind tomorrow...\n\n* Present tense verbs because they're shorter and can be consistent.\n* Or sometimes verbless (e.g. `mouseWheel`) because it's shorter and sometimes verbs could be awkward (e.g. whatever `love.joystickhat` would be).\n* \"Down\" and \"Up\" instead of \"Press\" and \"Release\" because they're shorter.\n* Splitting single-boolean-argument callbacks and giving them \"On\" and \"Off\" suffixes.\n* Reluctantly \"errorHandler\" instead of just \"error\" because if L\u00d6VE were to have its own error generating function \"love.error\" might be a reasonable name. And maybe \"threadErrorHandler\" for consistency with \"errorHandler\".\n\n```lua\nlove.load\nlove.draw\nlove.update\nlove.quit\nlove.keyDown\nlove.keyUp\nlove.textEdit\nlove.textInput\nlove.mouseDown\nlove.mouseUp\nlove.mouseMove\nlove.mouseWheel\nlove.touchMove\nlove.touchDown\nlove.touchUp\nlove.joystickDown\nlove.joystickUp\nlove.joystickAxis\nlove.joystickHat\nlove.joystickAdd\nlove.joystickRemove\nlove.gamepadDown\nlove.gamepadUp\nlove.gamepadAxis\nlove.resize\nlove.visibleOn\nlove.visibleOff\nlove.focusOn\nlove.focusOff\nlove.mouseFocusOn\nlove.mouseFocusOff\nlove.fileDrop\nlove.directoryDrop\nlove.errorHandler\nlove.threadErrorHandler\nlove.lowMemory\n```\n\nAnother idea which I don't think was mentioned (probably because it is bad) is that there could be callback \"module\" or namespace called \"on\", i.e. `love.on.keypressed`, `love.on.quit`, etc. I guess `love.handlers` is almost this already.\n","**Original comment by Andrew McWatters (Bitbucket: [andrewmcwatters](https:\/\/bitbucket.org\/andrewmcwatters), GitHub: [andrewmcwatters](https:\/\/github.com\/andrewmcwatters)).**\n\n----------------------------------------\n\nIs bikeshedding why L\u00d6VE isn't at v1.0.0 yet?\n","**Original comment by Robert M. (Bitbucket: [rmcode](https:\/\/bitbucket.org\/rmcode), GitHub: [rmcode](https:\/\/github.com\/rmcode)).**\n\n----------------------------------------\n\n> Is bikeshedding why L\u00d6VE isn't at v1.0.0 yet?\n\n1.0.0 is just a number anyway.\n","**Original comment by Andrew McWatters (Bitbucket: [andrewmcwatters](https:\/\/bitbucket.org\/andrewmcwatters), GitHub: [andrewmcwatters](https:\/\/github.com\/andrewmcwatters)).**\n\n----------------------------------------\n\nIt also reflects how stable the underlying API is.\n"],"labels":["change"]},{"title":"More robust boot, audio, and graphics scripts","body":"**[Original report](https:\/\/bitbucket.org\/rude\/love\/issue\/390) by Boolsheet (Bitbucket: [Boolsheet](https:\/\/bitbucket.org\/Boolsheet), GitHub: [Boolsheet](https:\/\/github.com\/Boolsheet)).**\n\n----------------------------------------\n\nThe Lua scripts embedded into the executable rely on global variables for many vital functions and tables. L\u00d6VE can terminate with misleading error messages, no error messages at all, or get stuck in a loop if one of those variables get changed.\n\nOne example would be the print function used in the error handler. If it gets replaced by the user and causes an error, the whole error handler blows up.\n\nAnother thing is the insufficient handling of invalid UTF-8 in the error handler. Error messages (encoded with ISO 8859-1 or similar) with bytes above 127 will likely throw an error at love.graphics.print resulting in a \"Invalid UTF-8\" error screen with a stack trace to the error handler.\n\nUsing local references for the Lua functions can prevent some of these failures. Getting clean references to the L\u00d6VE functions is a bit trickier because the initialization of the modules can happen (almost) anywhere and anytime.\n\nThe lookup for the custom error handling function should happen at error time. It's currently not possible to catch things like syntax errors with custom error handlers.\n","comments":["**Original comment by kevinclancy (Bitbucket: [kevinclancy](https:\/\/bitbucket.org\/kevinclancy), GitHub: [kevinclancy](https:\/\/github.com\/kevinclancy)).**\n\n----------------------------------------\n\nErrors should not occur in these scripts. Right now, if I call love.event.push('q'), an error propogates into boot.lua. Since the user does not typically have access to this script, the generated error would confuse most users. In this particular example, the unrecognized event should raise an error as soon as push is called.\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\n#552 was marked as a duplicate of this issue.\n","**Original comment by Bart van Strien (Bitbucket: [bartbes](https:\/\/bitbucket.org\/bartbes), GitHub: [bartbes](https:\/\/github.com\/bartbes)).**\n\n----------------------------------------\n\n@kevinclancy That is **not** how things should be done, since love.event can handle custom events as well, for all we know, \"q\" might exist. We can only error once we determine there's no event handler.\n","**Original comment by hahawoo (Bitbucket: [hahawoo](https:\/\/bitbucket.org\/hahawoo), GitHub: [hahawoo](https:\/\/github.com\/hahawoo)).**\n\n----------------------------------------\n\nKind of but not really related, is the argv table in boot.lua doing anything?\n","**Original comment by Gabe Stilez (Bitbucket: [z0r8](https:\/\/bitbucket.org\/z0r8), ).**\n\n----------------------------------------\n\nSo, a bit late to the party here, but a few things for posterity's sake so even this low-priority issue doesn't get forgotten:\n\n* The script folder contains 3 lua files; auto.lua, boot.lua and nogame.lua.\n* auto.lua is just for converting the other two lua files into their byte-based .lua.h equivalents\n* nogame.lua shouldn't be affected ever by this issue, since it only gets ran if there's no other code detected, hence no \"user\" code could have influenced it to misbehave potentially\n* **in effect, only boot.lua needs to be considered here.**\n\nNow, since this is an old issue, a few things have already been changed:\n\n* As mentioned above, #552 partially solved this by localizing the `debug` lib, and the `print` function, on top of the `error` function already being localized.\n* UTF-8 sanitization already happens, so that won't break the error handler anymore.\n* The root call was changed to behave like a coroutine instead of an infinite loop, iirc for \\(potential\\) web-compatibility.\n\nLooking into boot.lua:\n\nAn overview of a call tree-ish layout on what calls what \\(not down to all the helper functions\\):\n\n```\nanonfunc: -- root call\n\tearlyinit:\n\t\tlove.boot()\n\t\tlove.init() -- tries to require conf.lua and main.lua\n\t\tlove.run()  -- game loop\n\tif error then\n\t\tdeferErrhand:\n\t\t\tif inerror then\n\t\t\t\terror_printer()\n\t\t\telse\n\t\t\t\tlove.errorhandler() or love.errhand()\n\t\t\tend\n\tend\nend\n```\n\nBased on that, the inbuilt functions the whole thing called \\(in reverse-order, omitting functions not calling any\\):\n\n* `In root call:                coroutine.yield, xpcall`\n* `In default love.errhand:     debug.traceback, ipairs, pcall, string.gmatch, string.gsub, string.match, table.concat, table.insert, tostring`\n* `In error_printer:            debug.traceback, print, string.gsub, tostring`\n* `In default love.threaderror: error, tostring`\n* `In love.init:                assert, error, ipairs, pcall, print, require, string.format, string.match, tostring`\n* `In love.boot:                pcall, require, string.gsub, string.sub`  \n* `In uridecode:               string.gsub, string.char, string.sub, tonumber`\n* `In love.createhandlers:     setmetatable, collectgarbage, error`\n* `In love.arg.parseOptions:   string.match`\n* `In love.arg.parseOption:    table.insert`\n* `In love.arg.getLow:         math.huge, pairs`\n* `In love.path.leaf:          string.find, string.sub`\n* `In love.path.getFull:       string.match`\n* `In love.path.abs:           string.find`\n* `In love.path.endslash:      string.sub`\n* `In love.path.normalslashes: string.gsub`\n\nSo, as a first pass at suggestions, these could be localized the following way:\n\n* Overridables: `love.errhand` & `love.threaderror` \\(`love.run` doesn\u2019t use any non-l\u00f6ve lua inbuilts by default\\)\n\n    * `error, tostring, ipairs, pcall` - simple to localize with the keyword only;\n    * `debug_traceback, table_concat, table_insert` - need to localize the individual members, because the tables can still be modified by users;\n    * `string_gmatch, string_gsub, string_match` - since the form `str:strlibmethod(...)` will be affected by outside modifications to the string table, all code occurences should be reverted to the `string_strlibmethod(str, ...)` forms. \\(can't think of a better solution that would be as safe\\)\n    \n* Everything else:\n\n    * `assert, collectgarbage, pairs, print, require, setmetatable, tonumber, xpcall` - same as 1st point above;\n    * `coroutine_yield, math_huge` - same as 2nd above;\n    * `string.char, string.find, string.format, string.sub` - same as 3rd above.\n    \n\nThat said, probably quite some of these can be left how they are, mostly the ones that are in places that are executed before love.run was called \\(or rather, before any of conf or main .lua is parsed\\).\n\nRFC.\n\n\\(p.s.: what exactly were the \u201cmore robust audio and graphics scripts\u201d parts about?\\)\n"],"labels":["change"]}]