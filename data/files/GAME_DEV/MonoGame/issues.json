[{"title":"[PAID BOUNTY] A shared base for public and console repos","body":"_MonoGame needs a new base that can be used between public and private console repos._\r\n\r\n\ud83d\udcc3**Full details**\r\n\r\nMonoGame provides console ports of itself in private repos, all you need to do to access it is to be a registered developer for the correct platform. They are in private repos because of the console NDAs.\r\n\r\nIn order to make the work between the public and private repos less separate, we wanted to move MonoGame to a new system where there will be one C# **MonoGame.Framework.dll** assembly that can be used for both. It would containt only the C# wrapper calls to our custom **monogameframework** native library, then we could switch out the native library depending on the platform you are targeting.\r\n\r\n\ud83d\udfe2 **Bounty status**\r\n\r\nOpen for applications. \u23f3\r\n\r\n\ud83d\udcb0 **Bounty**\r\n\r\n$1200,00 USD (One thousand and two hundred US dollars).\r\n\r\n\u270b **Requirements to apply**\r\n\r\n_Standard requirements from [our generic bounty requirements](https:\/\/monogame.net\/bounties\/#requirements) as well as knowlage on C++, C++ build systems, Vulkan and SDL._\r\n\r\n\ud83d\udce6 **Expected delivery content**\r\n\r\n- **MonoGame.Frameowk.Native** C# project\r\n  - All C# Stubs need to be fully filled with wrapper calls to **monogameframework**\r\n  - A generator needs to be writted to export all the wrappers to header files that need to be filled using reflection\r\n  - Needs to be hooked up to the tests and passing non graphics \/ audio tests\r\n- **monogameframework** native library\r\n  - This library needs to contain exposed methods for all the platform call MonoGame does\r\n  - All platform calls need to be fully implemented (Windowing + Input, using SDL)\r\n  - Vulkan code needs to be moved from the private MonoGame repo\r\n    - All graphics calls need to be fully hooked up, it does not need to be fully working\r\n  - No audio call should be implemented, we are planing on using FAudio and a relavent bounty for it will be released at future time\r\n- Both projects need to be fully hooked up to the CAKE Frosting build system\r\n\r\n\ud83d\udcc5 **Delivery timeline**\r\n\r\nAs soon as possible.\r\n","comments":[],"labels":["Bounty"]},{"title":"[PAID BOUNTY] [LOCKED] Package up ffmpeg and ffprobe","body":"_MonoGame needs to package up ffmpeg and ffprobe for content compilation._\r\n\r\n\ud83d\udcc3**Full details**\r\n\r\nIn order to improve the maintainability of the 3rd party dependencies and tooling, we are trying to prepare the compilation and packaging for ffmpeg and ffprobe as per #8124.\r\n\r\nWhats expected from this task is to build 3 repositories, one for shared tooling build scripts and two repositories for the ffmpeg and ffprobe executables, see \"Expected delivery content*\" bellow for clearer details.\r\n\r\nThe MonoGame Foundation wishes to accelerate this transition by offering a paid opportunity to undertake this task.\r\n\r\n\ud83d\udd12 **Bounty status**\r\n\r\nLocked for @AristurtleDev to complete. \ud83d\udd12\r\n\r\n\ud83d\udcb0 **Bounty**\r\n\r\n$360,00 USD (Three hundred and sixty US dollars).\r\n\r\n\u270b **Requirements to apply**\r\n\r\n_Standard requirements from [our generic bounty requirements](https:\/\/monogame.net\/bounties\/#requirements)._\r\n\r\n\ud83d\udce6 **Expected delivery content**\r\n\r\n- **MonoGame.Tool.BuildScripts** repository that can be used as a shared scripts repository for all future tooling (Similary structured as [MonoGame.Library.BuildScripts](https:\/\/github.com\/MonoGame\/MonoGame.Library.BuildScripts)).\r\n- **MonoGame.Tool.FFMpeg** repository containing the packaging scripts for the ffmpeg executable. (Similary structured as [MonoGame.Library.FreeType](https:\/\/github.com\/MonoGame\/MonoGame.Library.FreeType)).\r\n  - Should build the latest stable version of ffmpeg.\r\n  - Should be packaged into a dotnet tool `mgcb-ffmpeg`.\r\n  - Should upload the nuget to GitHub packages on build.\r\n- **MonoGame.Tool.FFProbe** repository containting the packaging scripts for the ffprobe executable. (Similary structured as [MonoGame.Library.FreeType](https:\/\/github.com\/MonoGame\/MonoGame.Library.FreeType)).\r\n  - Should build the latest stable version of ffprobe.\r\n  - Should be packaged into a dotnet tool `mgcb-ffprobe`.\r\n  - Should upload the nuget to GitHub packages on build.\r\n- The C# coding style should match the standard Microsofts C# coding style guideliness.\r\n- The build scripts in all repository should use CAKE Frosting.\r\n- The CI system in all repositories should use GitHub Actions.\r\n\r\n\ud83d\udcc5 **Delivery timeline**\r\n\r\nAs soon as possible.\r\n","comments":[],"labels":["Bounty"]},{"title":"PathHelper.GetRelativePath potential bugs","body":"### Prerequisites\r\n\r\n- [X] I have verified this issue is present in the `develop` branch\r\n- [X] I have searched [open](https:\/\/github.com\/MonoGame\/MonoGame\/issues) and [closed](https:\/\/github.com\/MonoGame\/MonoGame\/issues?q=is%3Aissue+is%3Aclosed) issues to ensure it has not already been reported.\r\n\r\n### MonoGame Version\r\n\r\nMonoGame 3.8.1\r\n\r\n### Which MonoGame platform are you using?\r\n\r\nMonoGame DesktopGL\r\n\r\n### Operating System\r\n\r\nWIndows\r\n\r\n### Description\r\nThe problem reside in function **GetRelativePath(string basePath, string path)** in file **MonoGame.Framework.Content.Pipeline\/Builder\/PathHelper.cs**\r\n```c#\r\npublic static string GetRelativePath(string basePath, string path)\r\n{\r\n    Uri uri;\r\n    if (!Uri.TryCreate(path, UriKind.Absolute, out uri))\r\n        return path;\r\n\r\n    uri = new Uri(basePath).MakeRelativeUri(uri);\r\n    var str = Uri.UnescapeDataString(uri.ToString());\r\n\r\n    return Normalize(str);\r\n}\r\n```\r\nThe issue is the return result of **PathHelper.GetRelativePath()** is relative path without the dot as the first char\r\n- The true result should be **.\/bin\/pathtomycontent.xnb**\r\n- But instead **\/bin\/pathtomycontent.xnb** without the '.'\r\n\r\nAs we understand, path without the first dot is treated as an rooted path by .NET\r\n\r\nThis is where the piece of code calling **PathHelper.GetRelativePath()** bug appears, \r\nthe function in **MonoGame.Framework.Content.Pipeline\/Builder\/PipelineManager.cs** file which retrieve infomation of cached .mgcontent file\r\n```c#\r\nprivate PipelineBuildEvent LoadBuildEvent(string destFile, out string eventFilepath)\r\n{\r\n    var contentPath = Path.ChangeExtension(PathHelper.GetRelativePath(OutputDirectory, destFile), PipelineBuildEvent.Extension);\r\n    eventFilepath = Path.Combine(IntermediateDirectory, contentPath); \/\/ This is where we messed up\r\n    return PipelineBuildEvent.Load(eventFilepath);\r\n}\r\n```\r\n**Path.Combine()** will only process the latter argument because **contentPath** is rooted and ignore **IntermediateDirectory**\r\n\r\n### Steps to Reproduce\r\n\r\nThe problem can be reproduced by calling the function with **destFile** is a full subpath of OutputDirectory. \r\n\r\nFor example calling **LoadBuildEvent(\"D:\\\\MyMonoGameProject\\\\Content\\\\out\\\\MyGameImage.xnb\", out string eventFilepath)** with **OutputDirectory** is **\"D:\\\\MyMonoGameProject\\\\Content\\\\out\\\\\"**\r\n\r\n### Expected Behavior\r\n\r\nThe out parameter **eventFilepath** should be **\"D:\\\\MyMonoGameProject\\\\Content\\\\obj\\\\MyGameImage.mgcontent\"** if the value of **IntermediateDirectory** is **D:\\\\MyMonoGameProject\\\\Content\\\\obj\\\\**\r\n\r\n### Resulting Behavior\r\n\r\nBut instead the result of **eventFilepath** be **\\MyGameImage.mgcontent** because **PathHelper.GetRelativePath()** return a rooted path","comments":["Hey, I am a first time contributor to MonoGame and I would like to work on this issue.","Hey again. Walked through the steps to replicate the issue and couldn't seem to replicate the issue at all. Currently I am using .NET 8 as my .NET version. When using console output, the GetRelativePath function returned a value without a '.' or a '.\/' in front of it. For an example, my file I was loading was under ProjectDir\\Content\\bin\\ball.xnb and when calling LoadBuildEvent with that file, it gave me an event file path as expected under the Intermediate directory. \r\n\r\nWhen looking at the documentation for Uri, it also shows that it should be returning a path without a '.' or '.\/' in front of it as I was able to get.\r\n\r\nCould @gameoflord012 replicate the issue and post a screenshot or video? That'd be much appreciated if this is an issue that is persisting. "],"labels":["Help Wanted","Good First Issue"]},{"title":"[PAID BOUNTY] [LOCKED] Implement the Direct3D 12 \/ GDK\/GDKX backend","body":"_MonoGame needs a Direct3D 12 implementation based on the GDK\/GDKX._\r\n\r\n\ud83d\udcc3**Full details**\r\n\r\nThis implementation will be the new Windows and Xbox targets, and would replace the current WindowsDX, UWP, and Xbox targets altogether.\r\n\r\n\"D3D 11 on 12\" is not allowed in this context. Therefore, we require an actual D3D12 implementation. The use of DirectXTK is allowed.\r\n\r\n@tomspilman has worked on a partial implementation already but couldn't finish it. He's making it available to the applicant in a private repository. The state of this work requires pipeline and memory management to be done.\r\n\r\nThe Xbox (GDKX) and Windows (GDK) targets are expected to share 99% of the code. We expect that one codebase to be shared between the future WindowsDX and Xbox targets (which should be Windows Store compliant).\r\n\r\n\ud83d\udd12 **Bounty status**\r\n\r\nLocked for @Togimaro to complete. \ud83d\udd12\r\n\r\n\ud83d\udcb0 **Bounty**\r\n\r\n$5.000,00 USD (Five thousands US dollars).\r\n\r\n\u270b **Requirements to apply**\r\n\r\n_In addition to [our generic bounty requirements](https:\/\/monogame.net\/bounties\/#requirements), here are requirements specific to this bounty._\r\n\r\nThis bounty requires to be a registered console developer with Microsoft in order to access the GDKX.\r\n\r\n\ud83d\udce6 **Expected delivery content**\r\n\r\n- A Windows GDK implementation of MonoGame\r\n- An Xbox GDKX implementation of MonoGame running with NativeAOT.\r\n\r\n\ud83d\udcc5 **Delivery timeline**\r\n\r\nAs soon as possible.","comments":["Following the foundation meeting of March 14, the applications have been reviewed and this bounty has been locked for @Togimaro to complete."],"labels":["Bounty"]},{"title":"[PAID BOUNTY] [LOCKED] Switch the console runtime from BRUTE to NativeAOT","body":"_The MonoGame Foundation wishes to incentivize the deprecation of the current console .NET runtime (BRUTE) in favor of switching to NativeAOT. This is a paid bounty._\r\n\r\n\ud83d\udcc3**Full details**\r\n\r\nThe .NET console runtime of MonoGame needs to be changed to NativeAOT (publicly known as the ```PublishAot``` build option since .NET 7, see [documentation](https:\/\/learn.microsoft.com\/en-us\/dotnet\/core\/deploying\/native-aot\/?tabs=net7%2Cwindows)).\r\n\r\nRelated issue on the MonoGame issue tracker for more context: [#7873](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7873)\r\n\r\nThe MonoGame Foundation wishes to accelerate this transition by offering a paid opportunity to undertake this task.\r\n\r\nRead this page to check how to apply and the requirements.\r\n\r\n\ud83d\udd12 **Bounty status**\r\n\r\nLocked for @tomspilman to complete. \ud83d\udd12\r\n\r\n\ud83d\udcb0 **Bounty**\r\n\r\n$5.000,00 USD (Five thousands US dollars).\r\n\r\n\u270b **Requirements to apply**\r\n\r\n_In addition to [our generic bounty requirements](https:\/\/monogame.net\/bounties\/#requirements), here are requirements specific to this bounty._\r\n\r\nThis bounty requires to be a registered developer with **all** of the console platforms (Sony, Microsoft, and Nintendo). We would like that this task is undertaken by a single person\/entity, and you would therefore have to be cleared with all manufacturers. We need the implementation to have the same structure and user experience throughout all platforms, hence it would be more complex to manage if we were to accept per-platform applications. If need be, we can help with getting registered with either platforms.\r\n\r\n\ud83d\udce6 **Expected delivery content**\r\n\r\n- All console platforms working with NativeAOT with no regression in regard to current MonoGame features (we can however expect runtime regressions since BRUTE and NativeAOT might have big differences).\r\n- A smooth \"build & run\/debug\" user experience, and if it can't be achieved a good documentation to get a project running with NativeAOT on consoles.\r\n\r\n\ud83d\udcc5 **Delivery timeline**\r\n\r\nAs soon as possible.\r\n\r\n\ud83d\udcda **Historical context**\r\n\r\nLong story: [#7873](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7873)\r\n\r\nBack when MonoGame was initially ported to game console hardware, the most recent .NET version was .NET 4.5, associated with C# 5.0. At that time, .NET was a closed source technology and there was no runtime available to run .NET applications on game consoles.\r\n\r\nMono (the open-source reimplementation of the .NET runtime) could be ported to consoles (which Xamarin did to some extent) but this didn't cover all consoles and in many scenario Mono was too slow for games on consoles. Also, it was uncertain if Xamarin would keep putting efforts into bringing Mono to new consoles. Therefore, Sickhead Games came up with a plan: create and maintain their own .NET runtime, specifically crafted for performance, and ease to implement new consoles. That runtime is BRUTE (and only available on demand).\r\n\r\nBRUTE doesn't work like any .NET runtime. It works by decompiling already compiled .NET applications into C++ source code, and developers can then compile this C++ code using console compilers directly into native code. Along the way, it plugs the C++ code with a garbage collector to manage memory, and also strips out many .NET features useless for games to boost the performances. In many cases, BRUTE is 10 to 100 times faster than Mono, and its C++ code is easily portable to any platform with a standard compiler available.\r\n\r\nFor the most part, BRUTE worked just well, down to limited hardware such as the PS Vita and the Wii U.\r\n\r\n**The problem**\r\n\r\nThe main issue with BRUTE is that it has been started at a time at which the bleeding-edge version of .NET was .NET 4.5 and the latest language version was C# 5.0. For a long time, this was just fine, and it was assumed that it wouldn't be too complex to upgrade BRUTE to newer .NET standards.\r\n\r\nIn the end, BRUTE grew to be a very big project with now 10 years of history. The fast evolutions of .NET and breaking changes within dependencies of BRUTE made upgrading BRUTE very complex. Supporting current .NET basically requires the whole tool to be rewritten from scratch, which is months of work introducing possible regressions.\r\n\r\nThe major impact is that this limitation forces the main public repository of MonoGame to enforce a strict compatibility with .NET 4.5 and C# 5.0. This only applies to MonoGame itself, games made with MonoGame don't have to abide to this (unless they want to work on consoles). This limitation drives innovation backward and induces frustration within the community.\r\n\r\n**The solution**\r\n\r\nIn the recent history of .NET, Microsoft introduced a new runtime in the name of NativeAOT (which is hidden behind the ```PublishAot``` build parameter since .NET 7.0). This new build option takes the compiled IL code and translates it directly into native code (without an intermediate language such as C++), and packages the .NET runtime with it. This produces a monolithic executable that is entirely native code. This runtime became quickly popular among game developers for requiring no runtime installation, having no JIT jitters, obfuscating code, and producing a clean single output (that is not an hidden zip file like ```PublishSingleFile``` does). Games like Streets of Rage 4, Carrion, or ScourgeBringer were published successfully to millions of players with NativeAOT on PC platforms.\r\n\r\nLately, the FNA team and Cellar Door Games ported NativeAOT to gaming consoles hardware, making the latest advancements in .NET available on consoles. Despite being less performant than BRUTE, NativeAOT is much more convenient to use and more featureful. It also has the advantage of being backed by Microsoft which guarantees its future within the .NET ecosystem.\r\n\r\nThe MonoGame Foundation has therefore voted to switch to NativeAOT and join the maintenance effort of its console ports along with the FNA team. The goal is to deprecate BRUTE.\r\n\r\n**The technical details**\r\n\r\nThe details vary depending on the platform:\r\n- **PlayStation and Xbox platforms**: those have their platform code (e.g. low level graphics, audio, and I\/O) into a native C++ library that MonoGame then calls through ```DllImport```. Switching to NativeAOT shouldn't be too complex and should theoretically involve restructuring the project template to work with NativeAOT. It is not expected to require to rewrite platform code for this to work (but we should expect the transition to not be that magical).\r\n- **Nintendo platform**: this platform is more tricky because it uses a feature unique to BRUTE to avoid having a native library wrapped around ```DllImport```. To put it bluntly, BRUTE has a feature that allows to write C++ code directly into empty C# methods. This code is then statically linked at compile time without having to do any kind of glue. Migrating to NativeAOT would require to extract all this C++ code into a native library (like the other platforms do), and replace those magic methods with ```DllImport```. This is the platform that is expected to be the most time consuming to migrate. It is not expected that the C++ code should be rewritten (and it shouldn't to avoid regressions), but it is a lot of copy\/pasting\/testing while restructuring this code into a native library.","comments":["Hello. Just a little nitpick. I think that the new `LibraryImport` is probably more appropriate than the `DllImport`, since NativeAOT is the target. \r\n\r\n> Using DllImport isn't an option for platforms that require full Native AOT scenarios and therefore using other approaches (for example, source generation) is more appropriate. \r\n> ...\r\n> The P\/Invoke source generator, included with the .NET 7 SDK and enabled by default, looks for `LibraryImportAttribute` on a static and partial method to trigger compile-time source generation of marshalling code, removing the need for the generation of an IL stub at run time and allowing the P\/Invoke to be inlined.\r\n\r\nhttps:\/\/learn.microsoft.com\/en-us\/dotnet\/standard\/native-interop\/pinvoke-source-generation","```DllImport``` works just fine with NativeAOT. Maybe some other ahead-of-time environments don't, but we already shipped games using ```DllImport``` and NativeAOT so we should be all fine.\r\n\r\n(NativeAOT has modes which are stricter and might require that, but it is not required to go as far as that on consoles with MonoGame.)","You're right. `DllImport` doesn't work only in _full_ NativeAOT.","Following the foundation meeting of March 14, the applications have been reviewed and this bounty has been locked for @tomspilman to complete."],"labels":["Bounty"]},{"title":"TestFailure: TestMergePositionsMultipleGeometries - Index was outside the bounds of the array.","body":"### Prerequisites\n\n- [X] I have verified this issue is present in the `develop` branch\n- [X] I have searched [open](https:\/\/github.com\/MonoGame\/MonoGame\/issues) and [closed](https:\/\/github.com\/MonoGame\/MonoGame\/issues?q=is%3Aissue+is%3Aclosed) issues to ensure it has not already been reported.\n\n### MonoGame Version\n\nDevelop\n\n### Which MonoGame platform are you using?\n\nN\/A\n\n### Operating System\n\nALl\n\n### Description\n\nThe function `MeshHelper.CalculateNormals` has an issue in generating the Normals for models, resulting in a failed Unit Test in the MonoGame.Tools solution.\r\n\r\n![image](https:\/\/github.com\/MonoGame\/MonoGame\/assets\/1793042\/dca5f78a-9907-4e5d-9321-b8e21e24ed38)\r\n\r\nThe issue relates in to the creation of a VertextChannel<Vector3> array for the Geometry normals (Line 130 - `MeshHelper`)\n\n### Steps to Reproduce\n\n* Clone the MonoGame repository - develop\r\n* Open the MonoGame.Tools.<platform> solution\r\n* Run the Unit Tests\r\n* Observe the failure of the `TestMergePositionsMultipleGeometries` test\r\n(Run in Bebug to see the specific failure)\n\n### Minimal Example Repo\n\n_No response_\n\n### Expected Behavior\n\nMeshHelper.CalculateNormals should complete successfully\n\n### Resulting Behavior\n\n`TestMergePositionsMultipleGeometries` test failure\n\n### Files\n\n_No response_","comments":["You can test further by updating the MathHelper.CalculateTangentFrames and changing the Normals check from a Return (skip processing missing normals) to the commented-out line MeshHelper.CalculateNormals(geom, true); (Generate missing normals)\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/6b8988fc19ec04015c7fa8279860932ba63b8ee4\/MonoGame.Framework.Content.Pipeline\/Graphics\/MeshHelper.cs#L157\r\n\r\nThis is then tested by the newer MissingNormalsTestCustom test, which has a model that includes Normals and is missing normals on some geometry.\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/6b8988fc19ec04015c7fa8279860932ba63b8ee4\/Tools\/MonoGame.Tools.Tests\/ModelProcessorTests.cs#L311\r\n\r\nThe test fails if you attempt to use the CalculateNormals method to regenerate the missing ones."],"labels":["Help Wanted"]},{"title":"Vector2.Normalize should do a zero division check if the input vector is (0, 0)","body":"### Intent\n\nSo if you will use the `.Normalize()` function on `Vector2` and the input vector is of format `(X: 0, Y: 0)` it will do a zero division and the new vector now is `(X: NaN, Y: NaN)`. \r\n\r\nA little check against if both `X` and `Y` are 0 or `Epsilon` would solve this issue. It would then just don't change the vector in place or return the input vector as it was. \r\n\r\n```cs\r\n...\r\nif (value.X == 0 && value.Y == 0) { return value  };\r\n...\r\n```\n\n### Motivation\n\nThe motivation is, that i had a bug with my movement vector. It turns out, normalizing it without doing this check:\r\n```cs\r\nif(moveDir != Vector2.Zero)\r\n{\r\n    moveDir.Normalize();\r\n}\r\n```\r\nIt would break my code. ","comments":["If you could assign me, I will try to implement these features if wanted. I will also look at all the other vectors that use this `Normalize` function in any shape or form. ","For the time being, this is by design. MonoGame has been designed to replicate the behavior of XNA, which was setting the vector to NaN if there was a division by 0 (which is \"mathematically correct\").\r\n\r\nSo breaking how Normalize work is not desirable. However, we can eventually discuss the addition of non-breaking changes, like a new method doing that or an optional parameter, example:\r\n\r\n```csharp\r\n        public void Normalize(bool defaultToZero = false)\r\n        {\r\n            if (defaultToZero && X == 0.0f && Y == 0.0f)\r\n                return;\r\n            float val = 1.0f \/ MathF.Sqrt((X * X) + (Y * Y));\r\n            X *= val;\r\n            Y *= val;\r\n        }\r\n```\r\n\r\nAlternatively, you could do your own extension method:\r\n\r\n```csharp\r\nstatic class Vector2Extensions\r\n{\r\n    public static Vector2 NormalizeZero(this Vector2 v)\r\n    {\r\n        if (v == Vector2.Zero) return v;\r\n        v.Normalize();\r\n        return v;\r\n    }\r\n}\r\n```\r\n\r\n```moveDir = moveDir.NormalizeZero();``` (this is what we do on our games).","This behavior does not make sense mathematically or programmatically. Regardless of how XNA handled it there are two ways of looking at this:\r\n1) You can not normalize the zero vector as it's length can not be made one, so you should return the zero vector.\r\n2) Client code has asked you to perform an impossible task, which is an _exceptional_ state so you should throw an exception noting that the Vector2 can not be normalized, thus resulting in client code refactoring as you suggest above.\r\n\r\nReturning NaN is not behavior that is noted anywhere in the docs nor is it reasonable for someone to expect that behavior from a math function like this. It should not break anyone's code to take the first approach and return the zero vector, worst case you have someone performing a now redundant check and new people using the library have clear behavior that aligns to expectations.\r\n\r\nIt is 2024, XNA is long dead and new users want to use Monogame to make new games, what was essentially a bug or at least bad behavior in the original library should really just be fixed at this point.","I think I need to be more specific on what we're meaning with \"for the time being\". Sorry for the lack of context.\r\n\r\nYou're right, though there is one unintuitive aspect of MonoGame we should be aware of (and that I know is a source of frustration for newcomers but we're working toward resolving that).\r\n\r\n> It is 2024, XNA is long dead and new users want to use Monogame to make new game\r\n\r\nThat's on paper, and only the visible face. The surprising part is that there is still commercial games using it (yes), and there is a number of studios who still have code based on it that do not wish things to break. Those studios are among the most silent users of MonoGame but are doing the games that reach the largest number of players. And as harmless as the proposed change sounds, with all the different .NET runtimes and code around, we can never be that sure that something as trivial will not cascade into issues.\r\n\r\nYes, that doesn't make sense to newcomers and it makes things look backward and unintuitive, as well as raising the \"old-timers vs newcomers\" debate, but we're working toward a common ground. The current goal is to make the current API future-proof for old-timers, seal it in its own \"XNA-compatible\" branch, and move MonoGame forward with breaking changes in a \"present & future\" branch (and definitely make Normalize to not return NaN).\r\n\r\nIt's just that we're not quite there yet, so \"for the being\" there is still going to be some oddities, but you can expect changes in that regard.\r\n\r\nWhich is also why I didn't close the issue. It's relevant."],"labels":["Feature Request"]},{"title":"macOS and Linux setup experience","body":"I'm creating this issue to centralize all of the other issues to setup a MonoGame project on macOS or Linux.\r\n\r\nIt is a set of different issues degrading the setup experience on those systems. They are aggregated with the [setup label](https:\/\/github.com\/MonoGame\/MonoGame\/labels\/Setup), most of them being duplicates.\r\n\r\nHow to fix those:\r\n- [ ] Build all native dependencies with ```osx-arm64``` support (this is currently being done by refactoring the dependencies into separate projects so that MonoGame can built it own native dependencies without relying on third-parties)\r\n  - [x] SDL\r\n  - [x] FreeType (needs to be wired and tested with SharpFont)\r\n  - [x] FreeImage\r\n  - [ ] ffmpeg\/ffprobe\r\n  - [x] assimp\r\n  - [ ] Replace ATI.TextureCompression, PVRTexLib and NVTT by more suitable texture compressors (candidates are compressanator on Windows\/Linux, and TextureConverter on macOS)\r\n- [ ] Fix ```mgfxc_wine_setup.sh```\r\n   - [x] Change the .NET SDK link to .NET 8.0\r\n   - [x] Update WineHelper.cs comments to .NET 8\r\n   - [x] Check for Wine version requirement (there is a minimum version required)\r\n   - [ ] Enhance the script to support both 32 and 64 bit versions of Wine (some users have both installed and stuff got installed on the 32 bit version instead)\r\n","comments":["@mrhelmut \r\n- Change the .NET SDK link to .NET 8.0: Completed in #8218 \r\n- Update WineHelper.cs comments to .NET 8: Completed in #8219 \r\n- Check for Wine version requirement (there is a minimum version required): Completed in #8220 \r\n",">  Enhance the script to support both 32 and 64 bit versions of Wine (some users have both installed and stuff got installed on the 32 bit version instead)\r\n\r\nOk so the problem seems to be that monogame assumes that the Linux user is using apt and installed wine64.\r\n\r\nBut if you install wine like normal using like winehq-staging, then you get both 32-bit and 64-bit support.\r\n\r\nSetting the 64-bit support is just the WINE_ARCH flag.\r\n\r\nThe script would need to be changed to **not** check for the assumption of wine64 and instead just check for just plain wine, then carry on from there. But there needs to be a way to ensure that 64-bit support was also installed\r\n\r\nThoughts @mrhelmut @harry-cpp ","`dpkg -l | grep wine` will output\r\n\r\n```\r\naristurtle@ubuntu-personal:~\/ftp$ dpkg -l | grep wine\r\nii  fonts-wine                           5.0-3ubuntu1                          all          Windows API implementation - fonts\r\nii  libwine:amd64                        5.0-3ubuntu1                          amd64        Windows API implementation - library\r\niU  wine-staging                         9.3~focal-1                           amd64        WINE Is Not An Emulator - runs MS Windows programs\r\niU  wine-staging-i386:i386               9.3~focal-1                           i386         WINE Is Not An Emulator - runs MS Windows programs\r\nii  wine64                               5.0-3ubuntu1                          amd64        Windows API implementation - 64-bit binary loader\r\niU  winehq-staging                       9.3~focal-1                           amd64        WINE Is Not An Emulator - runs MS Windows programs\r\n\r\n```\r\n\r\nso the check for wine64 can be made there"],"labels":["Linux","MacOS","Setup"]},{"title":"Content.mgcb is not opening on macOS Sonoma","body":"### Prerequisites\n\n- [X] I have verified this issue is present in the `develop` branch\n- [X] I have searched [open](https:\/\/github.com\/MonoGame\/MonoGame\/issues) and [closed](https:\/\/github.com\/MonoGame\/MonoGame\/issues?q=is%3Aissue+is%3Aclosed) issues to ensure it has not already been reported.\n\n### MonoGame Version\n\nMonoGame 3.8.1.576-develop\n\n### Which MonoGame platform are you using?\n\nMonoGame iOS Application (mgios)\n\n### Operating System\n\nMac\n\n### Description\n\nContent.mgcb is not opening on macOS Sonoma. I have tried to open it in Visual Studio Code Version: 1.85.1 (Universal) by double clicking Content.mgcb or right click-->Open in MGCB Editor, but Content.mgcb is not opening and I get no error message.\r\n\r\nThe Visual Studio Code extension MonoGame Content Builder (Editor) v0.0.6 is installed.\r\nI have tested on a 3,7 GHz 6-Core Intel Core i5 with macOS Sonoma.\r\n\r\n\n\n### Steps to Reproduce\n\nRight click on Content.mgcb in Visual Studio Code and then choose Open in MGCB Editor. The file will not open.\n\n### Minimal Example Repo\n\n_No response_\n\n### Expected Behavior\n\nContent.mgcb should open when I right click and then choose Open in MGCB Editor.\n\n### Resulting Behavior\n\nI get no error messages.\n\n### Files\n\n_No response_","comments":["Please refer to #8124 while this issue is being worked on."],"labels":["Linux","MacOS","Setup"]},{"title":"Bounties [Paid work]","body":"This issue is reserved to listing ongoing and open bounties.\r\n\r\n\ud83d\udfe2 Currently **open** bounties:\r\n- #8241 \ud83d\udcb0 $360 USD\r\n- #8242 \ud83d\udcb0 $1200 USD\r\n\r\n\ud83d\udd12 Currently **reserved and being worked on** bounties:\r\n- #8194 \ud83d\udcb0 $5000 USD\r\n- #8195 \ud83d\udcb0 $5000 USD","comments":["I hope just create label:bounty or something like bounty bot or a github app.\r\n"],"labels":["Bounty"]},{"title":"Possibility of using WinUI 3","body":"### Intent\n\nA newer version of WindowsUniversal that would replace UWP (if possible) with WinUI 3.\n\n### Motivation\n\nSince UWP isn't supported anymore and the hype is WinUI 3","comments":["The UWP target is going to be deprecated and replaced by the upcoming GDK (D3D12) implementation. This will be the standard route to publish games to the Microsoft Store on both Xbox and Windows.\r\n\r\nIf we're talking about GUI toolkit integrations, the current mood is toward encouraging the use of [ImGUI](https:\/\/github.com\/ocornut\/imgui), which is the industry standard for building game editors. The [ImGUI.NET wrapper](https:\/\/github.com\/ImGuiNET\/ImGui.NET) has [an integration example with MonoGame](https:\/\/github.com\/ImGuiNET\/ImGui.NET\/tree\/master\/src\/ImGui.NET.SampleProgram.XNA).","Is the public Windows GDK planned to be supported alongside the NDA'd GDK?","Yes. The public GDK implementation is expected to replace both WindowsDX and UWP, while GDKX will be used for Xbox (actually there isn't much differences between the two and 99% of the code will be shared across those platforms and made public).","Is it possible to publish public GDK games to Microsoft Store? I'm kinda worried I'll not be able to do that afterwards and I'm not part of ID@Xbox","As of now, an ID@Xbox registration is required to publish GDK games (.msixvc packages) on the Microsoft Store (for both Windows and Xbox). Microsoft is expecting games to move away from UWP and toward GDK if they are willing to be published on the store. We can likely expect an update on that topic by the next GDC.\r\n\r\nUWP is not going to disappear, it's just going to be deprecated as a MonoGame target in future releases (and isn't yet, as of now). But current versions of MonoGame are still usable if anyone needs to target UWP to publish an app without an ID@Xbox registration.\r\n\r\nI understand that this previous statement might sound worrying to current UWP users, but we are hopeful to be able to discuss more about this transition in the months to come and that all concerns will be addressed. In the meantime, nothing's changing."],"labels":["Feature Request"]},{"title":"Update nuget.org feed with MonoGame develop builds","body":"### Intent\n\nHello! I am following up from the [.NET 8 reddit thread](https:\/\/www.reddit.com\/r\/monogame\/comments\/18lhtb4\/net_8_meet_monogame\/). Reading [this article](https:\/\/darkgenesis.zenithmoon.com\/DotNet-8-meet-MonoGame.html), it seems that develop builds of MonoGame are available from the [GitHub feed](https:\/\/github.com\/orgs\/MonoGame\/packages).\r\n\r\nMy current project setup is developing from a Linux, Mac, Windows and even SteamDeck. This is really easy to do with nuget.org feed, since all I really need to do is build the project and it will automatically pull the nuget packages.\r\n\r\nHowever, the GitHub feed requires me to manually authenticate to the feed, which makes it slightly trickier to maintain in different machines and across the team.\r\n\r\nThe intent is to support [pre-release packages in nuget.org](https:\/\/learn.microsoft.com\/en-us\/nuget\/create-packages\/prerelease-packages), so people could still opt-in if they target a `-develop` build or use the latest release version without further authentication.\n\n### Motivation\n\nThe motivation is to keep the workflow with MonoGame quick and easy to anyone onboarding to the project. I do understand the motivation behind the GitHub feed, so this is why I created the issue, in case anyone sees value in this approach as well.\r\n\r\nUsers that want to use develop builds would manually target a `-develop` version for the package, [still consumed from the nuget.org feed](https:\/\/learn.microsoft.com\/en-us\/nuget\/create-packages\/prerelease-packages#installing-and-updating-pre-release-packages). No GitHub authentication would be required. ","comments":["@harry-cpp @mrhelmut What do you think?\r\n\r\nWe really shouldn't push new builds to Nuget after every PR.  As i don't think there is a way to take down old releases like we do on our own feed.\r\n\r\nMaybe we should push a new development build weekly?  Monthly?  Any ideas?","I agree. I think we should try to publish ```*-develop``` packages to the public feed, and we should indeed try to not do that at every PR.\r\nWeekly sounds cool.\r\n\r\nIdeally I think it would be nice to also have a Github Action that we can trigger manually to publish a develop package (in case there is an urgent hotfix to push to the feed).","> Weekly sounds cool.\r\n\r\nSo that is 52 releases a year in general for `-develop` packages across our 15 different packages on nuget.\r\n\r\n@harry-cpp how do we setup this automation of weekly `-develop` versions of all the packages as well as a manual trigger to publish them?","> We really shouldn't push new builds to Nuget after every PR. As i don't think there is a way to take down old releases like we do on our own feed.\r\n\r\nWhile you can't completely remove a version on nuget.org, you can un-list it. It hides the version from anyone looking to install\/add it to a project, while still allowing projects already referencing it to perform a nuget restore.","True, and they can be marked as obsolete or unsecure, which would make nuget restore to display a warning.\r\n\r\nThough we should check if pushing this many packages has any other impact, such as hosting costs or nuget performances.","> True, and they can be marked as obsolete or unsecure, which would make nuget restore to display a warning.\r\n> \r\n> Though we should check if pushing this many packages has any other impact, such as hosting costs or nuget performances.\r\n\r\nThere are no hosting costs, has no impact on nuget restore and the average downloads\/version count is irrelevant for pre-release versions.","To add to this because I would like to see it as well, if you publish weekly `*-develop` packages to NuGet, they will not be shown to users by default in Visual Studio's NuGet Package Manager. They would have to click the \"include prerelease versions\" checkbox to see them.\r\n\r\nThis means that the 52 weekly develop releases a year would not clog the list up, users would have to opt-in to see them.","The sooner we implement this, the better. We should also automate merge to master releases (so far we're manually uploading to nuget.org). I'm a bit overloaded this month to work on it, though. Contributions welcome.","@mrhelmut I can implement this, but before working on it, I would like to propose a change.  The current build system uses a monolithic cake build script.  Would there be any issue in converting this to a cake frosting project for easier maintainability and updating?  It's still cake build, but as a cake frosting project it's an actual csproj with proper intellesense and separation of concerns.\r\n\r\nOnce converted, I can push that PR then add the functionality for the weekly NuGet `*-develop` pushes","@harry-cpp any thoughts on moving to a frosting project?","Yea, we should switch to use Cake.Frosting, the new dependency repos are already using it and it makes working with build scripts a lot easier (there is a CAKE VS Code extension that gives autocomple to the current build.cake, but its a rather hacky thing). @AristurtleDev If you can, move uploading and downloading of artifacts into the script as well.\r\n\r\nOn a separate note when it comes to publishing directly to nuget.org, we need to be careful about security. I know GitHub has a place to put the secrets in, but I didn't really read up on how secure it is. One idea I had was making a private repo for publishing the dev packages from MonoGame GitHub org once a day, that way the secret would have an extra layer of protection.","> On a separate note when it comes to publishing directly to nuget.org, we need to be careful about security\r\n\r\nSecrets are entered in the repository settings and when accessed are marked out with ****** if for some reason they should be output to the github action log, so it doesnt accidentally leak it.\r\n\r\nAlso, once the secret is created for the repository, it is not visible by anyone and can only be changed by someone with admin rights in the repo. Even then they can only change it and not view it.\r\n\r\nAdditionally, secrets settings are repository bound, so if someone were to fork the MonoGame repository, it doesn't also bring the configured secrets with it.\r\n\r\nTl;Dr there's really no reason to make a separate repo specifically for publishing.  Secret settings are secure and bound to the repo itself and do not transfer with forks.","The problem isn't the things you mention, but the fact that if the attacker finds a way to read the secret it would be bad. ie. what if one of the dependency in the build script is compromised, and we gave the secret to the CAKE build script for it to upload the artifacts. You have to worry about these things if you put the secret in the main repo, but not if we just put it in a separate repo that downloads and uploads the artifacts.","The only way an attacker would be able to read the secret in bad faith like this is if\r\n1. They submit a PR that adjusts the build script to read the secret and then transmit it outside of the Github runner environment (like smtp it to themselves or something)\r\n2. A maintainer approves this PR and merges it in.\r\n\r\nI would hope that maintainers would look at the PRs carefully enough to see something like this and reject it.  I'm fine with whatever decision you think is best in that regards, however I would like to state again that the only way the configured repo secrets could be compromised from a GitHub action runner is if a PR was merged that changed the script to intentionally leak it.","It's not about how it can happen, it's about preventing it as much as possible from happening.","GitHub has a page talking about this issue: <https:\/\/docs.github.com\/en\/actions\/security-guides\/security-hardening-for-github-actions>.","From what I read here, there's a million of ways for things to go bad. I would be on page with harry: the more we can reasonably obfuscate, the better. It'll also prevent Actions errors when cloning MonoGame (e.g. clones trying to upload their builds).\r\n\r\nI think it's a good separation to have: the main repository runs the tests and checks the PRs; the \"distribution\" repository packs, and distributes it.","Before I start this, I want to say that regardless of what I've posted below, I'll accept any decision made on this, I just wanted to ensure that everything was understood about how the configured secrets work in a repository and maybe ease concerns on areas that didn't seem to be understood.\r\n\r\n> @mrhelmut \r\n>  It'll also prevent Actions errors when cloning MonoGame (e.g. clones trying to upload their builds).\r\n\r\nI'm not sure if I'm misunderstanding the concern or if ya'll are misunderstanding how Github Actions works, but just to state it again, if I clone (or fork) the MonoGame repo, doing so does not bring the secrets into my clone\/fork. I can also just adjust the workflow Action in my clone\/fork to upload the NuGets under my own API key if I wanted to.  Moving the deployment to a private repo will not solve this problem. Actually nothing will solve this problem, anyone can build and upload the NuGets under their own account. But nothing about cloning or forking the repository will also clone the configured secrets, they are bound to the repository they are set in and do not transfer on cloning or forking.\r\n\r\n> @harry-cpp \r\n>  I know GitHub has a place to put the secrets in, but I didn't really read up on how secure it is\r\n\r\nI would really suggest taking time to read on how secure it is (i'll also explain below)\r\n\r\n> It's not about how it can happen, it's about preventing it as much as possible from happening.\r\n\r\nPutting it in a private repo does not add any extra layer of protection.  Sure, the secrets are now configured in a walled off repository, but it's still the GitHub Actions workflow that accesses and uses those values.  All it would take is a single PR to update the deployment to leak the keys to get merged and then whether public or private repo it's not going to matter.  There are ways to leak the keys in runners other than simply outputting them in the logs, so making it in a private only repo won't protect it.  \r\n\r\nThe only way you're going to protect the configured repository secrets from leaking in a GitHub Action workflow is if the maintainers **do not merge a PR that leaks them**.  \r\n\r\nI was exploring this a bit with @Apostolique last night, and yes, there are thousands of ways to leak the keys.  One interesting way that I came up with was to have a unit test that is run as part of the workflow grab the key and output it to the log. Even this required some out of the way things to happen for it to leak (I even base64 encoded the key and the log still `***` the key out).  \r\n\r\nHowever, you have to understand, the configured secrets themselves are not accessible by any job that is run in a workflow, unless that job is explicitly given access to the key. For instance\r\n\r\n```yml\r\nname: test\r\non: push\r\n\r\n\r\njobs:\r\n  example-job:\r\n    name: \"Example Job\"\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: \"Clone Repository\"\r\n        uses: actions\/checkout@v3\r\n        with:\r\n          fetch-depth: 0\r\n      \r\n      - name: \"Setup .NET\"\r\n        uses: actions\/setup-dotnet@v3\r\n        with: \r\n          dotnet-version: ${{ env.DOTNET_VERSION }}\r\n\r\n      - name: Run Test\r\n        run: dotnet test\r\n```\r\n\r\nIf i had a job like the above, an a configured secret named `SECRET_VALUE`, the `dotnet test` command and the program that it runs cannot access the `SECRET_VALUE` through environment variables.  It would have to first be explicitly set in the workflow like this\r\n\r\n```yml\r\n- name: Run Test\r\n  env: \r\n    SECRET_VALUE_ENV: ${{ secrets.SECRET_VALUE }}\r\n  run: dotnet test\r\n```\r\n\r\nThen the program that executes from `dotnet test` can get it from the `SECRET_VALUE_ENV` environment variable.\r\n\r\nIn order for the cake scripts to deploy the NuGets, you would have to explicitly give them access to the key with something like\r\n\r\n```yml\r\n- name: Deploy\r\n  env: \r\n    NUGET_API_KEY: ${{ secrets.NUGET_API_KEY}}\r\n  run: cd .\/build && dotnet run -- --target=Deploy\r\n```\r\n\r\nAt this point, the cake Deploy target can access the environment variable set so that it can use the key to deploy, and *if* that target also logs it to the console, it will be automatically be logged as `***` by the GitHub runner.\r\n\r\nSo the only thing that will prevent a key from being leaked, again, is if the maintainers allow a PR to get merged that explicitly adds the key as an environment variable in the workflow **and** the workflow executes a code to leak the key.  \r\n\r\nWhich brings me to a final question as I work on converting this to cake frosting; Would you like me to completely remove the Deploy target from the cake script?  If you're moving to a private repo, then you can just create a workflow that directly executes the `dotnet nuget push` command from the cli without the need for a cake script to do it.","> I'm not sure if I'm misunderstanding the concern\r\n\r\nNo misunderstanding on how secrets work. That was mostly about the workflow still trying to run on clones even though it's likely useless yet spinning runners time (and sending emails because they'll fail). I have big doubts that many people will be willing to push their own nugets ID. To me, it's a sufficiently small audience that they likely know how to do it if they need to, without us providing a public workflow for that.\r\n\r\n> Putting it in a private repo does not add any extra layer of protection.\r\n\r\nWe could still fence that by allowing only one dedicated github account to access the private repo secret. It's about limiting the damages if any admin account gets compromised.\r\n\r\nI wouldn't trust myself in not merging malevolent PRs, so separating concerns is always a good thing to me. Nothing will be hack-proof, but if we can do simple stuff with good gains, I think that we should. But we sure shouldn't go into anything convoluted if it's a little gain.\r\n\r\n> Would you like me to completely remove the Deploy target from the cake script?\r\n\r\nI would be favorable to that. Though it might still be useful to have the artifacts uploaded (to the action artifact space), if anyone would like to use the artifact nuget channel (which would be a kind of nightly channel, I guess)."],"labels":["Feature Request"]},{"title":"Make MonoGame trimming\/AOT compatible as-is","body":"Game developers are likely to be willing to produce apps using either the ```PublishTrimmed``` or ```PublishAot``` build options (both being forced when building for gaming consoles). Right now, this requires projects using MonoGame to root the MonoGame assembly so that commonly dynamically loaded types (e.g. typically anything loaded with the Content Pipeline) are properly linked by adding this to their .csproj definitions:\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <TrimmerRootAssembly Include=\"MonoGame.Framework\" \/>\r\n  <\/ItemGroup>\r\n```\r\n\r\nThere's a couple of problems with this approach:\r\n- Even though this can be partly fixed by adding this to project templates, it is not the intended .NET experience and is error-prone if anyone is creating a project from scratch or editing their .csproj\r\n- This doesn't make MonoGame trimmable, it forces the IL compiler to _not_ trim MonoGame at all, which is a bad fix in regard to what users might expect from trimming\r\n\r\nWe should try building MonoGame with ```<EnableTrimAnalyzer>true<\/EnableTrimAnalyzer>```, verify if any IL warnings related to trimming \/ AOT scenarios show up, and fix them.\r\n\r\nOnce those warnings are fixed, we will be able to mark the MonoGame library as ```<IsAotCompatible>true<\/IsAotCompatible>``` (which also sets ```<IsTrimmable>true<\/IsTrimmable>```). This way users will know that MonoGame has been tailored to support trimming \/ AOT scenarios and won't have to add anything to their .csproj.\r\n\r\nAs a side note, users willing to have their game running on consoles should also aim at fixing any warnings generated by enabling ```<EnableTrimAnalyzer>true<\/EnableTrimAnalyzer>``` because console games are built using AOT compilation (we should add this to the documentation to prepare people for building for consoles).","comments":["One of the warnings we should fix (this one is from DesktopGL builds):\r\n> ILC : warning IL3000: MonoGame.Framework.Utilities.FuncLoader.LoadLibraryExt(String): 'System.Reflection.Assembly.Location.get' always returns an empty string for assemblies embedded in a single-file app. If the path to the app directory is needed, consider calling 'System.AppContext.BaseDirectory'. \r\n\r\nPushed a fix for this one #8105. It was making macOS builds to crash with AOT compilation.","> (e.g. typically anything loaded with the Content Pipeline) are properly linked by adding this to their .csproj definitions:\r\n\r\nI was looking at this, in particular something a la [this](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Content\/ContentTypeReaderManager.cs#L52) . *That* approach may not be scalable and may be error prone (better approach is to add the correct attribute at the class-level).\r\n\r\nIs this along the lines of what you are thinking?\r\n\r\n","That approach used to work with old .NET <= 4.5, but modern .NET will see the trick and trim this out from the assembly. So we need to come up with something else.\r\n\r\nRelated proposal #8014. Though the intended solution as per the latest .NET release is to mark types with ```[DynamicallyAccessedMembers]``` (see [this documentation](https:\/\/learn.microsoft.com\/en-us\/dotnet\/core\/deploying\/trimming\/prepare-libraries-for-trimming?pivots=dotnet-8-0)).","There is another issue related to NativeAOT vs BRUTE that we need to fix beside trimming compatibility: #7872\r\nAny thought on this one @harry-cpp ? We should come up with a solution that works no matter the runtime and no matter how XNBs were built.","Oh, it seems I forgot to merge the fix: https:\/\/github.com\/MonoGame\/MonoGame\/pull\/7895","I wonder if a long term solution is to use a source generator (simple one, not using Roslyn) that uses reflection only at compile time collecting data to be fed into the runtime code. Similar to 'protobuf-net' etc. \n\nThis requires adding a MG attribute that can both help capture reflection data and help mark those classes\/generics and mark them as dynamic to prevent the compiler from optimizing away these out for the linker.","The issue is that base stuff C# types are written differently depending on if you use newer or older mgcb, because its found in different base namespaces between dotnet, .NET, .NET Framework and mono. This is written inside the content files themselves, so either a `System.Private.CoreLib` or `mscorelib` will be the base namespace. This means during content loading we need to just replace the base namespaces with whatever our current runtime that we are using is. I don't think your suggestion helps in any way with this.","There are three separate problems here: one is a stable name for the classes referred to in the mgcb; another is ensuring all classes potentially used by mgcb are not optimized away during compilation; and importantly no use of reflection for NativeAot.\n\nTo solve all these problems, one approach is to limit the use of reflection during compilation, use that reflection to collect stable base class names (which means respecting the current content type reader name as expected by the code linked above), stick it in a static read only list that is autogenerated and used by the runtime.\n\nE.g. \n\nstatic readonly Dictionary<string, CreatorFn> _mapTypenames \n\nThe string->CreatorFn will allow constructing the type for the provided stable class name used by the mgcb with no reflection nor Activator.CreateInstance use and be safe for AOT.\n\n\n\n","MonoGame has a very stable code in regard to what gets dynamically loaded from its own types or not (and otherwise has already been avoiding reflection in all the other parts of the code). These types haven't changed in years so I believe that we should be safe by just adding ```[DynamicallyAccessedMembers]``` to the types listed [here](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Content\/ContentTypeReaderManager.cs#L52).\r\n\r\nOther than that, we should be safe now, we already fixed the few outstanding compatibility issues. For good measure, we should enable ```<EnableTrimAnalyzer>true<\/EnableTrimAnalyzer>``` on all target projects to check if there are any AOT warning remaining but as far as I have checked, we're good now.\r\n\r\nThe only problem remaining is marking those types with the attribute to be able to add ```<IsAotCompatible>true<\/IsAotCompatible>```.\r\n\r\nIf anything fails beyond that, it is likely due to user code, and not to MonoGame itself. In that regard, users will see in their build log that the trimmer raised warnings. All we can do is adding a documentation about trimming pointing to the [official .NET documentation](https:\/\/learn.microsoft.com\/en-us\/dotnet\/core\/deploying\/trimming\/fixing-warnings) so that users know how to fix those warnings in their own code.","> one is a stable name for the classes referred to in the mgcb\r\n\r\nIt's not about what mgcb writes, the latest mgcb writes the correct types for the latest .NET, aka. `System.Private.CoreLib`, it's about what game itself needs as I said above.\r\n\r\nIf your game is compiled against mono or .NET Framework, `mscorelib` is the base type it expects.\r\n\r\nIf your game is compiled against .NET Core or .NET, `System.Private.CoreLib` is the base type it expects.\r\n\r\nThese are some core .NET types we are talking about here, like `String`. We wanna be able to load both so we are compatible with XNA content as well. These aren't gonna randomly change unless there is a brand new C# runtime.","Thanks for the discussion, sounds good!\n","any possible solution for the current public release of monogame? \r\n\r\nEdit: \r\nthis works\r\n\r\n```\r\n<ItemGroup>\r\n\t<TrimmerRootAssembly Include=\"MonoGame.Framework\" \/>\r\n\t<TrimmerRootAssembly Include=\"mscorlib\" \/>\r\n<\/ItemGroup>\r\n```","> As a side note, users willing to have their game running on consoles should also aim at fixing any warnings generated by enabling `<EnableTrimAnalyzer>true<\/EnableTrimAnalyzer>` because console games are built using AOT compilation (**we should add this to the documentation to prepare people for building for consoles**).\r\n\r\nPlease! This would be very useful. Also, it'd be great to have a section to explain preventive good practices for people willing to port to consoles down the road but not having development kits yet. Something along the lines of \"avoid doing this and that so porting to consoles is easier\", similar to what FNA does on their wiki."],"labels":["Feature Request","Help Wanted","NativeAOT"]},{"title":".NET 8 Update Issues On Linux","body":"### Prerequisites\n\n- [X] I have verified this issue is present in the `develop` branch\n- [X] I have searched [open](https:\/\/github.com\/MonoGame\/MonoGame\/issues) and [closed](https:\/\/github.com\/MonoGame\/MonoGame\/issues?q=is%3Aissue+is%3Aclosed) issues to ensure it has not already been reported.\n\n### MonoGame Version\n\n.NET 8 Update\n\n### Which MonoGame platform are you using?\n\nMonoGame Cross-Platform Desktop Application (mgdesktopgl)\n\n### Operating System\n\nLinux (Ubuntu 22.04.3 LTS)\n\n### Description\n\nTesting the current `develop` branch with .NET8 in LInux, the following issues were found and need to be corrected\r\n1. If attempting to build FX file before setting up wine, the error message states to install `.NET6` and not `.NET8`\r\n```\r\nSetup instructions:\r\n- Create 64 bit wine prefix\r\n- Install d3dcompiler_47 using winetricks\r\n- Install .NET 6\r\n- Setup MGFXC_WINE_PATH environmental variable to point to a valid wine prefix\r\n```\r\n\r\n2.  The `DOTNET_URL` in the **mgfxc_wine_setup.sh** script incorrectly points to .NET6 SDK and not the .NET8SDK\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/84a2690d4c1278365478893c9852f09103d3baa1\/Tools\/MonoGame.Effect.Compiler\/mgfxc_wine_setup.sh#L39\r\n\r\nIt should point to `https:\/\/download.visualstudio.microsoft.com\/download\/pr\/2b2d6133-c4f9-46dd-9ab6-86443a7f5783\/340054e2ac7de2bff9eea73ec9d4995a\/dotnet-sdk-8.0.100-win-x64.zip`\r\n\r\n3. Wine needs to be on a newer version; otherwise the following error is thrown.  Currently tested successfully with Wine version 8\r\n```\r\nwine: Call from 0x7bc7c9e1 to unimplemented function KERNEL32.dll.GetProcessGroupAffinity, aborting\r\nwine: Unhandled page fault on read access to 000000000000000C at address 00000000005C9834 (thread 002e), starting debugger...\r\n```\r\n\r\n**this is something that will need to be noted in the documentation, not something we can do in the repo**\n\n### Steps to Reproduce\n\n1. Setup .NET 8 SDK in Linux\r\n2. Setup wine according to documentation at https:\/\/monogame.net\/articles\/getting_started\/1_setting_up_your_development_environment_unix.html#optional-setup-wine-for-effect-compilation\r\n3. Clone `develop` branch\r\n4. Run `cake build` script\r\n5. Use NuGets generated by `cake build` script to create new MonoGame DesktopGL Project targeting .NET8\r\n6. Ensure that the `dotnet-mgcb` tooling is setup using the NuGets built from the `cake build` script\r\n7. Attempt to build an .fx file\n\n### Minimal Example Repo\n\n_No response_\n\n### Expected Behavior\n\n.fx builds with no issue\n\n### Resulting Behavior\n\nEffect file will not build due to incorrect .NET version installed by the setup script\n\n### Files\n\n_No response_","comments":["Beside changing the link to the proper .NET 8 SDK, I wonder if we could enhance this script by integrating it into ```Tools\/MonoGame.Content.Builder.Task``` (and automatically download the appropriate .NET SDK version) and if it's wiser to distribute ```d3dcompiler_47.dll``` ourselves rather than relying on downloading Firefox and extract it from there (I know that we're doing this because of licensing limitations of the Windows\/DirectX SDK, and I don't know if there's a better solution to this).\r\n\r\nEDIT: for the record, while the Windows SDK EULA allows that dll to be distributed with apps on Windows, distributing that dll on Linux or macOS isn't covered by the EULA. Downloading the Firefox Windows installer to snatch the dll from there is a trick around this EULA limitation.\r\n\r\nWe could keep a similar trick, but the one thing that kind of tickles me, is that we're relying on a third party app\/link that we don't control and can't guarantee its safety or reliability over time.","> and if it's wiser to distribute d3dcompiler_47.dll ourselves rather than relying on downloading Firefox and extract it from there (I know that we're doing this because of licensing limitations of the Windows\/DirectX SDK, and I don't know if there's a better solution to this).\r\n\r\nThis is what winetricks does to fetch the dll, so I've just copied it over for us so we don't have a dependency on winetricks.\r\n\r\n> Beside changing the link to the proper .NET 8 SDK, I wonder if we could enhance this script by integrating it into Tools\/MonoGame.Content.Builder.Task\r\n\r\nIt is touching files other than project related ones, so, we should avoid that unless we wanna start creating wine contexts in the obj folder itself.\r\n\r\n--- \r\n\r\nThe good news is that the script will not be needed once we have the vulkan version setup, as we will be switching to dxc, so for now just repairing the script to work should suffice.\r\n\r\nAlso mgfxc does give you instructions for setting stuff up without the helper script if its run and the wine context is not found.","Gotcha, we should be good with a link update then!","Please refer to #8124 while this issue is being worked on."],"labels":["Linux","MacOS","Setup"]},{"title":"Make iOS tests (interactive etc) work","body":"### Intent\n\niOS tests are no longer working (?)\r\n\r\n\r\n```\r\n..\/Tests\/Interactive\/iOS > dotnet run MonoGame.InteractiveTests.iOS.csproj\r\n\/usr\/local\/share\/dotnet\/sdk\/7.0.311\/Sdks\/Microsoft.NET.Sdk\/targets\/Microsoft.NET.EolTargetFrameworks.targets(35,5): warning NETSDK1202: The workload 'ios' is out of support and will not receive security updates in the future. Please refer to https:\/\/aka.ms\/maui-support-policy for more information about the support policy. [MonoGame\/MonoGame.Framework\/MonoGame.Framework.iOS.csproj]\r\n\/usr\/local\/share\/dotnet\/sdk\/7.0.311\/Microsoft.Common.CurrentVersion.targets(1229,5): error MSB3644: The reference assemblies for .NETFramework,Version=v4.0 were not found. To resolve this, install the Developer Pack (SDK\/Targeting Pack) for this framework version or retarget your application. You can download .NET Framework Developer Packs at https:\/\/aka.ms\/msbuild\/developerpacks [MonoGame\/Tests\/Interactive\/iOS\/MonoGame.InteractiveTests.iOS.csproj]\r\n\r\nThe build failed. Fix the build errors and run again.\r\n```\n\n### Motivation\n\nEnsure iOS\/MacOS + MG is setup well.","comments":["Addressed in [this issue](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/8099)","Hi folks\n@harry-cpp @tomspilman @mrhelmut @SimonDarksideJ \nIt looks like iOS interactive tests have a nice property of being extended to other platform easily. Someone has already done the legwork of building concepts like 'discover and run a list of tests' 'basic UI for tests' etc. I wonder how y'all feel about making the same work on Android, MacOS Windows as a common interactive test framework copied from iOS (perhaps even automated for some tests)?\n\nAs things like Vulkan or MoltenVk come along it feels like having a set of tests run on different devices will help catch end to end bugs during refactoring etc that's separate from headless unit tests.","Done in https:\/\/github.com\/MonoGame\/MonoGame\/pull\/8110"],"labels":["Feature Request"]},{"title":"Documentation on Linux\/MacOS shader environment setup is broken \/ out of date.","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nThe wine prefix setup script on [https:\/\/docs.monogame.net\/articles\/getting_started\/1_setting_up_your_development_environment_ubuntu.html](https:\/\/docs.monogame.net\/articles\/getting_started\/1_setting_up_your_development_environment_ubuntu.html) links to [https:\/\/raw.githubusercontent.com\/MonoGame\/MonoGame\/master\/Tools\/MonoGame.Effect.Compiler\/mgfxc_wine_setup.sh](https:\/\/raw.githubusercontent.com\/MonoGame\/MonoGame\/master\/Tools\/MonoGame.Effect.Compiler\/mgfxc_wine_setup.sh), which is broken for all Linux distributions and MacOS versions (incorrect dotnet architecture downloaded).\r\n\r\nPerhaps cherry pick [https:\/\/raw.githubusercontent.com\/MonoGame\/MonoGame\/develop\/Tools\/MonoGame.Effect.Compiler\/mgfxc_wine_setup.sh](https:\/\/raw.githubusercontent.com\/MonoGame\/MonoGame\/develop\/Tools\/MonoGame.Effect.Compiler\/mgfxc_wine_setup.sh) from the develop branch over to the master branch to make that section of documentation work again?\r\n\r\nSee also: [#7953](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7953), [#7360](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7360)\r\n\r\nEDIT: Links got mismashed somehow. Fixed.","comments":["Can confirm, the new script made this work for me. With the old one, any attempt to compile fx files just produced empty diagnostic lines and reported failure.\r\n\r\nThe relevant change is just:\r\n```\r\n-DOTNET_URL=\"https:\/\/download.visualstudio.microsoft.com\/download\/pr\/44d08222-aaa9-4d35-b24b-d0db03432ab7\/52a4eb5922afd19e8e0d03e0dbbb41a0\/dotnet-sdk-6.0.302-win-x64.zip\"\r\n+DOTNET_URL=\"https:\/\/download.visualstudio.microsoft.com\/download\/pr\/e71628cc-8b6c-498f-ae7a-c0dc60019696\/aaadc51ad300f1aa58250427e5373527\/dotnet-sdk-6.0.202-win-x86.zip\"\r\n```\r\n\r\nso going from 6.0.202-x86 to 6.0.302-x64. Probably the -x64 part is the part that really matters, but the version bump is probably fine too.\r\n","Please refer to #8124 while this issue is being worked on."],"labels":["Linux","MacOS","Setup"]},{"title":"Cannot build net6.0-ios project on Mac OS X","body":"Device: Macbook M1\r\nOS: Mac OS X Ventura 13.1\r\nProject: net6.0-ios\r\n\r\nAfter i add image texture to Content.mgcb file we receive build error\r\n\r\n`\/Users\/user\/.nuget\/packages\/monogame.content.builder.task\/3.8.1.303\/build\/MonoGame.Content.Builder.Task.targets(5,5): Error MSB3073: The command \"dotnet mgcb \/quiet \/@:\"\/Users\/user\/Documents\/Projects\/game\/src\/testgame\/Content\/Content.mgcb\" \/platform:iOS \/outputDir:\"\/Users\/user\/Documents\/Projects\/game\/src\/testgame\/Content\/bin\/iOS\/Content\" \/intermediateDir:\"\/Users\/user\/Documents\/Projects\/game\/src\/testgame\/Content\/obj\/iOS\/net6.0-ios\/Content\" \/workingDir:\"\/Users\/user\/Documents\/Projects\/game\/src\/testgame\/Content\/\"\" exited with code 1. (MSB3073) (testgame)`\r\n\r\ndotnet mgcb utility not ready to work with .net6.0-iOS projects?","comments":["I'm seeing the same issue building projects for desktop and iOS on my M2 Air. I suspect the issue lies with the MonoGame extension (and therefore MGCB) not working with the latest Visual Studio for Mac.\r\nVisual Studio for Mac 17.4.3\r\nMonoGame extension 3.8.1.303\r\n\r\n<img width=\"912\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/48341015\/216306220-57204e93-259e-4e12-95d1-b882802b57cf.png\">\r\n","I get the same error when trying to build a net 6.0 DesktopGL project on an M1 mac. Does anybody know a workaround, or is there hope for a fix?","Visual Studio for Mac is being retired next year.  MonoGame has already removed the VS for Mac templates from the `develop` branch.\r\n\r\nWould suggest if using a mac to either switch to VSCode or Rider is possible.  \r\n\r\nReference:\r\n* [Visual Studio for Mac Retirement Annoucement](https:\/\/devblogs.microsoft.com\/visualstudio\/visual-studio-for-mac-retirement-announcement\/)\r\n* [Reference PR that removes templates](https:\/\/github.com\/MonoGame\/MonoGame\/pull\/8066)","Oh, I forgot to mention: I got this error when just running \"dotnet build\" from the command line, so it does not seem to (only) be a problem with Visual Studio.","I stand corrected, the error resulted from an error with a relative path in my mgcb file! So it was unrelated to this issue. I am sorry for the confusion! \ud83d\ude4f","Do you mind retrying with the latest develop packages and net8? (and with rosetta enabled)","You need to manually install x64 dotnet 6 sdk for content compilation on M1 macs.","I've added that note to the getting started documentation: https:\/\/github.com\/MonoGame\/monogame.github.io\/pull\/67\r\n\r\nmacOS checklist:\r\n- install the x64 .NET SDK\r\n- install and\/or enable Rosetta if running on M1+\r\n- if targeting mobile, make sure that the corresponding workload is installed (e.g. ```dotnet workload install ios```)","Please refer to #8124 while this issue is being worked on."],"labels":["Linux","MacOS","Setup"]},{"title":"Effect Compilation Fails via Wine on Arch Linux","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nThis is a follow-up to https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7360. I'm still experiencing the same issue on Arch Linux.\r\n\r\nI need to update an existing game to work on newer operating systems, including Arch Linux for the Steam Deck. I followed all the steps and thought I did everything correctly, but the output is still the same as it was for me [two years ago](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7360#issuecomment-699165838):\r\n\r\n> ```\r\n> Build started (redacted)\r\n> \r\n> (redacted)\/Desktop\/Test\/Test\/Content\/File.fx\r\n> (redacted)\/Desktop\/Test\/Test\/Content\/File.fx: \r\n> \r\n> Build 0 succeeded, 1 failed.\r\n> \r\n> Time elapsed 00:00:03.82.\r\n> ```\r\n\r\nI have [`wine-staging 7.20-1`](https:\/\/archlinux.org\/packages\/multilib\/x86_64\/wine-staging\/) installed, which includes 32-bit and 64-bit versions of Wine.\r\n\r\nI'm honestly not sure how others have managed to get this to work since it never worked for me across 2 different machines and 2 different operating systems.\r\n\r\nAre the instructions updated on the documentation, or am I missing something? I would really appreciate help getting this resolved since it's been a frustrating pain point whenever I want to build my game. Since I updated MonoGame, I can no longer use the pre-compiled shaders I have since it refuses to load as they've been built with an older version of MonoGame.\r\n\r\nThanks in advance!\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.1\r\n\r\n#### What operating system are you using:\r\n- Arch Linux\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["I have this working in Debian 11, wine-7.0 using the script from develop branch here:\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/Tools\/MonoGame.Effect.Compiler\/mgfxc_wine_setup.sh\r\nI had a lot of problems with wine staging and changed to stable, maybe giving a try changing the wine version could help.\r\n","Please refer to #8124 while this issue is being worked on."],"labels":["Linux","MacOS","Setup"]},{"title":"Cannot build Effects on Ubuntu 22.04 in MonoGame 3.8.1","body":"I can't seem to build Effects on Ubuntu 22.04 in MonoGame 3.8.1. I have deleted my .winemonogame, reinstalled Wine, and re-ran mgfxc_wine_setup.sh (I did all of this today, after the recent fixes to mgfxc_wine_setup.sh).\r\n\r\nThe shader does build on my Windows PC and it also built on Ubuntu before the upgrade to .NET 6.\r\n\r\nI don't get any error message. Here's the entire build output for the project:\r\n\r\n```\r\n1>dotnet tool restore\r\n1>Tool 'dotnet-mgcb' (version '3.8.1.263') was restored. Available commands: mgcb\r\n1>Tool 'dotnet-mgcb-editor' (version '3.8.1.263') was restored. Available commands: mgcb-editor\r\n1>Tool 'dotnet-mgcb-editor-linux' (version '3.8.1.263') was restored. Available commands: mgcb-editor-linux\r\n1>Tool 'dotnet-mgcb-editor-windows' (version '3.8.1.263') was restored. Available commands: mgcb-editor-windows\r\n1>Tool 'dotnet-mgcb-editor-mac' (version '3.8.1.263') was restored. Available commands: mgcb-editor-mac\r\n1>\r\n1>Restore was successful.\r\n1>dotnet mgcb \/quiet \/@:\"\/home\/brett\/Development\/Macabre2D\/Content\/Content.DesktopGL.mgcb\" \/platform:DesktopGL \/outputDir:\"\/home\/brett\/Development\/Macabre2D\/Content\/bin\/DesktopGL\/Content.DesktopGL\" \/intermediateDir:\"\/home\/brett\/Development\/Macabre2D\/Content\/obj\/DesktopGL\/net6.0\/Content.DesktopGL\" \/workingDir:\"\/home\/brett\/Development\/Macabre2D\/Content\/\"\r\n1>\/home\/brett\/Development\/Macabre2D\/Content\/Shaders\/ColorFill.fx\r\n1>\/home\/brett\/Development\/Macabre2D\/Content\/Shaders\/ColorFill.fx: \r\n1>Skipping \/home\/brett\/Development\/Macabre2D\/Content\/Sprites\/Automotons\/Walker.png\r\n1>Skipping \/home\/brett\/Development\/Macabre2D\/Content\/Sprites\/Background\/Railing.png\r\n1>Skipping \/home\/brett\/Development\/Macabre2D\/Content\/Sprites\/Environment\/Ground.png\r\n1>Skipping \/home\/brett\/Development\/Macabre2D\/Content\/Sprites\/Environment\/GroundRamp.png\r\n1>\/home\/brett\/.nuget\/packages\/monogame.content.builder.task\/3.8.1.303\/build\/MonoGame.Content.Builder.Task.targets(142,5): Error MSB3073 : The command \"dotnet mgcb \/quiet \/@:\"\/home\/brett\/Development\/Macabre2D\/Content\/Content.DesktopGL.mgcb\" \/platform:DesktopGL \/outputDir:\"\/home\/brett\/Development\/Macabre2D\/Content\/bin\/DesktopGL\/Content.DesktopGL\" \/intermediateDir:\"\/home\/brett\/Development\/Macabre2D\/Content\/obj\/DesktopGL\/net6.0\/Content.DesktopGL\" \/workingDir:\"\/home\/brett\/Development\/Macabre2D\/Content\/\"\" exited with code 1.\r\n1>------- Finished building project: Macabre2D.Platforms.DesktopGL. Succeeded: False. Errors: 1. Warnings: 0\r\n```\r\n\r\nHere's the shader:\r\n```\r\n#if OPENGL\r\n    #define SV_POSITION POSITION\r\n    #define VS_SHADERMODEL vs_3_0\r\n    #define PS_SHADERMODEL ps_3_0\r\n#else\r\n    #define VS_SHADERMODEL vs_4_0_level_9_1\r\n    #define PS_SHADERMODEL ps_4_0_level_9_1\r\n#endif\r\nextern float4 Fill;\r\nsampler InputTexture;\r\n\r\nfloat4 MainPS(float2 textureCoordinates: TEXCOORD0): COLOR0\r\n{\r\n    float4 color = tex2D(InputTexture, textureCoordinates);\r\n\r\n    if (color.a > 0) \r\n    {\r\n        return Fill;\r\n    }\r\n\r\n    return color;\r\n}\r\n\r\ntechnique ColorFill\r\n{\r\n    pass Pass0\r\n    {\r\n        PixelShader = compile PS_SHADERMODEL MainPS();\r\n    }\r\n};\r\n```\r\n\r\n<!-- System stats -->\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.1\r\n\r\n#### What operating system are you using:\r\n- Ubuntu 22.04\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n","comments":["Likely not the cause but you have a version mismatch between the tools and the latest release of MonoGame. Your project uses the 303 build (which is the correct 3.8.1 version) but your tools are on build 263 which has been deprecated and unlisted from nuget due to a critical bug. This is because you created your project with the wrong nuget templates or wrong VS extension. You can upgrade your tools by updating your ```.config\/dotnet-tools.json``` file.\r\n\r\nYour output doesn't tell anything about the error. I would suggest trying to run your shader through 2MGFX manually to get an output.","Same Error on MacOS (Apple M2). I test to build effects of https:\/\/github.com\/prime31\/Nez\/tree\/master\/DefaultContentSource\/effects. But build failed and no error is display.\r\n\r\nI have installed .net6 runtime (x64).  Tool is 'dotnet-mgcb' (version '3.8.1.303') \r\n\r\n","Maybe caused by #7898","> Likely not the cause but you have a version mismatch between the tools and the latest release of MonoGame. Your project uses the 303 build (which is the correct 3.8.1 version) but your tools are on build 263 which has been deprecated and unlisted from nuget due to a critical bug. This is because you created your project with the wrong nuget templates or wrong VS extension. You can upgrade your tools by updating your `.config\/dotnet-tools.json` file.\r\n> \r\n> Your output doesn't tell anything about the error. I would suggest trying to run your shader through 2MGFX manually to get an output.\r\n\r\nI updated the .config\/dotnet-tools.json file to the 303 build and as you suspected, I am still getting a failed build without error.\r\n\r\n> Your output doesn't tell anything about the error. I would suggest trying to run your shader through 2MGFX manually to get an output.\r\n\r\nI'm unsure how to manually run 2MGFX. Is there a guide somewhere I can follow?\r\n\r\nI appreciate the help.","There is a guide here: <https:\/\/docs.monogame.net\/articles\/tools\/mgfxc.html>.","> There is a guide here: https:\/\/docs.monogame.net\/articles\/tools\/mgfxc.html.\r\n\r\nRunning it this way, it also does not compile the shader and there is no error message.\r\n\r\n> Maybe caused by #7898\r\n\r\nI've run the script with both the x86 and x64 dotnet installs and no luck, unfortunately.\r\n","Could you try running '''dotnet mgfxc''' on your .fx directly to get a proper output to read?","I have the same issue (running in WSL2 Ubuntu 22.04)\r\n![image](https:\/\/user-images.githubusercontent.com\/57374898\/191520962-96bdb14b-5526-4e8b-a79f-91a505e88d69.png)\r\n\r\nGet no meaningful error message when using dotnet mgfxc tool\r\n","That's peculiar. Looks like wine fails at some point.","I tried to debug the mgfxc tool on Ubuntu and as you say wine is failing to run `dotnet tool` but I have very little experience with wine. So, I couldn't gather any more information than this.","@harry-cpp would likely know, but without traces it will be hard to figure out.","Okay so I have managed to get it too work.\r\n\r\nAfter running (Provided by [monogame docs](https:\/\/docs.monogame.net\/articles\/getting_started\/1_setting_up_your_development_environment_ubuntu.html))\r\n```\r\nwget -qO- https:\/\/raw.githubusercontent.com\/MonoGame\/MonoGame\/master\/Tools\/MonoGame.Effect.Compiler\/mgfxc_wine_setup.sh | bash\r\n```\r\n\r\ni run theses commands\r\n```\r\ncd ~\/.winemonogame\/drive_c\/windows\/system32\r\n\r\nDOTNET_URL=\"https:\/\/download.visualstudio.microsoft.com\/download\/pr\/44d08222-aaa9-4d35-b24b-d0db03432ab7\/52a4eb5922afd19e8e0d03e0dbbb41a0\/dotnet-sdk-6.0.302-win-x64.zip\"\r\ncurl \"https:\/\/download.visualstudio.microsoft.com\/download\/pr\/44d08222-aaa9-4d35-b24b-d0db03432ab7\/52a4eb5922afd19e8e0d03e0dbbb41a0\/dotnet-sdk-6.0.302-win-x64.zip\" --output \"dotnet-sdk.zip\"\r\n\r\n7z x \"dotnet-sdk.zip\" -y\r\n\r\nrm dotnet-sdk.zip\r\n\r\n```\r\n\r\nit just reinstalls dotnet sdk in wine for `.winemonogame` instance and now running `dotnet build` in my monogame project build shaders fine.\r\n\r\nSo, I am unsure if there is an issue with the `mgfxc_wine_setup.sh` script and how it unpacks the dotnet sdk but I couldn't see anything funky happening.\r\n\r\n@BrettStory Could you try this work around and see if it fixes the issue for you too?","@KieranFleckney That does fix it for me. Signs seem to point to `mgfxc_wine_setup.sh` somehow not unpacking the SDK correctly.","Cool to know than it's \"just that\". If anyone knows has more insights, feel free to keep commenting (I'm very rarely on Linux to check it out myself).","@KieranFleckney Fixed it for me, too. Thanks a bunch!\r\n","Just want to chime in that this fixed it for me also after upgrading my Ubuntu rig from 20.04 to 22.04. Thanks @KieranFleckney!","Gonna +rep this, @KieranFleckney's solution worked immediately on my Arch desktop after about an hour of head-bashing on vague error messages leading me here. The issue I was getting fed by mgfxc before the fix was `Failed to resolve full path of the current executable [C:\\windows\\system32\\dotnet.exe]`; based on this and the fix I would agree that something's going wrong with the extraction in the install script.","Hey guys, I'm pretty new to MonoGame and having the same issue on Windows, I tried manually replacing the dotnet package in my program files with the one from the download suggested above but it doesn't seem to have done anything. Can anyone tell me what I'm missing? Do I need to apply the changes somehow?","@wayne-dillon this issue was related to people developing on Linux as they use Wine to build. It is very strange you would get this error on Window. All I could suggest is reinstall dotnet via Microsoft website and do fresh install of Monogame too. If the issue still presistes then I would open a new bug report.","Please refer to #8124 while this issue is being worked on."],"labels":["Linux","MacOS","Setup"]},{"title":"MonoGame.Framework.Content.Pipeline does not find ffmpeg\/ffprobe in runtimes folder","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nHi there!\r\nI recently updated from MonoGame 3.7.1.189 to 3.81.303 and from .NET Framework to .NET 6 on my game project.\r\nAnd it has gone very well, thank you for the good job ! :)\r\n\r\nBut I do have a small issue to report with **MonoGame.Framework.Content.Pipeline**. I'm using its package directly in my engine to cook my assets at runtime. (Note: because that package didn't exist in 3.7.1.189, I was using it at version 3.8.0.1375-develop until now. Not the best but it was working. ^^)\r\n\r\n**But by updating my projects to .NET 6** for MonoGame 3.81.303, my projects depending on MonoGame.Framework.Content.Pipeline now output the runtime assemblies inside the **\"runtimes\/{platforms}\/native\"** folder structure.\r\n**Problem is: ffmpeg and ffprobe are not next to the executable anymore and `ExternalTool.Run` is not able to find them, resulting in the following exception when cooking an audio file:**\r\n\r\n```\r\nMicrosoft.Xna.Framework.Content.Pipeline.InvalidContentException\r\n  HResult=0x80131500\r\n  Message=Failed to open file saut. Ensure the file is a valid audio file and is not DRM protected.\r\n  Source=MonoGame.Framework.Content.Pipeline\r\n  StackTrace:\r\n   at Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent..ctor(String audioFileName, AudioFileType audioFileType)\r\n   at Microsoft.Xna.Framework.Content.Pipeline.WavImporter.Import(String filename, ContentImporterContext context)\r\n   at Microsoft.Xna.Framework.Content.Pipeline.ContentImporter`1.Microsoft.Xna.Framework.Content.Pipeline.IContentImporter.Import(String filename, ContentImporterContext context)\r\n   at MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.ProcessContent(PipelineBuildEvent pipelineEvent)\r\n   at MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.BuildContent(PipelineBuildEvent pipelineEvent, PipelineBuildEvent cachedEvent, String eventFilepath)\r\n   at MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.BuildContent(String sourceFilepath, String outputFilepath, String importerName, String processorName, OpaqueDataDictionary processorParameters)\r\n   at Glyph.Pipeline.RawContentLibrary.<>c__DisplayClass24_1.<CookAsset>b__0() in D:\\Remi\\Git\\Papyrus\\External\\Calame\\External\\Glyph\\Glyph.Pipeline\\RawContentLibrary.cs:line 144\r\n   at System.Threading.Tasks.Task`1.InnerInvoke()\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__272_0(Object obj)\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\r\n\r\n  This exception was originally thrown at this call stack:\r\n    Microsoft.Xna.Framework.Content.Pipeline.ExternalTool.Run(string, string, out string, out string, string)\r\n    Microsoft.Xna.Framework.Content.Pipeline.Audio.DefaultAudioProfile.ProbeFormat(string, out Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFileType, out Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFormat, out System.TimeSpan, out int, out int)\r\n    Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent.AudioContent(string, Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFileType)\r\n\r\nInner Exception 1:\r\nException: Couldn't locate external tool 'ffprobe'.\r\n```\r\n\r\nThe workaround is pretty simple: you can set your PATH with a folder containing ffmpeg & ffprobe and it will work. But it's kinda sad that it doesn't find them by default since there are provided by the package.\r\n\r\nNote that it doesn't seems to be an issue for packed\/published executables (like mgcb CLI) since the package runtimes will be output next to the executable in that case.\r\n\r\nAny insight on the subject ?\r\nWould it be possible to make `ExternalTool.Run` look for executables in the valid target platforms \"runtimes\" folders (if existing) ?\r\n(It is already looking for [\"linux\" and \"osx\" folders](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework.Content.Pipeline\/ExternalTool.cs#L129) to resolve ffmpeg & ffprobe.)\r\n\r\n**EDIT**: I have found ways to make the package work (see following comment).\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.1\r\n\r\n#### What operating system are you using:\r\n- Windows \/ Linux\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- WindowsDX \/ DesktopGL\r\n","comments":["I ended being able to use MonoGame.Framework.Content.Pipeline package without computer setup with a bit of configuration on my projects:\r\n\r\n1. As implied by [MonoGame.Content.Builder.Editor](https:\/\/github.com\/MonoGame\/MonoGame\/tree\/develop\/Tools\/MonoGame.Content.Builder.Editor) csproj files, it seems mandatory to provide a **`<RuntimeIdentifier>`** in your executables csproj files depending on MonoGame.Framework.Content.Pipeline (directly or indirectly), among the ones supported by the package (win-x64, linux-x64 & osx), to output correctly the runtime dependencies:\r\n\r\n    ```csproj\r\n    <Project Sdk=\"Microsoft.NET.Sdk\">\r\n      <PropertyGroup>\r\n        <RuntimeIdentifier>win-x64<\/RuntimeIdentifier>\r\n      <\/PropertyGroup>\r\n      ...\r\n    <\/Project>\r\n    ```\r\n\r\n    This allow your project to directly output platform-specific binaries at build and so to copy the corresponding package runtime DLLs next to the executable, including ffmpeg\/ffprobe.\r\n\r\n    That say, you will not have that behaviour if you provide multiple RuntimeIdentifiers, at least not in Visual Studio, since it will require to specify the wanted runtime identifier in the build command line. So in a Visual Studio environment, the best seems to have **one project by platform** if you are using MonoGame.Framework.Content.Pipeline, so each of them can have **a unique RuntimeIdentifier**.\r\n\r\n    Being forced to have platform-specific executable projects when using using MonoGame.Framework.Content.Pipeline seems acceptable but the RuntimeIdentifier property remains kinda obscure and nothing except the csproj files of [MonoGame.Content.Builder.Editor](https:\/\/github.com\/MonoGame\/MonoGame\/tree\/develop\/Tools\/MonoGame.Content.Builder.Editor) hint to it.\r\n\r\n   As I said in my initial post, maybe some code to **resolve the runtime assemblies from inside the output runtimes\/ folder would be ideal** to make the MonoGame.Framework.Content.Pipeline package work without indicate a RuntimeIdentifier in executable csproj files.\r\n\r\n2. I also encountered issues with **mgfxc** dependencies. MonoGame.Framework.Content.Pipeline package is including those dependencies as **content** & **contentFiles** but the problem is that they are not configured to be copied to dependent projects output.\r\n\r\n   To do that, the property **PackageCopyToOutput** might be lacking on the Content item [at line 277 of MonoGame.Framework.Content.Pipeline.csproj](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/ea32c6cbae80614e8115b2bbfbbb73ec7e9d6a2d\/MonoGame.Framework.Content.Pipeline\/MonoGame.Framework.Content.Pipeline.csproj#L227):\r\n\r\n    ```csproj\r\n    <ItemGroup>\r\n      <Content Include=\"..\\Artifacts\\MonoGame.Effect.Compiler\\$(Configuration)\\*\" Exclude=\"..\\Artifacts\\MonoGame.Effect.Compiler\\$(Configuration)\\*.nupkg\" Visible=\"false\">\r\n        <CopyToOutputDirectory>PreserveNewest<\/CopyToOutputDirectory>\r\n        <PackageCopyToOutput>true<\/PackageCopyToOutput>\r\n      <\/Content>\r\n    <\/ItemGroup>\r\n    ```\r\n\r\n    As a workaround, I ended having to include those files as content of my own directly dependent project, using `GeneratePathProperty=\"true\"` and `$(PkgMonoGame_Framework_Content_Pipeline)` to find them:\r\n\r\n    ```csproj\r\n    <Project Sdk=\"Microsoft.NET.Sdk\">\r\n      <ItemGroup>\r\n        <PackageReference Include=\"MonoGame.Framework.Content.Pipeline\" Version=\"3.8.1.303\" GeneratePathProperty=\"true\" \/>\r\n        ....\r\n      <\/ItemGroup>\r\n      <ItemGroup>\r\n        <Content Include=\"$(PkgMonoGame_Framework_Content_Pipeline)\\content\\*\">\r\n          <CopyToOutputDirectory>PreserveNewest<\/CopyToOutputDirectory>\r\n        <\/Content>\r\n      <\/ItemGroup>\r\n      ...\r\n    <\/Project>\r\n    ```\r\n\r\nFor the moment, I'm good with my workaround since everything is done in my .csproj files.\r\n**That say, do you have any feedback about those two issues and the suggested solutions ?**\r\n\r\nThanks.","**Thanks.**.!!!!!    the feedback i have now is that is seems to be right **on point.**   when i recover from a similar issue and fail to even revert to last time it worked,  \r\n\r\n This DOES seem like you are getting to the root of the issue(s)    I will definitely try but I don't even use mp3 and am having very similar issues.   But it's more than just mp3.. its all shared content and multitargeting, with a shared net6 core  that is getting harder to maintain.\r\n\r\n\r\n I willl TRY it  on my   https:\/\/github.com\/damian-666\/MGShadersXPlatform ( which is now broken even for me after a night of hacking, but i reverted changes.. )   and report... the rest below is TLDR. i had quite a miserable nigth, now reinstalling vs 2022 non preview and trying that...   im at the point where i have to reinstall  and clean everything.\r\n\r\n\r\ni think specific  issues that might be fixable in content builder might be \r\n **1.    <BaseOutputPath>..\\..\\bin<\/BaseOutputPath> isn't added... to the path the content builder uses..**   Since it was repeated i put it there.  I don't know if its a good idea tho, because of these issues it might be due to this.\r\n\r\n  vs 2022 issue?    <AppendTargetFrameworkToOutputPath>false<\/AppendTargetFrameworkToOutputPath>  doesnt seem to work have an effect either..  ??  still investigating..   i rather leave it out as  the default is true.\r\nI willl TRY it and report... the rest below is TLDR. i had quite a miserable nigth, now reinstalling vs 2022 non preview and trying that...   im at the point where i have to reinstall  and clean everything.\r\n\r\nI had my solutions working with a core net6 lib ( was netstandard20 but thats clearly left for dead) ,   for wpf netcore, level editor, a windows dx, a console GL, and an android GL each with a separate proj file as you suggested.\r\n\r\nthe content build should only be in the exe launcher.. it has a link to the content  file by add existing as LINK.. BUT minie it uses a shared bin folder requiring a path like ..\\bin so that build products aren't copies all over the place..  (I'm not sure if theis is a great idea, its an optimization and mabye its causes issues).   the content builder should ONLY in the targets, one per project, target as you suggested... with a link to the the content.mgcb file.       the core module has the content there deeper in the tree.. it needs get copied back up the tree and deal with the added target folders.   The core  is linked to  only MG lib as 3.81. latest hotfix, w GL but as a proxy , its not making GL get used jsut to get the MG stuff to build.   the contents sources reside ,  there build its should not be build there.. However, the dependency stuff  in vs studio, might need it to be marked as something other than None. ... so you can touch an fx file , build and see the result.\r\n\r\nBUT then, I had ti working for me at least, but i went to to make it simpler, use ANY CPU , just debug and release,  I remove these explicit paths and targets , ( which cause permutations and explosive configurations in sln  and proj files) but, mabye   brings up the package ID thing you found out about..   i remove analysis and deployment on dlls since the whole thing is supposed to be packaged higher up.  now its all broken..\r\n\r\n\r\nSo , as a WARNING..  to all USERS.. if you encounter this stuff.. both MGcontent and VS studio has serious flakiness.  ( and now, so do I)   I recommend manually building ( even wiht the visual UI content builder ) , copy your content to the exe and keep working on your own problems that aren't related to shaders and graphics mabye,  till this stabilizes..\r\n\r\n\r\nMIght  have more like using the other scripting build stuff, command line or  the continuous integration use, but i'm ok with Vs2022 ive a tiny team.\r\n\r\nmy ideal config would use AnyCPU wherever it can.. BUT \r\nI dont know if ANYCpu is a good choice.   i might just have any CPU.. ARM64, and   x64, but there are arguments that 32 bit simd code is faster and its still supported.\r\n\r\nbut as you mentioned.. removing targets causes some packaging ID or related issue.     (  so it broke when i used ANYCPU, BaseOutput Path and remove some stuff i though wasnt needed.. like packaging on the dlls.   \r\n\r\n\r\nADVICE, if you are close to release and using netcore 6 alread the old way,  stay wiht mg 3.8 and DONT UPGRADE !    most companies use 2 year old tools by the time they ship.   I had netcore 6 working iwht MG 3.8, and the old 3.1 content.. ,  fine enough..  should have stayed there  fro months, but . Now I'm in too deep, determined to get through ...ill have to sooner or later.\r\n\r\n\r\nOr if this above doesnt work, manually copy the content targets and just wait till its fix or script it.\r\n\r\nON a general note pretty much everyone is struggling with all this x platform stuff, across the board. NOW, i just want a working dev setup, while this gets sorted out.  there are issues that may need changes , working basic samples, MG templates AND vs2022 tooling..   i just need to target WPF...netcore windows dx and GL,  and android to get back to my own work.. im 3 weeks behind because of all the reconstruction..  if  i had a major company, close to shipping id be using 2 year old tool chain because this- always- happens even, targeting on one platfrom.   but I'm not near release and want to embrace the new stuff so i know where to optimize or not.. i know its needed to be done, all these major updates,  but i think its early to expect perfect operations, and IMO way to early to deploy and ship anything AOT, or any way at all.. .. not even close.   i haven't bundled to AAB or build AOT or deploy anything properly  sent  a new bundle to to Google play beta  and i dont expect to for MONTHS.   but i do need to get back to my development.\r\n\r\n  i think the core devs are resting as they should, but flux on Open sources from Microsoft and Jetbrains and indies, other hubs is daily ,  but i want to stay with mg 3.8.1 even if a few hacks needed for now.\r\n","UPDATE: so https:\/\/github.com\/damian-666\/MGShadersXPlatform  is updated , i hope someone else can build it and run it, at on vs2022, and i think fully works and copies stuff correctly..  i hope.\r\n\r\n  this is  a bit #offtopic, as far as your problems with  ffmpeg , but its relevant as you can have trouble with even basic multitarget copies of compiled assets going to where they need to go and setting up solutions.  I agree one project per platform, one shared net6 core with Game class and some other net6 libs with shared code is best.   now i have no issues that need fixes or special properties, I just got my tools and or files in a bad state ... In my case , to get sane results i needed to clean all local caches , user files and temp files recently placed by dev studio, clear any nuget stuff..   and fix my relative paths.    still, deploying to Android might launch the emulator and THEN to the phone.. its just flaky, takes lots of time and careful checking.  But its workable now.   \r\n\r\n\r\n In my case , needed to clean all local caches , user files , nugets, and temp files recently placed by dev studio, clear any nuget stuff..   and fix my relative paths to ..\\bin.    stiil deploying to Android might launch the emulator and  but THEN later to the phone.. vs 2022 preview is good, its just flaky, takes lots of time and careful checking.\r\n\r\nso **corrections** : ANY cpu does work fine for me now.. The system figures it out.  and on android, even deploying AOT, i think.\r\n. i did add and add  an ARM64 config, I'm not sure its necessary.    it does complicate the sln .\r\n\r\n**There is not a problem with \u00a0BaseOutputPath  to ..\\bin, \u00a0as i suspected in my earlier comment.**.\r\n\r\nmy BaseOutputPath is ..\\bin and my Package output path is $(OutputPath) . \u00a0so its ok now, no repeat folder symbols, no excessive copying except in obj maybe.. its good enough.\r\n\r\n\r\nOn the first build,  wth this solution in VS 2022..\r\nFirst is if you get a warning \u00a0about \" Fast Up-to-date Check\", what's happening is that it might detect that its not syncing, or that its building too often. \u00a0   in my case i can ignore it.    the second build is fast and if i touch an asset it does build and place it.  I did nothing special but in some cases one may have to , if builds are slow every time and you didnt change any core assets..\r\n\r\n\r\nsomething like this can fix this issue:  \r\n\t\t \u00a0<UpToDateCheckInput Include=\"Source Codes\\MGCore\\Content\\Content.mgcb\"\/>\r\n\t\t \u00a0<UpToDateCheckInput Include=\"Source Codes\\MGCore\\Content\\ClipShader.fx\"\/>\r\n\t\t \u00a0<UpToDateCheckOutput Include=\"MGCore.dll\" \/>\r\n\t \u00a0<\/ItemGroup>\r\n\r\ngot this from here..\r\n\u00a0https:\/\/github.com\/dotnet\/project-system\/blob\/main\/docs\/up-to-date-check.md\r\n\r\n\r\n#aslo offtopic, sorry ...\r\nI tried to hide the console window in DX but that works only when launched from debugger, via some trick in console Program.cs .. its probably not hard to make another exe to launch your console window hidden or find another way.\r\n\r\ntested desktop GL on windows, desktop DX, texture change, touch and shader touch, build\/ copy on all those see the new xnb, and result, on Android emulator v 23 and arm 64 Samsung via usb, release and debug with thsi setup.. its not quite a basic shared asset game core template but close.   if you want to target just phones, tablets and pcs.. at least, thats a billion devices  or so","@damian-666 Thanks for your feedbacks but it's indeed a bit off-topic. I opened that issue to talk about the **MonoGame.Framework.Content.Pipeline** package specifically. You should consider talking about your issues on MonoGame forum or opening other issues so it's not confusing. :)\r\n\r\nHere is a TLDR of my original messages on MonoGame.Framework.Content.Pipeline:\r\n\r\n---\r\n\r\nRuntimes and content files of package MonoGame.Framework.Content.Pipeline are not found by default when referencing the package so parts of the pipeline are not working. It requires additional setup at the time and there are small info about it.\r\n- **Runtimes (like ffmpeg) are not found by default when output in their default runtimes\/ folder.**\r\n  - **Fix**: improve `ExternalTool.Run` so it can found platform-specific runtimes from the default runtimes\/ folder.\r\n  - **Workaround**: create platform-specifc executable .csproj files using an unique `RuntimeIdentifier`, allowing runtimes to be directly output next to the executable.\r\n- **Content files (like mgfxc) are not output to the executable folder.**\r\n  - **Fix**: use property PackageCopyToOutput=\"true\" on the Content item [at line 277 of MonoGame.Framework.Content.Pipeline.csproj](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/ea32c6cbae80614e8115b2bbfbbb73ec7e9d6a2d\/MonoGame.Framework.Content.Pipeline\/MonoGame.Framework.Content.Pipeline.csproj#L227).\r\n  - **Workaround**: it's possible to manually include them in your .csproj files referencing the package using `GeneratePathProperty=\"true\"` and `$(PkgMonoGame_Framework_Content_Pipeline)`.\r\n\r\n(see my previous messages for details)\r\n\r\nThe two issues have both workaround so I can do with them but I hope it will possible to fix that in next versions.","Please refer to #8124 while this issue is being worked on."],"labels":["Linux","MacOS","Setup"]},{"title":"Improving the console runtime and lifting the C#5 limitation.","body":"**Disclaimer:** This discussion is going to be very awkward because most of it can't be discussed publicly for legal reasons, but I feel like the community deserve some context (on what can be public) in regard to some details. So bear with me if this gets frustrating with no obvious answers.\r\n\r\n-------------------\r\n\r\nIf you've been reading the repository, you might have noticed that contributing code to MonoGame requires a strict compatibility toward C# 5.0 and .NET 4.5.2, even though MonoGame targets .NET 6.0 only. This is a frequent source of frustration because we owe this limitation to gaming consoles and concerns are usually met with a \"deal with it\" kind of answer without much explanation.\r\n\r\n> This only applies to the code of MonoGame itself. Games made with MonoGame are not obliged to follow that rule (unless they wish to one day be ported to consoles).\r\n\r\nSo this is the long version of it, and a disguise call for contributions.\r\n\r\n# Why can't we talk about consoles publicly or release publicly the console implementations of MonoGame?\r\n\r\nWhen you work with a console manufacturer, you are legally bound to secrecy. Any person accessing a console SDK has to first to go through a thorough selection and registration process, ending up with the signing of a Non-Disclosure Agreement (NDA). This NDA implies that no code using console SDK are shown to anyone who hasn't signed the same NDA, and manufacturers also enforce upon software distributors like MonoGame to abide to a verification process for any developer willing to see that code. Sometime it also go as far as not being allowed to even mention the console brand publicly.\r\n\r\n# How does MonoGame run on consoles?\r\n\r\nFirst and foremost, .NET can't target consoles (at least officially). It is not a supported scenario by Microsoft, and will likely never be. Which means that, by default, MonoGame can't run on consoles.\r\n\r\n.NET is open-source you might say, so why not just compiling it on consoles? It's not that simple, porting something to console never is. Consoles are not linux, they are their own beast and basically all the system layer has to be rewritten, and this requires some of the most technical knowledge (and time). Also, .NET is a giant, just look at [the size of it](https:\/\/github.com\/dotnet), it's a multi-decade project with hundreds of people involved.\r\n\r\nEnters BRUTE. BRUTE is a private technology made by Sickhead Games, and most notably our very @tomspilman. Its development started about a decade ago. The idea was to write MonoGame's own .NET runtime from scratch, in a very thin way with the bare minimum needed for MonoGame to work, with the intent to make it less daunting to port to new consoles should any of them release in the future. BRUTE has been written over several years, and Tom had a very deep knowledge of how the internals of .NET work from before he ventured into games. It has been a tremendous amount of work and knowledge.\r\n\r\nBRUTE is a transpiler. It doesn't compile C#. It takes compiled dll, read their IL code, and convert it to console compatible C++. But that's not enough, it also plugs that C++ to a custom minimal runtime for memory management, and some features that C++ can't do as-is. It then compiles the C++. BRUTE also applies a bunch of MonoGame-specific optimization to make it super fast. It is notably magnitude faster than the official .NET runtime (sometime 10 times faster).\r\n\r\n# So why is there any problem?\r\n\r\nLike noted, BRUTE's development started almost a decade ago, when .NET 4.6 wasn't even a thing. So for the most part, there was no problem. Also, if you followed properly, BRUTE is no small project, it involves a deep knowledge of .NET, and porting .NET it is no small task either.\r\n\r\nThe problem is that it's such a big project, that \"upgrading its supported version\" basically means almost entirely rewriting it. Which is not a task that can happen easily considering its decade of history and the knowledge required. We're talking about months of work, full time.\r\n\r\nAlso, working with BRUTE implies that anyone willing to undertake the task has to be NDA'd with consoles. The combination of time required, knowledge, and legal binding, makes it ultra hard to find anyone even available to work on it. Tom, for instance, is a busy bee who can't afford it, while I, lack the time and knowledge.\r\n\r\n# Why not allowing MonoGame to surpass consoles implementation?\r\n\r\nBecause console developers are at the core of MonoGame, and having to maintain two separate tracks would make maintenance unmanageable. It would also grow frustration if users on the \"new\" MonoGame start wanting to port their project to consoles to be met with a \"it's not the same, you have to change this and this\".\r\n\r\nSome new users might say \"okay, but you're ignoring new users and that makes MonoGame less appealing\", which is debatable. It's a side of the same coin. Console developers and console support of MonoGame is mainly what makes the framework interesting to new comers, ignoring it would drive the appeal down. As much as ignoring new comers would end up with a long term decrease of console users.\r\n\r\nThere's nothing simple in that, and there is no obvious answer to it.\r\n\r\n# What about NativeAOT or Mono on consoles? Aren't they promising?\r\n\r\nYes, and no.\r\n\r\n## NativeAOT\r\n\r\nNativeAOT is a great piece of tech, and exactly what MonoGame would need. The problem is the same as BRUTE, though. It doesn't exist on consoles, and porting it to consoles is pretty much the same amount of work and knowledge involved than upgrading BRUTE. Some community members (from FNA, like @TheSpydog and other, I don't know everybody so sorry if I miscredit) did manage to have it to run on some (not all) consoles, but it's such an amount of work that it's also very likely that these versions will end up being outdated and driving C# versions backward because nobody can keep up with Microsoft's speed of innovation.\r\n\r\n## Mono\r\n\r\nMono doesn't officially exist on consoles. There are initiatives (and we should be respectful for that), but none that we are allowed to discuss publicly. The main takeaway is that yes, it might be possible to rely on it for some machines, but not all, and there is no guarantee that any new machines would be supported as well. Despite the hard work put into it, it is difficult to make long terms bet on it.\r\n\r\nAlso, Mono often is the least performant runtime. For many games it ended up being a bottleneck. It is becoming less true with the newest generation of consoles, but might still be a concern.\r\n\r\n# So what now?\r\n\r\nWe need contributors with knowledge in the .NET runtime, and NDA'd with all consoles. Which is, well, rare. We're trying to unite our effort with the FNA team, which depends on the same tech to consoles, but that is not enough.\r\n\r\nThere is no golden path. Upgrading BRUTE is as much a valid choice as porting NativeAOT.\r\n\r\nSo that's it, that's our call to contribute. Because otherwise the C# 5 \/ .NET 4.5.2 limitation will not be lifted anytime soon.\r\n\r\nI hope that you now understand the context.","comments":["Great post, looking forward to the discussion. Here's my thoughts.\r\n\r\n### Brute vs Native AoT\r\n\r\ni'd like to say how much i appreciate the work that Tom has put into Brute, along with other contributors. there's a lot of value in Brute, specifically the performance of transpiled code on consoles. do we have performance comparisons between native aot code and brute'd code? which is faster? performance requirements for consoles are becoming less important as consoles get more powerful, but i would hate to sacrifice a x10 speedup in favor of new language features that might not even be used. if native aot is significantly slower, is it worth pivoting away from brute? if the time investment is the same (porting native aot vs updating brute), why not rewrite brute to work with .net6 and keep the monogame specific optimizations and faster c++ code? \r\n\r\n### Contributing\r\n\r\ni have the ndas, and the time, but not the knowledge or experience to meaningfully contribute to help porting brute or native aot. there are other developers like me, who want to contribute but are unsure how to do so. is there a way to break the process down into smaller tasks that can be explained and delegated? the talent exists, the bottleneck seems to be knowing what to do and how to do it, and testing that it works - once maintainers have decided the direction they want to take monogame. we have console specific brute repos that we can collaborate on rn, but to be honest, they're not very well organized, or explained\/documented, and could use a lot of improvement. so imo, it's difficult to work with and contribute to the already existing brute repos, and making that process easier and clearer will likely lead to more contributors. \r\n\r\n### What Makes Monogame Appealing?\r\n\r\ni think it's a combination of being open source, being established (with popular games having shipped), being free, and having the ability to target consoles. xna\/monogame has never been known for cutting edge 3d. the majority of the popular games made with MG seem to be pixel art 2d games (Celeste, Stardew Valley, etc). for cutting edge 3d, Unreal seems like the best option. for easy and fast 3d, Unity seems like the best option. the barrier to entry for 3d is much, much lower with Unity, and Unity can target consoles. there's other frameworks and engines that could be mentioned here, but the underlying point i'm making is this: 2d pixel art games are monogame's bread and butter. that's what MG is well known for, and i would argue that is what attracts a lot of developers to use MG. that is what led me to choose MG, about a decade ago. and in that time, i have yet to see a framework appear that serves the niche of crossplatform + console 2d pixel art games as well as MG does. the majority of developers in the discord asking about mg are asking questions related to 2d pixel art games. the majority of posts in showcase in the discord are about 2d games. so, i think the majority of MG developers are developing 2d pixel art titles. it might be worthwhile to consider making a version of MG that is targeted towards 2d games, LTS, + consoles (brute & .net 4.5), and one that is targeted to 3d and modern pipelines (.net 6, native aot, compute shaders, vulkan, etc). the argument could be made that modern 3d games aren't being made with MG because of the limitations that are being imposed on MG by consoles (compute shader, for example). so, i dont know if it's possible to satisfy the two party audience of MG with only one version of the framework. there seems to be a push towards more modern features, while MG is still being anchored to 4.5 and c# 5. we dont want to lose the enthusiasm and work that talented developers have put into modernizing MG.\r\n\r\n### Simplifying Monogame?\r\n\r\nwould it be possible to create a version of mg targeted for consoles that has limited functionality? the less there is to port, the easier it should be. there's a lot of stuff inside monogame, and maybe removing some of that stuff would make monogame more lightweight and make the task of migrating to native aot or updating brute easier. i know this would introduce breaking changes, but the alternative is maybe mg never gets ported to native aot and brute never gets updated because the task is too large, complex, and expensive. if the problem with porting is the scale and complexity of monogame, then how do we reduce the scale and complexity of monogame? \r\n\r\n### Cross Version Codebases\r\n\r\ni maintain versions of my game on mg 3.7 using C# 4.5 + dx project, and 3.8 w\/ opengl for mac\/linux. i've got a version working on switch too, via 3.7. i'll be migrating to 3.8.1 soon and using .net 6 too, with vs2022. so i know its possible to write game codebases that are more or less language version + mg version independent. But - requiring an older, unsupported language version and runtime isn't going to be appealing to developers who want the latest features. i can understand, and agree with, both perspectives. i think splitting monogame into two versions is probably the best way to satisfy the two party audience of mg: developers who want stablity and LTS for their console and crossplatform games, and developers who want the latest features and modern pipelines. it would be ideal if monogame could stay a single version that serves all developer interests, but i'm just not sure if that's possible rn.","As someone who has done a hundred of console releases with MonoGame, quite honestly, if I had to care about sync'ing 2 implementations for 11 platforms every time I need to port something (or sitting on newer versions), I would have quit gamedev and gone raising goats for years by now. MonoGame, as it is designed today, allows me to have a single unique codebase for all my projects, and that is using 3.8.1.\r\n\r\nSplitting MonoGame is a solid no in my opinion. The project is already very complex to maintain with its 11 platforms, I wouldn't expect this to make any good to anyone involved into maintaining it. Ultimately, we should look into making the project more maintainable, not more complicated and convoluted than it already is.\r\n\r\nActually this is not about MonoGame. MonoGame itself isn't _that_ complex to maintain because for the most part it is just stable. There is nothing much to simplify which would have a significant impact of consoles because most of MonoGame is in C#, not native code. For instance, there would be no reason to remove 3D support because even things as (visibly) simple as the SpriteBatcher use the same render pass as 3D. Which means that, if you have the SpriteBatcher running, you also have the 3D layer done, and for the most part, it's just C# code and nothing console specific.\r\n\r\nMonoGame on consoles is already as simplified as it can be. Some parts of it are not implemented, but we're already down to its minimum considering what actual clients need. The problem is not MonoGame itself, but the console runtime.\r\nMonoGame as a cross-platform framework is doing very fine. It's not about MonoGame, it doesn't need to be split. The problem is only the runtime. There's reason to bend MonoGame around that if MonoGame itself is fine. It's like changing the engine of a car because the tires are getting old.\r\n\r\n(There is space on the market for specialized 2D engines on consoles, but that's an entirely different discussion.)","3.8.1 sounds like its going to simplify my codebases. i'm excited about updating. i've been waiting for early bugs to be ironed out.\n\nmg as a single version - how do we add things like compute shaders while also maintaining console targets? \n\nit seems the console runtime is the largest challenge. is there a way to reduce what is supported in the runtime so that less needs to be ported? since the runtime has a finite number of types, classes, and methods we should be able to prioritize the most commonly used ones and triage the porting process. ideas or thoughts on tackling the runtime porting?","> how do we add things like compute shaders while also maintaining console targets?\r\n\r\nI believe that the current state of MonoGame and its interconnected projects don't allow for breaking changes such as changing the shader pipeline. So it's basically going nowhere for now. What this PR represents is unsettling. I mean, cpt-max work is great, I'm really not diminishing that, but the community has transformed this PR into the symbol of MonoGame being conservative, and that's plainly absurd because none of the people who complained about this PR not being merge intended to actually use compute shaders (you noted yourself that the vast majority of MonoGame's users care only about 2D). It's just a symbol, and it is used to drive debates from the real problems which needs to be solved first.\r\n\r\nYes, MonoGame is open to breaking changes and evolutions.\r\nNo, it's not going to happen while more pressing matters are not considered. We need good foundations to build taller houses.\r\n\r\n> is there a way to reduce what is supported in the runtime so that less needs to be ported?\r\n\r\nIt's already down to the most minimal runtime possible. That was the whole idea behind BRUTE, being brutally minimal.","hmm, this is quite the complex topic. i'd like to help and contribute, any advice or direction is appreciated. for now, i'll focus my time on mg documentation and articles. i hope we figure out a compromise that suits all developer interests.","> drive debates from the real problems which needs to be solved first.\r\n\r\nNow that things seem to start moving again, I think a roadmap defining those problems would be very useful. It's very hard to plan ahead when there's no clue about what's going on. A little bit more information about console platforms wouldn't harm either. I've been struggling to port a 3d game I did to consoles because of the high amount of unimplemented features I'd have loved to know beforehard.\r\n\r\nI know that NDAs make difficult to talk about this kind of things, but something like \"MRT is not implemented in any console platform\" (at least of the ones I have access to) or \"BasicEffect doesn't work out of the box on some platorms\" would have helped me a lot when deciding wether to choose MonoGame or not (I'd probably have still chosen MonoGame because I love it, but I'd have done things differently)\r\n\r\nThe \"stick to C# 5\" is only barely true if you're doing 2D games (and not using await). I can assure you that discovering that 3.5 years into a project is painful, specially when the main audience of your game genre is console.\r\n","I also like that MonoGame isn't split in two and considered stable.\r\n\r\nThere's another project that could be interesting for those that want a smaller set of features: <https:\/\/github.com\/bottlenoselabs\/katabasis>. Maintained by @lithiumtoast ","Most of the prioritized projects are listed [here](https:\/\/github.com\/MonoGame\/MonoGame\/projects?type=classic).\r\nI also have a community post in the work to shed some light on all of this and call to participate.\r\n\r\nWhat we hoped to convey is to prioritize making MonoGame more welcoming (i.e. easier to use, easier to setup, and more accessible documentation and resources), then future-proofing it, then breaking stuff.\r\n\r\nBeside documentation\/tutorial, the two big projects that kind of blocks everything from innovating rapidly are:\r\n- #4571 \r\n- This present one\r\n\r\nThe other big project that we had planned is partly referenced in #4571 as well: removing all platform code from the C# assembly to have only one unique assembly to rule them all, and offloading all platform code to swappable native dll.\r\n\r\nPast these, it's basically party hard in regard to adding new features or breaking stuff.","I'm a beginner and don't know much but why can't there be made a monogame in C++ just for the consoles (which can also be run on desktop)?\r\nThis will need to be a clone of normal monogame.\r\n\r\nAnd the way you can use C# code cross-platform: there need to be made a C# wrapper with same syntax as the \"normal\" monogame that calls the monogame C++ DLL just for the consoles only. This C++ dll can then be adjusted (added specific code for a console) for private console code which is not public released.\r\n\r\nIn this way there is no need for BRUTE or anything else. In case there is added a new feature to monogame, the C++ dll needs to be updated with C++ code for that same feature. \r\n\r\nMy apologies if I'm telling impossible things but to me it seems possible. I also used C# wrappers for C++ libraries in the past too.\r\n","> What we hoped to convey is to prioritize making MonoGame more welcoming (i.e. easier to use, easier to setup, and more accessible documentation and resources), then future-proofing it, then breaking stuff.\r\n\r\nGreat! The 3.8.1 is already super easy to use and install! I hope future versions will be exactly the same (visual studio extension and everything using nuget packages because this is THE way to do it)\r\nIt's just the missing documentation that needs attention now.\r\n","The issue is that consoles don't allow ANY C# (or any other JITted languages for that matter) on consoles for security reasons. Rewriting MonoGame in C++ is not going to fix the issue if games are then written in C# anyways","> I'm a beginner and don't know much but why can't there be made a monogame in C++ just for the consoles (which can also be run on desktop)?\r\n> This will need to be a clone of normal monogame.\r\n\r\nYou're suggesting the creation of an entirely new project rewritten from scratch and not compatible with existing code. That's basically asking console developers to scrap their game entirely and to the MonoGame team to have even more projects to maintain.\r\n\r\n> And the way you can use C# code cross-platform: there need to be made a C# wrapper with same syntax as the \"normal\" monogame that calls the monogame C++ DLL just for the consoles only. This C++ dll can then be adjusted (added specific code for a console) for private console code which is not public released.\r\n\r\nConsole implementations already work that way. The plan is to make all of MonoGame work that way. It's what I linked to earlier.\r\n\r\n> In this way there is no need for BRUTE or anything else. In case there is added a new feature to monogame, the C++ dll needs to be updated with C++ code for that same feature.\r\n\r\nThis is a very large misunderstanding of how C# and .NET work. I don't have the patience nor the time to start a crash into that, so I'll leave you doing your own research.\r\n\r\n> The issue is that consoles don't allow ANY C# (or any other JITted languages for that matter) on consoles for security reasons.\r\n\r\nCorrect. So it's just about just-in-time compilation, and not quite linked to C# itself (which doesn't force us into JIT'ing).\r\n\r\nBut the real reason C#\/.NET doesn't exist on consoles, is because it isn't within .NET official scope, and it isn't on Microsoft's roadmap. There are initiatives within Microsoft, but it's nothing officially supported.","> > And the way you can use C# code cross-platform: there need to be made a C# wrapper with same syntax as the \"normal\" monogame that calls the monogame C++ DLL just for the consoles only. This C++ dll can then be adjusted (added specific code for a console) for private console code which is not public released.\r\n> \r\n> Console implementations already work that way. The plan is to make all of MonoGame work that way. It's what I linked to earlier.\r\n\r\nIs it correct console manufacturers buy BRUTE from Sickhead Games and then \"glue\" their own C++ console SDK together with the open source part of MonoGame by using BRUTE? So BRUTE is really the bridge from C# code to their own C++ SDK for the particular console?\r\n\r\nThanks for this interesting explanation!\r\n","> Is it correct console manufacturers buy BRUTE from Sickhead Games and then \"glue\" their own C++ console SDK together with the open source part of MonoGame by using BRUTE? So BRUTE is really the bridge from C# code to their own C++ SDK for the particular console?\r\n\r\nNo, this is a fantasy.",">BRUTE also applies a bunch of MonoGame-specific optimization to make it super fast.\r\n\r\nIs BRUTE usable outside of MonoGame\/FNA? If so, given the lukewarm responses here (+1 fiery response), this might seem the only way to get talent on the project.","BRUTE is \"just\" a .NET runtime. It is not bound to MonoGame\/FNA and it can be used to run anything that is .NET on those machines. But it is worth noting that, like NativeAOT, the very nature of AOT compilation make it so many features of the .NET runtime are stripped out. For instance, reflection or code generation can't work in a AOT context.",">For instance, reflection or code generation can't work in a AOT context.\r\n\r\nCode generation is a given but surely reflection is supported in some way with BRUTE (MonoGame itself uses reflection), even if it is as simple as NativeAOT's rd.xml reflection hints","Yes and no. The rd.xml thing is only to avoid trimming on reflected types, BRUTE has the same mechanism to force it to not trim specific types (typically, the content pipeline ContentReader types). But reflection is not limited to that, there is a lot of runtime stuff that don't depend on trimming and which won't work, being on NativeAOT, BRUTE, or any other AOT of .NET such as Unity's IL2CPP. Anything like Assembly.Load, GetAssembly, GetMethod, GetProperty, and basically marshalling generics, just can't work with AOT compilation. In that respect, BRUTE tries some hacks to allow limited support (like Assembly metadata), but it's hacky and greatly increase compilation time. NativeAOT just strips it, and it even has a mode to entirely remove any kind of reflection to drastically reduce the size of the compiled runtime.\r\n\r\nFor example, well spread libraries like NewtonSoft.JSON are notorious for not working with any AOT compiler. There are hacked versions around which remove reflection and IL emit for it to work there.","@mrhelmut \r\n> you noted yourself that the vast majority of MonoGame's users care only about 2D\r\n\r\nIt's like the question of what was first, the chicken or the egg?\r\n\r\nThe reason because we've stopped doing 3D games is because battling the outdated pipeline, importers, shaders and structures reached a point it was umbearable.\r\n\r\nI don't know if at this point it's possible to salvage the 3D side of Monogame. Certainly it's in a vicious cycle: the less developers are interested in doing 3D games with monogame, the less justification will be to expend development time fixing it for 3D.\r\n\r\nIf there's something I completely agree is this:\r\n\r\n> Ultimately, we should look into making the project more maintainable, not more complicated and convoluted than it already is.\r\n\r\nI think with the current man power available, it's more important to make things easy to fix and understand, than to improve performance by making things more complicated.\r\n\r\nActually, if I would be me, I would look again into exploring the possibility of making some components virtual (now that it seems consoles are faster?) It's something that's been rejected straight away every time it's been proposed, because consoles don't handle well virtual calls, but I think it would help removing some insanity from the code.\r\n\r\n\r\n\r\n\r\n\r\n","> It's like the question of what was first, the chicken or the egg?\r\n> \r\n> The reason because we've stopped doing 3D games is because battling the outdated pipeline, importers, shaders and structures reached a point it was umbearable.\r\n> \r\n> I don't know if at this point it's possible to salvage the 3D side of Monogame. Certainly it's in a vicious cycle: the less developers are interested in doing 3D games with monogame, the less justification will be to expend development time fixing it for 3D.\r\n\r\nTrue, but I also feel like XNA wasn't that 3D friendly in the first place. It gave birth to much more 2D games mostly because the sprite batcher is the most accessible API of it. And XNA came in a space where Unity started to get traction on 3D games (while itself not being suited at that time for 2D). It's multi-factorial, I guess, but the problem is indeed where we are now.\r\n\r\nMy biggest concern here, is that you can't remove the 3D stuff of MonoGame without removing the 2D ones. They're the same pipeline, and if you have a 2D pipeline, you pretty much have a 3D one ready too. Changing the pipeline and introducing more stages is the same problem. You can't add stages to the 3D pipeline without having to figure that out for the 2D path as well. They're the same unique pipeline, the ```SpriteBatch``` class is basically just 3D indexed rendering with a flat projection matrix.\r\nSome graphical APIs (vulkan, dx12) allows to separate the pipelines, but I don't even think if there would be in advantage in doing that besides having the maintain two pipelines instead of one (and having the deal with synchronisation \/ shared resources between the pipelines).\r\n\r\n> I would look again into exploring the possibility of making some components virtual\r\n\r\nWould you mind elaborating? I don't think that I get where you're going with this and which problems it might solve.","> > I would look again into exploring the possibility of making some components virtual\r\n> \r\n> Would you mind elaborating? I don't think that I get where you're going with this and which problems it might solve.\r\n\r\nEssentially, the internals of MonoGame have avoided virtual calls, abstract classes, inheritance, interfaces and so on, because it's been stated that consoles are slow at handling virtual calls (vtable lookups, etc), and I guess It's true for NintendoDS and other previous generation consoles, I have no idea if it remains an issue on modern consoles.\r\n\r\nBut the fact is that, avoiding virtual calls _at all costs_ has shaped MonoGame in what it is right now; all the platforms hardcoded into the main project, which I guess, it's not trivial to maintain because all the platform permutations and #ifdef blocks.... but also, it makes much more difficult to extend monogame in any direction without requiring the abused \"fork and compile from source\" , which prevents having an ecosystem of compatible components.\r\n\r\nOf course I'm talking about the graphics, audio and input subsystems. Maybe it could be possible to refactor things so the core of monogame is truly abstract, and each platform could be located in its own derived project.\r\n\r\nThere's two advantages:  it's probably easier to maintain isolated projects than a single big project with lots of permutations, and it opens the door for third parties to create derived (but compatible) platform projects (for example, vulkan)\r\n\r\nRight now, the biggest problem I see with monogame in terms of maintenance and extensibility is precisely all those forks, each one solving one problem at a time, but no way of taking all these solutions in your own project, because the lack of modularity.","Don't want to interrupt the MG side of things, but I can provide at least some insight for the NativeAOT\/BRUTE side:\r\n\r\nNativeAOT maintenance can be difficult, but it's a different _kind_ of difficult, in the sense that you are maintaining a PAL rather than a whole runtime - you relinquish some control over the runtime in exchange for not having to maintain the whole dang thing, which is basically what BRUTE is. For FNA so far, we've found that this isn't so bad; we're a little worried that upstream won't care about us but we're hoping our upcoming GDK support will change that.\r\n\r\nGDK is sort of our poster child for NativeAOT: Compared to maintaining a whole BRUTE runtime the NativeAOT GDK target has been _much_ less work, even if only because Xbox and Windows are now finally close relatives like they always should have been. Even if upstream rejects it, it won't be as big a deal as maintaining a BRUTE target (and so far it's _much_ less irritating than UWP). We're hoping to have something to share in August.\r\n\r\nThe contrast to that is Switch, which as always we can't disclose much but we can at least say the NX codebase isn't _worse_ to deal with, and from what our development partners have told us it's competitive in performance (in at least one case it's faster because of the GC alone). I believe a NativeAOT-NX title is in lotcheck now, if you don't hear more about this assume no news is good news.\r\n\r\nAs always, PlayStation is FNA's blind spot right now, and that's still some time away for us so don't expect to hear from us re: this platform.","Personally I am working on a 3D game, and like you said since they\u2019re the same pipeline I feel like some more love could be given to the 3D side of things, which will in turn make 2D easier and more powerful.","i dont know if this is relevant and have zero console experince , but  was\ncurious about why IL code is considered insecure on consoles.. but\n ill throw this out here in case\n\nhttps:\/\/tooslowexception.com\/net-jit-compiler-is-not-type-safe\/\n\nMSFT answer might be ILVerify..\n\nhttps:\/\/github.com\/dotnet\/roslyn\/issues\/22872\n\ni was a bit surprised to read on this thread JIT code isnt allowed on\nconsoles for security reasons since c++ is all unsafe code,  while c# does\nallow  unsafe one of the original goals WAS safe deployability but that\nnever happened., i guess its the ease of adding executable code,, i have\nplugins compiled at runtime from levels  files which i guess coud be modded\nif i allowed them unsigned and loaded from modders.   but they can't do\nanything unsafe or out of bounds.    I dont even have unsafe code anywhere\nyet my performance on heavy physics, fluids and light graphics doesn\u2019t even\nneed it yet so i could submit a program as \"safe\" meanng , bounds checked,\nand managed..  Also , when gettng a license i read the Android app store\nuses the honor system.. Until malicious behavior is reported they don't\ntest anything, you give your privacy policy and unless someone reports it\nits there dong its evil...  so i probably wont go toward consoles for a\nwhile.\nanyways im not an engine or library developer i target only pc and droid so\ni might be off topic\n\nOn Mon, Aug 1, 2022 at 5:07 AM Thomas Altenburger ***@***.***>\nwrote:\n\n> Yes and no. The rd.xml thing is only to avoid trimming on reflected types,\n> BRUTE has the same mechanism to force it to not trim specific types\n> (typically, the content pipeline ContentReader types). But reflection is\n> not limited to that, there is a lot of runtime stuff that don't depend on\n> trimming and which won't work, being on NativeAOT, BRUTE, or any other AOT\n> of .NET such as Unity's IL2CPP. Anything like Assembly.Load, GetAssembly,\n> GetMethod, GetProperty, and basically marshalling generics, just can't work\n> with AOT compilation. In that respect, BRUTE tries some hacks to allow\n> limited support (like Assembly metadata), but it's hacky and greatly\n> increase compilation time. NativeAOT just strips it, and it even has a mode\n> to entirely remove any kind of reflection to drastically reduce the size of\n> the compiled runtime.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7873#issuecomment-1201052701>,\n> or unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AD74XGORCPJG4AJTZ4Z6NQ3VW6VXBANCNFSM5475SQHQ>\n> .\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***>\n>\n","@damian-666 it's insecure because it could allow to run arbitrary code on consoles, which is typically the kind of attack vectors console hackers use to circumvent console securities (e.g. using a glitch in a game to inject code that will be compiled by the JIT to be executed on the machine).\r\n\r\n@vpenades Back before MG 3.7 (or something like that), MG had the structure you describe and was less maintainable than it is now. As much convenient as virtuals sound, they often are less readable. Virtuals are doing okay on BRUTE and NativeAOT, they both came up with pretty much the same hack to dampen their impact, but being on AOT or on regular .NET runtime, virtuals don't quite rime with performance and it would make sense to avoid any of it in a graphics\/gaming library. And with #4571 in mind, the idea is to totally avoid that problem by having MG into a platform-agnostic assembly (with only one code patch to maintain).\r\n\r\nI don't know what you're referring to with \"all those forks\". If you're referring to console repositories, they are not forks, they are modules of the main repository, which the current structure allows. There is no code duplication.\r\n\r\n@flibitijibibo That's some super cool insights. I believe that @harry-cpp would be interested in helping with NativeAOT. And yes, PAL is basically what BRUTE tried, but since BRUTE needs a revamp in addition to upgrading its PAL, it makes NativeAOT in a better position. I would be surprised that Microsoft accepts a GDK implementation upstream (I don't see them adding a ```win-gdk``` target to the core runtime) but at least that should sure open a channel with them. The .NET runtime team seemed very enthusiast about NativeAOT being used in games and they seem very looking forward initiatives like yours.\r\n\r\nIn any case, it would make total sense that we all concentrate and share efforts on the same runtime.","@mrhelmut \r\n\r\n> @vpenades Back before MG 3.7 (or something like that), MG had the structure you describe...\r\n\r\nThanks for clarifying that aspect. Regarding the forks, I am talking about any time someone wants to add a new feature to monogame outside vanilla, the preferred approach seems to be a fork instead of an extension\/derived library. Whenever someone asks about some feature not in monogame, too often I see the reply \"you can use someone's xxx fork which sorted it out\" instead of \"you can use this library\". \r\n\r\n> True, but I also feel like XNA wasn't that 3D friendly in the first place.\r\n\r\nIt's true that XNA's original 3D side lacks a lot of critical features required to do something not to be ashamed of, but it's also very difficult to add these features if there isn't some flexibility on monogame's side. The Shader pipeline system is not the biggest problem here, it's the content pipeline which has a hardcoded architecture that does not align well with modern 3D file formats, In fact it's not possible to write a content importer for gltf or modern fbx. I know because I tried.... and you cannot render what you cannot import.\r\n\r\n\r\n\r\n","> \"you can use someone's xxx fork which sorted it out\" instead of \"you can use this library\"\r\n\r\nLet me know if I'm mistaken, but that's a community quote and not a governance quote, right? I don't recall us closing on such discussions with redirecting people to forks.\r\n\r\nI feel like this whole discussion is side-tracking. The whole post is about \"working toward lifting current limitations so that we can start innovating and have a cleaner code base\" and we're being met with \"let's ignore the audience depending on those limitations and split monogame in two so that we can have our innovations right now even if that means more work for maintainers\".\r\n\r\nPlease keep this discussion on how to fix BRUTE or enhance NativeAOT. I know that some users are expecting quicker innovations, that will come, but we need to prioritize this. This is not about circumventing limitations, this is about fixing them.","Apologies if I side tracked the discussion, it just happen that to me, both issues are somewhat related. My point was that because consoles, the requirements of BRUTE, etc, have shaped the project in a way that favours certain practices (not good or bad) and makes other practices more difficult (neither good or bad)... and what I tried to discuss is whether it was possible to, at the time of improving BRUTE and moving forward, take into account these other practices and architecture designs into account.","Which is what we will be trying to do with #4571 \r\n\r\nThis post aims at removing the requirements (not ignoring\/circumventing them) so that we don't have to favor any practice specifically, and #4571 aims at simplifying maintenance so that we can iterate quicker on features. Once we're there, it'll be a win for everybody.\r\n\r\nThese are indeed two big projects that will not be achieved over night, so there is indeed some frustration to expect while those are being worked out. I know that frustration is something we wish we could just avoid, but so far we haven't found a solution that fits every side of the coin and doesn't impose maintainability issues on the contributors. It's basically a mexican standoff.","FYI, NativeAOT is now ready for .NET 7. It will ship as a new project parameter ```<PublishAot>true<\/PublishAot>``` (and is already available in the latest preview). The only problem is that ```PublishAot``` won't work to target ```osx``` for the time being (it is still possible to target ```osx``` by removing the parameter and referencing the IL compiler package instead). This will likely be fixed for .NET 8.\r\n\r\nThe interesting part of this is that NativeAOT is officially stable and an official .NET product now.","> As always, PlayStation is FNA's blind spot right now, and that's still some time away for us so don't expect to hear from us re: this platform.\r\n\r\nBit of an update on this -- we now have the latest upstream version of NativeAOT running on PS5. (In addition to the Switch and GDKX platforms.) It's still early days and it's not ready for production use yet, but if anyone with NDA clearance is interested in contributing or testing it out, feel free to get in touch.","Thanks a ton to everyone, who is involved in this. The work you've done is truly insane. It is really hard to get into the cycle of how to actually use them, sadly. Something like a list of requirements of net version, library versions & other would go a long way, or maybe a private repo with a sample monogame project, that runs on the consoles by just downloading it, bruting and running a few .bat files. I've ended up debugging a ton of crashes in BRUTE itself, but in the end it looks like my source material was not correct. Brute works well when it does, but if something it expects isn't there, it crashes without any way to understand what's going on, unless you run it with a debugger and analyze the stack trace & local variables","This issue will soon be replaced by a Github project and an associated paid bounty by the MonoGame Foundation to accelerate this topic. The voted solution is to migrate to NativeAOT and join its maintenance effort."],"labels":["Help Wanted","Consoles","NativeAOT"]},{"title":"Migration missing uninstallation","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nThe migration guide should recommend to uninstall 3.8.0 global tools, otherwise users will run in MGCB version mismatch when using 3.8.1.\r\n\r\nIt might also be worth mentioning this in the \"what's new\" doc.\r\n\r\nIf you're migrating from 3.8.0, please run:\r\n```\r\ndotnet tool uninstall dotnet-mgcb -g\r\ndotnet tool uninstall dotnet-2mgfx -g\r\ndotnet tool uninstall dotnet-mgcb-editor -g\r\n```\r\n\r\nAnd never run ```dotnet tool install``` on 3.8.1, it would break 3.8.1.\r\n","comments":["Is it also possible to make docs on how to upgrade an existing 3.8.1.X project to 3.8.1.Y project? (where X and Y are subversions of 3.8.1)\r\n\r\nSo I mean the editing of the .config\/dotnet-tools.json file. It's not in the docs right now."],"labels":["Documentation"]},{"title":"Drop OpenAL in favor of a better audio library","body":"While OpenAL does exactly what MonoGame needs for the most part and is available on a wide range of systems, it is hardly compatible with XAudio.\r\n\r\nXAudio is the API toward which MonoGame (and formerly XNA) has been design for. The problem is that XAudio isn't available outside of Windows and Xbox platforms.\r\n\r\nOpenAL came as a workaround and has been used to implement an XAudio-like API on macOS, Linux, iOS\/iPadOS, and Android.\r\n\r\nHowever, OpenAL functions quite differently than XAudio and there are many features (like effects, or even applying a pitch\/pan) which renders differently. This isn't just mathematical conversion issues. The effect API for instance, is so differently designed that it is plainly impossible to make an OpenAL effect to consistently sound exactly like its XAudio counterpart.\r\n\r\nIf we'd like to aim for accuracy and have all platforms sound the same, we should be looking into replacing OpenAL with a sound library that allows 1:1 XAudio mapping, and be available on macOS, Linux, iOS\/iPadOS, and Android.\r\n\r\nSo far, the best candidate is FAudio, though it would need mobile ports.","comments":["Hi,\r\nTotally  agree on this, FAudio works great and it's well integrated when using it with SDL2, where not possible maybe a per platform implementation can be added (Android OpenSLES etc), similar like this: https:\/\/github.com\/FNA-XNA\/FAudio\/blob\/master\/src\/FAudio_platform_win32.c","I don't understand the problem with openal.\r\nIt works everywhere.\r\n\r\nWhy would you:\r\n- use another library that just can play a song or sound effect, just like openal\r\n- implement mobile versions of it while openal is already working now\r\n\r\nwhat advantage will you have in the end over openal?\r\nI think there are only disadvantages because you need to mainatin all the mobile versions and you will never get the same compatibilty as openal. ","> I don't understand the problem with openal. It works everywhere.\r\n> \r\n> Why would you:\r\n> \r\n>     * use another library that just can play a song or sound effect, just like openal\r\n> \r\n>     * implement mobile versions of it while openal is already working now\r\n> \r\n> \r\n> what advantage will you have in the end over openal? I think there are only disadvantages because you need to mainatin all the mobile versions and you will never get the same compatibilty as openal.\r\n\r\nI think the original issue stated it best, OpenAL is just too different than XAudio to work exactly the same, which is the goal.","Why should you want to make monogame work exactly as xaudio?\r\nMonogame should take his own path and now dwell on the past decisions XNA ever made.\r\n","> Why should you want to make monogame work exactly as xaudio? Monogame should take his own path and now dwell on the past decisions XNA ever made.\r\n\r\nWhat is wrong with XAudio? its quite a good audio API, and we still want to keep mostly compatible with XNA, as it makes porting old code very easy","I may have mislead you into this, but it has nothing to do with XNA. This is about platform consistency. I only mentioned XNA to retrace why XAudio was used in the first place and why it is the main target. MonoGame is specifically designed for XAudio, always has, always will be. OpenAL is a workaround.\r\nCurrently a DesktopGL project using XACT effects doesn't, and can't sound exactly the same if played through a WindowsDX project. It already happened a few times that developers complain that their Windows game doesn't sound the same as their mobile game. I don't think that you would want that yourself.\r\n\r\nAs comfortable as it may sound to use OpenAL everywhere and calling it a day, that would basically be hiding issues under a blanket because this is assuming that something sounding wrong is correct. And the OpenAL implementation isn't even fully implemented because it just can't do some stuff (some effects will throw an exception).\r\n\r\nFAudio has been specifically designed for that purpose: replacing OpenAL with a 1:1 copy of XAudio that works on all platforms so that stuff like XACT effects consistently sound the same everywhere.\r\n\r\nMoreover, having multiple audio API makes maintaining and enhancing MonoGame more complicated and slower. Moving to only one API for all platforms is very much needed. This is about building a better future, and not stagnating because it feels comfortable."],"labels":["Android","iOS","Linux","MacOS","Help Wanted","Audio"]},{"title":"Call to improve tutorials","body":"MonoGame has a [very long history of tutorials](https:\/\/docs.monogame.net\/articles\/tutorials.html), some are as old as a decade and some even are still based on XNA (which is compatible with MonoGame for the most part, but different in regard to how to start a project).\r\n\r\nAlso, MonoGame is a stable API with a policy of \"no breaking changes\" when possible, which means that even very old tutorials should still be valid today. However, many newcomers to MonoGame are lost in that regard and assume that years old tutorials are just not what they are looking. It is also not super welcoming to have tutorials based on previous MonoGame releases since MonoGame dropped its installer in favor of NuGet packages.\r\n\r\nTo improve the onboarding of MonoGame, we would like to initiate a call to improve the tutorials. There are several sub-tasks available and welcome to contributions.\r\n\r\n## 1. Updating tutorials to MonoGame 3.8.1\r\n\r\nIt would be nice to convert the most relevant tutorials to MonoGame 3.8.1 and (if possible) check with their authors if we can import them to MonoGame's website directly. Be aware of tutorials licenses and respecting authorship if you look into this.\r\n\r\nThe reason for importing tutorials on MonoGame's website, is mainly to have a core line of tutorials for newcomers, and to remove publication dates (because the stability of MonoGame really makes people to have a blocage when they see too old dates, even though the tutorial is good). We could simply note for which version this tutorial should be compatible with.\r\n\r\n## 2. Writing new onboarding tutorials\r\n\r\nEven though we have the [Getting Started tutorial](https:\/\/docs.monogame.net\/articles\/getting_started\/0_getting_started.html), it seems that users don't find it easily or that it is too rough once completed to jump on [other tutorials](https:\/\/docs.monogame.net\/articles\/tutorials.html).\r\n\r\nWe would likely need more beginner tutorials and intermediate ones.\r\n\r\n## 3. Make video tutorials\r\n\r\nWe initiated a [project to make a series of video tutorials](https:\/\/github.com\/MonoGame\/MonoGame\/projects\/2).\r\n\r\nIdeally, this would be the landing tutorial when starting MonoGame from scratch. It should present and explain what MonoGame is, help getting started, and guide through making a first game entirely.\r\nA great video tutorial series I stumble upon recently, is the [VS extension toolkit documentation site](https:\/\/docs.microsoft.com\/en-us\/visualstudio\/extensibility\/vsix\/visual-studio-community-toolkit?view=vs-2022). It is a good mix a video and companion text on each pages from the landing page down to finishing your first extension.","comments":["I think usefull would be a small game coded especially to show how to compile it, by using shared code, to the different supported platforms. As I understand correctly this could be done either on windows\/mac\/linux?\r\nCurrently there is nothing about this, also not in tutorials somewhere else.","https:\/\/github.com\/damian-666\/MGShadersXPlatform  should just buidl and run and all shared code\r\n\r\n\r\nu do need .net 3.1 installed..  and vs 2022   MG. 3.8\r\n\r\n\r\n  it took me 3 weeks to make a shader to clip a polygon, that can target mobile and desktop w\/o repeat code,  but i got it working.     i went over lots of old shaders and samples and tried the stenciles and all that, its too magical,   so i jsut wanted to make a shader  , see the source, so i dindnt have to dig deep into monogame source.  nothing worked or didnt compile or was too old or only for one platform.  since the whole point is to make a game that works on everything with one source i found a nice template that build for android and desktops, with all  shared game code ( update and draw), and assets.    \r\n\r\n its not extactly what u want but it shows how to make a core game DLL  that has only shared assets and  u compile to anything.   then selete ur target exe, build and run.     https:\/\/github.com\/damian-666..   There is no repat links , no repeat anything.    But u should  edit the content  content.mgcb  file by copy paste.. or remove the Platfrom line = windowws ,  after u use the editor.      if u add assets to the content.mgcb file in the core, the targets will go where they should and it will work.   the exe are all minimum code launchers..  al lthe game code is in a code shared module netstandard modle ...     if anyone knows a better way or sample let me know .. this is not a game and only show one image but its clips on openGL and dx.     it also show how to use render target and set up the matrix for one  element.     this is for the current release the new one might be a bit better.  im not finishing the  android till they revamp the whole xamarnin thing cause it works but liek 10x slower, so ill wait but the future looks good for MG and .net , netcore 6 is so fast and teh exe is the one that picks which core is used... the netstandard is linked to mg GL, but the exe is linked to the monogame DX or the mongame GL as appropriate... via nuget","also i suggest a  sample that zooms.. People should not be thinking in  pixels or specific screen sizes.     The cameras samples like boxing camera out there are overcomplex.       I dont like the physics sample  in Aether beause its uses a weird camera and world to \"logical\" unit converter, whith introduces a unneeded factor that totally useless i think.     should be jsut world to screen pixels , as in Meters to pixel.  if ur guy is 1 meter tall.. u just need a matrix to get to pixels and back.    Anways i migth make one if i get time.    anwyasy i got through all it but i spend a year.   i  the the physics samples , and the physics draw code  in Aether or Velcro, and move stuff with the physics code and stick textures on them..","Please also make a visual studio for windows and mac solution file with subprojects for each toturial.\r\nYou can do this for beginner and intermediate level tutorials.","Howdy, I wanted to take on this issue but after reading through some of the documentation I still have a few questions;\r\n1. Where can I get the 3.8.1 release of MonoGame?\r\n\r\n2a. For this issue, did you want them written based off of VS 2019 or VS 2022?\r\n2b. If 2022, am I able to get templates from 2019 to 2022 somehow?\r\n\r\n3. Which relevant tutorials should be updated first, there are a lot of different ones such as Whitakers, Niel Dansons, etc. Which ones should we look into updating and\/or should I make my own?\r\n","Hey! All help is very much welcome!\r\n\r\n3.8.1 hasn't release yet, but it should be very soon. While waiting, you can try downloading the packages and extension manually and [setup a local nuget source](https:\/\/docs.microsoft.com\/en-us\/nuget\/hosting-packages\/local-feeds) based on those packages (see the artifacts section): https:\/\/github.com\/MonoGame\/MonoGame\/actions\/runs\/2591836258\r\n\r\nWe would appreciate contributions to be based on VS 2022. The templates are installed with the VS extension.\r\n\r\nAny tutorial upgrade is welcome, but the ones which are related to \"onboarding\" (e.g. getting started, making a first game, working with 2D for the first time...) are likely a good first pick.","Packages are available here as well: https:\/\/github.com\/MonoGame\/MonoGame\/packages\r\n\r\nYou just have to add github packages as a nuget source.","@harry-cpp is there any noob guides\/tutorial for monogame github packages & nuget? I've tried out https:\/\/docs.github.com\/en\/packages\/working-with-a-github-packages-registry\/working-with-the-nuget-registry but im getting 401 errors when i try adding the packages. ","@jmacato, you need to create a token at https:\/\/github.com\/settings\/tokens with **write:packages** and **delete:packages** permissions (**repo** permissions will be checked automatically). Then run command\r\n`dotnet nuget add source --username <username> --password <token> --store-password-in-clear-text --name <name for nuget source> \"https:\/\/nuget.pkg.github.com\/MonoGame\/index.json\"`\r\nI wrapped token with \"quotes\", but maybe that not necessarily. This approach worked for me.","You should only need `read:packages` permission for the token."," @mrhelmut Howdy, my partner and I are in the midst of completing a tutorial series for creating a space shooter video game from scratch. We feel that it will help bridge gaps for beginners to understand the code and how the template interacts with classes and different methods. Would you like us to open a PR or would you like use to share with you the github repository?","  im curious what your approach is but the  samples here https:\/\/github.com\/MonoGame\/MonoGame.Samples\/tree\/develop\/NeonShooter   are very good, but non been updated,  and its might be hard to update them to mg 3.81 netcore 6.. Each game runs on either  pc  ,or mac ,or linux, ios or android. usng all shared core modules which is just what monogame is for , one code targeting as many devices as you can.   \r\n  \r\n  ...i just wrangled mine tiny shader sample to  barelywork but took over a day.. Ill try to share it tomorrow,  and even adding an icon  or splash can be a nightmare.    so i wont have time for the samples, , im literally  6 years behind schedule on my title.  And android support under netcore 6 is changing rapidly so im going to wait it out .. the emulator takes forver to load still, sometimes but native arm is coming to windows and surfaces.. or i should be using it already.   and i dont konw if xamarin is still there but its loading a ton of stuff,  for  several minutes to deploy...  Im using a new surface laptop thats should be perfect for making games that run on touch and pc because you can develop the touch on the pc and then try it on droid.   i mean the ideal of monogame is for indies and beigni able to target a billion devices is how to get that niche.   that one Neonshooter,  if ported would show alot of people a great start and the reason why to use monogame.. i have some virtual thumstick code i can give over that someone gave me and some parts of Nez that are useful... also works with game pads.   sinc ethe shooters dont support touch but looks likke they would run on droid.    add a virtuall stick, some buttons and its on a phone as well as a pc with or without gamepad.","ok i commited and i thnk it works.  https:\/\/github.com\/damian-666\/MGShadersXPlatform    i started with netcore 6 and mg3.8...  now its netcore 6 and  mg 3.81.  took about 8 hours. w\/ 2022 preview latest update ( last week) .\r\n\r\n   the official samples are quite old but the same idea, using  netcore3.1 and shared game code in netstandard 2,  which now does not work with monogame for sharing game code.  it might not be your approach as a tutorial  , but a working sample with revision control is all i need usually to learn something and start building from that.  the neon shooter and the barebone template thats there in the Samples, as a  sanity test.  \r\n   \r\nbut IMO, the best thing to help newbies see  teh potential of MG is\r\n   https:\/\/github.com\/MonoGame\/MonoGame.Samples  ,  needs an update.. ","> @mrhelmut Howdy, my partner and I are in the midst of completing a tutorial series for creating a space shooter video game from scratch. We feel that it will help bridge gaps for beginners to understand the code and how the template interacts with classes and different methods. Would you like us to open a PR or would you like use to share with you the github repository?\r\n\r\nSounds great! Feel free to open a PR. If you feel like needing feedback before that, you're also free to share it here.","@mrhelmut We are looking to get some feedback here is our current repository for the docs. Outside of the current ones here, we are almost done with 4 more and are making final adjustments before adding them to the docs. I was also looking into making a video tutorial for this game that goes over what is said in the written docs and such. If you are interested in me doing that let me know and I will start writing my scripts. ","It sure sounds great too.","@mrhelmut Here is the link to the articles, I totally forgot to link them. Whoops. https:\/\/github.com\/AlexJeter17\/MonoGameStarShooter\/tree\/main\/Docs\/Articles\r\n\r\nSorry about that","I added 2 great books to tutorials.md.\r\nPlease look at (my first ever) PR. \r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/pull\/7902\r\n\r\nI hope it's OK. If not, please tell me what I did wrong!\r\n\r\nI also want to add existing tutorials and I wanted to start with the ones here: http:\/\/rbwhitaker.wikidot.com\/monogame-tutorials\r\nI emailed the author but don't get any response.\r\nSo in that case they can't be added, right? Because I quote this text here:\r\n\r\n> It would be nice to convert the most relevant tutorials to MonoGame 3.8.1 and (if possible) check with their authors if we can import them to MonoGame's website directly. Be aware of tutorials licenses and respecting authorship if you look into this.","> I emailed the author but don't get any response.\r\n\r\nAn absence of reply is not a consent.","Hi guys, it is me, the creator of those tutorials mentioned before (rbwhitaker.wikidot.com\/monogame-tutorials). I had a Discord chat with somebody (Forged1212) and tried to reply to an email I got (maybe from @ghost), but the reply was squashed by the mail server for some reason.\r\n\r\nSo I figured I'll just throw my reply in here.\r\n\r\nI'm hesitant to say \"yes\" to this request because I'm still maintaining those tutorials (they're already updated to 3.8.1), and I rely on traffic there to drive traffic to all the rest of my stuff, including my own Discord server and my C# book. I'd be concerned about taking my content and using it in a way that would prevent people from visiting my site. I actually like to be able to talk with them and interact with them. It is a key part of understanding what elements of the tutorial are working and what parts are falling short and need improvement.\r\n\r\nIt will depend on the details.\r\n\r\nIf it is taking all of my tutorials and using them as the seed for an equivalent tutorial on the MonoGame docs website with no backlinks or anything, I'd probably have to say \"no\" to that.\r\n\r\nIf it is a relatively small set of tutorials, and each page says something like, \"These tutorials were originally written by RB Whitaker (used with permission) with contributions from the MonoGame community. See [link] for more C# and MonoGame tutorials,\" I'd probably be up for it.\r\n\r\nWhen the person reached out via Discord, we had that conversation, and they said they'd get me an example of what it could look like. Then, after a few days, replied and said they had been thinking about it and decided it was probably best to shelve the idea for now, and maybe they'd just make tutorials for stuff that wasn't covered elsewhere. I figured that was the end of it until I got the email from ghost.\r\n\r\nSo yeah, I'm willing to consider it, but I'd need to know more details before giving permission.\r\n\r\nOn a tangentially related note, congrats on getting MG 3.8.1 out! I'm excited about it! It will be nice to be able to use VS 2022 and C# 10 for MonoGame development!","> Hi guys, it is me, the creator of those tutorials mentioned before (rbwhitaker.wikidot.com\/monogame-tutorials). I had a Discord chat with somebody (Forged1212) and tried to reply to an email I got (maybe from @ghost), but the reply was squashed by the mail server for some reason.\r\n\r\nHi, we're having issues with that user who's now banned, I hope that their request hasn't been too intrusive or out of place.\r\n\r\n> I'm hesitant to say \"yes\" to this request because I'm still maintaining those tutorials (they're already updated to 3.8.1)...\r\n\r\nThis is a totally valid point and a good thing that they are already up to date. In such case, there really isn't any incentive to host them on MG.net and they are totally legitimate where they are now.\r\n\r\nWe should promote their referencing to a \"3.8.1-ready\" section of the documentation.\r\n\r\nWe would like to look into upgrading and hosting tutorials which are \"abandoned\" to avoid any loss of knowledge (it happened in the past, but that was with years old stuff). There is no intention to host currently maintained materials or to overtake them.","> I hope that their request hasn't been too intrusive or out of place.\r\n\r\nIt was fine. It was just surprising, given that I had already had another conversation.\r\n\r\n> We would like to look into upgrading and hosting tutorials which are \"abandoned\" to avoid any loss of knowledge\r\n\r\nYeah, this makes a ton of sense. When you have as long of a history as MG has, this kind of stuff starts to happen. And it's sad when it happens. ziggyware.com and Riemer's come to mind. You guys are wise to be conscientious about these types of things, and I definitely appreciate you guys thinking about my tutorials as well.","Will be working on tutorials directed at complete beginners with little to entry level C# skills.\r\n\r\nWill be hosted on my project the MonoGame Community Wiki, still early days, but will be more than happy to cross share data.\r\n\r\nGlad to see movement with MG recently.","> Yeah, this makes a ton of sense. When you have as long of a history as MG has, this kind of stuff starts to happen. And it's sad when it happens. ziggyware.com and Riemer's come to mind. You guys are wise to be conscientious about these types of things, and I definitely appreciate you guys thinking about my tutorials as well.\r\n\r\nReimers main tutorials were all moved to the [XNAGameStudio archive](https:\/\/github.com\/SimonDarksideJ\/XNAGameStudio\/wiki\/RiemersArchiveOverview), as were a good portion of Ziggy's :D \r\nReimers have even been updated to MG 3.8 (mostly).\r\n"],"labels":["Documentation","Help Wanted","Good First Issue"]},{"title":"Call to improve the documentation using XNA documentation","body":"Even though MonoGame is a verbatim re-implementation of Microsoft's XNA 4, we were not allowed to reproduce [XNA's API documentation](https:\/\/docs.microsoft.com\/en-us\/previous-versions\/windows\/xna\/bb200104(v%3dxnagamestudio.41)).\r\n\r\nWe now have the authorization from Microsoft to use the former official XNA documentation for use in MonoGame's documentation, including the API documentation and blog articles, as long as we mention ```\u00a9 2012 Microsoft Corporation. All rights reserved.``` wherever we use any of it (#7798 is already taking care of the legal mention, so contributions to the documentation shouldn't have to bother about this).\r\n\r\nThis is an opportunity to refresh the [API documentation of MonoGame](https:\/\/docs.monogame.net\/api\/Microsoft.Xna.Framework.html), as well as writing more in-depth [documentation articles](https:\/\/docs.monogame.net\/index.html).\r\n\r\nAny kind of help in that regard is more that welcome and is likely a very good way to contribute for the first time.\r\n\r\nThe [documentation articles](https:\/\/docs.monogame.net\/index.html) source can be found [here](https:\/\/github.com\/MonoGame\/MonoGame\/tree\/develop\/Documentation) and are written in [markdown format](https:\/\/www.markdownguide.org\/cheat-sheet\/).\r\nThe [API documentation](https:\/\/docs.monogame.net\/api\/Microsoft.Xna.Framework.html) source is within the API itself, and generated from the actual C# source code using [XML documentation](https:\/\/docs.microsoft.com\/en-us\/dotnet\/csharp\/language-reference\/xmldoc\/recommended-tags).","comments":["Could tutorials for beginners be written please?","There are many out there.\nThe ones from RB Whittaker are quite well known.","Although there are tutorials on the internet, I think that it could be very useful to have something more in-depth on the official website, because the current getting started page is quite barebones and doesn't use a lot of the basic parts of the framework like GameComponents.\nImo, the website should ideally be able to get you started with the relevant idiomatic workflow, and expose you to most stuff you need to get going, not just how the update draw loop works.","I intend to open another issue to call to contribute tutorials\/upgrade existing tutorials to MG 3.8.1.\r\n\r\nWe're launching a broader [project to make video tutorials](https:\/\/github.com\/MonoGame\/MonoGame\/projects\/2).","Please check [this issue](7815) for tutorials. This present issue is only to discuss articles and the API documentation. (Articles are kind of linked to tutorials, especially the getting started section, but not quite, so let's have a separate discussion here about them.)","Any chance you could also [generate XML documentation](https:\/\/stackoverflow.com\/questions\/48663444\/how-to-include-xml-documentation-file-in-nuget-package-built-from-a-project-file) for IntelliSense and include it into the NuGet package?","Is there some way to preview the generated documentation changes locally? It would be nice to be able to spot check that as I go.","I would suggest a visual markdown editor like [Marktext](https:\/\/github.com\/marktext\/marktext).","@mrhelmut cool, thanks so much. Does this just apply to .md files or can I use this to preview the API (generated from the XML) as well?\r\n\r\nId also like a tiny bit of clarification on the desired result for the API documentation. Is the desire that the XNA documentation is preferable to the MonoGame API documentation language? Or should I generally only replace MG API documentation if the XNA is clearer\/more detailed? Or should I be looking for instances where the XNA API documentation has more information (like detailed descriptions in the form or <remarks>)?\r\n\r\nThe MonoGame API documentation in general seems pretty good and largely mimics (in what I presume is a legally distinct way) the XNA API documentation. So I just wanted to check with you to make sure that if I take this on I would be implementing the desired changes. Thanks again!","@dmars8047 I am unfamiliar with the app mentioned, but most IDEs (visual studio, vscode, i suppose rider as well even though I don't have personal experience with it) will show it to you when you reference the function or class in question (perhaps even when you hover over the declaration, but i dont remember for sure).","@BlueElectivire that is very true. And in most cases that will suffice for a preview of the XML comments. However, there are cases in the XNA API documentation where they use photos, links, and other assets. It would be helpful to ensure that those render properly. \r\n\r\nFor example, the remarks section in this link - [https:\/\/docs.microsoft.com\/en-us\/previous-versions\/windows\/xna\/bb195165(v=xnagamestudio.41)](https:\/\/docs.microsoft.com\/en-us\/previous-versions\/windows\/xna\/bb195165(v=xnagamestudio.41))\r\n\r\nIts not a big deal either way. Just thought I'd ask."],"labels":["Documentation","Help Wanted","Good First Issue"]},{"title":"Call to upgrade the samples to 3.8.1","body":"Throughout the years, MonoGame has accumulated a bunch of samples. Unfortunately they are all scattered across multiple repositories and are not all ready-to-use for MonoGame 3.8.1 which makes consuming the documentation complicated.\r\n\r\nA list of those samples is [available here](https:\/\/docs.monogame.net\/articles\/samples.html).\r\n\r\nWe would to unify the samples under the same repository and have the sample documentation page be more straightforward.\r\n\r\nThere are 3 sub-tasks related to this issue.\r\n\r\n## 1. Upgrading the official samples to MonoGame 3.8.1\r\n\r\nThis basically is upgrading [the current samples repository](https:\/\/github.com\/MonoGame\/MonoGame.Samples) to use MonoGame 3.8.1. This should be straightforward.\r\n\r\n## 2. Upgrading the former XNA samples and merging them into the main samples repository\r\n\r\n@SimonDarksideJ has [a giant repository archive of the old XNA 4.0 samples](https:\/\/github.com\/SimonDarksideJ\/XNAGameStudio) (including the ones from old websites now defunct). Some of them are now irrelevant, but it would be interesting to port the most relevant ones to MonoGame 3.8.1 and merge them into [the main samples](https:\/\/github.com\/MonoGame\/MonoGame.Samples) (Platformer and NeonShooter are already ported but not up-to-date with MG 3.8.1).\r\n\r\nBe mindful of respecting the licenses of each of these samples.\r\nWe are allowed to use the Microsoft samples as long as we mention ```\u00a9 2012 Microsoft Corporation. All rights reserved.```.\r\n\r\n## 3. Upgrading and merging more samples\r\n\r\n@CartBlanche has even more [samples](https:\/\/github.com\/CartBlanche\/MonoGame-Samples) archived which we could pick, upgrade, and merge. They seem to be for macOS and some of them are networking samples (which we dropped), so there's some clean up to do. Most have precompiled xnb, so they may be unexploitable. Some seem to come from a book, so we have to be mindful of licenses there too.","comments":["As far as I can tell, subtask #1 is done, is it not? It looks like @SimonDarksideJ took care of it, looking over here at the .csproj file, which shows a dependency on MG 3.8.1: https:\/\/github.com\/MonoGame\/MonoGame.Samples\/blob\/3.8.1\/NeonShooter\/NeonShooter.Core\/NeonShooter.Core.csproj","Would the goal for the second subtask be to move\/copy those projects over to the MonoGame.Samples repo? Or just update them on @SimonDarksideJ's repo?","The NeonShooter and Platformer samples ~are still on 3.8.0~ as far as I'm aware, I've been stuck with work stuff so I've not had time to go back and update them again, will try and make it a priority.  Although getting a 3D sample should also be a priority.\r\n\r\n*edit, I take it back, I did manage to get all three examples on the Samples repo up to 3.8.1, says so at the top of the page :D\r\n\r\nAs for the GameStudioArchive, \"some\" of the examples have been updated to MG, although not 3.8\/3.81, the updated ones all have their own repos.  It is a massive effort to update and manage them, so some guidance for which ones would be critical would help.  I'll see about starting a discussion on that repo.\r\n\r\nUltimately long term, we need to crentralise on where content is held and being clear between:\r\n\r\n* Examples (feature examples, such as the items in the GameStudioArchive)\r\n* Samples (full projects, such as Platformer and NeonShooter)","P.S. after getting very proficient with automation now, I may also go back and add automated building for each sample for good measure.","> Would the goal for the second subtask be to move\/copy those projects over to the MonoGame.Samples repo? Or just update them on @SimonDarksideJ's repo?\r\n\r\nThat is an interesting proposition, I would rather we create a MonoGame.Examples repo to centralise them.  Although the Archive has been doing well, it currently sits under my account so doesn't make it an \"official\" one. Above all we need to avoid getting back into the position MonoGame had previously with a bucket of unverified and unmanaged \"stuff\" and ensure what is built is maintainable.\r\n\r\nHappy to help of course.","Check out the new discussion board (thanks @CartBlanche ) in the MonoGame.Samples repo with a thread already setup for new full sample requests.\r\nhttps:\/\/github.com\/MonoGame\/MonoGame.Samples\/discussions\/65"],"labels":["Documentation","Help Wanted","Good First Issue"]},{"title":"Feature Request: Call for missing documentation","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nAs the MonoGame team prepares for upcoming releases, it is good to get feedback from the community as to any pains related to documentation and note any gaps \/ questions developers have had while building projects.\r\n\r\nAs a starter, here is an initial list based on recent issues raised:\r\n\r\n* How to take a MonoGame game built for one platform to another (adding platforms)\r\n* How to setup your project for multi-platform in the beginning\r\n* A simple 2D starter game project (documenting the MonoGame.Samples 2D project)\r\n* A simple 3D starter game project\r\n\r\nIf the community has other requests, please comment on them below, detailing:\r\n\r\n* What the ask is - what do you need to gain from a new doc\r\n* What you would like to see - the kinds of information you think would be helpful\r\n* Additional detail\r\n\r\nNot saying we will get to everything but best efforts will be made for the next release to got some more focus on docs\r\n\r\nRelated links:\r\n* https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7662\r\n* https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7661\r\n* https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7685\r\n* https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7670","comments":["I have noticed that some public classes and methods are missing xml documentation that have it in Microsoft's XNA documentation.\r\n\r\nUnless it's a thing that has changed significantly, is there any reason the XNA documentation couldn't be copied?\r\n\r\nThere are also methods new to Monogame that are undocumented, such as `ContentManager.LoadLocalized`. Although it is described on [a page that is about localization in general](https:\/\/docs.monogame.net\/articles\/content\/localization.html).\r\n\r\nBasically anytime I have to google something that could have been in intellisense I get a little annoyed.","> is there any reason the XNA documentation couldn't be copied?\r\n\r\nThe XNA documentation is copyright Microsoft... we cannot legally copy it.\r\n\r\nIf someone submits a PR for docs with XNA docs copied over we have to reject it.","I suppose that makes sense in some way, even if I think it's a little weird when the APIs are mostly the same.","> even if I think it's a little weird when the APIs are mostly the same.\r\n\r\n[APIs cannot be copyrighted](https:\/\/www.jdsupra.com\/legalnews\/supreme-court-copying-apis-in-software-8379806\/), but documentation can be.\r\n\r\nWeird, but true.\r\n","Dean managed to get Microsoft's approval to use [the XNA documentation](https:\/\/docs.microsoft.com\/en-us\/previous-versions\/windows\/xna\/bb200104(v%3dxnagamestudio.41)), as long as what we grab from it has this copyright to it: ```\u00a9 2012 Microsoft Corporation. All rights reserved.```\r\nIf need be, we have archives of the API documentation and online articles.\r\n\r\nI'll try to come up with a guideline page on how to import the documentation to make sure that we are respecting the copyrights.\r\nWe should also likely mention on doc pages with this copyright that Microsoft are the original authors, but that MonoGame isn't Microsoft to avoid any users being mislead into believing that we are Microsoft.\r\n\r\n","@mrhelmut probably we should just put two copyrights at the bottom of all doc pages.  Ideally in this dynamic footer:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/166720925-e6f4fb6d-3b6a-4436-8241-12b300b347fa.png)\r\n\r\nOne for MonoGame Team and another for Microsoft.  This way we can integrate bits of the XNA docs in the articles and the reference as we feel like.","The footer indeed looks like the best solution.","@mrhelmut Was there ever any guideline done for this or is there work being done on this already by @SimonDarksideJ and @dellis1972 in regards to the new documentation stuff they are doing?\r\n\r\nIf not, I can start migrating over the missing XML documentation from MSDN into the repo and update the footer of the website appropriately ","Well, we have two standard footers with the MS Docs migration\r\n\r\nFor MS original docs\r\n> \u00a9 2012 Microsoft Corporation. All rights reserved.  \r\n> \r\n> \u00a9 2023 The MonoGame Foundation.\r\n\r\n\r\nBut for MonoGame foundation only docs, it is simply\r\n\r\n> \u00a9 2023 The MonoGame Foundation.\r\n","> @mrhelmut Was there ever any guideline done for this or is there work being done on this already by @SimonDarksideJ and @dellis1972 in regards to the new documentation stuff they are doing?\r\n\r\nNothing discussed or being worked on in that regard. Suggestions and contributions more than welcome.","> Well, we have two standard footers with the MS Docs migration\r\n> \r\n> For MS original docs\r\n> \r\n> > \u00a9 2012 Microsoft Corporation. All rights reserved.\r\n> > \u00a9 2023 The MonoGame Foundation.\r\n> \r\n> But for MonoGame foundation only docs, it is simply\r\n> \r\n> > \u00a9 2023 The MonoGame Foundation.\r\n\r\nThis is gonna get tricky though for some member types like \r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/225045b3f1579078757a1a63002d764a87e04fa8\/MonoGame.Framework\/Color.cs#L1764\r\n\r\nIf we use the MSDN documentation for that Multiply operator member, then we have an instance where documentation is both MonoGame and Microsoft copyright.  This is no longer an MS original doc or a MonoGame original doc.\r\n\r\nSo for these would you include both in the footer?\r\nOr would it be better to add the copyright as a `<remark>` or other tag within the XML documentation?","What about adding both copyright to each and every pages of the documentation?","> What about adding both copyright to each and every pages of the documentation?\r\n\r\nYea, this is what @tomspilman was suggesting here https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7693#issuecomment-1117520161\r\n","Would the original permission to use the Microsoft documentation allow us to do something like the following?\r\n\r\n1. Generate the original XML documentation from XNA\r\n2. Put that XML document in the [Dependencies repo](https:\/\/github.com\/MonoGame\/MonoGame.Dependencies)\r\n3. Use the [`<include file='filename' path='tagpath[@name=\"id\"]' \/>`](https:\/\/learn.microsoft.com\/en-us\/dotnet\/csharp\/language-reference\/xmldoc\/recommended-tags#include) for members missing XML documentation so that it just pulls it from the XML file without us having to manually copy\/paste it over to everything?\r\n\r\nDoing it this way would mean we are using the original documentation and making minimal changes in the current repo while also allowing it to be easy to see where the original documentation was used so we know in the future what to update should we want to remove that dependency and have everything 100% MonoGame documentation.","That seems relevant to avoid too much work!\r\n\r\nI'm not sure of the scope of what they agreed on, but it can't harm to double check. @dellis1972 ?","If we're talking reference API docs they also help when writing code via intellisense.  So i think we actually need the documentation added to the class\/member\/etc for that to work.","> If we're talking reference API docs they also help when writing code via intellisense. So i think we actually need the documentation added to the class\/member\/etc for that to work.\r\n\r\nYou can use the `<include>` tag like I mentioned and it will pick that up automatically for the intellesense.  Here is an example\r\n\r\n**Without the include**\r\n![Without Include](https:\/\/github.com\/MonoGame\/MonoGame\/assets\/103014489\/e111bd90-186d-4ca2-9024-fcc5eed4a72c)\r\n\r\n**With Include**\r\n![With Include](https:\/\/github.com\/MonoGame\/MonoGame\/assets\/103014489\/93493f1b-27cb-410f-a985-f368132ab95d)\r\n\r\nAnd this was just by adding the following as the xml documentation for the class\r\n\r\n```xml\r\n\/\/\/ <include file='..\/ThirdParty\/Dependencies\/Microsoft.Xna.Framework.xml' path='doc\/members\/member[@name=\"T:Microsoft.Xna.Framework.Content.ContentManager\"]'\/>    \r\n```\r\n\r\nIt's just pulling the documentation from the xml file\r\n","That documentation is pulled and then included in the resulting MonoGame.Framework.xml output \r\n![image](https:\/\/github.com\/MonoGame\/MonoGame\/assets\/103014489\/ad7ed556-6399-4e3f-bc1a-03f025222a4e)\r\n","> That seems relevant to avoid too much work!\r\n> \r\n> I'm not sure of the scope of what they agreed on, but it can't harm to double check. @dellis1972 ?\r\n\r\nThe \"permisison\" was for the docs they specifically gave us access to was my understanding. I have an archive of that, so I'd need to go through it and see if that included the API docs. I know it included tutorials as Simon (and I) have been porting those over. ","> The \"permisison\" was for the docs they specifically gave us access to was my understanding.\r\n\r\nAlright. For what I was suggesting we would need the generated xml from the build of XNA so if that's not included then my idea is a no go unfortunately ","> > The \"permisison\" was for the docs they specifically gave us access to was my understanding.\r\n> \r\n> Alright. For what I was suggesting we would need the generated xml from the build of XNA so if that's not included then my idea is a no go unfortunately\r\n\r\nSo I checked the documentation zip and it does contain API documentation. However it does not contain a doc xml file for the api. The zip is all markdown and toc.yml files, it was basically a code dump from the xna website.","@dellis1972 that's a bummer then. Would have been really simple to update the repo if they had included the XML, but it is what it is.\r\n\r\nWould you be able to post\/share the API docs they provided? If so I can start getting the work done with other community memebers of copying the API text into the repo for code members that are missing XML documentation.\r\n\r\n","Perhaps I can create a temporary private repo with this data in it and give specific people access. I'd rather not post it publicly just to be on the safe side.","Sounds good. Wonder it a separate issue should be made to discuss this specifically.  There are other questions and concerns about this that I feel specific guidelines would help in doing this work.\r\n\r\nFor instance we known the copyright info has to be included, which we can add to the footer of the site. Since this would be copying the API text into the source code, would we need to include the copyright message as part of the XML documentation in source? Just an additional comment for each one we use?","Agreed, updating the api docs is a completely separate task.\nAlthough given how much of the MonoGame api is already documented, need to ensure we are adding value in updating it","@SimonDarksideJ  there are almost 900 members missing XML documentation. Here is a tracking spreadsheet I setup from a build output\r\n\r\nhttps:\/\/docs.google.com\/spreadsheets\/d\/1CMKClYiAuwbw1M7vMwqQFRj-Loq6a7VmTpqbb1HiNTE\/edit?usp=sharing\r\n\r\nThe value added would be so that it's fully documented and we don't have to tell people to just Google the XNA docs like what happened here yesterday https:\/\/discord.com\/channels\/355231098122272778\/357384790158213120\/1204074211140706334\r\n\r\n![image](https:\/\/github.com\/MonoGame\/MonoGame\/assets\/103014489\/d7420e59-4d70-46be-9115-70f57a45e625)\r\n\r\nThere's no guarantee that I'm aware of that the old XNA documentation site will stay up. If MS ever decided to take it down, we'd then have to revert to using wayback links from internet archive.\r\n\r\n","I've created Issue #8165 to track the specific discussion of updating the XML documentation"],"labels":["Documentation"]},{"title":"Created project contains lots of errors","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nI'm trying to create a base game in Linux but the created project has lots of errors.\r\n\r\nSteps that I do:\r\n1. Follow the official docs for Ubuntu\r\n2. Create a new project: `dotnet new mgdesktopgl -o MyGame`\r\n3. Try to run the project with `dotnet run`\r\n\r\nOnce I open the project in VSCode I see lots of errors:\r\n\r\n```\r\nThe type or namespace name 'Microsoft' could not be found (are you missing a using directive or an assembly reference?) [MyGame]\r\nPredefined type 'System.Object' is not defined or imported [MyGame]\r\n[...]\r\n```\r\n\r\nWhen I try to run the project I got:\r\n\r\n```\r\n\/home\/svprdga\/.nuget\/packages\/monogame.content.builder.task\/3.8.0.1641\/build\/MonoGame.Content.Builder.Task.targets(138,5): error MSB3073: The command \"dotnet \/home\/svprdga\/.nuget\/packages\/monogame.content.builder.task\/3.8.0.1641\/build\/\/..\/tools\/netcoreapp3.1\/any\/mgcb.dll \/quiet \/@:\"\/home\/svprdga\/code\/personal\/monogame\/MyGame\/Content\/Content.mgcb\" \/platform:DesktopGL \/outputDir:\"\/home\/svprdga\/code\/personal\/monogame\/MyGame\/Content\/bin\/DesktopGL\/Content\" \/intermediateDir:\"\/home\/svprdga\/code\/personal\/monogame\/MyGame\/Content\/obj\/DesktopGL\/Content\" \/workingDir:\"\/home\/svprdga\/code\/personal\/monogame\/MyGame\/Content\/\"\" exited with code 150. [\/home\/svprdga\/code\/personal\/monogame\/MyGame\/MyGame.csproj]\r\n\r\nThe build failed. Fix the build errors and run again.\r\n```\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n\r\n#### What operating system are you using:\r\n- Linux Mint\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n","comments":["VSCode c# is something i'd never touch with a 20 foot pole, but there's a very similar thing in Rider when you have the wrong MSBuild selected (aka using Mono instead of dotnet core), could it be the same issue?","> VSCode c# is something i'd never touch with a 20 foot pole, but there's a very similar thing in Rider when you have the wrong MSBuild selected (aka using Mono instead of dotnet core), could it be the same issue?\r\n\r\nNo, because I intend to launch the game from the CLI. In this case VSCode does nothing regarding the building or compiling it.","I get the same errors","May be related to #7611","I had the same issue on a Raspberry PI (Raspbian GNU\/Linux 11 (bullseye))  but fixed it my installing the dotnet 3.1 SDK.\r\n\r\nStill can't get the mgcb-editor to register, but at least the project runs.","Quick update.  I needed to add $HOME\/.dotnet\/tools\/ to path to register and start it","Please refer to #8124 while this issue is being worked on."],"labels":["Linux","MacOS","Setup"]},{"title":"[Website] [.org+.rocks domains] Docs taking to wrong directing","body":"Hi MonoGame,\r\nAs mentioned in the title there is wrong directing to docs, To make it short here is the thing:\r\n![image](https:\/\/user-images.githubusercontent.com\/68622361\/121362442-fec58180-c92d-11eb-92c5-0c01c35b6677.png)\r\n\r\nThe current link -> https:\/\/docs.monogame.org\/\r\nThe actual link -> https:\/\/docs.monogame.net\/\r\n","comments":["@Jjagg - I assume this is because how the `docs` subdomain is setup it doesn't appear under our other MG TLD like monogame.org or monogame.rocks.\r\n\r\nAny way we can fix this on the server simply to always have that subdomain appear under all MG webserver domains?","@Jjagg Couldn't we have an url rewrite rule for the .org and .rocks to redirect to .net for all pages and subdomains?\r\n\r\nThe forums are broken on the .net and .rocks as well because of the https certificate being only valid for the .net.","@mrhelmut Yes, we can definitely do that. We host on each domain now because we didn't own the monogame.net domain and that has caused some DNS issues in the past, but Tom recently got ownership of all MG domains :) \n\nI'll look into it!"],"labels":["Documentation"]},{"title":"Controller DisplayName always null in DX","body":"The controller's DisplayName is always null in DX, it seems it's only implemented with SDL platforms.\r\n\r\nI don't know if this will be implemented at all in DX, as it's probably quite a lot of work, but I'd suggest adding a comment in the DisplayName's documentation saying that it's SDL-only (or not working in DX) to avoid people losing their time to a feature they can't use.","comments":["If we talk about the ```GamePad``` API, it's not quite possible to retrieve the controller's name with with XInput alone because it assumes that controllers are all Xbox controllers and therefore don't need names. We could add a display name, but it'll be a generic constant name like \"XInput controller\", no matter which kind of controller you have plugged.\r\n\r\nTo retrieve the actual name, we would need to implement the ```Joystick``` API with SharpDX.DirectInput, and keep track of the underlying DirectInput device association with its XInput counterpart (using API like ```IsXInputDevice``` and associate the pointers, and then use DirectInput to query the actual name)."],"labels":["Help Wanted","Input"]},{"title":"Hash key not recognised on UK keyboard","body":"<!-- Write your issue below -->\r\n\r\nThe hash \/ pound key '#' returns as Key.None for EnGB keyboards\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n","comments":["Bumping this.\r\nFrom some research of my own I believe it's probably mapped as VK_OEM_10 (or equivalent). Confusingly I would have almost expected it to map as the VK_OEM_102 key based on it being the additional input in UK vs US layouts but that doesn't seem to be the case (as that key code is correctly mapped). At the same time it might be nice to update the docs to help decode the names of the OEM keys to UK keyboard users as currently the naming matches the US scancode mapping whereas the buttons are mapped differently for UK layouts. (i.e. OemTilde is actually the `\/\u00ac key, and OemPipe only gives a Pipe when shift modified, otherwise is backslash).\r\nInterestingly trying it out in the microsoft keyboard layout creator, the key does come up as VK_OEM_7 but doesn't map accordingly in MonoGame at current, I would have potentially assumed that GetKeyboardState would be after layout mapping but I guess it's just at raw scancode level.\r\n\r\nI will try and turn this musing into a pull request at some point in the near future, but thought I would leave the notes here in case someone else is willing\/able to get to it before I can.\r\n\r\nEDIT: tested it out some more and realised its something missing in the SDL mappings rather than something weird happening in the direct Windows platform layer. I think potentially key 35 (#) or key126 (~) is missing but need to actually crack open the source code\/debugger here and poke around properly.\r\n\r\nVarious resources:\r\nhttps:\/\/kbdlayout.info\/kbdusx\/scancodes (US)\r\nhttps:\/\/kbdlayout.info\/kbduk\/scancodes (UK)\r\nhttps:\/\/learn.microsoft.com\/en-us\/windows\/win32\/inputdev\/virtual-key-codes (VKC list)"],"labels":["Input"]},{"title":"ClientSizeChanged behaviour differs from XNA","body":"ClientSizeChanged is triggered when a window is moved in MonoGame, but moving the window in XNA does not trigger it.\r\n\r\nFailing code sample:\r\n```\r\nusing System;\r\n\r\nnamespace XnaTest1\r\n{\r\nclass GameTest : Game1\r\n{\r\n\r\nprotected override void Initialize()\r\n{\r\n\tbase.Initialize();\r\n\r\n\tWindow.AllowUserResizing = true;\r\n\tWindow.ClientSizeChanged += Window_ClientSizeChanged;\r\n\r\n}\r\n\r\nprivate void Window_ClientSizeChanged(object sender, EventArgs e)\r\n{\r\n\tSystem.Diagnostics.Debug.WriteLine (\"Client Size Changed\");\r\n}\r\n\r\n\r\n}\r\n}\r\n```\r\n\r\nXNA result: Moving the window prints nothing.\r\nMonoGame result: Moving the window prints \"Client Size Changed\"\r\n\r\n\r\nNote: The event is not called while moving the window, but at the end of the window move.\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\nLatest MG development branch, Windows, WindowsDX\r\n","comments":["I guess a workaround would be just to check if the new clientsize matches the old clientside, would be pretty useful to see when a window moved I suppose?","Yes, actually I had the client size check before realizing it was  a bug :)\r\n\r\nI was reviewing my code and realized that a function named ClientSizeChanged required me to check if the client size had changed. First I thought I was doing something wrong, but then I tested that on XNA, which worked.\r\n","I see, I see"],"labels":["Windowing"]},{"title":"Can't use Mouse.GetState() in custom window","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nHello, I am hosting MonoGame (WindowsDX) in a Winform. Everything works fine, except `Mouse.GetState()`.\r\nI found this PR: #6081\r\n\r\nI downloaded MonoGame source and built it with the changes from the above PR and the issue was fixed.\r\nWhy was the PR closed? Are there plans for this issue to be fixed in the main branch?\r\n\r\nInitial issue: #6009\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- WindowsDX\r\n","comments":["Hello @energyuser \r\n\r\nI closed the PR because clearly there was no interest to merge it.\r\n@sqrMin1 provides a patched build with his [MonoGame.Forms](https:\/\/github.com\/sqrMin1\/MonoGame.Forms) library.\r\n","Hello @nkast \r\n\r\nI did try the MonoGame.Forms library, the problem is I get an exception when I try to load a SpriteFont XNB that was built with a newer version of MonoGame, than the one MonoGame.Forms uses.\r\n\r\nIn fact, as I said I patched and built MonoGame and replaced the old MonoGame.Forms dependency with the new one and it works. \r\n\r\nSo now I'm using a modified MonoGame.Forms that uses a modified MonoGame.Framework...\r\n\r\nI wouldn't have to do this if this fix was part of the main code...\r\n\r\n>there was no interest to merge it.\r\n\r\nI'm interested :)",">> I wouldn't have to do this if this fix was part of the main code...\r\n\r\nThat would be great indeed.\r\n\r\n>> I'm interested :)\r\n\r\nI like your optimism !\r\n"],"labels":["Input"]},{"title":"Unit Testing framework","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nRight now, MonoGame has some projects intended for unit testing the framework. These projects contain utility classes\r\nto help test different aspects of MonoGame.\r\n\r\nI think it could be useful to move these utility classes to its own project, so we could use it to create our own monogame based\r\nunit tests.\r\n\r\nFor example, all the \"runner\" architecture is very handy to test if a given code has been able to render a specific screenshot.\r\n\r\nSo, a project called MonoGame.Framework.NUnit or something like that would be handy.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["Second this, great idea.\r\nI also found that tests including MonoGame `Game` class as is usually gets invoked from a background thread which causes many exceptions in `SDLGameWindow` as well as any `UI thread` based work (`new Texture2D` is the best example).\r\n\r\nI ended up adding a full mock (wrapper\/proxy) around `Game` as well as many MonoGame classes but a proper Monogame-based framework will really help decouple the classes (and avoid any static dependencies such as `Platform` classes as well as unavoidable inheritance hierarchy such as `Game`).\r\n","100% a unit testing framework would be great for MonoGame!","@harry-cpp @mrhelmut I have a PR that does this exactly. Some kind soul had already set this up for [iOS](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/8094#issuecomment-1861232392). \r\n\r\nMy proposal:\r\n\r\n\r\n`Tests\/Interactive\/iOS`-> Move to `Tests\/iOS\/Common` and use a .shproj\r\n`Tests\/Interactive\/TestRunners\/` -> New test runners that use the .shproj with the existing tests.\r\n  - Add Tests\/Interactive\/TestRunners\/`DesktopGL\/` and `Tests\/Interactive\/TestRunners\/iOS\/` for now.\r\n  - Add Android next.\r\n  - Console: not sure... due to private SDK access\r\n\r\nThis is how I have been testing things like [this PR](https:\/\/github.com\/MonoGame\/MonoGame\/pull\/8092)","Sent PR #8110 ","Actually I split the MonoGame's test runner years ago to run our own unit tests.\r\n\r\nIt is located here: https:\/\/github.com\/OfCourseMyHorse\/NUnit.Utilities\/tree\/main\/src\/MonoGame.NUnitRunner\r\n\r\nIt's been used in tests, so it's confirmed it works.\r\n\r\n@Mindfulplays feel free to compare the PR and grab whatever you need from that project.","> Actually I split the MonoGame's test runner years ago to run our own unit tests.\n> \n> \n> \n> It is located here: https:\/\/github.com\/OfCourseMyHorse\/NUnit.Utilities\/tree\/main\/src\/MonoGame.NUnitRunner\n> \n> \n> \n> It's been used in tests, so it's confirmed it works.\n> \n> \n> \n> @Mindfulplays feel free to compare the PR and grab whatever you need from that project.\n\n Thanks! I will take a look. There are some interesting things definitely perhaps for a future PR. The iOS interactive tests have a different mechanism\/goal: show an actual UI (both iOS ui and a MG UI that this person had coded up!) and allows discovering\/running tests one at a time. It still has the drawback of MG with the GDM\/Game being a singleton but in certain platforms it's easy to overcome as the notion of a view is cleanly separated. \n\n\nI would think of this current test framework as a cross between Showcase\/Samples and an Automated test. ","This PR is now ready for you folks, please take a look.\n\nI have more coming up that adds RenderTarget\/etc tests to this and also adds WindowsDX\/Android runners etc. it's been very useful to understand\/verify behaviors as I have made Metal work with this 100%.\n\nNot sure how I magically summon reviewers but here we go: @SimonDarksideJ @harry-cpp @tomspilman  :) \nThanks!"],"labels":["Testing","Help Wanted"]},{"title":"GraphicsDevice.SetRenderTarget(null) crashes on iOS","body":"<!-- Write your issue below -->\r\nIn the Methd\r\n```\r\nprivate void RenderRouteToTexture()\r\n{\r\n   GraphicsDevice.SetRenderTarget(_routeRenderTarget);\r\n\r\n   _routeSpriteBatch.Begin();\r\n   _routeSpriteBatch.Draw([...]);\r\n   _routeSpriteBatch.End();\r\n   \r\n   GraphicsDevice.SetRenderTarget(null);\r\n}\r\n```\r\n\r\nthe execution crashes on the last line with a System.NullReferenceException, referencing the \"null\" parameter.\r\nThere are no more details in the Exception.\r\n\r\nThe weird thing is, this only happens when executing the method on an iOS device.\r\nIt runs perfectly fine under Windows.\r\n\r\nIs this normal behaviour under iOS?\r\nIs there a workaround?\r\n\r\nBest regards,\r\nDokug\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.0.1641\r\n\r\n#### What operating system are you using:\r\n- Windows\/Mac\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- iOS\/WindowsDX\r\n","comments":["The probable cause seems to be the following:\r\niOS supports OpenGL up to version \"ES 3.0\" (and even that was deprecated from iOS 12 onwards).\r\n\r\nhttps:\/\/developer.apple.com\/library\/archive\/documentation\/3DDrawing\/Conceptual\/OpenGLES_ProgrammingGuide\/Introduction\/Introduction.html\r\n\r\nWhen calling \r\n```\r\nGraphicsDevice.SetRenderTarget(null)\r\n``` \r\nthe code eventually enters \r\n```[GraphicsDevice.OpenGL.FramebufferHelper.BlitFrameBuffer()]```, \r\nwhere ```GL.DrawBuffer()``` is called.\r\n(https:\/\/github.com\/MonoGame\/MonoGame\/blob\/master\/MonoGame.Framework\/Platform\/Graphics\/GraphicsDevice.OpenGL.FramebufferHelper.cs#L150)\r\n\r\n```GL.DrawBuffer()``` is initialized in OpenGL.cs with \r\n```DrawBuffer = LoadFunction<DrawBufferDelegate> (\"glDrawBuffer\");```\r\n(https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Platform\/Graphics\/OpenGL.cs#L1309)\r\n\r\nHowever, OpenGL ES 3.0 doesn't seem to contain \"glDrawBuffer\" (OpenGL 4 does, though), which is why the Loadfunction returns null for GL.DrawBuffer under iOS, which is why a runtime-NullReferenceException occurs.\r\nhttps:\/\/www.khronos.org\/registry\/OpenGL-Refpages\/es3.0\/\r\n\r\nThe code works if \r\n```\r\nGL.DrawBuffer(DrawBufferMode.ColorAttachment0 + iColorAttachment);\r\nGraphicsExtensions.CheckGLError();\r\n```\r\nare commented out in ```GraphicsDevice.OpenGL.FramebufferHelper.BlitFrameBuffer()```.\r\n\r\nIs this something that can easily be fixed?\r\nOr is the plan in general to move to another API in the future, as suggested by Apple?","Have you tried changing your plist configuration to target iOS 11 or older as the minimum requirement?\r\n\r\nThe long term plan is to move to another API, but for the time being it's best to target iOS 11 and older.","Is that possible when trying to deploy it to an iPad Air 4 (with the latest iOS of course)?\r\nI will try it, however the issue of glDrawBuffer not existing should still be the same if I'm not mistaken..","The feature set of mobile APIs usually depends on the target OS version. If Apple deprecated OpenGL for iOS 12+, there's no reason that they also prevented iOS11- targets to use OpenGL (but with Apple, everything's possible).\r\nAt some point Apple will refuse iOS11 targets for new app submissions, so a move to Metal\/Vulkan should still be the goal.","We just tried it with targetting iOS 11, it still crashes.\r\nAgain, because OpenGL ES 3.0 doesn't have a \"glDrawBuffer\" Method.\r\n\r\nWe will continue to work with the Monogame source code, but commenting out the lines mentioned above.\r\nThank you for your help so far.","Are you debugging on a device or on the simulator?","For the current iOS both, for the iOS11- version just a sim, as I don't have such a device..","Just to clarify since I'm not quite sure if my wording was appropriate: what I meant with trying an iOS11 target, was to edit the project properties and set the \"deployment target\" to 11 (and running it on any iOS version, including 12 or 13), not to run the app on iOS 11 without changing the deployment target.\r\n\r\nCould you provide a minimal project to reproduce? No issue on our end with render targets.\r\n\r\nAlso, which version of Xamarin.iOS are you running?","We have now tried any configuration, including the way suggested by you, the crash still occurs (Sim and actual device).\r\nA brand new Monogame ios project with the following Game1.cs class will demonstrate this:\r\n\r\n```\r\nusing Microsoft.Xna.Framework;\r\nusing Microsoft.Xna.Framework.Graphics;\r\nusing Microsoft.Xna.Framework.Input;\r\n\r\nnamespace iOS_Test\r\n{\r\n    public class Game1 : Game\r\n    {\r\n        private GraphicsDeviceManager _graphics;\r\n        private SpriteBatch _spriteBatch;\r\n\r\n        private Texture2D _testTexture;\r\n        private RenderTarget2D _testRenderTarget;\r\n        private SpriteBatch _testSpriteBatch;\r\n\r\n        public Game1()\r\n        {\r\n            _graphics = new GraphicsDeviceManager(this);\r\n            Content.RootDirectory = \"Content\";\r\n            IsMouseVisible = true;\r\n        }\r\n\r\n        protected override void Initialize()\r\n        {\r\n            base.Initialize();\r\n        }\r\n\r\n        protected override void LoadContent()\r\n        {\r\n            _spriteBatch = new SpriteBatch(GraphicsDevice);\r\n            _testSpriteBatch = new SpriteBatch(GraphicsDevice);\r\n\r\n            _testRenderTarget = new RenderTarget2D(GraphicsDevice, 325, 325, false, SurfaceFormat.Color, DepthFormat.None, 8, RenderTargetUsage.DiscardContents);\r\n            _testTexture = Content.Load<Texture2D>(\"GameThumbnail\");\r\n\r\n            base.LoadContent();\r\n        }\r\n\r\n        protected override void Update(GameTime gameTime)\r\n        {\r\n            base.Update(gameTime);\r\n        }\r\n\r\n        protected override void Draw(GameTime gameTime)\r\n        {\r\n            GraphicsDevice.Clear(Color.CornflowerBlue);\r\n\r\n            GraphicsDevice.SetRenderTarget(_testRenderTarget);\r\n\r\n            _testSpriteBatch.Begin();\r\n            _testSpriteBatch.Draw(_testTexture, new Rectangle(20, 20, 57, 57), Color.White);\r\n            _testSpriteBatch.End();\r\n\r\n            GraphicsDevice.SetRenderTarget(null);\r\n\r\n            _spriteBatch.Begin();\r\n            _spriteBatch.Draw(_testRenderTarget, new Rectangle(30, 30, 100, 100), Color.White);\r\n            _spriteBatch.End();\r\n\r\n            base.Draw(gameTime);\r\n        }\r\n    }\r\n}\r\n```","I am also experiencing the SetRenderTarget(null) that causes the NullReferenceException on **Android**.\r\n\r\nDokug's repro (with a change on the sample number) demonstrates the NullReferenceException on Android.  \r\n\r\nThe exception is happening at the lines of code pointed out by Dokug.\r\n\r\nI am reproducing this on actual Android devices API 7 and 10.  I have also updated the Android min version from 10 to 11.","I have worked around the crash issue with a null-check for the GL.DrawBuffer Method like this:\r\n\r\n`if (GL.DrawBuffer != null)\r\n{\r\n     GL.DrawBuffer(DrawBufferMode.ColorAttachment0 + iColorAttachment);\r\n     GraphicsExtensions.CheckGLError();\r\n}`\r\n\r\n(https:\/\/github.com\/MonoGame\/MonoGame\/blob\/master\/MonoGame.Framework\/Platform\/Graphics\/GraphicsDevice.OpenGL.FramebufferHelper.cs#L150)\r\n\r\nIn consequence, I am of course not able to render to a texture under iOS (it just stays blank).\r\n**Is there someone experienced enough with OpenGL, who could suggest a workaround?**\r\nFor example using `GL.DrawBuffers()`, which is supported by OpenGL ES 3.0 (the iOS variant)\r\n(https:\/\/www.khronos.org\/registry\/OpenGL-Refpages\/es3.0\/)\r\n\r\nAlso, is it planned to upgrade the C# LangVersion of the project to support `if (GL.DrawBuffer is not null)` in the future?\r\n\r\nBest regards,\r\nDokug","Hi Dokug,\r\nI wonder if the following line is not setting up the render targets properly due to `DiscardContents`:\r\n\r\n```\r\n            _testRenderTarget = new RenderTarget2D(GraphicsDevice, 325, 325, false, SurfaceFormat.Color, DepthFormat.None, 8, RenderTargetUsage.DiscardContents);\r\n```\r\n\r\nFWIW, I am able to reliably use RenderTargetUsage.PreserveContents (which is most likely what you want - a deferred render target) on both Android (API level 28+ tested up to 30), and on iOS (8\/9).\r\n\r\nHaving said that, I noticed that in *some* (not all) cases, apparently I have an old work around (From very old code that I used to run on older Android\/iOS devices):\r\n\r\n```\r\n        gd_.SetRenderTarget(null);\r\n        simpleBatch_.Begin(DefaultSortMode, BlendState.NonPremultiplied);\r\n        simpleBatch_.End();\r\n```\r\n\r\n\r\n..presumably to fight the same issues you are seeing?\r\n","Hi,\r\nhave you tested this on newer iOS devices (iOS 12+)?\r\nI know that I have tried to set the usage to DiscardContents and it did not work, but I might try again just to check if your workaround works.\r\nThanks for the input!","Yep, I have tested this on iOS 14 (iPhone and iPad). To be clear, I think you need `PreserveContents` not `DiscardContents` as you are using the contents in a deferred rendering stage later on.","I'm not sure @Dokug has tested this yet, but I've taken his example code above, changed it to use PreserveContents and it still throws a NullReferenceException on SetRenderTarget(null). This was on a real Android 9.0 (API 28) device.\r\n\r\nOn an older, real (Android 4.1 - API 16) device I have no issues with using either of PreserveContents or DiscardContents and I'm able to call SetRenderTarget(null) just fine.\r\n\r\nIn both cases I had set TargetVersion = 11.0 (API 30), MinVersion = 4.1 (API 16).\r\n\r\nThis is a huge obstacle for me. I've been working on this app for almost 3 years and updated MonoGame and target API versions to match up with Google Play's requirements ready for release. The entire application uses deferred rendering extensively via this mechanism with very complicated and precise drawing to textures and so changing it isn't an option. I would really appreciate any suggestions as I'm beginning to despair.","Could you post a minimal sample working code that crashes?\r\nI have been using deferred rendering since Android P and I have updated to the latest released SDK R with no problems.\r\nI do remember having to change my rendering works in general though because of these issues, long time ago. I can try and compare notes with your sample code...","> Could you post a minimal sample working code that crashes?\r\n\r\nHi @Mindfulplays, thanks for replying so quickly! To test this out I used a real device (HUAWEI Honor 9 Lite, Android 9.0, API 28) and did the following:\r\n\r\n1) Created a new Android MonoGame application in VS using the templates.\r\n2) Copied @Dokug's code above and replaced the Game1 implementation with his code.\r\n3) Created a simple GameThumbnail.png and imported it into the Content mgcb and rebuilt that.\r\n4) Set the project setting \"Application\"->\"Compile using Android Version: (Target Framework)\" to \"Android 11.0 (R)\"\r\n5) Set the project setting \"Android Manifest\"->\"Minimum Android Version\" to \"Android 4.1 (API 16)\" \r\n6) Set the project setting \"Android Manifest\"->\"Target Android Version\" to \"Android 11.0 (API 30)\" \r\n7) (For the 4.1 device) I disabled \"Android Options\"->\"Use Fast Deployment\" as this isn't supported on this device.\r\n8) Built and Ran\r\n= Crash! (But not on the 4.1, API16 device)\r\n\r\n...then as you suggested:\r\n\r\n9) As above, but changed \"DiscardContents\" to \"PreserveContents\"\r\n= Same crash! (But not on the 4.1, API16 device)\r\n\r\nThe application crashes when calling SetRenderTarget(null) with the same presentation as @Dokug and @Paul-GolfingScribe have described above.\r\n","Will take a look in the next couple days... ","I used a stock Android emulator (Pixel 2 API 28) as I don't have a Android P device.\r\n\r\nHere is the relevant code:\r\n\r\n```\r\n      GraphicsDevice.Clear(Color.CornflowerBlue);\r\n\r\n      if (_logo == null)\r\n      {\r\n        _logo = Content.Load<Texture2D>(\"logo_512px\");\r\n      }\r\n\r\n      if (_renderTarget == null)\r\n      {\r\n        _renderTarget =\r\n          new RenderTarget2D(GraphicsDevice, 500, 500, false, SurfaceFormat.Color, DepthFormat.None, 0, RenderTargetUsage.PreserveContents);\r\n      }\r\n\r\n      GraphicsDevice.SetRenderTarget(_renderTarget);\r\n      _spriteBatch.Begin();\r\n      _spriteBatch.Draw(_logo, Vector2.Zero, Color.White);\r\n      _spriteBatch.End();\r\n      GraphicsDevice.SetRenderTarget(null);\r\n\r\n      _spriteBatch.Begin();\r\n      _spriteBatch.Draw(_renderTarget, new Vector2(0, 300), Color.White);\r\n      _spriteBatch.End();\r\n\r\n      base.Draw(gameTime);\r\n```\r\n\r\nI tried with Minimum Android Version = 5 (L) and 9 (P) and tried Target Version from P -> R. - all of these combinations work fine.\r\nMG 3.8.\r\n\r\nThe logo is rendered in the expected location (0, 300) with no crash.\r\n\r\n\r\nPlease provide the full code and more details.\r\nCould you try this in an emulator first?\r\nAnd when you say crash, could you please point to the exact line and full exception in  `Platform*.cs` or the relevant files in `MonoGame` source please?\r\n\r\nThings get lost in translation so please provide full details\/code.","@Mindfulplays OK, so with your example I have managed to narrow down the issue. Your example worked fine for me and the only discernible difference is that when constructing the RenderTarget2D you set **_preferredMultiSampleCount_** to _**0**_ and @Dokug sets it to **_8_**. \r\n\r\n    _renderTarget = new RenderTarget2D(GraphicsDevice, 500, 500, false, SurfaceFormat.Color, DepthFormat.None, 8, RenderTargetUsage.PreserveContents);\r\n\r\nSetting this value to anything other than 0 causes SetRenderTarget(null) to throw a NullReferenceException:\r\n\r\n    {System.NullReferenceException: Object reference not set to an instance of an object.\r\n        at Microsoft.Xna.Framework.Graphics.GraphicsDevice+FramebufferHelper.BlitFramebuffer (System.Int32 iColorAttachment, System.Int32 width, System.Int32 height) [0x00011] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n        at Microsoft.Xna.Framework.Graphics.GraphicsDevice.PlatformResolveRenderTargets () [0x0015d] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n        at Microsoft.Xna.Framework.Graphics.GraphicsDevice.ApplyRenderTargets (Microsoft.Xna.Framework.Graphics.RenderTargetBinding[] renderTargets) [0x00002] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n        at Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTargets (Microsoft.Xna.Framework.Graphics.RenderTargetBinding[] renderTargets) [0x00071] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n        at Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTarget (Microsoft.Xna.Framework.Graphics.RenderTarget2D renderTarget) [0x00003] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n        at MonogameBugTest.Game1.Draw (Microsoft.Xna.Framework.GameTime gameTime) [0x0006f] in C:\\Users\\n9nes\\source\\repos\\MonogameBugTest\\MonogameBugTest\\Game1.cs:54\r\n        at Microsoft.Xna.Framework.Game.DoDraw (Microsoft.Xna.Framework.GameTime gameTime) [0x0001c] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n        at Microsoft.Xna.Framework.Game.Tick () [0x00239] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n        at Microsoft.Xna.Framework.AndroidGameWindow.OnUpdateFrame (System.Object sender, Microsoft.Xna.Framework.MonoGameAndroidGameView+FrameEventArgs frameEventArgs) [0x00041] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n        at Microsoft.Xna.Framework.MonoGameAndroidGameView.UpdateFrameInternal (Microsoft.Xna.Framework.MonoGameAndroidGameView+FrameEventArgs e) [0x0000f] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n        at Microsoft.Xna.Framework.MonoGameAndroidGameView.UpdateAndRenderFrame () [0x00056] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n        at Microsoft.Xna.Framework.MonoGameAndroidGameView.processStateRunning (System.Threading.CancellationToken token) [0x0005b] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n        at Microsoft.Xna.Framework.MonoGameAndroidGameView.RunIteration (System.Threading.CancellationToken token) [0x000f9] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n        at Microsoft.Xna.Framework.MonoGameAndroidGameView+<>c__DisplayClass62_0.<WorkerThreadFrameDispatcher>b__0 (System.Object s) [0x00017] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n        at Android.App.SyncContext+<>c__DisplayClass3_0.<Send>b__0 () [0x00000] in \/Users\/builder\/azdo\/_work\/2\/s\/xamarin-android\/src\/Mono.Android\/Android.App\/SyncContext.cs:52\r\n        at Java.Lang.Thread+RunnableImplementor.Run () [0x00008] in \/Users\/builder\/azdo\/_work\/2\/s\/xamarin-android\/src\/Mono.Android\/Java.Lang\/Thread.cs:36\r\n        at Java.Lang.IRunnableInvoker.n_Run (System.IntPtr jnienv, System.IntPtr native__this) [0x00008] in \/Users\/builder\/azdo\/_work\/2\/s\/xamarin-android\/src\/Mono.Android\/obj\/Release\/monoandroid10\/android-30\/mcw\/Java.Lang.IRunnable.cs:90\r\n        at (wrapper dynamic-method) Android.Runtime.DynamicMethodNameCounter.17(intptr,intptr)}\r\n\r\nSetting _**RenderTargetUsage**_ to _**PreserveContents**_ or _**DiscardContents**_ has no effect and the same exception will be thrown in either case. I tested this out on a stock Android emulator (Pixel 2 API 28).\r\n\r\n**_Edit: To be clear. I've modified my solution to use 0 for preferredMultiSampleCount whenever I construct a RenderTarget2D and it appears to have fixed my issue, although there's clearly something I don't understand going on here. This doesn't throw an exception on Windows or Android 4.1._**","Are you using MonoGamein a 3d context? If yes may be multisample might help. But in a low end mobile device that's not quite what you want. Perhaps Monogame didn't enable it at all in previous Android versions and hence didn't crash?\r\nBut you really want to audit all render target usage as it's very expensive to have one let alone with fancier requests such as depth buffers or multi sampling.","Has any progress been made on this? \r\nIt seems like I have this issue when running on Android both in simulator and on device \r\nand with latest MG code from GitHub and as @ Oct 2023.\r\nI am setting MSAA to false.\r\nGL.DrawBuffer is null on line 150 of  MonoGame.Framework\\Platform\\Graphics\\GraphicsDevice.OpenGL.FramebufferHelper.cs"],"labels":["OpenGL"]},{"title":"Expose Gamepads\/Joysticks Instance IDs","body":"<!-- Write your issue below -->\r\n\r\nGamepad\/Joystick InstanceID is very helpful to identify a specific device's disconnected\/reconnected status. As opposed to having to assume that any connected device is a new\/different device, since currently the only identifiers that are exposed are the device's index, and device-specific GUID. I request its addition to the GamePadCapabilities struct via \"caps.InstanceIdentifier = Sdl.Joystick.InstanceID(Sdl.GameController.GetJoystick(gamecontroller)).ToString()\", to follow suit with the existing \"Identifier\" property that represents the device's device-specific GUID.\r\n\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n - DesktopGL\r\n","comments":["Upon looking at this further, SDL's \"InstanceID\" seems to be just an incrementing int, instead of the InstanceGUID I was expecting. Is there no way to get a InstanceGUID (as with DirectInput - a GUID that is not product-specific, but rather device-machine-pair specific) via SDL (and then pass it through MonoGame)?","Unless anyone has any other info, it would appear that this cannot be done. I even dove into SDL source just to make sure there wasn't anything there I was missing.\r\n\r\nAlso, this appears to the same conclusion brought up here: https:\/\/discourse.libsdl.org\/t\/basic-design-using-sdl-with-joysticks-that-come-and-go-during-runtime-fwd\/22803\r\n\r\nSo, I wonder then, being that Steam Input is SDL-based (or at least mostly), how are they able to identify a specific controller from another? If you attach your PS4 controller, for example, you can name it and set an LED color and such and it will remember and differentiate that controller from other PS4 controllers with the same GUID when reconnected later."],"labels":["Feature Request","Input"]},{"title":"Monogame Pipeline Tool crashes right after I installed Monogame 3.7.1","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nI'm a new user of Monogame. I download Monogame because of a course in University. I downloaded Visual Studio 2019 and Monogame 3.7.1 according to the instruction given by my professor. However, when I tried to open pipeline tool after downloading Monogame, the following crash report appears:\r\n\r\n\r\nSystem.BadImageFormatException: An attempt was made to load a program with an incorrect format. (Exception from HRESULT: 0x8007000B)\r\n   \r\nat MS.Win32.PresentationCore.UnsafeNativeMethods.WICCodec.CreateColorTransform(BitmapSourceSafeMILHandle& ppWICColorTransform)\r\nat System.Windows.Media.Imaging.ColorConvertedBitmap.FinalizeCreation()\r\nat System.Windows.Media.Imaging.BitmapSource.CreateCachedBitmap(BitmapFrame frame, BitmapSourceSafeMILHandle wicSource, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, BitmapPalette palette)\r\nat System.Windows.Media.Imaging.BitmapFrameDecode.FinalizeCreation()\r\nat System.Windows.Media.Imaging.BitmapDecoder.SetupFrames(BitmapDecoder decoder, ReadOnlyCollection`1 frames)\r\nat System.Windows.Media.Imaging.BitmapDecoder.Initialize(BitmapDecoder decoder)\r\nat System.Windows.Media.Imaging.BitmapDecoder.CreateFromUriOrStream(Uri baseUri, Uri uri, Stream stream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, RequestCachePolicy uriCachePolicy, Boolean insertInDecoderCache)\r\nat System.Windows.Media.Imaging.BitmapDecoder.Create(Stream bitmapStream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)\r\nat System.Windows.Media.Imaging.BitmapFrame.CreateFromUriOrStream(Uri baseUri, Uri uri, Stream stream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, RequestCachePolicy uriCachePolicy)\r\nat System.Windows.Media.Imaging.BitmapFrame.Create(Stream bitmapStream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)\r\nat Eto.Wpf.Drawing.BitmapHandler.Create(Stream stream)\r\nat Eto.Wpf.Drawing.IconFrameHandler.Create(IconFrame frame, Func`1 load)\r\nat Eto.Drawing.IconFrame.FromResource(Single scale, String resourceName, Assembly assembly)\r\nat Eto.Drawing.Icon.GetResources(String resourceName, Assembly assembly, List`1 frames)\r\nat Eto.Drawing.Icon.FromResource(String resourceName, Assembly assembly)\r\nat MonoGame.Tools.Pipeline.MainWindow.InitializeComponent()\r\nat MonoGame.Tools.Pipeline.MainWindow..ctor()\r\nat MonoGame.Tools.Pipeline.Program.Main(String[] args)\r\n\r\n\r\nIt seems that I added some malformed files to the pipeline tool to cause the crash, but in fact, I had no chance to start using the pipeline tool. I've tried to uninstall and reinstall Monogame, Visual Studio and also restart the computer, but the problem is still there. What may have caused the crash of Monogame pipeline tool?\r\n\r\nBy the way, my computer is 64-bit\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.1\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":[],"labels":["MGCB Editor"]},{"title":"Video added to DesktopGL","body":"* Added DesktopGL Video playback based on the XNA FNA Theora implementation (https:\/\/github.com\/FNA-XNA\/FNA\/tree\/master\/src\/Media\/Xiph). It is similar to https:\/\/github.com\/MonoGame\/MonoGame\/pull\/6860. I tested a few example videos and created some of my own; they all work. Have only tested on Windows so far though. \r\n* I excluded the actual binaries for theorafile, but included the compiled shader as this seems to be the case for other standard shaders. The theorafile binaries can be compiled from https:\/\/github.com\/FNA-XNA\/Theorafile. Perhaps this project should be added as a dependency?\r\n* Minor change: Revised the graphicsdevice debug clear color to the release to avoid confusion. See https:\/\/community.monogame.net\/t\/desktopgl-glsl-shaders-incorrect-when-using-source\/14803\/3","comments":["I guess the builds break because I excluded the compiled theorafile-dependencies. Should I include them as well?","Much appreciated contribution.\r\n\r\nNative binaries will have to be submitted to the Dependencies submodule.\r\n\r\nI haven't thoroughly reviewed the PR yet, but to me there's an immediate concern: it would be required to use ```FuncLoader``` to load the theora entry points. ```DllImport``` are not robust enough when it comes to binary discovery across all runtimes. You can check how it is used for SDL2 and OpenAL.\r\n\r\nThe icing on the cake would be to have a way to optionally rely on OpenAL internally for users who might want to not have OpenAL getting initialized and willing to feed the audio stream to another audio engine like Wwise or FMOD. But this a long shot, I guess that it is fine enough at it is and a good starting point.\r\n\r\nWe should double-check the licensing as well. I'm no licensing expert so I'll leave this to someone more knowledgeable, but since there are a handful of different licenses involved, we might want to make sure that everything is properly organized and written.","> Much appreciated contribution.\r\n> \r\n> Native binaries will have to be submitted to the Dependencies submodule.\r\n\r\nWill do.\r\n> \r\n> I haven't thoroughly reviewed the PR yet, but to me there's an immediate concern: it would be required to use `FuncLoader` to load the theora entry points. `DllImport` are not robust enough when it comes to binary discovery across all runtimes. You can check how it is used for SDL2 and OpenAL.\r\n\r\nI should be able to fix this tomorrow evening.\r\n> \r\n> The icing on the cake would be to have a way to optionally rely on OpenAL internally for users who might want to not have OpenAL getting initialized and willing to feed the audio stream to another audio engine like Wwise or FMOD. But this a long shot, I guess that it is fine enough at it is and a good starting point.\r\n\r\nThat sounds like a good future Todo.\r\n> \r\n> We should double-check the licensing as well. I'm no licensing expert so I'll leave this to someone more knowledgeable, but since there are a handful of different licenses involved, we might want to make sure that everything is properly organized and written.\r\n\r\nI'll leave this to you guys! I talked to the creator of FNA about it, and he seems ok with it at least. \r\n\r\nI also realized that Video.PlatformInitialize probably should be kept private. Perhaps I could add a new constructor to Video that takes width etc as parameters and calls Video.PlatformInitialize if the OPENGL flag is set?\r\n","The stuff mentioned above have been fixed now. Updating the dependencies repo will have to wait until later.","Ok, so I have now tested that it works on MacOS and Linux as well (x64). The libs are available in https:\/\/github.com\/MonoGame\/MonoGame.Dependencies\/pull\/152.","Could you commit the submodule change so that the build can access de binaries?","> Could you commit the submodule change so that the build can access de binaries?\r\n\r\nWhich change did I miss? The compiled libs were commited and accepted.","That's good, but you now also have to update to which submodule commit the dependencies are pointing.\r\n\r\n```git pull origin master``` from the ```ThirdParty\/Dependencies``` folder, and then commit changes on the main repo.","Could the build error for Windows be related to the change of graphics device discard color for the debug mode?","It seems so, some of tests are based on image comparison for testing rendering fidelity toward a target and assume the debug clear color.\r\n\r\nI believe that this change should be discussed in a separate PR since it's not in direct relation to the video player.","> \r\n> \r\n> It seems so, some of tests are based on image comparison for testing rendering fidelity toward a target and assume the debug clear color.\r\n\r\nYou're right. It passes on my windows machine now.\r\n\r\n> \r\n> I believe that this change should be discussed in a separate PR since it's not in direct relation to the video player.\r\n\r\nAgreed. I will do that.\r\n\r\nI do not completely understand the failed mac test, and do not have a mac easily accessible atm. Do you have some idea what fix (if any) that is needed?","Mac failure is unrelated to this PR. See #7445.","Hello @FenixH, you can now upgrade the dependencies submodule to get the mac fix, which should allow this PR to move forward.","> \r\n> \r\n> Hello @FenixH, you can now upgrade the dependencies submodule to get the mac fix, which should allow this PR to move forward.\r\n\r\nThanks! Done.","The dependencies seem to be missing 32-bit binaries for Theorafile, which does not allow Video to run on 32-bit Windows and Linux.","I read somewhere that support for 32-bit was going to be dropped, so I did not compile 32-bit binaries. If needed I can do that as well. However, its been three months since the last update on this PR, so I am unsure if it still is alive. I am also uncertain if some of its code need be revised due to other changes during this time.","There hasn't been a conclusion yet on 32bit support, but it is very likely that it'll be removed.\r\n\r\ndotnet 5 doesn't support 32bit linux and Steam has so few 32bit linux users that it doesn't even appear on their hardware survey (less than 0.01%).\r\n\r\n32bit windows is about 0.24% of the Steam user base, which is debatable (from our perspective, our games are at 0.06%). It is also likely that dotnet will drop 32bit at some point since it's mostly about out-of-support systems, and the next Visual Studio will be 64bit-only, which is a relevant hint.\r\n\r\nI'll try to review this PR soon.","Thanks for your comments. I asked for x86 support because I was backporting this PR to MonoGame 3.7.1 - I have a project which depends on this version, and can't be upgraded right now due to recent MonoGame versions targeting a later version of .NET (my project has to run with a _really_ old version of Mono...) \r\n\r\nI just pulled the latest Theorafile source, compiled it for x86 under Linux and Windows and it works just as well :)\r\n\r\nWhile backporting this to MG 3.7.1 I experienced issues with a few things which I think will still be a problem on later MonoGame versions:\r\n\r\n- ~~Loading the libtheorafile with FuncLoader would fail under Linux occasionally, but I just used the same logic as with loading SDL and it fixed it (building the path according to the assembly location and the architecture);~~\r\n- In VideoPlayer, audioDataPtr is not being freed when VideoPlayer is disposed, or when the video is stopped, and memory usage builds up over time;\r\n- In Video, the instance of Theorafile which is allocated when calling OpenFile is not freed when Video is disposed, also introducing a potential memory leak. Video.Dispose is also not calling PlatformDispose.\r\n\r\nI will submit a PR to @FenixH's branch to reflect the changes I made for these situations.\r\n\r\nThanks for your work!\r\n\r\nedit: the issue I mentioned with FuncLoader was not an issue after all - it was just that MonoGame 3.7.1 did not use LoadLibraryExt yet, which handles different architectures already.","@randrade23 thanks for your review and improvements! Happy that you got some use out of it."],"labels":["OpenGL","Video"]},{"title":"DepthStencil Not Working on iOS","body":"<!-- Write your issue below -->\r\nI am trying to use depth stencil on Android and iOS as per [this popular guide](https:\/\/medium.com\/@sfranks\/i-originally-wrote-this-for-the-best-way-to-mask-2d-sprites-in-xna-game-development-stack-949cf7bd7421).\r\nIt works as expected on Android, but does not work on iOS.\r\nIt seems that any rendering to a `DepthFormat.Depth24Stencil8` target fails on iOS.\r\nPlease see the repro below.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.01641\r\n\r\n#### What operating system are you using:\r\n- Windows 10, Visual Studio 2019\r\n\r\n#### What MonoGame platform are you using:\r\nAndroid, iOS\r\nTested on: Android emulator (Pixel 3 Pie 9.0) and 2 physical devices (Pixel 3, Samsung Note 20)\r\nTested on: iOS emulator (iPhone 12 OS 14.2) and physical device (iPhone 11 Pro).\r\n\r\n#### Reproduction\r\n1. In Visual Studio, Create a MonoGame iOS app using the latest `MonoGame iPhone\/iPad Application` template\r\n2. In Visual Studio, Create a MonoGame Android app using the latest `MonoGame Android Application` template\r\n3. For the iOS project, edit the iOS info.plist and select Portrait mode as the supported orientation.\r\n4. Replace the `Game1.cs` content in both projects with the following:\r\n```\r\nusing Microsoft.Xna.Framework;\r\nusing Microsoft.Xna.Framework.Graphics;\r\n\r\nnamespace StencilTest\r\n{\r\n    public class Game1 : Game\r\n    {\r\n        private GraphicsDeviceManager _graphics;\r\n        private SpriteBatch spriteBatch;\r\n        private Texture2D texStencil;\r\n        private Texture2D texBackground;\r\n\r\n        private RenderTarget2D renderTargetDepth24Stencil8;\r\n        private RenderTarget2D renderTargetDepth24Stencil8_NoStencil;\r\n        private RenderTarget2D renderTargetDefaultDepthFormat;\r\n\r\n        protected Matrix matAlphaTestProjection;\r\n        protected AlphaTestEffect alphaTestEffect;\r\n        protected DepthStencilState dssMask;\r\n        protected DepthStencilState dssBackground;\r\n\r\n        public Game1()\r\n        {\r\n            _graphics = new GraphicsDeviceManager(this);\r\n            _graphics.SupportedOrientations = DisplayOrientation.Portrait;\r\n            _graphics.ApplyChanges();\r\n            Content.RootDirectory = \"Content\";\r\n            IsMouseVisible = true;\r\n        }\r\n\r\n        protected override void Initialize()\r\n        {\r\n            \/\/ TODO: Add your initialization logic here\r\n\r\n            base.Initialize();\r\n        }\r\n\r\n        protected override void LoadContent()\r\n        {\r\n            spriteBatch = new SpriteBatch(GraphicsDevice);\r\n\r\n            renderTargetDepth24Stencil8 = new RenderTarget2D(GraphicsDevice, 200, 200, false, SurfaceFormat.Color, DepthFormat.Depth24Stencil8, GraphicsDevice.PresentationParameters.MultiSampleCount, RenderTargetUsage.PreserveContents);\r\n            renderTargetDepth24Stencil8_NoStencil = new RenderTarget2D(GraphicsDevice, 200, 200, false, SurfaceFormat.Color, DepthFormat.Depth24Stencil8, GraphicsDevice.PresentationParameters.MultiSampleCount, RenderTargetUsage.PreserveContents);\r\n            renderTargetDefaultDepthFormat = new RenderTarget2D(GraphicsDevice, 200, 200, false, SurfaceFormat.Color, GraphicsDevice.PresentationParameters.DepthStencilFormat, GraphicsDevice.PresentationParameters.MultiSampleCount, RenderTargetUsage.PreserveContents);\r\n\r\n            matAlphaTestProjection = Matrix.CreateOrthographicOffCenter(0,\r\n                        200,\r\n                        200,\r\n                        0, 0, 1);\r\n            alphaTestEffect = new AlphaTestEffect(GraphicsDevice)\r\n            {\r\n                Projection = matAlphaTestProjection\r\n            };\r\n            dssMask = new DepthStencilState()\r\n            {\r\n                StencilEnable = true,\r\n                StencilFunction = CompareFunction.Greater,\r\n                StencilPass = StencilOperation.Replace,\r\n                ReferenceStencil = 1,\r\n                DepthBufferEnable = false,\r\n            };\r\n            dssBackground = new DepthStencilState()\r\n            {\r\n                StencilEnable = true,\r\n                StencilFunction = CompareFunction.Equal,\r\n                StencilPass = StencilOperation.Keep,\r\n                ReferenceStencil = 1,\r\n                DepthBufferEnable = false,\r\n            };\r\n\r\n            texBackground = Content.Load<Texture2D>(\"background\");\r\n            texStencil = Content.Load<Texture2D>(\"stencil\");\r\n        }\r\n\r\n        protected override void Update(GameTime gameTime)\r\n        {\r\n            \/\/ TODO: Add your update logic here\r\n\r\n            base.Update(gameTime);\r\n        }\r\n\r\n        protected override void Draw(GameTime gameTime)\r\n        {\r\n            \r\n            \/\/RENDER_TARGET_DEPTH24_STENCIL_8\r\n            spriteBatch.GraphicsDevice.SetRenderTarget(renderTargetDepth24Stencil8);\r\n            \/\/clear stencil buffer\r\n            spriteBatch.GraphicsDevice.Clear(ClearOptions.Target | ClearOptions.Stencil, Color.Transparent, 0, 0);\r\n            \/\/draw mask\r\n            spriteBatch.Begin(SpriteSortMode.Immediate, null, null, dssMask, null, alphaTestEffect);\r\n            spriteBatch.Draw(texStencil, new Rectangle(0, 0, 200, 200), Color.White);\r\n            spriteBatch.End();\r\n            \/\/draw background\r\n            spriteBatch.Begin(SpriteSortMode.Immediate, null, null, dssBackground, null, alphaTestEffect);\r\n            spriteBatch.Draw(texBackground, new Rectangle(0, 0, 200, 200), Color.White);\r\n            spriteBatch.End();\r\n\r\n\r\n            \/\/RENDER_TARGET_DEPTH24_STENCIL_8 - NO STENCILING\r\n            spriteBatch.GraphicsDevice.SetRenderTarget(renderTargetDepth24Stencil8_NoStencil);\r\n            \/\/draw background\r\n            spriteBatch.Begin();\r\n            spriteBatch.Draw(texBackground, new Rectangle(0, 0, 200, 200), Color.White);\r\n            spriteBatch.End();\r\n\r\n            \/\/RENDER_TARGET_DEFAULT DEPTH FORMAT\r\n            spriteBatch.GraphicsDevice.SetRenderTarget(renderTargetDefaultDepthFormat);\r\n            \/\/draw background\r\n            spriteBatch.Begin();\r\n            spriteBatch.Draw(texBackground, new Rectangle(0, 0, 200, 200), Color.White);\r\n            spriteBatch.End();\r\n\r\n            \/\/DRAW THE RENDER TARGETS TO THE BACK BUFFER\r\n            spriteBatch.GraphicsDevice.SetRenderTarget(null);\r\n            GraphicsDevice.Clear(Color.CornflowerBlue);\r\n            spriteBatch.Begin();\r\n            spriteBatch.Draw(renderTargetDepth24Stencil8, new Rectangle(150,150,200,200), Color.White); \/\/top left\r\n            spriteBatch.Draw(renderTargetDepth24Stencil8_NoStencil, new Rectangle(500,150,200,200), Color.White); \/\/top right\r\n            spriteBatch.Draw(renderTargetDefaultDepthFormat, new Rectangle(150,500,200,200), Color.White); \/\/bottom\r\n            spriteBatch.End();\r\n\r\n\r\n            base.Draw(gameTime);\r\n        }\r\n    }\r\n}\r\n```\r\n5. Add the attached background.png and stencil.png to each project's Content.mcgb.\r\n6. Run each project and note the attached image; the result is as expected on Android but not on iOS.\r\n\r\n#### Result\r\n### Android\r\n![image](https:\/\/user-images.githubusercontent.com\/24466690\/100724225-90e64d80-3412-11eb-9084-00ea416384bc.png)\r\n### iOS\r\n![image](https:\/\/user-images.githubusercontent.com\/24466690\/100724255-98a5f200-3412-11eb-95f5-66b4cba2f04f.png)\r\n\r\n#### Stencil Image\r\nThis .png is a white square with a transparent circle in the middle (you may see it rendered in browser as a black circle)\r\n![stencil](https:\/\/user-images.githubusercontent.com\/24466690\/100724066-64cacc80-3412-11eb-8baf-63c0c99840f4.png)\r\n\r\n#### Background Image\r\nSolid red .png\r\n![background](https:\/\/user-images.githubusercontent.com\/24466690\/100724086-685e5380-3412-11eb-9c14-3426e4d1b85c.png)\r\n\r\n\r\n\r\n","comments":[],"labels":["iOS","OpenGL"]},{"title":"Update Docu for Texture3D","body":"Hello,\r\n\r\nMax TextureSize for Texture3D is 2048 x 2048 ,if it is bigger than no error is thrown but the hole screen is black.(depth max should be 2048)\r\nAlso maybe add if Texture3D can have compression and how to fill it with compression enabled. \r\nFor me i did it with SurfaceFormat.Color and it works, but compression would be nice.\r\n\r\n\r\n\r\n \r\n```\r\n            Texture3D atlasOfAtlases = new Texture3D(GraphicsDevice, 2048 , 2048 , 6, false, SurfaceFormat.Color);\r\n            int textureSizeInPixels = atlasOfAtlases .Width * atlasOfAtlases .Height;\r\n            var color = new Color[textureSizeInPixels  * 6];\r\n\r\n            texture.GetData(color, textureSizeInPixels * 0, textureSizeInPixels);\r\n            textureWater.GetData(color, textureSizeInPixels * 1, textureSizeInPixels);\r\n            textureWall.GetData(color, textureSizeInPixels * 2, textureSizeInPixels);\r\n            textureObject.GetData(color, textureSizeInPixels * 3, textureSizeInPixels);\r\n            elevation.GetData(color, textureSizeInPixels * 4, textureSizeInPixels);\r\n            units.GetData(color, textureSizeInPixels * 5, textureSizeInPixels);\r\n\r\n            atlasOfAtlases.SetData(color);\r\n```\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.0.1641\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n","comments":["It would be better to throw with errors like this rather than document it, at least if it's consistent across systems. At the very least we need to communicate in some way that textures this large cause errors. It might be tied to video memory.\n\nWe'll need some more samples to figure this out. A test project could let people easily report back their results from different systems so that would be nice.","i tested it today with Ravendarke, it seems like a limitation of OpenGl 3, on the research of my problem i found this on the Unity Page:\r\n\r\n\r\nOpenGL ES 3.0 (Android platform)\r\n\r\n\r\nEmulates mobile OpenGL ES 3.0 feature set.\r\nTurns off support for compute Shaders and related features (compute buffers, random-write Textures), sparse Textures, \r\ntessellation Shaders and geometry Shaders. Enforces maximum of 4 simultaneous render targets, and maximum of 16 Textures  used in a single Shader. Maximum allowed Texture size is set to 4096, and maximum cubemap size to 2048. Realtime soft shadows are disabled.\r\n\r\nRead the Max Cubemap size this should be the Texture3D Size, and also the maximum of 16 Textures apply in Shader which i tested before.\r\nIf you want i can make a sample Project for it.\r\n\r\nFor test project should i make it swichtable between Texture3D 4096 x 4096 to a 2048 x 2048 to see the difference?","ok i created a sample:\r\n[SampleTexture3DBlackScreen.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/5611619\/SampleTexture3DBlackScreen.zip)\r\n\r\nCan you tell me if the bigger texture is also black for you?\r\nAh my Graphicscard is a amd rx 5700 XT so the memory should not be problem"],"labels":["OpenGL","Documentation","Need Info"]},{"title":"BlendFunction.Min not available under Android","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nI noticed that the blend functions BlendFunction.Min & BlendFunction.Max are not available under Android. It seems they are only available for iOS, Windows and DesktopGL, as is saw from the preprocessor directives here:https:\/\/github.com\/MonoGame\/MonoGame\/blob\/1e3af2001384de3e13fbe1d4282dcec6574ccac4\/MonoGame.Framework\/Graphics\/GraphicsExtensions.cs#L320-L339\r\n\r\nJust to be sure: was this a deliberate decision, because these functions are unavailable under Android, or could this be an oversight?\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- Android \r\n","comments":["I think this blend function should be available for all platforms, don't know how this happened.\r\n\r\n@harry-cpp you know if there's a reason for this? Looks like this changed with the OpenTK -> SDL migration.","> @harry-cpp you know if there's a reason for this? Looks like this changed with the OpenTK -> SDL migration.\r\n\r\nI have no idea, so many things got changed during that migration."],"labels":["Android"]},{"title":"[Doc] Incomplete VertexBuffer documentation","body":"The [documentation](\r\nhttps:\/\/docs.monogame.net\/api\/Microsoft.Xna.Framework.Graphics.VertexBuffer.html#Microsoft_Xna_Framework_Graphics_VertexBuffer_SetData__1_System_Int32___0___System_Int32_System_Int32_System_Int32_) of `VertexBuffer::SetData` is not very detailed.\r\n\r\nThere it says under \"Remarks\":\r\n\r\n---\r\n\r\nIf `T` is `VertexPositionTexture`, but you want to set only the position component of the vertex data, you would call this method as follows:\r\n\r\n```cs\r\nVector3[] positions = new Vector3[numVertices];\r\nvertexBuffer.SetData(0, positions, 0, numVertices, vertexBuffer.VertexDeclaration.VertexStride);\r\n```\r\n\r\nContinuing from the previous example, if you want to set only the texture coordinate component of the vertex data, you would call this method as follows (note the use of offsetInBytes:\r\n\r\n```cs\r\nVector2[] texCoords = new Vector2[numVertices];\r\nvertexBuffer.SetData(12, texCoords, 0, numVertices, vertexBuffer.VertexDeclaration.VertexStride);\r\n```\r\n\r\n---\r\n\r\nBut there is no explanation, where the various values originate from:\r\n\r\n* 12 ... size in bytes of the position component (a `Vector3` I guess)\r\n* to understand the example we need to know which `VertexDeclaration` is used\r\n* this example works only, if the data is at the beginnig of the buffer\r\n  + if there are multiple meshes in the buffer, the offset must be adjusted accordingly\r\n\r\nWhat I want to say is: please provide a more detailled example with a detailled explanation : )\r\n\r\nCheers,\r\nGeorg","comments":[],"labels":["Documentation"]},{"title":"Pipeline Tool 3.8 Graphical Glitches","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nI'm experiencing graphical glitches in the UI when using the pipeline tool.  I noticed immediately after upgrading to 3.8.0.1641.  I just tried the development version 3.8.1.1777 and experienced the same issues.  The menu items disappear when the mouse hovers over them, and each editor window\/panel has its contents zoom and display incorrectly when the mouse enters them.\r\n\r\n3.8\r\n![mgcb_graphical_glitches](https:\/\/user-images.githubusercontent.com\/42337275\/96395102-b20c1b00-1191-11eb-8cc1-5f33e8155b96.png)\r\n\r\n3.7\r\n![mgcb_working](https:\/\/user-images.githubusercontent.com\/42337275\/96395258-2a72dc00-1192-11eb-9623-de99b90ea8b2.png)\r\n\r\nI've reverted to using 3.7.1.189 for now, which is displaying correctly.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n\r\n\r\n### UPDATE\r\nI recently did a full Windows 10 clean reinstall and this problem has gone away (as well as many other issues I was having with Windows itself...)  Unless anyone else has experienced this, I'm willing to bet it was a .Net configuration issue isolated to my machine.","comments":[],"labels":["MGCB Editor"]},{"title":"Support for Texture2DArray in opengl >= 3.0","body":"<!-- Write your issue below -->\r\nI just tested if the content pipline give me any errors with a shader that implement a Texture2DArray.\r\nI got no errors, but i cant create a Texture2D with the array overload because of the implementation in the GraphicsCapabilities.OpenGL.cs class  \r\n```\r\n            \/\/ TODO: Implement OpenGL support for texture arrays\r\n            \/\/ once we can author shaders that use texture arrays.\r\n            SupportsTextureArrays = false;\r\n```\r\nCan this be changed or did i miss something?\r\nAlso i see that the implementation for opengl is missing, to create a Texture2DArray.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n","comments":["I'm interested in this as well. When that comment was written it seems MojoShader could not compile texturearrays to HLSL: https:\/\/github.com\/MonoGame\/MonoGame\/pull\/3654\r\nIf that's no longer the case then I can maybe take a look at implementing the C# part.","MojoShader is still around limiting things, but there are relevant progress here #7345, and some more related to shaders here #7352.","Looks like all the relevant OpenGL calls needed to make this work are already known by MonoGame, you just need to wire them up in Texture2D.OpenGL.cs to create texture arrays. However building a pixel shader that samples a Texture2DArray gives the error \"Unsupported texture type for ps_3_0\" and raising the shader model to 4_0 gives  \"Shader must be SM 3.0 or lower!\"\r\nI'll see if I can move forward with the ShaderConductor branch. ","Yeah, that's because of MojoShader, it presently is the limiting component in OpenGL shader processing. It is likely a safe bet to build upon @cpt-max's work.","PR is up: https:\/\/github.com\/MonoGame\/MonoGame\/pull\/7361"],"labels":["OpenGL"]},{"title":"System.TypeLoadException: Could not load type of field 'Microsoft.Xna.Framework.Input.Touch.TouchPanelState:GestureList'","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n- Upgraded from Monogame 3.7 to Monogame 3.8 (following the official migration guide https:\/\/docs.monogame.net\/articles\/migrate_37.html )\r\n- No other changes other than that in game\r\n- No issues when running on my personal phone (Samsung S11+)\r\n- When apk uploaded to play store (alpha) it fails on every single pre-launch device test with the following error:\r\n\r\n`android.runtime.JavaProxyThrowable: System.TypeLoadException: Could not load type of field 'Microsoft.Xna.Framework.Input.Touch.TouchPanelState:GestureList' (8) due to: Could not resolve type with token 010000a5 from typeref (expected class 'System.Collections.Generic.Queue'1' in assembly 'mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e') assembly:mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e type:System.Collections.Generic.Queue'1 member:(null)\r\n  at Microsoft.Xna.Framework.AndroidGameWindow..ctor (Microsoft.Xna.Framework.AndroidGameActivity activity, Microsoft.Xna.Framework.Game game) [0x00000] in <f4b5bf3a10334b9ab5945e18622c0769>:0 \r\n  at Microsoft.Xna.Framework.AndroidGamePlatform..ctor (Microsoft.Xna.Framework.Game game) [0x0003f] in <f4b5bf3a10334b9ab5945e18622c0769>:0 \r\n  at Microsoft.Xna.Framework.GamePlatform.PlatformCreate (Microsoft.Xna.Framework.Game game) [0x00000] in <f4b5bf3a10334b9ab5945e18622c0769>:0 \r\n  at Microsoft.Xna.Framework.Game..ctor () [0x00213] in <f4b5bf3a10334b9ab5945e18622c0769>:0 \r\n  at DuckGame.Game1..ctor () [0x00000] in <4438120cee354bcb9a099117bc4fcdcb>:0 \r\n  at DuckGame.Activity1.OnCreate (Android.OS.Bundle bundle) [0x0001c] in <4438120cee354bcb9a099117bc4fcdcb>:0 \r\n  at Android.App.Activity.n_OnCreate_Landroid_os_Bundle_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_savedInstanceState) [0x00011] in <95d915721ad748108ff096dce8f8f32c>:0 \r\n  at (wrapper dynamic-method) System.Object.3(intptr,intptr,intptr)\r\n\tat md5b77adb502d21ac02450996b2750fbc27.Activity1.n_onCreate(Native Method)\r\n\tat md5b77adb502d21ac02450996b2750fbc27.Activity1.onCreate(Activity1.java:31)\r\n\tat android.app.Activity.performCreate(Activity.java:7174)\r\n\tat android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1220)\r\n\tat android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2908)\r\n\tat android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3030)\r\n\tat android.app.ActivityThread.-wrap11(Unknown Source:0)\r\n\tat android.app.ActivityThread$H.handleMessage(ActivityThread.java:1696)\r\n\tat android.os.Handler.dispatchMessage(Handler.java:105)\r\n\tat android.os.Looper.loop(Looper.java:164)\r\n\tat android.app.ActivityThread.main(ActivityThread.java:6938)\r\n\tat java.lang.reflect.Method.invoke(Native Method)\r\n\tat com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:327)\r\n\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1374)`\r\n\r\nFrom what I can see it occurs in the constructor of Game class? I added logging to my game1 class but it doesn't reach that point. Seems to occur before. Something with touch.\r\n\r\nHave the logcat also if it helps.\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- Android\r\n","comments":[],"labels":["Android"]},{"title":"Support for Arbitrary data DeviceBuffer as replacement of higher level VertexBuffer and IndexBuffer.","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nCurrently, in order to store geometry in monogame, we use `VertexBuffer `and `IndexBuffer`. In particular when we create a VertexBuffer, we also define the vertex semantics, so we could say it's a \"strong typed\" VertexBuffer, for example:\r\n\r\n```c#\r\nvar vb = new VertexBuffer(Graphics, VertexDeclaration);\r\nGraphics.SetVertexBuffer(vb);\r\n```\r\n\r\nBut modern GPUs have a lower level abstraction, where the memory and the vertex declaration are decoupled. This allows having arbitrary data in the GPU.\r\n\r\nThis enables a number of use cases, like arbitrary morph target animation (see below), or performance improvements.\r\n\r\nSo I would like to ask the MonoGame team to consider the introduction of these classes and APIs:\r\n\r\n```c#\r\n\/\/ Similar to VertexBuffer or IndexBuffer, but storing arbitrary data.\r\nclass DeviceBuffer {}\r\n\r\n\/\/ the data stored in the DeviceBuffer is given meaning when it's bound.\r\nGraphicsDevice.SetVertexBuffer(DeviceBuffer buffer, VertexDeclaration vdecl);\r\n```\r\n\r\n#### The case of Morph target animation.\r\n\r\nMorph target animation (a la Quake3 Arena) works like this:  let's say you have a walking animation made of 20 individual frames. Each frame is a full vertex set where every vertex is set for that frame's position.  In order to run the walking animation, you bind 2 or 3 vertex sets, and you blend the positions between them....  as you advance through the animation, you switch the vertex sets... so in the GPU you never have more than 3 or 4 morph targets at a time, but you can have animations with unlimited morph targets.\r\n\r\nSo, how is this done in the GPU?\r\n\r\nYou simply store all the vertex sets of all the morph targets in a single `VertexBuffer`, sequentially. When you want to draw, you bind the 4 vertex sets slices from the `VertexBuffer`, So although it's a single `VertexBuffer`, you bind it four times, at different offsets, and most importantly: **with different vertex semantics**.  These semantics correspond to Position0, Position1, Position2, Position3.\r\n\r\nRight now, the `VertexDeclaration `is set along with the `VertexBuffer` when it's created, so all the vertices are already declared as Position0, and there's no way to rebind them with an alternate vertex declaration (Position1, Position2, etc).\r\n\r\n@Jjagg proposed that an alternate solution is to have a `GraphicsDevice.SetVertexBuffer(VertexBuffer vb, VertexDeclaration vdeclOverride);`   so when the `VertexBuffer` is bound, it uses the vertex declaration override instead of its own.  But since graphics are moving in unknown directions, maybe we want to have APIs closer to modern hardware...\r\n\r\nAnyway, I believe these API additions don't break backwards compatibility, since it only adds new APIs and doesn't change\/remove anything from the existing API.\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["Both [sokol_gfx](https:\/\/github.com\/floooh\/sokol#sokol_gfxh) and [Veldrid](https:\/\/github.com\/mellinoe\/veldrid) have just a \"device buffer\" type. I would love to see this in MonoGame.\r\n\r\nUnfortunately .NET [already has a `Buffer` type in `System` namespace starting in .NET Standard](https:\/\/docs.microsoft.com\/en-us\/dotnet\/api\/system.buffer?view=netstandard-1.0). So I would recommend using `DeviceBuffer` as the type name (as proposed) or something else akin to `XBuffer`."],"labels":["Feature Request","Design"]},{"title":"MG3.8 - can't initialise audio on Android 6.0 and 7.1","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nCreating a SoundEffect object produces an exception on Android 6.0. and 7.1.2 devices, including Amazon Fire HD 8 2018\r\n\r\nIt seems to produce one of two possible errors:\r\n\r\n\r\n>Microsoft.Xna.Framework.Audio.NoAudioHardwareException: Audio has failed to initialize. Call SoundEffect.Initialize() before sound operation to get more specific errors.\r\n  at Microsoft.Xna.Framework.Audio.SoundEffect..ctor (System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Int32 sampleRate, Microsoft.Xna.Framework.Audio.AudioChannels channels, System.Int32 loopStart, System.Int32 loopLength) [0x00028] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n  at Microsoft.Xna.Framework.Audio.SoundEffect..ctor (System.Byte[] buffer, System.Int32 sampleRate, Microsoft.Xna.Framework.Audio.AudioChannels channels) [0x00000] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n\r\nor\r\n\r\n>System.DllNotFoundException: Couldn't initialize OpenAL because the native binaries couldn't be found.\r\n  at Microsoft.Xna.Framework.Audio.OpenALSoundController..ctor () [0x00022] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n  at Microsoft.Xna.Framework.Audio.OpenALSoundController.EnsureInitialized () [0x00014] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n  at Microsoft.Xna.Framework.Audio.SoundEffect.PlatformInitialize () [0x00000] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n  at Microsoft.Xna.Framework.Audio.SoundEffect.Initialize () [0x0001d] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n  at Microsoft.Xna.Framework.Audio.SoundEffect..ctor (System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Int32 sampleRate, Microsoft.Xna.Framework.Audio.AudioChannels channels, System.Int32 loopStart, System.Int32 loopLength) [0x00011] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n  at Microsoft.Xna.Framework.Audio.SoundEffect..ctor (System.Byte[] buffer, System.Int32 sampleRate, Microsoft.Xna.Framework.Audio.AudioChannels channels) [0x00000] in <f4b5bf3a10334b9ab5945e18622c0769>:0\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8 release nuget android\r\n\r\n#### What operating system are you using:\r\n- MacOS\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- Android\r\n","comments":["Does it work on 3.7?","I can\u2019t confirm as I actually don\u2019t possess one of the affected devices. This is from live crash reports. \r\n\r\nCertainly worked on 3.6. ","3.6 was the last error-free version.\r\nSince 3.7 version I always getting random crushes on random devices. And it is always a \"openal audio\" problem","Duplicate of #6738 I suppose.","I'm gonna keep this one open and close the other one.","This doesn't crash on startup like the other bug but only when trying to instantiate a SoundEffect object. Maybe that's just because 3.8 defers the loading of the openal lib? ","Yes, the audio system has been changed so it does not initialize on startup so users can use other audio solutions (like fmod).\n\nThe underlying issue is the same.","Are there any docs yet for swapping the audio backend, say for fmod, available @Jjagg as a possible workaround?","According to #6629 the audio is already optional."],"labels":["Audio"]},{"title":"ExternalReference does not resolve paths if content is added as a link.","body":"#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.0\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n- WindowsDX\r\n\r\nI have a model which is added as a link:\r\n```\r\n#begin ..\/..\/Monofoxe.Playground.Content\/Content\/Models\/monkey.FBX\r\n\/importer:FbxImporter\r\n\/processor:ModelProcessor\r\n...\r\n\/build:..\/..\/Monofoxe.Playground.Content\/Content\/Models\/monkey.FBX;monkey.FBX\r\n```\r\n\r\nOn load it fails to load the texture which is an ExternalReference.\r\n```\r\nDirectoryNotFoundException: Could not find a part of the path 'D:\\_Projects\\Monofoxe\\Monofoxe.Playground\\Monofoxe.Playground.Windows\\bin\\Debug\\netcoreapp3.1\\Content\\Monofoxe.Playground.Content\\Content\\textures\\eyes_u2_v1_0.xnb'.\r\n```\r\nActual path where the texture is:\r\n`bin\\Debug\\netcoreapp3.1\\Content\\textures\\eyes_u2_v1_0.xnb`\r\n\r\n\r\nIf it's not linked and is besides the Content.mgcb, everything works fine. This is not the problem with the model processor, tho. Other importers which use ExternalReference fail too.","comments":[],"labels":["ContentPipeline"]},{"title":"Problem with Depth Buffer on real Android devices","body":"It seems that there is a problem with depth buffer usage on real Android devices. My guess is that there is an issue with depth buffer precision. This issue really occured some time ago and I described it in the forums https:\/\/community.monogame.net\/t\/glitch-with-point-lights-on-android-in-deferred-rendering\/12222\/\r\n\r\nHowever, I updated to Monogame 3.8 and made several tests which made me believe that the issue is present in the framework itself, not in my code.\r\n\r\nTo keep it short - the shaders:\r\n- Work as expected on DesktopGL\r\n- Work as expected on Android emulator\r\n- Do not work correctly on real Android device (tested on SONY XA1 G3121, Samsung Galaxy A500FU)\r\n\r\nCode sample available here: https:\/\/github.com\/konradzaba\/DeferredLightningAndroid-Monogame\r\nPlease ignore misaligned textures on models.","comments":["As a workaround this, try to reduce the FarPlane distance.  If it's a float resolution problem they quality should get better as the FarPlaneNearPlane gets smaller.\r\n\r\nThis could also be an issue with the shader,  the compile GL code has this in it\r\n\r\n#ifdef GL_ES\r\nprecision mediump float;\r\nprecision mediump int;\r\n#endif\r\n\r\nIf your phones run on GL_ES it will have half the precision.\r\nSee for example if there you can reverse the order where you have of Multiplication & divisions between 3 or more numbers.","Thanks a lot! I played a bit with different values for FarPlane and NearPlane and indeed it is a good workaround \ud83d\udc4d "],"labels":["OpenGL"]},{"title":"Mixed up Joystick inputs","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nIf controllers are plugged in before the program is run, a strange bug occurs where the devices get mixed up. \r\nThe 2nd entry of `Joystick.GetState()` and `Joystick.GetCapabilities()` (index 1) reflect most of the first joystick's state and capabilities (index 0). Noticeable difference being `IsGamepad` property.\r\n\r\n~Tested this with Debug & Release builds, 3 different USB controllers, and calling the Joystick.Get methods within Update and Draw. The results are consistent.~ It appears to specifically occur to this device: `DisplayName=Nintendo Switch Pro Controller, Identifier=00000003-20d6-0000-11a7-000010056800`\r\n\r\nPlugging in controllers, after running the program (Desired result):\r\n![image](https:\/\/user-images.githubusercontent.com\/26529557\/90716579-4eda3700-e27b-11ea-9498-96a466692bfb.png)\r\n\r\nRunning the program, after plugging in controllers (2nd is overridden):\r\n![image](https:\/\/user-images.githubusercontent.com\/26529557\/90716538-31a56880-e27b-11ea-93b8-4d3dea1f0285.png)\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.0.1641\r\n\r\n#### What operating system are you using:\r\n- Windows 10 (Version 1903)\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["I am unable to reproduce your issue.\r\n\r\nHere is a quick gist of my test: https:\/\/gist.github.com\/harry-cpp\/3beee8bb853eafa0e9c7bbbaf6cd2dc6","Using more controllers, I've found that that it is only the wired *Nintendo Switch Pro Controller* that becomes overridden by others when starting a program \ud83d\ude05 \r\n\r\nIf this is of any help: `DisplayName=Nintendo Switch Pro Controller, Identifier=00000003-20d6-0000-11a7-000010056800`\r\n\r\nPardon any inconvenience I may have caused"],"labels":["Input"]},{"title":"External references built in source directory when running ContentPipeline at runtime","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nHello\r\nIn my game I reference the content pipeline to allow for user created content to be imported at runtime. Since I upgraded to 3.8, when my game imports a collada model and attempts to load the model, the following exception is thrown...\r\n\r\n> Microsoft.Xna.Framework.Content.ContentLoadException\r\n  HResult=0x80131500\r\n  Message=Error loading shared resource. Expected type Effect, received type MaterialContent\r\n  Source=MonoGame.Framework\r\n  StackTrace:\r\n   at Microsoft.Xna.Framework.Content.ContentReader.<>c__DisplayClass32_0`1.<ReadSharedResource>b__0(Object v)\r\n   at Microsoft.Xna.Framework.Content.ContentReader.ReadSharedResources()\r\n   at Microsoft.Xna.Framework.Content.ContentReader.ReadAsset[T]()\r\n   at Microsoft.Xna.Framework.Content.ContentManager.ReadAsset[T](String assetName, Action`1 recordDisposableObject)\r\n   at Microsoft.Xna.Framework.Content.ContentManager.Load[T](String assetName)\r\n\r\nThe import settings are as follows..\r\n\r\n`S_Importer      = \"OpenAssetImporter\";\r\nS_Processor     = \"ModelProcessor\";\r\n\r\n_processorParams.Add(\"ColorKeyColor\", \"0, 0, 0, 0\");\r\n_processorParams.Add(\"ColorKeyEnabled\", \"False\");\r\n_processorParams.Add(\"DefaultEffect\", \"BasicEffect\");\r\n_processorParams.Add(\"GenerateMipmaps\", \"True\");\r\n_processorParams.Add(\"GenerateTangentFrames\", \"False\");\r\n_processorParams.Add(\"PremultiplyTextureAlpha\", \"True\");\r\n_processorParams.Add(\"PremultiplyVertexColors\", \"True\");\r\n_processorParams.Add(\"ResizeTexturesToPowerOfTwo\", \"False\");\r\n_processorParams.Add(\"RotationX\", \"0\");\r\n_processorParams.Add(\"RotationY\", \"0\");\r\n_processorParams.Add(\"RotationZ\", \"0\");\r\n_processorParams.Add(\"Scale\", \"1\");\r\n_processorParams.Add(\"SwapWindingOrder\", \"False\");\r\n_processorParams.Add(\"TextureFormat\", \"DxtCompressed\");`\r\n\r\nThanks\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.0.1641\r\n- MonoGame Content Pipline 3.8.0.1641\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["Please use the FbxImporter instead of the assimp importer (even for non-fbx files). Duplicate of #6179. ","Changed to FbxImporter and now model loading fails because the textures are not found. They are created inside the source file directory not the export file directory.","@harry-cpp You know what changed here?","No idea.","> Changed to FbxImporter and now model loading fails because the textures are not found. They are created inside the source file directory not the export file directory.\r\n\r\n@AliciaRaven we know you're using the FbxImporter, but are you using a custom model processor or the stock MG `ModelProcessor` ?\r\n\r\nSeems like it could be a bug in either the `FbxImporter` or `ModelProcessor` to me.\r\n\r\nWe could add in another unit test here...\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/Tools\/MonoGame.Tools.Tests\/ModelProcessorTests.cs\r\n\r\n... to test this situation and figure out the bug.\r\n","Intuitively it seems like this is a change in where we set the working directory for the content pipeline.","The processor is just default ModelProcessor. My game UI has a file dialog window used to choose the collada file. The textures xnb and mgcontent file are created in that directory where as the model xnb and its mgcontent are built in the specified temp directory. When i test using the pipeline build tool, all files are built inside the bin as expected.","Here is some extra info, i hope it helps. It seems some where a path is built using parts from both source and output paths.\r\n\r\nCreate PipelineManager Giving Path..\r\nD:\\My Project\\bin\\Debug\\netcoreapp3.1\\Content\\Temp\\\r\n\r\nBuild Content Source Path\r\nD:\\Asset Store\\Test Imports\\Tree\\Tree.dae\r\n\r\nBuild Content Output Path\r\nD:\\My Project\\bin\\Debug\\netcoreapp3.1\\Content\\Temp\\Tree.xnb\r\n\r\nNow loading the model throws the following exceptions\r\n\r\nInner Exception 1:\r\nFileNotFoundException: Content\\Asset Store\\Test Imports\\Tree\\TreeTexture2_0.xnb\r\n\r\nThe path above starts with Content folder which is part of output path, then the other folders are from the input path.\r\n\r\nInner Exception 2:\r\nDirectoryNotFoundException: Could not find a part of the path 'D:\\My Project\\bin\\Debug\\netcoreapp3.1\\Content\\Asset Store\\Test Imports\\Tree\\TreeTexture2_0.xnb'.\r\n\r\nThe path in the second exception begins with part of the source path and ends in part of the output path.\r\n\r\nAnd the source folder now contains the texture xnb files.","The following is also kind of connected: https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7330","> \r\n> \r\n> Intuitively it seems like this is a change in where we set the working directory for the content pipeline.\r\n\r\nThis appears to be correct. The issue seems to be changes in BuildContent.cs where the PipelineManager sets Working directory and then all following code that uses Path.GetFullPath returns based on that. Any import files outside that scope get messed up paths.\r\n\r\nIn my code changing the Project directory given when creating PipelineManager, to the root path for the hdd fixes the problem, providing the file selected to import is on that drive.\r\n\r\n`ImportManager = new PipelineManager(@\"D:\\\", outputDir, intermediateDir)`","Thoughts @harry-cpp \/ @Jjagg , is this quickly solvable for the next point release?","Not quickly solvable, but only a problem when using linked content.","I was wrong when i said changing the base directory to the drive root was working. It just seems to work because it looks for the file where it has saved it. The issue remains that it has saved it in the wrong place. In this case the associated textures are built in the output directory plus the full path taken from the source file path. Path.GetFullPath can not be trusted when using links or importing models in game as is my case.\r\n\r\nSource and Output Paths\r\nC:\\Source Folder 1\\Source Folder 2\\SourceFile.dae\r\nC:\\Output Folder 1\\Output Folder 2\\\r\n\r\nBecomes\r\nC:\\Output Folder 1\\Output Folder 2\\Source Folder 1\\Source Folder 2\\Texture.mgcontent\r\n","@harry-cpp why not easy to solve? its just a case of tracking file paths with strings and avoiding the use of Path.GetFullPath which as we have established is not reliable when input can be anywhere on a file system. Links are broken, and any in game content loading is broken. I know most game creators expect content to be built at compile time and loaded at the start of a game or level, but that leaves a huge gap in creativity. My game is held up because I have an online system where users need to upload there own content at runtime to build their own world. Creating content at compile time is fine for 2d mobile games but that has no flexibility and if an issue such as content load paths causes issues, then user created content, level editor imports and model editor applications are not going to be possible with monogame.","Any update on this? Been getting it a lot today. \r\n\r\nERROR:\r\nMicrosoft.Xna.Framework.Content.ContentLoadException: 'The content file was not found.'\r\n\r\nBecause it searches this directory:\r\nC:\\Projects\\MyGame\\MyGame\\bin\\Debug\\netcoreapp3.1\\Content\\Items\\Animation\\House\\ghost.xnb\r\n\r\nBut Content compiles xnb in this directory:\r\nC:\\Projects\\MyGame\\MyGame\\Content\\bin\\Items\\Animation\\House\\ghost.xnb\r\n\r\n","@nkomp18 The first folder is where content actually should be. The content should be copied over from the second folder to the first folder as part of the msbuild task.\n\nIs this an old MonoGame project? Can you share your csproj?","I created a new project, copied the files across and the problem was resolved. Not sure what caused it, and I no longer have the old one, sorry.","Just to be clear, the issues reported in this thread by nkomp18 are not related to the original issue and were just template errors. This issue is the changes to use Path.Combine that have broken imports for files outside the build directory. This includes the issue related to broken links in MGCB #7330. Just string path management issues here, please dont push this issue down the line @mrhelmut\r\n\r\nI have a hack that almost fixes this. In my game when i create an instace of PipelineManager, i have to give the projectDir path as the drive root. Then i can import files inside the game because they are then not outside that base path. This does not fix importing files that are not on the same drive as the game.","I've read your original message, a ping wasn't quite required.\r\n\r\nPlease bear in mind that MG is a community project and that we are doing what we can to move things forward. We also need to make an arbitrage in regard to what goes in or not in a release, and that sometimes include postponing an issue to avoid pushing a release back. I understand the frustration, but we have to prioritize. We are likely going to do more frequent releases from now on.","Ok, i understand. Thanks for responding and i also want to say i do appreciate the work you guys do.","> ... why not easy to solve? \r\n\r\nPlease note that the term \"`Content` directory\" refers to both the mgcb output directory and the Content root directory of the loaded game. \r\n\r\nThe entire content build system is designed to maintain a single relative path from the `Content` source directory to the output's `Content` directory per file. \r\nWhen a texture is loaded through a model, the base asset's path becomes the relative root for that asset, stored as an `ExternalReference` object:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/1e38b48b405667f6f3958209e9424a36ddfdfe99\/MonoGame.Framework.Content.Pipeline\/ExternalReference.cs#L57-L63\r\n\r\nYou might suggest removing the `GetFullPath` call.  That still would not work for off drive paths. \r\nWorse, it would **silently break** testing and packaging games. At this point, it is better to crash and force a manual copy.\r\n\r\nOn the read side of `ExternalReference` moves the root back to `Content` appending the saved path:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/1e38b48b405667f6f3958209e9424a36ddfdfe99\/MonoGame.Framework\/Content\/ContentReader.cs#L110\r\n\r\nThe reader is correct. All assets **must** exist under `Content`. This is by design(see above), otherwise, the packaging and subsequent loading system breaks.\r\n\r\n---\r\n\r\n> ... when input can be anywhere on a file system. ... users need to upload their own content at runtime\r\n\r\nIf those are your needs, you need a custom secure build system using offline parsing and validation. During that process, rewrite the texture paths to \".\" and co-locate the texture files in the same directory.\r\n\r\n","You might loook at my sample https:\/\/github.com\/damian-666\/MGShadersXPlatform    i put all myh content i one mcdb file.   theres no linked refernces to maintain.  the assets are complile per platfrom and go to the right place.    took me a while to find a template that worked.. i had install netcore 3.1.. after .netocre 6.. its a good setup to target multiplafroms and i had this type of problem when i targeted only one and tried not to use shared game code.   Teh game code is using MonogameGL and the exes are thn as possible and target DX or Gl or android.  so its perfect.  u touch an fx file and everyting goes where it should","But i cant load mp3 and have otehr issues so this might not fully solve ur issues.. im just doing texture s and shaders and edit he content.mgcb file manually so it doesnt add a target..   it wil use the environement  variable of the target exe.. im using netstand 2.0 vs 2022 and windows  to target everything tho.. becaused mac doesnt have touch screens or id want one"],"labels":["ContentPipeline"]},{"title":"Need access to ResetRenderTargets() on WindowsUWP","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n#\r\n# GitHub issues are only for bug reports \/ feature requests\r\n# if you have a question, ask it on the community site:\r\n# https:\/\/community.monogame.net\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nFor Windows, Mac, Linux, iOS and Android (and possibly others), a call to GraphicsDevice.Present() allows for rendering something and presenting it to the screen manually.\r\ne.g.\r\n```\r\n1) render a \"please wait...\" message\r\n2) call GraphicsDevice.Present()\r\n3) do some time consuming stuff\r\n```\r\nThe \"please wait...\" message will get shown on the platforms mentioned above before the time consuming stuff happens.\r\n\r\nThis does not work on Windows Universal (UWP) for some reason (just get a blank screen). However this works:\r\n```\r\n1) call GraphicsDevice.ResetRenderTargets()\r\n2) render a \"please wait...\" message\r\n3) call GraphicsDevice.Present()\r\n4) do some time consuming stuff\r\n```\r\nThe problem is that GraphicsDevice.ResetRenderTargets() is not accessible.\r\n\r\nSo it would be nice to have access to that function, or some other way to achieve this.\r\n\r\nUAPPlatform.BeforeDraw() also would suffice, as is it just calls GraphicsDevice.ResetRenderTargets(), but it does not seem to be accessible either. That function has the following comment: \"For a UAP app we need to re-apply the render target before every draw.\" \r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.0\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n- WindowsUWP\r\n","comments":["I'm going to investigate but exposing a private API doesn't sounds quite right to me. I'd rather look into why ```Present()``` might not work properly (though I have my guess: UWP has a forced Vsync and that may mess things up)."],"labels":["Windows 10 UWP"]},{"title":"[DesktopGL] Texture2D.GetData always reads entire texture","body":"When using `GraphicsDevice.GetBackBufferData` in DesktopGL while a `RenderTarget2D` is applied, the returned texture data is ordered incorrectly. When it is stored in a texture without re-ordering, you can see that the data is stored \"upside down\".\r\n\r\nThis issue does not occur when there is no applied render target.\r\n\r\nThe following two screenshots were taken in a [test app](https:\/\/gist.github.com\/Ellpeck\/d687f67ad623e5bbe1de63c63d670a97). The left side of each screenshot is the original drawing, and the right side is an overlay of a texture generated from getting the drawn data from the back buffer. The first screenshot was taken without a render target applied, the second one was taken with one applied.\r\n\r\n![dotnet_CT6uXZ4dWs](https:\/\/user-images.githubusercontent.com\/5741138\/89740359-2dfa3080-da88-11ea-9e82-7196a3f838e4.png)\r\n![dotnet_EHgfjw7uZq](https:\/\/user-images.githubusercontent.com\/5741138\/89740369-35b9d500-da88-11ea-887c-ee403d448ead.png)\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.0.1375-develop\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["There also seem to be some other issues with the `GetBackBufferData` method: If a render target is currently applied that is smaller than the window's size, the rectangle passed into the method yields the data from an incorrect location. It seems like this is due to `PresentationParameters.BackBufferWidth` and `BackBufferHeight` being used to calculate where the pixels are located, even though they don't update when a render target is applied.","The code is here: https:\/\/github.com\/MonoGame\/MonoGame\/blob\/6b33e47c0fb4ac3e0c388dd14cd96d0e1a7930a6\/MonoGame.Framework\/Platform\/Graphics\/GraphicsDevice.OpenGL.cs#L1214\n\nThe correct behavior is to always read data from the default frame buffer, even if a render target is applied. So we probably need to bind the default frame buffer (if it isn't bound) before reading from it and rebind the RT (if any) afterwards. We should document the performance impact this swapping causes.","If the correct behavior is not reading from render targets at all, then how is that achieved? There is `Texture2D.GetData`, but because that creates some rather large arrays every time it is called (whereas GetBackBufferData only seems to create an array as large as the rectangle you pass), it's not feasible for actions that require data to be gotten more frequently. \r\n\r\nIn my case, I am using GetBackBufferData and a \"draw the entire object with a solid, unique color\" effect to create pixel-perfect object selection using the mouse.","Texture2D.GetData also has overloads that take a rectangle to get data from. The GetBackBufferData API mimics the Texture2D.GetData API, but is specifically meant for the back buffer.\n\nWith regards to pixel perfect collision\/selection, I'd say it's better to retrieve the hittable pixels of your objects once and store them in non-video memory. And maybe even beyond that reconsider if pixel perfect selection is appropriate because in my experience people often use it when a bounding box is easier and more user friendly.\nHowever, if you want to do it with RT and GetData, I recommend calling GetData on the render target after unbinding it.","As you can see here:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Platform\/Graphics\/Texture2D.OpenGL.cs#L240\r\n\r\nTexture2D creates an array that is as big as the texture itself, no matter how large the rectangle you pass is. This causes it to use much more memory than GetBackBufferData, which only ever creates an array as large as the rectangle:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/6b33e47c0fb4ac3e0c388dd14cd96d0e1a7930a6\/MonoGame.Framework\/Platform\/Graphics\/GraphicsDevice.OpenGL.cs#L1223\r\n\r\nIs this intended behavior, and can this be modified? (It might just be that `GetTexImage` doesn't have this functionality.) If this is an actual issue, I can open a separate thread for it as well.\r\n","This is an issue in the OpenGL implementation of Texture2D.GetData and we should fix it. It should use glReadPixels instead of glGetTexImage. We can use this issue to track this.","@Jjagg isn't glReadPixels only for reading the current framebuffer? There's also glGetTextureSubImage but it's only available in 4.5+","> isn't glReadPixels only for reading the current framebuffer?\n\nYes, that is correct. On mobile, with GLES, we create an FBO for every texture, and bind and read it when `Texture2D.GetData` is called (GLES does not support glGetTexImage). That's probably what I was thinking we should do. \n\nHowever, I don't know what the performance impact is of doing this is on full OpenGL. I think whatever we do here, we need to benchmark it  (in running games, not just microbenchmark) to make sure it does not have a significant negative impact on performance. \nA simpler optimization we can do is check if glGetTextureSubImage is available and use that if it is."],"labels":["OpenGL","Help Wanted"]},{"title":"Emulate DX9 half pixel offset for DX backend","body":"To render things compatible with XNA when the `GraphicsDevice.UseStandardPixelAddressing` flag is set to false, we need to add a half pixel offset at the end of all vertex shaders. For OpenGL MojoShader does this by adding the value of a shader parameter at the end of vertex shaders. We set this parameter at runtime based on the viewport size (because the offset is applied in [normalized device coordinates](https:\/\/learnopengl.com\/Getting-started\/Coordinate-Systems)) and depending on whether the half pixel offset is required. We could do something similar for DX. \r\n\r\nFor the OpenGL part and general discussion about this topic see #6619.","comments":[],"labels":["MGFX","DirectX"]},{"title":"Add more hotkeys in MGCB Editor","body":"Small quality of life improvement.\r\nVS2019 scheme should be pretty familiar for most C# developers\r\n\r\n\"New Item\" - Ctrl+Shift+A\r\n\"Existing Item\" - Shift+Alt+A\r\n\"Rename\" - F2\r\n\r\nIt would be nice if it could be configured","comments":[],"labels":["Feature Request","MGCB Editor"]},{"title":"Support Joystick on WindowsDX","body":"Joysctick class in DX project don't work.\r\nThis code works with DesktopGL project but not with WindowDX why:\r\n\r\nJoystickState joystickState = Joystick.GetState(0);\r\nif (joystickState.IsConnected)\r\n     system.Console.WriteLine(\"Connected\");\r\n\r\n\r\n\r\n\r\n- MonoGame 3.7.1 (try with different version)\r\n\r\n- Windows\r\n\r\n- WindowsDX\r\n","comments":["The DesktopGL versionen relies on SDL for joystick support. WindowsDX uses SharpDX and the joystick part is not implemented\/supported. However, SharpDX provides a wrapper for DirectInput which could be added there I guess.\r\n\r\nEdit: I had a quick look at this. So it would be possible to enumerate all currently connected joysticks and fill the joystick capabilities structure. There must be a mapping from joystick number to instance GUID (since DInput uses GUIDs) in order to be compatible to the MonoGame interface. Quick and simple: use the order in which joysticks are enumerated or sort by GUID? I haven't figured out yet how to detect connection events like SDL does."],"labels":["Feature Request","Input"]},{"title":"tex2Dlod broken for TextureCube on OpenGL","body":"Edited...\r\n\r\nIm using a older version of monogame i don't see anything about it being fixed though.\r\n\r\n**Much appreciated if anyone can confirm this as well since im not on the latest version.  Example project included.**\r\n\r\n**On DX...** \r\nLOD works \r\nBias works.\r\n\r\n**On GL...** \r\nLOD is broke  \r\nBias works.\r\n\r\nIn a shader under GL, with the shader level set to 3.0. I loaded 6 mip mapped textures thru the pipeline, set the data to a texture cube in game1. Mip maping levels set to true in the content pipeline then ran the app. \r\n\r\n`texCUBElod(CubeMapSampler, float4(lightNormalCoord, mipLevel));`\r\ntexCUBElod Appears to be broken on GL tex2Dlod is also not working. \r\n\r\nWhen attempting to set a different Level Of Detail or Miplevel on the shader nothing happens when the lod call is used, it seems to just give the top mip level 0 , however the levels are present it just wont return them.\r\n\r\nThe older vs2017  GL code is here for the test. I also tested this on vs2019 with a recent nuget and it is also broken there. \r\nhttps:\/\/drive.google.com\/file\/d\/1sk5Q60ODwGbyqcPcdC_hp8O_oC8EADkW\/view?usp=sharing\r\n\r\n![Tex2dLod](https:\/\/user-images.githubusercontent.com\/7495196\/87836181-3ed6ce00-c85d-11ea-8377-5c999ee9fe06.png)\r\n![MipmapCubesDx](https:\/\/user-images.githubusercontent.com\/7495196\/87836281-82c9d300-c85d-11ea-87c3-3dc341711e28.png)\r\n","comments":["Edited.\r\nI made a GL test app to see the behavior you can see whats up with how lod is not working.\r\nWhen i switch to use lod briefly it jumps back to what appears to be the 0 mip level.\r\n\r\nThough bias works here.\r\n![texCUBElod_bug01](https:\/\/user-images.githubusercontent.com\/7495196\/86176369-d49afb00-baf2-11ea-8faa-59a337413731.gif)\r\n\r\nThe code is here for the test even though its a older version if anyone can take a look \r\nhttps:\/\/drive.google.com\/file\/d\/1sk5Q60ODwGbyqcPcdC_hp8O_oC8EADkW\/view?usp=sharing\r\n","SetIBLFace isn't setting the mip data. This fixed the issue for me (I'm testing with FNA though, no idea if this fixes MG DesktopGL or DX):\r\n\r\n```\r\n        public static void SetIBLface(TextureCube map, Texture2D t, CubeMapFace face)\r\n        {\r\n            for (int i = 0; i < t.LevelCount; i += 1)\r\n            {\r\n                \/\/ Tons of allocations, barf\r\n                var data = new Color[(t.Width >> i) * (t.Height >> i)];\r\n                t.GetData(i, null, data, 0, data.Length);\r\n                map.SetData(face, i, null, data, 0, data.Length);\r\n            }\r\n        }\r\n```","Ok edit i came back to this again using the above. So apparently the only place this is actually busted is GL. \r\n\r\nUnfortunately texCubeLod isn't working for CubeMaps under GL level 3.0 and im guessing at all shader levels.\r\nI believe it's broke for textures as well on GL.  \r\nSince Lod is the primary function to directly select a mip level in a shader this is a big shader problem.\r\n\r\nSince texCubeBias does work i can also conclude this isn't a SetData problem.","Were would i need to look, if i were to attempt to try fix this.\r\n\r\nThis is a extremely important glsl hlsl function in it's own right.\r\n\r\nfor a example.\r\nThis is important in a pbr shader for the specular pre-filtered reflection cubemap.\r\nhttps:\/\/docs.imgtec.com\/PBR_with_IBL_for_PVR\/topics\/Assets\/pbr_ibl__the_prefiltered_map.html","Have a look at the GLSL code for this shader in the debugger, and see if it contains a proper GLSL texture instruction for lod sampling:\r\n```\r\neffect.shaders[]._glslCode\r\n```\r\nIf the instruction is missing, or otherwise wrong, then it's probably a MojoShader limitation.","> \r\n> \r\n> Have a look at the GLSL code for this shader in the debugger, and see if it contains a proper GLSL texture instruction for lod sampling:\r\n> \r\n> ```\r\n> effect.shaders[]._glslCode\r\n> ```\r\n\r\n\r\nI have no idea how to do that.\r\n\r\n","I'm talking about inspecting variables in the VS debugger. If you set a breakpoint where the Effect object is being used, and then hover over the Effect variable, you can drill down to the GLSL code. Microsoft.Xna.Framework.Graphics.Effect contains a Shader array called _shaders. Each Shader object contains a string variable called _glslCode. These fields are not public, but in the debugger you should still see them. The GLSL code in there doesn't look like something a human would write, because it's autogenerated, but it's still normal GLSL, and the texture sampling instruction has to be in there.","Did this ever get fixed?  I'm seeing the same issue in latest Monogame.","Probably not fixed. I would suggest to take a look at the generated GLSL, like I described above. \r\nIf MojoShader translates the `tex2Dlod` properly, you should find a `textureLod` instruction in there, where the 3rd parameter is the lod level.","> Probably not fixed. I would suggest to take a look at the generated GLSL, like I described above. If MojoShader translates the `tex2Dlod` properly, you should find a `textureLod` instruction in there, where the 3rd parameter is the lod level.\r\n\r\nI looked into this and apparantly the texCUBElod() function only gets translated to textureCube() with two parameters, instead of textureLod(). This is even present in the generated XNB file. So if this indeed is a MojoShader issue, are there any possibilities of this issues getting fixed?","It's already fixed: https:\/\/github.com\/MonoGame\/MonoGame\/pull\/7533\r\n\r\n... sort of"],"labels":["MGFX","OpenGL"]},{"title":"Switch to System.Numerics for relevant types","body":"[System.Numerics](https:\/\/docs.microsoft.com\/en-us\/dotnet\/api\/system.numerics?view=netcore-3.1) provides hardware accelerated Vector and Matrix types.\r\n\r\nCurrent Candidates\r\n- [ ] Vector2\r\n- [ ] Vector3\r\n- [ ] Vector4\r\n- [ ] Matrix3x2\r\n- [ ] Matrix4x4\r\n\r\nWhat are the main challenges involved in switching to these?\r\n1. Breaking namespace change.\r\n1.1 We can provide overloads for the old types that will be marked as deprecated for a few versions.\r\n2. Matrix4x4 and Matrix are the same type, but different names, so not straight forward.","comments":["The biggest concern we've had about this in the past is that `System.Numerics` passes big types like `Matrix4x4` by value and not by reference.  This is an optimization they didn't take from the XNA library and instead are depending on the C# compiler to do the right thing in these cases.","> The biggest concern we've had about this in the past is that System.Numerics passes big types like Matrix4x4 by value and not by reference. \r\n\r\nWe are already doing that, aren't we?","just ran a quick BenchMark.Net test using XNA Matrix Multiply both by val and by ref, System.Numerics Matrix 4x4 (which is by val), and a more optimized version for XNA Matrix multiply both by val, and using the *in* modifier. \r\n\r\nRunXnaMultiplyVal `Matrix.Multiply(m1, m2)`\r\nRunXnaMultiplyRef `Matrix.Multiply(ref m1, ref m2, out Matrix result)`\r\nRunCustomMultiplyByVal `MatrixExtension.MatrixMultiply(m1, m2, out Matrix result)`\r\nRunCustomMultiplyByIn `MatrixExtension.MatrixMultiplyByIn(in m1, in m2, out Matrix result)`\r\nRunSystemMultiply `Matrix4x4.Multiply(m1, m2)`\r\n\r\non .NET Core 3.1, System.Numerics is clearly fastest even though passed by val\r\n\r\n|                         Method |       Mean |     Error |    StdDev |\r\n|------------------------------- |-----------:|----------:|----------:|\r\n|               RunXnaMultiplyVal |   4.806 us | 0.0445 us | 0.0416 us |\r\n|               RunXnaMultiplyRef |   4.071 us | 0.0290 us | 0.0271 us |\r\n|     RunCustomMultiplyByVal |   3.613 us | 0.0722 us | 0.0675 us |\r\n|      RunCustomMultiplyByIn |   3.343 us | 0.0300 us | 0.0281 us |\r\n|              RunSystemMultiply |   2.305 us | 0.0234 us | 0.0219 us |\r\n\r\nin .NET 4.8, there seems no benefit of System.Numerics\r\n\r\n|                         Method |       Mean |      Error |     StdDev |\r\n|------------------------------- |-----------:|-----------:|-----------:|\r\n|               RunXnaMultiplyVal |   5.298 us |  0.1045 us |  0.1244 us |\r\n|               RunXnaMultiplyRef |   4.358 us |  0.0863 us |  0.1060 us |\r\n|     RunCustomMultiplyByVal |   3.957 us |  0.0926 us |  0.1622 us |\r\n|       RunCustomMultiplyByIn |   3.530 us |  0.0683 us |  0.1084 us |\r\n|              RunSystemMultiply |   5.575 us |  0.0503 us |  0.0446 us |\r\n","This is a really open question: does anyone have a real world use case where using ```System.Numerics``` shows a noticeable difference?\r\n\r\nOn full games, these operations are likely invisible in a profiler, so just to make sure that we're not chasing rainbows.\r\n\r\nJust a side note, but likely not relevant to the target use case (which I assume to be processing tools over games): these optimizations will not be used on consoles.","Could you post source for the benchmarks @perpetualKid ?","here is the code [ConsoleApp1.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/4847556\/ConsoleApp1.zip) @bartwe\r\n","so just for the fun of it did I do this switch to System.Numerics for relevant types: Matrix(4x4), Plane, Quaternation and Vector(2-4). Code convertion is pretty much straight forward, much simpler than first anticipated. Beside of removing the MG Types, adapt System.Numerics usings, and change Matrix to Matrix4x4, there are only minor code changes required. \r\nFor those interested in the source, please see this fork https:\/\/github.com\/perpetualKid\/MonoGame\/tree\/System.Numerics\r\n\r\nI've converted\/tested WindowsDX and DesktopGL only, as well the Windows tools. \r\nFew observations:\r\n- the types are mostly compatible and interchangeable. A very few missing methods (like `Vector*.Round|Ceiling|Floor|Hermite|CatmullRom`) needed to be addressed and are implemented as extension methods here https:\/\/github.com\/perpetualKid\/MonoGame\/blob\/System.Numerics\/MonoGame.Framework\/MatrixExtension.cs\r\n- some other functionality missing in System.Numeric types are constants i.e. Vector\/Matrix.Up|Down|Forward|Backward etc. For the few places used I just implemented those inline (i.e. `Microsoft.Xna.Framework.Vector3.Down` could be expressed as `System.Numerics.Vector3.UnitY * -1`)\r\n- once done, some unit tests are failing. This is due to prebuild test assets like Tests\\Assets\\Fonts\\Default.xnb which I couldn't find\/figure the souce to rebuild. The tests in question fail as they try to load types references from Xna namespace. To fix this would need to rebuild the assets, and if different sources are used (such as different font), also change the reference images used for comparison. \r\n- I had upgraded the target framework for .NET from 4.5.2 to 4.8. Maybe another version in between (4.6.2. or 4.7.1) may have worked, but some System.Numeric types or methods are not available in 4.5.2. As side effect this would allow to use C#7.3 syntax (`ref readonly, in`) \r\n- Also the tools projects where upgraded to .Net Standard 2.1. Can't remember the exact reason, I think also some System.Numerics implementation was missing in 2.0 still.\r\n- Couldn't find a way to attach Vector*.TypeConverter (from MonoGame\/MonoGame.Framework\/Design) to System.Numerics Vectors. However, I'm unsure of any usage, so dropped for now.\r\n\r\nOverall, took me ~2 days of efforts, but this is PoC only, and with the constraints mentioned above, an implementation would only be feasible by leaving some compatiblity behind (namespace\/name changes, framework support). Also, this would require testing for non-Windows platforms.\r\n\r\nNow to get to a real-world scenario test :)\r\nI've used the Monogame-version https:\/\/github.com\/perpetualKid\/ORTS-MG\/tree\/Core.MG.Numerics of [OpenRails](http:\/\/openrails.org\/) train simulator (official OR is still using XNA, although there are efforts to move to MG also).\r\nAgain here, moving to System.Numerics and the above MG-version, adoption is straight forward. Importing namespaces, renaming Matrix, and recompile some effect shaders. Rebuilding, and - just works :) Both an .NET 4.8 and .NET Core 3.1 version are working fine.\r\n\r\nFor the impact: Not a reliable performance test, but boths version show a slight improvement of about 5-10% when comparing in-game FPS. Running through certain heavy scenery in the game which typically gets me barely to 20fps, now averages between 21 and 22 **WOW** The .Net Core version is bit slower (also from before) but shows similar improvement.\r\n\r\nConclusion (based on this very limited testing): There seems to be some (noticable) impact improving performance. While the changes (at least as required for this limited scenario) are managable, they come at a cost of breaking backwards compatibility. Once MG team is ready to do so, it's certainly worth adapting System.Numerics, reducing implementation surface with custom\/own types over (.NET) framework-provided. The types implemented in MG are fairly mature and need low maintenance, and from MG perspective there is no immediate benefit of changing. If thinking of other changes (i.e. implement these types as readonly structs instead (?), this would be breaking change as well, so System.Numerics might be the more favorable way.\r\n\r\nAlso, for the tested scenario, while there seems some improvement, this does not justify to maintain a custom version of MG just to benefit. If MG though decides to go forward with this change, I'm happy to support efforts.\r\n    ","Thank you for trying it on a full 3D project.\r\n\r\nIMO if this requires breaking changes, we should not schedule it for MonoGame 3.x\/4.x (which is intended to be XNA-compatible with some sort of LTS) but more likely something to think about when undergoing refactors\/redesigns for what would be a future MonoGame 5.x (which is expected to be a departure from the XNA compatibility).\r\n\r\nAnother concern here would be to upgrade the target framework\/C# language version. These are kept low because consoles can't handle language features which rely on .Net 4.6+ assemblies (but this is likely to be lifted at some point).","I'm my case, I don't mind if Monogame keeps using it's own math types for backwards compatibility, _as long as it introduces intrinsic conversions from\/to System.Numerics types_ , because I'm pretty much fed up of writing ToXNA(); and ToNumerics(); extensions for every new project I write using monogame.\r\n\r\n```c#\r\npublic static implicit operator Microsoft.Xna.Framework.Vector3(System.Numerics.Vector3 v) { return ... };\r\n```\r\n\r\nThis would allow developers to begin using BCL types right now, _without breaking compatibility_.\r\n\r\nIn fact, the replacement process can be done in two steps over a long period of time (1, 2 years):\r\n\r\n1- As soon as possible, and during the rest of the life cycle of 3.x\/4.x , introduce the intrinsic conversions and encourage developers to use BCL types instead of XNA types.\r\n\r\n2- After the \"adaptation period\", replace the XNA types by the BCL types. Hopefully at this point enough projects will be already using the numerics types.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Hi, is there a pull request or any news to switch to System.Numerics? Other than performance I am also concerned about decouplation between my MonoGame.Framework front-end and the infrastructure libraries that are relying on System.Numerics.","@Xeeynamo there's not been any development for a while.... I think there's a PR to move the pure math types to a separate package, but no progress on making these types compatible with System.Numerics.\r\n\r\nThe biggest roadblock is making Monogame.Framework to depend on System.Numerics.Vectors package. Although this seems a fairly simple dependency, Monogame developers have a lot of aversion to make the framework to depend on other libraries.\r\n\r\nSo first things first: Should monogame.framework depend on System.Numerics.Vectors?   thoughts? @tomspilman @harry-cpp @mrhelmut \r\n\r\nAfterwards, it would be easy to include the aforementioned implicit conversions, which would allow developers to use either Xna or numerics types seamlessly.\r\n\r\nSure, there might be some conversion overhead, but there's already conversion overhead for those of us who already need to interop between XNA and Numerics. So this is all about making developer's life easier.\r\n\r\n","I would be curious about a real world benchmark in regard to moving to System.Numerics.\r\n\r\nOther than that, as long as we have a replacement for runtimes where this isn't supported, we should be fine.","I've just created #7417 PR to showcase an initial, and very basic System.Numerics.Vectors support. Let me know what you think.","> This is a really open question: does anyone have a real world use case where using `System.Numerics` shows a noticeable difference?\r\n> \r\n> On full games, these operations are likely invisible in a profiler, so just to make sure that we're not chasing rainbows.\r\n> \r\n> Just a side note, but likely not relevant to the target use case (which I assume to be processing tools over games): these optimizations will not be used on consoles.\r\n\r\nThis is not directly related to Monogame, but since someone asked for real world benchmarks, I figured I'd pass along what I discovered today. And no, this is not a \"benchmark\" per-se, but it's a pretty real world usage (for me at least).  \r\n\r\nSo, for the last couple of weeks I've been updating my graphics API, [Gorgon](https:\/\/github.com\/Tape-Worm\/Gorgon), to use System.Numerics instead of SharpDX's vector\/matrix types... I got some positive feedback on matrix operations in a benchmark I did between SharpDX and System.Numerics (a bit of a speed boost for System.Numerics, not huge - can't recall the totals right now).\r\n\r\nAnyway, today I got enough of it moved over to System.Numerics.  I ran my little benchmark example app which fills the window with bouncing ball sprites, 131072 of them. The balls move, scale, and change their opacity over time. \r\n\r\n* Before switching (SharpDX's vectors\/matrices): 56-60 FPS (~18-16 mesc delta).  \r\n* After switching (System.Numerics): 45-47 FPS (~21-23 msec delta).  \r\n* After reverting back to the SharpDX types: 56-60 FPS again.\r\n\r\nJust for reference, I'm using .NET Framework 4.7.2.  It's quite possible .NET 5\/Core 3.1 would yield better results with System.Numerics, but until Microsoft gets their act together regarding UI, I can't switch to confirm this.\r\n\r\nI'm guessing the difference is due to the fact that I can pass my parameters by reference in the SharpDX types, but clearly not in the System.Numerics. The SIMD doesn't seem to balance it out.\r\n\r\nAnyway, I hope this helps.\r\n\r\n","@Tape-Worm System.Numerics performance is highly dependant on the target framework AND the compiler you use. System.Numerics are SIMD accelerated only on a number of scenarios, one of those is, as you said, targeting Net Core 3.1 and above.\r\n\r\nAlso, a lot of methods are agressively inlined, which might produce misleading reasults in a number of scenarios.\r\n\r\nFor example: let's say you have a NetStandard 2.0 library using System.Numerics.... since NetStandard 2.0 doesn't have native support for System.Numerics, the methods that are agressively inlined within your library will use the regular code fo inlining. If you upgrade your library to NetStandard 2.1 (or NetCore) which _does_ support SIMD, the methods will be inlined using the SIMD code path, which is much faster.\r\n\r\nSo, if you write a library targeting netstandard2.0, and you consume it on a NetCore3.1 project, the methods in the library will use the slow code path because they've been inlined.\r\n\r\nThat's why, nuget packages that use system.Numerics maths agressively, are recomended to target netstandard 2.0 for compatibility, AND netstandard 2.1 (or netcore3.1) for performance.\r\n\r\nBut to me the whole point of using System.Numerics is not performance, but interoperability between libraries.\r\n\r\nSharpDX types might be fast when you do a benchmark. But on a real project where multiple libraries need to act together, and you need to pass vectors and matrices between them, if the vector and matrix types are specific to each library, you need to convert between types. In other words, what you win in performance, you loose in type conversions.\r\n\r\nTalking on benchmarks, I use to run tests in both Net4.7.1 and NetCoreApp3.1 .... and I use to get twice performance on the latter.\r\n\r\nFinally, regarding passing arguments by ref instead of by value: I did read some threads a while ago that it was being considered to use the \"in\" modifier in system.numerics, which would let passing by ref without changing the APIs, but also, it was suggested that since most system.numerics methods are agressively inlined, whether you call by value or by ref becomes meaningless.\r\n\r\n\r\n","I agree this change is more about interop than performance. But as far as performance goes, on .NET Core\/.NET 5+ perf of `System.Numerics` is better than what we have now in MG due to hardware acceleration.\r\n\r\n> until Microsoft gets their act together regarding UI, I can't switch to confirm this\r\n\r\nYou can use .NET Core 3.1+ or .NET 5 with WPF\/WinForms, if that's what you mean.\r\n\r\n> I'm guessing the difference is due to the fact that I can pass my parameters by reference in the SharpDX types, but clearly not in the System.Numerics.\r\n\r\n`ref` overloads were rejected in the .NET runtime because they did not impact performance (except for `Matrix4x4`):\r\nhttps:\/\/github.com\/dotnet\/corefx\/pull\/25388#issuecomment-348360835\r\n\r\nThe JIT is very good at optimizing this stuff, and it's been improved a lot in .NET Core. Generally I would not recommend anyone ship a game with .NET Framework anymore (it is also a huge pain for Mac\/Linux).","> You can use .NET Core 3.1+ or .NET 5 with WPF\/WinForms, if that's what you mean.\r\n\r\nI'm aware of this, but the designer for WinForms in its current unfinished state is really not useful for me. I have a rather large application that uses WinForms and it's using 3rd party components that don't really work well under .NET Core\/5 win forms. And converting it to WPF is a huge time investment, and the workaround of having a framework project for designing doesn't work for me. \r\n\r\nAlso, in general, WPF has some rather ugly limitations when it comes to interop with Direct3D.\r\n\r\n>  Generally I would not recommend anyone ship a game with .NET Framework anymore (it is also a huge pain for Mac\/Linux).\r\n\r\nWell, I don't really care about Mac\/Linux support. I don't use either OS in my day to day, I'm perfectly happy being Windows only. And as stated, I'm unable to switch to .NET 5\/Core, so what am I to do? Give up until they finish their work on WinForms?\r\n\r\nAnyway, this is off topic.  I just wanted to share my findings with the Monogame devs. And while people are all drooling over .NET Core\/5 (make no mistake, I am too), it's still not a reality for some of us, and our performance _will_ be impacted by switching to System.Numerics.","> @Tape-Worm System.Numerics performance is highly dependant on the target framework AND the compiler you use. System.Numerics are SIMD accelerated only on a number of scenarios, one of those is, as you said, targeting Net Core 3.1 and above.\r\n> \r\n\r\nThat's what I figured.  Hopefully one day I can join the rest of the world in .NET 5 or 6 or whatever land.\r\n\r\n> Also, a lot of methods are agressively inlined, which might produce misleading reasults in a number of scenarios.\r\n> \r\n> For example: let's say you have a NetStandard 2.0 library using System.Numerics.... since NetStandard 2.0 doesn't have native support for System.Numerics, the methods that are agressively inlined within your library will use the regular code fo inlining. If you upgrade your library to NetStandard 2.1 (or NetCore) which _does_ support SIMD, the methods will be inlined using the SIMD code path, which is much faster.\r\n> \r\n\r\nCan't do it. I've tried 3 times now, and the major factor is the UI stuff (the unfinished forms designer just stops me cold).\r\n\r\n> SharpDX types might be fast when you do a benchmark. But on a real project where multiple libraries need to act together, and you need to pass vectors and matrices between them, if the vector and matrix types are specific to each library, you need to convert between types. In other words, what you win in performance, you loose in type conversions.\r\n> \r\n\r\nWouldn't this still be the case if the libraries you're using don't use System.Numerics?\r\n\r\n---\r\n\r\nAs I said in my other reply, I just wanted to post my results when it came to this stuff. There are probably many people using WinForms + Monogame that are in the same boat as I am, and it looks like their performance may possibly be affected by a jump to System.Numerics across the board.","> Wouldn't this still be the case if the libraries you're using don't use System.Numerics?\r\n\r\nYes, at a cost. And it's been the case for a long time with a lot of libraries using their own types. You can still find important libraries that use their own implementations, WPF 3D and MathNet Numerics come to mind, with many more around. This is a consequence of System.Numerics being introduced so late into the Net library family.\r\n\r\nWorst case scenario is using SharpDX vector libraries to base your math code on them, just to see SharpDX to be abandoned, making your code obsolete with them. That's why using BCL types is so important.\r\n\r\nThis doesn't mean that, _now we have BCL types_, and it is expectable that microsoft will optimize them in ways we can't, that should be a convergence of many libraries to adopt and use System.Numerics.\r\n\r\nFor example, ImageSharp, the new Bepuphysics, or my SharpGltf, use system.numerics, so these libraries can already interoperate seamlessly.\r\n\r\n","@Tape-Worm Off topic: in our case we're not tied to WinForms, but we use WPF in some of our software. In our case we do projects for the medical sector, and they require us to keep supporting our software on Windows 7... and if it seems they're outdated, we've found many hospitals and madical centres still use Windows XP... so we can't expect our users using Win7 to upgrade anytime soon.","@Tape-Worm Could you share your benchmark project?","Just to say that, with System.Numerics being a total no go on consoles (even the nuget backcompat), we'll be forced to provide our own non-intrinsics implementation of it, so if they need to, users could simply rebuild MonoGame with the custom implem instead of the official support fairly easily (we could do that with two separate target files and a switch), which would be pretty much like the \"old implementation\".\r\n\r\nWhenever there's a PR for this, I'd be glad to also test this against our games (which are NET5).","@mrhelmut my view on System.Numerics has always been to lay a roadmap with very small steps: being the first step to keep the monogame types, but allow intrinsic conversions. And only when Consoles are ready to go, either because an upgrade of BRUTE allows it, or because we switch to AOT compilation with Net6, only at that point it could be possible to completely replace the types, maybe for MonoGame 4.x\r\n\r\n\r\n","@Jjagg Sorry, I had removed the code in favor of SharpDX.  I restored it to Sys.Numerics tonight though, and did a .NET 5 conversion.  I've attached a zip file with my app (contains .NET 4.7.2 and .NET 5 versions).  Both versions are using System.Numerics.  I'd like to know what your performance is like (and of course the hardware on which you're running).\r\n\r\nFor me, I'm running it on an Intel 10980 CPU with an Nvidia 3090 GPU.\r\n\r\nFor my tests, I pump up the number of balls to 131,072.  In .NET 4.7.2, I'm getting 48-50 FPS (CPU bound), in .NET 5, it's abysmal at ~35 FPS. Seriously bad, and I was totally expecting a boost when going to 5 due to SIMD and whatnot (maybe I'm not using it correctly?)\r\n\r\nYou'll require a GPU that supports Direct3D 11.2 at minimum.\r\n\r\n[BallsPerTest.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/5978231\/BallsPerTest.zip)\r\n\r\nUpdated to include SharpDX math versions as well.","@Tape-Worm There is something weird going on. \r\nOn my i7-5820k and GTX 970 i get 30-35 fps on .NET 5.0 and 27-29 fps on .NET 4.7.2 when having exactly 150k balls.\r\nYes the difference is not big, but I would expect getting way worse results than you, since you have a lot more horsepower than I do.\r\n\r\nOn both tests my CPU usage stays very low, around 13%, highest core at max 50%. GPU is at around 70% on net472, and 80% on net5.","@Tape-Worm I did download your test but did not run it, but I understand your test includes graphics rendering. I'm not sure what you're testing, but the difference in framerate between net472 and net5 might be by a lot of reasons, not only because using one math library or another.\r\n\r\nA proper performance\/benchmark test must use only the library to be tested alone.","A proper test would be to benchmark a full game with and without intrinsics, both on the same runtime. If we're comparing older runtimes with the latest ones, we can't really assess if anything is related to intrinsics being used or the inherent optimizations\/differences of runtimes. We also have to make sure that both sides run on the 64bit runtime.\r\n\r\nI'm not quite into synthetic benchmarks or apps built on purpose to stress test a precise functionality because they don't consider the average cases and are not optimized in the same way by the JIT compiler (which isn't quite magic in that regard).\r\n\r\n@perpetualKid Is there any chance that you could rebase your branch on the latest ```develop```? I would be keen to give it a test spin on our projects.","@roeyskoe What the???  Really?  Oh man, something's definitely not right on my end then.  Time to crack open the profiler I guess.","The purpose was to see how the numerics stack up against each other, I was just so surprised by the poor performance in NET 5 I included it, but I also should have included the original SharpDX-math versions as well.  I apologize for any confusion this may have created.\r\n\r\nI've updated the test application on my previous post to include the apps using the SharpDX math versions.\r\n\r\nMy results for these were quite surprising:\r\n.NET 4.7.2, SharpDX Math -> 56-58 FPS\r\n.NET 4.7.2 System Numerics -> 49-51 FPS\r\n.NET 5 SharpDX Math -> 50-52 FPS\r\n.NET 5 System Numerics -> 38-40 FPS\r\n\r\nThe only code that's been changed between the versions is the math functionality, that's it. All other code is identical.\r\n\r\nOne thing that occurred to me is that I'm using lots of Vector2\/Vector3 values, and it could be that if I were using Vector4 values primarily, I might see an improvement (I've read that Vector4 sees gains from SIMD, and it makes sense to me that it would). With that said, doing that doesn't fit with my API surface (I'm in 2D, why do I need Z and W?).\r\n\r\nI'm aware this is not the same as comparing with BenchmarkDotNet or the like, but I wanted to see how these math APIs would compare in an environment where they were being used for more real world-like things (e.g. rendering lots of objects to the screen), because, after all, this is what it's going to be used for in my case.  And the same would apply to those using Monogame as well.","Please make sure that you are running it in a way that supports SIMD, try to test whether `Vector.IsHardwareAccelerated` is true: https:\/\/docs.microsoft.com\/en-us\/dotnet\/api\/system.numerics.vector.ishardwareaccelerated?view=net-5.0#System_Numerics_Vector_IsHardwareAccelerated\r\n\r\nVector2 should also benefit from SIMD, at least according to this: https:\/\/docs.microsoft.com\/en-us\/dotnet\/standard\/simd","@initram I verified that IsHardwareAccelerated is true.\r\n\r\nI also looked at the disassembly for one of my vector2 calls and I got this:\r\n![image](https:\/\/user-images.githubusercontent.com\/9710137\/107891666-55b9cd80-6edd-11eb-8df4-564d62cde931.png)\r\nAnd I see a bunch of AVX calls, so I'm guessing that means it's working as it should.\r\n\r\nAnyway, I fear I've turned this into my own personal \"why doesn't System.Numerics work for me\" thread. Sorry about that.","Is there any update for this? I'm all for a switch to the System.Numerics namespace.","@Zintom I feel like it's not gonna happen anytime soon; The best I've been able to do is to introduce implicit conversions between system.numerics and monogame types (MonoGame 3.8.1-dev), so you can already call monogame methods as if the types already are system.Numerics.\r\n\r\nIt's not optimal, but at least it's one step forward in the right direction. If enough people uses monogame in this way, there will be enough traction to switch to system.numerics, probably at monogame 4 or later.","> enough traction to switch to system.numerics, probably at monogame 4 or later.\r\n\r\nCouldn't we just do the following: Make the whole framework use System.Numerics and provide implicit operators(both ways) on the Framework.Vector2 type (like you have), that way any old code would still work and any calls to the framework would implicitly convert from the passed Framework.Vector2 into the System.Numerics equivalent, granted this might slightly slow down the performance of user code that didn't switch to the new System.Numerics namespace as every method call that accepted a Vector2 would be creating a new struct on every invocation.\r\n\r\nOn another note, why the heck did it take the .NET team 18 years to bake in support for Vector types smh \ud83d\ude43\ud83e\udd2a. Instead they're like ouu lets implement Top Level Statements in C# 9 \ud83d\ude04","> use System.Numerics and provide implicit operators(both ways)\r\n\r\nIn my experience, it's not wise to implement two-way implicit converters because under a number of scenarios, it can mislead the compiler and you end up with compiler errors due to unresolvable ambiguities.\r\n\r\nI agree that System.Numerics.Vectors were introduced way too late into .Net, but we have to live with that.\r\n\r\nAnyway, simply adding the System.Numeric.Vectors nuget package dependency has caused a number of problems with the MonoGame console backends, so for now, the implicit conversions is the best we can ask for now.\r\n\r\nI don't think there'll be any further development until the console issues are resolved and the staff feels comfortable moving forward.\r\n\r\nAt which point, the next step would be to replace the types in all MonoGame APIs, and reversing the implicit converters in the framework, so old code using the old framework vector types would be implicitly converted to system numerics on the new APIs... But the leads have stated that such breaking change would not happen before MonoGame 4.x.x.","We could switch to ```System.Numerics.Vectors``` if our local implementation for consoles (https:\/\/github.com\/MonoGame\/MonoGame\/tree\/develop\/MonoGame.Framework\/Utilities\/System.Numerics.Vectors) is expanded to be feature complete (right now it's just a dummy implementation).\r\nWe could also provide a simple define in the csproj to enable\/disable SIMD support with this implementation (SIMD is not always desirable, if code is not specifically designed for vectorization there's a very high chance that the SIMD instructions are bottlenecked and have a negative impact on performances, they're not magic and I don't think we should expect benefits from them for 90% of devs). My suggestion would be to have SIMD disabled by default using the local implementation, and allowing whoever _needs_ SIMD to switch to intrinsics.\r\n\r\nAnyway, these changes are breaking changes, which is something we should expect by MonoGame 5.x (MonoGame 4.x is expected to be the LTS \"XNA 4 compatible\" branch, with MG 5 departing from it and breaking some stuff).","When .net runtime have types that cause monogame to have duplicates, the .net types should be used.\n\n I'd like to see Monogame move to an in-step versioning with the runtime and depend directly on it. It would break people, but some regular breakage is good, as it's unsustainable to expect no breakages and get regular updates at the same time","> It would break people, but some regular breakage is good, as it's unsustainable to expect no breakages and get regular updates at the same time\r\n\r\nI totally agree with this sentiment. I think the main devs are waiting till 5.0 to do any large changes. Moving from the Monogame numeric types to System.Numerics should be a 5.0 feature, along with moving out of the Microsoft.XNA namespace. Yes System.Numerics might not perform as well on .NET Framework or may need a nuget package to work, but in all honesty .NET Core (or new .NET or whatever you want to call it) is the future, I don't know anyone starting projects for .NET Framework.","@frankhaugen Monogame vector and matrix types predates those of System.Numerics.Vectors, in fact, System.Numerics.Vectors types were lifted from XNA by microsoft in the first place.\r\n\r\nBut now that .Net has in-build types, we all agreed monogame show move towards a replacement.\r\n\r\nA while ago I submitted a PR that allows using System.Numerics.Vectors in monogame using implicit conversions, which is not ideal, but it provides some level of interoperability without breaking compatibility. This PR was merged, but it hasn't reached the nuget packages yet.\r\n\r\nIn a far, far, future, the idea is to reverse the dependency, so monogame would use System.Numerics.Vectors, but also without breaking compatibility for most cases.\r\n\r\n","Might consider waiting on this until this way is legal , might be relevant: \r\n\r\n https:\/\/pvs-studio.com\/en\/blog\/posts\/csharp\/0878\/\r\n\r\nhttps:\/\/docs.microsoft.com\/en-us\/dotnet\/core\/compatibility\/core-libraries\/6.0\/static-abstract-interface-methods\r\n  btw  in net 6 passing  input by ref isnt worth the mess, it's already optimized.       for most engines that have put in alot of SIMD work that ive looked at, the bottlenecks  require custom array processing using much larger vectors,  than 2 or 3 d vectors or 4x4 matrices.. the processing done in monogame itself,   is so minimal i dont think we will to see any substantial, as in order of magnitude gains, but be nice not to have to copy types..","@damian-666 many things in monogame are optimized for the \"beast\" compiler so monogame can be used in consoles. I don't know the current status of this compiler since it's only offered to private developers working on consoles. But last time I was aware of it, it was on par with what Net Framwork 4.5 was able to do.\r\n\r\nThat's the main reasons because system.numerics.vectors was not adopted sooner, and it is unlikely it will ever be. Same thing goes for other newer net sugar, like `Span<T>`","I get it.. I'm just so glad now I can use NetStandard to\ncompile.my.core.stuff but then when I use a  thin net6 console  client as\nan exe, then  my framerste flies and I regret some of the optimization i\ndid early on that mattered. then bit now just a bunch of junk code..\n I appreciate.rhe fact they don't use the latest stuff or accept many\nchanges.  I don't mind  to have copy stuff or make conversions and frankly\nI think I might wait and see on  SIMD because I feel it could be\ngeneralized and when I see intrinsics it looks like a horror show to code\none even resorted to managed cplus plus for a fluid simulation.array.\n..in image sharp and bepu I think they got a good grip on it but it's mind\nboggling stuff  with partitioning to vector 128  and cache awareness,  I\nwould hope that the runtime could eventually do this  for us like task\nparallel did.. anyways long live monogame!\n\n\nOn Fri, Jan 28, 2022, 3:24 AM Vicente Penades ***@***.***>\nwrote:\n\n> @damian-666 <https:\/\/github.com\/damian-666> thing is, many things in\n> monogame are optimized for the \"beast\" compiler so monogame can be used in\n> consoles. I don't know the current status of this compiler since it's only\n> offered to private developers working on consoles. But last time I was\n> aware of it, it was on par with what Net Framwork 4.5 was able to do.\n>\n> That's the main reasons because system.numerics.vectors was not adopted\n> sooner, and it is unlikely it will ever be. Same thing goes for other newer\n> net sugar, like Span\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7204#issuecomment-1024032710>,\n> or unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AD74XGMOZ3EB3HYXQ3RQIK3UYJOFNANCNFSM4N5TKEGA>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https:\/\/apps.apple.com\/app\/apple-store\/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https:\/\/play.google.com\/store\/apps\/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n>\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n","Yeah, MonoGame is very much bound to the console compiler which still needs apps to target .NET 4.5 (and not just targeting it, it has to use the 4.5 BCL and compiler ; targeting net45 with net6 won't do). This isn't something that is expected to change in the foreseeable future. Since console developers are the main audience of MonoGame and the maintainers have no bandwidth for more, there is little to no room for having MonoGame to be a shiny innovative library. It is more important for MonoGame to provide an LTS support than being up-to-date with the latest .NET innovations.\r\n\r\nIf you need a .NET graphics library for heavy processing that aren't games, MonoGame is likely not that library.","i just did some benchmark tests with a version of Farseer\nhttps:\/\/github.com\/ebatianoSoftware\/Farseer-Physics-Standard, starting\nthings like decomposition that can take long, im not seeing any improvement\n, in fact its a tiny bit slower in numberics,  but the new c# 10 feature \"\nglobal using\" System.Numerics,  for just the vector types instead of the\nanalog xna types... and  global using Farseer.Xna.Framework for the other\nexe , is making this comparison test all possible without repeat code.\nbut ill do more tests and if i find anything that gives a decent boost ill\nreport back otherwise i dont see any performance boost at all so far.\n Anyways thought id mention the new global using is extremely helpful\notherwise id have no way to share the test code between the rigs..   Im\nnot suggesting using new c# features  in Monogame, just its a useful way in\nur own EXE code that i just discovered.\n\nOn Wed, Feb 16, 2022 at 3:48 AM Thomas Altenburger ***@***.***>\nwrote:\n\n> Yeah, MonoGame is very much bound to the console compiler which still\n> needs apps to target .NET 4.5 (and not just targeting it, it has to use the\n> 4.5 BCL and compiler ; targeting net45 with net6 won't do). This isn't\n> something that is expected to change in the foreseeable future. Since\n> console developers are the main audience of MonoGame and the maintainers\n> have no bandwidth for more, there is little to no room for having MonoGame\n> to be a shiny innovative library. It is more important for MonoGame to\n> provide an LTS support than being up-to-date with the latest .NET\n> innovations.\n>\n> If you need a .NET graphics library for heavy processing that aren't\n> games, MonoGame is likely not that library.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7204#issuecomment-1041303455>,\n> or unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AD74XGNGBKZ7ZXYF54CP4CDU3NXFDANCNFSM4N5TKEGA>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https:\/\/apps.apple.com\/app\/apple-store\/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https:\/\/play.google.com\/store\/apps\/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n>\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n","@damian-666 I think everybody takes wrong the issue of system numerics.\r\n\r\nThe whole point of switching to system numerics was not about performance improvements... or at least not the main reason. The main reason has always been to have a common type that can interop with other libraries that don't depend on monogame.\r\n\r\nIt really doesn't matter if monogame's vectors and system vectors perform the same; the real performance loss happens when you need to continuosly convert between the two. My code is chocked full with .ToXNA() and .ToNumerics() extensions. This is not only a pain during development, it's what's causing the biggest performance loss regarding using math types.\r\n\r\n@mrhelmut This is not the place of discussing the state of Monogame, but I'll just say that by focusing on consoles and disregarding the rest of non-console developers, monogame is loosing atractiveness, and this will end affecting the whole ecosystem, consoles too.","> @mrhelmut This is not the place of discussing the state of Monogame, but I'll just say that by focusing on consoles and disregarding the rest of non-console developers, monogame is loosing atractiveness, and this will end affecting the whole ecosystem, consoles too.\r\n\r\n@vpenades  We're completely aware of this, and it is not a situation that we enjoy. I just wanted to be transparent on the state of the project. The admins have a lot of cool plans to move MonoGame forward (e.g. switching to Vulkan\/DX12\/Metal) and some great PR are pending (e.g. compute shader and shader conductor), but our bandwidth is limited so our attention is where support is actively requested. We lack the manpower to move innovations forward.\r\n\r\nIdeally we would like to welcome new people and encourage contributing, and we've been working on a call to participate and an explanation of the possible future of the project, as well as discussing how we could leverage funds to help, but these discussions are moving slowly. I'm trying to take the lead but the time I can allocate is irregular. Hopefully we'll get there with a proper call to participate.\r\n\r\nI am faithful for the future of MonoGame, it's just that we should expect some traction before it's jumpstarted again.","> This is not the place of discussing the state of Monogame, but I'll just say that by focusing on consoles and disregarding the rest of non-console developers, monogame is loosing atractiveness, and this will end affecting the whole ecosystem, consoles too.\r\n\r\nI don't usually comment here, but I felt compelled to, after reading this. There's some issues with this statement that I'd like to address\/unpack.\r\n1. A lot of developers are attracted to Monogame because of console support, plus being open source. Myself included. I see new developers joining the discord and asking about consoles every month. \r\n2. Do you have any data or metrics to back up your opinion that Monogame is loosing attractiveness due to this issue? \r\n3. The majority of games made in MG don't make use of numerics, nor do they have performance loss issues related to continuously converting between the two. \r\n4. \"and this will end affecting the whole ecosystem, consoles too.\" - You're using fear to motivate change. I don't think you can predict the future or know what's going to happen to the ecosystem. I don't think you even have data to back up your opinion.\r\n5. If you want to see specific changes, why don't you contribute those changes? Or work with contributors to get those changes into MG? You're essentially complaining that volunteers aren't working fast or hard enough on the changes you want. \r\n\r\nThe future of Monogame is bright, and I trust in the volunteers and contributors to guide the ship as they have done in the past. I'm looking forward to their future plans, and keeping an eye on FNA too. Hope this post doesn't upset anyone.","@mrhelmut I think the reason I've dropped the issue here is becase there's no place left to have these kinds of discussions, I've tried to ask a while ago at discord with no answer.\r\n\r\n@MrGrak: I have reasoned answers for all your questions, but they're long, as I said I don't think this is the right place, and I don't know which is the appropiate channel.","have some profound results here with net 6 on win64 for numerics.Vector2 on adding and normalizing.. w numerics Vector2, im seeing that it is apparently using SIMD and is 2.5x faster on a simple test vs xna vector2 from my old farseer copy.   Another successful test, that is 30-40% faster, is its  use in concave polygon decomposition that  must do before filling w MG.    i'm   not pushing for any breaking changes to MG because i don't believe its will make such a profound effect at all for its methods,  or any at all,  but for complex physic or decomposition its clients should definitely use numerics and then copy the structs because, i got  the blazing 2.5x boost on vector2 normalize and add, even w copy.   I might bring it up in the 2D physics engines issues  its just there is no canonical often maintained branch now.  ..\r\n\r\n  And I also found that  the cost of copy the struct of vector2,  is comparatively negligible.  . I did a copy to vec struct in addition to the add and normalize only on the numerics version test and its still 2.5x faster.    The issue i found with the complex code like decomposition and physics (outside of MG but commonly used by clients) is that there they predate numerics and use similar matrices and other custom types and not operating standard matrix and vector arrays so we dont see the 2x+ boosts we could expect.    first quick rough test i was just very curious.    But I def suggest using these types in your own complex code.   \r\n  heres my  rought tests:  \r\nhttps:\/\/github.com\/damian-666\/PhysicsBenchmarks\r\n\r\ni don't do statistics because if  its not 50% or 2x faster i don't bother with optimizations im looking for orders of magnitude in unexploited potiential like SIMD.\r\n\r\ni dont know the source fork of https:\/\/github.com\/ebatianoSoftware\/Farseer-Physics-Standard     Digging deeper, mabye these engines froks could be sped up, i tested TOI it didnt help that,  but i didnt test other aspects for now im waiting for net 6 on xamarin , got enough performance on pc.\r\n\r\n\r\n\r\n\r\n","Hi\r\n\r\nGiven that the most recent version of MonoGame only targets .net 6 and the performance gains of using the Numerics types is well established nowadays, is there any chance of movement on this issue?  ","@RoyAwesome The latest version of MonoGame has _implicit conversions_ between Numerics and MonoGame types (Vector2,Vector3, Matrix, Quaternion, etc), so you can already use Numerics in your code transparently.\r\n\r\nThe MonoGame APIs still use the old math types, but given that backwards compatibility is a top priority, I don't think big changes will come anytime soon.","> the performance gains of using the Numerics types is well established nowadays\r\n\r\nSynthetic benchmarks are irrelevant for games. We're still waiting on real world tests of a full game with and without Numerics. \r\n\r\nI've already explained it above, TL;DR: intrinsics are not magic, enabling them doesn't always yield positive results. The examples that we have of real full games so far show worse performances with intrinsics. There can be many reasons for that to happen, but the most common is that intrinsics is not what you think it is. It is not something that just swap an instruction for another faster one. It is something that batches multiple operations, and if you don't \"pack\" your vector operations in your code, you can pretty easily bottleneck the CPU pipeline because it's not batched properly (it will basically spin doing nothing).\r\n\r\nTaking advantage of intrinsics requires that your code [is designed for it](https:\/\/devblogs.microsoft.com\/dotnet\/hardware-intrinsics-in-net-core\/). If you place Numerics operations at random (like in a game code base or monogame itself), all you're going to do is feed the CPU with incomplete vectors, which means that the CPU will be spending more time than it should.","@mrhelmut the purpose of the implicit conversions is not (and never has been) to improve performance, but to make it easy to interop with code that does use Numerics (BepuPhysics, ImageSharp, etc), which is becoming more and more common.\r\n\r\nAlso, implicit conversions serve a purpose in the long run: if the long term plan is to eventually move from XNA math types to Numerics, those that program their game logic using Numerics will take now some performance loss due to the implicit conversion, but eventually, when (if) monogame ends supporting Numerics all the way down to the core, those who already use Numerics would see a huge performance improvement.\r\n\r\nI am aware that game lifecycle is probably 1~2 years, so most games in development would do better by sticking to XNA types. But long term projects like ours, and maybe third party libraries that might want to stay around for years might consider using Numerics to avoid the high cost of changing types and breaking the API at some point in the future.\r\n\r\nRegarding _intrinsics_ , it's true that regular operations might not show any performance improvement, but there's more to that: for example, XNA's math use to pass arguments by ref, whereas Numerics pass arguments by value, this might look like an issue, but in fact, Net6 has lots of optimization paths for Numerics that can really improve the performance (or so I've been told)... what's sure is that Microsoft is going to keep pushing performance on Numerics.","I was noting this mostly in regard to \"should we replace XNA types within MonoGame by System.Numerics?\"\r\n\r\nRegarding implicit conversions, this I agree\/understand and users should be able to use whichever smoothly.","This is the best way IMO..I look at Vector2 in the root of the source  of\nmonogame  and its  look s perfect for me now and the implicit conversion\nvery welcome. I see the the class its also now persistent  with\nDatacontract, which is why i have my own Vector2 class based on the old\nFarseer one ( I  use data contract serializer) to save levels and\ncollections of vector2 ..so  i will try and change to this class probably.\n  also theres other pitfalls,  evidence 32 bit float simd is faster than on\n64 bit machine ( obviously for floats you are wasting loading up those\nlanes with unused data ) in net core discussion , its unsolved) .. so yea\nits not always a win though a simple test of normalization + add random\nvector.. is 2.5x faster on my machine which is .5 x faster than i dreamed\npossible for a 2d vector.   but its your own code that your physics and\nother math has the bottlenecks and then let the conversion do its thing\nlater... monogame isn't doing heavy complex maths on CPU , as far as i can\nguess..  im my experience the copy costs nothing compared with complex\nalgorithms your game might be doing.\n\nOn Thu, Sep 8, 2022 at 8:58 AM Thomas Altenburger ***@***.***>\nwrote:\n\n> I was noting this mostly in regard to \"should we replace XNA types within\n> MonoGame by System.Numerics?\"\n>\n> Regarding implicit conversions, this I agree\/understand and users should\n> be able to use whichever smoothly.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7204#issuecomment-1240836257>,\n> or unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AD74XGKR4TK6MJPMIEEMLHTV5H5KLANCNFSM4N5TKEGA>\n> .\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***>\n>\n"],"labels":["Performance"]},{"title":"iOS playing songs are silent","body":"This issue is present in current Develop branch.\r\nPlaying a Song using `MediaPlayer.Play()` results in silence.\r\nNo errors are thrown, the `MediaPlayer.State` property shows `Playing`.\r\nThe volume is set to 1f.\r\nSound effects all play fine.\r\nThe same code runs fine on Android.\r\n\r\n\r\n<!-- System stats -->\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame current Develop branch\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- iOS\r\n","comments":["Hi, Did you find a resolution to this?\r\nI have the same issue on latest MG 3.8.0.","No, I did not ever get it to work.\n\n________________________________\nFrom: Peru S ***@***.***>\nSent: 21 July 2021 23:41\nTo: MonoGame\/MonoGame ***@***.***>\nCc: Kevin Small ***@***.***>; Author ***@***.***>\nSubject: Re: [MonoGame\/MonoGame] iOS playing songs are silent (#7197)\n\n\nHi, Did you find a resolution to this?\nI have the same issue on latest MG 3.8.0.\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub<https:\/\/emea01.safelinks.protection.outlook.com\/?url=https%3A%2F%2Fgithub.com%2FMonoGame%2FMonoGame%2Fissues%2F7197%23issuecomment-884544036&data=04%7C01%7C%7Cf9370929357d42b7556608d94c98a117%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C637625040679733417%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=fEX06BXg3qTxZLc17tFNW6jij4FIRJ2m1lJC4pncJlk%3D&reserved=0>, or unsubscribe<https:\/\/emea01.safelinks.protection.outlook.com\/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FABKJPO5IICSOCAB2LHR4FHTTY5EIFANCNFSM4N32DIEQ&data=04%7C01%7C%7Cf9370929357d42b7556608d94c98a117%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C637625040679743410%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=VUCh4fCxZakQk4naYm4azleUuygmMH12xPy7E9FvKbg%3D&reserved=0>.\n","FYI using Xamarin media manager helps resolve this problem.\r\nI had poor luck getting a fix in to the monogame repo, not sure if the devs are reviewing code any longer... A bit worrying. So I am wary of a fix in monogame or relying on it too much.","We do review and accept mobile PRs, which are very welcome. We don't look much into iOS\/Android lately because it is mostly stable and we're waiting for NET6 to do a refresh. Further works are planned, most notably a switch to Metal at some point (but that's a longer shot).","Thanks @mrhelmut for the details. I think Android\/iOS have many gaps (although most of it 'just works' out of the box, so kudos!).\r\n\r\nI am happy to help contribute to Metal or other graphics efforts - I have some experience in that area.\r\nIf there are docs\/threads that I (or others) can follow along for some of this major work, please let me know. \r\n\r\nMobile is the future, so I really hope mobile gets the same focus\/attention as consoles do. And MG + Mobile works very well (sans Metal etc).\r\n\r\nthank you!","Would you mind checking if linking AudioToolkit does anything with this issue?\r\n\r\nTo be added to your csproj:\r\n```\r\n<PropertyGroup>\r\n<MtouchExtraArgs>-framework AudioToolbox -framework CoreAudio<\/MtouchExtraArgs>\r\n<\/PropertyGroup>\r\n```","I will try this soon, but am a bit swamped at the minute. \r\nThanks! ","Sorry for the late update, but I tried different things including your proposed fix. Doesn't work :(\r\nI will have to dig into the platform code later on may be, but for now alternate solutions exist.","I recommend not using the `Song` class since it was written in XNA for console related compatibilities and memory limitations. A SoundEffect instance works just fine, why avoid it?","@NicusorN5 `SoundEffect` works for short clips and IMO, it is not intended for streams. In particular, playing songs on mobile-devices have certain OS requirements (including UI controls) that sound effects do not offer.\r\n","```Song``` not working anymore is an issue nonetheless. I don't have time to look into it because we (flying oak) switched to FMOD internally, so I don't have projects to test Song.\r\n\r\nIf you could setup a minimal exemple project, I could probably test it out.","I think I have the same problem on my iPad Air: https:\/\/community.monogame.net\/t\/xnamediaplayer-doesnt-play-my-song-again-on-ios-after-it-had-finished\/17172\r\nI want to play the next song after the current song had finished. The next song can be the same song again or a different song. On Android everything works fine but on iOS I don\u2019t hear anything when the second song starts. I have tested it many times on my iPad Air and I don\u2019t get an error message.\r\nI use Monogame.Framework.iOS(3.8.0.1641) nugget package.","Sorry, I won't have the time to look into this specific issue, we internally switched all our projects to FMOD, thus not using MonoGame's audio layer anymore.\r\n\r\nContributions would be more than welcome to investigate this issue.","> FYI using Xamarin media manager helps resolve this problem.\r\n> I had poor luck getting a fix in to the monogame repo, not sure if the devs are reviewing code any longer... A bit worrying. So I am wary of a fix in monogame or relying on it too much.\r\n\r\nHave you tried to upload your Android application to Google Play Console?\r\nI have the following problem:\r\nI have no sound when I open my application right after installing it on my Android phone. But when I quit my application and reopen it then the sound works normally. I only have this issue after downloading and installing it from Google Play Console. I never had this issue in Visual Studio for Mac Debug mode on my Android phone.\r\n[https:\/\/github.com\/Baseflow\/XamarinMediaManager\/issues\/855](https:\/\/github.com\/Baseflow\/XamarinMediaManager\/issues\/855)\r\nDo you have the same problem on Android?","I tested this issue on device and didn't find any problem. ```Song``` and ```MediaPlayer``` work just fine.\r\n\r\nXamarin.iOS 15.2.0.17 for VS 2019.\r\n\r\n@Mindfulplays Do you happen to be able to verify that? Is the issue on the simulator, on device, or both?","Hmm, interesting. I tried on physical devices (iPhone\/iPad). I am not sure if I am missing some core piece of code.. perhaps not setting volume or incorrect thread? I do queue up everything on the UI thread. (Trouble is, there aren't any exceptions\/errors\/warnings)\r\nDo you have a sample piece of code? Thank you in advance.","I basically just do this in ```LoadContent()```:\r\n\r\n```csharp\r\nSong song = Content.Load<Song>(\"test_song\");\r\nMediaPlayer.Play(song);\r\n```","Interesting, I will try this at an opportune time. (I have since moved this to use `XamarinMediaManager` for now...)","This is happening in my game using the latest MonoGame when I debug it on my iPhone. I might try extracting the code into a simple project to see if it still happens.\r\n\r\nI'm using the latest preview of Visual Studio for Mac and debugging onto an iPhone SE running iOS 15.4.1.","Really weird. I won't be able to work on this issue myself, it just works on all of our devices.\r\n\r\nI'm using the latest MG, but I'm using VS2019 which is blocked at Xamarin.iOS 15.2.0.17.\r\n\r\nMaybe it's a Xamarin.iOS 15.3+ thing.\r\n\r\nThe implementation of ```Song``` (which is [here](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Platform\/Media\/Song.iOS.cs)) and the package Mindfulplays has been using both use the ```AVFoundation``` API, so I don't think it's a problem with the implementation itself, but more likely a configuration problem.\r\n\r\nDo you mind trying to go to your project settings, in \"iOS Build\", and add this to \"Additional mtouch arguments\":\r\n```-cxx -gcc_flags \"-L${ProjectDir} -framework AudioToolbox -framework CoreAudio\"```\r\n\r\n(Not to be mistaken with \"iOS Run Options\/Extra mlaunch arguments\")\r\n\r\n","Thanks for the investigation. \r\nSorry though this might take a bit of time to test out, but will definitely give it a go.","Have we been able to test this more?\r\n\r\nWhich minimum iOS version are you targeting? I wonder if this has any impact (targeting iOS 11 here and it works).\r\n\r\nThis is likely the last roadblock toward the 3.8.1 release, but no pressure, if we are unable to figure it out, we'll move ahead and plan this for a later release (with a 3.8.2 hotfix if need be).","The music started working when I did a publish of the game. I've not had a chance to test, but I was wondering if it only affected debug mode. I want to try a few things to see if I can reliably reproduce, rather than just getting lucky.","Happens to me too. The `gcc_flags` solution didn't help. Neither [Xamarin Media Manager](https:\/\/github.com\/Baseflow\/XamarinMediaManager) nor [Xamarin Plugins](https:\/\/github.com\/adrianstevens\/Xamarin-Plugins) seem to support `net6.0-ios` (but maybe I'm doing something wrong - if anyone knows how to get it working please correct me).\r\n\r\nThe only thing that worked was importing music as a `SoundEffect` rather than a `Song`. This, however, increased the app size considerably, so I'm waiting for a proper fix.","We recently published a game on iOS using MonoGame. It uses FMOD for sounds, but I used it to test a '''Song''' and it works. But when I remove FMOD from the project and test the '''Song''' alone, it doesn't work. Which means that FMOD is doing an initialization and\/or library linking that MonoGame is missing.\r\n\r\nSince it used to work, I believe that either Apple or Xamarin changed how sound is initialized at some point.","This may be late, but I found the potential issue:\r\niOS requires `AVAudioSession.SharedInstance()` methods to be invoked in a particular order.\r\n\r\n```\r\n  private readonly AVQueuePlayer player_;\r\n  private AVAsset asset_;\r\n  private AVPlayerItem item_;\r\n\r\n  ... void InitSongPlayer_() {\r\n   \/\/ Run this from your app UI thread (not MonoGame render thread).\r\n    var audioSession = AVAudioSession.SharedInstance();\r\n    try\r\n    {\r\n      audioSession.SetCategory(AVAudioSessionCategory.Playback);\r\n      if (!audioSession.SetActive(true, out var error))\r\n      {\r\n        TLog.E($\"Error creating audio session {error}\");\r\n        return;\r\n      }\r\n\r\n      TLog.I(\"Started audio session.\");\r\n\r\n      player_ = new();\r\n    }\r\n    catch (Exception e)\r\n    {\r\n      TLog.E($\"Unable to create audio session {e}\");\r\n    }\r\n```\r\n\r\n\r\nAnd to play:\r\n\r\n```\r\n    UIThreadWork_(() => {\r\n      asset_ = AVAsset.FromUrl(NSUrl.FromFilename(file.FullName));\r\n      item_ = AVPlayerItem.FromAsset(asset_);\r\n      player_.RemoveAllItems();\r\n      player_.InsertItem(item_, null);\r\n      player_.Play();\r\n  });\r\n```\r\n\r\nI verified this works. I haven't had time to fix `Song.iOS.cs` at the moment (also, it requires refactoring the code to run in UI thread among other things; use AVPlayerItem; etc).\r\n\r\nEDIT: Volume is normalized in [0, 1] not [0, 100] as I had previously mentioned. I regret the error.\r\n\r\nIn case anyone wants to directly use this, here is a mostly self-contained piece of code:\r\n\r\n\r\n```\r\nusing AVFoundation;\r\nusing Foundation;\r\nusing System;\r\nusing System.IO;\r\n\r\npublic partial class TIosSongPlayer\r\n{\r\n  private readonly AVQueuePlayer player_;\r\n  private AVAsset asset_;\r\n  private AVPlayerItem item_;\r\n\r\n  private bool maybePlaying_ = false;\r\n  private bool playing_ = false;\r\n\r\n  public TIosSongPlayer(TGameContext context)\r\n  {\r\n    this.context_ = context;\r\n    EnsureUiThread(); \/\/ Make sure you are running from the main UIApplication thread, not MonoGame UI thread which is separate.\r\n    var audioSession = AVAudioSession.SharedInstance();\r\n    try\r\n    {\r\n      audioSession.SetCategory(AVAudioSessionCategory.Playback);\r\n      if (!audioSession.SetActive(true, out var error))\r\n      {\r\n        TLog.E($\"Error creating audio session {error}\");\r\n        return;\r\n      }\r\n\r\n      TLog.I(\"Started audio session.\");\r\n\r\n      player_ = new();\r\n    }\r\n    catch (Exception e)\r\n    {\r\n      TLog.E($\"Unable to create audio session {e}\");\r\n    }\r\n  }\r\n\r\n  public void Play(AssetInfo assetInfo)\r\n  {\r\n    if (maybePlaying_ || player_ == null) return;\r\n    maybePlaying_ = true;\r\n    UIThreadWork_(() =>\r\n    {\r\n      var file = new FileInfo(assetInfo.fullFileName);\r\n      asset_ = AVAsset.FromUrl(NSUrl.FromFilename(file.FullName));\r\n      item_ = AVPlayerItem.FromAsset(asset_);\r\n      player_.RemoveAllItems();\r\n      player_.InsertItem(item_, null);\r\n      player_.Play();\r\n      CacheCheckPlayingState_();\r\n    });\r\n  }\r\n\r\n  private bool CacheCheckPlayingState_()\r\n  {\r\n    if (player_ == null)\r\n    {\r\n      maybePlaying_ = false;\r\n      playing_ = false;\r\n      return false;\r\n    }\r\n\r\n    UIThreadWork_(() =>\r\n    {\r\n      playing_ = player_.CurrentItem != null;\r\n      maybePlaying_ = false;\r\n    });\r\n    return maybePlaying_ || playing_;\r\n  }\r\n\r\n  public void Stop()\r\n  {\r\n    if (player_ == null) return;\r\n    playing_ = false;\r\n    maybePlaying_ = false;\r\n    UIThreadWork_(() =>\r\n    {\r\n      player_.ReplaceCurrentItemWithPlayerItem(null);\r\n      player_.RemoveAllItems();\r\n      CacheCheckPlayingState_();\r\n    });\r\n  }\r\n\r\n  public void Pause()\r\n  {\r\n    if (player_ == null) return;\r\n    UIThreadWork_(() => { player_.Pause(); CacheCheckPlayingState_();});\r\n  }\r\n\r\n  public bool IsPlaying()\r\n  {\r\n    if (player_ == null) return false;\r\n    return CacheCheckPlayingState_();\r\n  }\r\n\r\n  public void SetVolume(double vol)\r\n  {\r\n    if (player_ == null) return;\r\n    context_.graphicsDevice.EnqueueUiWork(() =>\r\n    {\r\n      const double maxVolume = 1.0;\r\n      vol = TUtils.CapToRange(vol, 0, 1);\r\n      var volume = (float)(maxVolume * vol);\r\n      player_.Volume = volume;\r\n    });\r\n  }\r\n\r\n  public void Evict()\r\n  {\r\n    Stop();\r\n  }\r\n\r\n  public void DisposeMediaPlayer()\r\n  {\r\n    AVAudioSession.SharedInstance().SetActive(false);\r\n   \/\/ Also dispose other things based on your app lifecycle: player, asset etc. \r\n  }\r\n}\r\n\r\n```\r\n\r\n\r\n","If anyone can follow up on this and fix iOS Song, that would be welcome as we're heading toward a 3.8.2 release."],"labels":["iOS","Audio"]},{"title":"Class to wrap an ID3D11Texture2D as a RenderTarget2D","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nPer the contributor guide, any new code or proposals should first be discussed here.\r\n\r\nI would like to submit a class that wraps an\r\nID3D11Texture2D as a RenderTarget2D. I used the SwapChainRenderTarget as a baseline for creating this, and currently have something that works.\r\n\r\nThis will become useful for anyone interested in OpenXR, since the OpenXR runtime returns an already created ID3D11Texture2D. This differs from the way OpenVR works, since with OpenVR you create the RenderTarget and pass it the handle, as opposed to the other way around for OpenXR.\r\n\r\nI currently have the class named D3DRenderTarget, but am open to renaming it. It resides in the same directory and namespace as SwapChainRenderTarget.\r\n\r\nNote, this would be for Windows \/ DirectX only.\r\n\r\nI would love to get this into 3.8 so I don't have to run a modified version of the Monogame dll.\r\n\r\nNote, this is new functionality and should not impact any existing behavior..\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- WindowsDX\r\n","comments":["Would be better if we could create a `RenderTarget2D` from an existing native texture.","@Jjagg Can you clarify what you mean?\r\n\r\nAre you saying modify the current RenderTarget2D and overload the constructor to take an ID3D11Texture2D handle, or something else?\r\n\r\nFYI... to clarify, my current D3DRenderTarget extends RenderTarget2D and creates a Resource from the handle which then directly sets the texture in the RenderTarget2D viz.\r\n\r\n```\r\n           SharpDX.Direct3D11.Resource resource = new SharpDX.Direct3D11.Resource(d3dHandle);\r\n           _texture = resource;\r\n\r\n```\r\n\r\n","@Jjagg If you can point me in the right direction, I can try and put something together for this.","Sorry for the delay. I think the best way to expose this is with a factory method. A static method on RenderTarget2D (and maybe Texture2D) \u2018FromDirect3DHandle\u2019 that creates an instance from the existing handle, validating the handle in the method as well.","> A static method on RenderTarget2D (and maybe Texture2D) \u2018FromDirect3DHandle\u2019 \r\n\r\nWhy not a `FromHandle(IntPtr handle)`  or `FromNativeHandle` or some other name that can be supported on multiple backends?\r\n\r\nI could see the same feature being useful on OpenGL or other graphics APIs.","@Jjagg @tomspilman Thanks for the feedback. I'll try to put something together that's more generic so it can be used across platforms. Will ping you guys if I have questions."],"labels":["Feature Request","DirectX","Design"]},{"title":"Run MonoGame within a custom control in Xamarin Forms","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\n<!--\r\nTitle:\r\nRun MonoGame within a custom control in Xamarin Forms\r\n-->\r\n\r\nI want to use MonoGame for my graphics engine, but I'm writing a non-game Xamarin Forms application that will need to have normal application UI around and floating above the graphical view.\r\n\r\nI have my own copy of MonoGame that I modified to support this on both UWP and Android. However, my solution is a bit of a hack. I would really like to see this supported properly in MonoGame directly.\r\n\r\nSince my modifications do not need to support the normal full screen game mode, and only target UWP and Android, they aren't appropriate to do a pull request. So I thought I would start here to see if anyone had interest in doing this properly.\r\n\r\nOverall, the number of changes is rather small, but I don't know how the team would want to properly solve the problem, nor do I have the time to investigate and implement a general solution that includes other platforms and ensures that all other game types continue to work.\r\n\r\n# Xamarin Forms Usage\r\nFor some context, here is how the MonoGame views are used in a Xamarin Forms cross platform application. Very little code is needed to get MonoGame running in a control anywhere within an Xamarin Forms application.\r\n\r\n## Cross Platform Custom View\r\nA custom renderer is needed for each platform so the Xamarin Forms code (`netstandard2.0`) is very simple.\r\n\r\n```csharp\r\npublic class MonoGameView : View\r\n{\r\n}\r\n```\r\n\r\nAnd this custom view can be used anywhere from a full screen background to a small view somewhere in the layout.\r\n\r\n```xml\r\n<local:MonoGameView \/>\r\n```\r\n\r\n## UWP Custom Renderer\r\nIn the platform specific project for UWP, I implement a simple custom `ViewRenderer` that creates the game within the custom view. Code below is simplified.\r\n\r\n```csharp\r\npublic class MonoGameViewRenderer : ViewRenderer<Controls.MonoGameView, SwapChainPanel>\r\n{\r\n    private SwapChainPanel _gamePanel;\r\n    private Game _game;\r\n\r\n    protected override async void OnElementChanged(ElementChangedEventArgs<Controls.MonoGameView> e)\r\n    {\r\n        base.OnElementChanged(e);\r\n\r\n        _gamePanel = new SwapChainPanel();\r\n        SetNativeControl(_gamePanel);\r\n\r\n        _game = MonoGame.Framework.XamlGame<Game>.Create(\"\", Window.Current.CoreWindow, _gamePanel);\r\n    }\r\n\r\n    protected override Size ArrangeOverride(Size finalSize)\r\n    {\r\n        _gamePanel.Arrange(new Rect(0, 0, finalSize.Width, finalSize.Height));\r\n        return base.ArrangeOverride(finalSize);\r\n    }\r\n}\r\n```\r\n\r\n## Android Custom Renderer\r\nAndroid also needs a custom `ViewRenderer`. Again, the code is simplified.\r\n\r\nSome of the changes to MonoGame I'll talk about below are seen here, such as the fact that I need to set the `Game.Activity` value from here since I'm not using an `AndroidGameActivity` for my main activity. Then I also need to manually call `AndroidGameActivity.ExternalActivityResumed(this)`. Again, a bit of a hack just for my needs.\r\n\r\n```csharp\r\npublic class MonoGameViewRenderer : ViewRenderer<Controls.MonoGameView, Android.Views.View>\r\n{\r\n    private Game _game;\r\n    private Android.Views.View _gameView;\r\n\r\n    public MonoGameViewRenderer(Context context) : base(context)\r\n    {\r\n    }\r\n\r\n    protected override void OnElementChanged(ElementChangedEventArgs<Controls.MonoGameView> e)\r\n    {\r\n        base.OnElementChanged(e);\r\n\r\n        var activity = Context as Activity;\r\n        Game.Activity = activity;\r\n\r\n        _game = new Game();\r\n        _gameView = (Android.Views.View)_game.Services.GetService(typeof(Android.Views.View));\r\n        SetNativeControl(_gameView);\r\n        _game.Run();\r\n        AndroidGameActivity.ExternalActivityResumed(this);\r\n    }\r\n\r\n    protected override void OnLayout(bool changed, int l, int t, int r, int b)\r\n    {\r\n        base.OnLayout(changed, l, t, r, b);\r\n\r\n        var msw = MeasureSpec.MakeMeasureSpec(r - l, MeasureSpecMode.Exactly);\r\n        var msh = MeasureSpec.MakeMeasureSpec(b - t, MeasureSpecMode.Exactly);\r\n\r\n        _gameView.Measure(msw, msh);\r\n        _gameView.Layout(0, 0, r - l, b - t);\r\n    }\r\n}\r\n```\r\n\r\n# MonoGame Changes\r\n\r\n## UWP\r\nThere are a few UWP specific changes required. Mostly related to view sizing and input handling.\r\n\r\n### UAPGameWindow.cs\r\nA `FrameworkElement` needs to be used for the `inputElement` so that sizing can be handled.\r\n```csharp\r\npublic void Initialize(CoreWindow coreWindow, FrameworkElement inputElement, TouchQueue touchQueue)\r\n```\r\nThen I can manage size changes with this.\r\n```csharp\r\ninputElement.SizeChanged += InputElement_SizeChanged;\r\n```\r\n\r\n```csharp\r\nprivate void InputElement_SizeChanged(object sender, SizeChangedEventArgs e)\r\n{\r\n    lock (_eventLocker)\r\n    {\r\n        _isSizeChanged = true;\r\n        var pixelWidth = Math.Max(1, (int)Math.Round(e.NewSize.Width * _dinfo.RawPixelsPerViewPixel));\r\n        var pixelHeight = Math.Max(1, (int)Math.Round(e.NewSize.Height * _dinfo.RawPixelsPerViewPixel));\r\n        _newViewBounds = new Rectangle(0, 0, pixelWidth, pixelHeight);\r\n    }\r\n}\r\n```\r\n### InputEvents.cs\r\nI had to comment out this code as it was messing with input with my custom control and any overlayed UI.\r\n```csharp\r\n\/\/if (inputElement is SwapChainPanel || inputElement is SwapChainBackgroundPanel)\r\n\/\/{\r\n\/\/    \/\/ Create a thread to precess input events.\r\n\/\/    var workItemHandler = new WorkItemHandler((action) =>\r\n\/\/    {\r\n\/\/        var inputDevices = CoreInputDeviceTypes.Mouse | CoreInputDeviceTypes.Pen | CoreInputDeviceTypes.Touch;\r\n\r\n\/\/        CoreIndependentInputSource coreIndependentInputSource;\r\n\/\/        if (inputElement is SwapChainBackgroundPanel)\r\n\/\/            coreIndependentInputSource = ((SwapChainBackgroundPanel)inputElement).CreateCoreIndependentInputSource(inputDevices);\r\n\/\/        else\r\n\/\/            coreIndependentInputSource = ((SwapChainPanel)inputElement).CreateCoreIndependentInputSource(inputDevices);\r\n\r\n\/\/        coreIndependentInputSource.PointerPressed += CoreWindow_PointerPressed;\r\n\/\/        coreIndependentInputSource.PointerMoved += CoreWindow_PointerMoved;\r\n\/\/        coreIndependentInputSource.PointerReleased += CoreWindow_PointerReleased;\r\n\/\/        coreIndependentInputSource.PointerWheelChanged += CoreWindow_PointerWheelChanged;\r\n\r\n\/\/        coreIndependentInputSource.Dispatcher.ProcessEvents(CoreProcessEventsOption.ProcessUntilQuit);\r\n\/\/    });\r\n\/\/    var inputWorker = ThreadPool.RunAsync(workItemHandler, WorkItemPriority.High, WorkItemOptions.TimeSliced);\r\n\/\/}\r\n```\r\n\r\nAnd in all of the `UIElement_` input handlers, I had to make modifications like this.\r\n\r\n```csharp\r\nvar pointerPoint = args.GetCurrentPoint(sender as UIElement);\r\nPointerPressed(pointerPoint, sender as UIElement, args.Pointer);\r\n\/\/ allow other handlers to get this event too\r\n\/\/args.Handled = true;\r\n```\r\n\r\n## Android\r\n\r\n### Game.cs\r\nBefore.\r\n```csharp\r\n#if ANDROID\r\n        [CLSCompliant(false)]\r\n        public static AndroidGameActivity Activity { get; internal set; }\r\n#endif\r\n```\r\n\r\nAfter. Since my app is a Xamarin Forms app, the main activity cannot be an AndroidGameActivity. And I need to be able to set it externally.\r\n```csharp\r\n#if ANDROID\r\n        [CLSCompliant(false)]\r\n        public static Android.App.Activity Activity { get; set; }\r\n#endif\r\n```\r\n\r\n### AndroidGameWindow.cs\r\nJust needs a couple of changes related to using a generic `Activity`. Here's one.\r\n```csharp\r\npublic AndroidGameWindow(Android.App.Activity activity, Game game)\r\n```\r\n\r\n### AndroidGamePlatform.cs\r\nMinor changes related to the generic `Activity`. Things like this.\r\n```csharp\r\n\/\/Game.Activity.Game = Game;\r\n```\r\n\r\n### AndroidGameActivity.cs\r\nSince I can't use this class, I have to call in to it to pass some events to make things work.\r\n\r\n```csharp\r\npublic static void ExternalActivityPaused(object sender)\r\n{\r\n    EventHelpers.Raise(sender, Paused, EventArgs.Empty);\r\n}\r\n\r\npublic static void ExternalActivityResumed(object sender)\r\n{\r\n    EventHelpers.Raise(sender, Resumed, EventArgs.Empty);\r\n}\r\n```\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7, 3.8 develop\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n- WindowsUWP\r\n- Android\r\n","comments":["@keith-at-work Hey... this is great. Can you provide a sample project for this? Would like to try it out, and it seems some stuff is missing (following your directions above).\r\n\r\nThanks.","@YTN0 Done. I've pushed a repo with the Xamarin Forms sample application here: https:\/\/github.com\/keith-at-work\/MonoGameXFormsSample\r\n\r\nIt uses a fork of MonoGame with the minimal required changes here: https:\/\/github.com\/keith-at-work\/MonoGame\/tree\/xamarin-forms-custom-view\r\n\r\nJust ensure the MonoGame fork is located in ..\\MonoGame relative to the MonoGameXFormsSample folder.\r\n\r\nYou can see that the changes to MonoGame to make this work are minimal. However they are breaking changes for other uses.\r\n\r\nIt'd be great if someone felt like doing this correctly. :)","@keith-at-work appreciate you putting this together! Will download and give it a try.","This would be awesome. Currently the only way to embed a 3D window in a Xamarin.Forms app is with UrhoSharp, but that seems like a dead duck. ","This is a very useful feature, are there any updates on this? It looks like some of the blocking issues (such as AndroidGameActivity) have open PRs waiting to be merged.","I'll be reviewing this PR once 3.8.1 is merged (though I don't know if it's enough to support XamForms embeds).","It looks like 3.8.1 has been released, has this feature been re-evaluated?","The initial PR has been closed, don't know if @vpenades has plans and time to have another take on it.","The original intent of my PR was to solve the problem that I needed access to a `AndroidX.Lifecycle.ILifecycleOwner` instance which is provided by the new AndroidX `AppCompatActivity` , So I needed MonoGame to be able to inherit from an activity other than MonoAndroidActivity... similar problem described by this issue.\r\n\r\nUltimately I was able to retrieve a `ILifecycleOwner` instance by other (very non obvious) means, and my own PR was mostly a hack that tried to make monogame more flexible, but also keeping around old MonoAndroidActivity, which made things really ugly.\r\n\r\nGiven that I am not an expert on Android, and my proposal was ugly, I decided to remove my PR.\r\n\r\nI think a better solution than my old PR woud be this:\r\n\r\nInstead of having a `class MonoAndroidActivity`, it would be better a `interface IMonoAndroidActivity` that could be implemented by any Activity, and would bind to some Proxy object that would contain the funcionality of the current MonoAndroidActivity... so it could be possible to easily implement monogame over any activity. But maybe people with more experience with xamarin could find better solutions.\r\n\r\n\r\n"],"labels":["Feature Request"]},{"title":"DesktopGL SpriteBatch wrong texture binding","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nI created a reproduction project here: https:\/\/github.com\/Apostolique\/MonoGameShaderIssue\r\n\r\nI wrote a shader that takes two input textures. One texture is provided by the spritebatch, the other is passed using the effect parameter. I also create a 1x1 white pixel during runtime. I don't know why, but in some cases, the shader ends up with the wrong texture.\r\n\r\nWhen I use a DirectX build, I have no issues.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.0.1375-develop\r\n(It also occurs on previous versions.)\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n\r\nImage1: \r\n![image](https:\/\/user-images.githubusercontent.com\/2766423\/83213390-0275d400-a130-11ea-9fba-9d231f48e412.png)\r\n\r\nImage2: \r\n![image](https:\/\/user-images.githubusercontent.com\/2766423\/83213405-0ace0f00-a130-11ea-8dfa-2391cb52f999.png)\r\n\r\nAfter applying the [mix shader](https:\/\/github.com\/Apostolique\/MonoGameShaderIssue\/blob\/master\/Content\/Mix.fx):\r\n\r\nExpected result: \r\n![image](https:\/\/user-images.githubusercontent.com\/2766423\/83213320-dce8ca80-a12f-11ea-9107-c39242989b2d.png)\r\n\r\nActual result: \r\n![image](https:\/\/user-images.githubusercontent.com\/2766423\/83213365-f12cc780-a12f-11ea-8e07-5d0a19c968b7.png)\r\n\r\n_____\r\n\r\nThe line that causes the error: https:\/\/github.com\/Apostolique\/MonoGameShaderIssue\/blob\/master\/Game\/GameRoot.cs#L49\r\n\r\nIf the `GetTexture()` call is done at the start of the Draw function, I get the expected result.\r\n\r\n_____\r\n\r\nhttps:\/\/github.com\/Apostolique\/MonoGameShaderIssue\/blob\/master\/Game\/GameRoot.cs#L43\r\n\r\nIf that line is moved after the `End` call, I also get the expected result.\r\n\r\n_____\r\n\r\nSorry about the quality of this report, I'm quite tired right now.","comments":["I think i did something similar with a shader here in this example.\r\nNot sure how relevant it is but the below does use two textures in a spritebatch call. \r\n\r\nThe project is linked at the bottom.\r\n\r\n\r\nhttps:\/\/community.monogame.net\/t\/shader-spritebatch-alpha-based-stenciling-and-texture-scrolling\/11332\r\n"],"labels":["MGFX","OpenGL"]},{"title":"VideoPlayer Support Refactor","body":"So our video support on MG has always been spotty.  It works fully on a few platforms, some it works partially, some not at all.  We've only gotten away with this because very few games need video playback to begin with.\r\n\r\nIt seems like the idea of using platform specific video APIs is not working out.  Most platforms don't have a good solution that has all the features we need.\r\n\r\nI think we need to find a native video decompression library then use it across all our platforms.  This gives us common format support on all platforms and reliable behavior.\r\n\r\nThis library needs to be:\r\n\r\n  - Cross platform C\/C++.\r\n  - Support 4K video.\r\n  - Support a well known video format.\r\n  - Also decompress audio.\r\n  - Not be GPL.\r\n\r\nAny suggestions?\r\n\r\nLibrary | Team | License | Codec\r\n--------|-------|----------|--------\r\n[libvpx](https:\/\/github.com\/webmproject\/libvpx\/) | [WebM](https:\/\/www.webmproject.org\/) | [BSD-ish](https:\/\/github.com\/webmproject\/libvpx\/blob\/master\/LICENSE) | [VP8](https:\/\/en.wikipedia.org\/wiki\/VP8),[VP9](https:\/\/en.wikipedia.org\/wiki\/VP9)\r\n","comments":["Not sure that it's not a dumb suggestion, but what about libvlc ?\r\nYou wrote \"not be GPL\" and libvlc is LGPL AFAIK.\r\n\r\nhttps:\/\/www.videolan.org\/press\/lgpl-libvlc.html\r\n","@monsieurmax \r\n\r\n> Not sure that it's not a dumb suggestion, but what about libvlc ?\r\n\r\nWell libvlc is a wrapper around a bunch of other libs.  So seems like we should maybe aim at something lower level.  We likely don't need a player that supports dozens of formats.  It is reasonable for our player to just support one or two specific formats.","LGPL is fine, it's only about the base GPL license, because it is not compatible with MonoGame's Ms-PL license.","https:\/\/github.com\/cisco\/openh264 ","There's also a newer spec, AV1. \r\n- Reference codec: [aom](https:\/\/github.com\/mozilla\/aom)\r\n- Fast decoder: [dav1d](https:\/\/code.videolan.org\/videolan\/dav1d)\r\n- Fast encoder: [SVT-AV1](https:\/\/github.com\/OpenVisualCloud\/SVT-AV1\/) or [rav1e](https:\/\/github.com\/xiph\/rav1e\/) (SVT-AV1 is generally faster I think)\r\n\r\nThere's good arguments to use it:\r\n- There's a bunch of tech giants supporting the codec. All of Microsoft, Google, Facebook, Amazon, Intel, AMD, Nvidia, Netflix, Mozilla and Cisco are members: http:\/\/aomedia.org\/about\/\r\n- It's patent and royalty free and they've even set up a legal defense fund in case things do go awry.\r\n- dav1d supports iOS, which I think openh264 doesn't.\r\n\r\nThey're working very hard to optimize dav1d, Phoronix benchmarks it every couple months: https:\/\/www.phoronix.com\/scan.php?page=news_item&px=Dav1d-0.7-Performance. \r\nAV1 is just starting to be used in the wild for things like [Youtube](https:\/\/www.flatpanelshd.com\/news.php?id=1588740730) and [Netflix](https:\/\/9to5google.com\/2020\/02\/05\/netflix-android-av1-streaming\/).\r\n\r\nH264 *is* encumbered by patents, but if you use the openh264 binaries built by cisco they pay the royalties so it's effectively free (as long as you don't use your own builds). ","> https:\/\/github.com\/cisco\/openh264\r\n\r\nThat that seemed like a pretty interesting solution, but we have to modify it to make it work on consoles\/mobile devices.  So i think we couldn't use it.\r\n\r\n\r\n> There's also a newer spec, AV1.\r\n\r\nThat seems really interesting.\r\n\r\n","CPU load is maybe something to consider as well. Things like h265 can be very CPU intensive even on modern hardware (I don't know about other codecs). I also guess that most codecs won't be able to use hardware decoders on consoles, which means that in some scenario it would be fully decoded on CPU.\r\n\r\nWe're likely safe, but just thought to mention that.\r\n\r\nAV1 looks promising. It went down a long road, I remember that it used to be unusable due to its heavy CPU requirement.","> CPU load is maybe something to consider as well. \r\n\r\nWell on desktops and desktop like systems without specialized decoder hardware we have no choice but to use a CPU decoder of some type.\r\n\r\nBut for some consoles and mobile it could be a problem.\r\n\r\nSince generally MG titles use of video is simpler it could be the CPU overhead isn't as big a concern.  Like i don't expect anyone will be decoding more than a single 4K video at most.\r\n\r\nThat said it would be great if we could decode a bunch of 4k videos at once using hardware.  But making that work correctly across so many platforms is a challenge."],"labels":["Feature Request","Design"]},{"title":"Effect compiler warnings seem like errors in MGCB Editor","body":"If we have an effect which generates a few warnings:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/82759279-fd242c80-9db1-11ea-965d-5054bc6d513d.png)\r\n\r\nThe resulting output looks like an error because of the red X icon.\r\n\r\nWould be best if this case shows a yellow warning icon... maybe a yellow\/orange checkmark to match the green check icon.  Or the same green check mark with a warning exclamation mark next to it?\r\n\r\nSo it tells the user hey there is something for you to maybe look at, but the asset still compiled correctly.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/82759383-ba168900-9db2-11ea-9017-0b9996c3ddda.png)\r\n\r\nSince we have no \"warning\" output we can detect here... maybe this is just shown when it builds successfully, but there is additional output text that may be warnings or stats or something else you should maybe want to see.\r\n","comments":["Could you provide volume.fx file? I was not able to reproduce that. I tried to force implicit truncation of vector type in fx file but then result was as expected, success with warning:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/1968673\/83104261-aa4fbb00-a0b8-11ea-8edf-cb9985e68b7e.png)\r\n","@margorski - can't really... it is for a Stadia project and to get these warnings you need to be building for Stadia.\r\n\r\nIt is interesting you're not getting the failed icon.  Let me dig deeper to see what is going on.\r\n\r\n","Here is the full text of the mgcb output i got:\r\n\r\n```\r\nBuild started 5\/28\/2020 10:24:57 AM\r\n\r\nCleaning E:\/Projects\/Stadia\/GameTest\/Content\/bin\/Stadia\/Content\/volume.xnb\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx: E:\\Projects\\Stadia\\GameTest\\Content\\volume.fx:124:45: warning: implicit truncation of vector type [-Wconversion]\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx:                 value = Volume.SampleLevel(VolumeSampler, pos.xyz, pos.w).r;\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx:                                                           ^\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx: E:\\Projects\\Stadia\\GameTest\\Content\\volume.fx:124:45: warning: implicit truncation of vector type [-Wconversion]\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx:                 value = Volume.SampleLevel(VolumeSampler, pos.xyz, pos.w).r;\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx:                                                           ^\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx: E:\\Projects\\Stadia\\GameTest\\Content\\volume.fx:124:45: warning: implicit truncation of vector type [-Wconversion]\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx:                 value = Volume.SampleLevel(VolumeSampler, pos.xyz, pos.w).r;\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx:                                                           ^\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx: E:\\Projects\\Stadia\\GameTest\\Content\\volume.fx:124:45: warning: implicit truncation of vector type [-Wconversion]\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx:                 value = Volume.SampleLevel(VolumeSampler, pos.xyz, pos.w).r;\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx:                                                           ^\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx: E:\\Projects\\Stadia\\GameTest\\Content\\volume.fx:124:45: warning: implicit truncation of vector type [-Wconversion]\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx:                 value = Volume.SampleLevel(VolumeSampler, pos.xyz, pos.w).r;\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx:                                                           ^\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx: E:\\Projects\\Stadia\\GameTest\\Content\\volume.fx:124:45: warning: implicit truncation of vector type [-Wconversion]\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx:                 value = Volume.SampleLevel(VolumeSampler, pos.xyz, pos.w).r;\r\nE:\/Projects\/Stadia\/GameTest\/Content\/volume.fx:                                                           ^\r\n\r\nBuild 1 succeeded, 0 failed.\r\n\r\nTime elapsed 00:00:00.82.\r\n```\r\n\r\nIn theory if you fake the MGCB.exe output that the editor captures to be the string data above.  You should be able to recreate the situation.","I guess i've forgotten that the editor makes all the decisions about the icon to show based on just the text stream.  So i guess this pattern matches the \"we got an error\" case.\r\n\r\n","I'll check that if it fits pattern. Wouldn't it be better to rely on return codes\/error standard stream instead of pattern matching for error case?","> Wouldn't it be better to rely on return codes\/error standard stream instead of pattern matching for error case?\r\n\r\nI don't see how a return code would work if MGCB.exe is building 100s of assets.\r\n\r\nOur best method is what we're doing.  I see no problem fixing\/improving MGCB formatting to make errors vs warnings more clear.\r\n\r\nWe just need to know why it is failing in this case first."],"labels":["ContentPipeline","Help Wanted","Good First Issue","MGCB Editor"]},{"title":"Color picker in pipeline tool on macOS does not set the ColorKeyColor property","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nWhen trying to change the `ColorKeyColor` property in the pipeline tool, the color picker opens up, but selecting any color does not propagate the changes back to the tool. The file is not updated either, hence I have to set this property manually in the MCGB file right now.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/45569997\/82743413-52891b00-9d6b-11ea-910c-0f474cc947e7.png)\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n- MonoGame Pipeline Tool 3.7.1.189\r\n\r\n#### What operating system are you using:\r\n- macOS 10.15.4\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":[],"labels":["MGCB Editor"]},{"title":"Texture2D GetData() causes a GL Exception on iOS","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nIn the latest dev branch, calling Texture2D.GetData() results in a GL \"Invalid Framebuffer Operation\" (1286) error exception being thrown on both the iPhone simulator (5s 11.2) and an iPhone 4s device.\r\n\r\nThe following code reproduces the problem:\r\n\r\n```\r\nvar texture2D = new Texture2D(GraphicsDevice, 256, 256);\r\nColor[] imageData = new Color[texture2D.Width * texture2D.Height];\r\ntexture2D.GetData(imageData);\r\n```\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n\r\n#### What operating system are you using:\r\n- Mac OS X 10.13.1\r\n- Visual Studio 2019 for Mac 8.5.5\r\n- Xamarin.iOS 13.14.1.39\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- iOS\r\n","comments":["In the function PlatformGetData in Texture2D.OpenGL.cs, the problem seems to be in this code (shortened):\r\n\r\n```\r\nvar framebufferId = 0;\r\nGL.GenFramebuffers(1, out framebufferId);\r\nGL.BindFramebuffer(FramebufferTarget.Framebuffer, framebufferId);\r\nGL.FramebufferTexture2D(FramebufferTarget.Framebuffer, FramebufferAttachment.ColorAttachment0, TextureTarget.Texture2D, this.glTexture, 0);\r\nGL.ReadPixels(rect.X, rect.Y, rect.Width, rect.Height, this.glFormat, this.glType, data);\r\nGL.DeleteFramebuffers(1, ref framebufferId);\r\n```\r\n\r\nThe last line was changed from the 3.7.1 branch to fix a different crash - it used to delete the frame buffer incorrectly.\r\n\r\nI tried adding the following line before the last line to bind the back buffer again, but it does not help:\r\n`GL.BindFramebuffer(FramebufferTarget.Framebuffer, 0);`\r\n\r\nThe error does not show up in this function and is not present after the \"texture2D.GetData()\" call, but is thrown later on during rendering."],"labels":["iOS","OpenGL"]},{"title":"Shader with a sampler array, Monogame Pipline Error","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\nHello,\r\n\r\nI want to write a Shader with a sampler array, but i get always this error in Monogame Content Pipeline: Unexpected token '[' found. Expected Semicolon, Comma or CloseParenthesis\r\n\r\nI want to do something like this:\r\n```\r\nuniform sampler Texture[16]\r\nfloat4 SpritePixelShader(VertexShaderOutput input) : COLOR0\r\n{\r\nint index = int(input.texCoord.z);\r\nreturn tex2D(Texture[index ], input.texCoord.xy) * input.color;\r\n}\r\n```\r\n\r\nAnother Error: if i add more than 16 sampler Pipline Tool give this error: (in Monogame i see i can have up to 160)\r\nError:\r\n![grafik](https:\/\/user-images.githubusercontent.com\/5760157\/81461093-d22ebb80-91a9-11ea-9cea-e942ec46200b.png)\r\nSamplers available in Monogame\r\n![grafik](https:\/\/user-images.githubusercontent.com\/5760157\/81461075-b2979300-91a9-11ea-9ab3-15bd4beabdf3.png)\r\n\r\n\r\n\r\nThanks for helping.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n","comments":[],"labels":["MGFX"]},{"title":"Microsoft.Xna.Framework.Audio.NoAudioHardwareException on iOS game startup","body":"My game is generating around 50-100 of these crashes per day with around 2K daily active users.\r\n\r\nThey happen on a wide range of iOS devices and operating system versions.\r\n\r\nThe one thing that's consistent is that it always happens on initial startup of the game.\r\n\r\n```\r\nMicrosoft.Xna.Framework.Audio.NoAudioHardwareException (0x80004005): OpenAL device could not be initialized, see console output for details.\r\nat Microsoft.Xna.Framework.Audio.OpenALSoundController..ctor ()\r\nat Microsoft.Xna.Framework.Audio.OpenALSoundController.EnsureInitialized ()\r\nat Microsoft.Xna.Framework.Audio.SoundEffect.PlatformInitialize ()\r\nat Microsoft.Xna.Framework.Audio.SoundEffect.Initialize ()\r\nat Microsoft.Xna.Framework.Audio.SoundEffect..ctor (System.Byte[] header, System.Byte[] buffer, System.Int32 bufferSize, System.Int32 durationMs, System.Int32 loopStart, System.Int32 loopLength)\r\nat Microsoft.Xna.Framework.Content.SoundEffectReader.Read (Microsoft.Xna.Framework.Content.ContentReader input, Microsoft.Xna.Framework.Audio.SoundEffect existingInstance)\r\nat Microsoft.Xna.Framework.Content.ContentTypeReader`1[T].Read (Microsoft.Xna.Framework.Content.ContentReader input, System.Object existingInstance)\r\nat Microsoft.Xna.Framework.Content.ContentReader.InnerReadObject[T] (T existingInstance)\r\nat Microsoft.Xna.Framework.Content.ContentReader.ReadObject[T] ()\r\nat Microsoft.Xna.Framework.Content.ContentReader.ReadAsset[T] ()\r\nat Microsoft.Xna.Framework.Content.ContentManager.ReadAsset[T] (System.String assetName, System.Action`1[T] recordDisposableObject)\r\nat Microsoft.Xna.Framework.Content.ContentManager.Load[T] (System.String assetName)\r\n...\r\nat Microsoft.Xna.Framework.Game.Initialize ()\r\nat Microsoft.Xna.Framework.Game.DoInitialize ()\r\nat Microsoft.Xna.Framework.Game.Run (Microsoft.Xna.Framework.GameRunBehavior runBehavior)\r\nat Microsoft.Xna.Framework.Game.Run ()\r\nat Program.FinishedLaunching (UIKit.UIApplication application, Foundation.NSDictionary options)\r\nat (wrapper managed-to-native) UIKit.UIApplication.UIApplicationMain(int,string[],intptr,intptr)\r\nat UIKit.UIApplication.Main (System.String[] args, System.IntPtr principal, System.IntPtr delegate)\r\nat UIKit.UIApplication.Main (System.String[] args, System.String principalClassName, System.String delegateClassName)\r\nat Program.Main (System.String[] args)\r\n\r\n```\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- iOS\r\n","comments":[],"labels":["iOS","Audio"]},{"title":"Draw origin is incorrect on Android","body":"When drawing using the `SpriteBatch` on an Android device, positioning seems to be off. \r\nThis screenshot is a white rectangle drawn as follows:\r\n```cs\r\n        protected override void Draw(GameTime gameTime) {\r\n            GraphicsDevice.Clear(Color.CornflowerBlue);\r\n            this._spriteBatch.Begin();\r\n            this._spriteBatch.Draw(this.texture, new Rectangle(0, 0, 50, 50), Color.White);\r\n            this._spriteBatch.End();\r\n            base.Draw(gameTime);\r\n        }\r\n```\r\nAs you can see, there are no transformations applied, yet the rectangle renders as follows in portrait and landscape modes:\r\n![Screenshot_20200421-191304](https:\/\/user-images.githubusercontent.com\/5741138\/79893981-1a598a00-8405-11ea-83b0-c7a7843ba546.jpg)\r\n![Screenshot_20200421-191309](https:\/\/user-images.githubusercontent.com\/5741138\/79893985-1b8ab700-8405-11ea-9ed0-c88d31d057ea.jpg)\r\n\r\nI'm just using the Android template provided by the dotnet templates with no modification other than the texture loading and drawing code.\r\n\r\nAm I supposed to add some sort of screen size code that I'm missing?\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.1.189\r\n\r\n#### What operating system are you using:\r\n- Windows to build\r\n\r\n#### What MonoGame platform are you using:\r\n- Android","comments":["@Ellpeck What resolution is the device?\r\n\r\nI'm experiencing what appears to be the same or a similar issue on some devices only (i.e. problems on a device with a `2231x1042` screen, no problem on a device with a `1920x1080` screen.)\r\n\r\nDoing the following leaves slithers of red at the top and\/or bottom of a landscape screen:\r\n\r\n```\r\nGraphicsDevice.Clear(Color.Red);            \r\n_spriteBatch.Begin();\r\n_spriteBatch.Draw(_texture, _graphics.GraphicsDevice.Viewport.Bounds, Color.Blue);\r\n_spriteBatch.End();\r\n```","My phone has a resolution of `2160x1080`.","@Ellpeck Are you able to test your app on a device (or emulator) with a 16:9 aspect ratio screen? If, like I'm finding, it works fine there it may perhaps help diagnose our issue.","I have just tested this again on an emulator with the resolution set to `2231x1042` and there are no issues there, so it's not simply an aspect ratio problem.\r\n\r\nMy next thought is that the problem is occurring on devices with a screen-based navigation bar, instead of physical buttons. I don't know of any way to test this with my emulator (BlueStacks) to confirm. The presence of the navigation buttons in the screenshots @Ellpeck originally posted seems to add weight to this.","I've carried out some additional testing on this which perhaps gives some hint on what's going on. On a Samsung S20 Ultra with a `2400x1080` screen, MonoGame's viewport is reporting as `2326x1046`. The screenshot below is of an app which simply clears the screen to red:\r\n\r\n```\r\nGraphicsDevice.Clear(Color.Red);\r\n```\r\n\r\nAnd then draws a white rectangle across the entire screen over the top:\r\n\r\n```\r\n_spriteBatch.Begin();\r\n_spriteBatch.Draw(_rect, _graphics.GraphicsDevice.Viewport.Bounds, Color.White);\r\n_spriteBatch.End();\r\n```\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/2040763\/81696672-23fe6c80-945c-11ea-8673-954a1d63d6ef.png)\r\n\r\nOn an old Samsung S7 Edge this simply shows a white rectangle across the entire screen as expected. The screenshot above shows both a red section (cleared by `GraphicsDevice`, but apparently inaccessible to `_spriteBatch`), and a black section on the left (inaccessible to either `GraphicsDevice` or `_spriteBatch`).\r\n\r\nPlease let me know if there is anything else I can do to help diagnose this issue. I can happily put together a test repo to reproduce the issue if that will help, but all you really need is to `dotnet new mgandroid` and add the two code sections above.","More testing. I created a new project to eliminate anything from my larger projects with `dotnet new mgandroid` and modified `Game1.cs` to the following:\r\n\r\n```\r\npublic class Game1 : Game\r\n{\r\n    private GraphicsDeviceManager _graphics;\r\n    private SpriteBatch _spriteBatch;\r\n    private Texture2D _rect;\r\n\r\n    public Game1()\r\n    {\r\n        _graphics = new GraphicsDeviceManager(this);\r\n    }\r\n\r\n    protected override void Initialize()\r\n    {\r\n        base.Initialize();\r\n    }\r\n\r\n    protected override void LoadContent()\r\n    {\r\n        _spriteBatch = new SpriteBatch(GraphicsDevice);\r\n\r\n        _rect = new Texture2D(GraphicsDevice, 1, 1);\r\n        _rect.SetData(new[] { Color.White.PackedValue });\r\n    }\r\n\r\n    protected override void Update(GameTime gameTime)\r\n    {\r\n        base.Update(gameTime);\r\n    }\r\n\r\n    protected override void Draw(GameTime gameTime)\r\n    {\r\n        GraphicsDevice.Clear(Color.Red);\r\n\r\n        _spriteBatch.Begin();\r\n        _spriteBatch.Draw(_rect, GraphicsDevice.Viewport.Bounds, Color.White);\r\n        _spriteBatch.End();\r\n\r\n        base.Draw(gameTime);\r\n    }\r\n}\r\n```\r\n\r\nInterestingly this creates what I believe to be unexpected behaviour even on a device with hardware navigation buttons. Running in landscape and portrait on a Galaxy S7 gives the following results:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/2040763\/81791616-d7b83880-94fe-11ea-9a4f-dd666df9c7a2.png)\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/2040763\/81791632-dbe45600-94fe-11ea-9aac-4bf584579150.png)\r\n\r\nIs this expected behaviour? It appears that, due to the status bar being present, the screen can be cleared to red but the `Viewport` has retained the 16:9 aspect ratio and thus created borders. I would expect the `Viewport` to be the full addressable screen size, regardless of the aspect ratio?\r\n\r\nThis particular issue can be resolved on a device with hardware buttons by adding `_graphics.IsFullScreen = true;` to the end of the `Game1` constructor, which produces the following (fairly redundant image, but including anyway for completeness!):\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/2040763\/81792013-5e6d1580-94ff-11ea-9418-8d77489221b2.png)\r\n\r\nI have yet to test this on a device with software navigation buttons as I don't have one to hand, but will report back later with the results there.\r\n\r\n**Edit** - Below is the same program running on an S20 Ultra (with the `_graphics.IsFullScreen = true;`):\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/2040763\/81796055-d12cbf80-9504-11ea-8086-a8110c4c8c44.png)\r\n","Eventually solved all issues after getting some development time with a device. Turns out a number of things can eat into the screen and cause the viewport to end up sized incorrectly. I'm not sure if any of the above behaviour is considered correct or a bug, but it can be resolved by forcing the app to render a \"real\" full screen with the following three things:\r\n\r\n1. Remove the status bar by adding the following to the constructor of your `Game` class:\r\n```\r\n_graphics.IsFullScreen = true;\r\n```\r\n\r\n2. Render under any notches by adding the following to the `OnCreate()` of your `Activity` class:\r\n```\r\nif (Build.VERSION.SdkInt >= BuildVersionCodes.P)\r\n{\r\n  Window.Attributes.LayoutInDisplayCutoutMode = LayoutInDisplayCutoutMode.ShortEdges;\r\n}\r\n```\r\n\r\n3.  Hide any software navigation buttons by running the following in both `OnCreate()` and `OnWindowFocusChanged()` of your `Activity` class:\r\n```\r\n_view.SystemUiVisibility = (StatusBarVisibility)(SystemUiFlags.LayoutStable | SystemUiFlags.LayoutHideNavigation | SystemUiFlags.LayoutFullscreen | SystemUiFlags.HideNavigation | SystemUiFlags.Fullscreen | SystemUiFlags.ImmersiveSticky);\r\n```","Thanks for the investigation into this, @svallis! Those changes did indeed fix the issue for my case as well. \r\n\r\nIs there something here that can be modified within MonoGame to make this process more obvious for users? I think it would be great if some of the changes @svallis listed (like the ones in the `Activity` class) could be added to the Android project template.","Hi, I know this issue is kinda stale at this point but I thought I'd jump in with another insight:\r\n\r\nThe origin appears to \"fix\" itself (kinda, not really) if you set and clear a render target during your draw loop.\r\n\r\n```\r\n\/\/ in Game.LoadContent (for example)\r\nthis.renderTarget = new RenderTarget2D(graphicsDevice, 200, 200, false, graphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);\r\n```\r\n\r\n```\r\n\/\/ inside Game1.Draw()\r\nvar states = TouchPanel.GetState();\r\n\/\/ wait for a touch, just to demonstrate the difference\r\nif(states.Count > 0) {\r\n   graphicsDevice.SetRenderTarget(this.renderTarget);\r\n   graphicsDevice.SetRenderTarget(null);\r\n}\r\n```\r\n\r\nIf you load the game then the origin is wrong, but when you tap the screen the origin is correct. However the overall canvas size is the same so now you end up with this awkward margin to the right that you can't draw on."],"labels":["Android","Help Wanted"]},{"title":"Add headless runtime for unit testing in CI\/CD and running dedicated servers","body":"<!-- Write your issue below -->\r\n\r\nCurrently, there are no runtimes that don't require a graphics card.\r\n\r\nAdding a headless runtime would enable:\r\n- Dedicated servers to run on environments that don't support graphics\r\n- Allows for unit testing code that requires graphics, like Texture2D\r\n\r\nCurrently, I use the following hack to run MonoGame headless, but I rather use a build-in runtime\r\n\r\n```csharp\r\npublic static class HeadlessRuntimeHelper\r\n    {\r\n        private static ContentManager _contentManager;\r\n\r\n        public static void Initialize()\r\n        {\r\n            var cache = (Dictionary<Type, ContentTypeReader>) typeof(ContentTypeReaderManager).GetField(\r\n                    \"_contentReadersCache\",\r\n                    BindingFlags.Static | BindingFlags.NonPublic)\r\n                .GetValue(null);\r\n\r\n            Type readerType = typeof(Game).Assembly.GetType(\"Microsoft.Xna.Framework.Content.Texture2DReader\");\r\n            cache.Add(readerType, new HeadlessTexture2DReader());\r\n        }\r\n\r\n        public static ContentManager GetContentManager(string contentPath = \"Content\")\r\n        {\r\n            return _contentManager ??= new ContentManager(new GameServiceContainer(), contentPath);\r\n        }\r\n\r\n        private class HeadlessTexture2DReader : ContentTypeReader<Texture2D>\r\n        {\r\n            private readonly FieldInfo _heightFieldInfo =\r\n                typeof(Texture2D).GetField(\"height\", BindingFlags.Instance | BindingFlags.NonPublic);\r\n            private readonly FieldInfo _widthFieldInfo =\r\n                typeof(Texture2D).GetField(\"width\", BindingFlags.Instance | BindingFlags.NonPublic);\r\n\r\n            protected override Texture2D Read(ContentReader reader, Texture2D existingInstance)\r\n            {\r\n                reader.ReadInt32();\r\n                var width = reader.ReadInt32();\r\n                var height = reader.ReadInt32();\r\n                var levelCount = reader.ReadInt32();\r\n                for (var level = 0; level < levelCount; level++)\r\n                {\r\n                    var levelDataSizeInBytes = reader.ReadInt32();\r\n                    reader.BaseStream.Position += levelDataSizeInBytes;\r\n                }\r\n\r\n                Texture2D texture = existingInstance;\r\n                if (texture == null)\r\n                {\r\n                    texture = (Texture2D) FormatterServices.GetUninitializedObject(typeof(Texture2D));\r\n                    _widthFieldInfo.SetValue(texture, width);\r\n                    _heightFieldInfo.SetValue(texture, height);\r\n                }\r\n                return texture;\r\n            }\r\n        }\r\n    }\r\n```","comments":["I don't think this is worth it for us to maintain in the main repo.\r\n\r\nFor servers you really don't want to use graphics classes at all.\r\nIMO the best thing we can do for headless MG game servers is provide a separate assembly with math types. See #6850. \r\n\r\nFor unit testing, I think no-op implementations of graphics classes are of very limited value because you can't test the most important parts.","I don't want to test Graphics and I don't want to render on a server.\r\n\r\nThe Game class and packages like MonoGame.Extended Tiled, require a window\/graphics and therefore I am currently running my server in a custom update loop and using a ContentManager with a hack.\r\n","@janfokke could you explain how you are running a custom update loop?","@xdrie \r\nI don't use the Game class, because that initializes SDL stuff. I copied the MonoGame update loop code and use the code above to fix ContentManager Texture2D loading.\r\n"],"labels":["Feature Request","Design"]},{"title":"AndroidTV Holding Keyboard Key stutters after \u00bd second","body":"When compiling an AndroidTV project with the current development branch, there is a keyboard input issue. When I hold down a physical keyboard key to move a sprite, it moves smoothly for about 1\/2 of a second and then it starts to stutter.\r\n\r\nI spent some time debugging, and it appears calls to KeyboardState.IsKeyDown starts cycling between true and false after about a half second. This makes the sprite move jerky.\r\n\r\nTo reproduce, create a clean MonoGame project and add the following code. You will have to add the a sprite named Spaceship (or change the texture name). I used Monogame 3.7.1.\r\n\r\n```CSharp\r\nsealed class Game1 : Game\r\n{\r\n    GraphicsDeviceManager graphics;\r\n    SpriteBatch spriteBatch;\r\n    KeyboardState currentKeyboard = new KeyboardState();\r\n    Vector2 spritePosition;\r\n\r\n    public Game1()\r\n    {\r\n        graphics = new GraphicsDeviceManager(this);\r\n        Content.RootDirectory = \"Content\";\r\n        graphics.IsFullScreen = true;\r\n        graphics.PreferredBackBufferWidth = 800;\r\n        graphics.PreferredBackBufferHeight = 480;\r\n        graphics.SupportedOrientations = DisplayOrientation.LandscapeLeft | DisplayOrientation.LandscapeRight;\r\n    }\r\n\r\n    protected override void LoadContent()\r\n    {\r\n        spriteBatch = new SpriteBatch(GraphicsDevice);\r\n        base.LoadContent();\r\n    }\r\n\r\n    protected override void Update(GameTime gameTime)\r\n    {\r\n        currentKeyboard = Keyboard.GetState();\r\n\r\n        if (currentKeyboard.IsKeyDown(Keys.Left))\r\n        {\r\n            spritePosition.X -= 1;\r\n        }\r\n        else if (currentKeyboard.IsKeyDown(Keys.Right))\r\n        {\r\n            spritePosition.X += 1;\r\n        }\r\n\r\n        base.Update(gameTime);\r\n    }\r\n\r\n   protected override void Draw(GameTime gameTime)\r\n   {\r\n        GraphicsDevice.Clear(Color.CornflowerBlue);\r\n\r\n        spriteBatch.Begin();\r\n        spriteBatch.Draw(Content.Load<Texture2D>(\"Spaceship\"), spritePosition, Color.White);\r\n        spriteBatch.End();\r\n\r\n        base.Draw(gameTime);\r\n    }\r\n}\r\n```\r\n\r\nFirst reported at: \r\nhttps:\/\/community.monogame.net\/t\/androidtv-holding-keyboard-key-stutters-after-1-2-second\/12394\r\n\r\nThanks,\r\nBrett\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.1 & Development branch on \r\n\r\n#### What operating system are you using:\r\n- Compiled on Windows 10, 64 Bit\r\n\r\n#### What MonoGame platform are you using:\r\n- Ran in default AndroidTV 720P emulator with Visual Studio 2019 \r\n","comments":[],"labels":["Android","Input"]},{"title":"System.InvalidOperationException: Framebuffer was not created correctly: FramebufferIncompleteAttachment","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nMy game currently has about 2.5K daily active iOS users who generate about 300 crashes per day with the following call stack:\r\n\r\n```\r\nSystem.InvalidOperationException: Framebuffer was not created correctly: FramebufferIncompleteAttachment\r\nat Microsoft.Xna.Framework.iOSGameView.CreateFramebuffer ()\r\nat Microsoft.Xna.Framework.iOSGameView.LayoutSubviews ()\r\nat (wrapper managed-to-native) UIKit.UIApplication.UIApplicationMain(int,string[],intptr,intptr)\r\nat UIKit.UIApplication.Main (System.String[] args, System.IntPtr principal, System.IntPtr delegate)\r\nat UIKit.UIApplication.Main (System.String[] args, System.String principalClassName, System.String delegateClassName)\r\n```\r\n\r\nI've added tracing which shows the crash happens immediately after `Microsoft.Xna.Framework.Game.OnDeactivated` is invoked. Prior to that, the game has been running fine for a long time (30 minutes or more in some cases I inspected), and `OnDeactivated` may have been successfully invoked a number of times before the one that finally crashes, so the issue is intermittent and I suspect some sort of timing issue.\r\n\r\nMy best guess is that some GL drawing functions are being called after the game is deactivated, but I don't know how I can work around this issue. As you might imagine, this is not creating a good experience for my players.\r\n\r\nAny advice?\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- iOS\r\n","comments":["Which MonoGame 3.8 are you using? Last installer build from the build bot?","Exception is thrown here:\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/a50501f5facdbb4e7fdc3d5c22677b8f83d90dc6\/MonoGame.Framework\/Platform\/iOS\/iOSGameView.cs#L256-L259\r\n\r\nGL docs: https:\/\/www.khronos.org\/registry\/OpenGL-Refpages\/gl4\/html\/glCheckFramebufferStatus.xhtml\r\n\r\n>  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT is returned if any of the framebuffer attachment points are framebuffer incomplete. ","> Which MonoGame 3.8 are you using? Last installer build from the build bot?\r\n\r\nThis has been a long-standing issue with many different daily builds of 3.8, and I believe even going back to 3.7. It's just become a higher priority now that one of my games is getting popular.\r\n\r\nUnfortunately, I'm unable to use very recent builds of 3.8 due to breaking changes in the content pipeline. I have a dependency on a custom pipeline extension that doesn't load anymore and it's going to take some time to get it working again as I don't have the source and need to recreate it from scratch.\r\n\r\nSo, I'm synced to commit d04630b672c14379bf849baec0b7a76cbc8eb714 which contains the last fix that I require for issue #7047.\r\n","> due to breaking changes in the content pipeline.\r\n\r\nWhat breaking changes?\r\n\r\n> So, I'm synced to commit [d04630b](https:\/\/github.com\/MonoGame\/MonoGame\/commit\/d04630b672c14379bf849baec0b7a76cbc8eb714) which contains the last fix that I require for issue #7047.\r\n\r\nYou don't have #7073 I assume.","I don't want to mix up too many issues here, but I also get hundreds of crashes per day that look like the following:\r\n\r\n```\r\nFoundation.MonoTouchException: Objective-C exception thrown.  Name: NSInternalInconsistencyException Reason: Modifications to the layout engine must not be performed from a background thread after it has been accessed from the main thread.\r\nNative stack trace:\r\n0   CoreFoundation                      0x000000018e1c8980 DC2C95C6-B954-39E8-86A2-5E0AF8801E87 + 1255808\r\n1   libobjc.A.dylib                     0x000000018dee1028 objc_exception_throw + 60\r\n2   Foundation                          0x000000018e6b45e0 7A7A96AF-79E4-3DB1-8904-42E61CAE8999 + 2332128\r\n3   Foundation                          0x000000018e4ad854 7A7A96AF-79E4-3DB1-8904-42E61CAE8999 + 206932\r\n4   Foundation                          0x000000018e4ad768 7A7A96AF-79E4-3DB1-8904-42E61CAE8999 + 206696\r\n5   Foundation                          0x000000018e4ad3d8 7A7A96AF-79E4-3DB1-8904-42E61CAE8999 + 205784\r\n6   UIKitCore                           0x00000001927695b8 AAFEFEBE-C172-3346-8972-810EB8F2F2C6 + 15611320\r\n7   UIKitCore                           0x000000019277c8b0 AAFEFEBE-C172-3346-8972-810EB8F2F2C6 + 15689904\r\n8   libobjc.A.dylib                     0x000000018dedca4c 2C18C54E-6C84-310C-851F-F9602890D908 + 6732\r\n9   QuartzCore                          0x0000000194d9255c 4DA865CA-7F36-3D7F-952E-05A9E5ED505D + 1402204\r\n10  QuartzCore                          0x0000000194d929ac 4DA865CA-7F36-3D7F-952E-05A9E5ED505D + 1403308\r\n11  QuartzCore                          0x0000000194da51bc 4DA865CA-7F36-3D7F-952E-05A9E5ED505D + 1479100\r\n12  QuartzCore                          0x0000000194ce9b00 4DA865CA-7F36-3D7F-952E-05A9E5ED505D + 711424\r\n13  QuartzCore                          0x0000000194d14910 4DA865CA-7F36-3D7F-952E-05A9E5ED505D + 887056\r\n14  QuartzCore                          0x0000000194d154e4 4DA865CA-7F36-3D7F-952E-05A9E5ED505D + 890084\r\n15  CoreFoundation                      0x000000018e143524 DC2C95C6-B954-39E8-86A2-5E0AF8801E87 + 709924\r\n16  CoreFoundation                      0x000000018e13e1c4 DC2C95C6-B954-39E8-86A2-5E0AF8801E87 + 688580\r\n17  CoreFoundation                      0x000000018e13df60 CFRunLoopRunSpecific + 512\r\n18  WebCore                             0x0000000196318820 CA426A2F-5481-34AC-AF0A-08332C0A84E0 + 4438048\r\n19  libsystem_pthread.dylib             0x000000018ded1840 _pthread_start + 168\r\n20  libsystem_pthread.dylib             0x000000018ded99f4 thread_start + 8\r\n0   CoreFoundation                      0x000000018e1c8980 DC2C95C6-B954-39E8-86A2-5E0AF8801E87 + 1255808\r\n1   libobjc.A.dylib                     0x000000018dee1028 objc_exception_throw + 60\r\n2   Foundation                          0x000000018e6b45e0 7A7A96AF-79E4-3DB1-8904-42E61CAE8999 + 2332128\r\n3   Foundation                          0x000000018e4ad854 7A7A96AF-79E4-3DB1-8904-42E61CAE8999 + 206932\r\n4   Foundation                          0x000000018e4ad768 7A7A96AF-79E4-3DB1-8904-42E61CAE8999 + 206696\r\n5   Foundation                          0x000000018e4ad3d8 7A7A96AF-79E4-3DB1-8904-42E61CAE8999 + 205784\r\n6   UIKitCore                           0x00000001927695b8 AAFEFEBE-C172-3346-8972-810EB8F2F2C6 + 15611320\r\n7   UIKitCore                           0x000000019277c8b0 AAFEFEBE-C172-3346-8972-810EB8F2F2C6 + 15689904\r\n8   libobjc.A.dylib                     0x000000018dedca4c 2C18C54E-6C84-310C-851F-F9602890D908 + 6732\r\n9   QuartzCore                          0x0000000194d9255c 4DA865CA-7F36-3D7F-952E-05A9E5ED505D + 1402204\r\n10  QuartzCore                          0x0000000194d929ac 4DA865CA-7F36-3D7F-952E-05A9E5ED505D + 1403308\r\n11  QuartzCore                          0x0000000194da51bc 4DA865CA-7F36-3D7F-952E-05A9E5ED505D + 1479100\r\n12  QuartzCore                          0x0000000194ce9b00 4DA865CA-7F36-3D7F-952E-05A9E5ED505D + 711424\r\n13  QuartzCore                          0x0000000194d14910 4DA865CA-7F36-3D7F-952E-05A9E5ED505D + 887056\r\n14  QuartzCore                          0x0000000194d154e4 4DA865CA-7F36-3D7F-952E-05A9E5ED505D + 890084\r\n15  CoreFoundation                      0x000000018e143524 DC2C95C6-B954-39E8-86A2-5E0AF8801E87 + 709924\r\n16  CoreFoundation                      0x000000018e13e1c4 DC2C95C6-B954-39E8-86A2-5E0AF8801E87 + 688580\r\n17  CoreFoundation                      0x000000018e13df60 CFRunLoopRunSpecific + 512\r\n18  WebCore                             0x0000000196318820 CA426A2F-5481-34AC-AF0A-08332C0A84E0 + 4438048\r\n19  libsystem_pthread.dylib             0x000000018ded1840 _pthread_start + 168\r\n20  libsystem_pthread.dylib             0x000000018ded99f4 thread_start + 8\r\n```\r\n\r\nIn this case, `Microsoft.Xna.Framework.Game.Initialize` gets called again after the game has been running for a long time, but has just been reactivated.\r\n\r\nI do suspect some sort of multithreading issue here and maybe it's related?","> You don't have #7073 I assume.\r\n\r\nNo, and that looks very promising. I'll see if I can get that change without the breaking content pipeline changes.","I was able to pick up #7073 so I'll put that in the App Store and close this issue for now. Thank you!","> What breaking changes?\r\n\r\nEffects compiled with the old content pipeline can't be loaded by current builds (throws an exception about the effect being an old version), and the new content pipeline builder fails to load old extensions so I can't rebuild the effects.\r\n\r\nNow that I think about it, since I don't need the extension to build the effects (the extension is just supporting a replacement for SpriteFont that uses msdf font smoothing), maybe I could build everything else with the new content pipeline and keep just the old font xnb to work around this issue? I may try that later to see if I can get to a current build that way.","This is still an issue with #7073. It did seem to fix a bunch of other random crashes that were happening less often, but this one is still my top crash report.","More info:\r\n\r\nIn my latest release, 100% of the crashes so far happen after Game.OnDeactivated is called.\r\n\r\nI also see an orientation change at some point before the crash."],"labels":["iOS","OpenGL","Help Wanted"]},{"title":"MediaPlayer.Pause() bad behavior in UWP apps","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nAfter resuming MediaPlayer from a pause state by calling MediaPlayer.Resume(), MediaPlayer.Pause() no longer works again. As indicated below, this bad behavior is happening in my UWP version of the project. The windows desktop \/ DX version works fine.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.0.1082\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n- WindowsUWP\r\n","comments":[],"labels":["Windows 10 UWP","Audio"]},{"title":"XACT: Pitch event not supported","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nOn my piece of code, I have\r\nsoundBank = new SoundBank(engine, contentPath + \"Sound Bank.xsb\");\r\n\r\nApparently this is causing a \"System.NotImplementedException: 'Pitch event'\"\r\n\r\nIs there any known technical reason for this to be like this or can I try to fix it and submit a PR? \r\n\r\nThanks.\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- WindowsDX\r\n","comments":["The handling of pitch events needs to be implemented in XactClip. I've never worked on the XACT stuff, so I don't know how it works exactly.\n\nI also don't know if the format is documented somewhere, cc @tomspilman.","@Jjagg - It will take a little investigation to work out.  The pitch event works similar to volume.  What i do when i work these out is look at the settings in the XACT tool... set everything to some unique values... then try to work out the decoding.  \r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/77322788-425cad00-6ce2-11ea-90d0-784c7bea25d5.png)\r\n\r\nAll this data is encoded in the pitch event.  Usually they stick to similar formats to other cases... so i don't expect this to be too tricky to figure out.  Also from my experience the \"repeats\" case is usually a separate pitch event id (like the volume repeat event).\r\n\r\nWe have a `Tests.xap` file in the unit tests along with some tests in:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/Tests\/Framework\/Audio\/XactTest.cs\r\n\r\nWe've used it to do some basic XACT tests and be sure different formats are parsed.  Adding a sound cue with a pitch event and making it load would be the first step."],"labels":["XACT","Help Wanted","Audio"]},{"title":"SpriteFont smoothing artifacts","body":"I feel like this belongs to the #6614, but did not want to spam the thread.\r\n\r\nDidn't actually have any problems with rendering pixel art fonts, till I tried mixing in some Chinese.\r\nInterestingly enough, it produces this, what looks like to me as in the result of antialiasing:\r\n\r\n![Screenshot from 2020-03-22 13-45-05](https:\/\/user-images.githubusercontent.com\/7851390\/77247650-20145200-6c44-11ea-8a75-bacc3cbb569a.png)\r\n\r\nThe text is rendered with SpriteFont, size is set to exact font size. \r\nI didn't find any way to disable smoothing of the font, but I really wish I could (trying to get white-only glyphs). The font itself is pixel-perfect, so it looks like the issue is in how the pipeline renders it.\r\n\r\nThanks, Egor.\r\n\r\n###### System stats\r\n\r\n- MonoGame 3.7\r\n- Linux\r\n- DesktopGL\r\n","comments":["That sharpfont or whats it called rasterizing it like that.\r\n","I suspect in the shown case above that can be bandaided. \r\n\r\nby adding a createing opaque option to be displayed by the pipeline tool in the processor options.\r\nI think that gets passed here.\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework.Content.Pipeline\/Processors\/LocalizedFontProcessor.cs#L88\r\n\r\nThen creating a method that just sets 255 to everything including the alpha here if r is more then 0 otherwise zero is set for all the color elements.\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework.Content.Pipeline\/Processors\/FontDescriptionProcessor.cs#L146\r\n\r\nsee note below in relevant code line\r\n\r\n```\r\n                var idx = 0;\r\n                for (; idx < data.Length; )\r\n                {\r\n                    var r = data[idx];\r\n                    data[idx + 0] = 255;\r\n                    data[idx + 1] = 255;\r\n                    data[idx + 2] = 255;\r\n                    data[idx + 3] = r;      \r\n                    \/\/  ** change were we set r to 255 if its more then 0 in a nested if else for non-premultiplied and opaque**\/\/\r\n                    \/\/ **same for premultiplied but set all rgba to 255** \/\/\r\n                    idx += 4;\r\n                }\r\n```\r\n\r\nThat wont work for other artifacts it spits out in fact in some situations it would probably make the rasterization alot worse looking, but for this sort of case it should work.\r\n\r\n"],"labels":["Font"]},{"title":"New constructors to set custom GamePad thumbstick deadzones","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nI'm working on a 2D game that doesn't require precise inputs and relies on the virtual buttons (Ex. `Buttons.LeftThumbstickLeft`) to detect player movement when using controllers. With most of my controllers, the GamePad deadzone is too sensitive and makes it easy to make unintentional directional inputs. \r\n\r\nUnfortunately, [the GamePad deadzone values are hardcoded constants](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Input\/GamePadThumbSticks.cs#L54). Even if `GamePadDeadZone.None` is used, the GamePad code still uses these constants to decide if the virtual buttons flags are set.\r\n\r\nI'd like additional constructors in `GamePadThumbsticks` and `GamePadState` that take in custom left and right thumbstick deadzone values so this can be easily configured. This shouldn't any break existing code.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- Develop\r\n\r\n#### What operating system are you using:\r\n- Windows, Linux\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["Could this be solved by making ApplyDeadZone() public and setting the dead zones values to be mutable (instead of const)? The idea is to let developers set the dead zones manually with the same functionality MonoGame uses to set them internally. Might be missing something.","I think that the best would be new overloads of ```GamePad.GetState()``` that takes deadzone values for both sticks and that cascade the value.\r\n\r\nFor instance, changing this one:\r\n\r\n```csharp\r\nGamePadState GetState(\r\n   PlayerIndex playerIndex,\r\n   GamePadDeadZone leftDeadZoneMode,\r\n   GamePadDeadZone rightDeadZoneMode);\r\n```\r\n\r\ninto something like this:\r\n\r\n```csharp\r\nGamePadState GetState(\r\n   PlayerIndex playerIndex,\r\n   GamePadDeadZone leftDeadZoneMode,\r\n   GamePadDeadZone rightDeadZoneMode,\r\n   float leftDeadZoneAmount = -1.0f,\r\n   float rightDeadZoneAmount = -1.0f);\r\n```\r\n\r\nwith negative values telling MonoGame to use the default internal constant."],"labels":["Feature Request","Input"]},{"title":"PreventDefault flag for back button (FireTV but may have other uses)","body":"Recently I've been working on bringing an Android game to FireTV and I found I needed a way to prevent the default back behaviour (which normally minimises the app). I needed a way to toggle this, so that while in the main game screens back button would navigate to the previous screen (or pause the game, whatever function is desirable in the current context).  But if the user is on the title screen, this button should minimise the app as normal. \r\n\r\nI found the keys got consumed before reaching the Android activity so I had to look in the game view class. I then added a flag that can be toggled in MonoGameAndroidGameView to prevent the back button exiting the app.\r\n\r\nhttps:\/\/github.com\/playerthree-ltd\/MonoGame\/blob\/fdca671b2baeff82ce67adc068750120b01dba92\/MonoGame.Framework\/Platform\/Android\/MonoGameAndroidGameView.cs#L25\r\n\r\nAnd then when the key is checked:\r\n\r\nhttps:\/\/github.com\/playerthree-ltd\/MonoGame\/blob\/fdca671b2baeff82ce67adc068750120b01dba92\/MonoGame.Framework\/Platform\/Android\/MonoGameAndroidGameView.cs#L1130\r\n\r\nI'd like to submit this as a PR rather than have to maintain our own fork.  But before I do that can someone confirm I'm not adding something that is already present and that this is a suitable way to add this functionality? ","comments":["On android you can minimize the app by calling `Game.Activity.MoveTaskToBack(true);`\r\nI suppose this works the same on FireTV.","> On android you can minimize the app by calling `Game.Activity.MoveTaskToBack(true);`\r\n> I suppose this works the same on FireTV.\r\n\r\nHmm that would be useful in the case where I do want to exit the app, but the issue I'm having is that I am unable to control whether the back button exits the app.  Currently any back button presses will minimise the app. When I look at Xamarin info it suggests to override the OnBackButton method, but it seems the method doesn't fire so I'm guessing it isn't using this function. ","In the title screen add the following check.\r\n\r\nif(keyboardState.IsKeyDown(Keys.Back))\r\n    Microsoft.Xna.Framework.Game.Activity.MoveTaskToBack(true);\r\n\r\n","> In the title screen add the following check.\r\n> \r\n> if(keyboardState.IsKeyDown(Keys.Back))\r\n> Microsoft.Xna.Framework.Game.Activity.MoveTaskToBack(true);\r\n\r\nApologies for the late reply. My issue is actually the reverse of this, I can't see any way to prevent the app exiting on pressing the back button.  I need to be able to control the behavior, which I have done in a custom build.  \r\n\r\nSo I am now able to define behavior for the back button on a per scene basis, so other scenes back button navigates to the previous scene, but on the title screen it closes the app. ","We can probably tie this into #7105."],"labels":["Android"]},{"title":"Toggling SynchronizeWithVerticalRetrace (VSync) resets window state on Windows","body":"#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.1 (current MonoGame.Framework.DesktopGL NuGet package)\r\n\r\n#### What operating system are you using:\r\n- Windows 10 1809 Enterprise\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n\r\nWhen my window is set maximized (manually, after allowing it by setting `Window.AllowUserResizing = true;`), toggling VSync returns it to windowed state at the size specified in the `GraphicsDeviceManager` `PreferredBackBufferHeight`\/`PreferredBackBufferWidth`.\r\n\r\nI found a few nasty workarounds for this, but they only function on Windows.\r\n\r\nFirst I added an EventHandler on `Window.ClientSizeChanged`. \r\n\r\nIn there I set the `PreferredBackBufferHeight`\/`PreferredBackBufferWidth` to the current sizes from `GraphicsDevice.PresentationParameters.BackBufferHeight\/`BackBufferWidth`. This stops the window from resetting back to the originally preferred size.\r\n\r\nThen I P\/Invoke (`DllImport(\"User32.dll\")`) `FindWindow` on the current `Window.Title` to get a working handle (`Window.handle` does not work for this). With this handle I check the `IsZoomed` boolean from `User32.dll` to determine if the window is maximized.\r\n\r\nI save this value in a bool in my project and it will update on every resize\/minimize\/maximize\/windowed.\r\n\r\nNow on toggling VSync I check this maximized bool; if true I again find the window handle by title (I could store this as well I suppose) and then use `User32.dll`'s `ShowWindowAsync` method to set the ShowState to `SW_NORMAL` to clear the maximized-flag (that is still true on the window, even with it not being maximized, the window title bar maximize-button icon still claims it is) and then I set it to `SW_MAXIMIZE` again.\r\n\r\nThis all works but it is obviously unmanaged code and Windows-only. I would love to see this behavior of the VSync toggle changed, and it would be even more amazing if some form control was exposed to us inside the game class.","comments":[],"labels":["Feature Request","Design"]},{"title":"DesktopGL KeyDown and KeyUp event potential performance improvements","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\n`SDLGamePlatform` maintains a list of unique `Keys` that are pressed. This list is [shared with `Keyboard`](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Platform\/Input\/Keyboard.SDL.cs#L11) and passed into newly created `KeyboardStates`, in which all keys contained within are used to set the pressed key flags.\r\n\r\nWhenever a new key down event is processed by SDL, a [`Contains()` check](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Platform\/SDL\/SDLGamePlatform.cs#L138) is in place to prevent adding duplicates to this `Keys` list. Similarly, [`Remove()` is called](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Platform\/SDL\/SDLGamePlatform.cs#L149) in the key up event; `Remove()` internally iterates through the list to find if the value actually exists before removing it.\r\n\r\nSince all keys in this list are unique, and the order of the list does not matter, I propose this collection to be changed from a `List<Keys>` to a `HashSet<Keys>` to improve performance of the `Contains()` and `Remove()` calls from O(n) to O(1). `Contains()` can even be omitted entirely due to how HashSets work. Iterating through a `HashSet` instead of a `List` will not change the result of `KeyboardStates` created since, again, the order the flags are set does not matter.\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- Develop\r\n\r\n#### What operating system are you using:\r\n- Windows, Linux\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["Correct, however, you can optimise it even further by doing just `|=` and `&=` operations with a local KeyboardState.\r\n\r\nOn a related note, I noticed this before but kinda forgot about it during the SDL switch. Reason being is Keyboard.Default.cs takes a List as one of its params and to fix this this you'd need to go over multiple platforms fixing the same problem.","Last I remember HashSet creates a lot of garbage, would avoid it like plague in input code.","The current implementations make only some start up garbage but no deallocations. That would cause eventual collections there after. \r\n\r\nMake sure to check the de-allocations.","To maximize compatibility, what if the list remains so the keyboard can use it, and DesktopGL has a new Dictionary or something similar to check for duplicates?","We should fix all platforms at once, there's no need to keep compatibility with our current implementation. And it should use KeyboardState like Harry said, since it's optimized for representing what keys are down. It'll be faster and lighter than a HashSet. \n\nBut really this is very very very minor. I mean how many keys are in the list at most, like 5?","> But really this is very very very minor. I mean how many keys are in the list at most, like 5?\r\n\r\nMost keyboards support up to 4 simultaneous keys iirc.","Biologically at max we have 9 other fingers. A rough throwaway test (4.7) I did shows in such worst case `HashSet` is ~33% faster than `List`, and in-differentiable against an array. Note that the speed gain is only there with `int`s, with `Keys` in `HashSet` is about 3 times slower, I suspect its the boxing cost from `GetHashCode`.\r\n\r\nIn .net core where I remember reading they mitigated the enum boxing, well I couldn't get it to work properly as `HashSet` appeared to be 10times slower than a `List` so I probably messed up something.\r\n\r\nIn any case, I don't personally think this is worth changing, the difference is minuscule.","With small collections, a HashSet performs worse than a List for Contains, even though Contains is O(1) for a HashSet and O(n) for a List. This is because time complexity only measures how the computation cost scales as the collection grows. If you only have 3-10 entries, then the cost of calculating a hash is higher than the cost of just going through 3 array entries and doing a comparison, most of the time."],"labels":["Input"]},{"title":"SDL GamePad - Allow adding mappings from file","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nI have several obscure controllers that aren't yet in SDL's database, so I'm unable to use the GamePad API with them. [MonoGame loads the SDL controller database](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Platform\/Input\/GamePad.SDL.cs#L47) on startup, but there is no way to supply your own file to load in, if, for instance, the player's controller isn't supported by SDL. While I plan to submit a PR with the mappings for my controllers to SDL, the average player won't be willing to do this to play a game they bought with their favorite controller.\r\n\r\nThe idea would be to provide something like a static `GamePad.LoadMappingsFromFile(string file)` method that would call `Sdl.RwFromMem` followed by `Sdl.GameController.AddMappingFromRw` to register the new controller mappings, just like the initial database load.\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- Develop\r\n\r\n#### What operating system are you using:\r\n- Windows, Linux\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["You can just call the native Sdl method if you need to.\r\n\r\nIf you are playing your game using Steam, and you configured the controller in the Steam big picture mode, the games that are using Sdl will recognize your controller.","I tested this out using the native SDL calls and there's a caveat: if the controller is already plugged in before adding the mappings, the player will need to unplug and replug the controller [because the controller isn't recognized as a gamepad yet](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Platform\/Input\/Joystick.SDL.cs#L24). This would be required on every launch of the game.\r\n\r\nHowever, I found that the controller is picked up as a gamepad while plugged in only if the mappings are added before the first SDL event loop is fired, which means it has to be in the constructor to your game (Ex. Game1.cs). I feel there may be some room for improvement (Ex. a `ReconnectDevice` method the developer can call if a Joystick is connected but the GamePad at the same index isn't).","I'm fine with adding API to check for gamepads. \nEdit: actually would it be enough to let users specify a custom gamepad mapping file?","I'm fine with adding APIs per platforms (I know of a few I could use myself), but we need to setup an API for that. We shouldn't be just adding it to the Gamepad class, etc.","I really dislike fragmentation in the API between platforms. It forces me to write code like https:\/\/github.com\/Apostolique\/Apos.Input\/blob\/master\/Source\/InputHelper.cs#L112\r\n\r\nhttps:\/\/github.com\/Apostolique\/Apos.Input\/blob\/master\/Source\/InputHelper.cs#L166\r\n\r\n(If there's a better way to do what I did above, I'd be really interested.)\r\n\r\nIf the API is different in some platforms, I think a stub that does nothing should be provided for the other platforms.","Yes, that is why I said what I said above.","Yes, I believe all API should be shared as well. Per platform API is very bad for portability, which is supposed to be a key selling point of MG, so we don't want to compromise on it.\n\nBut in this case I think we can have a build setting to override the gamepad mapping file, so we don't have to add API that does not make sense for all platforms."],"labels":["Feature Request","Input"]},{"title":"[UWP] GamePad might produce NaN stick values","body":"Hello there :)\r\n\r\nWe recently found out that ```GamPadState.Thumbsticks``` may have ```float.NaN``` values in some circumstances.\r\n\r\nWe were unable to reproduce it locally with Xbox 360 and Xbox One controllers, but we were getting lots of report from players and could confirm that it comes from thumbsticks.\r\n\r\nMy assumption is that the aberrant values may come from non-Microsoft branded controllers, like using software such as DS4Windows to emulate XInput controllers.\r\n\r\nIt would probably cool to add some safe checks to the thumbsticks constructor to make sure that the stick values are within acceptable ranges.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- Current develop branch\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- Windows Universal\r\n","comments":["I am not sure both how or if we should fix this at all.\r\n\r\nFor how, what do we set the value if the thing sent by the UWP was something outside of its documented range. Do we try and get the last valid state and send that?\r\n\r\nAlso should we fix it on MonoGame side at all as the bug is clearly not us but the lib bellow that's causing the problem.","If we don't fix it, we should at least document it.\r\nIt is also beyond my understanding that the input API of UWP returns out of range values.","It shouldn't, the docs say it returns a value between -1f and 1f.","> It is also beyond my understanding that the input API of UWP returns out of range values.\r\n\r\nWell if that is truely where the NaNs are coming from there is not much we can do.  Even if we detect this and avoid the NaN's the controllers still won't work.\r\n\r\nWe could just add something like:\r\n```\r\nStick = new Vector2(Stick.X == Stick.X ? Stick.X : 0, Stick.Y == Stick.Y ? Stick.Y : 0);\r\n```\r\nWhich just disables the bad inputs.","> Which just disables the bad inputs.\r\n\r\nBut returning 0 as an input is still invalid. The best option would be to return last valid input.","I agree, returning the last valid input seems smoother."],"labels":["Input"]},{"title":"[XAudio2] GC causing audio glitches","body":"I have noticed that audio playback is sometimes glitching in a WindowsDX mode. It seems that GC is blocking XAudio2 thread. Which is a problem, if there is any audio playing during level loading or screen transitions when a new content is being loaded and a new objects are being created. \r\n\r\nI have narrowed the problem down to SharpDX wrapper. I have also tried the new [Vortice](https:\/\/github.com\/amerkoleci\/Vortice.Windows) wrapper, but it also glitches. Both are using [SharpGenTools](https:\/\/github.com\/SharpGenTools\/SharpGenTools) so this may be the source of the issue. I couldn't test this more as I can't get SharpGenTools to run under VS2019. I did create a simple custom wrapper that shows XAudio2 can run with managed wrapper without being affected by GC. \r\nThe source for all tests is here: https:\/\/github.com\/Jure-BB\/XAudio2_GlitchTest\r\n\r\nWhat would be the preferred way to fix this issue in MonoGame? Fixing the discontinued SharpDX or fixing and the new Vortice wrapper and replacing SharpDX in MG or creating a custom wrapper just for the specific XAudio2 features that MonoGame needs?\r\n\r\nUPDATE: This is caused because MG\/SharpDX registers for callbacks in XAudio engine. Check [this post](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/7000#issuecomment-578434940) for details. ","comments":["Where are the issues? I can fix it in my vortice project ","@amerkoleci I don't know what specifically is causing this, but you can try the test project: https:\/\/github.com\/Jure-BB\/XAudio2_GlitchTest \r\n\r\nJust change the startup project to VorticeTest and run it. After some garbage objects are initialized it will output the number of glitches that happened in XAudio2.","So it has nothing to do with vortice or sharpdx, probably net GC holding main thread busy","@amerkoleci It has to do with the way Vortice and SharpDX initialize and interact with XAudio2 engine. \r\n\r\nTry pressing H to run full blocking garbage collection in VorticeTest project and in NativeWrapperTest. In VorticeTest audio playback will be blocked during blocking GC, while in NativeWrapperTest audio playback won't be blocked. (NativeWrapperTest is a C# project)","XAudio2 engine creates it's own native thread for audio which should not be blocked by GC. However, in the case of SharpDX and Vortice it is blocked.","Open issue in my project i will try to fix it\r\n","Issue seams that by default i register callback to xaudio engine using RegisterForCallback, same with SharpDX ","I finally managed to build SharpDX from source (a single space in the project path was causing build errors). I can confirm that the issue is caused by callbacks, like @amerkoleci suggested. \r\n\r\nSharpDX registers for two callbacks with XAudio2 engine: \r\n- in [XAudio2 constructor](https:\/\/github.com\/sharpdx\/SharpDX\/blob\/ab36f12303e24aa60fe804866617716b6ded95db\/Source\/SharpDX.XAudio2\/XAudio2.cs#L153), and\r\n- when it creates a [SourceVoice](https:\/\/github.com\/sharpdx\/SharpDX\/blob\/ab36f12303e24aa60fe804866617716b6ded95db\/Source\/SharpDX.XAudio2\/SourceVoice.cs#L160).\r\n \r\nMG is making a real use of XAudio callbacks _only_ in one place. For [OnBufferEnd](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/a58c2d6fec8bd553d86ad99a8873be2800d5f1cf\/MonoGame.Framework\/Platform\/Audio\/DynamicSoundEffectInstance.XAudio.cs#L24) in DynamicSoundEffectInstance. However, MG still registers for all callbacks even, if it's not using them.","Its necessary to understand if SharpGen leaks when using callback base or if XAudio2 has this issue when registering for callback ","The audio processing thread is stalling because the client's implementation of some XAudio2 callback is doing things that can block the thread. For example, it might be accessing the disk, synchronizing with other threads, or calling other functions that may block. Use a lower-priority background thread that the callback can signal to perform such tasks.\r\n\r\nFrom here: https:\/\/docs.microsoft.com\/en-us\/windows\/win32\/xaudio2\/debugging-audio-glitches-in-xaudio2","GC probably locks access to the shared callback object or suspends the audio thread as it calls back to the managed code.","I added a XAudio2 callback test to my custom wrapper. GC is not blocking the audio thread in that test. This shows callbacks can implemented without affecting audio performance. \r\nhttps:\/\/github.com\/Jure-BB\/XAudio2_GlitchTest"],"labels":["Windows","Audio"]},{"title":"[UWP] GamePad start button recognized as a keyboard key press","body":"Hello there,\r\n\r\nOn UWP, when using an Xbox gamepad and pressing the \"start\" button, ```KeyboardState.GetPressedKeys()``` will return a key with the ```207``` code.\r\n\r\n\r\nThis is likely a ```Windows.UI.Core.CoreWindow.KeyDown``` issue from the WinRT API.\r\nI haven't looked into it any further.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- latest develop branch\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- UWP\r\n","comments":["This isn't just an issue with the start button but all of the gamepad buttons.\r\n\r\nFor demonstration purposes please see the UWPKeyboard project within here:\r\nhttps:\/\/github.com\/squarebananas\/MonoGameSamplesForIssues\r\n\r\nAccording to the VirtualKey enum documentation 195 to 218 are virtual keys mapped from the gamepad to the keyboard:\r\nhttps:\/\/docs.microsoft.com\/en-us\/uwp\/api\/windows.system.virtualkey\r\n\r\nAs most of these values are not in MonoGame's enum for Keys their values appear instead.\r\n\r\nIn the case of Dpad Up and RT these conflict with the existing ChatPadOrange and ChatPadGreen enum values as well.\r\n\r\nThe two options are probably to:\r\n1) Update the MonoGame Keys enum to allow gamepad to keyboard support for UWP only\r\nor\r\n2) Override these values to Keys.None as this behaviour is not replicated on other platforms.\r\n\r\nFor UWP the ChatPadGreen\/Orange values would need reassigning to non conflicting values for UWP keys as well (maybe use very high or negative values).","@mrhelmut just encountered this problem when when working in UWP. I would be willing to tackle this issue. Did the community have a preference on which of the two solutions to implement?\r\n\r\nIf option 1 is appealing, we could add enum values for keys 195 to 217 based on https:\/\/docs.microsoft.com\/en-us\/uwp\/api\/windows.system.virtualkey. I'm assuming for backward compatibility concerns, redefining `ChatPadGreen` and `ChatPadOrange` to be `GamepadRightTrigger` and `GamepadDPadUp` would not be palatable. Perhaps for backward compatibility, the 2 overlapping enum values (0xCA and 0xCB) could each have 2 definitions. (I'm unsure why some values in the MonoGame keys enum are hexadecimal but most are decimal)\r\n\r\n```CSharp\r\npublic enum Keys\r\n{\r\n    . . .\r\n\r\n#pragma warning disable CA1069 \/\/ Intentional duplication of enum values to maintain backward source code compatibility\r\n    GamepadRightTrigger = 0xCA\r\n    ChatPadGreen = 0xCA,\r\n\r\n    GamepadDPadUp  = 0xCB,\r\n    ChatPadOrange = 0xCB,\r\n#pragma warning restore CA1069\r\n\r\n    . . .\r\n}\r\n```\r\n\r\nIf defining 2 options for these enums is not preferred, the new uses for these 2 keys could be placed in the summary comment as below:\r\n\r\n```CSharp\r\npublic enum Keys\r\n{\r\n    . . .\r\n\r\n    \/\/\/ <summary>\r\n    \/\/\/ Green ChatPad key or GamepadRightTrigger.\r\n    \/\/\/ <\/summary>\r\n    ChatPadGreen = 0xCA,\r\n\r\n    \/\/\/ <summary>\r\n    \/\/\/ Orange ChatPad key or GamepadDPadUp.\r\n    \/\/\/ <\/summary>\r\n    ChatPadOrange = 0xCB,\r\n\r\n    . . .\r\n}","I think that the proper solution would be to filter those value out from keyboard inputs. E.g. setting them to ```Keys.None``` when they exist. I don't think that we need to add them to the enum for this (and it might be weird to have enum values that can't be triggered).\r\n\r\nThat being said, with the UWP soon being deprecated and replaced by a GDK implementation, I wouldn't put too much effort into that (though if anyone wishes to contribute such a fix, it would be welcome and merged).","I wonder how far out we are from having a GDK MonoGame template? In the meantime, I do use the UWP MonoGame implementation extensively.\r\n\r\nI poked at this issue a bit today. I think the method where filtering out virtual keyboard registers happen could be `KeyTranslate`.\r\n\r\nHowever, I ran into a snag. The Xbox TV remote uses the same virtual keyboard IDs as the GamePad. So for example, pressing DPadDown on GamePad registers Key ID 204, which is the same ID generated from pressing Down on the TV remote. However in MonoGame is the TV remote only registers as a virtual keyboard press and not as a GamePad press.\r\n\r\nSo if the virtual keys are filtered out on UWP, I think MonoGame would lose the ability to register TV remote entries on UWP as well?\r\n\r\nIt is a bit odd that the TV remote on UWP matches to the virtual keys. My Android TV remote maps to Keyboard Up, Keyboard Down, etc. and not these virtual keys.\r\n\r\nI didn't keep searching to determine if there was a way to determine if the input source was a GamePad or TV Remote to look at either rerouting the TV remote more properly or only filtering out virtual keyboard presses from the GamePad. Without this, I would hesitate to filter out as it TV Remote commands would be lost on UWP builds.\r\n\r\nTested with an PDP Universal Gaming Remote (https:\/\/www.amazon.com\/gp\/product\/B08FCVG5DX), which I don't recommend if you are going to buy a remote (sensor range is limited and buttons are sticky).\r\n\r\n**Method where maybe the filtering could happen**\r\n```CSharp\r\ninternal static Keys KeyTranslate(Windows.System.VirtualKey inkey, CorePhysicalKeyStatus keyStatus)\r\n{\r\n    switch (inkey)\r\n    {\r\n        \/\/ WinRT does not distinguish between left\/right keys\r\n        \/\/ We have to check for special keys such as control\/shift\/alt\/ etc\r\n        case Windows.System.VirtualKey.Control:\r\n            \/\/ we can detect right Control by checking the IsExtendedKey value.\r\n            return (keyStatus.IsExtendedKey) ? Keys.RightControl : Keys.LeftControl;\r\n        case Windows.System.VirtualKey.Shift:\r\n            \/\/ we can detect right shift by checking the scancode value.\r\n            \/\/ left shift is 0x2A, right shift is 0x36. IsExtendedKey is always false.\r\n            return (keyStatus.ScanCode == 0x36) ? Keys.RightShift : Keys.LeftShift;\r\n        \/\/ Note that the Alt key is now referred to as Menu.\r\n        \/\/ ALT key doesn't get fired by KeyUp\/KeyDown events.\r\n        \/\/ One solution could be to check CoreWindow.GetKeyState(...) on every tick.\r\n        case Windows.System.VirtualKey.Menu:\r\n            return Keys.LeftAlt;\r\n\r\n        default:\r\n            return (Keys)inkey;\r\n    }\r\n}\r\n```"],"labels":["Windows 10 UWP","Input"]},{"title":"Color VertexElement on TextureCoordinate vertex attribute not mapped to 0..1 on DesktopGL","body":"On DesktopGL using VertexElementFormat.Color on a VertexElementUsage.TextureCoordinate vertex attribute does not normalize the bytes to the 0..1 range when accessed in the shader.\r\n\r\nThis is not inline with the behaviour on the WindowsDX target and the documentation\r\n\r\nhttps:\/\/docs.microsoft.com\/en-us\/previous-versions\/windows\/silverlight\/dotnet-windows-silverlight\/bb199731(v%3Dxnagamestudio.35)\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- git master\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n- Linux\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n","comments":["Thanks for the bug report!\r\n\r\nLooks like the value is normalized if the *usage* is set to Color rather than the format. \r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/68e4e899069dc970b2ba8a546f5dfa19e6735019\/MonoGame.Framework\/Graphics\/GraphicsExtensions.cs#L157-L158\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/68e4e899069dc970b2ba8a546f5dfa19e6735019\/MonoGame.Framework\/Graphics\/GraphicsExtensions.cs#L167-L168"],"labels":["OpenGL"]},{"title":"Modernisation of 2MGFX","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nResearching the state of the art of cross-compilation of HLSL shaders to other languages, I saw that the [Microsoft DirectX Shader Compiler](https:\/\/github.com\/Microsoft\/DirectXShaderCompiler) is now open source and can be run from non-Windows platforms, and that, in addition to DXIL, it can also emit SPIR-V, which can be cross compiled to GLSL, ESSL and possibly the console-specific shader languages (or rather kept as SPIR-V for those, since every platform that supports Vulkan supports SPIR-V). This sparked in me a possibility of modernisation of the shader compiler tool to be able to target higher shader models (in a preparation of MonoGame to modern shader and GPU features), as well as finally turning it cross-platform.\r\n\r\nI do not have a clear\/fixed roadmap for it, but I figure out that the required steps for it would be:\r\n\r\n1. Figure out how to reference ~~fxc~~ dxc in a cross-platform way, since it\u2019s a native tool, not a .NET tool.\r\n2. Figure out how to use [SPIRV-Cross](https:\/\/github.com\/KhronosGroup\/SPIRV-Cross) to emit GLSL for the OpenGL platforms.\r\n3. Rewrite the 2MGFX tool to use both, emitting DXIL for the DX platforms, GLSL\/ESSL for the OpenGL\/ES platforms, MSL for a possible iOS renderer, and SPIR-V for console\/Vulkan-enabled platforms?\r\n \r\nEDIT: starting with Shader Model 5.0, the effect concept used by previous shader models is deprecated, so it might be useful to add a way to attach shaders to the render state using the new way as well? (Effects are supported by SM4.0 though)\r\nIn a way, OpenGL from 4.? onwards can also use separable programs, so their APIs remain somewhat compatible.\r\n","comments":["Yes, the plan with regards to shader compilation has been since the DX Shader Compiler has been made public to use it in combination with SPIRV-Cross to reach all targets, however no meaningful work has been done in this area (AFAIK). For the Effects Framework stuff we want to use [HlslTools](https:\/\/github.com\/tgjones\/HlslTools) to parse and strip the Effects metadata from the fx files before passing them to the compiler pipeline.\r\n\r\n> Figure out how to reference fxc in a cross-platform way, since it\u2019s a native tool, not a .NET tool.\r\n\r\nWhy? We don't need fxc with the suggested pipeline. If you do need to run it, it works on Wine.\r\n\r\n> so it might be useful to add a way to attach shaders to the render state using the new way as well\r\n\r\nYou mean attaching individual shaders rather than a full pipeline? A lower level shader API has come up several times over the years and it's definitely something I'd like MG to have. See e.g. #3471.","@Jjagg I'll pick up to work on the 2MGFX thing first, *then* I'll think a way to make MonoGame profit from the new API features. I was in look mainly for read\/write objects, structured buffers and UAVs, but having subroutines (whatever they're called in DX) and other things will be nice.","The idea about attaching individual stages can be used in complement to the Effect API, making, for example Effects usable with SM 4.0 and 5.0, and having they attach geometry\/tesselation shaders, as well as specifying they want to stream-out, instead of letting them keep rendering, and other things more.","> Why? We don't need fxc with the suggested pipeline. If you do need to run it, it works on Wine.\r\n\r\nOops, my bad, I wanted to say dxc.",">     2\\. Figure out how to use [SPIRV-Cross](https:\/\/github.com\/KhronosGroup\/SPIRV-Cross) to emit GLSL for the OpenGL platforms.\r\n\r\nAlthough it's not very active lately, check this project: https:\/\/github.com\/microsoft\/ShaderConductor  ","> \r\n> \r\n>\r\n> > 2\\. Figure out how to use [SPIRV-Cross](https:\/\/github.com\/KhronosGroup\/SPIRV-Cross) to emit GLSL for the OpenGL platforms.\r\n>\r\n> \r\n> Although it's not very active lately, check this project: https:\/\/github.com\/microsoft\/ShaderConductor\r\n\r\nYes, I picked up the idea of interfacing DXC with SPIRV-Cross exactly from there. I found a small problem in the DXC though:\r\n> dxc.exe, a command-line tool that can compile HLSL programs *for shader model 6.0 or higher*\r\n\r\nMaybe I have read wrong, but DXC cannot be used to build shaders on older shader models.","The only syntax that's no longer supported is some of the SM1.0 syntax (e.g. the tex2d intrinsic). Other than that it's backwards compatible.\nMoving forward we intend to remove or deprecate the old syntax by parsing the old syntax with HlslTools and throwing errors or raising warnings and replacing syntax where possible (though I would personally prefer just throwing errors). ","Oh, and SPIRV-CROSS can compile to older HLSL Shader Models.","For the runtime parts of the Effects API in MonoGame we need the metadata of the shaders like uniform and entry point names. We could parse it with HlslTools, but due to constraints on the target some names might change (e.g. old OpenGL versions don't separate textures and samplers), so we need the reflection data from SPIRV-Cross and DXC.","> The only syntax that's no longer supported is some of the SM1.0 syntax (e.g. the tex2d intrinsic). Other than that it's backwards compatible.\r\n\r\nSo I can compile SM4 and SM5 using DXC? Interesting; but still, I guess dxc itself cannot compile it, I might have to try to compile it myself.\r\nAnyway, since SM4 and SM5 don't use the effect concept, it might be better to create another tool that would handle those separately.\r\n\r\nOn a side note, I could also try to add support for structured buffers\/arbitrary constant buffers as well, since \"raw parameters\" aren't used in SM4\/5.","> For the runtime parts of the Effects API in MonoGame we need the metadata of the shaders like uniform and entry point names.\r\n\r\nThe idea I was discussing on Discord was to `fxc` the shader files in WindowsDX and then use glslang\/DXC plus SPIRV-Cross for the OpenGL\/Vulkan\/Metal\/PS4 platforms, so that we can leverage Windows native tools where they are available (might be useful to, for example, use Visual Studio's own graphics debugger).","I don't follow, why'd you need fxc for that?","Because I haven't found anyway that dxc could be used to compile for shader models lower than 6.","> SPIRV-Cross can compile to older HLSL Shader Models.\n\nSo we can use the same pipeline for all targets.","Since we\u2019re talking about modernising the shader tools, I guess I could drop this here too: https:\/\/github.com\/mellinoe\/ShaderGen","I wouldn't support ShaderGen officially, but if the pipeline works as intended it'd be possible to generate the HLSL shader with ShaderGen and feed that to our pipeline."],"labels":["MGFX"]},{"title":"Runtime exception \"Shader Compilation Failed\" on Android","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nI am successfully using a shader on Windows and now trying to port it to Android.\r\n\r\nThe shader compiles just fine via the content pipeline for Android.\r\n\r\nHowever, it fails with the following exception at runtime on Android:\r\n\r\n> System.InvalidOperationException: Shader Compilation Failed occurred\r\n\r\nThe HLSL version of the shader is:\r\n```\r\n\/\/ ClearGBuffer.fx\r\n#if OPENGL\r\n\t#define SV_POSITION POSITION\r\n\t#define VS_SHADERMODEL vs_3_0\r\n\t#define PS_SHADERMODEL ps_3_0\r\n#else\r\n\t#define VS_SHADERMODEL vs_4_0_level_9_1\r\n\t#define PS_SHADERMODEL ps_4_0_level_9_1\r\n#endif\r\n\r\nstruct VertexShaderInput\r\n{\r\n    float3 Position : POSITION0;\r\n};\r\n\r\nstruct VertexShaderOutput\r\n{\r\n    float4 Position : POSITION0;\r\n};\r\n\r\nVertexShaderOutput VertexShaderFunction(VertexShaderInput input)\r\n{\r\n    VertexShaderOutput output;\r\n    output.Position = float4(input.Position, 1);\r\n    return output;\r\n}\r\nstruct PixelShaderOutput\r\n{\r\n    float4 Color  : COLOR0;\r\n    float4 Normal : COLOR1;\r\n    float4 Depth  : COLOR2;\r\n};\r\n\r\nPixelShaderOutput PixelShaderFunction(VertexShaderOutput input)\r\n{\r\n    PixelShaderOutput output;\r\n\r\n    \/\/black color\r\n    output.Color.rgb = 0.0f;\r\n    output.Color.a = 0.0f;\r\n    \r\n    \/\/when transforming 0.5f into [-1,1], we will get 0.0f\r\n    output.Normal.rgb = 0.5f;\r\n    \/\/no specular power\r\n    output.Normal.a = 0.0f;\r\n\r\n    \/\/max depth\r\n    output.Depth = 1.0f;\r\n\r\n    return output;\r\n}\r\n\r\ntechnique Technique1\r\n{\r\n    pass Pass1\r\n    {\r\n        VertexShader = compile VS_SHADERMODEL VertexShaderFunction();\r\n        PixelShader  = compile PS_SHADERMODEL PixelShaderFunction();\r\n    }\r\n}\r\n```\r\n\r\nThe GLSL created by the content pipeline is:\r\n```\r\n#ifdef GL_ES\r\nprecision mediump float;\r\nprecision mediump int;\r\n#endif\r\n\r\nconst vec4 ps_c0 = vec4(0.0, 0.5, 1.0, 0.0);\r\n#define ps_oC0 gl_FragData[0]\r\n#define ps_oC1 gl_FragData[1]\r\n#define ps_oC2 gl_FragData[2]\r\n\r\nvoid main()\r\n{\r\n\tps_oC0 = ps_c0.xxxx;\r\n\tps_oC1 = ps_c0.yyyx;\r\n\tps_oC2 = ps_c0.zzzz;\r\n}\r\n\r\n#ifdef GL_ES\r\nprecision highp float;\r\nprecision mediump int;\r\n#endif\r\n\r\nuniform vec4 posFixup;\r\nconst vec4 vs_c0 = vec4(1.0, 0.0, 0.0, 0.0);\r\nattribute vec4 vs_v0;\r\n#define vs_o0 gl_Position\r\n\r\nvoid main()\r\n{\r\n\tvs_o0 = (vs_v0.xyzx * vs_c0.xxxy) + vs_c0.yyyx;\r\n\tgl_Position.y = gl_Position.y * posFixup.y;\r\n\tgl_Position.xy += posFixup.zw * gl_Position.ww;\r\n\tgl_Position.z = gl_Position.z * 2.0 - gl_Position.w;\r\n}\r\n```\r\n\r\nIs there any workaround?\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.1\r\n\r\n#### What operating system are you using:\r\n- Windows (2mgfx), MacOS (visual studio for mac)\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- Android\r\n","comments":["Run this in debug mode against an emulator. I had this exact same error and found this in the Output window of VS:\r\n\"ERROR: 0:241: '<' :  wrong operand types  no operation '<' exists that takes a left-hand operand of type 'mediump int' and a right operand of type 'mediump float' (or there is no acceptable conversion)\"\r\n\r\nEven though this same code worked in the windows version. Wish there was a program I could test to see which line of code this is, though,"],"labels":["OpenGL"]},{"title":"2 keyboard keys not working us keyboard.","body":"win 10 desktop GL nightly from a coulple days ago.\r\n\r\nWhen using the **Keyboard class** two keys are not detected when pressed.\r\nI don't know if this affects text input.\r\n\r\nThe keys \r\n\r\n5 number pad\r\n\r\nand print screen.\r\n\r\nWhile print screen is not a big deal the 5 number pad kinda is annoying.\r\n\r\n\r\n\r\n![missingkeys](https:\/\/user-images.githubusercontent.com\/7495196\/67627531-ed4c6600-f82b-11e9-8d83-c73afe27d4d3.png)\r\n","comments":["Could not repro the numpad 5 key.","Well that makes it even weirder, because numpad 5 is in my keys enums so is print screen.\r\nI can't claim a hardware problem because both the keys on my keyboard actually work.\r\n\r\nAny ideas ?\r\n\r\nInfo i wanted to share.\r\nWith all this key testing stuff i found out spritebatch bleeds small amounts of garbage when you dump more and more characters on it slowly.  Arg spent hours and hour debuging everything else before i narrowed it down. \r\n\r\nits not a bug it make sense resized arrays for batches. It can seriously throw you off the trail when hunting deallocations though."],"labels":["Needs Testing","Input"]},{"title":"Pipeline Tool crashes if you add Content.mcgb fitself as a resource.","body":"### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8 latest dev build\r\n\r\n#### What operating system are you using:\r\n- Windows 10 64x\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n\r\nIf you add Content.mgcb as a resource, e.g:\r\n```\r\n#begin Content.mgcb\r\n\/importer:AssetInfoImporter\r\n\/processor:PassThroughProcessor\r\n\/build:Content.mgcb\r\n```\r\nthen close Pipeline Tool and then will try to open the content file again, pipeline tool will fail to open it and say that unknown error has occured.\r\n\r\nIf you try to build project with that content file, the build will fail and the output will show this:\r\n```\r\nUnhandled Exception: System.NotSupportedException: The given path's format is not supported.\r\n2>     at System.Security.Permissions.FileIOPermission.EmulateFileIOPermissionChecks(String fullPath)\r\n2>     at System.Security.Permissions.FileIOPermission.QuickDemand(FileIOPermissionAccess access, String fullPath, Boolean checkForDuplicates, Boolean needFullPath)\r\n2>     at MGCB.MGBuildParser.ParsePreprocessArg(String arg, List`1 output, Stack`1 ifstack, Boolean inResponseFile)\r\n2>     at MGCB.MGBuildParser.ParsePreprocessArg(String arg, List`1 output, Stack`1 ifstack, Boolean inResponseFile)\r\n2>     at MGCB.MGBuildParser.Preprocess(IEnumerable`1 args)\r\n2>     at MGCB.MGBuildParser.Parse(IEnumerable`1 args)\r\n2>     at MGCB.Program.Main(String[] args)\r\n```\r\n\r\nThe same setup works correctly on MG 3.7.1.\r\n\r\n","comments":[],"labels":["MGCB Editor"]},{"title":"windx video player problem.","body":"All but one old video from my old video player project will play at all.\r\n\r\nI made some new vids and have been trying to format them thru ffmpeg to get them to play and zero luck. Been going at it since yesterday and still can generate a single working mp4 just the one old one works. I wondering if something got changed recently ?\r\n\r\nCan anyone confirm that the video player is messed up.\r\nboth h264 (which is what im primarily trying to get to work) \r\n\r\n> and wmv also wont work for me.\r\n\r\n**Edit** \r\nwmv will work got nearly all of them to work see the below post.\r\nbut mp4's converted via ffmpeg specifically targeting the h264 codec i unfortunately simply couldn't get to work unless there is something im missing.\r\n\r\nYou can see the settings that do work for the single video here.\r\nHowever i can't reproduce the commands in another video with ffmpeg to emulate it.\r\nhttp:\/\/community.monogame.net\/t\/video-player-on-dx-hosed\/11932\r\n\r\n\r\nnightly build from a couple days ago.\r\nwin 10 \r\ndx desktop project.","comments":[],"labels":["Video"]},{"title":"Making the Content Pipeline more extensible","body":"This is not an issue, but something I would like to look at doing with the content pipeline. Having had a look at the code for the content pipeline, I think it would be advantageous for it to be a little more open in how it is put together.\r\n\r\nThat is to say (and I know it's from the XNA base) there are a lot of private properties or fields in there, lost of methods that could be virtual, and so making writing your own content pipeline classes a lot easier.\r\n\r\nSo, sealed classes like ModelContent and the class NodeContent & OpenAssetImporter, making their private elements protected so we could derive from them and extend as we need. Making all their methods virtual and so we can override them too.\r\n\r\nMy line of thought comes from [this ](http:\/\/community.monogame.net\/t\/can-i-add-geometry-to-a-mesh-in-a-content-processor\/11880\/3)community thread, and also my own experience of creating pipeline components in the past, originally with XNA, and now with MG.\r\n\r\nMaybe there is good reason why it is how it is, and if so, then that's fine, ill just leave it alone, and work with it as is, but if you think it's a good idea, then I don't mind taking a fork and giving it a go :)\r\n\r\nForgive me if this is not the place to raise this sort of stuff, please delete\/move as required :)\r\n","comments":["The content pipeline classes could definitely be opened up a little. If you or anyone else reading this has suggestions for what to make public, post it here and we can discuss on a case by case basis :)","Maybe start with OpenAssetImporter, be good if ImportNodes was not private, but protected and virtual. We could then derive from it, and in the case of the community post I mentioned in my OP, we could inject extra mesh data as required from there. Actually the more I dig there the more I want to open up, same with CreateGeometry :D \r\n\r\nPretty much, anything that is private should be protected, and all methods should be virtual :) ","I actually just use the nuget open asset importer and put it into my game since i made my own loader and model class so i can have animations. Its kind of ironic that monogame already has it but its so locked up i need to download the nuget. At which point makes me wonder... why ?\r\n\r\nWhats even more ironic is i tried to get the animated models to work in monogame and for the life of me couldn't figure out how to do it i couldn't even gain access to the needed stuff. Though in xna it seemed pretty easy."],"labels":["ContentPipeline","Design"]},{"title":"OpenGL - FatalExecutionEngineError on GraphicsDevice.DrawInstancedPrimitives()","body":"I am porting a DirectX monogame game to DesktopGL. I use hardware instancing to draw thousands of blocks (like minecraft)\r\n\r\nThis works fine in DirectX, but on DesktopGL this line crashes showing the following error\r\n\r\n> GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, meshPart.StartIndex, meshPart.PrimitiveCount, this.CountForBT[i]);\r\n> Managed Debugging Assistant 'FatalExecutionEngineError' Message=Managed Debugging Assistant 'FatalExecutionEngineError' : 'The runtime has encountered a fatal error. The address of the error was at 0x34fbe02b, on thread 0x2ac4. The error code is 0xc0000005. This error may be a bug in the CLR or in the unsafe or non-verifiable portions of user code. Common sources of this bug include user marshaling errors for COM-interop or PInvoke, which may corrupt the stack.'\r\n\r\nFull void :\r\n```\r\n\r\nprivate void DrawBlocksFromArrays()\r\n    {\r\n        int i = 1;\r\n\r\n        int view, proj, sun, cam, sunDir;\r\n        if (Main.platform == Main.Platform.DirectX)\r\n        {\r\n            view = 0; proj = 1; sun = 2; cam = 3; sunDir = 4;\r\n        }\r\n        else\r\n        {\r\n            \/\/This is just because OpenGL shader compiler changes the order of vars in HLSL\r\n            view = 1; proj = 2; sun = 3; cam = 4; sunDir = 0;\r\n        }\r\n\r\n\r\n        do\r\n        {\r\n            BlockType BT = BlockType.BTList[i];\r\n            int InstancesCount = this.CountForBT[i];\r\n            bool flag = InstancesCount != 0;\r\n            if (flag)\r\n            {\r\n                Vector4[] BlockInstances = this.ArraysForBT[i];\r\n                DynamicVertexBuffer instanceVertexBuffer = this.IVBsForBT[i];\r\n                instanceVertexBuffer.SetData<Vector4>(BlockInstances, 0, this.CountForBT[i], SetDataOptions.Discard);\r\n                VertexBufferBinding[] MeshVertexBufferBinding = new VertexBufferBinding[]\r\n                {\r\n                        default,\r\n                        new VertexBufferBinding(instanceVertexBuffer, 0, 1)\r\n                };\r\n\r\n                foreach (ModelMeshPart meshPart in BT.Mesh.MeshParts)\r\n                {\r\n                    MeshVertexBufferBinding[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);\r\n                    base.GraphicsDevice.SetVertexBuffers(MeshVertexBufferBinding);\r\n                    base.GraphicsDevice.Indices = meshPart.IndexBuffer;\r\n                    Effect effect = meshPart.Effect;\r\n\r\n                    effect.Parameters[view].SetValue(Main.viewMatrix);\r\n                    effect.Parameters[proj].SetValue(Main.projectionMatrix);\r\n                    effect.Parameters[sun].SetValue(Main.SunLightIntencity);\r\n                    effect.Parameters[cam].SetValue(Main.cameraPosition);\r\n                    effect.Parameters[sunDir].SetValue(Main.SunlightDirection);\r\n\r\n\r\n                    foreach (EffectPass pass in effect.CurrentTechnique.Passes)\r\n                    {\r\n                        pass.Apply();\r\n                         \/\/ ---- Crash at this Line --- \/\/\r\n                        base.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, meshPart.StartIndex, meshPart.PrimitiveCount, this.CountForBT[i]);\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n            i++;\r\n        }\r\n        while (i <= 10);\r\n\r\n    }\r\n```\r\nHLSL shader :\r\n```\r\n\r\n#if OPENGL\r\n#define SV_POSITION POSITION\r\n#define VS_SHADERMODEL vs_3_0\r\n#define PS_SHADERMODEL ps_3_0\r\n#else\r\n#define SV_POSITION POSITION0\r\n#define VS_SHADERMODEL vs_4_0_level_9_1\r\n#define PS_SHADERMODEL ps_4_0_level_9_1\r\n#endif\r\n\r\n\/\/DX\r\n\r\n\/\/ Camera settings.\r\n\/\/matrix World;\r\nmatrix View;\r\nmatrix Projection;\r\nfloat DiffuseLight = 1.0;\r\nfloat3 CamPos = float3(0, 0, 1);\r\nfloat3 LightDir = float3(0, -1, 0);\r\n\r\n\r\n\r\nfloat ShadeX = 0.8;\r\nfloat ShadeY = 1.0;\r\nfloat ShadeZ = 0.6;\r\n\r\nfloat4 IMC1 = float4(1, 0, 0, 0);\r\nfloat4 IMC2 = float4(0, 1, 0, 0);\r\nfloat4 IMC3 = float4(0, 0, 1, 0);\r\n\r\n\r\n\r\nsampler Sampler = sampler_state\r\n{\r\n    Texture = (Texture);\r\n};\r\n\r\n\r\nstruct VertexShaderInput\r\n{\r\n    float4 Position : SV_POSITION;\r\n    float3 Normal : NORMAL0;\r\n    float2 TextureCoordinate : TEXCOORD0;\r\n};\r\n\r\n\r\nstruct VertexShaderOutput\r\n{\r\n    float4 Position : SV_POSITION;\r\n    float3 Color : COLOR0;\r\n    float2 TextureCoordinate : TEXCOORD0;\r\n    float3 Normal : NORMAL0;\r\n    float3 CamDir : NORMAL1;\r\n\r\n};\r\n\r\n\r\nVertexShaderOutput MainVS(in VertexShaderInput input, float4 instancePos:BLENDWEIGHT0)\r\n{\r\n    VertexShaderOutput output = ( VertexShaderOutput) 0;\r\n\r\n\r\n    matrix instanceTransform = matrix(IMC1, IMC2, IMC3, instancePos);\r\n\r\n    float4 worldPosition = mul(input.Position, instanceTransform);\r\n    float4 viewPosition = mul(worldPosition, View);\r\n    output.Position = mul(viewPosition, Projection);\r\n\r\n    float diffuseAmount = (abs(input.Normal.x) * ShadeX) + (abs(input.Normal.y) * ShadeY) + (abs(input.Normal.z) * ShadeZ);\r\n\r\n\r\n\r\n    output.Color = saturate(diffuseAmount) * DiffuseLight;\r\n\r\n    output.Normal = input.Normal;\r\n    output.CamDir = normalize(input.Position.xyz - CamPos);\r\n\r\n\r\n    output.TextureCoordinate = input.TextureCoordinate;\r\n\r\n    return output;\r\n}\r\n\r\n\r\n\r\nfloat4 MainPS(VertexShaderOutput input) : COLOR\r\n{\r\n\r\n\r\n    float4 pix = tex2D(Sampler, input.TextureCoordinate);\r\n    \/\/float4 pix = float4(1, 1, 1,1);\r\n\r\n    float i = (dot(LightDir, input.Normal));\r\n    float r = (dot(input.CamDir, input.Normal));\r\n    float theta = clamp(1 - abs(i - r), 0, 0.8) * 0.4;\r\n\r\n    float spec = pow(theta, 2);\r\n\r\n    return  float4(pix.x * input.Color.x + spec, pix.y * input.Color.y + spec, pix.z * input.Color.z + spec, pix.w);\r\n\r\n\r\n}\r\n\r\n\r\n\/\/ Hardware instancing technique.\r\ntechnique HardwareInstancing\r\n{\r\n    pass Pass1\r\n    {\r\n        VertexShader = compile VS_SHADERMODEL MainVS();\r\n        PixelShader = compile PS_SHADERMODEL MainPS();\r\n    }\r\n}\r\n```\r\nGame.cs @ https:\/\/github.com\/HasinduLanka\/BlockEngine\/blob\/master\/BlockEngine.core\/Game1.cs\r\n\r\nFull source @ https:\/\/github.com\/HasinduLanka\/BlockEngine","comments":["I wish someone would respond to this. I'm getting the same error, although I'm still a newbie and don't have much experience with shaders yet.","It seems that what you want is to draw 10 BTs out of 11 total?","Did you ever solve the problem? I've been having the same thing happen, stuck on it for a few days now and can't seem to make any progress. From what I've been able to read up on, I thought maybe it had something to do with the compiler optimizations and only using 3x3 of a 4x4 matrix, but I your shader doesn't seem to be doing that anyway, so now I'm thinking it must be something else."],"labels":["OpenGL"]},{"title":"Texture3D not loaded by the Content pipeline","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nWhile porting some of my old XNA archives to MG, I have noticed that Texture3D assets do not seem to be imported as Texture3D.... \r\n\r\nI have worked around this for now by making a load of 2D textures, loading them in one at time then putting them all in a Txture3D.\r\n\r\nI mentioned it on the community [form](http:\/\/community.monogame.net\/t\/can-monogame-import-a-3d-texture\/11867), and was suggested to raise it here :) \r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\nNot sure, what ever the default is...\r\n- DesktopGL\r\n","comments":[],"labels":["ContentPipeline"]},{"title":"Better imaging API","body":"I'm working on a pretty simple imaging library for MonoGame that uses slightly optimized StbSharp libraries for reading\/writing\/resizing images.\r\nRuntime font rendering is also planned by using StbTrueTypeSharp.\r\n*Inspiration for the API comes from SixLabors's ImageSharp.*\r\n\r\n(I don't know how smart it is to use a heavily modified fork of StbSharp, the performance improvements and features were too great to give up on for my project at least, but the original StbSharp can be used for this imaging library with some minor tweaks).\r\n\r\nThe current API already has some nice features:\r\n\r\n* Progress reporting supplied with the currently processed frame, giving you access to decoded pixels in real-time and cancellation through `CancellationToken`.\r\n\r\n* Image formats are trivial to add and the built-in codecs can be overwritten by user-defined ones. Both custom formats and codecs can be added at **runtime** (e.g. you could use `Android` or `Windows Imaging Component` codecs which may be better than the built-in ones).\r\n```csharp\r\nvar customFormat = new ImageFormat(\r\n    name: \"The Foo Format\",\r\n    primaryMimeType: \"image\/foo\",\r\n    primaryExtension: \".foo\",\r\n    supportsAnimation: false,\r\n    associatedMimeTypes: new HashSet<string>(\"image\/foo\"),\r\n    associatedExtensions: new HashSet<string>(\".foo\")\r\n);\r\nImageFormat.AddFormat(customFormat);\r\n\r\n\/\/ Both IImageEncoder and IImageDecoder are interfaces that derive from IImageCoder.\r\nImage.AddEncoder(customFormat, new IImageEncoder()); \/\/ insert custom encoder instance here\r\nImage.AddDecoder(customFormat, new IImageDecoder()); \/\/ insert custom decoder instance here\r\n```\r\n\r\n* The API is easy to use:\r\n```csharp\r\nFrameCollection<Color> framesFromStream = Image<Color>.LoadFrames(stream);\r\n\r\nvar colorData = new Color[20 * 20];\r\nvar sourceRect = new Rectangle(5, 5, 10, 10);\r\nImage<Color> imageFromPixels = Image<Color>.LoadPixels(colorData, sourceRect);\r\n```\r\nWhere `Color` can be replaced by any type that implements the `IPixel` interface (currently implemented on all of the packed vector types courtesy of ImageSharp code).\r\n\r\n* Simple API for image manipulation\/processing:\r\n```csharp\r\nimage.Mutate(x => x.Crop(x, y, width, height));\r\nimage.Mutate(x => x.Resize(width, height));\r\n```\r\n*I don't really plan on creating\/implementing more than `Crop` and `Resize`, maybe some color stuff like `Sepia` or `Grayscale` and maybe some kind of simple `Blur`.*\r\n\r\nIt can not be merged with the develop branch though as the library is using C#7, .Net472 and the System.Memory package. I thought about .Net5 and if MonoGame actually was .Net5 compatible, I would be able to turn this imaging library into a pull-request.\r\nA pull-request would theoretically be possible as soon as MonoGame supported C#7 (and C#7 support is supposedly in the works).\r\n\r\nI suppose that this addition slightly future-proofs the imaging part of MonoGame. \r\nComments and suggestions about this would be great.","comments":["This library would be a seperate project. If #6879 goes through, this library could even be used in projects that only use the MonoGame.Framework.Core library, not needing platform-specific versions.","I would suggest to look into binomial basis...","> I would suggest to look into binomial basis...\r\n\r\nI'm not exactly sure what you mean\/what I'm supposed to do... ;\/\r\n","> > I would suggest to look into binomial basis...\r\n> \r\n> I'm not exactly sure what you mean\/what I'm supposed to do... ;\/\r\n\r\nIt's a new texture format optimized for GPU","Ok the Github repository looks promising, but this issue is mostly about improving what we got, not really adding new stuff together and a better API. :wink:","As a maintainer of StbSharp I would like to share my opinion.\r\nGenerally I think it's great idea to make new pure C# imaging library, based on StbSharp code.\r\nIt might become quite popular, taking into account that ImageSharp is going to switch to nonpermissive licenses: https:\/\/www.reddit.com\/r\/csharp\/comments\/ajsbzx\/imagesharp_are_switching_to_nonpermissive_licenses\/\r\n\r\nI would like to suggest following:\r\n* Split gargantuan StbImage.Generated.cs(and correspondenly StbImageWrite.Generated.cs) into smaller files. One file for each image format (i.e. StbImage.Jpeg.cs, StbImage.Png.cs, etc).\r\n* Copy comments from original stb_image.h to the cs. This is very boring task, however it would raise the value of the library. As I know some devs refuse to use StbImageSharp, because they afraid of how naked generated code looks. Unfortunately I dont see a way to transfer comments automatically.\r\n* Make the code safe. That is the hardest and the longest task. It requires carefully replacing all unsafe pointer staff with safe one. However it would also significally raise the library value. As firstly it'll make its code look less scary. Secondly it'll allow the library to be used in environments where only safe code is allowed (i.e. Web).\r\n","Awesome to see some opinions from you.\r\nAnd yes, the reasoning behind this \"MonoGame.Imaging\" library's creation was that ImageSharp was changing their licensing model (I used ImageSharp before and liked the API).\r\n\r\n1. I've already split up `StbImageWrite.Generated` into 11 files and will split `StbImage.Generated` soon. This yields better readability and way better IntelliSense performance and feature set (some features are apparently disabled on large files).\r\n\r\n2. Most functions will utilize a `CancellationToken`. I chose to add this because .NET Core doesn't and **won't** have `Thread.Abort` for the foreseeable future. A `CancellationToken` is also trivial to implement\/use.\r\n\r\n3. Most functions report progress. This is probably something that will rarely be used but I really like progress bars \ud83d\ude04. \r\nI've also glanced over the PNG encoder and decoder and I thought about rewriting them so they write the file progressively instead of buffering all the data in memory and then writing\/reading it in one chunk. Improving this will make the library slightly more mobile-friendly (and progress reporting and cancellation will be slightly more accurate).\r\n\r\n4. I did look at `stb_image.h` and judging by the amount of documentation, I may write some \"smart\" converter (maybe I'll try to use Sichem for the token extraction) so I don't manually have to copy-paste everything.\r\n\r\n5. I cut out zlib (from both Image and ImageWrite) because .NET's `DeflateStream` uses zlib internally. Only a header and footer was needed to make it a valid deflate stream for PNG. Using `DeflateStream` was a ++ scenario; we get a relatively up-to-date zlib which gives better performance and compression ratios *and* we get smaller result binaries. The zlib implementation can even be changed with a simple delegate field.\r\n```csharp\r\n\/\/\/ <summary>\r\n\/\/\/ Delegate for a zlib deflate (RFC 1951) compression implementation.\r\n\/\/\/ <\/summary>\r\npublic delegate IMemoryResult DeflateCompressDelegate(\r\n    ReadOnlySpan<byte> data, CompressionLevel level,\r\n    CancellationToken cancellation, WriteProgressCallback onProgress);\r\n\r\n\/\/\/ <summary>\r\n\/\/\/ Custom zlib deflate (RFC 1951) compression implementation\r\n\/\/\/ that replaces the default <see cref=\"DeflateCompress\"\/>.\r\n\/\/\/ <\/summary>\r\npublic static DeflateCompressDelegate CustomDeflateCompress;\r\n```\r\n*This API is for writing. There is also one for decompression. \r\nIt will change when I get around to rewriting PNG encoding\/decoding.*\r\n\r\n6. I've wrote some safe code using `Span<T>` for various tasks such as IO and other API that didn't use intense pointer magic :smiley:. \r\n```csharp\r\npublic delegate int WriteCallback(in WriteContext context, ReadOnlySpan<byte> data);\r\n\r\npublic static int DefaultWrite(in WriteContext context, ReadOnlySpan<byte> data)\r\n{\r\n    if (data.IsEmpty)\r\n        return 0;\r\n\r\n    byte[] buffer = context.WriteBuffer;\r\n    int left = data.Length;\r\n    int offset = 0;\r\n    while (left > 0)\r\n    {\r\n        int sliceLength = Math.Min(left, buffer.Length);\r\n        for (int i = 0; i < sliceLength; i++)\r\n            buffer[i] = data[i + offset];\r\n        context.Output.Write(buffer, 0, sliceLength);\r\n\r\n        left -= sliceLength;\r\n        offset += sliceLength;\r\n    }\r\n    return data.Length;\r\n}\r\n```\r\n\r\n7. The pixels are actually not supplied by pointers in my StbImage\/ImageWrite forks. I've created a special delegate gimmick for that purpose instead. \r\n```csharp\r\npublic delegate void ReadBytePixelsCallback(Span<byte> destination, int dataOffset);\r\npublic delegate void ReadFloatPixelsCallback(Span<float> destination, int dataOffset);\r\n```\r\nFormats that support +16-bit quality read floats, other formats read bytes. The performance penalty is minimal and the most important part of this is the possibility of on-the-fly format conversion.\r\n*Code that `MonoGame.Imaging` is currently using:* https:\/\/pastebin.com\/J89qKV5j\r\nMaking all of this safe code is also not hard.\r\n\r\nI hope you get to see how large project scope is. \ud83d\udc4d","Yeah, MonoGame.Imaging looks cool.\r\nI dont know when MG will support Span. \r\nHowever I  think it might be good idea to release your imaging lib as standalone lib.\r\nI've recently compared performance of StbImageSharp vs ImageSharp: https:\/\/github.com\/StbSharp\/StbImageSharp#reliability--performance\r\nIt turns out that StbImageSharp loads jpg like 8 times faster than ImageSharp.\r\nYours is even more faster than StbImageSharp as far as I understand.\r\nSo it could become quite popular and useful.","Yeah I've spent some time optimizing Stb Image, ImageWrite, and ImageResize. I've also made the StbImage API more consistent, so it should be easy to use even without the main library. \r\nThere are some improvements\/additions too but I can't bother mentioning them here.\r\nRunning your test suite over my lib would also be a smart idea (I wouldn't be suprised if there are inconsistencies between my forks and the originals).\r\n\r\nThe elephant in the room is that MonoGame.Utilities is used heavily, so it would be a required dependency for the library, and I don't know how to manage that.","> The elephant in the room is that MonoGame.Utilities is used heavily, so it would be a required dependency for the library, and I don't know how to manage that.\r\n\r\nWell, considering MG license, probably you could just borrow that code.\r\nJust don't forget to credit MonoGame in the README.md, add MonoGame license in the repo and indicate in the comments that code had been borrowed.\r\nI am pretty sure MonoGame team wouldn't mind that.","Anything goes as long as you adhere to the MG license and the respective license of any third party dependency that you indirectly depend on. So yeah, you can pull code out of MG, just make sure you include the copyright notice and a copy of the license.","Curious to see if anyone would reconsider using ImageSharp? Perf has come a long way and I'd wager the latest V2 builds would be hard to beat. \r\n\r\nI've also done a lot of work with our font rendering engine to support advanced typographic extensions including font shaping and bidi text rendering. "],"labels":["Design"]},{"title":"[request]Add supposrt to SaveAsPng with ColorSrgb","body":"Using SaveAsPng with a surface of type ColorSrgb returns \"Texture surface format not supported\", however it's a quite simple format to support, as it's basically the same as Color with a ramp.\r\n\r\nThanks!","comments":["SaveAs calls this method to obtain image data: https:\/\/github.com\/MonoGame\/MonoGame\/blob\/e4d4e9cbe140cf26d19467cf37e3dcece0c28ec9\/MonoGame.Framework\/Graphics\/Texture2D.cs#L427\r\n\r\nSo to fix this issue, someone needs to add handling of case Color.ColorSrgb there"],"labels":["Feature Request","Help Wanted"]},{"title":"SoundEffect pan property not working","body":"Since the Apply3D isn't working at all, I tried to build a workaround with \"pan\". But setting pan from -1f to 1f doesn't change anything. SoundEffect appears on both speakers. WAV file is in stereo format.\r\n\r\n```\r\n            using (var effectInstance = soundEffectBuffer[effect].CreateInstance())\r\n            {\r\n                effectInstance.Volume = volume;\r\n                effectInstance.Pitch = pitch;\r\n                effectInstance.Pan = pan;\r\n                effectInstance.Play();\r\n            }\r\n```\r\n\r\nAlso did try the suggested solution #6543\r\n\r\n```\r\n            using (var effectInstance = soundEffectBuffer[effect].CreateInstance())\r\n            {\r\n                effectInstance.Play();\r\n                effectInstance.Volume = volume;\r\n                effectInstance.Pitch = pitch;\r\n                effectInstance.Pan = pan;\r\n            }\r\n```\r\n\r\nwithout any difference.\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.1.189\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n","comments":["> Since the Apply3D isn't working at all\n\nCould you expand on this? Are you calling Apply3D on playing soundeffects? ","Yes. And the output didn't differ. Also I read here on GitHub (or MonoGame forum) that the Apply3D is buggy and has some issues. Thus I tried to stick to the pan\/volumne solution above.\r\n\r\nBoth of them do not work. Due to the completeness\r\n\r\n                AudioEmitter emitter = new AudioEmitter() { Position = X };\r\n                AudioListener listener = new AudioListener() { Position = Y };\r\n                effectInstance.Apply3D(listener, emitter);\r\n\r\nX equals the entitie's transform and Y the cameras transform component. Sound gets equally emitted. (Both channels max volumne) No matter how I do transform the camera's transform component.","Panning still does not seem to work on the DesktopGL branch as of 2.21.2020","Confirmed. Pan does not work on DesktopGL on 3.8.0.1444-develop","Hi - just wondering whether this is likely to be fixed in the near future so I can plan around it? I'm currently running an old build of MG (which is working fine otherwise) but getting this issue resolved could be worth the potential pain of updating... ","I managed to get sound panning to work as of 27Oct2022 by making sure that the sound file was using the Mono channels setting instead of Stereo.","> I managed to get sound panning to work as of 27Oct2022 by making sure that the sound file was using the Mono channels setting instead of Stereo.\r\n\r\nThat's weird, this sounds like a 3D buffer issue, given that 3D buffers are supposed to contain mono audio in order for them to work properly. But there really shouldn't be any 3D processing going on unless one uses Apply3D and related 3D audio methods."],"labels":["Audio"]},{"title":"Texture2D array in shader is not recognized by monogame","body":"Hello,\r\n\r\nif an array of the form:\r\nfloat4 floats[10]\r\n\r\nis declared, effect.Parameters[\"floats\"].Elements.Count returns 10 as value which is obviously correct.\r\n\r\nHowever, when declaring\r\nTexture2D textures[10] monogame does not recognize it as an array and .Elements.Count returns 0.\r\n\r\nIs this a bug or are texture arrays not implemented yet?\r\n\r\nBest wishes.","comments":["Texture arrays are supported in a different way. When constructing a Texture2D use the [overload](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Graphics\/Texture2D.cs#L74) that takes an `int` array parameter. In your shader use Texture2DArray for the texture array type and when sampling use the z parameter as the index of the texture.","I don't know if you can ever use Texture2D[]. The compiler allows it at least. We could catch it in the parser and warn or error, and point users to Texture2DArray."],"labels":["MGFX","Question"]},{"title":"cannot pass or modify loopstart or LoopLength on SoundEffect when loading from stream.","body":"I cannot seem to pass a LoopLength or LoopStart to SoundEffect.FromStream() enather can I edit these values as they are not part of the class.\r\n\r\nplease add a way to modify the properties of a sound effect object through properties.\r\n\r\nVersion: 3.7.1.189\r\nOS: Windows Home 64 bit\r\nType: DesktopGL","comments":["[This PR](https:\/\/github.com\/MonoGame\/MonoGame\/pull\/6607) is related, but we were unable to find a way to test it. Would it be possible to test if it fixes your problem?","> Would it be possible to test if it fixes your problem?\r\n\r\nI don't understand what you mean by this\r\n\r\n\r\n\r\n","I'm asking if you'd be able to test that PR to see if it fixes looping. It doesn't add `LoopStart` or `LoopLength` to `FromStream`, but it should enable the loop points to work in the `SoundEffect` since they're currently not implemented in DesktopGL.","If I have to compile monogame then no.\r\nI don't really know how to test a PR.\r\n"],"labels":["Audio"]},{"title":"[Android] Crash attempting to add touch event on Samsung Galaxy Tab S4","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nHello! I am currently developing an Android game. We are primarily testing on the Samsung Galaxy Tab S4. I have the touch panel enabled and I am using the user's touches to control the game. Periodically, the game crashes due to a null reference exception happening in the MonoGame code. The issue seems similar, but not identical, to the following issue: https:\/\/github.com\/MonoGame\/MonoGame\/issues\/5964\r\n\r\nHere is the stack trace:\r\n\r\n \tAndroid: 9\r\n\tAndroid Build: PPR1.180610.011\r\n\tManufacturer: samsung\r\n\tModel: SM-T830\r\n\r\n\tXamarin Exception Stack:\r\n\tSystem.NullReferenceException: Object reference not set to an instance of an object\r\n\t  at Microsoft.Xna.Framework.Input.Touch.TouchPanel.AddEvent (System.Int32 id, Microsoft.Xna.Framework.Input.Touch.TouchLocationState state, Microsoft.Xna.Framework.Vector2 position, System.Boolean isMouse) [0x00000] in <03b9f832711c4c6f9c98f98173bda512>:0\r\n\t  at Microsoft.Xna.Framework.Input.Touch.TouchPanel.AddEvent (System.Int32 id, Microsoft.Xna.Framework.Input.Touch.TouchLocationState state, Microsoft.Xna.Framework.Vector2 position) [0x00000] in <03b9f832711c4c6f9c98f98173bda512>:0\r\n\t  at Microsoft.Xna.Framework.Input.Touch.AndroidTouchEventManager.OnTouchEvent (Android.Views.MotionEvent e) [0x000da] in <03b9f832711c4c6f9c98f98173bda512>:0\r\n\t  at Microsoft.Xna.Framework.MonoGameAndroidGameView.OnTouch (Android.Views.View v, Android.Views.MotionEvent e) [0x00000] in <03b9f832711c4c6f9c98f98173bda512>:0\r\n\t  at Android.Views.View+IOnTouchListenerInvoker.n_OnTouch_Landroid_view_View_Landroid_view_MotionEvent_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_v, System.IntPtr native_e) [0x00019] in <b781ed64f1d743e7881ac038e0fbdf85>:0\r\n\t  at (wrapper dynamic-method) System.Object.18(intptr,intptr,intptr,intptr)\r\n\r\n\tThread 2:\r\n\t0   dalvik.system.VMStack.getThreadStackTrace(VMStack.java:-2)\r\n\t1   java.lang.Thread.getStackTrace(Thread.java:1538)\r\n\t2   java.lang.Thread.getAllStackTraces(Thread.java:1588)\r\n\t3   com.microsoft.appcenter.crashes.Crashes.saveUncaughtException(Crashes.java:949)\r\n\t4   com.microsoft.appcenter.crashes.WrapperSdkExceptionManager.saveWrapperException(WrapperSdkExceptionManager.java:55)\r\n\t5   md5f54719fab2b5008f890ca4d350c867c1.MonoGameAndroidGameView.n_onTouch(MonoGameAndroidGameView.java:-2)\r\n\t6   md5f54719fab2b5008f890ca4d350c867c1.MonoGameAndroidGameView.onTouch(MonoGameAndroidGameView.java:109)\r\n\t7   android.view.View.dispatchTouchEvent(View.java:13468)\r\n\t8   android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3192)\r\n\t9   android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2904)\r\n\t10  android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3192)\r\n\t11  android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2904)\r\n\t12  android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3192)\r\n\t13  android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2904)\r\n\t14  android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3192)\r\n\t15  android.view.ViewGroup.cancelAndClearTouchTargets(ViewGroup.java:3042)\r\n\t16  android.view.ViewGroup.dispatchDetachedFromWindow(ViewGroup.java:3962)\r\n\t17  android.view.ViewRootImpl.dispatchDetachedFromWindow(ViewRootImpl.java:4492)\r\n\t18  android.view.ViewRootImpl.doDie(ViewRootImpl.java:7978)\r\n\t19  android.view.ViewRootImpl.die(ViewRootImpl.java:7946)\r\n\t20  android.view.WindowManagerGlobal.removeViewLocked(WindowManagerGlobal.java:497)\r\n\t21  android.view.WindowManagerGlobal.removeView(WindowManagerGlobal.java:435)\r\n\t22  android.view.WindowManagerImpl.removeViewImmediate(WindowManagerImpl.java:124)\r\n\t23  android.app.ActivityThread.handleDestroyActivity(ActivityThread.java:4759)\r\n\t24  android.app.ActivityThread.handleRelaunchActivityInner(ActivityThread.java:5021)\r\n\t25  android.app.ActivityThread.handleRelaunchActivity(ActivityThread.java:4954)\r\n\t26  android.app.servertransaction.ActivityRelaunchItem.execute(ActivityRelaunchItem.java:69)\r\n\t27  android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:108)\r\n\t28  android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:68)\r\n\t29  android.app.ActivityThread$H.handleMessage(ActivityThread.java:1959)\r\n\t30  android.os.Handler.dispatchMessage(Handler.java:106)\r\n\t31  android.os.Looper.loop(Looper.java:214)\r\n\t32  android.app.ActivityThread.main(ActivityThread.java:7075)\r\n\t33  java.lang.reflect.Method.invoke(Method.java:-2)\r\n\t34  com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)\r\n\t35  com.android.internal.os.ZygoteInit.main(ZygoteInit.java:965)\r\n\r\nLooking at the TouchPanel class on Github, I am guessing that the variable \"PrimaryWindow\" in the TouchPanel class is null, and that is causing the null reference exception.\r\n\r\nI don't know how to protect against this exception in my game since this is happening deep in MonoGame code. Based on the stack trace, it doesn't even look like there is a place in my code where I can put a \"catch\" statement to handle this if it does occur, because none of my game functions are in the stack trace. Any suggestions?\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Android 9\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- Android\r\n","comments":[],"labels":["Android","Input"]},{"title":"Extract platform-agnostic classes from MG.Framework into separate assembly","body":"This is essentially meant to restart the discussions from #2500.\r\n\r\nI suggest we extract some foundational platform-agnostic classes into a seperate assembly called MonoGame.Core. \r\n\r\nThe content pipeline and tools by proxy reference a platform specific assembly right now. In practice this doesn't matter because the parts of MonoGame.Framework that are used by the content pipeline are the same across all platforms (it does not use any device resources like gpu, windowing or audio system), but that's also why it does not make sense to build the CP with a reference to a platform-specific assembly. \r\n\r\nMostly this restructuring serves to make things more sensible. We go from this:\r\n```\r\nDesktopGL    WindowsDX\r\n    ^            ^\r\n    | ref        | also\r\n    |            | works\r\n    CP -----------\r\n```\r\n\r\nTo this:\r\n```\r\n      -------->  Core  <------\r\n      |           ^          |\r\n      |           |          |\r\nDesktopGL    WindowsDX       CP\r\n```\r\n\r\nIt also makes things less complicated for users that want to write a reusable library that only uses stuff in Core or a CP extension. The Core project can multitarget netstandard1.1 (for .NET Framework 4.5) and netstandard2.0. \r\n\r\nAdditional misc stuff this improves:\r\n- Doesn't include MonoGame.Framework runtime dependencies in Content.Pipeline and dependents.\r\n- Shared stuff isn't tested seperately for each platform.\r\n\r\n@tomspilman Will this work for consoles? What .NET do they target?\r\n\r\ncc @vpenades ","comments":["Candidate types to be moved to the core would be:\r\n\r\nMaths types: Vector2, Vector3, Matrix, Quaternion...\r\nBounding types: BoundingBox, Rectangle, etc.\r\nCurve types.\r\nColor.\r\nGameTime.\r\nReusableItemList.\r\nProbably many types from Input namespace.\r\n\r\nand... Interfaces!\r\n\r\nAs I stated in the past, the advantages of having a shared entry point assembly for all platforms is that it could help in simplifying a number of use cases.\r\n\r\nFor example, right now, many physics engines (Box2D, Farseer) targeting monogame and reusing monogame's maths, need to deploy multiple packages, one per monogame's target package. This is extremely inefficient, since physics are inherently platform agnostic.\r\n\r\nAnother use case is, for people like me that likes to use the MVC pattern, having the game logic in a separated assembly that is platform agnostic is a plus.\r\n\r\nAlso, any MonoGame extension capable of targeting only the Core would be future proof. Right now, even the simplest of monogame extension becomes outdated very fast as new platform specific packages are updated or introduced.","I would love having this to eliminate the need for Piranha and PCLs. Instead of a game's shared project depending on a PCL, it would depend on the Core package with all of its core functionality and interfaces for the platform-specific pieces. And then after the Protobuild elimination, everything builds from top to bottom with core build tools.","> interfaces for the platform-specific pieces\n\nThis is not at all what I'm suggesting here. This discussion is only about extracting classes that are platform independent into their own assembly. If you want to discuss the interfaces idea, open a new issue (or there might already be an open issue for it).","> This discussion is only about extracting classes that are platform independent into their own assembly.\r\n\r\nMy mistake. I assumed it was referring to all platform-independent types (which would include many interfaces, even if they have multiple platform-dependent implementations), but I suppose it\u2019s really referring to class implementations.\r\n\r\nSo does that mean even though we have this shared Core project, we\u2019ll still need a PCL to capture the shared API of the outer surface for something like a shared game library that references graphics, despite it still only touching a platform-agnostic API? I suppose these are orthogonal issues and can be discussed and solved separately, even if with the same mechanism.","Yes, except it won't be PCL, but .NET Standard libs. Still will require bait-and-switch though.\r\nSee #6419 and #6175 for some discussion on interfaces and runtime abstractions.","Given that this is not gaining a lot of momentum, mostly because the different views of what should be abstracted or not.... I would propose this:\r\n\r\nLet's abstract ONLY, what everybody agrees it's platform agnostic:  _the maths_\r\n\r\nAnd I would propose to name the assembly as _MonoGame.Numerics.Vectors_\r\n\r\nThe reason is that the already standarised System.Numeric.Vectors has its foundation on XNA's math types, with many of the names and methods being fully exchangeable:\r\n\r\n|MonoGame|System.Numerics.Vectors|\r\n|-|-|\r\n|Vector2|Vector2|\r\n|Vector3|Vector3|\r\n|Vector4|Vector4|\r\n|Quaternion|Quaternion|\r\n|Matrix|Matrix4x4|\r\n\r\nI would like to notice that the System.Numerics.Vectors nuget package does support NET45 via the _portable-net45+win8+wp8+wpa81_ profile.  So theoretically, it could be possible to use them in consoles.\r\n\r\nSo, having _the maths_ in a separate assembly, AND having standarised System.Numerics.Vectors available in net45, could help to better align and leverage both APIs, allowing us to go in a number of directions:\r\n\r\n- Better interoperability between System.Numerics.Vectors and Monogame.Numeric.Vectors (implicit conversions, please?)\r\n- Eventually replace the maths of the framework with System.Numeric.Vectors, but keeping MonoGame.Numeric.Vectors around for backward compatibility (with reverse implicit conversions!)\r\n\r\n### Roadmap proposal\r\n\r\n1. Move the math types from MonoGame.Framework to MonoGame.Numerics.Vectors\r\n2. Provided System.Numerics.Vectors does not conflict with consoles, add implicit conversions between Monogame.Numerics.Vectors and System.Numerics.Vectors\r\n3. In the framework, replace Monogame maths, with System maths. backward compatibility should be preserved via implicit conversions provided by step 2.\r\n4. Finally, make MonoGame.Numerics.Vectors optional, only required for compiling legacy projects. New projects would use System.Numeric.Vectors.\r\n\r\nObviosly steps 3 and 4 are breaking changes that might be implemented in future versions of monogame. I would be happy if we just move to step 1 (and very happy if we reach step 2)","> Eventually replace the maths of the framework with System.Numeric.Vectors, but keeping MonoGame.Numeric.Vectors around for backward compatibility (with reverse implicit conversions!)\r\n\r\nI would also like to see us move to System.Numerics.Vectors. However my main goal in opening this issue is to have the Content Pipeline not depend on anything platform-specific. We can do both by separating out 2 shared assemblies from MonoGame.Framework. We can have the MonoGame.Numerics.Vectors assembly that contains the vector types and Matrix as suggested by @vpenades in the previous comment. Depending on that we can have the MonoGame.Core assembly which contains everything else that's not platform-specific, or at least whatever the Content Pipeline needs. Meaning the Content Pipeline only needs to depend on that assembly.",">> However my main goal in opening this issue is to have the Content Pipeline not depend on anything specific.\r\n\r\nOne key change is to decouple the contentManager from GraphicsDevice.\r\nCustom readers that need to create graphic resources will request the GraphicsDevice through the ServiceProvider. (here we could add a generic 'T GetService<T>()' in IServiceProvider to make it more readable.)\r\n\r\n```\r\n        var graphicsDeviceService = (IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(typeof(IGraphicsDeviceService));\r\n        var device = graphicsDeviceService.GraphicsDevice;\r\n```\r\n\r\nHowever MonoGame internally uses a private GraphicsDevice from ContentReader.\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/3e92fc7bff7b4c32edf1314e143a4b7de4fab161\/MonoGame.Framework\/Content\/ContentReaders\/Texture2DReader.cs#L67\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Content\/ContentReader.cs#L33-L39\r\nWhich in turn it gets from serviceProvider.\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/3e92fc7bff7b4c32edf1314e143a4b7de4fab161\/MonoGame.Framework\/Content\/ContentManager.cs#L319\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/3e92fc7bff7b4c32edf1314e143a4b7de4fab161\/MonoGame.Framework\/Content\/ContentManager.cs#L392\r\n\r\nWe can remove those GraphicsDevice references from  ContentReader and ContentManager to move ContentManager and basic readers (Vectors,Matrix,etc) in the core library.\r\n\r\n ","I did not mean content readers and ContentManager as those are part of the runtime. I specifically mean the MonoGame.Framework.Content.Pipeline assembly. Since ContentManager and readers are part of the runtime - in the context where they are actually used, the full runtime is required because e.g. textures are loaded directly into VRAM - there is less value in decoupling them from the platform-specific stuff of the runtime in my opinion. I'd like to not complicate this assembly separation by making code changes.\r\n\r\nIf we finish the assembly separation we can see if there's anything else we can push into the shared assemblies. But IMO there needs to be value in doing so. If something can be in the shared assembly doesn't mean it has to be.\r\n\r\nEDIT: I agree readers should use the graphics device service to get a GraphicsDevice, but that's not relevant for what I see as the purpose of this issue.","About MonoGame.Framework.Content.Pipeline, I think we should split the importers with all the 3rd party dependencies. The remaining assembly will then have the building Base classes for use\/ref by building tools. \r\nAdditionally we can move all MonoGame extensions (ContentItem, ContentStats) under a MonoGame.Framework.Content namespace."],"labels":["Design"]},{"title":"System.OverflowException in GetPointerId","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nWe just got a report from a client that got this exception:\r\n\r\n```\r\nSystem.OverflowException: Arithmetic operation resulted in an overflow.\r\n   en Microsoft.Xna.Framework.Windows.MessageExtensions.GetPointerId(Message msg)\r\n   en Microsoft.Xna.Framework.Windows.WinFormsGameForm.WndProc(Message& m)\r\n   en System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n```\r\n\r\nOf interest is the fact that our client is using a wide table touch projector, so my guess is that the table touch driver is converting the touch events into mouse click events or something like that.\r\n\r\n\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.0.1708\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- WindowsDX\r\n","comments":["I have encountered this issue under the following circumstances:\r\n\r\n* Using MonoGame 3.8.0.1641, WindowsDX (Edit: also tested on 3.8.1.303 and the problem persists)\r\n* Using a touch panel\r\n* Targeting x64 platform\r\n* Using a secondary display with a negative height in respect to the main display\r\n\r\nThe problem does not occur if targeting x86 or if the secondary display's height is equal to or lower than that of the main display:\r\n\r\nE.g. (note: screen 2 in these images is the main display)\r\n\r\nThis is fine:\r\n![image](https:\/\/user-images.githubusercontent.com\/5197431\/217511519-d243e84a-71d1-4fcd-ac9f-b4cc292f0788.png)\r\n\r\nThis is not:\r\n![image](https:\/\/user-images.githubusercontent.com\/5197431\/217511466-c109d651-a1e2-4007-aa46-9d49ce99922f.png)\r\nThe exception is thrown when touching anywhere in the 'negative' area above screen 2. Inputs are fine below this.\r\n\r\nCoincidentally, I am using my own user32 interop code to capture touch inputs and received the same exception under these circumstances, with the error occurring while casting the low\/high values from the Message.LParam:\r\n\r\n        int Low16(IntPtr value)\r\n        {\r\n            return unchecked((short)(uint)value);   \/\/ classic unchecked cast to uint\r\n        }\r\n\r\nChanging the uint cast to Uint64 stopped the exception on this line, however it was then immediately thrown again by MonoGame (which caused some confusion!), so I am unable to confirm if this would actually fix the issue, but it might offer some helpful clues etc.\r\n\r\nTLDR; it appears this may be a marshaling issue under x64 when dealing with touch points with a negative value.","@intelligentvending does it happen with 3.8.1.303 ?","> We just got a report from a client that got this exception:\r\n> \r\n> ```\r\n> System.OverflowException: Arithmetic operation resulted in an overflow.\r\n>    en Microsoft.Xna.Framework.Windows.MessageExtensions.GetPointerId(Message msg)\r\n>    en Microsoft.Xna.Framework.Windows.WinFormsGameForm.WndProc(Message& m)\r\n>    en System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n> ```\r\n> \r\n> Of interest is the fact that our client is using a wide table touch projector, so my guess is that the table touch driver is converting the touch events into mouse click events or something like that.\r\n> \r\n> #### What version of MonoGame does the bug occur on:\r\n> * MonoGame 3.7.0.1708\r\n> \r\n> #### What operating system are you using:\r\n> * Windows\r\n> \r\n> #### What MonoGame platform are you using:\r\n> * WindowsDX\r\n\r\n\r\n\r\n> @intelligentvending does it happen with 3.8.1.303 ?\r\n\r\n@vpenades Yes, just tested and it does happen with 3.8.1.303,, I'll update my post to reflect this."],"labels":["Windows"]},{"title":"GraphicsDevice.EffectCache is not threadsafe","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nI have a project where it is loading content in different threads. Very occasionally, it will crash when loading Effect objects:\r\n\r\n```\r\nSystem.ArgumentException\r\n  HResult=0x80070057\r\n  Message=An item with the same key has already been added.\r\n  Source=mscorlib\r\n  StackTrace:\r\n   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at Microsoft.Xna.Framework.Graphics.Effect..ctor(GraphicsDevice graphicsDevice, Byte[] effectCode, Int32 index, Int32 count)\r\n   at Microsoft.Xna.Framework.Content.ContentTypeReader`1.Read(ContentReader input, Object existingInstance)\r\n   at Microsoft.Xna.Framework.Content.ContentReader.InnerReadObject[T](T existingInstance)\r\n   at Microsoft.Xna.Framework.Content.ContentReader.ReadObject[T]()\r\n   at Microsoft.Xna.Framework.Content.ContentReader.ReadAsset[T]()\r\n   at Microsoft.Xna.Framework.Content.ContentManager.ReadAsset[T](String assetName, Action`1 recordDisposableObject)\r\n   at Microsoft.Xna.Framework.Content.ContentManager.Load[T](String assetName)\r\n   at BloomBuddy.Bloom.LoadContent(SpriteBatch spriteBatch, ContentManager content, GraphicsDeviceManager device)\r\n...\r\n```\r\n\r\nChased it down to this line of code:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/ac217ce1f6de1d9764f84983d5c043c5d44aa9aa\/MonoGame.Framework\/Graphics\/Effect\/Effect.cs#L110\r\n\r\nEffects are being cached in the GraphicsDevice object, but there is no thread protection around that cache. There are two solutions I can see:\r\n\r\n1. Add a lock around access to the EffectCache\r\n2. Move the EffectCache into ContentManager. That would be the logical place to cache it.\r\n\r\nSuper appreciate all the work yall are putting into MonoGame.\r\nCheers!\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows, Android, iOS\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- WindowsDX, Android, iOS\r\n","comments":[],"labels":["DirectX"]},{"title":"Joystick usage sample","body":"Could we please have some working Joystick examples?\r\n\r\n\r\n\r\n<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\n\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["Here's the code you would use for adding gamepad capabilities. This one moves the sprite based on the left joystick input.\r\n\r\n\/\/ Inside Update method\r\n\/\/ Gamepad\r\nGamePadCapabilities capabilities = GamePad.GetCapabilities(PlayerIndex.One);\r\n\r\n\/\/ handle for controller\r\nif (capabilities.IsConnected)\r\n{\r\n    GamePadState gamePadState = GamePad.GetState(PlayerIndex.One);\r\n\r\n    if (capabilities.HasLeftXThumbStick)\r\n    {\r\n        if (gamePadState.ThumbSticks.Left.X < -0.5f)\r\n        {\r\n            position.X -= 10.0f;\r\n        }\r\n        if (gamePadState.ThumbSticks.Left.X > 0.5f)\r\n        {\r\n            position.X += 10.0f;\r\n        }\r\n        if (gamePadState.ThumbSticks.Left.Y < -0.5f)\r\n        {\r\n            position.Y += 10.0f;\r\n        }\r\n        if (gamePadState.ThumbSticks.Left.Y > 0.5)\r\n        {\r\n            position.Y -= 10.0f;\r\n        }\r\n    }\r\n    if (capabilities.GamePadType == GamePadType.GamePad)\r\n    {\r\n        if (gamePadState.IsButtonDown(Buttons.B))\r\n        {\r\n            Exit();\r\n        }\r\n    }\r\n}\r\n\r\nAttached is a simple working example.\r\n[Joystick Example.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/7406459\/Joystick.Example.zip)\r\n","Hello, I was wondering if this was available to be worked on. If so, I would like to work on it. "],"labels":["Documentation"]},{"title":"Drop ATC compression support","body":"Android should use ETC, which we support. ATC is a proprietary compressed format that is not as widely supported in OpenGL drivers. \r\n\r\nUnity has also deprecated ATC:\r\nhttps:\/\/github.com\/Unity-Technologies\/UnityCsReference\/blob\/255ff86730a00d3c92a87a14110e7c6cad64fa59\/Editor\/Mono\/AssetPipeline\/TextureImporterEnums.cs#L124-L127 ","comments":[],"labels":["Android","OpenGL","Help Wanted"]},{"title":"Performance in building SpriteFont needs improvement.","body":" By now, using Hangul in SpriteFont asset is next to unusable due to the time takes to rasterizing font to image.\r\n Building SpriteFont using character region of \ud558\\~\ud7a3(588 characters) with Basic Latin takes 2.81 seconds.\r\n Building SpriteFont using character region of \uac00\\~\ub098(1177 characters) with Basic Latin takes 16 seconds.\r\n Building SpriteFont using character region of \uac00\\~\ub2e4(1765 characters) with Basic Latin takes whole magnitude of 42 seconds. Note that the entire Hangul Syllables section in unicode consists of 11,172 characters. I never saw building all of Hangul character succeeds.\r\n\r\nBy the fact the generated font image is always sorted, I'm assuming this issue is associated with sort algorithm. In that case option that disables character sorting would be nice. But I'm probably wrong here, I started learning MonoGame like yesterday and have no idea how this works internally.\r\n\r\nMonoGame 3.8.0.600 at Windows 7.\r\nThe font used during testing is [Neo Dunggeunmo](https:\/\/github.com\/Dalgona\/neodgm\/releases) with Regular style, font size of 12, zero spacing, used kerning.\r\n","comments":["```SpriteFont``` isn't well suited for CJK languages, there is an on-going discussion to make a runtime font builder and renderer over here #6324 \r\n\r\nAs a workaround, it's probably worth looking into @rds1983 work: https:\/\/github.com\/rds1983\/SpriteFontPlus#dynamicspritefont\r\n\r\nI would also suggest to look into BMFont: https:\/\/www.angelcode.com\/products\/bmfont\/","In other words the time increase exponentially to the no of glyphs, right?\r\n\r\nThe first thing to look at is the glyph packing, IMO. \r\nMaybe there are places to improve on.\r\n"],"labels":["ContentPipeline","Performance"]},{"title":"SetRenderTarget[s](null) throws an exception on Android","body":"Hello,\r\nThe methods `GraphcisDevice.SetRenderTarget` and `GraphicsDevice.SetRenderTargets` throw an exception when we pass a null reference. It looks like similar to #6552 \r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n- Android\r\n","comments":[],"labels":["Android","OpenGL"]},{"title":"SoundEffectInstancePool.Update() exception caused by multithread implimentations","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nMicrosoft.XNA.Frameworld.Audio.SoundEffectInstancePool.Update() crashes with an instance not found exception.  This error in Visual Studio tags the Program.Main() Run() command.\r\n\r\n![SoundPool_Error](https:\/\/user-images.githubusercontent.com\/24591422\/60761253-e5fe1400-a012-11e9-869c-08d71775e6d8.png)\r\n\r\nAppears to be a list insertion\/loop error in C# when multithreading.  The gameloop base.update() is calling audio management while threads are allowed to make additions to the play pool with SoundEffectInstance calls.  Similar problem may occur due to multiple items being added to the pool simultaneously.\r\n\r\nThis is a common problem in multithreaded applications which modify a single list from multiple threads.  C# has difficulty with supporting list changes as they are being iterated.  Normally not an issue, but as games have to utilize threads more...it may be worth correcting the problem.\r\n\r\nWorkaround solution was to create a globally accessible object variable for use with lock().  Any new sound effect instances\/.play() calls are contained in the lock on this variable as well as the gameloop.update(){ base.Update() } call.\r\n\r\nRecommend adding an improved exception handling on this, or have a lock() within the framework to prevent list changes while performing the update loop through the list of SFX instances.\r\n\r\n![SoundPool_Fix](https:\/\/user-images.githubusercontent.com\/24591422\/60761376-0333e200-a015-11e9-9a21-fca3cc34127b.png)\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.6.0\r\n\r\n#### What operating system are you using:\r\n- Windows 10 1903\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["Yeah, this should definitely be thread safe."],"labels":["Audio"]},{"title":"[Android] Multisample count causes GLError 1280 on older android devices","body":"Github: Current Develop Branch\r\n\r\nWe should check if Multisample is enabled. On my old Huawei Mate 7 \r\n GL.GetInteger((GetPName)GetParamName.MaxSamples, out _maxMultiSampleCount);\r\nwas causing error 1280.\r\nThis fixes it:\r\nline 108 of GraphicCapabilities.PlatformInitialize(GraphicsDevice device)\r\n\r\n            if (GL.Extensions.Contains(\"GL_ARB_multisample\"))\r\n            {\r\n                GL.GetInteger((GetPName)GetParamName.MaxSamples, out _maxMultiSampleCount);\r\n                GraphicsExtensions.CheckGLError();\r\n            }\r\n            else\r\n                _maxMultiSampleCount = 1;","comments":[],"labels":["Android","OpenGL"]},{"title":"Poor error from mgcb when misspelling #include directive in shader","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nI accidentally had:\r\n\r\n```\r\n#inculde \"random.fxh\"\r\n```\r\n\r\nInstead of\r\n\r\n```\r\n#include \"random.fxh\"\r\n```\r\n\r\nThe error that `mgcb` gives me is:\r\n\r\n```\r\nThe given key was not present in the dictionary.\r\n```\r\n(with no line number)\r\n\r\nObviously I eventually figured it out, but the message could be way better.\r\n\r\n<!-- System stats -->\r\n\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- WindowsDX\r\n","comments":[],"labels":["MGFX"]},{"title":"Soft keyboard problems on Android KitKat after rotation","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nOn an android emulator running Android KitKat (API 19), after the soft keyboard gets shown using a call to GamerServices.Guide.BeginShowKeyboardInput(), the soft keyboard popup appears and works ok:\r\n\r\n![KeyProb1](https:\/\/user-images.githubusercontent.com\/19970935\/59410782-a0528080-8db1-11e9-9c7f-a9ddc8ef4292.png)\r\n\r\nAfter rotating the device the popup buttons all go black on two devices I have tested: \r\n\r\n![KeyProb2](https:\/\/user-images.githubusercontent.com\/19970935\/59410795-a6486180-8db1-11e9-8a35-0b5366eb6066.png)\r\n\r\nIn the emulator the popup disappears completely.\r\n\r\nThese problems do not appear from Lollipop (API 21) onward.\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- Android\r\n","comments":[],"labels":["Android"]},{"title":"Audio breaks upon losing the current audio device until the game is completely restarted","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nWhen the current audio device is disconnected, audio will no longer play for the entirety of the game until the game itself is restarted. Below are error messages logged to the console when this happens on the DesktopGL and WindowsDX projects, respectively.\r\n\r\n**OpenAL**: `AL lib: (EE) ALCmmdevPlayback_mixerProc: Failed to get padding: 0x88890004`\r\n**XAudio2**: `The thread 0x4850 has exited with code 0 (0x0).`\r\n\r\nReplication:\r\n1. Have audio playing in a DesktopGL or WindowsDX project\r\n2. Disconnect your current audio playback device\r\n3. Audio will stop playing and no longer work even after reconnecting the device\r\n\r\nThere should be a way to handle this in some form. It's not uncommon to use headphones while gaming\/working, which can disconnect for various reasons (out of battery, cord pulled, etc).\r\n\r\n**Specs**\r\nModel: Alienware 15 R3\r\nCPU: Intel i7-7700HQ \r\nGPU: NVIDIA GeForce GTX 1070\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- Develop\r\n\r\n#### What operating system are you using:\r\n- Windows 10, 64-bit\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n- WindowsDX\r\n","comments":["What kind of device you are disconnecting? I used normal headphones connected using audio jack, \r\nwhen I disconnect them, music plays normally on laptop speakers.\r\n\r\nTested on WindowsDX.","I'm using Bose QC35 II headphones in wireless mode, and I disconnect them by turning off the power. I don't experience this issue on most other applications, such as web browsers.","Remarks on XAudio2 documentation gives all the info: [IXAudio2EngineCallback::OnCriticalError](https:\/\/docs.microsoft.com\/en-us\/windows\/desktop\/api\/xaudio2\/nf-xaudio2-ixaudio2enginecallback-oncriticalerror)\r\n","SharpDX provides the CriticalError event in this form: `public event EventHandler<ErrorEventArgs> CriticalError;`\r\n\r\nThe question is what to do with all existing `SoundEffectInstances` and other audio objects. My thoughts are to subscribe to this event; when it's called, dispose and null the XAudio2 `Device`, then call `InitializeSoundEffect` to reinitialize the audio system. I'm not very knowledgeable on how audio works, so I'm not sure if that'd be enough or what side effects it may cause.","I should have also mentioned that I use SoundEffects to play music. Are you using MediaPlayer @mpokrzywa?","I wonder if that event is even raised in your case @tdeeb. Could you maybe give that a try?","I'll give it a go sometime in the next couple of days.","@tdeeb For testing this issue I used basic way to play audio file:\r\n\r\n`SoundEffect soundEffect = Content.Load<SoundEffect>(\"Content\\\\ergon\");`\r\n`soundEffect.Play();`\r\n\r\nI don't think it matters too much.\r\n\r\nIf I see this right, SharpDX.XAudio2 MasteringVoice public constructors don't give access to flag parameter, only to szDeviceId.\r\nIt's also good to understand that XAudio2 critical error event will be raised on device disconnection, not when it connects back. For something like that you will need windows API to scan incoming devices, get Id and create MasteringVoice with that Id.","I got around to trying it on a fresh project, and audio got correctly redirected to my laptop's speakers on the WindowsDX project after the turning off my headphones. However, the DesktopGL project with OpenAL output the same error message as above in the console, and all audio was broken from thereon.","[See https:\/\/github.com\/kcat\/openal-soft\/commit\/26c8c50c2605e377f74d7a73bae3bbbf4f7bad61](https:\/\/github.com\/kcat\/openal-soft\/issues\/533#issuecomment-827296775)"],"labels":["Audio"]},{"title":"Blank OpenGL MonoGame project takes long to load","body":"<!-- Write your issue below -->\r\n\r\nHello, so I wanted to try out MonoGame and upon creating a blank project and running it in Visual Studio (with no debug) I discovered that it takes close to a minute to load. Doesn't seem right to me. Just wanted to find out if others are also having this problem. \r\n\r\nI've tried reinstalling the driver (and also a previous driver) and restarting the computer doesn't seem to make it go away. \r\n\r\nIt sounds similar to this issue: http:\/\/community.monogame.net\/t\/monogame-startup-extremely-slow\/281\/3\r\n\r\n<!-- System stats -->\r\nIntel Core i5 9600K\r\n16GB RAM\r\nNvidia RTX 2070\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.1\r\n\r\n#### What operating system are you using:\r\n- Windows 10 - 64-bit (Nvidia Driver 430.64)\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n","comments":["Could you try launching the executable directly from the output folder through explorer instead of from VS?","Thanks for the reply. I tried that and the issue still persists.","That's weird. Does it take that long for the window to pop up?\r\nIf the window does pop up but it takes a minute to run anything, could you maybe try to pinpoint the issue? Considering it takes so long you could just write out console messages in the constructor, Initialize method and Update method and you should be able to tell where it takes so long.","It takes long for the window to pop up. Other than that everything works normally. It might be an OpenGL driver bug. I compared it with a Windows\/DirectX blank project and it opens with no delay.","I can confirm that using OpenGL and a blank project, it takes a really long time to show the window. ","If it's the same issue that I had, there's a bug in dotnet. https:\/\/github.com\/dotnet\/sdk\/issues\/25543\r\n\r\nI fixed it on my local machine by deleting line 140: https:\/\/github.com\/MonoGame\/MonoGame\/blob\/b21463b419e55b4c898030fc22bee77dabb11210\/Tools\/MonoGame.Content.Builder.Task\/MonoGame.Content.Builder.Task.targets#L140\r\n\r\nThen replace lines 143 to 146 with https:\/\/github.com\/MonoGame\/MonoGame\/blob\/b21463b419e55b4c898030fc22bee77dabb11210\/Tools\/MonoGame.Content.Builder.Task\/MonoGame.Content.Builder.Task.targets#L143-L146\r\n\r\n```xml\r\n<Exec\r\n    Condition=\"'%(ContentReference.FullPath)' != ''\"\r\n    Command=\"powershell -Command &quot;(Measure-Command { $(DotnetCommand) $(MGCBCommand) $(MonoGameMGCBAdditionalArguments) \/@:&quot;%(ContentReference.FullPath)&quot; \/platform:$(MonoGamePlatform) \/outputDir:&quot;%(ContentReference.ContentOutputDir)&quot; \/intermediateDir:&quot;%(ContentReference.ContentIntermediateOutputDir)&quot; \/workingDir:&quot;%(ContentReference.FullDir)&quot; | Out-Default}).ToString()&quot;\"\r\n    WorkingDirectory=\"$(MSBuildProjectDirectory)\" \/>\r\n```\r\n\r\nWhat this does is instead of running dotnet directly, it calls it through Measure-Command. the TL;DR is that Exec waits for the dotnet server to time out so the builds take a lot of time. It's even worse if you have multiple .mgcb in your project since you'd hang for multiple timeouts in a row."],"labels":["OpenGL","Need Info"]},{"title":"GraphicsDevice.SetVertexBuffers generating garbage every frame due to params option","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nI came across this issue when I decided to profile my (in progress) game and discovered I was generating a ton of VertexBufferBinding[] arrays during the Draw() call.\r\n\r\nIt appears as though the API GraphicsDevice.SetVertexBuffers(params VertexBufferBinding[] vertexBuffers) is generating garbage every frame due to the params option. \r\n\r\nAn example of using this API would be instancing viz. \r\n\r\nSetVertexBuffers(vertexBinding, instanceBinding);\r\n\r\nThe params option generates a new array on every call which then needs to be garbage collected.\r\n\r\nThere is currently a workaround i.e. creating a static array and passing that to the API e.g.\r\n\r\nVertexBufferBinding[] bindings = new VertexBufferBinding[2];\r\nbindings[0] = blah;\r\nbindings[1] = blah;\r\n\r\nSetVertexBuffers(bindings);\r\n\r\n\r\nHowever, it's pretty easy to miss this issue, so it would probably be best to clean up the APIs to remove the params option and have a couple different API signatures e.g. one that takes a statically defined array and one that takes in both 1 VertexBufferBinding and 2 VertexBufferBindings, since those would be the most common use cases.\r\n\r\n\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.1\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL, WindowsDX\r\n","comments":[">  remove the params option \r\n\r\nI think we have to keep that as i believe it was part of the original XNA API and we need it for compatibility.\r\n\r\nHowever...\r\n\r\n>  one that takes a statically defined array and one that takes in both 1 VertexBufferBinding and 2 VertexBufferBindings, \r\n\r\nWe can do this and keep the params version for fallback if for some reason you happen to use more than 2 or 3 bindings.","@tomspilman if we're keeping the params version, the first method suggested by @YTN0 becomes unnecessary; a params method already takes an array, and you can prevent the garbage generation by simply creating the array ahead of time. That leaves us with just the second overload to implement.","Are you sure i seem to remember params calls all work by object[] if i remember right unless it has changed. So essentially its boxing unboxing. When you pass a struct and I think when you pass a type even if it is global it can get boxed in the case of params casting anything to object i think gets boxed. I haven't ever had to use params i don't why it was used at all, i doubt i ever will use it unless i have no choice. I avoid it like i avoid arraylists. Like the plauge.","I am pretty sure. I did some googling on params and that is definitely the consensus. My profiling also indicated the same thing.\r\n\r\nWhen I changed it to using a statically created array, the garbage went away. Params are definitely creating a new array on every call.","@willmotil That would be strange, given that you can specify any array type you like for the params argument, and not just object. As @YTN0 said, the garbage comes from params parameters being converted to an array behind the scenes. By passing an array explicitly, you bypass this, at the cost of being less nice on the eyes.","Well that is a neat little trick that i never knew about.\r\n\r\n```\r\n        Vector3 val1 = Vector3.One;\r\n        Vector3 val2 = Vector3.Zero;\r\n        Vector3[] vals = new Vector3[2];\r\n\r\n        public void TakeVals(params Vector3[] v)\r\n        {\r\n\r\n        }\r\n\r\n\r\n        protected override void Update(GameTime gameTime)\r\n        {\r\n            KeyboardState state = Keyboard.GetState();\r\n            if (state.IsKeyDown(Keys.Escape))\r\n                Exit();\r\n\r\n            vals[0] = val1;\r\n            vals[1] = val2;\r\n            \/\/TakeVals(val1, val2); \/\/ garbage\r\n            TakeVals(vals); \/\/ no garbage\r\n\r\n            \/\/\r\n            \/\/ Update fps garbage counter\r\n            \/\/\r\n            fps.Update(gameTime);\r\n\r\n            base.Update(gameTime);\r\n        }\r\n```\r\n\r\nStill in this case whats the use of the params keyword at all \r\nit seems deceptive like a pitfall waiting to happen."],"labels":["Feature Request","Design","Help Wanted","Good First Issue"]},{"title":"GraphicsDevice.Present() does not swap buffers on Android or iOS","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nDuring a load of a user in an App I am porting over to MonoGame, the app tries to show a \"Loading...\" message on the screen while doing the loading. The way this works was to render the message, call GraphicsDevice.Present() and then continue loading. This works fine on Windows, but does not work on Android.\r\n\r\nLooking into the MonoGame code, I see that SwapBuffers() is called for Windows in PlatformPresent(), but not on Android. I would have thought eglSwapBuffers() might be called instead.\r\n\r\n```\r\n        public void PlatformPresent()\r\n        {\r\n#if DESKTOPGL || ANGLE\r\n            Context.SwapBuffers();\r\n#endif\r\n             ...\r\n```\r\n\r\nIs there something else that can be called with GraphicsDevice.Present() to get the new render to show up?\r\n\r\n( I realize there are other ways to do this, but that's not the question).\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n- Android\r\n","comments":["On looking more into the code, I see that an overridden Present() call exists in AndroidGamePlatform.cs that gets called by EndDraw(), so adding BeginDraw() and EndDraw() calls before the Present() call is a workaround to this issue.\r\n\r\nIs there any better way? Call the overridden Present() be called directly?","I haven't looked into why it's implemented the way it is, but Present should swap buffers and we should fix that for Android.","This problems also happens on iOS.\r\n\r\nAgain a platform specific Present() call exists in iOSGameview.cs, but there is no way to call it that I can see - the EndDraw() workaround for Android does not work in this case.\r\n\r\nSo I don't have any workaround for this problem on iOS apart from using the source and hacking Game.CS:\r\n```\r\n public void iOSPlatformPresent()\r\n {\r\n    ((iOSGamePlatform)Platform)?.ViewController?.View?.Present();\r\n }\r\n```\r\nThe iOS Present() function comes with the following comments: \r\n```\r\n\t\t\/\/ FIXME: This logic belongs in GraphicsDevice.Present, not\r\n\t\t\/\/        here.  If it can someday be moved there, then the\r\n\t\t\/\/        normal call to Present in Game.Tick should cover\r\n\t\t\/\/        this.  For now, iOSGamePlatform will call Present\r\n\t\t\/\/        in the Draw\/Update loop handler.\r\n\t\tpublic void Present () ...\r\n```","Oof, yeah looks like there's a bunch of FIXME's in iOS specific classes, still there since the initial implementation. Might be difficult to figure out where everything should go to clean up the implementation.","Is there any other way to access Game.Platform or iOSGameView or the GL Context or something at the moment so I can use the MonoGame.Framework releases instead of changing the source to get a better iOS workaround?","You could call OpenGL directly using PInvoke, just like MonoGame does it (there's a method to get a handle to the current context) or use reflection to retrieve and invoke the hidden Present overload. I'm not sure what the best workaround is, both could have some side effects.","Yep that works, thanks.\r\n\r\nSo an iOS workaround (without error checks) is:\r\n```\r\nvar context = OpenGLES.EAGLContext.CurrentContext;\r\ncontext.PresentRenderBuffer(36161u);\r\n```"],"labels":["Android","iOS"]},{"title":"Effect Parameters shift","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nI believe this is somewhat related to the issue of the shader compiler dropping unused parameters, or parts thereof, as seen [here, for example](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/911). \r\n\r\nIt's been known that parameters will be \"optimised out\" if they are not used in an effect, and, similarly, even individual matrix columns are not safe from this, as a 4x4 will get truncated to a 4x3 if its W column isn't used (which then leads to issues when copying data.\r\n\r\nWell, it turns out that omitting matrix columns isn't the worst of it. For example, if the column that is not used is Z, but the effect uses X, Y, and W, _the compiler will drop the Z column and shift the W column into its place._ Same with other combinations; I was baffled why my Z coordinate had different values at the top of the screen versus the bottom; it's because it had shifted into the unused Y space.\r\n\r\nI believe the same thing can happen with adjacent parameters, as well. One effect had two parameters: a matrix and a float. Monogame seems to allocate buffer space in increments of 16 bytes, so the \"constant buffer\" was 80 bytes to accommodate the 64-byte matrix plus the 4-byte float. At runtime, I debugged to ensure that, yes, the constant buffer had everything in the proper places. However! At run time, because one or more of my matrix columns was not being referenced, not only did it drop that column, but my other, separate parameter was suddenly invalidated, coming in as all 0 instead of its assigned value, presumably because its data had shifted into the 64-byte space of the matrix data from its own.\r\n\r\nI think the ultimate solution to this would be to validate the mapping of parameter data to wherever it is put when Effect.Technique.Pass.Apply() is called. It can be done once either upon first use or at compile time, and then cache the results for quick future reference.\r\n\r\nBut, in short, one way or another, effect parameter data is not being transferred to the proper location.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":[],"labels":["MGFX"]},{"title":"Tests for separate blendstates","body":"We need tests for separate blend states when rendering to multiple targets. Blend states are well tested with 1 target, so we just need to test that the right slot gets the right blend state applied.","comments":[],"labels":["Testing"]},{"title":"spriteBatch breaks Hardware Instancing","body":"Its quite simple realy, and I guess best explained by some screenshots:\r\n\r\nthis is how the rendering works if i only use `Vertex`- \/ `IndexBuffer`s + `DrawInstancedPrimitives`:\r\n![instancing working fine](https:\/\/image.prntscr.com\/image\/it06axSgRZidsO6JzLxOcA.png)\r\nits terrain generation, each chunk, outlined by the white lines, is one instance - everything works fine.\r\n\r\nThen I wanted to add some debug draw - and everything went downhill.\r\nIf i remember correctly XNA used to Restore the `GraphicsDevice` `DepthStencilState` etc, sadly MG does not but whatever, not that big of a problem ... or so I thought.\r\n\r\nIf i only call `spriteBatch.Begin();` and `spriteBatch.End();` after my actual draw code it breaks some of the states like menioned before, but thats not the problem, those can easily just saved before and later restored. Atm Im doing this with the \r\n\r\n    GraphicsDevice.RasterizerState\r\n    GraphicsDevice.BlendState\r\n    GraphicsDevice.DepthStencilState\r\n    GraphicsDevice.SamplerStates[0]\r\n\r\nsince I found those are changed in the `SpriteBatch.Setup()`. This fixes al problems, **but** as i said before:\r\n>  If i **only** call `spriteBatch.Begin();` and `spriteBatch.End();`\r\n\r\nThis is what hapens if i actually try to use `DrawString(...)`:\r\n![spectacular degenerate primitives](https:\/\/image.prntscr.com\/image\/fJznfW7ZS0iYxCvacR8b7A.png)\r\nSo yaaaaayy, it draws some strings - and it also breaks everything else.\r\nIve got a feeling that im missing some state change somewhere but after searching for hours, im just gona psot this issue.\r\n\r\nOne more thing; the white lines are actualy the edges of a cube, and are created with regualar draw calls, `DrawIndexedPrimitives` to be precise, and those work perfectly fine.\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n- MonoGame 3.8.0.356 (develop)\r\n\r\n#### What operating system are you using:\r\n- Windows 7\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL (universal VS project)\r\n","comments":["> DesktopGL (universal VS project)\r\n\r\nYou mean the cross platform desktop project type, right? We refer to that as DesktopGL (though I don't think that's actually documented \ud83d\ude05).\r\n\r\nThe instanced rendering implementation for DesktopGL is a bit of a mess. There's a bug with a dirty flag not being set, see #6293. It is not the right fix, but #6302 should resolve this issue and maybe we should merge that as a temporary workaround (sacrificing a little bit of performance until it is fixed right). Could you give that PR a go? Instructions on how to do that are [here](https:\/\/gist.github.com\/Jjagg\/3a2cf257910b21fd0c143d81ef63637a#option-2-building-from-source).","> > DesktopGL (universal VS project)\r\n> \r\n> You mean the cross platform desktop project type, right? We refer to that as DesktopGL (though I don't think that's actually documented sweat_smile).\r\n\r\nJea, I'm talking about the cross platform desktop project, and thanks I'm going to check those out - I only searched around in the `SpriteBatch` code, since the instancing seemd to work fine.\r\n","Ok, so #6302 would solve the issue, but as you already said, this ist not a proper fix, but I think ill keep it as a workaround. I dont know if Ill be able to find the actual problem, but if I do Ill let you know. Also Im a bit confused as to how noone else found this, since the problem seems to already exist for over a year now. I mean Instancing + text isnt that rare and its quite the substantial bug imo.\r\n\r\nSo if you want we can close this since its basically a duplicate \/ there is already a fix for it, even if its not proper.","@SaculRennorb Instead of clearing the _attribsDirty at the end of PlatformDrawIndexedPrimitives() and PlatformDrawUserPrimitives() try to move this line at the beginning of PlatformDrawInstancedPrimitives(). \r\nPossibly right before `ApplyAttribs(_vertexShader, baseVertex);`\r\nThis will not  impact the performance when you are not drawing using instancing.","> This will not impact the performance when you are not drawing using instancing.\r\n\r\nThanks, your not quite right tho - why shouldnt it? it still gets set everytime PlatformDrawIndexedPrimitives \/ PlatformDrawUserPrimitives gets called, the only difference is that it now actually affects the current draw call and not the next one.","I commented on this or something that appears similar before at the bottom of this post.\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/issues\/6321\r\nI just didn't make its own issue for it, as it was sort of pulling teeth with the problem i had.\r\n\r\n> 1)\r\n> SpriteBatch resets states but some unidentified as of yet ...\r\n> BlendState option is responsible whatever state it sets it doesn't turn off even if you stop calling SpriteBatch. \r\n> The solution is to simply set a blend state that does nothing at the begining of draw.\r\n> This took a long time to identify as it appeared to be a effect of the depth culling or stencil buffer.\r\n> \r\n> \r\nFor the above reason to me it seemed as if the depthstencilstate was the problem but turned out to be the blend state which spritebatch turns on something in blend state and keeps it on continuously once spritebatch is called even if its just called once then turned off so it was really hard to figure out.","well @willmotil yes, but also no - the blend state is one of the fields modified, but as i already wrote, i already reset that aswell as \r\n\r\n    GraphicsDevice.RasterizerState\r\n    GraphicsDevice.DepthStencilState\r\nand  `GraphicsDevice.SamplerStates[0]`\r\nand it still breaks instanced draw calls.\r\nThis seems to almost certainly be a problem with the opengl implementation and a flag not being set somewhere.","Humm im probably about a few weeks to a week at best away from being at a point were my current project will directly intersect with this problem using model instancing.\r\nWere this will become directly relevant to me as i test primarily on open gl.\r\n\r\nOne suggestion put spritebatch into immediate mode.\r\n\r\nIt might just be though that you will have to call base. draw then call spritebatch separately and base.draw again. \r\n\r\nAnother print out all the states on the first run of draw call sprite batch print out all the states then iterate thru run on the second pass print out the states that are still set after you have cleared the device and then changed the states just to see if you can directly see the behavior that is out of line with expectations. \r\n\r\n","Is there any solution or workaround at this point? On DesktopGL, GPU instancing seems to work fine until any call to SpriteBatch.Begin(). After that geometry appears inverted. Even resetting the states after SpriteBatch.End() seems to have no effect.\r\n\r\n```\r\n  \/\/ ...\r\n  spriteBatch.End();\r\n  GraphicsDevice.BlendState = BlendState.Opaque;\r\n  GraphicsDevice.DepthStencilState = DepthStencilState.Default;\r\n  GraphicsDevice.SamplerStates[0] = SamplerState.LinearWrap;\r\n```","> Is there any solution or workaround at this point? On DesktopGL, GPU instancing seems to work fine until any call to SpriteBatch.Begin(). After that geometry appears inverted. Even resetting the states after SpriteBatch.End() seems to have no effect.\r\n> \r\nDoes this issue persist after applying PR #7406 ?\r\n\r\nBefore this fix using instancing followed by SpriteBatch resulted in instanced meshes not being drawn for me. I can't replicate the meshes being inverted though.\r\n","Sorry false alarm!  My issue was not related to this bug \/ pr, but due to an incorrect depth buffer being used on rendertexture2d in my code (wrong constructor overload used)"],"labels":["OpenGL"]},{"title":"MonoGame Pipeline accessibility problems","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nhello. i am a blind developer. i trying to use MonoGame to create my games. for computer access i am using [https:\/\/github.com\/nvaccess\/nvda\/](url).\r\ncurrently there are sum accessibility problems with content pipeline which prevents me to fully embrace it's power.\r\n\r\n- it's not possible to navigate properties and build output windows using keyboard.\r\n- properties and build windows aren't exposed to screen-reader.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n- and latest development branch. \r\n\r\n#### What operating system are you using:\r\n- Windows","comments":["Hey Alexandr,\r\n\r\nProviding that I have the time to look into it and that Eto.Forms supports it, I'll check if I can add screen-reader support to the pipeline.\r\n\r\n@cra0zy Do you happen to know if Eto supports automation properties? I know that WPF does and that filling them allows screen readers to work, but I can imagine that it's getting more complex in a multi target system like Eto.","@mrhelmut i am appreciate it. if you need help from accessibility standpoint feel free to ask me.","Both Properties and BuildOutput controls are actually custom drawn controls, they are basically just a canvas control in reality.","@cra0zy Does it means that with current approach accessability implementation isn't possible?","There should be ways. It's indeed more complicated but it should be possible to do something about this."],"labels":["MGCB Editor"]},{"title":"XAudio2 crash on audio file set below Best quality in Content Pipeline","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nI have an MP3 file processed as a Sound Effect. To reduce build size, I set the quality to Medium in the content pipeline. On DesktopGL builds, I have no issues, but on a WindowsDX build, the game always crashes when trying to play that sound effect. The game also crashes if the quality is set to Low. However, when I set the quality to Best, it does not crash.\r\n\r\nI did indeed change the platform to Windows in the content pipeline before processing the content for the Windows build.\r\n\r\n```\r\nStack Trace:\r\n   at SharpDX.Result.CheckError()\r\n   at SharpDX.XAudio2.XAudio2.CreateSourceVoice_(SourceVoice sourceVoiceOut, IntPtr sourceFormatRef, VoiceFlags flags, Single maxFrequencyRatio, IntPtr callbackRef, Nullable`1 sendListRef, Nullable`1 effectChainRef)\r\n   at SharpDX.XAudio2.SourceVoice.CreateSourceVoice(XAudio2 device, WaveFormat sourceFormat, VoiceFlags flags, Single maxFrequencyRatio, IntPtr callback, EffectDescriptor[] effectDescriptors)\r\n   at Microsoft.Xna.Framework.Audio.SoundEffect.PlatformSetupInstance(SoundEffectInstance inst)\r\n   at Microsoft.Xna.Framework.Audio.SoundEffect.CreateInstance()\r\n```\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7 (develop)\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- WindowsDX\r\n","comments":["Do you happen to have a SharpDX error code with the exception message?\r\n\r\nDoes it crash with absolutely all files and only some of them (if so, could you share one that fails?).","This is what I can gather from the crash:\r\n\r\n```\r\nHRESULT: [0x88960001], Module: [SharpDX.XAudio2], ApiCode: [XAUDIO2_E_INVALID_CALL\/InvalidCall], Message: Unknown\r\n```\r\n\r\nLater today or tomorrow, I'll test on an empty project with a few files and report back.","Here's a barebones project reproducing the issue. Simply load up the game and press the Space bar to crash it.\r\n[TestXAudioCrash.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/3050144\/TestXAudioCrash.zip)\r\n\r\nYou can change the content import settings and see that setting it to Best won't crash but Medium and Low does.\r\n\r\nThe sound used in the test is royalty-free from [here](https:\/\/freesound.org\/people\/Hypnochick\/sounds\/465282\/). The one used in my actual project is completely different, outside of also being an MP3, and crashes as well.","Medium and Low settings produce adpcm wave file with SamplesPerBlock higher then 512.","> \r\n> \r\n> Medium and Low settings produce adpcm wave file with SamplesPerBlock higher then 512.\r\n> FFmpeg fault.\r\n\r\nIf I manually convert the file with the same settings and play it via an audio player (Ex. Windows Media Player), it plays just fine. To my knowledge, msAdpcm and ImaAdcpm are very similar, and the formats are the only difference for the file between WindowsDX and DesktopGL when they're processed by the content pipeline.","Sorry that I did not make myself clear.\r\nXAudio2 uses a modified version of the Microsoft ADPCM codec. FFmpeg output vanilla Microsoft ADPCM file. The difference is in SamplesPerBlock, where XAudio2 smallest block size is 32 samples, and the highest is 512 samples. Microsoft ADPCM can have much larger size, FFmpeg output 1k samples. \r\nXAudio2 library is very strict about the format of the data becuase xbox uses the same library and decode sound via hardware dsp so creating XAudio2 object without proper adpcm data will end with an exception like in your example.","Thanks for the explanation! Would we need to lower the settings in FFmpeg for platforms using XAudio2 to fix this?"],"labels":["ContentPipeline","Audio"]},{"title":"Content Pipeline Tool crashes on open\/save file dialogs","body":"Basically what it says on the tin. Whenever I try to open a file open\/save dialog in the Content Pipeline Tool, it just crashes.\r\n\r\nTrying to use File > Import, right-click and Add > Existing Item..., or adding a new reference reproduces this problem for me every single time. I have no idea what could be causing this nor what more information to provide that would be helpful beyond the stack trace.\r\n\r\nJust out of curiosity I also tried on the 3.7.1 release and the problem still persists.\r\n\r\n``\r\nSystem.Runtime.InteropServices.COMException (0x80040111): Creating an instance of the COM component with CLSID {DC1C5A9C-E88A-4DDE-A5A1-60F82A20AEF7} from the IClassFactory failed due to the following error: 80040111 ClassFactory cannot supply requested class (Exception from HRESULT: 0x80040111 (CLASS_E_CLASSNOTAVAILABLE)).\r\n   at System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean noCheck, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor, Boolean& bNeedSecurityCheck)\r\n   at System.RuntimeType.CreateInstanceSlow(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache, StackCrawlMark& stackMark)\r\n   at System.Activator.CreateInstance(Type type, Boolean nonPublic)\r\n   at System.Activator.CreateInstance(Type type)\r\n   at Microsoft.Win32.OpenFileDialog.CreateVistaDialog()\r\n   at Microsoft.Win32.FileDialog.RunVistaDialog(IntPtr hwndOwner)\r\n   at Microsoft.Win32.CommonDialog.ShowDialog(Window owner)\r\n   at Eto.Wpf.Forms.WpfCommonDialog`2.ShowDialog(Window parent)\r\n   at MonoGame.Tools.Pipeline.MainWindow.ChooseContentFile(String initialDirectory, List`1& files)\r\n   at MonoGame.Tools.Pipeline.PipelineController.Include()\r\n   at Eto.Forms.Command.OnExecuted(EventArgs e)\r\n   at Eto.Forms.Command.System.Windows.Input.ICommand.Execute(Object parameter)\r\n   at Eto.Forms.MenuItem.OnClick(EventArgs e)\r\n   at Eto.Forms.MenuItem.Callback.OnClick(MenuItem widget, EventArgs e)\r\n   at Eto.Wpf.Forms.Menu.MenuItemHandler`3.OnClick()\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.Controls.MenuItem.InvokeClickAfterRender(Object arg)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at MonoGame.Tools.Pipeline.Program.Main(String[] args)\r\n``\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.0.341\r\n\r\n#### What operating system are you using:\r\n- Windows 10 Version 1809\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n","comments":["After doing a bit of digging, I've found a solution to the problem. I found this [SO post](https:\/\/stackoverflow.com\/questions\/29929862\/exception-from-hresult-0x80040111-class-e-classnotavailable) which details that the root cause has to do with the visual themes being turned off. I use a high contrast theme due to vision problems, so that means the only way for me to use the Content Pipeline Tool is to re-enable the visual themes. This should really be looked into because it's a legitimate usability and accessibility concern. That also means this issue should be easily reproducable. All one would need to do is disable visual themes, such as by enabling high contrast.","@cwensley Pinging you as this might be an issue with Eto Forms WPF backend in general, gonna test it out tomorrow if I get some time.","@harry-cpp did this ever get fixed?","Nope."],"labels":["MGCB Editor"]},{"title":"Surface format sRGB doesn't have an alpha channel in OpenGL","body":"In the file GraphicsExtensions.cs in DesktopGL, the SurfaceFormat ColorSrgb is mapped to OpenGL pixelformat SRGB_EXT 0x8C40 which does not have an alpha component.\r\nI believe this is unintentional and it should instead be mapping to SRGB_ALPHA_EXT 0x8C42 (see https:\/\/www.khronos.org\/registry\/OpenGL\/extensions\/EXT\/EXT_sRGB.txt )\r\n\r\nThe enum should maybe also be called ColorSrgba? SurfaceFormat.cs provides the summary \"Unsigned 32-bit RGBA sRGB pixel format that supports 8 bits per channel.\". \r\nIt would certainly be useful to have both an sRGB and sRGBA format available for DesktopGL. If we can agree on which Pixelformat ColorSrgb is intended to represent, I can take a stab at fixing this.","comments":[],"labels":["OpenGL","Design"]},{"title":"Rebuilding doesn't work in Content Pipeline.","body":"<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.1\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n\r\nIf file in the Pipeline isn't changed, it won't rebuild. Pipeline says it's building if you press Rebuild, but unless you delete bin and obj folder, it'll stay the same.\r\n","comments":["@gnFur I think you forgot to describe your issue XD","> \r\n> \r\n> @gnFur I think you forgot to describe your issue XD\r\n\r\nAccidentally pressed Send."],"labels":["MGCB Editor"]},{"title":"ContentWriter bugged...","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nwhenever I get the \"ContentWriter.BaseStream\" pointer, then the ContentWriter adding again and again the header in the file. Why ContentWrite write something in the file, i only get basestream.position?\r\n\r\nIf i do something like below:\r\n```\r\n\r\n        protected override void Write(ContentWriter cs_writer, TilesetContentData tsdata)\r\n        {\r\n            long a = cs_writer.BaseStream.Position;\r\n            long b = cs_writer.BaseStream.Position;\r\n            long c = cs_writer.BaseStream.Position;\r\n            long d = cs_writer.BaseStream.Position;\r\n            long e = cs_writer.BaseStream.Position;\r\n            long f = cs_writer.BaseStream.Position;\r\n            long g = cs_writer.BaseStream.Position;\r\n        };\r\n\r\n```\r\nMy file will have \"8\" XNB header files.\r\n\r\nmy workaround if i need 'basestream.position' just make first MemoryStream, and later everything copy by Write(memstream.ToArray());\r\n\r\n[http:\/\/oi65.tinypic.com\/2gx1eer.jpg](http:\/\/oi65.tinypic.com\/2gx1eer.jpg)\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["`ContentWriter` writes stuff when its [`Flush`](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/72919dc8185e70734507b58bd9a8e03bfe9a0d96\/MonoGame.Framework.Content.Pipeline\/Serialization\/Compiler\/ContentWriter.cs#L125-L176) method is called. This is not correct behavior. Flush should not do the actual writing.","Hi! I'm a first time contributor and I'd like to take a stab at fixing this if it's still a problem!","I don't think this issue is still relevant. This behavior is inherited from ```BinaryWriter``` and doesn't seem to be a MonoGame issue. This should be tested against .NET 8 to be sure.","That doesn't sound right @mrhelmut. The `Flush` implementation should complete buffered write operations, but `ContentWriter` actually writes new data to the underlying stream.\r\nYou can see from the doc comment that the implementation has a wrong perception of what `Flush` should do:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/72919dc8185e70734507b58bd9a8e03bfe9a0d96\/MonoGame.Framework.Content.Pipeline\/Serialization\/Compiler\/ContentWriter.cs#L123\r\n\r\nCompare with `BinaryWriter.Flush`'s [docs and implementation](https:\/\/github.com\/dotnet\/runtime\/blob\/589beb0b2af3edd1b272f8ac21ca5e3fb142bdd0\/src\/libraries\/System.Private.CoreLib\/src\/System\/IO\/BinaryWriter.cs#L123-L128):\r\n\r\n```csharp\r\n        \/\/ Clears all buffers for this writer and causes any buffered data to be\r\n        \/\/ written to the underlying device.\r\n        public virtual void Flush()\r\n        {\r\n            OutStream.Flush();\r\n        }\r\n```\r\n\r\nThe thing to figure out here is when we do need to write the stuff we now write in `Flush`.","From the sounds of it, and from what I've seen, the current Flush call is working to finalize the file after the main body of content has been written, instead of only writing out the remaining data in the buffer. It seems as though this can either be slotted elsewhere in the ContentWriter class where it makes more sense or contained in its own method. What would be best given the current architecture?  "],"labels":["ContentPipeline","Good First Issue"]},{"title":"Android viewport not set correctly on some devices.","body":"<!-- Write your issue below -->\r\n\r\nUsing a default Android MonoGame project in VS 2017, then just loading and drawing a texture to fill the screen, borders appear at the edges on some devices. This problem does not show up on the emulator.\r\n\r\nI've tried the SetImmersive() option mentioned in [this other issue](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/4818) which _a)_ hides the navigation bar which is not really what I want to do and _b)_ just makes things worse.\r\n\r\nHere's the Draw function:\r\n\r\n    protected override void Draw(GameTime gameTime)\r\n    {\r\n        GraphicsDevice.Clear(Color.LightGoldenrodYellow);\r\n   \r\n        spriteBatch.Begin();\r\n\r\n        spriteBatch.Draw(_textures[0], Window.ClientBounds, Color.White);\r\n        \/\/ spriteBatch.Draw(_textures[0], GraphicsDevice.Viewport.Bounds, Color.White);\r\n        \/\/ spriteBatch.Draw(_textures[0], new Rectangle(0, 0, GraphicsDevice.PresentationParameters.BackBufferWidth, GraphicsDevice.PresentationParameters.BackBufferHeight), Color.White);\r\n        spriteBatch.End();\r\n   \r\n        base.Draw(gameTime);\r\n    }\r\n\r\nHere's some shot's from 3 different devices:\r\n\r\nMotorola G4 Plus (Android 7.0):\r\n\r\n![monogame_motog4plus](https:\/\/user-images.githubusercontent.com\/19970935\/52595473-e0c2e180-2e45-11e9-9957-e852f245e841.png)\r\n\r\nMotorola G5S Plus (Android 7.1.1):\r\n\r\n![monogame_motog5splus](https:\/\/user-images.githubusercontent.com\/19970935\/52595498-ef10fd80-2e45-11e9-8630-4f687c7680f8.png)\r\n\r\nGeneric Andrdid Tablet (Android 4.4.2):\r\n\r\n![monogame_tablet](https:\/\/user-images.githubusercontent.com\/19970935\/52595560-0e0f8f80-2e46-11e9-9835-1efd7beaa15e.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.1\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n- Android","comments":["Are you seeing anything different when drawing using the Viewport bounds?","No, the same problem occurs.","What's the value of Viewport during draw?\r\n","I've noticed that this has to do with the size set in the constructor. The default project has the graphics.PreferredBackBuffer set to 800x480. I thought MonoGame would adjust the actual size automatically but it looks like I have to get the actual screen size and adjust the graphics.PreferredBackBuffer accordingly to keep the ratio intact.","You can see this problem in the emulator also. Just set the backbuffer size to e.g. 600x400 and it happens there also (for both Window.ClientBounds and GraphicsDevice.Viewport.Bounds).\r\n\r\n    graphics.PreferredBackBufferWidth = 600;\r\n    graphics.PreferredBackBufferHeight = 400;\r\n\r\n![androidemuproblem](https:\/\/user-images.githubusercontent.com\/19970935\/52634949-6daa8100-2ec0-11e9-8dc0-ffbd10577c7d.jpg)\r\n","I've [written about this](http:\/\/community.monogame.net\/t\/camera2d-screentoworld-not-working-as-expected-across-all-mobile-devices\/11278\/8) a couple of days before. \r\n\r\nThe problem is [GraphicsDeviceManager.ResetClientBounds()](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/6f34eb393aa0ac005888d74c5c4c6ab5615fdc8c\/MonoGame.Framework\/GraphicsDeviceManager.Legacy.cs#L561-L576), it is trying to 'fix' the resolution but its not working. Touch and rendering are still wrong and many reported issues are related to this. \r\nThe backbuffer can be set to the native resolution and nothing else. \r\nIMO, it should throw an exception as it does on the desktop when you go fullscreen.\r\n","I've got a workaround, at least it works on the devices I have here and on the emulator also.\r\n\r\nIn Activity.cs:\r\n\r\n```\r\nprivate readonly bool _setImmersive = true;\r\nprivate Game1         _game;\r\nprivate View          _view;\r\n\r\nprotected override void OnCreate(Bundle bundle)\r\n{\r\n  base.OnCreate(bundle);\r\n  \r\n  GetDisplaySize(out int width, out int height);\r\n  _game = new Game1(width, height);\r\n\r\n  _view = (View)_game.Services.GetService(typeof(View));\r\n  SetContentView(_view);\r\n\r\n  _game.Run();\r\n}\r\n\r\nprivate void GetDisplaySize(out int width, out int height)\r\n{\r\n  var realSize = new Android.Graphics.Point();\r\n  WindowManager.DefaultDisplay.GetRealSize(realSize);\r\n  \r\n  System.Console.WriteLine(\"Default Real Size: \" + realSize);\r\n  \r\n  var rectSize = new Android.Graphics.Rect();\r\n  WindowManager.DefaultDisplay.GetRectSize(rectSize);\r\n  \r\n  System.Console.WriteLine(\"Default Rect Size: \" + rectSize);\r\n\r\n  if (_setImmersive) { width = realSize.X;       height = realSize.Y; }\r\n  else               { width = rectSize.Width(); height = rectSize.Height(); }\r\n}\r\n\r\npublic override void OnConfigurationChanged(Configuration newConfig)\r\n{\r\n  GetDisplaySize(out int width, out int height);\r\n  _game.ConfigurationChanged(width, height);\r\n\r\n  base.OnConfigurationChanged(newConfig);\r\n}\r\n\r\npublic override void OnWindowFocusChanged(bool hasFocus)\r\n{\r\n  base.OnWindowFocusChanged(hasFocus);\r\n\r\n  if (_setImmersive)\r\n  {\r\n    if (hasFocus)\r\n      SetImmersive();\r\n  }\r\n}\r\n\r\nprivate void SetImmersive()\r\n{\r\n  if (_view != null && Android.OS.Build.VERSION.SdkInt >= Android.OS.BuildVersionCodes.Kitkat)\r\n  {\r\n    _view.SystemUiVisibility = (StatusBarVisibility)\r\n      (SystemUiFlags.LayoutStable |\r\n       SystemUiFlags.LayoutHideNavigation |\r\n       SystemUiFlags.LayoutFullscreen |\r\n       SystemUiFlags.HideNavigation |\r\n       SystemUiFlags.Fullscreen |\r\n       SystemUiFlags.ImmersiveSticky);\r\n  }\r\n}\r\n```\r\n\r\nand in Game.cs:\r\n\r\n```\r\npublic Game1(int width, int height)\r\n{\r\n\tgraphics = new GraphicsDeviceManager(this);\r\n\t\r\n\tContent.RootDirectory = \"Content\";\r\n\r\n\tgraphics.IsFullScreen = true;\r\n\tgraphics.PreferredBackBufferWidth  = width;\r\n\tgraphics.PreferredBackBufferHeight = height;\r\n\t\r\n\tgraphics.SupportedOrientations = DisplayOrientation.LandscapeLeft | DisplayOrientation.LandscapeRight | DisplayOrientation.Portrait | DisplayOrientation.PortraitDown;\r\n}\r\n\r\npublic void ConfigurationChanged(int width, int height)\r\n{\r\n\tgraphics.PreferredBackBufferWidth  = width;\r\n\tgraphics.PreferredBackBufferHeight = height;\r\n\tgraphics.ApplyChanges();\r\n}\r\n```","And I should explain that the _setImmersive flag can be set to true or false as desired - both scenarios work without problems for me.","This issue still exists in Monogame 3.8"],"labels":["Android"]},{"title":"VertexBufferWriter writes wrong dataSize","body":"#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.1.189\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n- WindowsDX\r\n\r\nI'm trying to use models from Blender using the .blend file format but VertexBufferWriter writes the wrong dataSize to the XNB file.\r\n\r\n`VertexBufferWriter` calculates the dataSize and writes it to the XNB file. As you can see from the screenshot below the result of the calculation is `22`.\r\n![image](https:\/\/user-images.githubusercontent.com\/1859029\/51865694-5fe4ef80-2347-11e9-9314-d61fa33cdbaf.png)\r\n\r\nHere the `VertexBufferReader` attempts to load the data again but a dataSize of `528` is wrong. It should have been `544`.\r\n![image](https:\/\/user-images.githubusercontent.com\/1859029\/51865782-a0dd0400-2347-11e9-85ff-183c88540eda.png)\r\n\r\nIt might be a good idea to store the actual dataSize rather than calculating it?\r\n\r\nNote this issue resembles https:\/\/github.com\/MonoGame\/MonoGame\/issues\/6237 however I don't believe it is 100% the same.\r\n\r\nThis is the Blender model I used: [Wall.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/2804946\/Wall.zip)\r\n\r\n\r\n","comments":["Hi Tom,\r\n\r\nI cannot see your comment on github so I wondered if you deleted it again.\r\nHowever, you are right, the model looks horrible when rendered by MonoGame if I\r\nmake the chance I suggested.\r\n\r\nSo now my suggestion is that an exception is to be thrown if the vertex array\r\nis invalid at build time, so the exception message is displayed in the\r\ncontent builder output. The issue is that depending on how invalid the\r\nvertex buffer is you will see different exception messages due to the wrong\r\noffsets while reading the XNB file. This makes it very difficult to search\r\nfor a solution to the problem and stepping in the MonoGame source code to\r\nfigure out what is causing the problem like I did takes a lot of time.\r\n\r\nOn Tue, Jan 29, 2019 at 9:41 AM Tom Lint <notifications@github.com> wrote:\r\n\r\n> The problem is that your source vertex array is invalid; it's length is\r\n> not a whole multiple of the VertexStride, which you can see when performing\r\n> the division in Windows Calculator.\r\n>\r\n","@robintheilade that is correct. I re-read your post and the linked issue, and felt my answer didn't really fit the situation, so I deleted it. It was the first thing that came to mind at the time I wrote it, and I hadn't looked at the linked issue, yet.\r\n\r\nI'll quote my post below, as I now realize it indeed had some merit, even if only to point out that the issue seems to lie in or near the VertexBufferContent class.\r\n> The problem is that your source vertex array is invalid; it's length is\r\n> not a whole multiple of the VertexStride, which you can see when performing\r\n> the division in Windows Calculator.\r\n","Placing the following code inside the `ModelProcessor.ProcessMesh` method will display a somewhat more useful error message in the content builder.\r\n\r\n```csharp\r\n\/\/ throw an error if length of VertexData is not divisible by the length of VertexStride\r\n\/\/ if we do not fail here VertexBufferWriter will write a size that VertexBufferReader\r\n\/\/ cannot use to recalculate the correct VertexData size and hence not read enough bytes\r\nif (vertexBuffer.VertexData.Length % vertexBuffer.VertexDeclaration.VertexStride > 0)\r\n{\r\n\tthrow new PipelineException($\"VertexData size ({vertexBuffer.VertexData.Length}) must be divisible by the VertexStride size ({vertexBuffer.VertexDeclaration.VertexStride}) in geometry ({geometry.Name ?? mesh.Name}).\");\r\n}\r\n```\r\n\r\nAs seen here:\r\n![image](https:\/\/user-images.githubusercontent.com\/1859029\/52006294-1540b000-24cc-11e9-934d-066f35b3457d.png)\r\n\r\nThoughts?"],"labels":["ContentPipeline","Help Wanted"]},{"title":"HRTF support","body":"It would be really cool if MonoGames 3D audio system supported [HRTF](https:\/\/en.wikipedia.org\/wiki\/Head-related_transfer_function).\r\n\r\nWe should probably have a flag somewhere that indicates if HRTF is supported, maybe through an `AudioCapabilities` similar to how `GraphicsCapabilities` work. Though if we later would add caps that depend on hardware they could change when a device is (un)plugged (which doesn't really happen for GPUs).\r\n\r\nOpenAL Soft supports applying a hrtf: https:\/\/github.com\/kcat\/openal-soft\/blob\/master\/docs\/hrtf.txt\r\nSo that should be fairly straightforward to implement.\r\n\r\nXAudio2 also supports it: https:\/\/docs.microsoft.com\/en-us\/windows\/mixed-reality\/spatial-sound-in-directx\r\nBut there's no mapping for the relevant functions yet in SharpDX, so we'd need to add those:\r\nhttps:\/\/github.com\/sharpdx\/SharpDX\/blob\/master\/Source\/SharpDX.XAudio2\/XAPO\/Mapping.xml","comments":["Would appreciate support for HRTF within mono game as well, in fact thats currently probably the own reason why I didn't give it a shot yet, even though I like the concept and style of it very well.\r\nI'll gladly follow this feature request and ready myself to start developing as soon as this feature might come in a future version of mono game. If there is anything I can help with, just let me know.","Turns out it is quite easy to implement HRTF to MonoGame. Update the\nOpenAL Soft DLL's, and while creating the attribute for the context,\nprovide an HRTF option (0x1992 I believe). And That's it, it'll work.\n\nOn 2\/3\/19, Toni Barth <notifications@github.com> wrote:\n> Would appreciate support for HRTF within mono game as well, in fact thats\n> currently probably the own reason why I didn't give it a shot yet, even\n> though I like the concept and style of it very well.\n> I'll gladly follow this feature request and ready myself to start developing\n> as soon as this feature might come in a future version of mono game. If\n> there is anything I can help with, just let me know.\n>\n> --\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> https:\/\/github.com\/MonoGame\/MonoGame\/issues\/6653#issuecomment-460003847\n","That sounds great, is there any link to the dlls which need to be updated or at least their new versions? How about cross-platform support regarding this topic? Replacing OpenAL sounds like a Windows-only solution, or are we talking about .Net assemblies here?\r\nIs there probably even a repo with some working example somewhere? If not, i'll try to create a basic working example to demonstrate the usage in the near future.","I've been working on a cross-platform solution for a week now, it was\nme who requested this feature initially. I got it to work fine on\nWindows, and I'll submit a pull request when I'm done.\n\nOn 2\/3\/19, Toni Barth <notifications@github.com> wrote:\n> That sounds great, is there any link to the dlls which need to be updated or\n> at least their new versions? How about cross-platform support regarding this\n> topic? Replacing OpenAL sounds like a Windows-only solution, or are we\n> talking about .Net assemblies here?\n> Is there probably even a repo with some working example somewhere? If not,\n> i'll try to create a basic working example to demonstrate the usage in the\n> near future.\n>\n> --\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> https:\/\/github.com\/MonoGame\/MonoGame\/issues\/6653#issuecomment-460004410\n","sounds great to me, will follow this thread to get updated on any news regarding this topic.","Hi!\r\n\r\n@SemihBudak when you said in your comment, pass HRTF option while creating the context, where you have to do that?\r\n\r\nThinking obvious for a small monogame c# example.\r\nFor example, if you want apply hrtf with openal to the 3daudio example on the tutorial, what you have to add, plus update the openal dll?\r\n\r\nI'm interested on this too, so I want to try myself if that possible.\r\n\r\nThanks!","Is really sad how this issue is not considered to enable or create a config option to enable this feature, taht teorically, monogame current have it under its engines. but well.","Any news on this?","Not as of now. There are likely more important works in the audio namespace to go through first, like moving away from OpenAL (which has hard limitations on effects and XACT simulations, which make it impossible to actually be accurate toward XAudio\/XNA).\r\n\r\nA suggested move would be to replace all audio backends by a unique FAudio implementation. We could then look into expanding audio features more conveniently.","Exists any news about this?\r\n\r\nAre you evolving the audio engine of monogame? how is the HRTF support on the current situation?\r\n\r\nThanks\r\n"],"labels":["Feature Request","Design","Audio"]},{"title":"Crash setting window title on Mac OS X","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nFor some strings, setting the window title causes a full crash.\r\ne.g.\r\n` Window.Title = \"FPS: 60\";\r\n`\r\n\r\ncauses the following crash:\r\n```\r\n\t0   CoreFoundation                      0x00007fffaea9357b __exceptionPreprocess + 171\r\n\t1   libobjc.A.dylib                     0x00007fffc3cf51da objc_exception_throw + 48\r\n\t2   CoreFoundation                      0x00007fffaea98132 +[NSException raise:format:arguments:] + 98\r\n\t3   Foundation                          0x00007fffb04ffbe0 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 195\r\n\t4   AppKit                              0x00007fffac58a20f -[NSWindow setTitle:] + 149\r\n\t5   libSDL2-2.0.0.dylib                 0x00000001049f2c09 Cocoa_SetWindowTitle + 137\r\n\r\n```\r\n\r\nPutting a space before the colon works ok, e.g.:\r\n` Window.Title = \"FPS : 60\";\r\n`\r\n\r\nSo there must be some formats that are not allowed for some reason in the call to [NSWindow setTitle:].\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.1.189\r\n\r\n#### What operating system are you using:\r\n- Mac OS X\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n","comments":["This problem is present in the latest dev build (3.8.0.271) and in 3.7.1 and 3.7, but does not occur in version 3.6 so it was introduced between the 3.6.0.1625 release and the 3.7 release.","I think this might happen because Window.SetTitle does not marshal the string with a null terminator on DesktopGL. I'll look into this!","Trying this on OSX 10.3.6 with XCode 10.1 installed, the behaviour is worse. Any string with a colon or a minus character in it will causes the same crash.","Almost sounds like Mac OS has special handling for these characters when present in a window's title.","Changing my Mac projects target framework from \"Xamarin.Mac.Modern\" to \"Xamarin.Mac.Full (.NetFrameWork4.5)\" makes the problem go away. Switching back and the problem is there again.","Sorry, last comment is not quite true. That was using a local debug build of MonoGame.Framework. Using any released framework (including my a local one) causes the crash. Using the local Debug with Xamarin.Mac.Full was ok.\r\n\r\nAlso I noticed in some situations the string was being shown, but with an extra letter at the end.\r\n\r\nI tried adding a space to the end of the string, and also the problem went away. So it looks like some string corruption in some situations.\r\n\r\nAs a workaround, I just add a space to the start and end of any title I want to set.","That workaround I posted above has stopped working for some reason.\r\n\r\nThe crash is still occurring in the latest dev build, in the call to SDL_SetWindowTitle()  in the function SetTitle() in SDL\\SDL2.cs.\r\n\r\nIts a pretty nasty bug this one and should be fixed up.","More info:\r\n```\r\n2019-04-30 17:52:16.932 Solitaire 3D[38946:120995] *** Assertion failure in -[SDLWindow setTitle:], \/Library\/Caches\/com.apple.xbs\/Sources\/AppKit\/AppKit-1504.83.101\/AppKit.subproj\/NSWindow.m:3057\r\n2019-04-30 17:52:16.933 Solitaire 3D[38946:120995] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Invalid parameter not satisfying: aString != nil'\r\n*** First throw call stack:\r\n(\r\n\t0   CoreFoundation                      0x00007fffcc01457b __exceptionPreprocess + 171\r\n\t1   libobjc.A.dylib                     0x00007fffe12761da objc_exception_throw + 48\r\n\t2   CoreFoundation                      0x00007fffcc019132 +[NSException raise:format:arguments:] + 98\r\n\t3   Foundation                          0x00007fffcda80be0 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 195\r\n\t4   AppKit                              0x00007fffc9b0b20f -[NSWindow setTitle:] + 149\r\n\t5   libSDL2-2.0.0.dylib                 0x00000001035f3c09 Cocoa_SetWindowTitle + 137\r\n\t6   ???                                 0x000000010a0a7e6e 0x0 + 4463427182\r\n)\r\nlibc++abi.dylib: terminating with uncaught exception of type NSException\r\n\r\n```","I am unable to reproduce this one, I'm assuming that the problem was with the SDL lib that comes with 3.7 release.","Thie problem is still happening with SDL 2.0.10:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/19970935\/79258126-980c1b80-7e82-11ea-82e6-93153ffc0828.png)\r\n\r\n```\r\nApplication Specific Information:\r\n*** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Invalid parameter not satisfying: aString != nil'\r\nabort() called\r\nterminating with uncaught exception of type NSException\r\n\r\nApplication Specific Backtrace 1:\r\n0   CoreFoundation                      0x00007fffbdc4857b __exceptionPreprocess + 171\r\n1   libobjc.A.dylib                     0x00007fffd2ec21da objc_exception_throw + 48\r\n2   CoreFoundation                      0x00007fffbdc4d132 +[NSException raise:format:arguments:] + 98\r\n3   Foundation                          0x00007fffbf6b4be0 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 195\r\n4   AppKit                              0x00007fffbb73f20f -[NSWindow setTitle:] + 149\r\n5   libSDL2-2.0.0.dylib                 0x000000010bae941e Cocoa_SetWindowTitle + 110\r\n6   ???                                 0x00000001129f11b3 0x0 + 4607381939\r\n```\r\n","Can you give me a sample project?","The Window.Title assignment calls the following code:\r\n```\r\npublic static void SetTitle(IntPtr handle, string title)\r\n{\r\n   var bytes = Encoding.UTF8.GetBytes(title);\r\n   SDL_SetWindowTitle(handle, ref bytes[0]);\r\n}\r\n```\r\nI've noticed that if instead I use this code to set the Mac window title:\r\n```\r\nif (NSApplication.SharedApplication.MainWindow != null)\r\n   NSApplication.SharedApplication.MainWindow.Title = title;\r\n```\r\nThe crash does not occur.\r\n\r\nSo maybe this is a solution?","Sorry, I can't get you a project. I tried to reproduce the problem on a smaller test project I have but could not.","Are you by any chance setting title on a separate thread?","No, its been called from the Update() tick.","Guys, any news on this issue?","@egordorichev A reproduction project would help if you have one.","Huh, 150k line codebase won't help, I think. For now, I went around the issue by not setting window title on mac builds what so ever. Whenever I set a title there is around 10% chance that it fails. ","Same here. I could only reproduce it in a large project, not a small test one. Have you tried my workaround above? Use the following instead on Macs:\r\n```\r\nif (NSApplication.SharedApplication.MainWindow != null)\r\n   NSApplication.SharedApplication.MainWindow.Title = title;\r\n```","@AidanMcK I searched through the code base but couldn't pinpoint the place where that code is. Could you tell me what repo\/file is it in? Thanks","@egordorichev Its not in the codebase at all.\r\n\r\nI use that code above instead of setting Window.Title for Mac projects in my own code."],"labels":["MacOS"]},{"title":"[Android] Xbox One Wireless controller triggers are not working properly","body":"Xbox One Bluetooth Wireless controller has triggers on different axis than the default android controllers.\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n- Android \r\n","comments":[],"labels":["Android","Input"]},{"title":"[Android] Streaming Audio takes a second to start, then skips ahead","body":"Streaming audio playback for Song on Android is silent by a second or two.  When the audio kicks in, it will be that much time into the song.  This is particularly noticeable if you try to play two songs back to back.\r\n\r\nTo investigate, I created my own Android MediaPlayer in my Activity and streamed mp3 and ogg files. It played correctly.  Then I noticed that the default format used by monogame for non-Windows platforms is mp4\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework.Content.Pipeline\/Audio\/DefaultAudioProfile.cs\r\n\r\nWhen I streamed files in this format, I replicated the playback errors. \r\n\r\n I don't know if this is an issue with Android or possibly with my device (sorry, I only have access to one Android device).  If it is an issue with Android playback, using a different format seems to be the solution.\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Android 9 on Google Pixel 2 XL\r\n\r\n#### What MonoGame platform are you using:\r\n\r\nAndroid","comments":[],"labels":["Android","Audio"]},{"title":"[windows dx] RenderTarget2D.SaveAsPng width & height parameters are unused","body":"## Traced route\r\n\r\n```csharp\r\n        \/\/ just my code\r\n        MyRendertarget.SaveAsPng(MyStream, 64, 64)\r\n\r\n        \/\/ leads to\r\n        public void SaveAsPng(Stream stream, int width, int height)\r\n        {\r\n            \/\/ Tracing this\r\n            PlatformSaveAsPng(stream, width, height);\r\n        }\r\n\r\n        \/\/ width, height are not used\r\n        private void PlatformSaveAsPng(Stream stream, int width, int height)\r\n        {\r\n            var pngWriter = new PngWriter();\r\n            pngWriter.Write(this, stream);\r\n        }\r\n```\r\n\r\n## Proposed solution\r\nAs `pngWriter.Write(this, stream);` works with Texture2D size, from my understanding it wouldn't be easy to patch it to work with w & h other than native to the passed Texture. Therefore my suggestion is to scale RenderTarget2D and pass it in proper size to `pngWriter.Write();` current implementation.\r\n\r\n```csharp\r\n        \/\/ Define a temp RenderTarget of correct size\r\n        RenderTarget2D temp = new RenderTarget2D(GraphicsDevice, width, height);\r\n        GraphicsDevice.SetRenderTarget(temp);  \r\n\r\n        \/\/ Rectangle can either be defined here or pooled to prevent garbage generation     \r\n        GeneralRectangle.X = 0;\r\n        GeneralRectangle.Y = 0;\r\n        GeneralRectangle.Width = width;\r\n        GeneralRectangle.Height = height;\r\n\r\n        \/\/ Drawback - extra batch call and user can't control arguments passed to sb.Begin \r\n        \/\/ also SpriteBatch \"sb\" would need to be passed\r\n        sb.Begin();\r\n        sb.Draw(temp, GeneralRectangle, Color.White);\r\n        sb.End();\r\n   \r\n        \/\/ either to null or remember original RenderTarget\r\n        GraphicsDevice.SetRenderTarget(null);\r\n\r\n        \/\/ finally save result\r\n        temp.SaveAsPng(stream, width, height);\r\n```\r\n\r\nTested this patch to prove it working, but this is rather in-framework solution. There are several drawbacks mentioned, it may be more efficient to scale Texture directly in `pngWriter.Write` before passing it to Zlib.\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n- WindowsDX\r\n","comments":["I think we need to resize on the CPU. We can't really change the render target and restore the old one because that might discard the old content. ","@Jjagg Correct, I've forgot about this. Guess this is not a priority for you, I'll try to patch up a PR. ","It is not. A PR would be greatly appreciated :) \nOne thing to be considered is what kind of filter we should use when resizing. \nAnother thought is that we could maybe use a pooled array to store resized data in.","How do you get the pixel data out of the texture internally ? \r\nWith get data ? If so does that work on all platforms ?","btw, StbSharp project has stb_image_resize.h ported: https:\/\/github.com\/rds1983\/StbSharp\/blob\/master\/StbSharp\/StbImageResize.Generated.cs\r\n\r\nThough maybe it's not rational to include file with 2k lines in MG to support feature that almost noone use(SaveAsPng with sizes).\r\nBut it's still a possible solution.","> How do you get the pixel data out of the texture internally ?\nWith get data ? If so does that work on all platforms ?\n\nThe back end graphics APIs expose a way to copy data from GPU memory to CPU RAM. Some lower end Android devices don't support this if I remember correctly.\n\n> StbSharp project has stb_image_resize.h ported\n\nResizing is a pretty complex operation. If we implement this I think it'd be great to use StbImageResize.","> Resizing is a pretty complex operation. If we implement this I think it'd be great to use StbImageResize.\r\n\r\nRight now, MG uses quite outdated StbSharp framework.\r\nWhich is fixed by #6355.\r\nIf it gets merged, then adding StbImageResize(or any other StbSharp module) would mean just copying StbImageResize.cs and StbImageResize.Generated.cs to MG.\r\n","@rds1983 Oops, well that one has been left alone for far too long :sweat_smile: "],"labels":["DirectX"]},{"title":"Clearing a RenderTarget2D renders the first subsequent SetData call ineffective on macOS and nVidia (update: happens also on Windows and Intel GPUs)","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nThe symptom: after clearing a `RenderTarget2D` texture, calling `SetData` on it seems to be ineffective. We observed the problem on 512x512 (and larger) textures. It didn't seem to occur on 256x256 ones.\r\n\r\nFunnily enough, if you render some sprites instead of clearing the texture, `SetData` will only fill the yet-unused areas (just like the pixels would be culled by a z-buffer, yet the RT2Ds have depth buffer disabled).\r\n\r\nI managed to find an ugly workaround. Calling `SetData` 2 times in a row like that seems to trigger the bug in the first call, allowing the second one to do its work properly:\r\n```\r\nrenderTarget.SetData(0, new Rectangle(0, 0, 1, 1), colorData, 1);\r\nrenderTarget.SetData(0, new Rectangle(0, 0, width, height), colorData, width * height);\r\n```\r\n\r\nAnother workaround I have in mind, which I haven't tested yet, would be to create a separate `Texture2D`, set the data, clear the `RenderTarget2D`, then draw the texture on the `RenderTarget2D` using the `SpriteBatch`. It sounds cleaner, but is probably a bit more wasteful.\r\n\r\nI'm attaching the testbed we used to diagnose this problem and a pair of screenshots that will hopefully help visualize the issue.\r\n\r\nTestbed project for .NET Core 2.0: https:\/\/phobia.games\/experiments\/macOSbug\/MonogameTestbed.zip\r\nTestbed project for .NET\/Mono (and the MG development build): https:\/\/phobia.games\/experiments\/macOSbug\/MonogameTestbedNET.zip\r\nExpected behavior: ![Expected](https:\/\/phobia.games\/experiments\/macOSbug\/noerror.jpg)\r\nActual behavior (note that the first texture still works properly): ![Actual](https:\/\/phobia.games\/experiments\/macOSbug\/error.jpg)\r\n\r\nThe bug occurred only on an iMac, which was equipped with an nVidia GPU. We haven't experienced any issues on Windows running on the same machine. Also, we had an access to 2 Macbooks featuring Intel and Radeon GPUs and everything worked like expected as well. So, my guess would be that it might be a driver-related OpenGL issue specific to nVidia and macOS (unless I'm using the RT2Ds in a terribly wrong way). I guess that the next step to try could be writing a lower-level testbed using only plain OpenGL API to test if the issue is reproducible that way.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7 (.NET Core 2.0 and 2.1)\r\n- MonoGame 3.8.0.252 (.NET \/ Mono)\r\n\r\n#### What operating system are you using:\r\n- macOS 10.14\r\n- 3.4 GHz Intel Core i5\r\n- nVidia GeForce 775M\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL (.NET Core 2.0 and .NET \/ Mono)\r\n","comments":["Thanks for the great explanation and repro! \n\nJust to be sure, you're not using multiple threads, right?\n\nI wonder if there's anything we can\/should do here as a workaround. One thing we can try is call glFlush after setting data. Or even glFinish, but that will definitely hurt performance because it waits for all GL commands to finish.","I do use threads in the actual project, but in order to make sure it's not caused by my threading error, the testbeds are single-threaded (they're just default MG templates which I were extending step-by-step, reproducing the real project's conditions, until the bug occured).","We've published a demo of our upcoming game, and some people have reported a strangely similar issue with disappearing level textures.\r\n\r\nOur levels usually consist of several chambers, which are then split into an array of 256x256 chunk textures. A single chunk texture in our game is a `RenderTarget2D`, the content of which (level geometry, some pixel-perfect texture blending, noise etc.) is pre-generated on the CPU, then sent via `SetData`. The bug seems to be rare, but nonetheless, happens often enough to be considered serious.\r\n\r\nI've fixed it (at least for some people) by creating an intermediate `Texture2D`, calling `SetData` on it, then just rendering its contents on the final `RenderTarget2D` using a regular `SpriteBatch`. I need the final texture to be a `RenderTarget2D` because of the blood stains and all the destruction rendered in the real time.\r\n\r\nSo, it seems that the `SetData` implementation is somewhat unreliable when it comes to `RenderTarget2D`s. Perhaps the `byte[]` -> `Texture2D` -> `RenderTexture2D` route is simply necessary to account for certain OpenGL implementations?","That may explain a lot of things. I've had a very similar experience on mobiles and macOS with a game I worked on and shipped there. A bunch of stuff was pre-rendered on the CPU and thrown to ```RenderTarget2D```s. On Android it turned out to be a mess with missing textures. I didn't have the time to investigate back then and things were fixed by basically doing the full compositing on the CPU in a ```Texture2D``` or rendering twice the same texture, and I didn't know why it fixed things.\r\nThere's something going on with ```SetData``` for sure.","Frankly, I'd just deprecate using `SetData` on `RenderTarget2D`s and suggest using an intermediate `Texture2D` instead. Needles to say, this problem wasn't exclusive to macOS (and not all Mac computers even exhibited it), and - given that the primary purpose of `RenderTarget2D` is certainly _not_ to store data processed by the CPU (albeit there are legitimate use cases for that, one of which, I believe, is my own game) - involving the `Texture2D` in the process seems to be the only natural (and also the safest) solution."],"labels":["MacOS","OpenGL"]},{"title":"Content Pipeline tool adds existing directories with subdirectories wrong.","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nContent Pipeline tool recurses subdirectories improperly when adding existing directory, adds leaf directories to the root AND branch directories.\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7, 3.7.1, 3.8\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\nDesktop GL","comments":["Can you give an example of what it currently does and how it differs from what's expected?","Create a nested folder structure for content like so:\r\n![folderstructure](https:\/\/user-images.githubusercontent.com\/66122\/51211004-d7436980-18d9-11e9-904e-002b9c71aea2.png)\r\n\r\nOpen the pipeline tool, right click on content, add existing directory, Textures.  I get this:\r\n![pipelineoutput](https:\/\/user-images.githubusercontent.com\/66122\/51211047-f7732880-18d9-11e9-8d6c-a0aa7ed46523.png)\r\n\r\nI'd expect this:\r\n![expected](https:\/\/user-images.githubusercontent.com\/66122\/51211350-d65f0780-18da-11e9-9f59-802f2b219617.png)\r\n\r\n\r\nIf you close the pipeline tool and reopen it, the empty folders disappear. However, if you open the content folder in file explorer, the pipeline tool has also **created** those empty subdirectories inside your content folder.    This clutters up my content folder with empty subdirs as I like to nest things.","On a similar note adding an existing folder that has some files already added will duplicate those entries in the build file. I do not believe this was the case in Monogame 3.6."],"labels":["MGCB Editor"]},{"title":"Add registers when generating a SpriteEffect fx file.","body":"Currently, when generating a sprite effect in the Content tool (MGCB.exe), a template is generated containing the following code:\r\n\r\n```hlsl\r\nTexture2D SpriteTexture;\r\n\r\nsampler2D SpriteTextureSampler = sampler_state\r\n{\r\n    Texture = <SpriteTexture>;\r\n};\r\n```\r\n\r\nHowever, due to the way the `SpriteBatch` works, this may work only fine when the fx file contains one texture sampler, because the sprite batch assign the first texture in the GraphicsDevice instead of assigning it throught the Effect class.\r\n\r\nWhat I suggest is to modify the template by forcing the register of the SpriteTexture, like this:\r\n\r\n```hlsl\r\nTexture2D SpriteTexture : register(t0);\r\n\r\nsampler SpriteTextureSampler : register(s0)\r\n{\r\n    Texture = <SpriteTexture>;\r\n};\r\n```\r\nThis way, we could use multiple textures within an sprite effect file without having to remember to set the registers.","comments":["This is a duplicate of #6490. The suggested workaround will not work for DirectX. We could make this fix for OpenGL platforms though. "],"labels":["MGCB Editor"]},{"title":"TouchPanel.GetState() return 0 items","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\non inside Update method:\r\n\r\n                `TouchCollection touchCollection = TouchPanel.GetState();\r\n                if (touchCollection.ToList().Exists(x => GetCollisionRectangle().Contains(Position.X, Position.Y)))\r\n                    return;\r\n\r\n                if (touchCollection.Count > 0)\r\n                {\r\n                    focused = false;\r\n                    FocusLost?.Invoke(this, EventArgs.Empty);\r\n                }`\r\n\r\nwhen i'll tap first time and release my tap touchCollection return correctly 1 item, but after first tap others return always 0 items\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.1\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n- Android 8.1 (Xiaiomi Mi6)\r\n","comments":["at moment i resolved by write my owned input service bypassing Android Input Manager inner monogame assembly (need only set Enabled = false and set own TouchListener inner view from game service)\r\n\r\nSame solution for Keyboard, i write my own Keyboard input manager attaching to View Touch event (view from game service).\r\n\r\nToo problem, lag, stuck and performance issue for use monogame inputs method, better write own Android Xamarin events\r\n\r\nif anyone need my own implementation see this code: (better than monogame because it's event driven and not need spent performance inner update method)\r\n\r\n`public class InputService : Java.Lang.Object, IService, View.IOnTouchListener, ViewTreeObserver.IOnGlobalLayoutListener\r\n    {\r\n        public event EventHandler AndroidBackPressed;\r\n        public event EventHandler<(Keycode key, KeyCharacterMap map)> KeyDown;\r\n        public event EventHandler<(Keycode key, KeyCharacterMap map)> KeyUp;\r\n        public event EventHandler<Vector2> TouchPressed;\r\n        public event EventHandler<Vector2> TouchReleased;\r\n        public event EventHandler<Vector2> TouchMoved;\r\n        public event EventHandler KeyboardOpened;\r\n        public event EventHandler KeyboardClosed;\r\n\r\n        public bool IsShiftActive { get; private set; } = false;\r\n        public bool IsKeyboardOpen { get; private set; } = false;\r\n\r\n        private const float MIN_TOUCH_MOVE_DELTA_X = 1;\r\n        private const float MIN_TOUCH_MOVE_DELTA_Y = 1;\r\n\r\n        private bool isTouched = false;\r\n        private Android.Graphics.Point windowRealSize;\r\n        private Vector2 windowSize;\r\n        private Activity activity;\r\n        private Game game;\r\n\r\n        private Vector2 oldTouchPosition = Vector2.Zero;\r\n\r\n        private InputMethodManager inputMethodManager;\r\n        private View keyboardView;\r\n\r\n        public InputService(Activity activity)\r\n        {\r\n            this.activity = activity;\r\n        }\r\n\r\n        public void InitializeInput(Game game)\r\n        {\r\n            this.game = game;\r\n            var gameView = game.Services.GetService<View>();\r\n\r\n            gameView.KeyPress += OnKeyPress;\r\n            gameView.ViewTreeObserver.AddOnGlobalLayoutListener(this);\r\n\r\n            windowRealSize = new Android.Graphics.Point();\r\n            activity.WindowManager.DefaultDisplay.GetRealSize(windowRealSize);\r\n\r\n            windowSize = new Vector2(\r\n                game.GraphicsDevice.PresentationParameters.BackBufferWidth \/ windowRealSize.X,\r\n                game.GraphicsDevice.PresentationParameters.BackBufferHeight \/ windowRealSize.Y);\r\n\r\n            MonoGameAndroidGameView androdiMonoGameView = gameView as MonoGameAndroidGameView;\r\n            androdiMonoGameView.TouchEnabled = false;\r\n            androdiMonoGameView.SetOnTouchListener(this);\r\n\r\n            inputMethodManager = Application.Context.GetSystemService(Context.InputMethodService) as InputMethodManager;\r\n        }\r\n\r\n        private void OnKeyPress(object sender, View.KeyEventArgs e)\r\n        {\r\n            if (!IsKeyboardOpen)\r\n            {\r\n                if (e.KeyCode == Keycode.Back && e.Event.Action == KeyEventActions.Up)\r\n                    AndroidBackPressed?.Invoke(this, EventArgs.Empty);\r\n                return;\r\n            }\r\n\r\n            IsShiftActive = e.Event.IsShiftPressed;\r\n\r\n            switch (e.Event.Action)\r\n            {\r\n                case KeyEventActions.Down: KeyDown?.Invoke(this, (e.KeyCode, e.Event.KeyCharacterMap)); break;\r\n                case KeyEventActions.Up: KeyUp?.Invoke(this, (e.KeyCode, e.Event.KeyCharacterMap)); break;\r\n            }\r\n        }\r\n\r\n        public bool OnTouch(View v, MotionEvent e)\r\n        {\r\n            Vector2 position = new Vector2(e.RawX, e.RawY);\r\n\r\n            switch (e.Action & e.ActionMasked)\r\n            {\r\n                case MotionEventActions.Down:\r\n                    if (!isTouched) TouchPressed?.Invoke(this, position);\r\n                    isTouched = true;\r\n                    break;\r\n\r\n                case MotionEventActions.Move:\r\n                    if (!isTouched \r\n                        || Math.Abs(oldTouchPosition.X - position.X) < MIN_TOUCH_MOVE_DELTA_X\r\n                        || Math.Abs(oldTouchPosition.Y - position.Y) < MIN_TOUCH_MOVE_DELTA_Y)\r\n                        break;\r\n\r\n                    if (position.X < 0 || position.Y < 0)\r\n                    {\r\n                        isTouched = false;\r\n                        TouchReleased?.Invoke(this, position);\r\n                        break;\r\n                    }\r\n\r\n                    oldTouchPosition = position;\r\n                    TouchMoved?.Invoke(this, position);\r\n                    break;\r\n\r\n                case MotionEventActions.Outside:\r\n                case MotionEventActions.Cancel:\r\n                    if (isTouched) TouchReleased?.Invoke(this, position);\r\n                    isTouched = false;\r\n                    break;\r\n\r\n                case MotionEventActions.Up:\r\n                    if (isTouched) TouchReleased?.Invoke(this, position);\r\n                    isTouched = false;\r\n                    break;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        public void OpenKeyboard()\r\n        {\r\n            if (keyboardView != null && IsKeyboardOpen)\r\n                return;\r\n\r\n            keyboardView = game.Services.GetService<View>();\r\n            inputMethodManager.ShowSoftInput(keyboardView, ShowFlags.Forced);\r\n            inputMethodManager.ToggleSoftInput(ShowFlags.Forced, HideSoftInputFlags.ImplicitOnly);\r\n        }\r\n\r\n        public void CloseKeyboard()\r\n        {\r\n            if (keyboardView != null && IsKeyboardOpen)\r\n                inputMethodManager.HideSoftInputFromWindow(keyboardView.WindowToken, HideSoftInputFlags.None);\r\n        }\r\n\r\n        public void OnGlobalLayout()\r\n        {\r\n            Android.Graphics.Rect rect = new Android.Graphics.Rect();\r\n\r\n            var gameView = game.Services.GetService<View>();\r\n            gameView.GetWindowVisibleDisplayFrame(rect);\r\n\r\n            int keypadHeight = gameView.RootView.Height - rect.Bottom;\r\n            if (keypadHeight > 0)\r\n            {\r\n                if (IsKeyboardOpen)\r\n                    return;\r\n\r\n                IsKeyboardOpen = true;\r\n                KeyboardOpened?.Invoke(this, EventArgs.Empty);\r\n            }\r\n            else\r\n            {\r\n                if (!IsKeyboardOpen)\r\n                    return;\r\n\r\n                IsKeyboardOpen = false;\r\n                KeyboardClosed?.Invoke(this, EventArgs.Empty);\r\n            }\r\n\r\n            rect?.Dispose();\r\n        }\r\n    }`"],"labels":["Android","Input"]},{"title":"Incorrect ADPCM decoding (static)","body":"<!-- Write your issue below -->\r\n\r\nTrying to upgrade Stardew Valley to MonoGame 3.7 results in (apparently) all audio playing as static. It is a regression caused by 1bc51e36bfeede613c6f7d5c42be3567a78ad6b6 (#5750). The following patch fixes the issue but might break other games.\r\n\r\n```\r\ndiff --git a\/MonoGame.Framework\/Audio\/SoundEffect.OpenAL.cs b\/MonoGame.Framework\/Audio\/SoundEffect.OpenAL.cs\r\nindex 86a31c1ff..168d6118b 100644\r\n--- a\/MonoGame.Framework\/Audio\/SoundEffect.OpenAL.cs\r\n+++ b\/MonoGame.Framework\/Audio\/SoundEffect.OpenAL.cs\r\n@@ -95,7 +95,7 @@ namespace Microsoft.Xna.Framework.Audio\r\n             SoundBuffer = new OALSoundBuffer();\r\n             \/\/ Buffer length must be aligned with the block alignment\r\n             int alignedCount = count - (count % blockAlignment);\r\n-            SoundBuffer.BindDataBuffer(buffer, format, alignedCount, sampleRate, sampleAlignment);\r\n+            SoundBuffer.BindDataBuffer(buffer, format, count, sampleRate, blockAlignment);\r\n         }\r\n\r\n         private void PlatformInitializeIma4(byte[] buffer, int offset, int count, int sampleRate, AudioChannels channels, int blockAlignment, int loopStart, int loopLength)\r\n@@ -159,7 +159,7 @@ namespace Microsoft.Xna.Framework.Audio\r\n         {\r\n             if (codec == MiniFormatTag.Adpcm)\r\n             {\r\n-                PlatformInitializeAdpcm(buffer, 0, buffer.Length, sampleRate, (AudioChannels)channels, (blockAlignment + 16) * channels, loopStart, loopLength);\r\n+                PlatformInitializeAdpcm(buffer, 0, buffer.Length, sampleRate, (AudioChannels)channels, (blockAlignment + 16) * 2, loopStart, loopLength);\r\n                 duration = TimeSpan.FromSeconds(SoundBuffer.Duration);\r\n                 return;\r\n             }\r\n```\r\n\r\nApplying only the first hunk causes Stardew Valley to crash at start with something about buffer overrun.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- 6ef30f19b936b07fc6598e0c3837c6aa4db2bca0 (develop)\r\n\r\n#### What operating system are you using:\r\n- Linux\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n","comments":["Are these audio files mono or stereo?","Some of them are mono, some are stereo. Obviously, not applying the second one only causes crashes on mono audio. However, not applying the first one causes the result to be static for stereo audio. I haven't tested mono audio.\r\n\r\nAlso: I don't really care that much about this issue. If it's a low priority for the project, feel free to close or fix later."],"labels":["Audio"]},{"title":"Content Pipeline tool messed up","body":"#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7 and 3.7.1\r\n\r\n#### What operating system are you using:\r\n- Windows 7\r\n\r\n#### What MonoGame platform are you using:\r\n- DesktopGL\r\n\r\nWhen adding an existing folder to the Content.mgcb, any folders within that folder are duplicated with empty contents. (They appear in windows explorer too)\r\nI have a reference in the tool to Monogame Extended's pipeline module. If I remove it and re-add it, the tool crashes. When reloading the tool, there is an additional folder with no name. If I hit the little plus, there's a folder called \"build=\" containing another folder with that name, and so on until finally one contains the Monogame Extended pipeline module .dll file. \r\nIf I try to click the actual nameless folder in the root of the content folder, the tool crashes again. ","comments":["For me at least, this seems related to using relative paths in the references section.  If I change them to absolute paths, this behavior is corrected,  Paths in general seems to be screwey rn."],"labels":["MGCB Editor"]},{"title":"TouchPanel may get stuck permanently in a gesture","body":"Hi,\r\n\r\nI found out that when gestures are enabled (any of them), ```TouchPanel``` may stuck itself in a gesture and never release it, forcing to close the application for touch inputs to work again.\r\n\r\nThis happens when applications have bad performance or blocking behaviors long enough for touch devices to miss inputs or circling its touch data cache.\r\n\r\nFor example, if a device only store the 16 last touch inputs and the application suddenly blocks for more than 16 samples, some samples may be lost and never added to ```TouchPanel``` through ```AddEvent()```.\r\n\r\nThe gesture release failure then occurs whenever ```TouchLocationState.Released``` or ```TouchLocationState.Pressed``` events are missing for a given touch ID.\r\n\r\n\r\nI believe that the problem is here: https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Input\/Touch\/TouchPanelState.cs#L193\r\n\r\nIt shouldn't return and ignore the input, but should instead try to do something more robust like detecting missing press\/release events and sending those events to the gesture update logic (or should clear any previous gesture).\r\nMost of the time it reaches this block and that a gesture is active, it fails to end the gesture and lock itself in this state.\r\nA typical lock case is a double-tap with both the intermediate released-pressed events missing.\r\n\r\nThis affects all platforms.\r\n\r\nI unfortunately won't have the time to look into this for a long time.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- All\r\n","comments":[],"labels":["Input"]},{"title":"OpenAL SoundEffect crash - failure to delete buffers","body":"<!-- Write your issue below -->\r\n\r\nEvery now and then, I encounter a crash with OpenAL failing to delete a buffer because it's in-use. This happens only on SoundEffects loaded through the ContentManager when I exit the game and call `Unload()` on all my content. All my `SoundEffectInstances` are pooled, and they're stopped and disposed, if they haven't been already, before the content is unloaded.\r\n\r\nFull stack trace:\r\n```\r\nUnhandled Exception: System.InvalidOperationException: Failed to delete buffer. (Reason: InvalidOperation)\r\nat Microsoft.Xna.Framework.Audio.ALHelper.CheckError(String message, Object[] args) in D:\\Documents\\MonoGame\\MonoGame\\MonoGame.Framework\\Audio\\OpenALSoundController.cs:line 38\r\nat Microsoft.Xna.Framework.Audio.OALSoundBuffer.Dispose(Boolean disposing) in D:\\Documents\\MonoGame\\MonoGame\\MonoGame.Framework\\Audio\\OALSoundBuffer.cs:line 92\r\nat Microsoft.Xna.Framework.Audio.OALSoundBuffer.Dispose() in D:\\Documents\\MonoGame\\MonoGame\\MonoGame.Framework\\Audio\\OALSoundBuffer.cs:line 75\r\nat Microsoft.Xna.Framework.Audio.SoundEffect.PlatformDispose(Boolean disposing) in D:\\Documents\\MonoGame\\MonoGame\\MonoGame.Framework\\Audio\\SoundEffect.OpenAL.cs:line 231\r\nat Microsoft.Xna.Framework.Audio.SoundEffect.Dispose(Boolean disposing) in D:\\Documents\\MonoGame\\MonoGame\\MonoGame.Framework\\Audio\\SoundEffect.cs:line 458\r\nat Microsoft.Xna.Framework.Audio.SoundEffect.Dispose() in D:\\Documents\\MonoGame\\MonoGame\\MonoGame.Framework\\Audio\\SoundEffect.cs:line 440\r\nat Microsoft.Xna.Framework.Content.ContentManager.Unload() in D:\\Documents\\MonoGame\\MonoGame\\MonoGame.Framework\\Content\\ContentManager.cs:line 468\r\nat Redacted.AssetManager.CleanUp() in D:\\Documents\\Redacted\\AssetManager.cs:line 86\r\nat Redacted.Engine.UnloadContent() in D:\\Documents\\Redacted\\Engine.cs:line 149\r\nat Microsoft.Xna.Framework.Game.DoExiting() in D:\\Documents\\MonoGame\\MonoGame\\MonoGame.Framework\\Game.cs:line 695\r\nat Microsoft.Xna.Framework.Game.Run(GameRunBehavior runBehavior) in D:\\Documents\\MonoGame\\MonoGame\\MonoGame.Framework\\Game.cs:line 401\r\nat Microsoft.Xna.Framework.Game.Run() in D:\\Documents\\MonoGame\\MonoGame\\MonoGame.Framework\\Game.cs:line 369\r\nat Redacted.Program.Main() in D:\\Documents\\Redacted\\Program.cs:line 22\r\n```\r\nIt's linked to this part of `OALSoundBuffer`:\r\n```\r\n\/\/ Release unmanaged resources\r\nif (AL.IsBuffer(openALDataBuffer))\r\n{\r\n    ALHelper.CheckError(\"Failed to fetch buffer state.\");\r\n    AL.DeleteBuffers(1, ref openALDataBuffer);\r\n    ALHelper.CheckError(\"Failed to delete buffer.\");\r\n}\r\n```\r\nWhen it crashes seems totally random. I can't find a reliable way to reproduce it.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- Latest develop\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL","comments":["Update: this is happening even if I don't explicitly call `Unload` on my content. I verified I'm not accessing any sounds while the game is exiting, and this started only recently despite the code in question not being touched for a while.","The unload behavior hasn't been modified in a while, about a couple years I guess.\r\n\r\nMonoGame is automatically stopping and disposing pooled instances upon termination. The error is maybe related to them being disposed twice if you already do that (which should already be prevented, but maybe we're missing a code path). Though ```IsBuffer``` should handle that case....\r\n\r\nLet me know if you come up with a test project. As-is it's going to be very hard to identify, I never stumbled upon it despite having an intensive use of SoundEffect.","I'm having trouble replicating the issue in a test project, but I've narrowed it down slightly. It only happens when I play sound effects in my game, not music, despite both using `SoundEffects` and `SoundEffectInstances`.\r\n\r\nNext I'd like to see which sounds its crashing on to further dig into the issue, but I need to see which `SoundEffect` the `OALSoundBuffer` belongs to, and I'm not sure how to step through and debug that with the MonoGame DLLs hiding the code (even with the PDB files, which don't let me go look into definitions).","What happens if you trigger about 100 SoundEffect.Play() at once and unload+exit the application a couple frames later?\r\nThis should expose the issue more.\r\n\r\nAre you eventually using threads? (it may be a race condition on a disposal)","All right, I have a test program that works semi-reliably. The included `SoundManager` is extremely close to what I do to play sounds.\r\n* Press ESC to have it play a bunch of sounds then unload the content\r\n* There's a catch to getting it throwing the error: set a breakpoint on line 80 of Game1.cs while it's playing some sounds, wait a bit, then continue, and you should get the error\r\n\r\n[TestOpenALIssue.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/2751769\/TestOpenALIssue.zip)\r\n\r\nI'm not currently using any additional threads in my game. I noticed `RenderTarget2D` on OpenGL waits for the UI thread to dispose since OpenGL doesn't support multithreading, so I removed all RenderTargets from my game and still got the issue.\r\n\r\nEventually, I tried a fix and now really think the issue is that we're not unqueuing the buffers before deleting them. I changed `OALSoundBuffer.Dispose` to this and haven't had any issues at all since:\r\n```\r\nprotected virtual void Dispose(bool disposing)\r\n{\r\n    if (!_isDisposed)\r\n    {\r\n        if (disposing)\r\n        {\r\n            \/\/ Clean up managed objects\r\n        }\r\n        \/\/ Release unmanaged resources\r\n        if (AL.IsBuffer(openALDataBuffer))\r\n        {\r\n            ALHelper.CheckError(\"Failed to fetch buffer state.\");\r\n            AL.SourceUnqueueBuffers(openALDataBuffer, 1);\r\n            ALHelper.CheckError(\"Something went wrong\");\r\n            AL.DeleteBuffers(1, ref openALDataBuffer);\r\n            ALHelper.CheckError(\"Failed to delete buffer.\");\r\n        }\r\n\r\n        _isDisposed = true;\r\n    }\r\n}\r\n```\r\n\r\nI'm curious if this change errors up on your end or anyone else's. It works well for me in both my project and a fresh project.","Okay, I think I'm officially dumb. The entire time I had a Debug version of MonoGame that I built. I have not encountered the issue in a Release version, and the above change crashes for me in a Debug version.\r\n\r\nThat said, thank you for your patience and willingness to help me with this issue; I really appreciate it!","It may still be relevant. If it doesn't happen on release code, it probably means that the error checking is less strict and that the error would still silently happen. It probably can't harm to add that unqueue.\r\n\r\nCalls to ```CheckError``` are ignored in release mode.","That's a good point. Unfortunately, the unqueue didn't work in Debug when I tested it. I suspect we need the source ID and not the buffer.","I might give this another go over the next few days and fix it on Debug. I'm thinking of using [alSourcei](https:\/\/github.com\/kcat\/openal-soft\/wiki\/Programmer%27s-Guide#alsourcei-1) with a 0 value to detach the source from the buffer before we delete it.","It looks like we are [unbinding the buffers properly](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Audio\/SoundEffectInstance.OpenAL.cs#L184) in `PlatformStop`. In my case, all the SoundEffectInstances are stopped and disposed, and the error occurs when disposing the `SoundEffect` because it's still somehow attached to a source, and I don't know why.\r\n\r\nOn that note, the version of OpenAL Soft [MonoGame is using](https:\/\/github.com\/KonajuGames\/openal-soft\/blob\/master\/OpenAL32\/alBuffer.c#L78) is 1.16, which is a bit behind and quite different from [the official one, which is currently at 1.19.1](https:\/\/github.com\/kcat\/openal-soft\/blob\/master\/OpenAL32\/alBuffer.cpp#L457). There have been [several fixes and improvements since](https:\/\/kcat.strangesoft.net\/openal.html#release) (though finding an exhaustive list is proving difficult, but still possible, with the wayback machine).","Yeah, we should update it at some point. The thing is we have to build it ourselves for all systems because the binaries from the official website have a dependencies towards the MSCV6 runtime (while it should be statically linked to avoid dependencies mismatch errors).","@tomspilman @cra0zy @Jjagg Any thoughts on this? Is there a procedure to upgrading MonoGame dependencies, such as OpenAL?","Tom set up CI for some of our native dependencies to build them the way we need, but he hasn't done that for OpenAL Soft yet. Dependencies are first updated in the dependencies repo [MonoGame.Dependencies](https:\/\/github.com\/MonoGame\/MonoGame.Dependencies) which is a submodule in this repo, so afterwards the submodule needs to be updated here. (we should improve on that IMO)","I took another look at this after seeing [this thread](http:\/\/community.monogame.net\/t\/openalsoundcontroller-slowly-runs-out-of-available-sources\/11714) in the community forums.\r\n\r\nI noticed that `PlatformDispose` in `SoundEffectInstance.OpenAL` does not actually do anything. The sources get recycled back to the `availableSourcesCollection` **only** when `Stop` is called, but the `SoundEffectInstancePool` manually calls `Stop` in its update loop if the sound is disposed or stopped. Here's the code in question:\r\n```\r\nif (inst.IsDisposed || inst.State == SoundState.Stopped || (inst._effect == null && !inst._isDynamic))\r\n{\r\n#if OPENAL\r\n    if (!inst.IsDisposed)\r\n    inst.Stop(true); \/\/ force stopping it to free its AL source\r\n#endif\r\n    Add(inst);\r\n    continue;\r\n}\r\n```\r\nIt looks like it does this here so the `SoundEffectInstance` pool can know when to add it back, but there's an issue with this. If `Stop` is not called on the `SoundEffectInstance` before `SoundEffectPool.Update` runs and the OALSoundBuffer is disposed, it will throw the exception since the instance is still in use. Important to note is there is a lock on the `availableSourcesCollection`, which occurs in `OpenALSoundController.FreeSource`, which might play a factor in delaying cleanup.\r\n\r\nIs there a way we can improve this so we don't need to rely on the update loop freeing the source?","We should make `PlatformDispose` in `SoundEffectInstance.OpenAL` release the source. At a glance I think we can just have it call `PlatformStop()`.\r\n\r\nI can set up a PR. Would be great if you could test it @tdeeb.","Absolutely! I'll find some time once it's up; thanks!","@tdeeb PR is up! #6813"],"labels":["Audio"]},{"title":"SpriteFont whitespace characters have width of 0","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nWhitespace characters in SpriteFonts have a width of 0, causing multi-word text to run together.\r\n\r\nSee examples in this thread from the forums:\r\n\r\nhttp:\/\/community.monogame.net\/t\/font-spacing-issue\/11030\r\n\r\nI believe the problem might be in the Content Pipeline GlyphCropper object, which reduces the whitespace around characters in a bitmap font:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/97708388e9adf6cb2ff66171ed0be5d4183e6b63\/MonoGame.Framework.Content.Pipeline\/Graphics\/Font\/GlyphCropper.cs#L34\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- I've seen this on DesktopGL, WindowsDX, Android, iOS. \r\nThis issue probably occurs on all MonoGame platforms since it is in the Content Pipeline.\r\n","comments":["I think this is a duplicate of #6545. Or at least it's very closely related and about the same visible issue.","Im not sure this is a (or the) issue.\r\n\r\nTechnically a space character doesn't need to actually have a glyph width as it doesn't need to draw 8 10 or however many pixels of... nothing. It just needs to move the offset.X over to the right on the next pass.\r\nThe right side bering will do that before returning from the for loop at the end.\r\n\r\nAs long as the space character has either a positive left or right side bering (_it probably should be the right side bering though which as far as i know it always is_) it will position the next character properly.  \r\n\r\nThe huge Y value on the space glyph cropping is however another matter it is improper. As it extends thru multiple lines and serves no purpose so it's not by design. It may or may not be innocuous but it is unexpected behavior. Also as shown in the other issue the expected fonts right side bering at least in one case was coming out wrong as well.\r\n","willmotil is right, a space glyph will most likely be empty on any font and it's the X\/Y offset value that takes care of the actual spacing. It really depends on how the font is designed.\r\n\r\nThere may still be some issues in regard to #6545 because the font processor tries to overcrop glyph to take less space on the bitmap font.","Is there a workaroud for this bug? Idunno how other people aren't seeing it... Do most projects just not use a lot of text, or render text using something other than SpriteFont?\r\n\r\nI've got a text-heavy game that I'm getting ready to ship, buteverythingisreallyhardtoread :( I'm afraid players are going to complain if I launch with this bug.","Have you tried to modify the font\/ttf itself or to check if it's the font encoding? (e.g. trying another font to see how it renders)\r\n\r\nDebug break and check the ```XAdvance``` value of your space glyph here:\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/6f34eb393aa0ac005888d74c5c4c6ab5615fdc8c\/MonoGame.Framework.Content.Pipeline\/Graphics\/Font\/SharpFontImporter.cs#L153\r\n\r\nIf it's 0, it's a font issue.","Fair enough, it could be a font issue, but this font works elsewhere. I feel like I've seen this with common fonts like arial too... there is a space between words, but they are squished together almost like it isn't an actual space but just the kerning around the ' ' character.\r\n\r\nI'll put together a quick example app to show the problem.","Ok, here is a simple sample app that writes some text to the screen with Arial Black. Above it is the same text, written with same font and font size, in WordPad. You can see that the spacing between words in MonoGame is incorrect, the words are too close together:\r\n\r\n<img width=\"813\" alt=\"screen shot 2019-01-24 at 11 09 27 pm\" src=\"https:\/\/user-images.githubusercontent.com\/1888089\/51726529-7c261b00-202d-11e9-96d9-f4dc72fd5f29.png\">\r\n\r\nhttps:\/\/github.com\/dmanning23\/PlayFabExample","Thanks! I'll check what's wrong.","Just ran into this spacing issue.  What's the latest update on this issue, workaround, and resolution?\r\n\r\nEDIT:  Adding this to my font fixed the spacing issues on Ariel and Comic Sans MS.\r\n\r\n```\r\n<UseKerning>true<\/UseKerning>\r\n```"],"labels":["Font"]},{"title":"Feature Request: Add scancode option for keyboard input","body":"In MonoGame (and XNA), it's pretty hard to get keyboard input in a layout agnostic way. If I want my game to use the WASD keys for example, this should map to ZQSD on an AZERTY keyboard.\r\n\r\nThis is something really nice that was included in FNA. They call it [GetKeyFromScancodeEXT](https:\/\/github.com\/FNA-XNA\/FNA\/wiki\/5:-FNA-Extensions#getkeyfromscancodeext).\r\n\r\nSample code:\r\n```\r\nprivate Keys PlayerForward;\r\nprivate Keys PlayerStrafeLeft;\r\nprivate Keys PlayerBackward;\r\nprivate Keys PlayerStrafeRight;\r\nprivate Keys PlayerUse;\r\npublic void AssignDefaultKeys()\r\n{\r\n    \/\/ Typically you might just assign a Keys value directly. Not here!\r\n    PlayerForward     = Keyboard.GetKeyFromScancodeEXT(Keys.W);\r\n    PlayerStrafeLeft  = Keyboard.GetKeyFromScancodeEXT(Keys.A);\r\n    PlayerBackward    = Keyboard.GetKeyFromScancodeEXT(Keys.S);\r\n    PlayerStrafeRight = Keyboard.GetKeyFromScancodeEXT(Keys.D);\r\n    PlayerUse         = Keyboard.GetKeyFromScancodeEXT(Keys.E);\r\n}\r\n```\r\n_____\r\nIn UWP, this can be implemented using [CharacterReceivedEventArgs.KeyStatus](https:\/\/docs.microsoft.com\/en-us\/uwp\/api\/windows.ui.core.characterreceivedeventargs.keystatus#Windows_UI_Core_CharacterReceivedEventArgs_KeyStatus).ScanCode.\r\n\r\nIn SDL, there's [SDL_GetKeyFromScancode](https:\/\/wiki.libsdl.org\/SDL_GetKeyFromScancode).\r\n\r\nI'm guessing there should be equivalent functions for the different platforms we support.","comments":["This change would be nice in that it preserves the current API and should be relatively easy to implement as a short term goal.\r\n\r\n_____\r\n\r\nAs a long term goal, we should have both the keycodes and scancodes available from KeyboardState with ways to query either one of them when keys are up or down. Keeping both together makes it less nightmarish when it comes to converting back and forth. This would most likely change the API though(?).","Yes, this is a gaping hole in the keyboard API. IMO we should break hard in a major release to provide a good API, rather than providing a forced solution for optional compatibility like FNA does. ","I'm definitely for providing better input handling, one thing I would like is to get MG 5 input stuff in here and provide backwards compatibility layer than converts it to XNA like input. The best of both world as some might say.","@cra0zy - Maybe we should get something like this into MG specifically for PC platforms. \r\n `Keyboard.GetKeyFromScancode` is a pretty natural mapping to our SDL2 backend.\r\n\r\nWe can likely add the same feature for the Win32\/DirectX backend too.\r\n\r\nLater we can look at supporting it on more platforms.\r\n\r\nAlternatively we could add a second enum `Scancodes` which can work in any place `Keys` can.","You should add a function so that dead keys can be handled by the programmer when they are checked for and detected. Er so that they can at least be checked for and detected by the program.\r\nBy that i mean keys that are not present or don't have a equivalent key at that position on the other keyboard.","Example implementation for windows.\r\n(Using this for azerty support)\r\n\r\n`     class GetKeyFromScancodeExample {\r\n        static readonly int[] _keysToScancodeUsLayout = new int[256];\r\n\r\n        static GetKeyFromScancodeExample() {\r\n            _keysToScancodeUsLayout[27] = 1; \/\/ 27 Escape \u001b\r\n            _keysToScancodeUsLayout[49] = 2; \/\/ 49 D1\r\n            _keysToScancodeUsLayout[50] = 3; \/\/ 50 D2\r\n            _keysToScancodeUsLayout[51] = 4; \/\/ 51 D3\r\n            _keysToScancodeUsLayout[52] = 5; \/\/ 52 D4\r\n            _keysToScancodeUsLayout[53] = 6; \/\/ 53 D5\r\n            _keysToScancodeUsLayout[54] = 7; \/\/ 54 D6\r\n            _keysToScancodeUsLayout[55] = 8; \/\/ 55 D7\r\n            _keysToScancodeUsLayout[56] = 9; \/\/ 56 D8\r\n            _keysToScancodeUsLayout[57] = 10; \/\/ 57 D9\r\n            _keysToScancodeUsLayout[48] = 11; \/\/ 48 D0\r\n            _keysToScancodeUsLayout[189] = 12; \/\/ 189 OemMinus -\r\n            _keysToScancodeUsLayout[187] = 13; \/\/ 187 OemPlus =\r\n            _keysToScancodeUsLayout[8] = 14; \/\/ 8 Back\r\n            _keysToScancodeUsLayout[9] = 15; \/\/ 9 Tab\r\n            _keysToScancodeUsLayout[81] = 16; \/\/ 81 Q Q\r\n            _keysToScancodeUsLayout[87] = 17; \/\/ 87 W W\r\n            _keysToScancodeUsLayout[69] = 18; \/\/ 69 E E\r\n            _keysToScancodeUsLayout[82] = 19; \/\/ 82 R R\r\n            _keysToScancodeUsLayout[84] = 20; \/\/ 84 T T\r\n            _keysToScancodeUsLayout[89] = 21; \/\/ 89 Y Y\r\n            _keysToScancodeUsLayout[85] = 22; \/\/ 85 U U\r\n            _keysToScancodeUsLayout[73] = 23; \/\/ 73 I I\r\n            _keysToScancodeUsLayout[79] = 24; \/\/ 79 O O\r\n            _keysToScancodeUsLayout[80] = 25; \/\/ 80 P P\r\n            _keysToScancodeUsLayout[219] = 26; \/\/ 219 OemOpenBrackets [\r\n            _keysToScancodeUsLayout[221] = 27; \/\/ 221 OemCloseBrackets ]\r\n            _keysToScancodeUsLayout[13] = 28; \/\/ 13 Enter\r\n            _keysToScancodeUsLayout[65] = 30; \/\/ 65 A A\r\n            _keysToScancodeUsLayout[83] = 31; \/\/ 83 S S\r\n            _keysToScancodeUsLayout[68] = 32; \/\/ 68 D D\r\n            _keysToScancodeUsLayout[70] = 33; \/\/ 70 F F\r\n            _keysToScancodeUsLayout[71] = 34; \/\/ 71 G G\r\n            _keysToScancodeUsLayout[72] = 35; \/\/ 72 H H\r\n            _keysToScancodeUsLayout[74] = 36; \/\/ 74 J J\r\n            _keysToScancodeUsLayout[75] = 37; \/\/ 75 K K\r\n            _keysToScancodeUsLayout[76] = 38; \/\/ 76 L L\r\n            _keysToScancodeUsLayout[186] = 39; \/\/ 186 OemSemicolon ;\r\n            _keysToScancodeUsLayout[222] = 40; \/\/ 222 OemQuotes '\r\n            _keysToScancodeUsLayout[192] = 41; \/\/ 192 OemTilde `\r\n            _keysToScancodeUsLayout[220] = 43; \/\/ 220 OemPipe \\\r\n            _keysToScancodeUsLayout[90] = 44; \/\/ 90 Z Z\r\n            _keysToScancodeUsLayout[88] = 45; \/\/ 88 X X\r\n            _keysToScancodeUsLayout[67] = 46; \/\/ 67 C C\r\n            _keysToScancodeUsLayout[86] = 47; \/\/ 86 V V\r\n            _keysToScancodeUsLayout[66] = 48; \/\/ 66 B B\r\n            _keysToScancodeUsLayout[78] = 49; \/\/ 78 N N\r\n            _keysToScancodeUsLayout[77] = 50; \/\/ 77 M M\r\n            _keysToScancodeUsLayout[188] = 51; \/\/ 188 OemComma ,\r\n            _keysToScancodeUsLayout[190] = 52; \/\/ 190 OemPeriod .\r\n            _keysToScancodeUsLayout[191] = 53; \/\/ 191 OemQuestion \/\r\n            _keysToScancodeUsLayout[111] = 53; \/\/ 111 Divide \/\r\n            _keysToScancodeUsLayout[106] = 55; \/\/ 106 Multiply *\r\n            _keysToScancodeUsLayout[32] = 57; \/\/ 32 Space\r\n            _keysToScancodeUsLayout[3] = 70; \/\/ 3\r\n            _keysToScancodeUsLayout[103] = 71; \/\/ 103 NumPad7\r\n            _keysToScancodeUsLayout[104] = 72; \/\/ 104 NumPad8\r\n            _keysToScancodeUsLayout[105] = 73; \/\/ 105 NumPad9\r\n            _keysToScancodeUsLayout[109] = 74; \/\/ 109 Subtract -\r\n            _keysToScancodeUsLayout[100] = 75; \/\/ 100 NumPad4\r\n            _keysToScancodeUsLayout[101] = 76; \/\/ 101 NumPad5\r\n            _keysToScancodeUsLayout[102] = 77; \/\/ 102 NumPad6\r\n            _keysToScancodeUsLayout[107] = 78; \/\/ 107 Add +\r\n            _keysToScancodeUsLayout[97] = 79; \/\/ 97 NumPad1\r\n            _keysToScancodeUsLayout[98] = 80; \/\/ 98 NumPad2\r\n            _keysToScancodeUsLayout[99] = 81; \/\/ 99 NumPad3\r\n            _keysToScancodeUsLayout[96] = 82; \/\/ 96 NumPad0\r\n            _keysToScancodeUsLayout[110] = 83; \/\/ 110 Decimal .\r\n            _keysToScancodeUsLayout[226] = 86; \/\/ 226 OemBackslash \\\r\n        }\r\n\r\n        public static Keys GetKeyFromScancode(Keys scancodeKey) {\r\n            const int MAPVK_VK_TO_CHAR = 2;\r\n            var charr = NativeMethods.MapVirtualKey((uint)scancodeKey, MAPVK_VK_TO_CHAR);\r\n            if ((charr == 0) || (charr >= 32 * 1024))\r\n                return scancodeKey; \/\/ no mapping or deadkey\/diacritics\r\n            const int MAPVK_VK_TO_VSC = 0;\r\n            var scancode = NativeMethods.MapVirtualKey((uint)scancodeKey, MAPVK_VK_TO_VSC);\r\n            if ((scancode == 0) || (scancode > 255))\r\n                return scancodeKey; \/\/ no mapping or deadkey\/diacritics\r\n\r\n            if (_keysToScancodeUsLayout[(int)scancodeKey] != scancode) {\r\n                for (var j = 0; j < _keysToScancodeUsLayout.Length; ++j)\r\n                    if (_keysToScancodeUsLayout[j] == scancode)\r\n                        return (Keys)j;\r\n            }\r\n            return scancodeKey;\r\n        }\r\n\r\n        class NativeMethods {\r\n            [DllImport(\"user32.dll\", EntryPoint = \"MapVirtualKey\", SetLastError = false)]\r\n            public static extern uint MapVirtualKey(uint code, uint mapType);\r\n        }\r\n    }\r\n`\r\n"],"labels":["Feature Request","Input"]},{"title":"SpriteFont rendering - Can't disable smoothing","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nPosted a thread on the community forums for this. Most of the details can be found there :)\r\nhttp:\/\/community.monogame.net\/t\/spritefont-rendering-cant-seem-to-disable-smoothing\/11225?u=trinith\r\n\r\nThe short of it is, with SamplerState set to PointClamp, fonts still render smoothed and not pixelated. Same deal with setting the SamplerState on the graphics device. I believe the problem might be with whatever turns the SpriteFont file into a texture, because I saved the resulting texture to a file and the smoothing is present there... because of this, it would stand to reason that SamplerState wouldn't matter.\r\n\r\nAnother community member, Kimimaru, was able to confirm the behaviour that I was seeing. We're wondering if this is a bug.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- Windows DX & Android\r\n","comments":["The issue is likely that the SpriteFont content processor is smoothing the font when rasterizing it generating a smoothed font.\r\n\r\nThere was never any option for controlling this in XNA.  Do you know if it generated non-smoothed fonts with the same `.spritefont`?\r\n\r\nIt could be that FreeType is always smoothing and not obeying some hint in the TTF.","> Do you know if it generated non-smoothed fonts with the same .spritefont?\r\n\r\nI feel like I was able to do pixelated font rendering in XNA, but it was so long ago that I really can't be sure. I'm also not sure how to get XNA working anymore... one of the many, many reasons II'm using MonoGame these days :)\r\n\r\nIf anybody has a working XNA installation, the test project is relatively straightforward to create.","I looked into this a little since I was having this issue with a font. Though I didn't manage to disable smoothing due to an issue with the font itself, I was able to significantly adjust the output by modifying the `LoadFlags`, `LoadTarget`, and `RenderMode` [when loading the glyph](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework.Content.Pipeline\/Graphics\/Font\/SharpFontImporter.cs#L93).\r\n\r\nIn short, many more settings to adjust fonts are all there and they just needs to be exposed in the pipeline.","Being able to control both smoothing and hinting would be great.","> There was never any option for controlling this in XNA.\r\n\r\nThis maybe true but there was also no pipeline tool in xna.\r\n\r\nIf the default remains as it is and a option is added either in the tool or in the framework then there is no change to current behavior. Unless the change is explicitly (or intentionally) specified by the user and this is then just additional functionality.\r\n\r\n> I feel like I was able to do pixelated font rendering in XNA.\r\n\r\nWell you can turn on point in the sampler but that doesn't help with anti-aliasing or stretching when the font is rendered to texture on importing. Having the font rasterized without aliasing is just a bit of help it may not entirely solve some artifacts but it would help with the really bad ones.\r\n\r\n\r\n","If anyone needs screenshots from \"vintage\" XNA, I happen to have it installed, at least for the next week or two when I have to register my copy of Visual C# Express 2010, which I doubt is possible now.","A comparison with XNA's output would be most welcome!","Well, if you can point me to a spritefont file and some C# code to run, I can paste a screenshot.  (Note that I don't have MonoGame installed.)  I can say that I'm definitely getting font smoothing, but my code doesn't quite match what's in the forum thread.  Alternatively, I could just attach the xnb files that get generated?","If you check the link at the very beginning, I posted some code in the thread on the MG forums. You can just make the sprite font via Visual Studio.  Any standard font (ie, Consolas) will do. If you need one though, let me know and I can paste the XML :)","That code didn't compile on vintage XNA because that overload of SpriteBatch.Begin() didn't exist.  Once we fix that minor issue...\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/8607484\/81515377-c3f3b300-9301-11ea-87ec-e07a6c07197a.png)\r\n","I spent some time looking into this over the past couple of days.\r\n\r\nChanging the rendering mode for glyphs is trivial. A simple matter of changing the RenderMode argument passed into GlyphSlot.RenderGlyph() in SharpFontImporter. But, this will obviously need to be added as an optional property in FontDescription so users can specify in the XML file whether or not they want font smoothing enabled.\r\n\r\n\r\n\r\nThat said, when testing this out I discovered a problem with the way pixel data for 1bpp glyphs was being parsed.\r\n\r\nBelow is an updated to SharpFontImporter's ImportGlyph method that parses the data as per the FreeType specs that can be found here: [https:\/\/www.freetype.org\/freetype2\/docs\/reference\/ft2-basic_types.html#ft_bitmap](https:\/\/www.freetype.org\/freetype2\/docs\/reference\/ft2-basic_types.html#ft_bitmap)\r\n\r\nWith 1bpp glyphs the buffer always contains an even number of bytes per row of pixels regardless of the actual pixel width of the glyph. As such, the buffer may contain padding bytes at the end of each row. The number of bytes per row is the absolute value of the bitmap.Pitch property. If Pitch is negative the rows in the buffer are stored in reverse order, so the row order needs to be flipped when converted. \r\n\r\nI also discovered the BufferData byte array that SharpFont outputs seems to be truncated when glyphs are narrow, such as \"i\" or \"!\". Not sure if that's a bug with SharpFont or something else as I couldn't see any obvious issues when I looked at the SharpFont source code. Either way, I've changed it to address the buffer directly with IntPtr.\r\n\r\n```\r\nprivate Glyph ImportGlyph(char character, Face face, bool useSmoothing)\r\n{\r\n\tuint glyphIndex = face.GetCharIndex(character);\r\n\tface.LoadGlyph(glyphIndex, LoadFlags.Default, LoadTarget.Normal);\r\n\tface.Glyph.RenderGlyph(useSmoothing ? RenderMode.Normal : RenderMode.Mono);\r\n\r\n\t\/\/ Render the character.\r\n\tBitmapContent glyphBitmap = null;\r\n\tif (face.Glyph.Bitmap.Width > 0 && face.Glyph.Bitmap.Rows > 0)\r\n\t{\r\n\t\tglyphBitmap = new PixelBitmapContent<byte>(face.Glyph.Bitmap.Width, face.Glyph.Bitmap.Rows);\r\n\t\tbyte[] gpixelAlphas = new byte[face.Glyph.Bitmap.Width * face.Glyph.Bitmap.Rows];\r\n\t\t\/\/ If the character bitmap has 1bpp we have to expand the buffer data to get the 8bpp pixel data.\r\n\t\t\/\/ 1bpp glyphs always have an even number of bytes per row regardless of the width of the glyph, so they may contain unused padding bytes they need to be skipped.\r\n\t\t\/\/ The absolute value of bitmap.Pitch is the number of bytes per row.\r\n\t\t\/\/ Each non-padding byte in bitmap.Buffer contains the values of up to 8 pixels.\r\n\t\t\/\/ If bitmap is of width 10, each row has 2 bytes with 10 valid bits, and the last 6 bits of 2nd byte must be discarded.\r\n\t\t\/\/ If bitmap.Pitch is negative the row order of the glyph is reversed (ie. glyph bitmap data is upside down).\r\n\t\t\/\/ Note: The reason for using IntPtr to read bitmap.Buffer is because the bitmap.BufferData array may be truncated when a glyph is narrow (bug in SharpFont?)\r\n\t\tif (face.Glyph.Bitmap.PixelMode == PixelMode.Mono)\r\n\t\t{\r\n\t\t\t\/\/ Offset into bitmap.Buffer\r\n\t\t\tint bufferOffset = 0;\r\n\t\t\t\/\/ rowOffset is the offset in gpixelAlphas to the current row. rowOffsetInc is the amount to increment\/decrement rowOffset for each row.\r\n\t\t\tint rowOffset = face.Glyph.Bitmap.Pitch < 0 ? (face.Glyph.Bitmap.Rows - 1) * face.Glyph.Bitmap.Width : 0, rowOffsetInc = face.Glyph.Bitmap.Pitch \/ Math.Abs(face.Glyph.Bitmap.Pitch) * face.Glyph.Bitmap.Width;\r\n\t\t\tfor (int i = 0; i < face.Glyph.Bitmap.Rows; i++)\r\n\t\t\t{\r\n\t\t\t\t\/\/get pointer to this row of the bitmap buffer\r\n\t\t\t\tIntPtr bufferPtr = IntPtr.Add(face.Glyph.Bitmap.Buffer, bufferOffset);\r\n\r\n\t\t\t\t\/\/ Width in pixels of each row\r\n\t\t\t\tint width = face.Glyph.Bitmap.Width, xOffset = 0;\r\n\t\t\t\twhile(width > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\t\/\/ Number of bits that contain valid data in the current byte.\r\n\t\t\t\t\tint stride = MathHelper.Min(8, width);\r\n\t\t\t\t\t\/\/ Read the next byte from the buffer.\r\n\t\t\t\t\tbyte b = Marshal.ReadByte(bufferPtr);\r\n\t\t\t\t\t\/\/ Expand each bit to a byte and copy to pixeldata.\r\n\t\t\t\t\tExpandByteAndCopy(b, stride, gpixelAlphas, rowOffset + xOffset);\r\n\t\t\t\t\txOffset += stride;\r\n\t\t\t\t\twidth -= stride;\r\n\t\t\t\t\tbufferPtr = IntPtr.Add(bufferPtr, 1);\r\n\t\t\t\t}\r\n\t\t\t  \/\/ Move to the start of the next row.\r\n\t\t\t  bufferOffset += Math.Abs(face.Glyph.Bitmap.Pitch);\r\n\t\t\t  rowOffset += rowOffsetInc;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tMarshal.Copy(face.Glyph.Bitmap.Buffer, gpixelAlphas, 0, gpixelAlphas.Length);\r\n\r\n\t\tglyphBitmap.SetPixelData(gpixelAlphas);\r\n\t}\r\n\r\n\tif (glyphBitmap == null) \r\n\t{\r\n\t\tvar gHA = face.Glyph.Metrics.HorizontalAdvance >> 6;\r\n\t\tvar gVA = face.Size.Metrics.Height >> 6;\r\n\r\n\t\tgHA = gHA > 0 ? gHA : gVA;\r\n\t\tgVA = gVA > 0 ? gVA : gHA;\r\n\r\n\t\tglyphBitmap = new PixelBitmapContent<byte>(gHA, gVA);\r\n\t}\r\n\r\n\t\/\/ not sure about this at all\r\n\tvar abc = new ABCFloat ();\r\n\tabc.A = face.Glyph.Metrics.HorizontalBearingX >> 6;\r\n\tabc.B = face.Glyph.Metrics.Width >> 6;\r\n\tabc.C = (face.Glyph.Metrics.HorizontalAdvance >> 6) - (abc.A + abc.B);\r\n\r\n\t\/\/ Construct the output Glyph object.\r\n\treturn new Glyph(character, glyphBitmap)\r\n\t{\r\n\t\tXOffset = -(face.Glyph.Advance.X >> 6),\r\n\t\tXAdvance = face.Glyph.Metrics.HorizontalAdvance >> 6,\r\n\t\tYOffset = -(face.Glyph.Metrics.HorizontalBearingY >> 6),\r\n\t\tCharacterWidths = abc\r\n\t};\r\n}\r\n```\r\n\r\n\r\nFurther to this, I think it's also valuable to give people the option of choosing a different font face index for their fonts. Some fonts are stored as font collections that contain multiple fonts under the same font family.\r\n\r\n![font-sample](https:\/\/user-images.githubusercontent.com\/52683885\/103450718-58d27300-4d0e-11eb-9606-e7bf7b0c4bd2.png)\r\n\r\nAs an example, the default Japanese font for Windows is MS Gothic, but it contains 3 fonts: MS Gothic, MS UI Gothic and MS PGothic. The above image show font face 0 and font face 1. Font face 0 uses oddly monospaced Latin characters and isn't hinted as well as font face 1, so doesn't look as clean when rendered at this small size.\r\n\r\nOf course this would also require another property to be added to FontDescription and another change in SharpFontImporter.cs (although only one line this time).\r\n\r\n```\r\nprivate Face CreateFontFace(FontDescription options, string fontName)\r\n{\r\n\ttry\r\n\t{\r\n\t\tconst uint dpi = 96;\r\n\t\tvar face = lib.NewFace(fontName, options.FontFaceIndex);\r\n\t\tvar fixedSize = ((int)options.Size) << 6;\r\n\t\tface.SetCharSize(0, fixedSize, dpi, dpi);\r\n\r\n\t\tif (face.FamilyName == \"Microsoft Sans Serif\" && options.FontName != \"Microsoft Sans Serif\")\r\n\t\t\tthrow new PipelineException(string.Format(\"Font {0} is not installed on this computer.\", options.FontName));\r\n\r\n\t\treturn face;\r\n\r\n\t\t\/\/ A font substitution must have occurred.\r\n\t\t\/\/throw new Exception(string.Format(\"Can't find font '{0}'.\", options.FontName));\r\n\t}\r\n\tcatch\r\n\t{\r\n\t\tthrow;\r\n\t}\r\n}\r\n```\r\n\r\nAnyway, I hope all of this is helpful when you get around to looking in to this issue\/feature."],"labels":["ContentPipeline","Help Wanted","Font"]},{"title":"Create Content Statistics Visualization Tool","body":"The MGCB tool current dumps a comma separated values file called `.mgstats` (see https:\/\/github.com\/MonoGame\/MonoGame\/issues\/5126 for details).  It looks sort of like this:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/43621257-21e6fd1e-969c-11e8-8ead-66928dfbba80.png)\r\n  https:\/\/gist.github.com\/tomspilman\/f28d61ff1bcce209891abd712a5303d5\r\n\r\nIt currently includes the following data which we could expand in the future if needed:\r\n\r\n - Source File Name\r\n - Dest File Name\r\n - Processor Type\r\n - Content Type\r\n - Source File Size\r\n - Dest File Size\r\n - Build Seconds\r\n\r\nThe next step here is to visualize this data to developers to help them find and address content size\/performance issues.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/43621891-2efd2f20-969f-11e8-9624-968d09d8e48d.png)\r\n\r\nWe would want to have this viewer be a separate stand alone application that directly reads the `.mgstats` file.  The Pipeline tool can then be fixed to launch this viewer.  This design allows the viewer to be reused by developers that have integrated with MGCB directly and don't use the Pipeline tool.","comments":[],"labels":["Feature Request","ContentPipeline","Help Wanted"]},{"title":"MonoGame WindowsDX is not compatible with SharpDX 4.2.0 yet","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nThe following issue pops up once you try to use SharpDX 4.2.0 together with MonoGame\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/2350015\/50542685-b08bf000-0bc3-11e9-8679-de55902c17da.png)\r\n\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["Is there a specific reason that would require SharpDX to be updated?\r\n\r\n(Note that DesktopGL doesn't use SharpDX at all, so I'm assuming your targeting a Windows or Windows Store project.)","Good question, was kinda in a rush when making this issue :).\r\n\r\nReason we would like to upgrade is because currently in SharpDX 4.0.1 there's an issue where the UWP apps you create can't be published to the Windows Store because they make use of some native calls (well they aren't actually used but they are included in the SharpDX DLL's). This pops up when you run the \"Windows App Cert Kit\" on them.\r\n\r\nThis was supposed to be fixed in SharpDX 4.2.0 however it apparently wasn't completely:\r\nhttps:\/\/github.com\/sharpdx\/SharpDX\/pull\/1111\r\n\r\nI fixed this in this pull request but then when testing it with the latest MonoGame version I ran into this issue.\r\n\r\nSo ideally we'd wait for SharpDX 4.2.1 to be released but untill then we could already create a branch where this issue is already fixed.","So the actual issue is that MonoGame doesn't pass the Windows Store certification?\r\n\r\nWe should update to SharpDX 4.2.1 went it comes out then (We could already setup a PR to fix this, but I guess it'll be merged only once it officially comes out. MonoGame tries to avoid custom branches for dependencies.).","Exactly :)","Feel free to ping here when 4.2.1 is available. :)","@mrhelmut  @Jjagg @cra0zy - So looks like SharpDX 4.2.1 will never release officially, so to fix this we're going to have to build the latest SharpDX ourselves and resolve the issue.\r\n\r\nWe have a fork here where we should land our fixes\/changes and build from:\r\n\r\n https:\/\/github.com\/MonoGame\/SharpDX\r\n\r\nIf someone can find the build instructions for the project i can set it up on our automated build process.\r\n\r\n"],"labels":["Maintenance"]},{"title":"Importer 'XmlImpoter' had unexpected failure!","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nI wanted to use `IntermediateSerializer` XML's. I did some research and realized that I needed to put whatever classes I want to load in a separate class library and add it as a reference to the main project. So I created a class library, added references to `MonoGame.Framework.dll` and `MonoGame.Framework.Content.Pipeline.dll` at `C:\\Program Files (x86)\\MSBuild\\MonoGame\\v3.0\\Tools`, and moved all classes except for the `Program` class (Main class) from my main (pre-existing) project to it.\r\n\r\nThen I generated a test XML file using `IntermediateSerializer`. Here it is.\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<XnaContent xmlns:PlatformerPrototype=\"PlatformerPrototype\">\r\n  <Asset Type=\"PlatformerPrototype:Level\">\r\n    <width>32<\/width>\r\n    <height>18<\/height>\r\n    <tileSetImage>\r\n      <Name>Sprites\\player<\/Name>\r\n      <Tag Null=\"true\" \/>\r\n    <\/tileSetImage>\r\n    <tileWidth>32<\/tileWidth>\r\n    <tileHeight>32<\/tileHeight>\r\n    <tileLayers>\r\n      <Item>0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<\/Item>\r\n    <\/tileLayers>\r\n    <gameObjects>\r\n      <Item Type=\"PlatformerPrototype:Solid\">\r\n        <position>0 300<\/position>\r\n        <maskPosition>0 0<\/maskPosition>\r\n        <maskSize>640 180<\/maskSize>\r\n        <depth>0<\/depth>\r\n        <debugTexture>\r\n          <Name>Sprites\\player<\/Name>\r\n          <Tag Null=\"true\" \/>\r\n        <\/debugTexture>\r\n      <\/Item>\r\n      <Item Type=\"PlatformerPrototype:Solid\">\r\n        <position>0 100<\/position>\r\n        <maskPosition>0 0<\/maskPosition>\r\n        <maskSize>300 140<\/maskSize>\r\n        <depth>0<\/depth>\r\n        <debugTexture>\r\n          <Name>Sprites\\player<\/Name>\r\n          <Tag Null=\"true\" \/>\r\n        <\/debugTexture>\r\n      <\/Item>\r\n    <\/gameObjects>\r\n  <\/Asset>\r\n<\/XnaContent>\r\n```\r\n\r\nI proceeded to run the project. I encountered a build error: `Importer 'XmlImpoter' had unexpected failure!`\r\n\r\n```\r\n1>------ Build started: Project: PlatformerPrototype, Configuration: Debug Any CPU ------\r\n1>  C:\/Users\/junmo_000\/Documents\/Visual Studio 2017\/Projects\/PlatformerPrototype - Backup\/PlatformerPrototype\/Content\/Maps\/test.xml\r\n1>C:\/Users\/junmo_000\/Documents\/Visual Studio 2017\/Projects\/PlatformerPrototype - Backup\/PlatformerPrototype\/Content\/Maps\/test.xml : error : Importer 'XmlImporter' had unexpected failure!\r\n1>  System.Reflection.ReflectionTypeLoadException: \uc694\uccad\ud55c \ud615\uc2dd \uc911 \ud558\ub098 \uc774\uc0c1\uc744 \ub85c\ub4dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc744 \ubcf4\ub824\uba74 LoaderExceptions \uc18d\uc131\uc744 \uac80\uc0c9\ud558\uc2ed\uc2dc\uc624.\r\n1>     \uc704\uce58: System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)\r\n1>     \uc704\uce58: System.Reflection.Assembly.GetTypes()\r\n1>     \uc704\uce58: System.Linq.Enumerable.<SelectManyIterator>d__23`3.MoveNext()\r\n1>     \uc704\uce58: System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n1>     \uc704\uce58: System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source)\r\n1>     \uc704\uce58: Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateSerializer.FindType(String typeName)\r\n1>     \uc704\uce58: Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateReader.ReadObject[T](ContentSerializerAttribute format, ContentTypeSerializer typeSerializer, T existingInstance)\r\n1>     \uc704\uce58: Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateReader.ReadObject[T](ContentSerializerAttribute format)\r\n1>     \uc704\uce58: Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateSerializer.Deserialize[T](XmlReader input, String referenceRelocationPath)\r\n1>     \uc704\uce58: Microsoft.Xna.Framework.Content.Pipeline.XmlImporter.Import(String filename, ContentImporterContext context)\r\n1>     \uc704\uce58: Microsoft.Xna.Framework.Content.Pipeline.ContentImporter`1.Microsoft.Xna.Framework.Content.Pipeline.IContentImporter.Import(String filename, ContentImporterContext context)\r\n1>     \uc704\uce58: MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.ProcessContent(PipelineBuildEvent pipelineEvent)\r\n1>  Skipping C:\/Users\/junmo_000\/Documents\/Visual Studio 2017\/Projects\/PlatformerPrototype - Backup\/PlatformerPrototype\/Content\/Sprites\/player.png\r\n1>  Skipping C:\/Users\/junmo_000\/Documents\/Visual Studio 2017\/Projects\/PlatformerPrototype - Backup\/PlatformerPrototype\/Content\/Sprites\/quote.png\r\n1>C:\\Program Files (x86)\\MSBuild\\MonoGame\\v3.0\\MonoGame.Content.Builder.targets(84,5): error MSB3073: The command \"\"C:\\Program Files (x86)\\MSBuild\\MonoGame\\v3.0\\Tools\\MGCB.exe\" \/quiet \/platform:DesktopGL \/@:\"C:\\Users\\junmo_000\\Documents\\Visual Studio 2017\\Projects\\PlatformerPrototype - Backup\\PlatformerPrototype\\Content\\Content.mgcb\" \/outputDir:\"bin\\DesktopGL\\Content\" \/intermediateDir:\"obj\\DesktopGL\\Content\"\" exited with code 1.\r\n========== Build: 0 succeeded, 1 failed, 1 up-to-date, 0 skipped ==========\r\n```\r\n\r\nWhy? I thought this error occured when there weren't references to the classes, so I added them. I am using Visual Studio 2017 and added the references via Project Name (right click) >> Add >> Reference, FYI, if that matters.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.8.0.237\r\n\r\n#### What operating system are you using:\r\n- Windows 8.1\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["Ok, I discovered the Reference parameter in the Pipeline tool. I have to build the class library and add it there as DLL, it seems. However, I still can't get that to work. I just right-clicked on the class library, built it, and added that dll to the References in the Pipeline tool. Anything I'm doing wrong?","That should work, what's the exception?"],"labels":["ContentPipeline"]},{"title":"MonoGame.Framework.Content.Pipeline.Portable update to .NET Standard 2.0?","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\n\r\nIs there any chance of MonoGame.Framework.Content.Pipeline.Portable being updated to .NET Standard 2.0 any time soon?\r\n","comments":["For reference: #4975 & #5339"],"labels":["ContentPipeline"]},{"title":"Garbage Heartbeat leads to eventual collection from holding a key.","body":"Im using the windows gl template on windows 10 64bit. \r\nRunning this windowed.\r\nI didn't test this on dx.\r\n\r\nIm seeing a very weird collection when i just hold a key down.\r\n(If i don't hold a key down i get no garbage)\r\n\r\nbut \r\nWhat is really strange about it is that it is like a heartbeat. \r\n\r\nIt doesn't seem to be tied to frame rate at all.  If i run with fix at 60fps or 5000 fps. \r\nI get just under ,01 megabytes of garbage created about every second or two like a clock. . \r\nThe collection takes about or over a minute to kick in as well.\r\n\r\nIt's not a lot but the frequency of the allocation is really strange.\r\nRunning the performance anaylizer it (looks like) its coming from TextInputEventArgs ?\r\n\r\n![monogamekeyheldgarbagecut01](https:\/\/user-images.githubusercontent.com\/7495196\/50359453-d281d480-052a-11e9-8787-44532c3aaeab.png)\r\n\r\nThe time it occured below isn't exact as my class below waits a few seconds for the app to load before it starts tracking the memory. It does eventually collect though if i hold a key down. \r\n\r\nThis is annoying its been around for a long while now i think but it makes it hard to see when i actually create a allocations myself with this heartbeat.\r\n\r\n**The worst part here is that TextInput is actually commented out and so is Keyboard in both images.**\r\n\r\n![monogamekeyheldgarbagecut02](https:\/\/user-images.githubusercontent.com\/7495196\/50359667-8d11d700-052b-11e9-95fb-e1722f60d62f.png)\r\n\r\nId think maybe something was being boxed unboxed but that makes no sense as if that were the case it should be generating constant garbage and tons of it non stop.  Anyways i can't think of anyway to narrow this down more without building monogame from source and wrapping the code with gc totalmemory(true) which kills the framerate but would let it be tallyed.\r\n\r\nTick Tick Tick ... weird.","comments":["Might be relevant? #6360"],"labels":["Performance","Input"]},{"title":"Add F# templates","body":"We currently do not provide F# project templates.\r\nVB templates are tracked in #4127.","comments":["I added F# templates in 2012: https:\/\/github.com\/MonoGame\/MonoGame\/commit\/ca364aca1617cc7ea37af330c12ced1418281eab#diff-88197cac09f46884cee48e17829b0ed0\r\nNot sure what happened to them ...","I have .NET Core templates for F# and VB.Net incoming.","> I added F# templates in 2012\r\n\r\nThe old F# templates were removed in #3698. They weren't being used anymore at that point. Looks like they didn't get moved over when some changes where made to how templates where defined.","this needs to be fixed. I can take care of this for Windows and .NET Core I guess if the templates from @cra0zy doesn't fit the needs.","How so, I have submitted 2 templates for F# so far, feel free to start working on any of the remaining ones:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/tree\/develop\/ProjectTemplates\/DotNetTemplate\/MonoGame.Templates.FSharp\/content ","do you know when the next release is made? In my current situation having \"official\" templates would be of benefit :) ","Not sure myself either, but they are not connected to the build bot right now, so even if the release is made, they won't get included.","It\u2019s easy enough to add if you watch my latest vid.\n\nOn Tue, 30 Apr 2019 at 21:23, Harry <notifications@github.com> wrote:\n\n> Not sure myself either, but they are not connected to the build bot right\n> now, so even if the release is made, they won't get included.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/MonoGame\/MonoGame\/issues\/6590#issuecomment-488101201>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAEPXSTMMSFZJJWNG3C4EHTPTCTDJANCNFSM4GJPAUBA>\n> .\n>\n","There's very little demand for F# templates, so for the MG team this isn't a priority. But if anyone wants to add the templates they're welcome to. Some templates already exist [here](https:\/\/github.com\/MonoGame\/MonoGame\/tree\/develop\/Templates\/MonoGame.Templates.FSharp\/content), but a lot are missing.\r\n\r\nTemplates should mimic the C# templates for `dotnet new` defined [here](https:\/\/github.com\/MonoGame\/MonoGame\/tree\/develop\/Templates\/MonoGame.Templates.CSharp). We can generate Visual Studio and VS for Mac templates from the dotnet new templates so you don't have to worry about that :)","To be clear the templates for F# do actually exist in this repo:\r\n\r\n```\r\ndotnet new --install ~\/github\/MonoGame\/ProjectTemplates\/DotNetTemplate\/MonoGame.Templates.FSharp\/content\r\n```\r\n\r\nThis will install them from the cloned repo, assuming you cloned it to `~\/github\/MonoGame`","The current FSharp templates are broken and need to be updated, ie. even tho they compile and run they are not even using the correct nuget packages.","ok checking in with this one:\r\n>they are not even using the correct nuget packages  \r\n\r\nWhere is that specified?  I can see a 3.8.* in the [package reference](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/Templates\/MonoGame.Templates.FSharp\/content\/MonoGame.Library.NetStandard.FSharp\/MGNamespace.fsproj#L12) the `MonoGame.Library.NetStandard.FSharp` template which appears the same in the C# one:  https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/Templates\/MonoGame.Templates.CSharp\/content\/MonoGame.Library.NetStandard.CSharp\/MGNamespace.csproj#L8","Would it be somehow possible for the MonoGame team to publish the F# templates too as nuget package? Right now only C# ones are on nuget \ud83d\ude3f ","Command is these days `dotnet new --install .\/Templates\/MonoGame.Templates.FSharp\/content` within the root folder if one cloned the repo.","No more F# templates in the repository?","They were removed here:  https:\/\/github.com\/MonoGame\/MonoGame\/commit\/d3afac858ecaa9ab0b9c5a4d231fcc67aae3311f","Removed because not enough demand\/users over the availability of maintainers to keep maintaining them. If anyone wants to contribute them and setup the build process to package them in a nuget and distribute them with the github actions, it'd be a welcome PR."],"labels":["Feature Request","Help Wanted"]},{"title":"Support VideoPlayer seeking","body":"`VideoPlayer` should support setting the position in the video to play back.\r\nThe most straightforward way to add this API would be to add a setter to [`PlayPosition`](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/e517aa9a4449cabf15da6ffad8dc5ebbf0ac4c5f\/MonoGame.Framework\/Media\/VideoPlayer.cs#L69).","comments":[],"labels":["Feature Request","Video"]},{"title":"Custom generic types in xml not resolved","body":"As reported [here](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/3186#issuecomment-132088450) in #3186. We need to test if this is still an issue (I don't think this changed) and if PR #4088 is still relevant.","comments":[],"labels":["ContentPipeline","Needs Testing"]},{"title":"Pipeline - Invalid \/ Missing importer or processor with plugins that reference other assemblies","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nWhen using a custom content plugin, Pipeline.exe fails to load them if they have references that are in other assemblies. \r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- WindowsDX\r\n","comments":["![image](https:\/\/user-images.githubusercontent.com\/10659660\/49169697-3b40ad00-f2ef-11e8-99d4-5896d6d138f3.png)\r\n"],"labels":["MGCB Editor"]},{"title":"Supress \"Skipping...\" messages in the Content Builder","body":"Every time a build gets run in Visual Studio, \"Skipping ... \" messages are outputted from the Content builder for each resource that has its build action set to \"Copy\" in the content builder. This can be a lot of messages, depending on the setup. It would be OK to get these messages once for a full project rebuild, but it is not good to get them for every single small build as it makes the Output window in Visual Studio difficult to navigate.\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n- WindowsDX\r\n","comments":["@cra0zy What do you think is the best approach here? Add an option to MGCB to not output skip messages that can be toggled from the Pipeline Tool on the root node (disabled by default)? Pass the option when running from VS (can we detect this in the targets file) so it's always suppressed in VS."],"labels":["Feature Request"]},{"title":"Monogame.Framework.Android 3.7.0.1708 crashes on audio start up on Android 4.2.2 in Release mode","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nApp crashes when on start app on a Samsung SM-T110 running Android 4.2.2.\r\nBizarrely, it works in Debug mode. Only crashes in Release mode.\r\n\r\nWorks fine on Monogame 3.6.0 (well, apart from it not switching to landscape mode)\r\n\r\nSame result on Quanta Gigaset QV1030 running 4.2.2\r\n\r\n```\r\n[MonoDroid] UNHANDLED EXCEPTION:\r\n[MonoDroid] Microsoft.Xna.Framework.Audio.NoAudioHardwareException (0x80004005): OpenAL device could not be initialized. ---> System.NullReferenceException: Object reference not set to an instance of an object\r\n[MonoDroid]   at Microsoft.Xna.Framework.Audio.OpenALSoundController.OpenSoundController () [0x00000] in <03b9f832711c4c6f9c98f98173bda512>:0 \r\n[MonoDroid]   at Microsoft.Xna.Framework.Audio.OpenALSoundController.OpenSoundController () [0x00031] in <03b9f832711c4c6f9c98f98173bda512>:0 \r\n[MonoDroid]   at Microsoft.Xna.Framework.Audio.OpenALSoundController..ctor () [0x00011] in <03b9f832711c4c6f9c98f98173bda512>:0 \r\n[MonoDroid]   at Microsoft.Xna.Framework.Audio.OpenALSoundController.get_GetInstance () [0x00007] in <03b9f832711c4c6f9c98f98173bda512>:0 \r\n[MonoDroid]   at Microsoft.Xna.Framework.AndroidGamePlatform..ctor (Microsoft.Xna.Framework.Game game) [0x00060] in <03b9f832711c4c6f9c98f98173bda512>:0 \r\n[MonoDroid]   at Microsoft.Xna.Framework.GamePlatform.PlatformCreate (Microsoft.Xna.Framework.Game game) [0x00000] in <03b9f832711c4c6f9c98f98173bda512>:0 \r\n[MonoDroid]   at Microsoft.Xna.Framework.Game..ctor () [0x001fb] in <03b9f832711c4c6f9c98f98173bda512>:0 \r\n[MonoDroid]   at CocosSharp.CCGame..ctor () [0x00000] in <6e8eeb74ee1246118c56d92f42ed6d59>:0 \r\n[MonoDroid]   at CocosSharp.CCApplication..ctor (System.Boolean isFullScreen, System.Nullable`1[T] mainWindowSizeInPixels) [0x00000] in <6e8eeb74ee1246118c56d92f42ed6d59>:0 \r\n[MonoDroid]   at PlayHome.AndroidActivity.OnCreate (Android.OS.Bundle bundle) [0x00168] in <5300113719604f72aeea55db75670a1b>:0 \r\n[MonoDroid]   at Android.App.Activity.n_OnCreate_Landroid_os_Bundle_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_savedInstanceState) [0x00011] in <053b4c31b8ef490ba13fab4afafdba6a>:0 \r\n[MonoDroid]   at (wrapper dynamic-method) System.Object.3(intptr,intptr,intptr)\r\n[AndroidRuntime] Shutting down VM\r\n[AndroidRuntime] FATAL EXCEPTION: main\r\n[AndroidRuntime] android.runtime.JavaProxyThrowable: Microsoft.Xna.Framework.Audio.NoAudioHardwareException (0x80004005): OpenAL device could not be initialized. ---> System.NullReferenceException: Object reference not set to an instance of an object\r\n[AndroidRuntime]   at Microsoft.Xna.Framework.Audio.OpenALSoundController.OpenSoundController () [0x00000] in <03b9f832711c4c6f9c98f98173bda512>:0 \r\n[AndroidRuntime]   at Microsoft.Xna.Framework.Audio.OpenALSoundController.OpenSoundController () [0x00031] in <03b9f832711c4c6f9c98f98173bda512>:0 \r\n[AndroidRuntime]   at Microsoft.Xna.Framework.Audio.OpenALSoundController..ctor () [0x00011] in <03b9f832711c4c6f9c98f98173bda512>:0 \r\n[AndroidRuntime]   at Microsoft.Xna.Framework.Audio.OpenALSoundController.get_GetInstance () [0x00007] in <03b9f832711c4c6f9c98f98173bda512>:0 \r\n[AndroidRuntime]   at Microsoft.Xna.Framework.AndroidGamePlatform..ctor (Microsoft.Xna.Framework.Game game) [0x00060] in <03b9f832711c4c6f9c98f98173bda512>:0 \r\n[AndroidRuntime]   at Microsoft.Xna.Framework.GamePlatform.PlatformCreate (Microsoft.Xna.Framework.Game game) [0x00000] in <03b9f832711c4c6f9c98f98173bda512>:0 \r\n[AndroidRuntime]   at Microsoft.Xna.Framework.Game..ctor () [0x001fb] in <03b9f832711c4c6f9c98f98173bda512>:0 \r\n[AndroidRuntime]   at CocosSharp.CCGame..ctor () [0x00000] in <6e8eeb74ee1246118c56d92f42ed6d59>:0 \r\n[AndroidRuntime]   at CocosSharp.CCApplication..ctor (System.Boolean isFullScreen, System.Nullable`1[T] mainWindowSizeInPixels) [0x00000] in <6e8eeb74ee1246118c56d92f42ed6d59>:0 \r\n[AndroidRuntime]   at PlayHome.AndroidActivity.OnCreate (Android.OS.Bundle bundle) [0x00168] in <5300113719604f72aeea55db75670a1b>:0 \r\n[AndroidRuntime]   at Android.App.Activity.n_OnCreate_Landroid_os_Bundle_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_savedInstanceState) [0x00011] in <053b4c31b8ef490ba13fab4afafdba6a>:0 \r\n[AndroidRuntime]   at (wrapper dynamic-method) System.Object.3(intptr,intptr,intptr)\r\n[AndroidRuntime] \tat md552b2dd48b3d67eb7f130d502307367f2.AndroidActivity.n_onCreate(Native Method)\r\n[AndroidRuntime] \tat md552b2dd48b3d67eb7f130d502307367f2.AndroidActivity.onCreate(AndroidActivity.java:50)\r\n[AndroidRuntime] \tat android.app.Activity.performCreate(Activity.java:5326)\r\n[AndroidRuntime] \tat android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1097)\r\n[AndroidRuntime] \tat android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2225)\r\n[AndroidRuntime] \tat android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2316)\r\n[AndroidRuntime] \tat android.app.ActivityThread.access$700(ActivityThread.java:158)\r\n[AndroidRuntime] \tat android.app.ActivityThread$H.handleMessage(ActivityThread.java:1296)\r\n[AndroidRuntime] \tat android.os.Handler.dispatchMessage(Handler.java:99)\r\n[AndroidRuntime] \tat android.os.Looper.loop(Looper.java:176)\r\n[AndroidRuntime] \tat android.app.ActivityThread.main(ActivityThread.java:5365)\r\n[AndroidRuntime] \tat java.lang.reflect.Method.invokeNative(Native Method)\r\n[AndroidRuntime] \tat java.lang.reflect.Method.invoke(Method.java:511)\r\n[AndroidRuntime] \tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1102)\r\n[AndroidRuntime] \tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:869)\r\n[AndroidRuntime] \tat dalvik.system.NativeStart.main(Native Method)\r\n\r\n\r\n```\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.0.1708\r\n\r\n#### What operating system are you using:\r\n- MacOS Mojave\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- Android\r\n","comments":[],"labels":["Android","Audio"]},{"title":"DynamicSoundEffectInstance.GetSampleSizeInBytes() can return an invalid value.","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nDynamicSoundEffectInstance.GetSampleSizeInBytes() does not always return a value correctly padded to the applicable byte alignment for writing to the buffer. (I don't know the exact terminology here, so that probably sounded weird.)\r\n\r\nIf I'm not mistaken, the primary purpose of this function is to calculate the number of bytes to copy for DynamicSoundEffectInstance.SubmitBuffer(), which requires the byte count to be aligned correctly. Not to mention there really isn't any case (at least that I can think of) where an unaligned result from this function would be useful. As such, shouldn't the value returned by GetSampleSizeInBytes() already be aligned?\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["Well, it's just a helper method that computes how many bytes a sample takes up. It's not tied to any kind of alignment and rounding it up in any way would make it incorrect. \nThat said, if you call that method it should return the right size to pass to SubmitBuffer for the given parameters. What error message happens, what's the returned size for your use case and what should be passed to SubmitBuffer?","I submitted this report from memory, I will try to reproduce later.\r\n\r\nIf you look at my earlier issue, regarding looping of sounds with intros, I posted a snippet that achieves this via DynamicSoundEffectInstance. I added a function in that code, which pads a value to the nearest multiple of 8, which would appear to be the smallest always-safe alignment for DynamicSoundEffectInstance. You can probably reproduce the issue by using my code snippet from there, and dummying out the alignment function (just make it return the same value that's passed to it unmodified)."],"labels":["Audio"]},{"title":"[Android] Empty landscape mode MG 3.7 app crashes on Android 9 emulator","body":"Steps to reproduce:\r\n\r\n1. Create an empty Monogame Android application using the official template.\r\n2. Run on Android P Emulator - everything works fine\r\n3. Stop the app, **change the screen orientation in Activity1.cs to ScreenOrientation.Landscape**\r\n4. Run again - UI keeps crashing\r\n\r\nPixel phone emulator running Android P (API 28) on x86_64 + Google APIs\r\nMonoGame 3.7.0.1708\r\nXamarin.Android 9.0.0.20\r\nVisual Studio for Mac 7.6.9","comments":[],"labels":["Android"]},{"title":"All tested fonts the 'space' character has a very large Y cropping value.","body":"Ok so because i was doing something a little unusual basically related to word wrapping and editing.\r\nThe function i was making had to detect were a click was in a word wrapped message. For editing purposes it had to translate the index of the click to a character index in the original unwrapped text. \r\nWere in i discover a strange discrepancy in the first couple tests i ran. \r\n\r\nSo i hunted it down.\r\n\r\nEvery font i tested had its white space characters cropping.Y.\r\nValue at a strangely large amount in most case by about two lines down.\r\n\r\nthe average values in the below font for y croping are like between 3 to 6 for all the letters.\r\n\r\n\r\n![a odd space bug](https:\/\/user-images.githubusercontent.com\/7495196\/48636097-ef5d4200-e997-11e8-968b-9414fcc179be.png)\r\n\r\nI temporarily fixed it in my function by seting any spaces y cropping to zero but thats not a real solution.\r\n\r\nI believe this is related to this but im not sure how.\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/6f34eb393aa0ac005888d74c5c4c6ab5615fdc8c\/MonoGame.Framework.Content.Pipeline\/Graphics\/Font\/GlyphCropper.cs\r\n\r\n```\r\n\t\t\t\/\/ Crop the top.\r\n\t\t\twhile ((glyph.Subrect.Height > 1) && BitmapUtils.IsAlphaEntirely(0, glyph.Bitmap, new Rectangle(glyph.Subrect.X, glyph.Subrect.Y, glyph.Subrect.Width, 1)))\r\n\t\t\t{\r\n\t\t\t\tglyph.Subrect.Y++;\r\n\t\t\t\tglyph.Subrect.Height--;\r\n\r\n\t\t\t\tglyph.YOffset++;\r\n}\r\n```\r\n\r\nhttp:\/\/community.monogame.net\/t\/font-spacing-issue\/11030\/4\r\n\r\n\r\n\r\nMonoGame 3.7\r\nWindows\r\nDesktopGL, WindowsDX","comments":["I believe it's somehow related to this code, and partly related to how freetype generates glyph rectangles.\r\n\r\nI'm assuming that you are loading a font through a SpriteFont descriptor, and not a bitmap font?\r\n\r\nI think that freetype already gets a fully cropped rectangle when reading the space glyph info, and then MonoGame tries to do the same thing which may be useful for bitmap fonts, but is twice the same job for non-bitmap fonts (hence the YOffset being too far off).\r\n(But if you're working with bitmap fonts, I'm probably wrong.)\r\n\r\nBesides this discrepancy, a totally flat rectangle for glyphs with no pixel is what a typography system is expecting, the YOffset shouldn't be changed compared to what freetype is reading (this basically comes from the font info itself).\r\nI guess that what you would have liked is that a space glyph would still have a positive height (instead of 0) so you could have a collider. But that would probably break some font renderers, the YOffset value is an essential data in font rendering accuracy (even in the case of a totally flat glyph, some circumstances may require it).\r\n\r\nIt's true that we're talking about spaces. It's a character that shouldn't have rendering issues with a wrong YOffset (and doesn't seem to have any issue with this double cropping bug). So maybe we could hack something around? Yet, I don't know if we should hack around fonts for a specific use, it may still break things we're not aware of.\r\n\r\nMaybe you could rebuild the SpriteFont by hacking the space glyph to allow your collision detection to work?\r\n\r\nAnyway, I'm going to take a look at this and at least fix the far too off YOffset issue (it shouldn't be more than flat).","> I'm assuming that you are loading a font through a SpriteFont descriptor, and not a bitmap font?\r\n\r\nYes i typically just add a font to my system then changed the descriptor to which ever font i want to use or test with. Makes things fast and simple. However i have a bitmap font i made myself and added to my system, when i import that as a spritefont it also gets that big y cropping value. So the importing is doing something funky there.\r\n\r\n> the YOffset shouldn't be changed compared to what freetype is reading (this basically comes from the font info itself). I guess that what you would have liked is that a space glyph would still have a positive height (instead of 0) so you could have a collider.\r\n\r\nIn my first couple tests i just naively checked against the drawing rectangle position and realized something weird was going on i zeroed out the y cropping when i realized i couldn't click any spaces.\r\n\r\nFortunately i can just checked the click point against the x y offsets as that is actually tracking the real start positions separate from any cropping kerning ect so the collision isn't a problem for me.\r\n\r\n**However...**\r\n\r\nThis guy was having a different problem with his white spacing being different to xna shown in a image in that link.\r\n\r\nIf you look at his text were the \"Tournament Mode\" is written you can see his spacing issue.\r\n\r\n<img src=\"http:\/\/community.monogame.net\/uploads\/default\/original\/2X\/0\/044f19286f6ae3314da2142b63483b03eec5314b.png\">\r\n\r\nhttp:\/\/community.monogame.net\/t\/font-spacing-issue\/11030\r\n\r\nI went back and checked what exactly was going on in the first place as i could see it was like really off as clicks were bouncing around on white space by huge amounts. I was thinking this maybe the cause of a inconsistency to xna or just a bug in general that could cause weird stuff to happen. If it is pulling in bogus y cropping values the other values could be getting messed up too.\r\n\r\nI just check for collision on the offset before the cropping is added to bypass the problem but i imagine if i had that guys font it might still be a problem.\r\n\r\n```\r\n                if (firstGlyphOfLine)\r\n                {\r\n                    \/\/ Removes left side bearing for the first character on a line\r\n                    offset.X = Math.Max(currentGlyph.LeftSideBearing, 0);\r\n                    firstGlyphOfLine = false;\r\n                }\r\n                else\r\n                    offset.X += spacing + currentGlyph.LeftSideBearing;\r\n\r\n                var m = offset;\r\n                m.X += currentGlyph.Cropping.X;\r\n                m.Y += currentGlyph.Cropping.Y;\r\n\r\n                dest = new Rectangle\r\n                    (\r\n                    (int)(m.X * scale.X),\r\n                    (int)(m.Y * scale.Y),\r\n                    (int)(currentGlyph.BoundsInTexture.Width * scale.X),\r\n                    (int)(currentGlyph.BoundsInTexture.Height * scale.Y)\r\n                    );\r\n                \r\n                \/\/ guess i still had that destination check in on this initial click function\r\n\r\n                var half = (int)(lineHeightSpacing \/2);\r\n                var checker = new Rectangle(ClickPointOnWrappedText.X - (int)lineHeightSpacing, ClickPointOnWrappedText.Y - half, (int)lineHeightSpacing, (int)lineHeightSpacing);\r\n                if (checker.Contains(offset))\r\n                {\r\n                    IndexToUnWrappedOriginal = i - numberOfNewlinesInsertedDueToWrappingThisFar;\r\n                    IndexToWrapped = i;\r\n                    ReAlignedClickPoint = offset.ToPoint() + boundRect.Location;\r\n                }\r\n```\r\n\r\n","Ah yes, good catch, there may be an issue with cropping the XOffset or XAdvance values as well!"],"labels":["Font"]},{"title":"SoundEffect panning does not split properly","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nFrom the forums: http:\/\/community.monogame.net\/t\/soundeffect-panning-does-not-split-properly\/11092\r\n\r\nThe docs say that the pan value of `SoundEffect.Play` ranges from -1.0f to 1.0f, but audio is only playing out of the left speaker, right speaker, or both, equally. `pan = 0.1f` is being treated the same as `pan = 1.0f`. This behaved as expected when using the SharpDX library \/ XAudio, but not after we moved to OpenGL.\r\n\r\nThis is the function we wrote to play the audio.\r\n\r\n```\r\npublic static void PlaySound(string name, float vol = 0.5f, float pan = 0.0f, bool jitter = false)\r\n{\r\n    bool ok = SFX.TryGetValue(name, out SoundEffect audio);\r\n    if (ok)\r\n    {\r\n        float pitch = jitter ? ((float)Utils.Random.NextDouble() \/ 4.0f) : 0.0f;\r\n        audio.Play(vol, pitch, pan);\r\n    }\r\n}\r\n```\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows 10, macOS Mojave\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL (bug did not occur with WindowsDX)\r\n","comments":["This happens because of #5739. Under DesktopGL changing pan (and some other properties) only works if the SFX is playing. A good fix is proposed in [this comment](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/5739#issuecomment-304502323).\r\n\r\nAs a workaround you can create an instance of the SFX yourself, play it and then immediately set the pan, pitch and volume.","Tried the workaround like this:\r\n\r\n```\r\npublic static void PlaySound(string name, float vol = 0.5f, float pan = 0.0f, bool jitter = false)\r\n{\r\n    bool ok = SFX.TryGetValue(name, out SoundEffect audio);\r\n    if (ok)\r\n    {\r\n        float pitch = jitter ? ((float)Utils.Random.NextDouble() \/ 4.0f) : 0.0f;\r\n        SoundEffectInstance instance = audio.CreateInstance();\r\n        instance.Play();\r\n        instance.Pan = 0.2f;\r\n        instance.Pitch = pitch;\r\n        instance.Volume = vol;\r\n    }\r\n}\r\n```\r\n\r\nBut this behaved the same as the first example with the `.Play(vol, pitch, pan)` function (the audio plays completely out of one speaker).","Damn, I thought that would work.  So we're probably messing up something else too.\n\nOpenAL does not directly support panning, so we use the 3D audio support to implement it, which is not as straightforward as setting a panning value. ","Since 3D is used to create the stereo panning effect, a workaround for OpenAL would be to raise the listener's Y position up by a few units. The closer the emitter is to the listener, the more pronounced the change will be. I've found that a Y value of 0.5f for the emitter will translate more or less OK for values between -1 and 1. I'm sure there's a better algorithm to come up with a much closer approximation, but this seems to work OK enough for most usecases. I see that in SoundEffectInstance.OpenAL.cs you already try this with a z value of 0.1f, but from playing around with it, that value is too small. Changing this value to 0.5f should workaround this issue a bit better. Not a perfect solution, but good enough. ","Is there any update on this issue? I'm on the latest version of monogame and I have this same problem.\r\n\r\nIs there any old version of monogame without this issue?","I have the same issue too.  I use the Windows templates for most of my projects, but was considering migrating to DesktopGL to support Steam Deck as WMA audio doesn't work on it.  But sound panning doesn't work properly =\\\r\n\r\nThe issue is the same in older versions of MonoGame 3.8.  It works properly under SharpDX but not DesktopGL.  I hope that this can be addressed at some point.","I've attempted to set the z value in PlatformSetPan to 0.5f and as high as 10f, and I still get the same panning bug where any pan is either 100% left, 100% right, or dead center.","OpenAL is too limiting and can't properly mimic XAudio2. We should look into replacing OpenAL with FAudio to have a proper accuracy versus XAudio2 throughout all our targets.\r\n\r\nIn the meantime, I think it is worth looking into improving the OpenAL implementation."],"labels":["Audio"]},{"title":"Slight stuttering issue","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nI get a slight stuttering problem on a very basic example (just a 16x32 texture moving through the screen).\r\n\r\nI'm printing out the elapsed seconds on the Draw method. The rate seems to be unstable (with 0.0333334 peaks, sometimes more, instead of the -I assume- expected 0.0166667). Please find\r\n the attached file: [stutter.txt](https:\/\/github.com\/MonoGame\/MonoGame\/files\/2589036\/stutter.txt).\r\n\r\nThe elapsed seconds on the Update method seem to be stable (0.0166667), as expected.\r\n\r\nI've noticed the issue gets worse if I have an external screen plugged in (so the graphics card is doing more work), but, as discussed with @MichaelDePiazzi, this should still work fine.\r\n\r\nThis is the source code:\r\n\r\n```C#\r\nusing System.Diagnostics;\r\nusing Microsoft.Xna.Framework;\r\nusing Microsoft.Xna.Framework.Graphics;\r\nusing Microsoft.Xna.Framework.Input;\r\n\r\nnamespace Stuttering.MacOS\r\n{\r\n    public class Game1 : Game\r\n    {\r\n        GraphicsDeviceManager graphics;\r\n        SpriteBatch spriteBatch;\r\n\r\n        Texture2D texture;\r\n        Point enemy = new Point(0, 0);\r\n        \r\n        const int WIDTH = 2 * 640;\r\n        const int HEIGHT = 2 * 360;\r\n        \r\n        public Game1()\r\n        {\r\n            graphics = new GraphicsDeviceManager(this)\r\n            {\r\n                PreferredBackBufferWidth = WIDTH,\r\n                PreferredBackBufferHeight = HEIGHT\r\n            };\r\n            Content.RootDirectory = \"Content\";\r\n        }\r\n\r\n        protected override void Initialize()\r\n        {\r\n            base.Initialize();\r\n        }\r\n        \r\n        protected override void LoadContent()\r\n        {\r\n            spriteBatch = new SpriteBatch(GraphicsDevice);\r\n            \r\n            texture = Content.Load<Texture2D>(\"enemy-1\");\r\n        }\r\n        \r\n        protected override void Update(GameTime gameTime)\r\n        {\r\n            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))\r\n                Exit();\r\n\r\n            enemy += new Point((int)(200.0f * gameTime.ElapsedGameTime.TotalSeconds), 0);\r\n\r\n            base.Update(gameTime);\r\n        }\r\n\r\n        protected override void Draw(GameTime gameTime)\r\n        {\r\n            Debug.WriteLine(\"Draw - gametime total seconds: \" + gameTime.ElapsedGameTime.TotalSeconds);\r\n            graphics.GraphicsDevice.Clear(Color.Black);\r\n\r\n            spriteBatch.Begin();\r\n            spriteBatch.Draw(texture, enemy.ToVector2(), Color.White);\r\n            spriteBatch.End();\r\n\r\n            base.Draw(gameTime);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI wanted to narrow it down to the minimum, but in case this helps, I include another file \r\n[Game1.txt](https:\/\/github.com\/MonoGame\/MonoGame\/files\/2589059\/Game1.txt) with the texture changing direction when reaching the screen bounds (this makes it easier to see, as sometimes it takes a few seconds). Also, the texture is scaled to make it easier to see, but this shouldn't affect the performance much?\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- 3.8.0.132\r\n\r\n#### What operating system are you using:\r\n- Mac\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["First I'll just give some clarification about the values you get from `ElapsedGameTime` -- When using fixed time step, the `ElapsedGameTime` in the `Update` method is always the target elapsed time (e.g. default is 16.7ms for 60fps). The `ElapsedGameTime` in `Draw` is usually going to be the same, but will be a multiple of it if frames were missed (e.g. if 1 frame was missed, then it will be 33.3ms). If you want to get the true elapsed time when using fixed time step (e.g. if you are benchmarking the timing accuracy), you have to measure it yourself.\r\n\r\nBut you're seeing these higher values in `Draw` because something is causing a delay resulting in the updates falling behind. MonoGame is then running multiple updates in a row to catch up from it, followed by a `Draw` with the increased `ElapsedTime` to account for the missed frames.\r\n\r\nHope this all makes sense (it's getting a bit late for me here). But anyway, I'll leave you with a few things to try:\r\n\r\n1. Build a release build, and then run the .exe directly (i.e. don't run it via Visual Studio). See if you can notice any stuttering running it this way.\r\n\r\n2. If that doesn't resolve it, try simplifying your update method as follows (just in case it is something screwy with the time values):\r\n```c#\r\nenemy.X += 3;\r\n```\r\n3. If you're still getting stuttering, maybe try changing the power plan on your laptop. I'm not familiar with MacOS, but on Windows you can usually choose between \"Power Saver\", \"Balanced\", and \"High Performance\". I remember years ago on my old laptop that I would sometimes get stuttering when using \"Balanced\" mode. But switching to \"High Performance\" would get rid of it.\r\n\r\nSo give this a go and let me know your results.","@MichaelDePiazzi That makes total sense, and I suspected that \"catching up\" with missing frames was what those 0.0333, 0.05, etc. values meant (multiples of the seconds in one frame).\r\n\r\nI built a release build on Mac, and run it outside VS. Neither 1) nor 2) solved the issue. I made sure I cleaned the build before each attempt.\r\n\r\nI had a look at 3) yesterday. I've had a second look and there aren't many options here, just to put the hard disc into sleep mode, which I disabled. The problem still exists when running the game with the power cable connected, so I imagine it's not economising anything in this case.\r\n\r\nI've also tried closing all the apps (Chrome, terminals, everything except for Finder) before running the game. I still get the issue, so I would assume it's not related to a moderate or high load on my laptop (the CPU usage was 3-6% before I closed the monitor and ran the game).","@RUSshy I just tried, and didn't make any difference.","Have you tried updating your graphics drivers?\r\n\r\nTry explicitly disabling VSync, as well, by putting this line in the constructor:\r\n\r\n```\r\ngraphics.SynchronizeWithVerticalRetrace = false;\r\n```\r\n\r\nAlso, that `Debug` line in the `Draw` method is probably creating garbage since it's creating a new string each frame. That might have something to do with it.","@srodrigo Bummer none of my suggestions helped. But please definitely try @HopefulToad's suggestions also. I meant to actually suggest disabling v-sync last night, but it slipped my mind. (V-sync is enabled by default, so disabling it should help prove whether or not it is playing a part in this issue.)","@HopefulToad OSX is supposed to install the latest drivers, my system is up to date. I did some research to see whether it's possible to install them manually, but apparently everything directs to the app store.\r\n\r\n@HopefulToad @MichaelDePiazzi I tried `graphics.SynchronizeWithVerticalRetrace = false;` and removing the Debug lines. Again, I closed all the apps, unplugged my external screen, and the problem still happens.\r\n\r\nNot sure what else to try. In any case, I'll get a Windows machine in a few weeks, so this is not critical. I wish I had a more recent Mac to see if the problem is reproducible there. I suppose it will be fine on Windows, so never mind :)\r\n\r\nI wonder if we could ask any other Mac users with newer machines.","@srodrigo This is bizarre... How are you referencing MonoGame in your project? Are you referencing the latest compiled binaries from the develop branch, or are you directly referencing the latest source code? And are you **absolutely certain** that you are definitely referencing the latest develop branch build from your project?\r\n\r\nAnd I would just love to ignore this given you are getting a new Windows machine soon. But the problem is there are plenty of people out there that play games built with MonoGame that will have similar hardware to you.","@srodrigo This is a long shot, but try adding this to your constructor:\r\n```c#\r\nInactiveSleepTime = TimeSpan.Zero;\r\n```\r\n\r\nAlso out of curiosity, does the latest develop build perform any differently for you than the latest stable v3.7 release?","@MichaelDePiazzi I've tried with both\r\n```c#\r\n            graphics.SynchronizeWithVerticalRetrace = false;\r\n            InactiveSleepTime = TimeSpan.Zero;\r\n```\r\nand the issue persists.\r\n\r\nI just downloaded the 3.8 build from Teamcity and installed it as usual. Then I created a new project (although my old projects got the new version referenced, but just to be 100% sure). If I open References \/ MonoGame.Framework, the assembly version shown is `[assembly: AssemblyVersion (\"3.8.0.132\")]`\r\n\r\nI just noticed something interesting though.. On this image \r\n![captura de pantalla 2018-11-17 a las 18 44 53](https:\/\/user-images.githubusercontent.com\/5873601\/48664029-f455ea80-ea98-11e8-9a5e-0ca56f214037.png), there is an error that says `Assembly not found for framework .NET Framework 4.5`. Could this be related? I didn't notice this problem when I checked the assembly version yesterday.\r\n\r\nEDIT: I forgot to mention that I didn't compare the performance on 3.7, as by the time I realised that unplugging the external screen made the stuttering less obvious, I already had the development version installed.","A good test to help narrow down the problem would be to install Windows on your Mac and check if the same problem persists there, in both a DirectX and OpenGL project. That way, we could determine whether or not the problem is Mac-related, OpenGL-related, or hardware-related. Unfortunately, Windows costs money, so that's not an option.\r\n\r\nI don't really know how development works on Mac, but have you tried updating to the latest version of Mono, if that's relevant?\r\n\r\n","@HopefulToad I've heard that the OpenGL drivers are not great on Mac, so who knows.\r\n\r\nI'm quite new to C#, so I'm not 100% sure, but apparently I've got a newer version than the latest on the \"Visual Studio Channel\", which is the recommended one on Mac: \r\n![captura de pantalla 2018-11-17 a las 19 36 25](https:\/\/user-images.githubusercontent.com\/5873601\/48664521-20289e80-eaa0-11e8-90b4-d34aac68882b.png)\r\n\r\nMine is 5.12.0:\r\n```\r\nSergios-MacBook-Pro:~ sergiorodrigo$ mono --version\r\nMono JIT compiler version 5.12.0.309 (2018-02\/39d89a335c8 Thu Sep 27 06:54:53 EDT 2018)\r\n```\r\n\r\nI got it installed when I installed Unity. I wonder if downgrading to the recommended version would help.","> I got it installed when I installed Unity. I wonder if downgrading to the recommended version would help.\r\n\r\nProbably not, I would imagine, though I don't know for sure. It probably wouldn't hurt to give it a try, just in case.\r\n\r\nI'm unfamiliar with Mac and Mono, and I don't have access to a Mac computer, so I won't be able to help much with figuring out the cause of the problem. I'm not sure who among the maintainers of MonoGame uses a Mac, but whoever does should probably be able to help more.","@srodrigo Damn... I'm at a bit of a loss on what else to try at the moment. But I'll try rack my brain some more and let you know if I come up with anything else.\r\n\r\nUnfortunately, I'm in the same position as @HopefulToad - i.e. I'm unfamiliar with Mac and Mono, and I don't have access to a Mac computer. So this makes it a bit more tricky for me to help you on this.\r\n\r\nBut I guess as long as the latest dev build **isn't any worse** than the current stable v3.7 release, then at least my changes haven't caused a regression for you. So if you could possibly test this again with v3.7 and confirm this, then that would be very helpful.\r\n\r\nP.S. I'm not sure what that error about the missing assembly is about. I doubt that it's related, but then again, I can't say for sure either.","@HopefulToad @MichaelDePiazzi I've just tested with 3.7 and I can't see any difference, so 3.8 didn't make it worse, at least with the last parameters I tried:\r\n\r\n```c#\r\n    graphics.SynchronizeWithVerticalRetrace = false;\r\n    InactiveSleepTime = TimeSpan.Zero;\r\n```\r\n\r\nThanks both for your input. This doesn't cause me big troubles for now, and I don't plan to develop for\/on Mac anymore, but if someone does, it would be interesting to see if they get the same issue and on which hardware.","Out of curiosity, do you notice stuttering with IsFixedTimeStep set to false, with or without v-sync enabled?","@srodrigo Thanks for confirming this!\r\n\r\nOne other thing I found which might be helpful -\r\nApparently MacBook Pro's have 2 graphics adapters - one for normal use, and one for performance. By default, it automatically chooses which one to use and when to switch to it.\r\n\r\nSo it may be that it's only choosing the normal graphics adapter in this case. So you should try disabling the automatic switching to force the high-performance graphics to be used.\r\n\r\nI found some instructions which tell you how to do this on both the older and newer MacBook Pro's:\r\nhttps:\/\/dj.rane.com\/support\/knowledge-base\/how-to-optimizae-your-mac-for-live-performance\r\n_(just scroll down a bit, there is a section further down - \"disable automatic graphics switching\")_","@MichaelDePiazzi I already had a look at the graphics adapters. My macbook is a 13'' one, so it only has the integrated graphics card, so those options are not available.\r\n\r\n@HopefulToad Bingo! The stuttering goes away with `IsFixedTimeStep = false;`, with both v-sync on and off. I have no idea what this means though. It only works if I unplug the external screen, otherwise it displays badly, but with the screen laptop only, it doesn't happen anymore.\r\n\r\nWhat is `isFixedTimeStep` exactly for? From the name, I guess it forces 0.016 ms per frame, or something like that? (I haven't look at the source code).\r\n\r\nIs it usually a good idea to disable it though?","@srodrigo Setting fixed time step to true means that the code will make an effort to update exactly sixty times a second, which is the default, or however many times based on the `TargetElapsedTime` you've set. If the game is unable to fit both an update and a draw into 1\/60th of a second, it will skip draw calls until it's caught up. In other words, the Update-Draw loop might look like this:\r\n\r\nUpdate\r\nDraw\r\nUpdate\r\nDraw \/\/ This draw call pushes the loop past 1\/60th of a second; the game is now behind schedule\r\nUpdate\r\nUpdate \/\/ A draw call is skipped in an effort to catch up again\r\nDraw\r\nUpdate\r\nDraw\r\n\r\nThe skipped draw calls are likely the source of the stuttering you're observing.\r\n\r\nFixed time step allows you to write code without worrying about how much time has passed since the last update. So, code like enemy.Position.X += 5 works fine. However, writing code like that means the logic is tied to the time step, which would make it hard to switch to variable time step at a later time and means your game is limited to a specific frame rate.\r\n\r\nVariable time step always calls update, then draw, and back again, regardless of how long it takes. You then need to account for how much time has passed since the last update using `GameTime`. Using variable time step makes your game logic no longer tied to time step or frame rate, and means draw calls won't be skipped. It also means the frame rate can fluctuate.\r\n\r\nIf you want to use variable time step, you have to be willing to deal with the increased complication of accounting for `GameTime`, as well as accepting the possiblity that your game may misbehave in extreme circumstances, such as if one update-draw loop takes half a second or a full second on a low-end computer. Using fixed time step simplifies development and ensures consistent behavior, but also locks the framerate and can introduce stuttering if draw calls are skipped.","Thanks @HopefulToad that's really useful. I'll think about what I want to use, but probably fixed time for now (although I usually move all the objects relative to the time elapsed anyway, to make it easier to change later in case of need).","Sorry for the late response on this, been crazy busy these past few days!\r\n\r\n@srodrigo So in your case, I'd guess that variable time step is likely just masking whatever the underlying issue is. If you measured the actual times between frames, I'm guessing you'd see that there'd be some fluctuations and spikes in there. Fixed time step is just showing this up more because something is causing an occasional choke which results in the inability to deliver a stable frame rate.\r\n\r\nI really wish we could find what the issue is, but unfortunately I'm out of ideas on this one... :\/","No worries @MichaelDePiazzi I'll let you know if the issue gets solved by later releases.\r\n\r\nThanks both!","Since im on here today and i just read this i was just thinking...\r\n\r\nIf the problem goes away with fixed timestep off essentially it means his framerate went up so he cant see it.\r\n\r\nThat also would indicate that there is some problem with him getting the system clock time or calling sleep for the right period."],"labels":["Performance"]},{"title":"CPU spinning with fixed time step - possible improvements","body":"First, I want to thank @MichaelDePiazzi on providing the pull request to improve the game smoothness with fixed time step. https:\/\/github.com\/MonoGame\/MonoGame\/pull\/4207\r\n\r\nI have some ideas how to improve this:\r\n1. Consider using [Thread.SpinWait()](https:\/\/docs.microsoft.com\/en-us\/dotnet\/standard\/threading\/spinwait) instead of the simple loop. AFAIK it was introduced specifically for this case - when sleeping is not acceptable due to the too low time frame.\r\n2. Investigate using loop with `Thread.Sleep(1)` instead of `Thread.Sleep(sleepTime);` especially if there are only a few milliseconds left. From my experience it might reduce the overshooting related to sleep. And CPU overhead related to this is neglectable (as it still will sleep at least 1 ms - say 16 calls per 1 ms instead of 16 ms - not much difference actually).\r\n3. On Windows, consider using [`timeBeginPeriod` and `timeEndPeriod` from winmm.dll](https:\/\/docs.microsoft.com\/en-us\/windows\/desktop\/api\/timeapi\/nf-timeapi-timebeginperiod) to increase the Windows timer resolution on the game startup and shutdown accordingly. IIRC the default timer resolution is 16 ms and it's possible to decrease to 1 ms (min value) by using this.\r\n4. Consider refactoring `TimerHelper` to be crossplatform or change the name. Currently it's not obvious that this helper is only for Windows.\r\n5. Probably there should be an option like `Game.UseHighFrequencyTimers` \/`Game.UsePreciseTiming`? Otherwise we always prioritize the game smoothness over the power usage. System power saving states requires relatively long uninterrupted delays. I would prefer to have this option enabled by default though. (UDP. I see there already was a proposal for the `UseAccurateTiming` option)\r\n\r\nRegarding **2.** - I'm using this in my games I'm working on and definitely noticed an improvement (it was quite hard to record the game live footage with OBS without micro-stuttering and this change improved case for me, but it's intertwined with **3.**).\r\n\r\nRegarding **3.** - I'm successfully using this in my games for many years now. I believe all the interactive applications should use it to ensure the smoothest framerate (AFAIK media players are usually doing this). The `Thread.Sleep(ms)` slippage in that case should be very low. I didn't notice any CPU usage difference though probably it might affect power management in general which is not good for mobile devices but the pull request provided by @MichaelDePiazzi is also not good from this aspect (hence point **5.**).\r\n\r\nRegards!","comments":["No worries @aienabled! :)\r\n\r\n*(And for those that aren't aware, PR #4207 was the original PR I created. But I cleaned it up and recreated it in PR #6535 to help get it merged.)*\r\n\r\n> 1\\. Consider using `Thread.SpinWait()`\r\n\r\nAdmittedly, I'm not familiar with `Thread.SpinWait()`. But I did have a quick read up on it, and it sounds like it may potentially be useful for this scenario. However, someone would definitely have to run some tests and benchmarks with it to prove that the timing accuracy can still be maintained. It seems to be designed for very short waits (i.e. hundreds of cycles), and looks like it will actually yield anyway if it waits for too long.\r\n\r\n> 2\\. Investigate using loop with `Thread.Sleep(1)`\r\n\r\nThis is not necessary for Windows DirectX as the new `SleepForNoMoreThan` method I wrote considers the timer resolution and compensates for it. The testing and benchmarks I've run on this prove that the accuracy of this is practically identical to CPU spinning. I've also been using this timing method in my game for over 3 years now, so it's been well proven.\r\n\r\nHowever, I do think `Sleep(1)` may still be useful for other platforms. I actually did this in my original commits (in PR #4207) to reduce the chance of overshooting. But it was decided that accurate timing was more important.\r\n\r\n> 3\\. On Windows, consider using `timeBeginPeriod` and `timeEndPeriod`\r\n\r\nI'm actually doing something similar in my game. But I'm using [`NtQueryTimerResolution`](https:\/\/undocumented.ntinternals.net\/UserMode\/Undocumented%20Functions\/Time\/NtQueryTimerResolution.html) to find the maximum supported resolution on the system, and then [`NtSetTimerResolution`](https:\/\/undocumented.ntinternals.net\/UserMode\/Undocumented%20Functions\/Time\/NtSetTimerResolution.html) to actually set that maximum resolution (it allows much finer control, and can go below 1ms).\r\n\r\nAlso, Windows automatically releases a timer resolution request when the requesting process ends. So since we want the max resolution for the entire lifetime of the process, it's not necessary to call `timeEndPeriod` (or set the resolution back to the lowest) on shutdown.\r\n\r\nGenerally the graphics drivers will increase the timer resolution for you. But we have observed in some cases that this doesn't always happen *(which was usually when frame stuttering was most noticeable before my PR was merged)*. So setting the resolution to the maximum can be beneficial as it increases the accuracy of `Sleep`, which means more sleeping and less spinning \/ CPU usage.\r\n\r\nHowever, because this would only be useful for fixed time step, and because setting a higher timer resolution does affect overall system power usage, I'm not sure if this would be a good default behaviour for MonoGame. So, in my opinion, I'm kinda leaning towards it being something that the MonoGame user should do themselves if it's relevant \/ important to their use case.\r\n\r\n> 4\\. Consider refactoring TimerHelper to be crossplatform or change the name.\r\n\r\nI have no idea how to make this logic cross-platform. My experience and knowledge lies mainly with Windows. But if anyone knows how to do something similar on other platforms, then I would love to see a solution!\r\n\r\nOtherwise, yes, we possibly should consider changing the name to something to indicate it's specific to Windows. It is currently only included in the Windows project though, so is not visible for other platforms anyway.\r\n\r\n> 5\\. Probably there should be an option like Game.UseHighFrequencyTimers \/Game.UsePreciseTiming?\r\n\r\nAs you mentioned, you've seen I already proposed a similar `Game.UseAccurateTiming` option (with the default being enabled). I still think there is probably some value in it. But we have to acknowledge that XNA also had high CPU usage when using fixed time step with v-sync disabled. So it would probably be best to wait until the CPU usage from spinning is actually raised as a legit issue that someone is having. We can then look at relevant solutions to their specific issue and platform, and potentially use an option like this at that point.","1. From [what I've found](https:\/\/www.tabsoverspaces.com\/233735-how-is-thread-spinwait-actually-implemented), the call [`Thread.SpinWait(iterations)`](https:\/\/docs.microsoft.com\/en-us\/dotnet\/api\/system.threading.thread.spinwait) is using the `pause` instruction.\r\nIt's better instead of a plain busy loop in case of a CPU with the simultaneous multithreading feature (aka HT) - on a logical CPU core the busy loop might lead to CPU starving.\r\nProbably it's also better than a busy loop from the power management aspect - alas, I can't any proof to this.\r\nI don't have the required knowledge to definitely say that using `Thread.SpinWait(iterations)` is a better approach and what is the suggested `iterations` argument for the call should be. I hope someone with deeper expertise will comment on this.\r\n\r\n2. I just wanted to be sure you've actually tested and verified this. Ok if so. The explanation you given sounds very reasonable.\r\n\r\n3. I'm curious how Windows actually handle the timer resolution change. If it restores the resolution on process quit, does it actually restore it to the previous value in case when there is another process (started later) which have also requested a different timer resolution? Sounds logical to expect this in that case. Also I'm curious how does it work if another process is started and requests a longer timer interval (poor resolution) when there is already a running process which have requested a lower resolution.\r\n\r\n4. I suggest renaming the class to reflect that this is for Windows platform only.\r\n\r\n5. But XNA was never used on mobile phones where there is a power usage consideration... now imagine how much excessive power will drain a game which is targeting 60 FPS fixed time step (or even 120 FPS as some displays allow now) with your change - there is no sleeping and a non-stop busy loop consuming a whole CPU core. Some developers will be really surprised by user reports.\r\nBTW, why `#if WINDOWS && !DESKTOPGL` here? https:\/\/github.com\/MonoGame\/MonoGame\/blob\/1676da701137e3c7a8d3956200143d65297b750b\/MonoGame.Framework\/Game.cs#L444\r\n\r\nI suppose the required timer resolution Windows API is accessible irrelevant of `DESKTOPGL` conditional compilation flag.\r\n\r\n(new point)\r\n6. Please note that the spinning code is also executed with enabled V-sync (as I see it now with debugger). We really need to think whether this is intended or in case of V-sync it's better to sleep with some small overshooting (<1-2 ms) as the framerate still should be very smooth due to V-sync (you can check this in Game as `this.graphicsDeviceManager.SynchronizeWithVerticalRetrace` property).","Was just about to go to bed, but I thought I'd quickly respond to help clear my mind... :)\r\n\r\n1. Yes, hopefully someone with more knowledge on this can comment.\r\n\r\n2. No problem \ud83d\udc4d\r\n\r\n3. Windows basically keeps track of all the timer resolution requests from all processes, and it applies the one with the highest resolution. When a request is released, it applies the next highest one. And when there are no active requests, it applies the default (usually the lowest resolution, typically 15.6ms).\r\n\r\n4. Sure, it makes sense to me. Please feel free to submit a PR which does this.\r\n\r\n5. XNA was on Windows Phone, but I have no experience with it. My observations are based on the Windows desktop version. But I hear what you're saying. I was also wary of removing sleeping on all platforms as I only have experience with Windows desktop. It's why my original commits just tried to make it less likely that `Sleep` would overshoot on other platforms (by using `Sleep(1)` instead of `Sleep(sleepTime)`). But it was decided that accuracy was preferred. If it does turn out to be an issue on mobile (or other) platforms, then we can always make some changes later.\r\n\r\n> BTW, why `#if WINDOWS && !DESKTOPGL`\r\n\r\nThis is a hack to disable the Windows sleeping logic on the \"DesktopGL\" build. DesktopGL is a cross-platform build which runs on Windows, MacOS, and Linux. I'm not really familiar with it and am not the best person to explain it. But long story short - the \"WindowsGL\" (i.e. DesktopGL) project still has the `WINDOWS` symbol defined, and it's not supposed to. @Jjagg said he would try to remove it later as there may be some complications in doing so.\r\n\r\n6. Yes. Spinning code will be executed, and it is intended. But in most cases, MonoGame shouldn't be spinning the CPU as much as some of the time will be spent by the graphics drivers waiting for the vertical retrace.\r\n\r\nOk, time to sleep now... \ud83d\ude34"],"labels":["Performance"]},{"title":"Cannot jump to different position in audio","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nMonoGame either lacks, or at least its documentation lacks any reference to (as far as I can tell), any method to set the position (time-wise) in an audio file smoothly.\r\n\r\nAn EXTREMELY common use case for this in gaming is to have music that has an intro that's played once, followed by a looping segment.\r\n\r\nThe closest thing to a workaround, other than using a third-party audio library (generally involving hefty costs and sacrifices to platform support) or splitting a single file into multiple ones (which will still likely have a gap in playback anyway), is to play it as a Song via MediaPlayer, then when the end of the loop is reached, run MediaPlayer.Play(Song, MediaPlayer.Position - LoopLength) <--- didn't bother to include typecasts etc in this sample code. Unfortunately, this results in a VERY noticable silence gap.\r\n\r\nFurthermore, an approach to deal with this that specifically DID work on XNA, does not work in MonoGame - using a WAV file via XACT that has loop points specified. I attempted to create such a file, and indeed it loops perfectly in XACT itself, but MonoGame code completely ignores this looping.\r\n\r\nI can understand that reproducing every detail of XACT correctly may be low priority, but MonoGame should provide some means via which we can at least set the playback position of a Song or SoundEffectInstance or the like, and jump to it smoothly - if it's up to the user to actually use that feature to handle looping or whatever, that's understandable, but the total lack of any way to control the position at all (other than the MediaPlayer workaround mentioned above) seems like a major oversight.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["There's a couple things you bring up here. It's easier to track these things if there are separate issues for them.\n\nOpenAL loop points: #5186\nSeeking SoundEffects: mentioned in #6155\n\nAs for the silence when using the Play overload for MediaPlayer, can you try setting MediaPlayer.PlayPosition instead and see if that works?","> As for the silence when using the Play overload for MediaPlayer, can you try setting MediaPlayer.PlayPosition instead and see if that works?\r\n\r\nMediaPlayer.PlayPosition is a read-only property.\r\n\r\nI was ultimately able to achieve what I wanted to using a DynamicSoundEffectInstance and manual loading of WAV file data, but this seems overly complex just to be able to seek to arbitrary positions in a sound. :\/","> MediaPlayer.PlayPosition is a read-only property.\r\n\r\nOops, yes seeking with that property is only supported on iOS and Android, sorry. \r\n\r\n> I was ultimately able to achieve what I wanted to using a DynamicSoundEffectInstance and manual loading of WAV file data\r\n\r\nYeah, we definitely don't want it to be that hard. We should use the OpenAL Soft extension to support loop points as Tom mentioned in [a comment](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/6369#issuecomment-406380240) on a related issue.","Here is my code to achieve this via DSEI, in case it's helpful. Some of this comes from an old XNA tutorial off Microsoft's website (that I had to using archive.org to dig up). Everything that isn't from that tutorial (eg. the loading of ID3 tags), I wrote myself, and you're welcome to use it however you like - of course, since I'm only just starting out with Monogame and C# (I'm more experienced in Pascal up to now) it's probably not optimal, but I figure it doesn't hurt to share it. Perhaps it could be reworked into some kind of (Dynamic)SoundEffectInstance descendant that makes use of loop points and supports other formats?\r\n\r\nFor the record, I've only tested this with WAV files exported from Audacity. It expects TXXX ID3 tags with the labels \"LOOPSTART\", \"LOOPLENGTH\" and \"LOOPEND\" (any two of the three; \"LOOPSTART\" is ignored if all three are present), defined in samples. I chose this format for defining the loops because I'm aware of some other applications (eg. RPG Maker) using it already, and as far as I know it isn't considered \"proprietary\" in any way. It definitely won't work as-is with non-WAV files, given that it directly implements WAV reading. I've also only tested this so far under WindowsGL; but I'll probably end up testing it sooner or later under Mac, Linux and Android (no iOS device here).\r\n\r\nhttps:\/\/pastebin.com\/PP6f8jhG\r\n\r\nFor reference, here is (the archive.org link to) the tutorial I referenced while creating this: https:\/\/web.archive.org\/web\/20130512063457\/http:\/\/msdn.microsoft.com\/en-us\/library\/ff827591.aspx","Aside from compression, what complications are involved in having a simple `Position` property for `SoundEffectInstance` that lets you seek to the desired time, in samples or seconds, of the audio clip? As a developer, I would prefer that to having to manually set loop points that I can't define without creating one from the constructor or using a custom content processor."],"labels":["Feature Request","Audio"]},{"title":"Would there be interest in having a word wrapping rectangle bounded drawstring.","body":"I have made a small algorithm that essentially is just tacked on the end of the SpriteBatch DrawString method. That as the title suggest word wraps text. \r\n\r\nBasically its drawstring but it takes a bounding Rectangle. It can do this in real time without a huge performance hit. It can measure the text to the sides the top and bottom or both i use the full rectangle atm but it can do either or both.\r\n\r\nHow im doing it at the moment is actually to reformat a stringbuilder by inserting newlines using a mocked up renamed drawstring with the extra wrapping code, then get the altered stringbuilder back, and then draw it. I was thinking this alone would probably just as useful if not more so then measurestring which is also a part of spritebatch..\r\n\r\nSo anyways i think it would be faster in place in drawstring without the extra step im doing but it would probably require a character array or list in place for a word buffer. It's surprisingly simple, it basically marks and sweeps words.\r\n\r\nI think it would be a nice addition to spritebatch in either form to have a drawstring(string s, rectangle textbounds ...) Or a method that reformats the text of a stringbuilder and returns it. I think it would be nice convenience to have at least the stringbuilder altering version in monogame if not a actual drawstring.\r\n\r\nQuestion is... What do you guys think ? \r\n\r\nIf you guys want to take a look, i can post up my current method write up a draft for a spritebatch version or just work on it and submit a pull request, but i wanted to know what you guys think of the idea first.\r\n\r\n![wordwrapping](https:\/\/user-images.githubusercontent.com\/7495196\/48039577-5df20280-e143-11e8-805c-78974ed5fdc0.png)\r\n","comments":["> reformat a stringbuilder\r\n\r\nI would be curious to see the code, because manipulating strings\/stringbuilders is likely to generate garbage. Which is something we should avoid.\r\nYou don't have to reformat a string or use MeasureString, you only have to play with the offset within DrawString to simulate a ```\\n``` character when the next word offset is out of the bound of the rectangle.\r\n\r\nI like the proposition though. It's typically the kind of thing that we end up writing anyway when making a game.","Yes that is what i do currently with a couple of caveats.\r\n\r\nAtm i use my own StringBuilders wrapper as it has a function that replaces string builders Insert but its not efficient that way, so i would have to modify the current function if i wanted to really speed it up.\r\nStringBuilders insert seems to generate collected garbage as a rule which is a big pain so that has to be worked around for any string wrapping manipulations. \r\n\r\nRight a actual drawstring that directly wraps words doesn't need to insert characters, as it can just re-position the text on the fly. However it would require a buffer so as to spit out a loop of item.Sets(...) after the calculations were completed in the first pass. Those would re-position the words after rewinds occur so a overwrite-able buffer would be needed.\r\n\r\nAnyways here is my current prototype just to get a idea of the algorithm with comments, the insert and buffer are the only two real hurtles to overcome. Basically im reformating a stringbuilder here. \r\n\r\nThe idea is like so... rewinding words that will end up violating a boundry.\r\nI mark the start of a word, if it will end up going out of bounds or does. \r\nI just back up back to the start of the word, re-position the draw to line down or insert a newline and then continue. \r\nIf a word is going to break the height part of the boundry. \r\nThen i set the buffer length to that words starting position and end the function.\r\npretty simple idea.\r\n\r\nThe logic is basically 3 layers deep at most shown by the relevant wrapping logic block meaning... at most 3 conditional checks deep and that represents were a word intersects the bounding area.\r\n\r\n```\r\n        public static void WordWrapTextWithinBounds(MgStringBuilder text, Vector2 scale, Rectangle boundRect)\r\n        {\r\n            \/\/ AdHock to just use the currently set font and make the rest of the method a little more readable.\r\n\r\n            var letterWidthSpacing = tsf.Spacing;\r\n            var lineHeightSpacing = tsf.LineSpacing * scale.Y;\r\n            Vector2 offset = Vector2.Zero;\r\n            float yextent = offset.Y + lineHeightSpacing;\r\n            Vector2 redrawOffset = Vector2.Zero;\r\n            Rectangle dest = new Rectangle();\r\n            var currentGlyph = SpriteFont.Glyph.Empty;\r\n            var firstGlyphOfLine = true;\r\n            int lastWordBreakCharPos = 0;\r\n            bool firstwordonline = true;\r\n            Vector2 rewindOffset = Vector2.Zero;\r\n            \r\n            \/\/ Basically Drawstring here\r\n\r\n            for (int i = 0; i < text.Length; i++)\r\n            {\r\n                char c = text[i];\r\n\r\n                if (c == '\\r')\r\n                    continue;\r\n                if (c == '\\n')\r\n                {\r\n                    offset.X = 0;\r\n                    offset.Y += lineHeightSpacing;\r\n                    yextent = offset.Y + lineHeightSpacing;\r\n                    firstGlyphOfLine = true;\r\n                    firstwordonline = true;  \/\/ <<< note.\r\n                    continue;\r\n                }\r\n\r\n                if (_glyphs.ContainsKey(c))\r\n                    currentGlyph = _glyphs[c];\r\n                else\r\n                if (!tsf.DefaultCharacter.HasValue)\r\n                    throw new ArgumentException(\"Text Contains a Unresolvable Character\");\r\n                else\r\n                    currentGlyph = defaultGlyph;\r\n\r\n                if (firstGlyphOfLine)\r\n                {\r\n                    \/\/ Removes left side bearing for the first character on a line\r\n                    offset.X = Math.Max(currentGlyph.LeftSideBearing, 0);\r\n                    firstGlyphOfLine = false;\r\n                }\r\n                else\r\n                    offset.X += letterWidthSpacing + currentGlyph.LeftSideBearing;\r\n\r\n                \/\/ matrix calculations unrolled rotation is excluded for this version\r\n                var m = offset;\r\n                m.X += currentGlyph.Cropping.X;\r\n                m.Y += currentGlyph.Cropping.Y;\r\n\r\n                dest = new Rectangle\r\n                    (\r\n                    (int)(m.X * scale.X),\r\n                    (int)(m.Y * scale.Y),\r\n                    (int)(currentGlyph.BoundsInTexture.Width * scale.X),\r\n                    (int)(currentGlyph.BoundsInTexture.Height * scale.Y)\r\n                    );\r\n\r\n                \/\/ Prep for word wrapping operations here.\r\n\r\n                if (c == ' ')\r\n                {\r\n                    \/\/ if char is a word break character e.g. white space we mark the words start position as a rewind canidate.\r\n                    lastWordBreakCharPos = i;\r\n                    rewindOffset = offset;\r\n                    if (firstwordonline)\r\n                        firstwordonline = false;\r\n                }\r\n\r\n                \/\/ Wrapping logic sequence.\r\n\r\n                if (yextent >= boundRect.Height)\r\n                {\r\n                    \/\/ Termination due to height boundry reached. Set sb length to the current read position.\r\n                    text.Length = i;\r\n                    i = text.Length;\r\n                }\r\n                else\r\n                {\r\n                    if (dest.Right > boundRect.Width && text.Length > (i + 1))\r\n                    {\r\n                        if (firstwordonline == false && text[lastWordBreakCharPos + 1] != '\\n')\r\n                        {\r\n                            text.AppendAt(lastWordBreakCharPos + 1, '\\n'); \/\/<< Note, Stringbuilders insert here is was a gc-collection problem... fixed this by using my own char sliding loop could be done better in other ways. \r\n                            if (text[lastWordBreakCharPos + 1] != ' ')\r\n                            {\r\n                                offset = rewindOffset;\r\n                                i = lastWordBreakCharPos;\r\n                            }\r\n                        }\r\n                        else \/\/ When first word on the line is true\r\n                        {\r\n                            if (text[i + 1] != '\\n') \/\/ If its not already a new line char\r\n                                text.AppendAt(i + 1, '\\n'); \/\/ << see earlier note.\r\n                        }\r\n\r\n                    }\r\n                }\r\n                \r\n                offset.X += currentGlyph.Width + currentGlyph.RightSideBearing;\r\n            }\r\n        }\r\n```\r\n\r\nI suppose a static buffer of some type that can grow is the simplest way to make it work without garbage using stringbuilder is a problem for that as the insert method is literally garbage.\r\n\r\nConversely pre-batching the rectangles to draw that represented a word, at least to the point i was sure a word would fit... Is what id be looking to do for a actual Drawstring.\r\n\r\n\r\n\r\n","I think that drawing wrapped text is useful feature. Though I'd address mentioned garbage issue with different approach: I'd add class WrappedString that internally stores formatted text and draws it on demand.\r\nIt would look like following:\r\n```c#\r\n\tpublic class WrappedString\r\n\t{\r\n\t\tpublic int Width\r\n\t\t{\r\n\t\t\tget;\r\n\t\t}\r\n\r\n\t\tpublic int Height\r\n\t\t{\r\n\t\t\tget;\r\n\t\t}\r\n\r\n\t\tpublic string Text\r\n\t\t{\r\n\t\t\tget;\r\n\t\t}\r\n\r\n\t\tpublic void Draw(SpriteBatch spriteBatch, Point position, Color color);\r\n\r\n\t\t\/\/\/ <summary>\r\n\t\t\/\/\/ This method does all wrapping\r\n\t\t\/\/\/ <\/summary>\r\n\t\t\/\/\/ <param name=\"text\"><\/param>\r\n\t\t\/\/\/ <param name=\"width\"><\/param>\r\n\t\t\/\/\/ <param name=\"height\">height is nullable as user might not want to have height constraint<\/param>\r\n\t\t\/\/\/ <returns><\/returns>\r\n\t\tpublic static WrappedText Create(string text, int width, int? height);\r\n\t}\r\n```\r\n\r\n","Before i reply i want to point out that were really talking about the reformatting aspect.\r\n\r\nNot just drawing out text in a method.\r\n\r\nThe problems for a actual DrawString method are much less severe in relation to garbage collections. \r\nFor that you just need a mutable buffer that hangs around privately or internally  i.e. at class scope or static. That is reused so it can constantly buffer up how to draw what is passed, until it is drawn out. \r\nYou don't need to hold or keep any immutable data you are drawing and a mutable buffer is just held as a constantly reusable buffer as long as it's reference doesn't go out of application scope, it will not need to be collected. You also want a fast insert or some type of way to track were to insert as you go so its fast.\r\n\r\nIn consideration of a wrapped class for holding onto wrapped text.\r\n\r\nA separate class is a option, for placing a mutable buffer into it and it looks nice. While this approach does encapsulate the idea of holding onto a buffer for re-use instead of returning a immutable string to the user.\r\n\r\nUsing a regular string internally as the buffer itself won't solve any issues with garbage collections, subsequent to its first use, as a string is immutable. \r\nSo some type of mutable buffer would be required for subsequent changes i.e. a stringbuilder or some mutable character array buffer in the class. \r\nWrapping the buffer up in a class is the proper way to go but... You could argue that stringbuilder is a wrapper and a buffer and you should just return that, removing a unnecessary step.\r\n\r\n \r\nSo the problem at hand for reformatting text and returning it to the user, is ... \r\n1) The need to have a grow-able buffer that can be mutated. (_also a concern to a drawstring method_)\r\n2) Making it clear that it needs to be held on to, so it will not go out of scope, so it is not collected.\r\n3) The speed of inserting line-breaks. (_also a concern to a drawstring's algorithm that simulates this at runtime_)\r\n4) Not generating collected garbage when inserting a line-break which unfortunately the commonly used character buffer for c# StringBuilder's Insert() method seems to .... always do.\r\n\r\nThere are also problems for mutable containers under c#. Currently even stringbuilders insert makes garbage that gets collected on stuff it shouldn't its just a garbage collection monster and it is requisite for reformatting that you have a insert. \r\n\r\nI get around that atm in a terribly inefficient way by using the below function in my stringbuilder wrapper. \r\nSince it only fires for one word per line i can still get away with it running in real time. \r\nBut there is no doubt that it's Not a fast way to insert line break characters.\r\n\r\n        \/\/\/ <summary>\r\n        \/\/\/ Functions as a insert, existing text will be moved over. Notes are left in this method overload.\r\n        \/\/\/ <\/summary>\r\n        public void AppendAt(int index, String s)\r\n        {\r\n            \/\/ Ensure that the Capacity of the stingbuilder is increased if needed.\r\n            int reqcapacity = (index + 1 + s.Length) - this.StringBuilder.Capacity;\r\n            if (reqcapacity > 0)\r\n                this.StringBuilder.Capacity += reqcapacity + 32;\r\n            \/\/ Ensure that the Length of the stingbuilder is increased to mark the end.\r\n            int initialLength = StringBuilder.Length;\r\n            StringBuilder.Length = initialLength + s.Length;\r\n            \/\/ Now we will wind from back to front the current characters in the stringbuilder to make room for this append.\r\n            \/\/ Yes this will be a expensive operation however this must be done if we want a proper AppendAt.\r\n            \/\/ Chunks or no chunks stringbuilders insert is piss poor.\r\n            int insertedsbLength = s.Length;\r\n            for (int j = StringBuilder.Length - 1; j >= index + insertedsbLength; j--)\r\n                StringBuilder[j] = StringBuilder[j - insertedsbLength];\r\n            \/\/ perform the append\r\n            for (int i = 0; i < insertedsbLength; i++)\r\n            {\r\n                this.StringBuilder[index + i] = s[i];\r\n            }\r\n        }\r\n\r\n**Rules of thumb here...**\r\n_Taking a string or mutable from the user in a method is ok. but... \r\nMutating a immutable is going to be a collection. \r\nCopying it to a mutable will make more garbage but that is not the same as a collection.\r\nIf the mutable buffer goes out of scope it will be collected. \r\nReturning a immutable to the user is just asking for a collection later. \r\nHolding a created immutable as a buffer is just asking for someone to call a function on it that mutates it and of course creates a garbage collection (so might as well just return a altered string in that case). \r\nPassing a immutable to a function that doesn't directly alter it or just copys it is fine as it is passed by a value reference. \r\nCopying to a buffer in a function means if the buffer goes out of scope on return that buffer will become a collection.\r\nCopying a immutable to a mutable then working on and or returning the mutable is the rule in all cases. Wth the exception that you would not ever want to return a drawstrings internal mutable._\r\n\r\nNow ... for a sprite batch that directly draws out word wrapped text you would have to buffer up a the values that are passed to item.Set(...) until you were sure that a word fits on the line.\r\nThat would be done in this segment of the logic with a couple extra lines and would then dump those values to the item.Set(,,,) call in a small loop for the word.\r\n\r\n\r\n```\r\n                if (c == ' ')\r\n                {\r\n                    lastWordBreakCharPos = i;\r\n                    rewindOffset = offset;\r\n                    if (firstwordonline)\r\n                        firstwordonline = false;\r\n                }\r\n```\r\n\r\nIn the case were it did not...\r\nThe saved buffered values for the current word would get cleared.\r\nThe index would rewind.\r\nThe offset would be moved to the beginning of the first line and and the algorithm would continue buffering.\r\n\r\n`Keeping in mind of course the \/n would be getting replaced by offset changes instead.`\r\n\r\n```\r\n                   var wordStartIndex = lastWordBreakCharPos + 1;\r\n\r\n                   if (dest.Right > boundRect.Width && text.Length > (i + 1))\r\n                    {\r\n                        if (firstwordonline == false && text[wordStartIndex ] != '\\n')\r\n                        {\r\n                            text.AppendAt(wordStartIndex , '\\n'); \r\n                            if (text[wordStartIndex ] != ' ')\r\n                            {\r\n                                offset = rewindOffset;\r\n                                i = lastWordBreakCharPos;\r\n                            }\r\n                        }\r\n                        else \r\n                        {\r\n                            if (text[i + 1] != '\\n') \r\n                                text.AppendAt(i + 1, '\\n'); \r\n                        }\r\n                    }\r\n```\r\n\r\nYou could alternately dump the entire current buffered line up till now at this point before clearing.\r\nIf you also marked the ending position of the last valid word that fit on the line.","For reference \/ comparison, here is my own...\r\nhttps:\/\/stackoverflow.com\/a\/25337147\/168235"],"labels":["Feature Request"]},{"title":"GamePad Y-Button Not Registering","body":"The following returns false regardless of whether you're pressing the Y-button:\r\n```cs\r\nGamePad.GetState(0).IsButtonDown(Buttons.Y)\r\n```\r\n\r\nThis always returns false as well:\r\n```cs\r\n(GamePad.GetState(0).Buttons.Y == ButtonState.Pressed) \r\n```\r\n\r\nI've tested with multiple XInput controllers which have working Y-buttons that register in other applications. All buttons other than Y work.\r\n\r\nEdit: I should mention that it worked properly on 3.6.0.1625\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.0.1708, 3.8.0.93\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- WindowsDX\r\n","comments":["I'm experiencing this problem as well. I have the same version of MonoGame (3.7.0.1708).\r\n\r\n[edit] tried the latest version (3.8.0.173), and the problem exists there, as well.\r\n\r\nthe version I initially upgraded from was 3.6.0.1625. I'll try reverting back to that version, and see if the problem is resolved.\r\n\r\n[edit] switching back to 3.6.0.1625 fixes the problem for me. I switched to a branch which does not have a ton of other updates, including an update from .NET 4.5 to 4.7; I tried performing a few of these updates while leaving MonoGame at 3.6.0.1625, and the Y button still worked.\r\n\r\nI can only assume that at some point MonoGame (or perhaps SharpDX?) broke the Y button.\r\n\r\nspeaking of SharpDX: this may be unrelated, but I was not able to get MonoGame 3.8.0.173 to work with the SharpDX files included in that MonoGame download. those SharpDX files are version 4.0.1, however MonoGame errors out, stating that it requires version 4.2.0. installing SharpDX 4.2.0 via NuGet, instead of using the files bundled with MonoGame, resolves this issue.","I've been digging into this problem, and yeah there is an open SharpDX ticket for it:\r\n\r\nhttps:\/\/github.com\/sharpdx\/SharpDX\/issues\/961\r\n\r\n","@dmanning23 \nLooks like the proposed pull request in that issue was merged, so the issue should be fixed in latest SharpDX. We really should upgrade.","Yeah I dug a bit deeper, becase that PR doesn't match the SharpDX master branch...\r\nLooks like it was merged, but was incorrect and another issue was opened:\r\nhttps:\/\/github.com\/sharpdx\/SharpDX\/issues\/987\r\nand then another PR was created:\r\nhttps:\/\/github.com\/sharpdx\/SharpDX\/pull\/1025\r\n\r\nIf I update the SharpDX.XInput nuget package to the latest 4.2.0 version though, I still have this Y button issue in my MonoGame projects. It should've been fixed since the 4.0.1 release:\r\nhttps:\/\/github.com\/sharpdx\/SharpDX\/compare\/v4.0.1...master\r\n\r\n"],"labels":["Input"]},{"title":"MonoGame 3.7.0.1708: SwapChainPanel Repaint Issues on Windows\u00ae 10 UWP (XAML)","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nWhen a 'SwapChainPanel' UIElement is placed inside a 'ScrollViewer' object and the visible area is scrolled to the left, the uncovered part of the swap chain panel is NOT drawn at all (see attached picture).\r\n**The previous version of MonoGame (3.6.) handled this correctly.**\r\n\r\n![monogame 3 7 0 1708 scroll issue](https:\/\/user-images.githubusercontent.com\/19491407\/47607985-9862ed80-da27-11e8-9246-39c4a9ad9c27.png)\r\n\r\nSteps to reproduce this issue:\r\n- Create a 'MonoGame Windows 10 Universal (XAML) Project'\r\n- Change the file 'GamePage.xaml' to:\r\n  `<ScrollViewer x:Name=\"AppContent\"  VerticalScrollBarVisibility=\"Auto\"   HorizontalScrollBarVisibility=\"Auto\"  HorizontalScrollMode=\"Auto\" VerticalScrollMode=\"Auto\" ZoomMode=\"Enabled\">`\r\n   `<SwapChainPanel x:Name=\"swapChainPanel\" MinWidth=\"768\" MinHeight=\"640\"\/>`\r\n   `<\/ScrollViewer>`\r\n- Compile the project and launch it\r\n- Resize the application windows to be less than 768 px in width and scroll to content to the left\r\n\r\nThe sample project is attached.\r\n[Game1.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/2522111\/Game1.zip)\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.0.1708\r\n\r\n#### What operating system are you using:\r\n- Windows\u00ae 10 (17134.345)\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- WindowsUWP","comments":["Something similar happens also in conjunction with the Mobile Emulators (10.0.15254.0):\r\n\r\n![monogame emulator](https:\/\/user-images.githubusercontent.com\/19491407\/47608439-1e823280-da2e-11e8-842d-c518c73f89eb.png)\r\n\r\nRunning the **original** (unmodified) 'MonoGame Windows 10 Universal (XAML) Project' on the mentioned emulator (->x86), shows a swap chain panel (corn blue color) that covers only about half of the visible area.\r\n\r\n**Again, this behavior was not detected with the previous version of MonoGame (3.6.) i.e. was handled correctly.**","I think what broke it was #5615. \r\nI changed the code from _swapChainPanel.SizeChanged to _coreWindow.SizeChanged because now the inputElement\/SwapChainPanel could be null under an CoreApplication projects and I assumed that a SwapChainPanel will always be the same size as the window. \r\n\r\nThe Phone case is a bit weird. I believe the cause of the bug is #5555, #5569.\r\nHowever in 3.6, the _swapChainPanel would fire a SizeChanged right after startup and update the wrong Backbuffer size.   ","@nkast \r\nI've added some more pictures to illustrate the distorted aspect ratio on the mobile emulators:\r\nAfter launching the application it looks as follows:\r\n\r\n![monogame 3 7 0 1708 i](https:\/\/user-images.githubusercontent.com\/19491407\/47614271-82900f80-da9d-11e8-84b7-52e9e00fa494.png)\r\n\r\n\r\nTurning the emulator into the horizontal orientation and then back to vertical:\r\n\r\n![monogame 3 7 0 1708 ii](https:\/\/user-images.githubusercontent.com\/19491407\/47614281-aa7f7300-da9d-11e8-9334-37e18a5a9904.png)\r\n\r\nI hope this additional information helps to fix the reported issue.","For the  distorted aspect ratio on phones apply the changes from #5569. I believe that will fix it.\r\n\r\nAs for the first issue with the SwapChainPanel in a ScrollViewer , I don't think MG can support it. When you change the backbuffer size for example, MG will also change the Window size to match that size. Therefore the SwapChainPanel must be the root element and fill the window without any borders\/padding.  For scenarios like the one you describe you would need something like a SwapChainRenderTarget for UWP #4674.","@nkast \r\nI want to state again here that BOTH issues are handled correctly by MonoGame 3.6. i.e. **these bugs have been introduced by version 3.7.0.1708**."],"labels":["Windows 10 UWP"]},{"title":"XML Importer not working with the latest build (with classes from an external dll)","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nWith Monogame 3.6, I was able to use the XML Importer in order to import custom game data. Since Monogame 3.7, I have an exception during the build process that prevents me to use any XML file. I tested the last build available and I still have the problem. Note: if I install the old 3.6 Monogame version, I can generate the xnb file, and then use it with the latest build.\r\n\r\nHere is a minimal project to reproduce the bug: \r\n[TestXml.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/2502462\/TestXml.zip)\r\n\r\nHere is the error I get:\r\n\r\n```\r\nProjet \"\/Users\/picnic\/Projects\/TestXml\/XmlGameData\/XmlGameData.csproj\" (Build cibles)\u00a0:\r\n\r\nResolveAssemblyReferences cible\u00a0:\r\n    Une liste d'exclusion de profil TargetFramework sera g\u00e9n\u00e9r\u00e9e.\r\nGenerateTargetFrameworkMonikerAttribute cible\u00a0:\r\n  La cible est ignor\u00e9e \"GenerateTargetFrameworkMonikerAttribute\", car tous les fichiers de sortie sont \u00e0 jour par rapport aux fichiers d'entr\u00e9e.\r\nCoreCompile cible\u00a0:\r\n    \/Library\/Frameworks\/Mono.framework\/Versions\/5.12.0\/lib\/mono\/msbuild\/15.0\/bin\/Roslyn\/csc.exe \/noconfig \/nowarn:1701,1702,2008 \/nostdlib+ \/errorreport:prompt \/warn:4 \/define:DEBUG \/errorendlocation \/preferreduilang:fr-FR \/reference:\/Library\/Frameworks\/Mono.framework\/External\/xbuild\/MonoGame\/v3.0\/Assemblies\/DesktopGL\/MonoGame.Framework.dll \/reference:\/Library\/Frameworks\/Mono.framework\/Versions\/5.12.0\/lib\/mono\/xbuild-frameworks\/.NETPortable\/v4.0\/Profile\/Profile158\/mscorlib.dll \/reference:\/Library\/Frameworks\/Mono.framework\/Versions\/5.12.0\/lib\/mono\/xbuild-frameworks\/.NETPortable\/v4.0\/Profile\/Profile158\/mscorlib.dll \/reference:\/Library\/Frameworks\/Mono.framework\/Versions\/5.12.0\/lib\/mono\/xbuild-frameworks\/.NETPortable\/v4.0\/Profile\/Profile158\/Microsoft.CSharp.dll \/reference:\/Library\/Frameworks\/Mono.framework\/Versions\/5.12.0\/lib\/mono\/xbuild-frameworks\/.NETPortable\/v4.0\/Profile\/Profile158\/System.Core.dll \/reference:\/Library\/Frameworks\/Mono.framework\/Versions\/5.12.0\/lib\/mono\/xbuild-frameworks\/.NETPortable\/v4.0\/Profile\/Profile158\/System.dll \/reference:\/Library\/Frameworks\/Mono.framework\/Versions\/5.12.0\/lib\/mono\/xbuild-frameworks\/.NETPortable\/v4.0\/Profile\/Profile158\/System.Net.dll \/reference:\/Library\/Frameworks\/Mono.framework\/Versions\/5.12.0\/lib\/mono\/xbuild-frameworks\/.NETPortable\/v4.0\/Profile\/Profile158\/System.Runtime.Serialization.dll \/reference:\/Library\/Frameworks\/Mono.framework\/Versions\/5.12.0\/lib\/mono\/xbuild-frameworks\/.NETPortable\/v4.0\/Profile\/Profile158\/System.ServiceModel.dll \/reference:\/Library\/Frameworks\/Mono.framework\/Versions\/5.12.0\/lib\/mono\/xbuild-frameworks\/.NETPortable\/v4.0\/Profile\/Profile158\/System.ServiceModel.Web.dll \/reference:\/Library\/Frameworks\/Mono.framework\/Versions\/5.12.0\/lib\/mono\/xbuild-frameworks\/.NETPortable\/v4.0\/Profile\/Profile158\/System.Windows.dll \/reference:\/Library\/Frameworks\/Mono.framework\/Versions\/5.12.0\/lib\/mono\/xbuild-frameworks\/.NETPortable\/v4.0\/Profile\/Profile158\/System.Xml.dll \/reference:\/Library\/Frameworks\/Mono.framework\/Versions\/5.12.0\/lib\/mono\/xbuild-frameworks\/.NETPortable\/v4.0\/Profile\/Profile158\/System.Xml.Linq.dll \/reference:\/Library\/Frameworks\/Mono.framework\/Versions\/5.12.0\/lib\/mono\/xbuild-frameworks\/.NETPortable\/v4.0\/Profile\/Profile158\/System.Xml.Serialization.dll \/debug+ \/debug:portable \/optimize- \/out:obj\/Debug\/XmlGameData.dll \/target:library \/utf8output Properties\/AssemblyInfo.cs XmlData.cs \"\/var\/folders\/2c\/scpghqvj5tjfz768r39m2d6c0000gn\/T\/.NETPortable,Version=v4.0,Profile=Profile158.AssemblyAttributes.cs\"\r\n_CopyFilesMarkedCopyLocal cible\u00a0:\r\n    Mise \u00e0 jour de l'horodatage \"\/Users\/picnic\/Projects\/TestXml\/XmlGameData\/obj\/Debug\/XmlGameData.csproj.CopyComplete\".\r\nCopyFilesToOutputDirectory cible\u00a0:\r\n    Copie du fichier de \"obj\/Debug\/XmlGameData.dll\" vers \"bin\/Debug\/XmlGameData.dll\".\r\n    XmlGameData -> \/Users\/picnic\/Projects\/TestXml\/XmlGameData\/bin\/Debug\/XmlGameData.dll\r\n    Copie du fichier de \"obj\/Debug\/XmlGameData.pdb\" vers \"bin\/Debug\/XmlGameData.pdb\".\r\n__________________________________________________\r\nProjet \"\/Users\/picnic\/Projects\/TestXml\/TestXml\/TestXml.MacOS.csproj\" (Build cibles)\u00a0:\r\n\r\nRunContentBuilder cible\u00a0:\r\n    \/Library\/Frameworks\/Mono.framework\/Versions\/Current\/bin\/mono \"\/Library\/Frameworks\/Mono.framework\/External\/xbuild\/MonoGame\/v3.0\/Tools\/MGCB.exe\" \/quiet \/platform:DesktopGL \/@:\"\/Users\/picnic\/Projects\/TestXml\/TestXml\/Content\/Content.mgcb\" \/outputDir:\"bin\/DesktopGL\/Content\" \/intermediateDir:\"obj\/DesktopGL\/Content\"\r\n    \/Users\/picnic\/Projects\/TestXml\/TestXml\/Content\/Example.xml\r\n    EXEC : warning : Exception of type 'System.Reflection.ReflectionTypeLoadException' was thrown.\r\n    \/Users\/picnic\/Projects\/TestXml\/TestXml\/Content\/Example.xml : error : Importer 'XmlImporter' had unexpected failure!\r\n    System.Reflection.ReflectionTypeLoadException: Exception of type 'System.Reflection.ReflectionTypeLoadException' was thrown.\r\n      at (wrapper managed-to-native) System.Reflection.Assembly.GetTypes(System.Reflection.Assembly,bool)\r\n      at System.Reflection.Assembly.GetTypes () [0x00000] in <71f4e3d7d65e42b0a699d02e59766d3c>:0 \r\n      at Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateSerializer+<>c.<FindType>b__15_0 (System.Reflection.Assembly assembly) [0x00000] in <ee3504a62da744b2be82d562251054fd>:0 \r\n      at System.Linq.Enumerable+<SelectManyIterator>d__167`3[TSource,TCollection,TResult].MoveNext () [0x0004e] in <cc3b329d40bd4675ae0e985e302972af>:0 \r\n      at System.Linq.Enumerable+WhereSelectEnumerableIterator`2[TSource,TResult].MoveNext () [0x00059] in <cc3b329d40bd4675ae0e985e302972af>:0 \r\n      at System.Linq.Enumerable.TryGetFirst[TSource] (System.Collections.Generic.IEnumerable`1[T] source, System.Boolean& found) [0x00045] in <cc3b329d40bd4675ae0e985e302972af>:0 \r\n      at System.Linq.Enumerable.FirstOrDefault[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00000] in <cc3b329d40bd4675ae0e985e302972af>:0 \r\n      at Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateSerializer.FindType (System.String typeName) [0x00202] in <ee3504a62da744b2be82d562251054fd>:0 \r\n      at Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateReader.ReadTypeName () [0x00012] in <ee3504a62da744b2be82d562251054fd>:0 \r\n      at Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateReader.ReadObject[T] (Microsoft.Xna.Framework.Content.ContentSerializerAttribute format, Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.ContentTypeSerializer typeSerializer, T existingInstance) [0x0009f] in <ee3504a62da744b2be82d562251054fd>:0 \r\n      at Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateReader.ReadObject[T] (Microsoft.Xna.Framework.Content.ContentSerializerAttribute format) [0x00017] in <ee3504a62da744b2be82d562251054fd>:0 \r\n      at Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateSerializer.Deserialize[T] (System.Xml.XmlReader input, System.String referenceRelocationPath) [0x00053] in <ee3504a62da744b2be82d562251054fd>:0 \r\n      at Microsoft.Xna.Framework.Content.Pipeline.XmlImporter.Import (System.String filename, Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext context) [0x00007] in <ee3504a62da744b2be82d562251054fd>:0 \r\n      at Microsoft.Xna.Framework.Content.Pipeline.ContentImporter`1[T].Microsoft.Xna.Framework.Content.Pipeline.IContentImporter.Import (System.String filename, Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext context) [0x0001c] in <ee3504a62da744b2be82d562251054fd>:0 \r\n      at MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.ProcessContent (MonoGame.Framework.Content.Pipeline.Builder.PipelineBuildEvent pipelineEvent) [0x00079] in <ee3504a62da744b2be82d562251054fd>:0 \r\n    \/Library\/Frameworks\/Mono.framework\/External\/xbuild\/MonoGame\/v3.0\/MonoGame.Content.Builder.targets(84,5): error MSB3073: La commande \"\/Library\/Frameworks\/Mono.framework\/Versions\/Current\/bin\/mono \"\/Library\/Frameworks\/Mono.framework\/External\/xbuild\/MonoGame\/v3.0\/Tools\/MGCB.exe\" \/quiet \/platform:DesktopGL \/@:\"\/Users\/picnic\/Projects\/TestXml\/TestXml\/Content\/Content.mgcb\" \/outputDir:\"bin\/DesktopGL\/Content\" \/intermediateDir:\"obj\/DesktopGL\/Content\"\" s'est arr\u00eat\u00e9e avec le code 1.\r\nG\u00e9n\u00e9ration de la cible \"RunContentBuilder\" termin\u00e9e dans le projet \"TestXml.MacOS.csproj\" -- \u00c9CHEC.\r\n\r\nG\u00e9n\u00e9ration du projet \"TestXml.MacOS.csproj\" termin\u00e9e -- \u00c9CHEC.\r\n\r\n\u00c9CHEC de la build.\r\n\r\nEXEC : warning : Exception of type 'System.Reflection.ReflectionTypeLoadException' was thrown.\r\n\/Users\/picnic\/Projects\/TestXml\/TestXml\/Content\/Example.xml : error : Importer 'XmlImporter' had unexpected failure!\r\n\/Library\/Frameworks\/Mono.framework\/External\/xbuild\/MonoGame\/v3.0\/MonoGame.Content.Builder.targets(84,5): error MSB3073: La commande \"\/Library\/Frameworks\/Mono.framework\/Versions\/Current\/bin\/mono \"\/Library\/Frameworks\/Mono.framework\/External\/xbuild\/MonoGame\/v3.0\/Tools\/MGCB.exe\" \/quiet \/platform:DesktopGL \/@:\"\/Users\/picnic\/Projects\/TestXml\/TestXml\/Content\/Content.mgcb\" \/outputDir:\"bin\/DesktopGL\/Content\" \/intermediateDir:\"obj\/DesktopGL\/Content\"\" s'est arr\u00eat\u00e9e avec le code 1.\r\n    1 Avertissement(s)\r\n    2 Erreur(s)\r\n```\r\n\r\nEdit: I formatted my drive and installed my MacBook from scratch and tested again with MonoGame 3.8.0.90, but I still have the bug.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7 to MonoGame 3.8.0.90\r\n\r\n#### What operating system are you using:\r\n- MacOs, Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["The issue appears to be one of the references in XmlGameData to the MonoGame  portable library.  The project file shows:\r\n\r\n  ```\r\n<Reference Include=\"MonoGame.Framework\">\r\n<HintPath>packages\\MonoGame.Framework.Portable.3.6.0.1625\\lib\\portablenet45+win8+wpa81\\MonoGame.Framework.dll<\/HintPath>\r\n    <\/Reference>\r\n```\r\nTry deleting the reference hint path and point it to the matching version.","I changed the references to:\r\n```\r\n  <ItemGroup>\r\n    <Reference Include=\"MonoGame.Framework\">\r\n      <HintPath>$(MonoGameInstallDirectory)\\MonoGame\\v3.0\\Assemblies\\DesktopGL\\MonoGame.Framework.dll<\/HintPath>\r\n    <\/Reference>\r\n  <\/ItemGroup>\r\n```\r\n\r\nBut I still got the same error.","I tried to install the last version of Monogame on a fresh MacOs install, and to create a new project with the latest templates available. Here is the new project:\r\n[Test.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/2554466\/Test.zip)\r\n\r\nI still have the same bug when using MGCB.exe:\r\n```\r\nBuild started 11\/6\/2018 7:14:42 PM\r\n\r\n\/Users\/picnic\/Projects\/Test\/Test\/Content\/File.xml\r\nWarning: Exception of type 'System.Reflection.ReflectionTypeLoadException' was thrown.\r\n\/Users\/picnic\/Projects\/Test\/Test\/Content\/File.xml: error: Importer 'XmlImporter' had unexpected failure!\r\nSystem.Reflection.ReflectionTypeLoadException: Exception of type 'System.Reflection.ReflectionTypeLoadException' was thrown.\r\n  at (wrapper managed-to-native) System.Reflection.Assembly.GetTypes(System.Reflection.Assembly,bool)\r\n  at System.Reflection.Assembly.GetTypes () [0x00000] in <71f4e3d7d65e42b0a699d02e59766d3c>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateSerializer+<>c.<FindType>b__15_0 (System.Reflection.Assembly assembly) [0x00000] in <0e39688444a049c6bfc44da764ba1972>:0\r\n  at System.Linq.Enumerable+<SelectManyIterator>d__167`3[TSource,TCollection,TResult].MoveNext () [0x0004e] in <cc3b329d40bd4675ae0e985e302972af>:0\r\n  at System.Linq.Enumerable+WhereSelectEnumerableIterator`2[TSource,TResult].MoveNext () [0x00059] in <cc3b329d40bd4675ae0e985e302972af>:0\r\n  at System.Linq.Enumerable.TryGetFirst[TSource] (System.Collections.Generic.IEnumerable`1[T] source, System.Boolean& found) [0x00045] in <cc3b329d40bd4675ae0e985e302972af>:0\r\n  at System.Linq.Enumerable.FirstOrDefault[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00000] in <cc3b329d40bd4675ae0e985e302972af>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateSerializer.FindType (System.String typeName) [0x00202] in <0e39688444a049c6bfc44da764ba1972>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateReader.ReadTypeName () [0x00012] in <0e39688444a049c6bfc44da764ba1972>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateReader.ReadObject[T] (Microsoft.Xna.Framework.Content.ContentSerializerAttribute format, Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.ContentTypeSerializer typeSerializer, T existingInstance) [0x0009f] in <0e39688444a049c6bfc44da764ba1972>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateReader.ReadObject[T] (Microsoft.Xna.Framework.Content.ContentSerializerAttribute format) [0x00017] in <0e39688444a049c6bfc44da764ba1972>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateSerializer.Deserialize[T] (System.Xml.XmlReader input, System.String referenceRelocationPath) [0x00053] in <0e39688444a049c6bfc44da764ba1972>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.XmlImporter.Import (System.String filename, Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext context) [0x00007] in <0e39688444a049c6bfc44da764ba1972>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.ContentImporter`1[T].Microsoft.Xna.Framework.Content.Pipeline.IContentImporter.Import (System.String filename, Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext context) [0x0001c] in <0e39688444a049c6bfc44da764ba1972>:0\r\n  at MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.ProcessContent (MonoGame.Framework.Content.Pipeline.Builder.PipelineBuildEvent pipelineEvent) [0x00079] in <0e39688444a049c6bfc44da764ba1972>:0\r\n\r\nBuild 0 succeeded, 1 failed.\r\n\r\nTime elapsed 00:00:00.50.\r\n```\r\n\r\nThe only case I got MGCB.exe working with XML files is when I use only C# basic types (String or int). If I use any type from an external dll (mine or even Monogame types like Point), it got the previous exception.\r\n\r\nI tried to debug MGCB.exe, by using the Debug option in the GUI or the \/launchdebugger option in the console but it does not seem to work properly in MacOS.\r\n\r\nIf anyone manages to get XML import working on MacOS with Monogame >= 3.7, I would be very interested in seeing the project configuration :).","I tested it on a Windows computer yesterday, and I was surprised: it doesn't work on Windows. I got the same error as on MacOs. So, if anyone has a working project with XML import (with classes from an external dll), I would be happy to see how it can be done.","I am also getting the same error on Windows (specifically when using GeonBit.UI).  \r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/22599103\/67151130-6a9d3700-f27e-11e9-8a42-795d96e9882d.png)\r\n\r\nAll xml files in GeonBit.UI are having this issue","This is turning out to be bigger than just the XMLImporter module. I believe it effects any dll that works with the content pipeline. See the referenced issue above.","We do have the same issue with XML files, it also fails to build GeonBit  #6998 "],"labels":["ContentPipeline"]},{"title":"[DesktopGL] Song finishes a second too early","body":"Hello :)\r\n\r\nIt looks like ```OggStreamer``` is stopping playback and triggering a state change to ```Stopped``` in ```MediaPlayer``` one second too early.\r\n\r\nI believe this is due to the stop event to be triggered when the last buffer is queued to be played, and not when the last buffer has finished playing.\r\n\r\nI haven't noticed this before because all our ```Song``` had a silent second at their end...\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["I'm not very familiar with the audio code, but [line 475 of `OggStream.cs`](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/bc901c3d2597120ee5ad00016cec51875f04e670\/MonoGame.Framework\/Audio\/OggStream.cs#L475) seems like an issue to me. As you mentioned, it appears that it's actually filling the buffer, but it exits since it read the last bit of audio data. It doesn't look to play the remaining data in the buffer in this case. Correct me if I'm wrong.","Looks like the `pendingFinish` flag is set when the last buffer is read, but the stream isn't stopped until `pendingFinish && queued == 0` which should mean playback is done. The code doesn't look incorrect to me. I think we need to debug this issue to figure it out. "],"labels":["Audio"]},{"title":"SoundEffect stopps working if Game is started a second time","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nI am writing a Level Editor for my game using Windows WPF. To test a Level, an instance of my Game is created, played and closed from within the main Editor Program.\r\n\r\nThe problem I am encountering is that SoundEffects only work in the first instance that is created. Every following instance either does not play the effect or reports a \"System.AccessViolationException\" in SharpDX.XAudio2.dll\r\n\r\nTo recreate this issue, simply add a sound effect to a new monoGame and replace the Main entry method in Program.cs with this one to start the game twice:\r\n\r\n```c#\r\n        static void Main()\r\n        {\r\n            using (var game = new Game1())\r\n            {\r\n                game.Run();\r\n            }\r\n\r\n            Thread.Sleep(1000);\r\n\r\n            using (var game = new Game1())\r\n            {\r\n                game.Run();\r\n            }\r\n        }\r\n```\r\n\r\nMaybe I am missing some Initialization or Cleanup code to call inbetween but I could not find anything either in the Game or the SoundEffect class.\r\n\r\nUsing the debugger I saw that in the second call, SoundEffects internal static field called Device (of type XAudio2) is null whereas in the first run it is not null.\r\n\r\nTested on Windows8 and Windows10 using MonoGame 3.7 and VisualStudio 2017\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["Correction: I'm using the latest dev version of MonoGame v3.8.0.76","You're not doing anything wrong, this is a bug. The audio system is initialized statically when it's first used and disposed when game is disposed. When you create a second game the system is not reinitialized. We've had some discussion on this topic before. See #5153.","I guessed from the MG source code that it was something like this. Is there a way to reinitialize the audio system manually? I tried calling the (private) method SoundEffect.InitializeSoundEffect before starting the second instance of the Game class but that just gives me a different Access Violation in SharpDX.XAudio2.dll when I call Play()","I'm not sure, but I think it's pretty complex to get this right.\r\n\r\nFor now I'd recommend to work around this issue by keeping around your `Game` instance and implementing the option to reset your game. So move what you now have in `Game1` to a seperate class and keep an instance of that class in your `Game1` implementation. (you'll probably want an `IsRunning` or similar property to early exit out the update and draw methods)"],"labels":["Audio"]},{"title":"Texture and sampler slots messed up on DirectX","body":"The way textures and samplers are ordered on DirectX platform depends on the order in which they are used in their shader which may not match the order of declaration or what slots are assigned. Some disscusion about this in [this forum post](http:\/\/community.monogame.net\/t\/order-of-tex2d-in-shader\/8720\/17).\r\n\r\nReproduction project and some more details: https:\/\/github.com\/UnterrainerInformatik\/MonoGame_multi_texture_shader","comments":[],"labels":["MGFX","DirectX"]},{"title":"Constant buffer bind points are ignored","body":"Presently 2MGFX does not check the bind-points (registers) of constant buffers. It is assumed that all CBuffers are in sequential order. I assume this is because of MojoShader and the HLSL -> GLSL stuff which as far as I can tell targets GLSL versions that cannot specify UBO bind-points.\r\n\r\nI encountered this while locally implementing locking of textures and constant-buffers (so that effects could not touch those indices while locked). My specific case was passing a set of Forward+ lighting tables as a CBuffer and two StructuredBuffers (implemented as deriving from texture) that I explicitly did not want Effects to touch as they're bind once and be done for the pass.\r\n\r\nI don't consider this important as I discarded it as C# is not even remotely fast enough to do the tile light culling CPU side, but I want to raise it to attention that the CBuffer registers are assumed to be sequential.\r\n\r\n---\r\n\r\nLocally I deal with this by recording a separate list of `_cbufferBinds[]` when compiling the effect. That table is referenced when binding a cbuffer so that it tries to bind to the correct index (GraphicsDevice could have a lock on that index preventing stupid CBuffer changes).","comments":[],"labels":["MGFX"]},{"title":"Android doesn't register any Microphone objects","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nI'm trying to use the Microphone functionality that was recently added to MonoGame 3.7, but I'm having problems on the Android platform.\r\n\r\nHere's the helper library I wrote for it:\r\nhttps:\/\/github.com\/dmanning23\/MicBuddy\r\n\r\nMore importantly, here's the example project that shows this issue:\r\nhttps:\/\/github.com\/dmanning23\/MicBuddySample\r\n\r\nThis project works as expected in iOS. The app starts, and the default microphone is detected by MonoGame and registered with the system. On Android however it never registers any microphones. (The first thing I double-checked was that I had the RECORD_AUDIO permission, but that doesn't seem to be the problem.) The Microphone.Default parameter is always null, and Microphone.All list is always empty.\r\n\r\nIs there any extra initialization that needs to occur on Android that I am unaware of?\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Android 7+\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- Android\r\n- iOS\r\n","comments":["Looking through the code, I bet this is related to this line:\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/05df785145e30f880abe1b9a0a7c7e7ba4f35d00\/MonoGame.Framework\/Audio\/Microphone.OpenAL.cs#L55\r\n\r\nThe `else` condition of that precompiler flag specifically mentions Xamarin. I know the DesktopGL project has a `LINUX` DefineConstant, should that `if` check be changed to:\r\n```#if LINUX \/\/DESKTOPGL```","Not sure why that's set to true if the else branch is meant to be for Xamarin. I don't have time rn, but we should check git blame and figure out why it is that way.","Darn it, that would have been too easy. Tried toggling that if check, but it throws a NoMicrophoneConnectedException: Failed to open capture device.\r\nwhen trying to start the microphone :(","@mrhelmut\n\nYou had Android microphone working, right? "],"labels":["Android","Help Wanted","Audio"]},{"title":"MonoGame 3.7.0.1708: Multisampling fails on Windows\u00ae 10 UWP (XAML)","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nThe instruction 'Graphics.PreferMultiSampling = true;' still crashes the application as with previous releases of MonoGame.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.0.1708\r\n\r\n#### What operating system are you using:\r\n- Windows 10 (17134.285)\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- WindowsUWP + XAML","comments":["More information in [this comment](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/6178#issuecomment-376241755) from #6178.","Ran into this problem recently.\r\nFrom googling, I found the following article that might help whomever can fix this...\r\n\r\nhttps:\/\/docs.microsoft.com\/tr-tr\/windows\/uwp\/gaming\/multisampling--multi-sample-anti-aliasing--in-windows-store-apps\r\n","Here is a possible workaround:\r\n\r\nhttps:\/\/gist.github.com\/cilliemalan\/9e4bb05bf4bfbbb4ad011d36096e81e3\r\n"],"labels":["Windows 10 UWP"]},{"title":"MonoGame 3.7.0.1708: No Mouse Input Processed on Windows\u00ae 10 UWP (XAML)","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nAfter upgrading from MonoGame 3.6 to 3.7.0.1708, I detected that **no** mouse input is processed any more for the 'SwapChainPanel' UIElement (i.e. events like 'PointerMoved' do not get called any more unless the pointer is over a child UIElement). Even by explicitly using 'AddHandler' to attach a mouse handler to the swap chain panel and by setting the 'handledEventsToo = true' no input is processed.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.0.1708\r\n\r\n#### What operating system are you using:\r\n- Windows 10 (17134.285)\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- WindowsUWP + XAML","comments":["This works fine with an empty XAML template, therefore concluding that its not a bug on our side, closing... ","Sorry @cra0zy, but your statement is incorrect.\r\nHere is how to reproduce the issue:\r\n1. Create a project template 'MonoGame Windows 10 Universal (XAML) Project'\r\n2. Add a handler for '**PointerMoved**' to the 'SwapChainPanel'\r\n3. Insert the handler code to the corresponding '*.cs' file.\r\nUnfortunately, pointer handlers are only called for buttons, sliders etc. but not for the swap chain panel itself. This behavior is different from MonoGame 3.6.\r\n\r\nFor your convenience I have attached a simple application with an empty XAML template.\r\n[MonoGame.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/2432795\/MonoGame.zip)\r\n","> Add a handler for '**PointerMoved**' to the 'SwapChainPanel'\r\n> Insert the handler code to the corresponding '*.cs' file.\r\n> Unfortunately, pointer handlers are only called for buttons, sliders etc. but not for the swap chain panel itself. This behavior is different from MonoGame 3.6.\r\n\r\nI thought you were talking about MonoGames `Mouse.GetState()` stuff, this doesn't have to do anything with us I think.","@cra0zy \r\nNo, I was not talking about 'Mouse.GetState()'. Using this function might be a suitable way to process mouse input for a 'Desktop' application but not for a UWP XAML one.\r\nThe MonoGame framework should redirect the mouse input to the swap chain panel as well (not only to child UI Elements). The previous version 3.6. did implement this behavior correctly.\r\n\r\n**Please re-open this issue.**\r\nThanks","Create a sample that demonstrates the issue with `Mouse.GetState()` returning an incorrect value.","@cra0zy Sorry, you don't get the point.\r\nJust fire-up the supplied sample and you'll see that the handler for the swap chain panel is not called any more for MonoGame 3.7.0.1704. However, it does do that in MonoGame 3.6. This behavior is crucial for UWP XAML apps.\r\n\r\n**Again, please re-open this issue.**\r\nThanks","SwapChainPanel is not a MonoGame control, its part of UWP: https:\/\/docs.microsoft.com\/en-us\/uwp\/api\/windows.ui.xaml.controls.swapchainpanel\r\n\r\nAgain, your issue does not appear to have to do anything with MonoGame itself.","@cra0zy \r\nMonoGame should **not** consume the mouse events for the swap chain panel control; as already stated, this is correctly implemented in the previous versions of MonoGame.\r\nUsing 'Mouse.GetState()' is very inconvenient for MonoGame UWP XAML applications.\r\n\r\nIf you do not understand this problem, then hand-on the issue to somebody else of the team.","Again, this issue has nothing to do with MonoGame:\r\n- Step 1: Create an empty UWP application, not MonoGame one, just a standard UWP application\r\n- Step 2: Add a SwapChainPanel element\r\n- Step 3: Connect `PointerMoved` event\r\n- Step 4: Notice that `PointerMoved` never gets called, and you have not used a single part that has anything to do with MonoGame :\/","@cra0zy \r\nI've attached a sample derived from the 'DirectX 11 and XAML App' UWP template demonstrating that the 'PointerMoved' handler is indeed called for the swap chain panel.\r\nThe only change other than adding the 'PointerMoved' handler to the template was to remove the non-UI thread handling the mouse, pen & touch i.e. pointer input.\r\nIt seems that the pointer input handling has changed in MonoGame 3.7.\r\n[TEST.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/2439333\/TEST.zip)","I am not even gonna bother going over that code, UWP probably has something like Gtk EventBox that it needs to process events, and either way, an empty non MonoGame UWP project demonstrates that the issue is not with MonoGame.","@AdrianWenz \r\nThe behavior was changed in https:\/\/github.com\/MonoGame\/MonoGame\/pull\/5520.\r\n  There were many reports of input lag and the way we address them was to run the input and the game-loop on two separate threads.\r\n\r\n  The `CoreIndependentInputSource` creates a 'shadow' windows with it's own message-pump and  all input messages from `SwapChainPanel` are redirected there, that's why you are no longer able to see Pointer events from the `SwapChainPanel`.\r\n  I suppose you can do away with `CoreIndependentInputSource` since the main thread is no longer blocked by the `CompositionTarget` and you wont see any major lag.\r\n  I have modified InputEvents to act like 3.6 while you can enable the new behavior by setting a custom property at the `CoreWindow`.\r\nTake a look: https:\/\/github.com\/nkast\/MonoGame\/commit\/9607b2265d1305ed9c3da64f255c37a0c017f499#diff-4275e55a3354530b36f6005576ef9845\r\n","@nkast \r\nThank you very much for the profound answer,\r\nI'll try the code fix and send you a reply as soon as I have the time to do so.\r\nGood job!","@nkast \r\nSorry, I need some more time before I can test your modifications. Expect it to happen around the beginning of next month (November).\r\nAs promised, I'll give you a note when done.\r\nThanks for your patience.","No problem. Note that in your case you might want to disable the Pen as well.","@nkast \r\nAs promised, I've tested your modifications as outlined at:\r\n[nkast@9607b22#diff-4275e55a3354530b36f6005576ef9845](url)\r\n**I can confirm that MonoGame 3.7.0.1708 (including your code changes) now behaves like the previous version.** However, I did not test the custom property to switch to an UI processing in a separate thread.\r\n\r\nThanks for your help.","Hello. I'm using MonoGame v3.7.1.189 with Universal XAML application.\r\nHow to receive PointerMoved event from SwapChainPanel? I need to get pointer **pressure** value. \r\nWhen I create CoreIndependentInputSource then I can get point properties but no input is passed to game.\r\nOr when I subscribe to swapChainPanel.PointerMoved then I never get any result. (my handler is never invoked).\r\n\r\nHow should I properly receive PointerMoved event **and** use device.GetState(..) in game?\r\nThanks for yours time and sorry for any bad grammar."],"labels":["Windows 10 UWP"]},{"title":"2MGFX tool cannot compile effect when running with specific Culture","body":"Hello guys,\r\n\r\nOne of our players reported that the game doesn't run and provided the log file. Turns out the game cannot compile an effect (the game ships with 2MGFX tool exe as the game is moddable) on his and his friend's PCs due to the error `Unexpected token 'P' found. Expected None, Linear, Point, or Anisotropic.` for shader code like this:\r\n\r\n```LSL\r\nsampler TextureScreenBufferSampler\r\n{\r\n    Texture = <TextureScreenBuffer>;\r\n    Filter = POINT; \/\/ this line, yes, it cannot parse POINT\r\n};\r\n\r\nfloat4 MainPS(VSOutput input) : COLOR0\r\n{\r\n    return tex2D(TextureScreenBufferSampler, input.TexCoord);\r\n}\r\n```\r\n(2MGFX cannot parse `POINT`)\r\n\r\n\r\n\r\nI was surprised and confused as there are thousands of installations and no such issue were ever reported before. But after a few messages the player mentioned that he and his friend are from Turkey - it's clicked as we had an issue with float parsing in different locales in one of our previous games so I've rushed to change the Windows Region setting to Turkish and voil\u00e0 - the issue reproduced!\r\n\r\nI've debugged the issue but I cannot figure out why POINT is parsed as `_UNDETERMINED_ 'P'`.\r\n\r\nAs a workaround I've added:\r\n`System.Threading.Thread.CurrentThread.CurrentCulture\r\n    = CultureInfo.DefaultThreadCurrentCulture\r\n    = CultureInfo.InvariantCulture;`\r\nhere before `Options` https:\/\/github.com\/MonoGame\/MonoGame\/blob\/3d26a001c302ac30093fec5e28f2a1924ef7f894\/Tools\/2MGFX\/Program.cs#L20\r\nIt works fine. If this considered a valid fix (why not? it's not a Region-specific application) I can create a pull request.\r\n\r\nBTW, we're using MonoGame built from develop branch, fresh version.\r\n\r\nRegards!\r\n","comments":["It is probably better to fix the specific parsing that is failing.  I say this because we would want to make sure this is fixed even under MGCB which might include custom processors which would not function correctly with this proposed fix.\r\n\r\nAlso it would be good to figure out how we can trick the unit test system into testing alternate locales like this.","I'm not actually sure how the Turkish culture causes this issue, maybe we do something weird when parsing. But I'd argue any text files for games should use the invariant culture so the proposed fix would be fine. Why keep the user local culture @tomspilman? ","@Jjagg \r\n\r\n> Why keep the user local culture\r\n\r\nSpecifically...  MGFX code is used within MGCB.  If the MGFX code changes the culture globally then it affects all of MGCB...  including any user custom importers\/processors.  So this work around could potentially break users custom pipeline which is why we should fix this correctly.\r\n\r\nIt really isn't hard to fix correctly.  We're already doing the right thing in places like this:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/Tools\/2MGFX\/TPGParser\/ParseTreeTools.cs#L15\r\n\r\nWe just need to find the place we're not using the invariant culture and fix it.","@aienabled I can't seem to reproduce this us\u0131ng an effect w\u0131th the sn\u0131ppet you posted \u0131n \u0131t and w\u0131th the Turk\u0131sh language set on W\u0131ndows w\u0131th e\u0131ther the P\u0131pel\u0131ne tool or 2MGFX. Both succesfully comp\u0131le the effect. Is there anyth\u0131ng else you changed? Also my i's don't have dots anymore \ud83d\ude2e ","Here what I've done now to reproduce it from the clean MonoGame repository (`developer` branch) on Windows 10:\r\n1. Create file `<repository root>\\Tools\\2MGFX\\bin\\Windows\\AnyCPU\\Debug\\Test.fx` with this content:\r\n```HLSL\r\nsampler TextureScreenBufferSampler\r\n{\r\n    Texture = <TextureScreenBuffer>;\r\n    Filter = POINT; \/\/ this line, yes, it cannot parse POINT\r\n};\r\n\r\nstruct VertexShaderOutput\r\n{\r\n\tfloat4 Position : SV_POSITION;\r\n\tfloat4 Color : COLOR0;\r\n};\r\n\r\nfloat4 MainPS(VertexShaderOutput input) : COLOR0\r\n{\r\n    return tex2D(TextureScreenBufferSampler, input.Position);\r\n}\r\n\r\ntechnique BasicColorDrawing\r\n{\r\n\tpass P0\r\n\t{\t\t\r\n\t\tPixelShader = compile ps_5_0 MainPS();\r\n\t}\r\n};\r\n```\r\n(I've added a few lines to this sample code to make it a valid (compiling without any issues in US locale))\r\n\r\n2. Edit `2MGFX.Windows` project settings, Debug tab, Command line arguments: `Test.fx Result.gfx \/Profile:DirectX_11`\r\n\r\n3. Switch your Windows Region in Control Panel to `Turkish (Turkey)`. See the screenshot attached:\r\n![screenshot at 19-39-41](https:\/\/user-images.githubusercontent.com\/865384\/46680931-374fb300-cbfb-11e8-9d5b-d9a4abb097fd.jpg)\r\n(no need to restart VS in my case)\r\n\r\n4. Run it. Please note the command prompt window closes even if there are errors and your debugger might not catch the exception unless you have enabled breaking on CLR System.Exception in (VS2017 - Debug->Windows->Exception Settings).\r\n\r\nThe compilation error message is:\r\n`System.Exception: '<repository root>\\Tools\\2MGFX\\bin\\Windows\\AnyCPU\\Debug\\Test.fx(4,14) : Unexpected token 'P' found. Expected None, Linear, Point, or Anisotropic.\r\n****`\r\n","~There is no 'i' in 'POINT'. \r\n\r\nhttp:\/\/www.google.com\/search?q=The+Turkish-I+Problem","@nkast, it is not only the lowercase i that is the issue, it is the Turkish 'I' != ASCII 'I'.\r\n\r\n@tomspilman, I see no problem with saving the current culture, setting the InvariantCulture for the thread prior to parse and setting it back after completion.\r\n \r\nThe only issue that could arise, is if someone wanted to send a localized string to the GPU:\r\nAccording to the [OpenGL Standard](https:\/\/www.khronos.org\/registry\/OpenGL\/specs\/gl\/GLSLangSpec.4.50.pdf) Section 3.1:\r\n>  The source character set used for the OpenGL shading languages is Unicode in the UTF-8 encoding\r\n> scheme. After preprocessing, only the following characters are allowed in the resulting stream of GLSL\r\n> tokens:\r\n> The letters a-z, A-Z, and the underscore ( _ ).\r\n> The numbers 0-9.\r\n> The symbols period (.), plus (+), dash (-), slash (\/), asterisk (*), percent (%), angled brackets (< >\r\n> ), square brackets ( [ and ] ), parentheses ( ( and ) ), braces ( { and } ), caret (^), vertical bar ( | ),\r\n> ampersand (&), tilde (~), equals (=), exclamation point (!), colon (:), semicolon (;), comma (,), and\r\n> question mark (?).\r\n\r\n","> http:\/\/www.google.com\/search?q=The+Turkish-I+Problem\r\n\r\nInteresting... so is this the opposite case?  We need a culture specific comparison?\r\n\r\nOr do we just need a better error reporting here?\r\n\r\nOr should we pre-process all shader files replacing Turkish-I with a regular I?\r\n\r\n\r\n> @tomspilman, I see no problem with saving the current culture, setting the InvariantCulture for the thread prior to parse and setting it back after completion.\r\n\r\nMaybe...  that is a possible hack.  But we have to be sure that a crash or thrown exception doesn't leave it stuck in this mode.  I still think the right thing is to fix the parser cases to use the correct invariant culture settings.\r\n\r\n","@tomspilman , msdn gives some examples for the default string comparison:\r\nhttps:\/\/msdn.microsoft.com\/en-us\/library\/ms973919.aspx#stringsinnet20_topic5\r\n\r\n```\r\nCulture = English (United States)\r\n(file == FILE) = True\r\nCulture = Turkish (Turkey)\r\n(file == FILE) = False\r\n```\r\n\r\nIn our case, POINT != Point.  \r\n\r\n@aienabled, can you add 'RegexOptions.CultureInvariant' in the following line?\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/3d26a001c302ac30093fec5e28f2a1924ef7f894\/Tools\/2MGFX\/TPGParser\/Scanner.cs#L245\r\n\r\n","Wow, my i joke was actually relevant :o Looking back it's pretty dumb that I didn't catch that :p ","> @aienabled, can you add 'RegexOptions.CultureInvariant' in the following line?\r\n\r\nPlease include all lines containing an 'I' or 'i' since they will also be effected by the bug.\r\nMy solution would be to add in the last constructor in parser.cs:\r\n    Input = String.Format(System.Globalization.CultureInfo.CultureInvariant,Input);\r\nThis line would restructure the input prior to parsing without requiring a change to each line containing an \"i\" or \"I\".\r\nI have yet understand the filename argument passed in.  If it is used as an input then every usage of the the file should have the same treatment.","@tomspilman,\r\n>Maybe... that is a possible hack. But we have to be sure that a crash or thrown exception doesn't leave it stuck in this mode. I still think the right thing is to fix the parser cases to use the correct invariant culture settings.\r\n\r\nI agree with you on principal,  but:\r\nI understand this is a hackish approach, but it may be the best approach, not just the Turkish-I problem but with other cultures as well. I am thinking of Cyrillic, Japanese, Korean, and other scripts not equatable to the Latin character set.  Assuming the CultureInfo is saved before the first try block it can be restored in a finally clause. Thus negating any impact on overall execution, if an exception occurs.","> Please include all lines containing an 'I' or 'i' since they will also be effected by the bug.\n\nThe parser code is generated with a tool, so it's likely just a single line fix. ","@nkast \r\n> @aienabled, can you add 'RegexOptions.CultureInvariant' in the following line?\r\n\r\nYes, it did solve the issue! Thank you!\r\n\r\nThough, personally I would prefer `try-finally` solution with the invariant culture suggested by @stromkos. Otherwise, who knows which issues we can find (or create!) eventually... I'm also using invariant culture in all the apps and games I'm making for the last 5 years (and specifically using `CultureInfo.InstalledUICulture` to format time and dates) as this makes me feel much more secure (got rid of many issues with config files parsing, etc). Opt-in approach is much safer than all these sudden issues we see with the \"Turkish test\". It's a really frustrating fact that .NET includes CultureInfo-less shortcut methods (especially, related to the string parsing) which could easily break or produce unexpected results when the same application is running with a different culture...\r\n\r\nBTW, you can test this issue by simply setting `System.Threading.Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo(\"tr-TR\");` (and `CultureInfo.DefaultThreadCurrentCulture` if you want to use multiple threads). No need to change the actual Windows Region."],"labels":["MGFX","Help Wanted"]},{"title":"Feature Request : Pipeline Tool remember Position and Size","body":"The tool should remember it's previous position, size, and dimensions of all the individual parts.\r\n\r\nJust a small quality of life improvement.\r\n\r\nAdditionally it would be nice if it remembered which folders were expanded too.","comments":["Hey I would like to work on that feature if it's still needed. (Also #6698 seems to be a duplicate)\r\n\r\nI've already looked into it a bit and we could achive this by saving the size of the `MainWindow` object and the position of the two `Splitter` objects. The size of the panels are defined by the position of the `Splitter` objects. Instead of initializing these UI objects with hard-coded values we just need to use the previous values.\r\n\r\nCan `PipelineSettings` be used to store this information?","Yes, this is still needed. `PipelineSettings` can be used."],"labels":["Feature Request","MGCB Editor"]},{"title":"3D Sound (Emitter\/Listener) not working properly","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nWhen running 3D sound the sound will not come from the correct direction.\r\nThe problem is that AudioEmitter and AudioListener is converted wrong to X3DAudio.\r\nForward vector is inverted instead of only the Z component.\r\nUp vector is not adjusted at all but must also have the Z component inverted.\r\n\r\nSoundEffectInstance.XAudio.cs adjust following in ToDXListener() and ToDXEmitter()\r\nforward *= -1.0f;\r\nTo: \r\nforward.Z *= -1.0f;\r\nup.Z *= -1.0f;\r\n\r\nThe problem also most likely exist in Windows8\\SharpDXHelper.cs ToEmitter() and ToListener()\r\n\r\n\/Tommy\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n- WindowsDX\r\n","comments":["3D sound isn't working for me since upgrading to 3.7 as well. Worked like a charm previously...please fix this"],"labels":["Audio"]},{"title":"Can't switch to fullscreen","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nSince I've upgraded to Monogame 3.7 (3.7.0.1681),  my code to make my game full screen does not work anymore. I used the windows 10 uwp (core) template. Here are some details :\r\n\r\n- the game runs in windowed mode\r\n- I can switch to full screen ONLY manually with shift+windows+enter, but when I read the Window.ClientBounds I see that it's not a true hard fullscreen mode (I want 1920x1080 resolution and I get whatever resolution Windows is in right now, like 2880x1800 or 1920x1200, etc).\r\n\r\nHere's my code :\r\n\r\n**In constructor**\r\n```\r\ngraphics = new GraphicsDeviceManager(this);\r\ngraphics.HardwareModeSwitch = true;\r\ngraphics.SynchronizeWithVerticalRetrace = true;\r\n```\r\n\r\n**In Initialize**\r\n```\r\ngraphics.PreferredBackBufferWidth = 1920;\r\ngraphics.PreferredBackBufferHeight = 1080;\r\ngraphics.IsFullScreen = true;\r\ngraphics.ApplyChanges();\r\n```\r\n\r\nAny help would be really appreciated! I am posting this here since everything was working fine with monogame 3.6 and since I upgraded to 3.7 it does not work anymore. I started a brand new project with the monogame 3.7 template (windows 10 uwp core) to be sure.\r\n\r\nThanks!\r\nStyves\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.0.1681\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- WindowsUWP (core template)\r\n","comments":["Hi,\r\n\r\nany help would be greatly appreciated! Does it look like I'm doing something wrong in my code ?\r\n\r\nThanks,\r\nStyves","```\r\npublic static void toggleFullscreen() {\r\n    Utility.fullscreen = !Utility.fullscreen;\r\n    Console.WriteLine(\"Fullscreen: \" + Utility.fullscreen);\r\n\r\n    if (Utility.fullscreen) {\r\n        game.screenWidth = WindowWidth;\r\n        game.screenHeight = WindowHeight;\r\n\r\n        game.graphics.PreferredBackBufferWidth = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width;\r\n        game.graphics.PreferredBackBufferHeight = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height;\r\n\r\n        game.graphics.IsFullScreen = true;\r\n        game.graphics.ApplyChanges();\r\n    } else {\r\n        game.graphics.PreferredBackBufferWidth = game.screenWidth;\r\n        game.graphics.PreferredBackBufferHeight = game.screenHeight;\r\n        game.graphics.IsFullScreen = false;\r\n        game.graphics.ApplyChanges();\r\n    }\r\n}\r\n```\r\n\r\nNot sure if this helps you. That's a snipped of my toggleFullscreen function. It saves the current window size and switches to the monitor's resolution. As far as I can tell, you're not doing anything wrong though.","Thanks a lot @Apostolique  ! I implemented your code and it made me realize that for some reason, if I set the preferedbackbuffer dimensions and then call ApplyChanges() in Initialize, it does not do anything. But if I call that later, like during the first Draw(), it does work. I don't understand why.\r\n\r\nNow, while it works, even if I set graphics.HardwareModeSwitch = true; the native resolution of the screen is not changing (if I set Windows to be in 1680x1050 and I set the preferedbackbuffer to 1920x1080, the resolution is not changed, it's still in 1680x1050. The screen does support 1920x1080, I can set Windows in that native resolution. My code is resolution independant so that's not really a problem, but I would like to be able in my game to allow the user to set the game resolution he wants depending on his graphic card capabilities.\r\n\r\nAny idea why HardwareModeSwitch has no effect at all?\r\n\r\nThanks again,\r\nStyves","I'm not sure, but usually, you can create your own RenderTarget with the resolution that you want, draw the game to the RenderTarget, then draw that RenderTarget to the screen.","You can directly set the BackBuffer in the constructor i think.\r\nYou can also get the supported display modes and aspect ratio's for each.\r\nYou would need to construct your own method for choosing the best similar resolution to set your game to.\r\n\r\n\r\n\r\n3.7 looks pretty good under GL \r\nMost of my tests i ran appeared to work concerning fullscreen mode switching in GL.\r\nBut not all... When switching back out of full screen i got a couple quirks and switching into a smaller resolution maybe that was because it wasn't true full screen i cant tell.\r\n\r\nI think im going to update my test demo and turn it into a visual project.\r\nAs a example demo and for future tests.\r\n"],"labels":["Windows 10 UWP","DirectX"]},{"title":"Android Viewport issue","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nHey, so i've been experiencing a weird bug lately, when creating an android project the viewport seems to have offset it self from the top like in this picture https:\/\/i.imgur.com\/IwcLXNd.png\r\n\r\nCurrently i just fix this by moving the viewport to my desired location, but that means that i will get negative coordinates when i for example touch the top of the screen.\r\n\r\nIs there a fix to this issue?\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.0.1681\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- Android\r\n","comments":["Hi, I have same issue. \r\nIt seems it appears only for portrait orientation for me, but viewport coordinates and size are wrong. ","I've found that it's the client bounds that's wrong, when i boot up the app it says this in the debug window\r\n`GraphicsDeviceManager.ResetClientBounds: newClientBounds={X:0 Y:51 Width:1184 Height:665}`\r\nSo it is ResetClientBounds that is acting weird because Y should be 0, shouldn't it?"],"labels":["Android"]},{"title":"Provide a way to prevent closing of Monogame Window","body":"Hello,\r\n\r\nI'm currently writing a level editor in Monogame 3.7 Desktop GL.\r\n\r\n\r\nI'd like to intercept window exiting to be able to let the user save his work or cancel exiting.\r\nIt is a pretty common feature, maybe not useful for games, but for other tools.\r\n\r\nRight now, we can only perform some actions while the game is exiting, but not cancel it.\r\n\r\nWhat would be nice is to have a method to overload that returns true or false, depending on wether the game is authorized to exit.\r\n\r\nThanks in advance.","comments":["We could have a flag in the `Game.Exiting` event argument that you can set to cancel exiting. That's simple to implement and a non-breaking way to implement this feature. Sorry for the extremely late response!","@tomspilman This is easy to implement and I'm up for it, but I'd like your opinion first :) ","If we can do it properly and support at least all desktop platforms i guess it is ok.\r\n\r\nMy concern is that you cannot keep a mobile or console game from shutting down.  So this is exclusively a PC feature really.\r\n","Yes, we'll just be able to implement this for desktop. I guess this falls in the same bucket as #6392. \r\n\r\nFor synchronous run loop we simply wrap [this code](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Game.cs#L397-L401) in a while loop with the stop condition that the new flag blocking game exit isn't set.\r\n\r\nI'll have to look into async run loop.","@Jjagg: I created a PR for this above (#7096) ... My changes only impact the synchronous loops because it doesn't look like async run loops are supported for the [DesktopGL](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/5a75f402acf32fbed9db56a118e64ad7bac1a567\/MonoGame.Framework\/Platform\/SDL\/SDLGamePlatform.cs#L258) and [WindowsDX](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/5a75f402acf32fbed9db56a118e64ad7bac1a567\/MonoGame.Framework\/Platform\/Windows\/WinFormsGamePlatform.cs#L68) platforms.\r\n\r\nAs I mentioned in the PR I'm not sure if that's exactly how we should go about this, but I'm very happy to discuss and modify in order to get this to an acceptable state. Thanks!","I am in the same situation: I would like to intercept window closing under Desktop GL. \ud83d\ude42\r\n\r\nAre there any news on this issue? I would also be happy to get any tip regarding a workaround! \ud83d\ude38"],"labels":["Feature Request","Windowing"]},{"title":"Wrong timing after Alt-tabbing from fullscreen and back (WindowsDX)","body":"Hello, I encountered a weird issue in the latest develop version of MG - WindowsDX.\r\n\r\nWhen I run the game in fullscreen mode, it originally works properly, but when I alt-tab out of the game and return back, I noticed the animations are jerky, even though the framerate was consistent (60FPS; I use IsFixedTimeStep = false, SynchronizeWithVerticalRetrace = true).\r\n\r\nSo I logged the time increments (gameTime.ElapsedGameTime.Milliseconds) and I'm getting strange results. Before alt-tab, I'm getting consistent increments of approx 16 milliseconds, but after returning to fullscreen mode, the increments are all over the place (31, 1, 31, 1, 31, 2, 29, 3, 36, 10, 3, 29, 2, 31, 1, 30).\r\n\r\nDoes anyone have any idea what could be the cause? I found a similar issue discussed in [this old forum thread](http:\/\/community.monogame.net\/t\/fullscreen-non-fullscreen-issues\/7963), but without any resolution.\r\n\r\n\r\n","comments":["I created a [simple project](http:\/\/dead-code.org\/misc\/fullscreen_test.zip ) exhibiting the behavior. It displays current frame time, and previous odd and even frame times. It also logs frame times to %appdata%\\fullscreen_test\\timing.txt.\r\n\r\nI tested on two computers so far and it's 100% reproducible. Before Alt-tab, frame times are more or less constantly 16ms, after Alt-tab, frame times start fluctuating wildly.\r\n\r\nInterestingly, the graphics debugging view in VS displays frame time of 16ms all the time. So I don't know if it's DX issue or timing issue...","Seems like Vsync gets messed up somehow... I wonder if we can work around the issue by disabling and re-enabling it after restoring the window.","I think the problem is that SetHardwareFullscreen() is actually called multiple times (one call triggers another). I somewhat [fixed the issue](https:\/\/github.com\/MnemonicWME\/MonoGame\/commit\/8c8acc51a22bcf4e0ed0a454046a2a32d804a227) by not calling SetHardwareFullscreen directly in Window.OnResize, but rather forcing UpdateBackBufferSize to always resize buffers.\r\n\r\nThat fixes the issue, but 1) I don't really know what I'm doing 2) It might affect other platforms (although WindowsGL seems to work)."],"labels":["Windows","Windowing"]},{"title":"Full sampler state defined in shader is applied, not only set properties","body":"<!-- Write your issue below -->\r\n\r\nSetting `GraphicsDevice.SamplerStates[0] = SamplerState.PointClamp;` results in point filtering applied in XNA 4.0 PC, but the same code\/shader result in linear filtering in Desktop GL.\r\n\r\nTo reproduce the bug:\r\n\r\n1. Download https:\/\/drive.google.com\/file\/d\/1U-JU5iEKw-fEAXOLDuqDxcjxIDhvTKkU\/view?usp=sharing\r\n1. Unzip the file to a Windows 10 machine (XNA will be required to compare XNA behavior)\r\n1. Open XnaCompare.sln (located in the root of the unzipped folder)\r\n1. Run the project\r\n1. Observe that the rendered quad has point filtering (hard edges between pixels) ![image](https:\/\/user-images.githubusercontent.com\/729631\/43369165-49a6a04e-9326-11e8-9c5a-5ae43963d7c0.png)\r\n1. Open DesktopGlShaderTest\/DesktopGlShaderTest.sln\r\n1. Run the project\r\n1. Observe that the rendered quad has linear filtering (smoothed pixels) ![image](https:\/\/user-images.githubusercontent.com\/729631\/43369175-84e560f0-9326-11e8-949c-dfcf3ae2b652.png)\r\n\r\nNote: Both projects use the same shader file, but the shader file is added directly as an XNB file to the DesktopGL project (due to a missing feature of linked files in the content builder). I did try building the shader with the latest dev build of the content pipeline tool - I don't know if the bug is caused by the pipeline tool or MonoGame runtime.\r\n\r\n<!-- System stats -->\r\n\r\nThis was tested on a Windows 10 machine with the following hardware:\r\n * i7-8550U CPU @ 1.80GHz\r\n * 16.0 GB ram\r\n * 64 bit OS\r\n * NVIDIA GeForce 940MX\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.0.1657\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL, compared against Microsoft XNA 4.0\r\n","comments":["I came across something that is probably related to this bug, calling:\r\n```c#\r\n_spriteBatch.Begin(samplerState:SamplerState.PointClamp);\r\n_spriteBatch.End();\r\n```\r\n\r\nhas an effect on how all future shaders get rendered..","Turns out, some other stuff leak from `SpriteBatch` besides `PointClamp`, yikes.","For what it's worth, in this case I'm not using SpriteBatch anywhere in the project, so...maybe not the same bug?","@cra0zy SpriteBatch is not supposed to reset graphics state after ending a batch. It doesn't do that in XNA either.","> @cra0zy SpriteBatch is not supposed to reset graphics state after ending a batch. It doesn't do that in XNA either.\r\n\r\nInteresting, I never realized that... well at least that explains why the \"workaround\" is working.","I couldn't reproduce the issue. What's likely happening here is the sampler is assigned to another slot than what's expected.\r\n\r\nThat said the order of samplers sometimes gets messed up when you have multiple of them in an effect. I don't think that issue is actually logged so I'll open a new one.","Nope, I was wrong. The issue is actually that we override the sampler state with whatever sampler state is set in the effect file (if any). While XNA only overrides the properties that are set from the effect file, we also override the others with default values. Note that this issue occurs on both DX and DesktopGL.","Thanks for looking into that @Jjagg  . I was concerned when you said you couldn't reproduce it, as I have a linked project that reproduces it for me.","I tested first with a new project which did not set a sampler state in the effect file.","I know this is late, but I had a similar issue and I seemed to fix it by rendering everything to a separate target first."],"labels":["MGFX"]},{"title":"Vertex Texture Fetch not implemented on OpenGL Platform","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nVertex Texture Fetch is supported on the DirectX platform, and in XNA 4.0. It is not supported on the OpenGL Platform, meaning features that require Vertex Texture Fetch to be implemented cannot be ported to the Mac and Linux platforms. \r\n\r\nOriginally raised here: http:\/\/community.monogame.net\/t\/vertex-texture-fetch-in-an-opengl-project\/10481\/4\r\n\r\n**To reproduce:**\r\n\r\nAttempt to use the tex2d() or tex2dlod() function to retrieve texture data in any vertex shader on the OpenGL platform.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.6\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["Noting that this issue is still present in Monogame 3.7.1.","Yes, when it does get implemented you can expect to see a discussion here.","Wanted to add a usage case for this.\r\n\r\nThis would be a big speed gain for particle instancing as you could offload a lot of processing from the cpu to the gpu were it could speed things up considerably.","#7352  claims to have fixed this in max's pull request for geometry shader support.\r\n\r\nRelated topic here.\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/issues\/4567"],"labels":["MGFX","OpenGL"]},{"title":"Support text compositions","body":"MonoGame does not support getting IMM compositions. We should expose an API so games can render these compositions instead of having the OS show an ugly window for it.\r\n\r\nWe should discuss the API before talking about the implementation. The API should support starting and stopping composited input and getting the current composition (possibly using an event similar to `TextInput`). `TextInput` should be invoked when a composition is finished.\r\n\r\n### API Suggestion\r\n\r\nBelow methods and event will be exposed in `GameWindow`.\r\n\r\n```\r\n\/\/\/ <summary>\r\n\/\/\/ Enable the system IMM service to support composited character input.\r\n\/\/\/ This should be called when you expect text input from a user and you support languages\r\n\/\/\/ that require an IME (Input Method Editor).\r\n\/\/\/ <\/summary>\r\n\/\/\/ <seealso cref=\"EndTextComposition\" \/>\r\n\/\/\/ <seealso cref=\"TextComposition\" \/>\r\nvoid StartTextComposition();\r\n\r\n\/\/\/ <summary>\r\n\/\/\/ Stop the system IMM service.\r\n\/\/\/ <\/summary>\r\n\/\/\/ <seealso cref=\"StartTextComposition\" \/>\r\n\/\/\/ <seealso cref=\"TextComposition\" \/>\r\nvoid StopTextComposition();\r\n\r\n\/\/\/ <summary>\r\n\/\/\/ Invoked when the IMM service is enabled and a character composition is changed.\r\n\/\/\/ <\/summary>\r\n\/\/\/ <seealso cref=\"StartTextComposition\" \/>\r\n\/\/\/ <seealso cref=\"EndTextComposition\" \/>\r\nevent EventHandler<TextCompositionEventArgs> TextComposition;\r\n\r\n\/\/\/ <summary>\r\n\/\/\/ Arguments for the <see cref=\"GameWindow.TextComposition\" \/> event.\r\n\/\/\/ <\/summary>\r\nclass TextCompositionEventArgs : EventArgs\r\n{\r\n    \/\/\/ <summary>\r\n    \/\/\/ The full string as it's composited by the IMM.\r\n    \/\/\/ <\/summary>    \r\n    public string CompositedText { get; }\r\n\r\n    \/\/\/ <summary>\r\n    \/\/\/ The position of the cursor inside the composited string.\r\n    \/\/\/ <\/summary>    \r\n    public int CursorPosition { get; }\r\n\r\n    \/\/\/ <summary>\r\n    \/\/\/ The suggested alternative texts for the composition.\r\n    \/\/\/ <\/summary>    \r\n    public string[] CandidateList { get; }\r\n}\r\n```\r\n\r\nEDITS:\r\n- Added `TextCompositionEventArgs.CandidateList`\r\n  To render an IME you at least need a candidate list.\r\n\r\n### Links\r\n\r\nForum post: http:\/\/community.monogame.net\/t\/i-cant-use-ime-for-chinese-input\/10737\r\nMicrosoft docs: https:\/\/docs.microsoft.com\/en-us\/windows\/desktop\/DxTechArts\/using-an-input-method-editor-in-a-game\r\nSDL docs: https:\/\/wiki.libsdl.org\/Tutorials\/TextInput\r\n\r\n### Implementation notes\r\n\r\n- The API should be exposed in [`GameWindow`](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/GameWindow.cs)\r\n- The Windows implementation needs to handle certain window messages in the [`WndProc`](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Windows\/WinFormsGameForm.cs#L72)\r\n- The SDL implementation (DesktopGL) handles events in [`SDLGamePlatform`](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/SDL\/SDLGamePlatform.cs#L116).\r\n\r\n### Questions\r\n\r\n- What about mobile and consoles? Do they support IME? How?","comments":["cc @tomspilman @cra0zy @dellis1972 because this adds API.","All consoles\/mobiles have their own native IME. Most of the (console) ports have some wrapper support for it, but nothing that would be candidate for a high level cross-platform API.\r\n\r\nYour API suggestion looks to be solid and it would be cool to convert all targets to it.\r\n\r\nThere's a private ```UpdateIME()``` that should be called anytime the IME is active, that would help some IME API that require active polling of the dialog state.\r\n\r\nNot sure if they all support cursor positioning, and most of them have specific parameters (such as the supported character set, modes, screen positioning, etc.), but I believe that a generic IME would do the trick for most inputing tasks.\r\n\r\nIf that may help, I can probably list and\/or figure out what would be the broadest param set to support.","#6348 ","Looks like SDL wants to render its own IME, so not sure about the low-levelness of the suggested API now. From what I gather, you can't get a candidate list on SDL and must either let the OS handle the IME or let SDL render it. Docs are limited, so hard to figure this stuff out.","I am totally ignorant of what IMM or IME or whatever it is called is.  I assume it is \"show a on screen keyboard or input method of some sort\".\r\n\r\nHow is this different from `KeyboardInput.Show` which we already have?\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Input\/KeyboardInput.cs#L24\r\n","@tomspilman Very, it's not about showing keyboard, but about showing what words you can write (candidate list) based on your input.\r\n\r\nIMM\r\nhttps:\/\/docs.microsoft.com\/en-us\/windows\/desktop\/intl\/about-input-method-manager\r\n\r\n@Jjagg Be careful with implementation. Windows have different ways for the same thing, so for example Windows builtin chinese will not work with IMM and it's crap. I would suggest to make support for https:\/\/pinyin.sogou.com and be ready for some crazy hacks like hidden input text field out of the screen.","https:\/\/github.com\/xenko3d\/xenko I tested the demo project, it handles the IME. Xenko may be used as reference.","Here is the SDL IME implementation: https:\/\/github.com\/xenko3d\/xenko\/blob\/master\/sources\/engine\/Xenko.Input\/SDL\/KeyboardSDL.cs","After few months experience with MG and game developing, I found MG definitely need to provide a solid IME\/IMM API (like other commercial Game Engines did) for the games that have a textbox and target users with CJK languages.\r\n\r\nAnd after some experiences on https:\/\/github.com\/ryancheung\/MonoGame.IMEHelper, I'm gonna make a PR to fix all the IME hassle in MG.\r\n\r\nThe new IME APIs suggested by me:\r\n\r\nA `IImeService` is added `MonoGame.Framework\/Input` folder. This service is going to provide text input or composition APIs for SDL2, WindowsDX, Android and iOS platforms. More platforms like (UAP, PlayStation 4, Nintendo Switch etc.) could be added in the future by someone, if the platform has the support.\r\n\r\n```\r\npublic interface IImeService\r\n{\r\n    \/\/\/ <summary>\r\n    \/\/\/ Enable the system IMM service to support composited character input.\r\n    \/\/\/ This should be called when you expect text input from a user and you support languages\r\n    \/\/\/ that require an IME (Input Method Editor).\r\n    \/\/\/ <\/summary>\r\n    void StartTextInput();\r\n\r\n    \/\/\/ <summary>\r\n    \/\/\/ Stop the system IMM service.\r\n    \/\/\/ <\/summary>\r\n    void StopTextInput();\r\n\r\n    \/\/\/ <summary>\r\n    \/\/\/ Show the Ime Candidate window renderer by the OS.\r\n    \/\/\/ In SDL2 platform it's always true since there's no API to get candidate texts in SDL2.\r\n    \/\/\/ In WindowsDX platform, it's possible to choose show candiate window renderer by the OS or render it yourself.\r\n    \/\/\/ <\/summary>\r\n    bool ShowOSImeWindow { get; set; }\r\n\r\n    \/\/\/ <summary>\r\n    \/\/\/ Position Y of virtual keyboard, for mobile platforms has virtual keyboard.\r\n    \/\/\/ <\/summary>\r\n    int VirtualKeyboardHeight { get; }\r\n\r\n    \/\/\/ <summary>\r\n    \/\/\/ Update the Ime service. For instance, stop the text input when clicking on the other\r\n    \/\/\/ screen area than the virtual keyboard poped up.\r\n    \/\/\/ <\/summary>\r\n    void Update(GameTime gameTime);\r\n\r\n    \/\/\/ <summary>\r\n    \/\/\/ Return true if text input enabled else false;\r\n    \/\/\/ <\/summary>\r\n    bool IsTextInputActive();\r\n\r\n    \/\/\/ <summary>\r\n    \/\/\/ Set the position of Candiate Window rendered by the OS, supported platforms includes SDL and WindowsDX.\r\n    \/\/\/ In SDL2 there's no API to get the candiate list. We have to use the candidate windows provided by the OS.\r\n    \/\/\/ But, in windows SDL2 has bug that not showing the candidate window of the OS, so SDL2\r\n    \/\/\/ platform was suggested not to use in Windows, use WindowsDX instead.\r\n    \/\/\/ <\/summary>\r\n    void SetTextInputRect(Rectangle rect);\r\n\r\n    \/\/\/ <summary>\r\n    \/\/\/ Invoked when the IMM service is enabled and a character composition is changed.\r\n    \/\/\/ <\/summary>\r\n    event EventHandler<TextCompositionEventArgs> TextComposition;\r\n\r\n    \/\/\/ <summary>\r\n    \/\/\/ Invoked when the IMM service generates a composition result.\r\n    \/\/\/ <\/summary>\r\n    event EventHandler<TextInputEventArgs> TextInput;\r\n}\r\n```\r\n\r\nThe `TextCompositionEventArgs` class:\r\n\r\n```\r\n    \/\/\/ <summary>\r\n    \/\/\/ Arguments for the <see cref=\"IImeService.TextComposition\" \/> event.\r\n    \/\/\/ <\/summary>\r\n    public class TextCompositionEventArgs : EventArgs\r\n    {\r\n        \/\/\/ <summary>\r\n        \/\/\/ The full string as it's composited by the IMM.\r\n        \/\/\/ <\/summary>    \r\n        public string CompositionString { get; }\r\n\r\n        \/\/\/ <summary>\r\n        \/\/\/ The position of the cursor inside the composited string.\r\n        \/\/\/ <\/summary>    \r\n        public int CursorPosition { get; }\r\n\r\n        \/\/\/ <summary>\r\n        \/\/\/ The candidate text list for the composition.\r\n        \/\/\/ Note candidate properties are only valid in  WindowsDX(or UAP) platform.\r\n        \/\/\/ It could be empty if compsition string does not generates candidates.\r\n        \/\/\/ <\/summary>    \r\n        public string[] CandidateList { get; }\r\n\r\n        \/\/\/ <summary>\r\n        \/\/\/ First candidate index of current page.\r\n        \/\/\/ <\/summary>\r\n        public uint CandidatePageStart { get; }\r\n\r\n        \/\/\/ <summary>\r\n        \/\/\/ How many candidates should display per page.\r\n        \/\/\/ <\/summary>\r\n        public uint CandidatePageSize { get; }\r\n\r\n        \/\/\/ <summary>\r\n        \/\/\/ The selected candidate index.\r\n        \/\/\/ <\/summary>\r\n        public uint CandidateSelection { get; }\r\n    }\r\n```\r\n\r\nPlatform specific `IImeService` implementations I'm going to add:\r\n\r\n- WinFormsImeHandler.cs\r\n- SDLImeHandler.cs\r\n- AndroidImeHandler.cs\r\n- iOSImeHandler.cs\r\n\r\nSome notes on the Android\/iOS implementation:\r\n\r\nThe implementation of ImeHandler in Android or iOS is basiclly by creating a native invisible textbox (Android is `EditText`, iOS is `UIBackwardsTextField`) and then listening the text change events on them.\r\n\r\n@Jjagg @mrhelmut @harry-cpp  Could you give any review on this? ","@ryancheung From what I know of IME services I think that's a great API! \r\n\r\n@tomspilman This uses an interface to abstract across platforms, is that okay for you? IMO for new API we should go that route.\r\n\r\nOne thing I think we should watch out for is allocations. The event arg type can be a struct and we could either use an enumerable for the candidate list or pool the array.\r\n\r\ncc @harry-cpp @mrhelmut "],"labels":["Feature Request","Design","Help Wanted"]},{"title":"touch is delayed on bottom of screen on iOS","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nIf I try to check touches on the bottom in the corner of an iPhone 7 in portrait orientation (i.e. the tall screensize with 1334 pixels height) it detects it but with a delay of about 0.5 seconds. On our iPhone 5 with 1136 pixels it seems to work correct but we\u00b4ve heard from users that the problem exists on an iPhone SE (which has the same resolution) as well.\r\nYou can check it with that code:\r\n\r\n```\r\nusing System;\r\nusing Microsoft.Xna.Framework;\r\nusing Microsoft.Xna.Framework.Graphics;\r\nusing Microsoft.Xna.Framework.Input;\r\nusing Microsoft.Xna.Framework.Input.Touch;\r\n\r\nnamespace Touchtest\r\n{\r\n    \/\/\/ <summary>\r\n    \/\/\/ This is the main type for your game.\r\n    \/\/\/ <\/summary>\r\n    public class Game1 : Game\r\n    {\r\n        GraphicsDeviceManager graphics;\r\n        SpriteBatch spriteBatch;\r\n\r\n        int number;\r\n\r\n        public Game1()\r\n        {\r\n            graphics = new GraphicsDeviceManager(this);\r\n            Content.RootDirectory = \"Content\";\r\n            graphics.IsFullScreen = true;\r\n        }\r\n\r\n        \/\/\/ <summary>\r\n        \/\/\/ Allows the game to perform any initialization it needs to before starting to run.\r\n        \/\/\/ This is where it can query for any required services and load any non-graphic\r\n        \/\/\/ related content.  Calling base.Initialize will enumerate through any components\r\n        \/\/\/ and initialize them as well.\r\n        \/\/\/ <\/summary>\r\n        protected override void Initialize()\r\n        {\r\n            \/\/ TODO: Add your initialization logic here\r\n            base.Initialize();\r\n\r\n        }\r\n\r\n        \/\/\/ <summary>\r\n        \/\/\/ LoadContent will be called once per game and is the place to load\r\n        \/\/\/ all of your content.\r\n        \/\/\/ <\/summary>\r\n        protected override void LoadContent()\r\n        {\r\n            \/\/ Create a new SpriteBatch, which can be used to draw textures.\r\n            spriteBatch = new SpriteBatch(GraphicsDevice);\r\n\r\n            \/\/TODO: Use Content to load your game content here \r\n        }\r\n\r\n        \/\/\/ <summary>\r\n        \/\/\/ Allows the game to run logic such as updating the world,\r\n        \/\/\/ checking for collisions, gathering input, and playing audio.\r\n        \/\/\/ <\/summary>\r\n        \/\/\/ <param name=\"gameTime\">Provides a snapshot of timing values.<\/param>\r\n        protected override void Update(GameTime gameTime)\r\n        {\r\n   \r\n            number = 0;\r\n\r\n            TouchCollection touches = TouchPanel.GetState();\r\n\r\n            foreach (TouchLocation location in touches)\r\n            {\r\n                number = 1;\r\n            }\r\n\r\n                \/\/ TODO: Add your update logic here            \r\n\r\n                base.Update(gameTime);\r\n        }\r\n\r\n        \/\/\/ <summary>\r\n        \/\/\/ This is called when the game should draw itself.\r\n        \/\/\/ <\/summary>\r\n        \/\/\/ <param name=\"gameTime\">Provides a snapshot of timing values.<\/param>\r\n        protected override void Draw(GameTime gameTime)\r\n        {\r\n            if (number == 0) graphics.GraphicsDevice.Clear(Color.CornflowerBlue);\r\n            else graphics.GraphicsDevice.Clear(Color.Yellow);\r\n\r\n            \/\/TODO: Add your drawing code here\r\n\r\n            base.Draw(gameTime);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nif you touch somewhere in the middle of the screen everything works nicely. But if you touch on the lower part of the screen (i.E. the lower right it reacts just delayed.\r\n\r\nThat bug doesn\u00b4t occur on iPads for example.\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- iOS\r\n","comments":[],"labels":["iOS","Input"]},{"title":"Full-Screen on the XBox One is off","body":"i'm having troubles displaying the game full-screen on the Xbox One, from a fast inspection it seems like the game uses ApplicationView VisibleBounds to size the gamewindow, but on xbox this leaves a huge amount (like 1\/5th of the screen) of white space around the corners. Setting this to CoreWindow Bounds fixes the problem on the XBox, but is probably wrong on Windows, where visiblebounds take into account other factors like the window's titlebar and chrome resize borders. \r\nI would suggest the same approach used in the App.appx, where we identify the platform and choose the bounds accordingly.\r\nHere is a modified version of the Initialize method that implements the fix. I tested this on Xbox and Windows and seems to work fine.\r\n\r\n\r\n        public void Initialize(CoreWindow coreWindow, UIElement inputElement, TouchQueue touchQueue)\r\n        {\r\n            _coreWindow = coreWindow;\r\n            _inputEvents = new InputEvents(_coreWindow, inputElement, touchQueue);\r\n\r\n            _dinfo = DisplayInformation.GetForCurrentView();\r\n            _appView = ApplicationView.GetForCurrentView();\r\n\r\n            \/\/ Set a min size that is reasonable knowing someone might try\r\n            \/\/ to use some old school resolution like 640x480.\r\n            var minSize = new Windows.Foundation.Size(640 \/ _dinfo.RawPixelsPerViewPixel, 480 \/ _dinfo.RawPixelsPerViewPixel);\r\n            _appView.SetPreferredMinSize(minSize);\r\n\r\n            _orientation = ToOrientation(_dinfo.CurrentOrientation);\r\n            _dinfo.OrientationChanged += DisplayProperties_OrientationChanged;\r\n\r\n            _coreWindow.SizeChanged += Window_SizeChanged;\r\n\r\n            _coreWindow.Closed += Window_Closed;\r\n            _coreWindow.Activated += Window_FocusChanged;\r\n            _coreWindow.CharacterReceived += Window_CharacterReceived;\r\n\r\n            SystemNavigationManager.GetForCurrentView().BackRequested += BackRequested;\r\n            if(IsXbox())\r\n                SetViewBounds(_coreWindow.Bounds.Width, _coreWindow.Bounds.Height);\r\n            else\r\n                SetViewBounds(ApplicationView.GetForCurrentView().VisibleBounds.Width, ApplicationView.GetForCurrentView().VisibleBounds.Height);\r\n\r\n            SetCursor(false);\r\n\r\n        }\r\n\r\n        static string deviceFamily;\r\n        \/\/\/ <summary>\r\n        \/\/\/ Detection code in Windows 10 to identify the platform it is being run on\r\n        \/\/\/ This function returns true if the project is running on an XboxOne\r\n        \/\/\/ <\/summary>\r\n        public static bool IsXbox()\r\n        {\r\n            \/\/API check to ensure the \"RequiresPointerMode\" property exists, ensuring project is running on build 14393 or later\r\n            if (Windows.Foundation.Metadata.ApiInformation.IsPropertyPresent(\"Windows.UI.Xaml.Application\", \"RequiresPointerMode\"))\r\n            {\r\n                if (deviceFamily == null)\r\n                    deviceFamily = Windows.System.Profile.AnalyticsInfo.VersionInfo.DeviceFamily;\r\n\r\n                return deviceFamily == \"Windows.Xbox\";\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- XBox One\r\n\r\n#### What MonoGame platform are you using:\r\nWindowsUWP","comments":["> but on xbox this leaves a huge amount (like 1\/5th of the screen) of white space around the corner\r\n\r\nIs this occurring under our UWP template project?  Which one?  The XAML one or the CoreWindow one?","Hmmm, I'll investigate if this happens with the template project as well and get back to you asap.","As there was no follow up, and I did not have any issues with this, closing.","it\u00b4s still occuring under the UWP-XAML-template even on monogame 3.7.0.1708. I used to use an older version of monogame where the problem didn\u00b4t exists but don\u00b4t really know which one that was.","Sorry but this need to be reopened. I recently installed the templates and as @sprakelsoft said, the xaml template and 3.7.0.1708 suffers from this problem on xbox one. \r\nEdit: tested the 3.7.1 and it suffers from the same problem.","I am experiencing this issue using 3.8.0.320. My game is designed to run at 720P. I relied on Monogame (XNA in the past) to upscale from 720P to the TV's resolution by setting fullscreen to true.\r\n\r\nWhen I try setting fullscreen mode in LoadContent to true as below, it no longer upscales to the size of the TV screen. (I'm not sure which version this was broken in):\r\n\r\n```CSharp\r\nprotected override void LoadContent()\r\n{\r\n    graphics.IsFullScreen = true;\r\n    graphics.PreferredBackBufferWidth = 1280;\r\n    graphics.PreferredBackBufferHeight = 720;\r\n\r\n    graphics.ApplyChanges();\r\n}\r\n```\r\n\r\nHowever, I was able to work around this issue by continuously telling the game to run in fullscreen mode for the first 100 milliseconds of gameplay. After the first 100 milliseconds, the setting seems to hold and remain in full screen for the rest of the gameplay (I haven't extensively tested this). This produces the intended affect of up-scaling from 720P to 1080P and filling the TV screen.\r\n\r\n```CSharp\r\n\r\nprotected override void Update(GameTime gameTime)\r\n{\r\n    \/\/ Continuously force the game to set fullscreen for the first 100 milliseconds\r\n    if (gameTime.TotalGameTime.TotalSeconds < 0.1)\r\n    {\r\n        graphics.IsFullScreen = true;\r\n\r\n        graphics.PreferredBackBufferWidth = 1280;\r\n        graphics.PreferredBackBufferHeight = 720;\r\n\r\n        graphics.ApplyChanges();\r\n    }\r\n}\r\n```\r\n\r\nI did try setting fullscreen for the first 3 cycles of the game loop, but this didn't hold. So something seems to be happening between the first 3 cycles and before the game has been running for a full second to force it out of fullscreen. Although MonoGame will still report the game as fullscreen. After the elapsed time, the fullscreen will hold.","This issue is not exclusive to Xbox UWP, but also affects Windows UWP.\r\n\r\nI confirm that graphics device changes are not properly applied if called from ```Game.Initialize``` or ```Game.LoadContent``` (my guess is that they are overridden by their default value because of a lazy device init; there's also something likely going on with how the resizing event is handled).\r\n\r\n(We worked around this in pretty much the same way by applying the changes in the Update loop instead. However we figured that doing this on the first frame is enough. We're using the CoreApp setup.)\r\n\r\nI don't have the time to look into this further.","I had two fixes related to UWP backbuffer scaling, I don't know if they are related to this particular problem but here they are in case anyone want to test things out.\r\nhttps:\/\/github.com\/nkast\/MonoGame\/commit\/79ba7b9eb8c184525d66f92ba42735ff55bc904d\r\nhttps:\/\/github.com\/nkast\/MonoGame\/commit\/5f45edd381731ad454a767daddb1112f875b9ad7\r\n "],"labels":["Windows 10 UWP","Help Wanted"]},{"title":"Setting a shader array element does not work when it's an array of matrices","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nThe following does not work when the element in question is an array of matrices:\r\n\r\n`_effect.Parameters[\"myMatrices\"].Elements[x].SetValue(MyMatrix);\r\n`\r\n\r\nThe value does not get set in the shader.\r\n\r\nHowever, the same code seems to work when it's an array of int's or floats. E.g. the following works fine:\r\n\r\n```\r\n_effect.Parameters[\"myInts\"].Elements[x].SetValue(MyInt);\r\n\r\n_effect.Parameters[\"myFloats\"].Elements[x].SetValue(MyFloat);\r\n\r\n```\r\nI can work around the problem by creating an array of matrices to temporary hold the values and then setting that using:\r\n\r\n`_effect.Parameters[\"myMatrices\"].SetValue(MyMatrices);\r\n`\r\n\r\nNote, this problem occurs on both DirectX and OpenGL.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n- DirectX\r\n","comments":["I just created a new Windows project with a simple effect\r\n### TestEffect.fx\r\n```hlsl\r\n#if OPENGL\r\n\t#define SV_POSITION POSITION\r\n\t#define VS_SHADERMODEL vs_3_0\r\n\t#define PS_SHADERMODEL ps_3_0\r\n#else\r\n\t#define VS_SHADERMODEL vs_4_0_level_9_1\r\n\t#define PS_SHADERMODEL ps_4_0_level_9_1\r\n#endif\r\n\r\nmatrix WorldViewProjection;\r\n\r\nstruct VertexShaderInput\r\n{\r\n\tfloat4 Position : POSITION0;\r\n\tfloat4 Color : COLOR0;\r\n};\r\n\r\nstruct VertexShaderOutput\r\n{\r\n\tfloat4 Position : SV_POSITION;\r\n\tfloat4 Color : COLOR0;\r\n};\r\n\r\nmatrix myMatrices[2];\r\n\r\nVertexShaderOutput MainVS(in VertexShaderInput input)\r\n{\r\n\tVertexShaderOutput output = (VertexShaderOutput)0;\r\n\r\n\toutput.Position = mul(input.Position, WorldViewProjection);\r\n\toutput.Color = input.Color;\r\n\r\n\treturn output;\r\n}\r\n\r\nfloat4 MainPS(VertexShaderOutput input) : COLOR\r\n{\r\n    const float4 UnexpectedColor = {1, 0, 0, 1};\r\n    \r\n    if (myMatrices[1][0][0] == 2) {\r\n        return input.Color;\r\n    }\r\n\t\r\n    return UnexpectedColor;\r\n}\r\n\r\ntechnique BasicColorDrawing\r\n{\r\n\tpass P0\r\n\t{\r\n\t\tVertexShader = compile VS_SHADERMODEL MainVS();\r\n\t\tPixelShader = compile PS_SHADERMODEL MainPS();\r\n\t}\r\n};\r\n```\r\n\r\nI have the following drawing code using the effect.\r\n### Game1.cs\r\n```csharp\r\n        protected override void Draw(GameTime gameTime)\r\n        {\r\n            GraphicsDevice.Clear(Color.CornflowerBlue);\r\n\r\n            VertexPositionColor[] triangleVerts =\r\n            {\r\n                new VertexPositionColor\r\n                {\r\n                    Color = Color.Red,\r\n                    Position = { X = -100, Y = -100, Z = 0 }\r\n                },\r\n                new VertexPositionColor\r\n                {\r\n                    Color = Color.Green,\r\n                    Position = { X = 0, Y = 100, Z = 0 }\r\n                },\r\n                new VertexPositionColor\r\n                {\r\n                    Color = Color.Blue,\r\n                    Position = { X = 100, Y = -100, Z = 0 }\r\n                }\r\n            };\r\n\r\n            var customMatrix = Matrix.Identity;\r\n            customMatrix[0, 0] = 2;  \/\/ Change this to 1 and the triangle will be Red\r\n\r\n            var testEffect = Content.Load<Effect>(\"TestEffect\");\r\n            testEffect.Parameters[\"WorldViewProjection\"].SetValue(Matrix.CreateOrthographic(GraphicsDevice.Viewport.Width, GraphicsDevice.Viewport.Height, -10, 10));\r\n            testEffect.Parameters[\"myMatrices\"].Elements[1].SetValue(customMatrix);\r\n\r\n            foreach (var pass in testEffect.CurrentTechnique.Passes)\r\n            {\r\n                pass.Apply();\r\n                GraphicsDevice.DrawUserPrimitives(PrimitiveType.TriangleList, triangleVerts, 0, 1);\r\n            }\r\n\r\n            base.Draw(gameTime);\r\n        }\r\n```\r\n\r\nIt seems like changing the first item in the matrix is seen by the shader.  Can you reproduce the issue in a simple project?"],"labels":["MGFX","Help Wanted"]},{"title":"Dynamic font support","body":"I mean, at runtime,\r\nload a font file, read some glyhps and render them into a texture.\r\nthen use it like a normal SpriteFont.\r\nThis feature is very important for asian users. because we use about 2000 common characters and a large amount of rare characters.\r\nPut then into a xnb file is almost impossible (takes very long time to build and gets very large xnb file).\r\nI have searched on the internet but no usable solution yet.","comments":["I recently implemented something like this in my game, Final Days. What I did was a bit hacky, but it works. Unfortunately, I can't submit what I've done to MonoGame as it's very much a bespoke solution for my game.\r\n\r\nI did a fair bit of research into this to try and find a good solution. But one of my requirements was to have font fallback (i.e. if the font you're using doesn't have the glyph you need, then it falls back to another similar font which does have that glyph). Unfortunately, this is easier said than done. The most practical solution I came up with was to use Windows GDI+ to render the glyphs. But this has it's own issues and I definitely came across a few quirks and inconsistencies. It obviously also only works with Windows.\r\n\r\nBut once the glyph rendering is taken care of, the rest was fairly straightforward (although it was a bit of work). Basically whenever I needed to display missing glyphs, I'd render those glyphs in the background and update the SpriteFont to include them.\r\n\r\nIf you'd like more details on how I did this, then I'd be happy to share them and try answer any questions.","> It obviously also only works with Windows.\r\n\r\nThat is the biggest issue.  We need an portable font rasterizer we can call at runtime.  Platform specific ones will not work as they all produce different results... meaning your fonts look different on different platforms.  It has to be non-GPL so we can use it on consoles as well.\r\n\r\nOnce we have a solution for that the rest is all pretty easy.","> That is the biggest issue. We need an portable font rasterizer we can call at runtime. Platform specific ones will not work as they all produce different results... meaning your fonts look different on different platforms. It has to be non-GPL so we can use it on consoles as well.\r\n\r\nAll I came across was [Cairo](https:\/\/cairographics.org\/). There's a C# wrapper for it called [CairoSharp](https:\/\/github.com\/zwcloud\/CairoSharp). I don't know if it would be suitable for MonoGame though. The licence is LGPL, but apparently it can also be used under the Mozilla Public Licence (MPL). Not sure if that helps? CairoSharp seems to only have LGPL though.","Cairo is licensed under LGPL or MPL, CairoSharp on the other hand is LGPL only. I don't think its a good idea to use a native library for this purpose, its way better if something like [Typography](https:\/\/github.com\/LayoutFarm\/Typography) could fit our purposes.\r\n\r\nOn a side note, I'm maintaining a fork of gtk-sharp [here](https:\/\/github.com\/GtkSharp\/GtkSharp), which also includes CairoSharp which uses delegate invoking of functions instead of dllmap so it should be better than that fork, tho it probably misses a few functions compared to it.","Typography looks super cool for being a pure C# solution. Cairo does more than just font rasterizing, and I would be more favorable to a lib that does just what we need here.\r\n\r\nI would be pretty curious about Typography performances.\r\n\r\nThere's a desperate need for a runtime glyph rasterizer in MonoGame. Localizing is such a pain (we ended up creating bitmap font hacks that use only the useful glyphs, but it can get pretty quickly unmanageable with higher word count).\r\n\r\nI hear a lot about bmfont from other gamedevs: http:\/\/www.angelcode.com\/products\/bmfont\/\r\nI haven't looked into it, but it's open source and maybe the rasterizer can be used separately.\r\n\r\nstb_truetype is also worth mentioning but it is known to be super slow.\r\n\r\nAlso, +100 to anything supporting emojis.","I did come across Typography in the past and it definitely looked promising. But it didn't seem to do font fallback, so I didn't end up going further with it.\r\n\r\nI only brought up Cairo because it was the only cross-platform open source library I came across which seemed to handle font fallback.\r\n\r\nBut font fallback was just something I specifically needed for my requirements. I'm not sure if it would be required for MonoGame as well. But it was definitely very handy not having to worry about glyphs that were missing from the font you were using.\r\n\r\nIf you don't need font fallback though, it makes things a LOT easier and there are a few options about (e.g. SharpFont which MonoGame already uses in the Content Pipeline).","> Also, +100 to anything supporting emojis.\r\n\r\nEmoji support is tricky as SpriteFont only supports UCS-2 characters (i.e. Unicode U+0000 to U+FFFF), and emojis are outside of this range. I did experiment with a workaround which remapped Unicode characters outside of this range into the private use area (U+E000 to U+F8FF). It worked pretty well, but unfortunately the GDI+ renderer I ended up using only supported UCS-2 as well \ud83d\ude12","> But font fallback was just something I specifically needed for my requirements. I'm not sure if it would be required for MonoGame as well. But it was definitely very handy not having to worry about glyphs that were missing from the font you were using.\r\n\r\nWe could do font fallback by specifying multiple fonts like you do in CSS.  Then worst case we automatically pick a system font if all else fails.","> e.g. SharpFont which MonoGame already uses in the Content Pipeline).\r\n\r\nWe could use SharpFont\/FreeType at runtime, but i would love to try some fully managed libraries first. \r\n And if we find a good runtime font solution we like we would convert the pipeline to use it for offline rendering as well.\r\n","@tomspilman As I mentioned above, https:\/\/github.com\/LayoutFarm\/Typography might be a good solution.","> We could do font fallback by specifying multiple fonts like you do in CSS. Then worst case we automatically pick a system font if all else fails.\r\n\r\nFor sure. This was something I was seriously considering as well, but shied away from because it meant including multiple font files. But ultimately this solution does give you more control over how glyphs are rendered. And it may also be the only choice on some platforms which may not even provide a font fallback mechanism.","As another managed alternative, there's [SixLabors\/Fonts](https:\/\/github.com\/SixLabors\/Fonts). ","> As another managed alternative, there's SixLabors\/Fonts.\r\n\r\nNice!","Someone in this thread mentioned Cairo for run-time font rendering. I can vouch for it. I used to use it in my game back when user-interface skinning was a thing and we **needed** user-selected fonts that could be rendered at runtime. If you write the actual rendering code in C++ - i.e, create a function for measuring text and one for rendering to a bitmap in memory - and P\/invoke into that middle-man C++ library, it's very fast.\r\n\r\nThe issues are that you have to compile that C++ middle-man for all the different platforms you need. And you need to make sure that Cairo (and Pango which we also used) are supported on those platforms.\r\n\r\nBut if you jump over that hurdle, dynamic `SpriteFont` loading directly from TrueType font files or even font families installed to the system becomes real easy (The latter at least, not entirely sure about the former).","I have a working Android version of font replacement, redraw fonts within current bounds, to replace standard chars with color emojis. It adds about 5 seconds to the load time.  I am working on a generalized version of this, but you can not mix color fonts with regular fonts.  So far this solution will only work for Android and Windows platforms.  If someone is willing to work on the ios\/other platforms specific code, we could develop a standardized API for runtime fonts.","Another solution would be to use StbSharp\/StbTrueType.\r\nRight now, it's MonoGame Sample demonstrates how to dynamically create a SpriteFont: https:\/\/github.com\/rds1983\/StbSharp\/blob\/c3220a9dae71fd3491d7b5bf8bfe0d1f82f08ea8\/Samples\/StbSharp.MonoGame.Test\/Game1.cs#L44\r\n![image](https:\/\/user-images.githubusercontent.com\/1057289\/47949817-07869780-df7c-11e8-94d1-240dcaef6b73.png)\r\n","That's very interesting! StbSharp being a pure C# library without any native dependencies, it's a very good candidate for all platforms.\r\n\r\nYour example is quite cool to bake fonts at runtime given a character set. I might very well switch to StbSharp for our own projects.\r\n\r\nI have been playing around with Typography, SixLabors\/Font, and Cairo lately, and they all are cumbersome to use and with other native dependencies (and most of them use System.Drawing, which is a pain cross-platform wise).\r\n\r\nSo far, I'm all in for StbSharp.","It has downside - the font baker API(which is wrapper over stb_truetype) is very simple: https:\/\/github.com\/rds1983\/StbSharp\/blob\/master\/StbSharp\/FontBaker.cs\r\nI've made it just to check whether the thing works.","I'm going to give it a try, checking performance and font compatibility.","There is one more downside, its unusable on the web port of MonoGame.","Because of reflection and\/or unsafe code?","btw, there's another stb_truetype port to C# made by @KonajuGames: https:\/\/github.com\/KonajuGames\/TrueTypeSharp\/tree\/master\/TrueTypeSharp\r\nI haven't reviewed it throughfully. But from the glance it doesnt have unsafe code.","Reflection works, unsafe code does not.\r\n\r\nOn a related note I finally managed to fix up content manager for web, its now as fast as other platforms.","@KonajuGames 's port \/ the original TrueTypeSharp doesn't have unsafe code, but is missing 4 years of improvements. I wonder if an updated version would be too much work.\r\n\r\nIt would be cool to have this working on the web and on consoles.","I've been playing around with the Stb.\r\n\r\nKonaju's port has some issues and the original TrueTypeSharp is outdated (and using a less clean rasterizer). Bringing it on par with the latest Stb_truetype sounds like a lot of work since parts of the library went over redesign \/ refactoring.\r\n\r\nI started to try removing the unsafe parts from StbSharp, which sounds very doable but is a lot of work to make sure that everything works as expected.\r\n\r\n@rds1983 Do you think it would be possible to add an option to Sichem to produce safe code? The FakePtr from TrueTypeSharp looks like a solution (and is of course very garbage prone, unless it would manage its own memory pool).","@mrhelmut \r\n> Do you think it would be possible to add an option to Sichem to produce safe code? The FakePtr from TrueTypeSharp looks like a solution (and is of course very garbage prone, unless it would manage its own memory pool).\r\n\r\nThat's awesome idea!\r\nI'll definitely give it a try.","I've added the option to Sichem to produce safe code and tested it out on stb_truetype. And it worked!\r\nNew safe version of StbSharp is here: https:\/\/github.com\/rds1983\/StbSharp\/tree\/master\/StbSharpSafe\r\nI've also added new MonoGame sample that works with StbSharpSafe: https:\/\/github.com\/rds1983\/StbSharp\/tree\/master\/Samples\/StbSharpSafe.MonoGame.Test\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/1057289\/48098679-08efe280-e250-11e8-8acd-933ae27838ce.png)\r\n","Wow, that was fast! Thanks.\r\n\r\nSo far, what I can say about all the options:\r\n- **freetype**: still the best rasterizer around, but it's a native library (which works well on consoles, though) :+1: \r\n- **Typography**: incomplete and doesn't support all fonts without crashing with NotImplementedException (but does a pretty fine job when it works) :-1: \r\n- **SixLabors\/Fonts**: doesn't support 32bit characters (e.g. most CJK characters, which makes it pretty useless for dynamic fonts) :-1: \r\n- **StbSharpSafe**: works very well, but doesn't support hinting (which makes small fonts blurry) :+1: \r\n\r\nSo I'd say it's a tie between freetype and Stb_truetype... they both have advantages and inconveniences.","@mrhelmut I got a PR merged in SixLabors fonts to change the internal character representation to int for full unicode support. I planned to do some more work on it because IMO it looked like the best pure C# solution in terms of planned features and code quality (ImageSharp is awesome). They're just missing importers for the 32-bit formats to support CJK. Still lots of other stuff to do though e.g. color emoji and RTL (last time I checked at least).","@Jjagg Good to know! Might become a relevant alternative at some point!","Is the goal to be able to load system fonts for missing unicode characters during runtime ?\r\nOr rendering like to render emojis and stuff i keep seeing rendering all thru out this page. \r\n\r\nLike are you guys talking about replacing spritefont or drawstring ?\r\nThis is just for loading right ?\r\n\r\nSpritefont already can hold as many characters as a texture will fit right. I mean i have 1024 characters of a 65k character font ttf loaded now using nothing but spritefont. It would be nice if i could splice in emojis to it but that would require a second file or something like splicing them in.\r\n\r\nBut spritebatch drawstring still cant read them.\r\n\r\n![unifontpic](https:\/\/user-images.githubusercontent.com\/7495196\/48254897-35833600-e3d9-11e8-8522-5f11a2991fc5.png)\r\n\r\n\r\nNo one ever changed drawstring to make it read code point pairs or we would already have emoji support as is. It's not even a big fix really.\r\n\r\nIn case anyone doesn't get what i mean ,,,, in drawstring we need to check for code point pairs.\r\nRight now it can only ever read up to u+ffff; which is only 16 bits because of this line.\r\n`var c = text[i];`\r\nRight now that would read anything over u+ffff as garbage.\r\n\r\nSomething like what the below method shows. basically it needs to check for pairs as it goes and read them as codepoints i suppose then it could just look up emojis as is right now in drawstring, The for loop has to be altered though and i think spritefont has to keep strings instead instead of chars for the gylph dictionary key or just cast everything to utf32 but i don't think changing that would actually be a breaking change.\r\n\r\n\r\n        public string ConvertSurrogatePairsToCodePoints(string text)\r\n        {\r\n            \/\/ A emoji can be represented in 2 different forms\r\n            \/\/    Codepoint\r\n            \/\/    String\r\n            \/\/ For Example : SMILING_FACE_WITH_SUN_GLASS Emoji\r\n            \/\/    Codepoint: 0x1f60e \r\n            \/\/    String: \ud83d\ude0e (which is \\uD83D\\uDE0E) \/\/ <<<< which no one ever changed to make monogame read it right.\r\n\r\n            \/\/ when drawstring hits a line with a emoji its going to instead read it as uD83D\r\n\r\n            \/\/ Do this in a loop.\r\n            \/\/ What we are actually looping now is character objects.\r\n            \/\/ What we need to do is read codepoints which are variable length.\r\n            string result = \"\";\r\n            for (int i = 0; i < text.Length; i++)\r\n            {\r\n                char A = text[i];\r\n                if (i < text.Length - 1)\r\n                {\r\n                    char B = text[i + 1];\r\n                    if(Char.IsSurrogatePair(A, B)) \/\/ <<< this was never added to drawstring.\r\n                    {\r\n                        int val = Char.ConvertToUtf32(A, B);\r\n                        result += \"  Pair \" + ((short)(A)).ToString(\"X4\") + \" \" + ((short)(B)).ToString(\"X4\") + \" = \" + val.ToString(\"x8\");\r\n                        i += 1;\r\n                    }\r\n                    else\r\n                    {\r\n                        result += \"  Single \" + ((short)(A)).ToString(\"X4\") +\" = \"+ ((int)(A)).ToString(\"x8\");\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result += \"  Single \" + ((short)(A)).ToString(\"X4\") + \" = \" + ((int)(A)).ToString(\"x8\");\r\n                }\r\n            }\r\n            return result;\r\n            \/\/ really thats just a character that has to be checked for in drawstring that consists of a codepoint pair so it can be looked up in the spritefonts glyph dictionary.\r\n        }\r\n\r\nYou can test that by just calling the below line on that method above. \r\n\r\nstring resultsUtf32 = ConvertSurrogatePairsToCodePoints(\"\ud83d\ude0e\");\r\n\r\nThe string holds the chars as pairs so the current drawstring will never ever read them right till we start checking the strings passed in for pairs.\r\n\r\nMonogame should probably have a method to for the user that will convert utf8 strings to 16 as well.\r\n\r\n","I guess that what we would be cool about dynamic fonts, is to be able to bake a SpriteFont at runtime without the need of the content pipeline.\r\n\r\nWhen you are localizing games in CJK languages, it's very impractical to generate a SpriteFont with 22k+ characters.\r\nSo the idea is to be able to bake a font at runtime by feeding it only the characters that are actually used by the game. You can do that with the pipeline by defining ranges, but being able to that at runtime allows to modify the texts without the need of the content pipeline (and therefore being able to share builds with translators or players and let them test a preview of their translations without having to rely on development tools to bake a font).\r\n\r\nThe icing on the cake would be to limit the bitmap font resolution to a precise size (for hardware compatibility purpose) and to manage multiple textures\/pages if the glyphs can't fit.","I see ... so this is about run time loading basically. \r\nWould this be loading system fonts then to add glyphs or just parsing out needed glyphs to add to a running font. It almost sound like the new font would be saved at runtime as well.\r\nHow do you know what glyphs you need when say the user is typing in a chat box ?\r\nHow is that sort of situation handled ?\r\n","It's basically reading a ttf file shipped with the game, generating a Texture2D of the glyphs and having all the kerning and glyphs info to manually instantiate a SpriteFont at runtime. No need to have it saved on disk.\r\n\r\nFor text input, that's another issue, and would likely require to rasterize a full range of characters. (Being able to expand the bitmap font as you go would be awesome, but most probably inefficient.)","> [...] manually instantiate a SpriteFont at runtime\r\n\r\nRather than (or as an alternative to) creating a SpriteFont at runtime we could use the loaded font data to actually do proper layout. SpriteFont simplifies text layout in favor of reduced memory usage and slightly increased performance.\r\n\r\n> (Being able to expand the bitmap font as you go would be awesome, but most probably inefficient.)\r\n\r\nI think it can be done efficiently if the bin packer used for the texture atlas is kept in memory and the texture for the atlas is large enough so it doesn't need to be resized (much). Actual rasterization is probably the slowest part of adding a character and that's not slower than if you'd add a range of characters all at once. Uploading to the GPU will be slower when uploading separate characters though.","So basically loading a tff instead of a spritefont then building a new spritefont ?\r\n\r\nIm still a bit hazy on this.\r\n\r\nWhat is the major advantage or difference to just loading a couple pre-built spritefonts now and making a new one from them as things are ?\r\n \r\nI mean its kina annoying to do it manually atm as isn't built in, but there is setdata for the texture and you can pull out the glyphs and rebuild them as it is. \r\nhttp:\/\/community.monogame.net\/t\/font-spacing-issue\/11030\/4\r\n\r\nYou would still have to load the ttf to build from it or to use it directly same as loading a spritefont right ?","Dynamic fonts are cool when you don't want to have to rebuild your game to test (or live edit) texts within your game when working with too huge languages. It is very useful when localizing a game or working with writers (and keeping the bitmap fonts small).\r\n\r\nFor instance, we are translating our games to Chinese, Japanese, and Korean languages, which can go up to 80k characters if you want to be generic enough to allow translators to have an editable build.\r\nIt is very impractical to generate a bitmap font of 80k characters, the texture would be too huge and would crash most hardware. So what we do, is to generate fonts with only the characters that are used in the game (which helps to go down to 1-2k characters). The Pipeline allows this, but it is done at build time, and therefore prevent translators to edit their texts and have an in-game preview within us having to rebuild the game.\r\n\r\nWe could provide a baking tool that embed the content pipeline, but that gets complicated.\r\n\r\n(What we actually do, is using BMFont as a CLI tool to re-generate fonts at game startup, which means that we have our own BMFont parser and renderer. BMFont is really cool, it can manage pages and does a very good job at packing glyphs. The problem is that it is an external .exe, and that's touchy to ship on most platforms.)","> So what we do, is to generate fonts with only the characters that are used in the game (which helps to go down to 1-2k characters). The Pipeline allows this, but it is done at build time, and therefore prevent translators to edit their texts and have an in-game preview within us having to rebuild the game.\r\n\r\nHow does the pipeline tool we use now decode a ttf to make a spritefont do we have a actual algorthim that does the decoding or are we calling some external function ? \r\nCan that code be separated and moved into a new framework class file that uses file io ? \r\n\r\nIts already possible to edit or create a sprite font at runtime as shown previously.","The pipeline uses freetype, which is a native dependency. It is perfectly possible to use freetype at runtime to make dynamic fonts.\r\n\r\nThe idea to have a pure C# rasterizer is cool if we want to make sure that it works on every platforms (inc. consoles) without an additional dependency to ship\/manage.","> > (Being able to expand the bitmap font as you go would be awesome, but most probably inefficient.)\r\n> \r\n> I think it can be done efficiently if the bin packer used for the texture atlas is kept in memory and the texture for the atlas is large enough so it doesn't need to be resized (much). Actual rasterization is probably the slowest part of adding a character and that's not slower than if you'd add a range of characters all at once. Uploading to the GPU will be slower when uploading separate characters though.\r\n\r\nYes it can be done efficiently, and this is pretty much what I am doing in my game to achieve this.\r\n\r\nAlso, to minimise any delays on the main game thread, I am doing it all on a separate thread. The side effect of this is that missing glyphs briefly appear as question marks (or whatever you want the missing glyph char to be) while they are rendered.\r\n\r\nI'm using it to do things like properly render players Steam handles in game (e.g. for leaderboards), and it works quite well. I'm also hoping to eventually use this to support user translations.","@willmotil \r\n> No one ever changed drawstring to make it read code point pairs or we would already have emoji support as is. It's not even a big fix really.\r\n\r\nI have already created a prototype in pull #6366. This changes the format of the xnb file making it not backwards compatible.\r\n\r\nThe main problem with decoding is not UTF-32 but the proper application of Decorators( Sequences of UTF codepoints describing  a single glyph.)\r\n\r\nThe Glyph dictionary has a key of type Char which would be changed to an int to store UTF-32. The major rub is the XML Reader to load the spritefont.  It produces an error when reading Extended Characters. This is why I created the new type.\r\n","There is a (I think) very good implementation of an online bin packer on SFML's source code: https:\/\/github.com\/SFML\/SFML\/blob\/master\/src\/SFML\/Graphics\/Font.cpp","It uses FreeType, which seems to be the most relevant rasterizer for now.","I've made a library that allows dynamic creation of SpriteFont: https:\/\/github.com\/rds1983\/SpriteFontPlus\r\n@geniuszxy \r\n\r\n","_The StbSharp dynamic font above i think is made by the same guy as the thing we use now not 100% on that._ \r\n\r\nAnyways. I added unicode support to the above the project and it just uses a renderer i tossed together to test it. \r\n\r\nhttps:\/\/drive.google.com\/open?id=19eVSczTid9oqOLjK3LyAyAPn7wsur9mn\r\n\r\nDrawstring getting unicode support amounts to a assignment to a int and a single if check the vast majority of the entire loop cycle, which is a negligible performance hit. Basically this is very little if any penalty.\r\n\r\n            for (int i = 0; i < text.Length; i++)\r\n            {\r\n                char cs = text[i];\r\n                int charval = cs;  \/\/ (1)\r\n                if (char.IsHighSurrogate(cs))   \/\/ (2)  be nice to implement this in place we could check manually for the hex code range.\r\n                {\r\n                    \/\/ essentially we get to skip a character next pass so this is extremely minor as well.\r\n                    charval = char.ConvertToUtf32(cs, text[i + 1]); \r\n                    i++;\r\n                }\r\n                \r\n                \/\/ there is really no other downside after the above performance wise.\r\n                if (charval == '\\r')\r\n                    continue;\r\n                if (charval == '\\n')\r\n                {\r\n\r\n\r\nOk so jjagg has a wip for unicode support which is like as far as i can tell is just about finished.\r\nSo i just wanted to point out that it appears getting full unicode support in monogame is approaching imminently.  \r\nThis issue goes back a long way and the original preliminary discussion is here #4805\r\n\r\nI suppose it would be nice to get both at once dynamic font support and proper unicode capability.\r\nThis route seems to do that. \r\n\r\nIt also just from initial tests seems to get rid of the horrible looking alpha pixels and bad aliasing (that occurs differently at different point sizes) that the current font loader seems to generate into the texture.\r\n#5242 #5272 #6614 all still open and more.\r\n\r\nIt looks amazingly good under spritebatch i don't have to tinker with settings either to try to clear it up.\r\nNot shown in the above image but it is when you run the project.\r\n\r\n<img src= http:\/\/community.monogame.net\/uploads\/default\/optimized\/2X\/8\/83fd23ee65e2d09069ddd728dffa6bdd0a7b313f_1_642x500.png \/>\r\n\r\nThe above image is of course just a quick hacked in font rendering class right out of a test i was working on for something else at the moment. Its not a very good renderer but it shows the results of StbSharp with unicode support.","I'd like to note that StbSharp is very useful (thanks @rds1983 !), but doesn't support hinting, which makes smaller fonts very blurry compared to what freetype is currently outputing through the content pipeline.\r\n\r\nThis would mean that dynamic fonts would render differently from standard SpriteFont. We'll have to keep that in mind when moving forward.","Freetype's output is quite frankly horrible even on small sizes... \r\nhttp:\/\/community.monogame.net\/t\/spritefont-rendering-cant-seem-to-disable-smoothing\/11225\/9\r\n\r\nLook at the **J** specifically. Unseen really here but the zero was turned into a e\r\n\r\n<img src= http:\/\/community.monogame.net\/uploads\/default\/optimized\/2X\/a\/a7361a0d4b5d91e8dd77a3d4a2855b95aef4f762_1_665x500.png \/>\r\n\r\nstb has some problems so far but freetype has been in use for a long while and it still hasn't been fixable.\r\n\r\nStbSharp small text 15 pixel height which is like an 9 point spritefont. Scaled way up. same fonts.\r\nI can make these opaque as the pixels come in but this is how it comes in on its own.\r\n![zoomed01](https:\/\/user-images.githubusercontent.com\/7495196\/51500361-ac568b00-1d9b-11e9-88d0-3707ae8d974e.png)\r\n\r\n![stbsharp20height](https:\/\/user-images.githubusercontent.com\/7495196\/51500597-92697800-1d9c-11e9-8b40-bbc192890249.png)\r\n\r\n\r\n\r\n\r\n","It depends on the font and if it has hinting. A font with good hinting enabled (such as this one: https:\/\/github.com\/SolidZORO\/zpix-pixel-font) will be super crisp with freetype and blurry with StbSharp at low size.\r\n\r\nFont without hinting will look bad anyway.\r\n\r\nRegarding http:\/\/community.monogame.net\/t\/spritefont-rendering-cant-seem-to-disable-smoothing\/11225\/9, we could add a parameter to the content processor to tell freetype to not use anti-aliasing.\r\n\r\nAlso note that anti-aliasing is different from hinting. Hinting are properties defined by the font to give hints to the renderer regarding how some subpixels should be handled at specific size. If the renderer doesn't support hinting, most subpixels are going to be interpolated (and most likely wrong).","> we could add a parameter to the content processor to tell freetype to not use anti-aliasing.\r\n\r\nThat would probably be a good thing. \r\nA option in the pipeline tool would be better but the aliasing if that is really what that's from is just terrible for freetype i don't think anyone would keep it on for long if they had a choice.\r\n\r\n\r\nWell it doesn't matter to me which is used if we can get rid of that alaising. \r\nI think i got off track a bit though can freetype dynamically load the fonts. ","@mrhelmut FreeType also has an auto-hinter that heuristically hints fonts without the font file containing hinting information.\r\n\r\n@willmotil It's unfair to scale up a glyph and then say it's badly rendered because it's not close to what you'd expect for the character. It's rendered specifically to look good when unscaled.","Anti-aliasing should definitely be controlled, but that's probably worth opening another issue than this one.\r\n\r\nOn my end, I care about big AND small fonts accuracy. If we go with StbSharp, we should keep in mind (i.e. document) that it doesn't support hinting and ultimately add hinting support to the original stb_truetype so that it can be ported to StbSharp.\r\n\r\nSpeaking of anti-aliasing, a dynamic font should also support to toggle it.","_@willmotil It's unfair to scale up a glyph and then say it's badly rendered because it's not close to what you'd expect for the character. It's rendered specifically to look good when unscaled._\r\n\r\nYes but it doesn't render correctly un-scaled for many fonts as well.\r\n\r\nThe scaling up in the image previously was just done to zoom in to what is going on as point clamp was on. In order to show that some pixels are in fact there, but just so aliased that they are invisible.\r\nBelow i remade a better example which is not zoomed in at all.\r\n\r\n_It seems ridiculous that im about to argue that our current font rendering is anything but reliable.\r\nI thought this was a given and obvious fact  but here goes, this will get off topic for a minute._.....\r\n\r\n_Edited to demonstrate with a good example._\r\n\r\n.\r\n.\r\n\r\nJust to be clear im not arguing for or against FreeType i never was.\r\n**Im arguing that it does in fact have problems.** \r\nIm arguing that it doesn't always render fonts at small sizes well or even larger sizes for some. \r\n\r\nHinted fonts may render well small but un-hinted ones get the opposite effect.\r\n**They in many cases actually rendered worse then they should be, to the point of actually changing characters which im about to demonstrate in images below** \r\n\r\nFor example this unhinted font is made far worse with monogame then it is with this StbSharp.\r\nSo it does seem there is a trade off you get really good small hinted fonts. \r\nbut far far worse un-hinted ones over a wider point size. \r\nSome to the point of being unusable or unreliable.\r\n\r\nExample Current MonoGame Implementation.\r\nFont used  unifont - \r\nIts a un-hinted extremely simple small basic font with 65 k characters covering the first half of the unicode spectrum 0x0000 to 0xFFFF holding glyphs for the entire char range of what SpriteBatch currently supports.\r\n\r\nunifont **point size 12**  << flawless.\r\n\r\n![unifontpointsize12](https:\/\/user-images.githubusercontent.com\/7495196\/51543578-e2435000-1e2b-11e9-8b39-e552c8ea43f5.png)\r\n\r\nunifont **point size 14**  <<< !!!  look at the zero. !!!\r\n\r\n![unifontpointsize14](https:\/\/user-images.githubusercontent.com\/7495196\/51543594-eec7a880-1e2b-11e9-9efb-a5daecf46951.png)\r\n\r\nHow would you define the behavior of monogame here if you just started using it ?\r\nHow would you define the condition of this font now ?\r\n\r\nMaybe the answer is that you just use specific point sizes ?  \r\nThis turns out to be wrong as well.\r\n\r\nHow do i know what the right point size is of other fonts ? \r\nAnswer.... i don't. \r\nLogic ... Just look for them ?\r\nA terrible solution and also... \r\nWrong again.\r\nFor some fonts there simply wasn't one as far as i could find that didn't create artifacts this one just happens to work at point size 12 and 24 at other scales different letters get roached. \r\n\r\nScaling up via sprite batch doesn't change anything as this is already directly messed up from the importing of the font into spritefont.\r\n\r\n**So as it stands in reality if we are to say freetype is the superior answer. \r\nWe must acknowledge that it also wrecks un-hinted fonts. \r\nI don't think that is acceptable long term.**\r\n\r\n_This is something that manifests i think for most users as a head scratcher or something they can't put there finger on, rather then a understood problem. For me it was, until i fully realized what was going on at the time of that post which is why i could make and repost the artifact from scratch as i did here._\r\n\r\nJust to add in... In almost every other way freetype seems superior at least with hinted fonts. \r\nExcept the above and that is a downside that is serious enough to make many fonts practically unusable or really randomly bad. Versus, just not look as good using something else. Especially as many free fonts are not hinted. \r\n\r\nIf that could be fixed for freetype it would be a huge relief and definitely superior at that point.\r\n\r\nThen conversely if hinting could be added to stb_truetype it would probably be comparable quality wise possibly superior.\r\n\r\n\r\n","Unifont is a bitmap font specifically designed for 15px height. TTF format doesn't support bitmap font, it converts pixels to strokes, so there's a loss in accuracy in the process (bitmap fonts are best to be used as PCF). That's typically a case where hinting can help.\r\n\r\nA font without hinting will look bad on any size it hasn't been designed for. That's its normal behavior.\r\n\r\nWhat should be noted here: not all fonts should suit all sizes, that's totally normal and highly depends on the design of the font. You can't expect a rasterizer to do what a font doesn't. Unless it has a good hinting.\r\n\r\nIf we want to correctly compare StbSharp and Freetype, we should select a group of fonts with and without hinting, and compare the results with and without anti-aliasing at the pt sizes for which the fonts has been designed for.\r\n\r\nI'm not trying to go against any of the lib either, but I do care about fonts being perfectly rendered at their intended sizes (better rendering at non-intended size is icing on the cake).","@willmotil That's ridiculous. You can't expect a pixel-perfect font to look good at all sizes. There's only so many pixels :man_shrugging: \r\nOf course you're supposed to know what size to render a pixel-perfect font at. You got it off the internet somewhere, so the right size is gonna be included on the web page or whatever.","I also don't support any lib.\r\nHowever there's one additional benefit of using stb_truetype I've found recently: [fontstash](https:\/\/github.com\/memononen\/fontstash) uses it.\r\nI've already ported fontstash to C# and integrated into the SpriteFontPlus, and latter can now render fonts on demand to the texture atlas(https:\/\/github.com\/rds1983\/SpriteFontPlus#dynamicspritefont).\r\n\r\nSo if MonoGame considers gaining similar feature through FontStashSharp, then stb_truetype is the choice.\r\n","I would love to see us use something like stb_truetype vs freetype... quality and performance are my main concerns.  And for sure whatever we decide on for runtime use should be used to replace our existing offline font generation in the Pipeline.","@rds1983 The API with the dynamic font is awesome. Would love to get that into MG.\r\n@tomspilman There's a trade-off to make. FreeType can produce higher quality glyphs, but it's bigger and it's a native lib. FreeType makes sense for offline, but maybe stb_truetype is better for online glyph rasterizing. I see the fact that StbSharp doesn't require additional native dependencies as a big advantage, which makes it more interesting as the runtime solution IMO.","Another thing to note even though stb would seem more performant as its smaller from what i've read it can take up to 2x or 3x as long to rasterize the pixels. \r\n.\r\n.\r\n\r\n> Unifont is a bitmap font specifically designed for 15px height.\r\n\r\nIt has artifacts at point size 8 9 10 11 ** 13 14 (15) 16 all the way up to 23\r\nIt only renders properly at point size 12. and 24.\r\nOther bmp fonts produced the same behavior including one i created myself to double check.\r\n\r\n\r\n\r\n> That's ridiculous. You can't expect a pixel-perfect font to look good at all sizes.\r\n\r\nYou're missing the point.\r\n\r\nIt should still render at least as good at a higher point size then a lower one. \r\nWhy should a 15pt size font render perfectly at 12pt then start missing pixels at higher point sizes ?\r\n\r\nAlso \r\n\r\nThis maybe just due to aliasing maybe not i still cant turn it off if it is.\r\n\r\nIf the above is just going to be considered a (non problem). \r\nSince there are plenty of people using bmp fonts and as this truetype doesn't turn a 0 into a e at any size or J's into I's . Then i consider the notion of quality here to be subjective.","Btw, I have considered possibility of porting freetype to C#.\r\nHowever big amount of different source files scared me off. Especially as far as I understand not all of them are required in the gamedev.\r\nSo if someone will give me list of freetype source files that are used in gamedev.\r\nAlong with list of required defines.\r\nI'll give it a try of converting. Though can't guarantee success.","Not sure if it's worth trying to port freetype to C#. Having a pure C# library with no dependency sure is a great help, but if we ever do down the freetype road, I believe we should be fine with the native library. It builds finely on all platforms including consoles.\r\n\r\nThe only important thing to keep in mind, is to not load the library unless dynamic fonts are used, so that developers who don't use it can skip on shipping the freetype binaries with their games.\r\n\r\nWhat about trying to add hinting support to stb_truetype? I haven't look into this myself, so I don't know how much work this represents. ","> What about trying to add hinting support to stb_truetype? I haven't look into this myself, so I don't know how much work this represents.\r\n\r\nWell the code is all exposed so.\r\n\r\nFor hinted fonts. \r\n\r\nThey have hint pixels embedded in the ttf and those would need to be extracted.\r\nSince they are embedded there must be a algorithm to also render them.\r\n\r\nI guess its a 2 part problem. \r\n\r\nFind the instructions on how to read hinting pixels from a ttf. \r\n_(i have no idea were to find that information.)_ \r\nThen finding the rules for implementing the interpolated designated hint pixels \r\n_(that might be a curved interpolation based on a polynominal or something still shouldn't be too hard)._ \r\n\r\nSo getting the hinting data out of the ttf file would be the hard part.\r\n\r\n.\r\n.\r\n\r\nFor un-hinted fonts \r\n\r\nSince they don't have hinted pixels, I guess one could just write a algorithm i suppose that should be fairly easy.  \r\nEdit this is not so easy as i thought it would be, i gave it a shot today there was some things involved i didn't consider at least from the side of just making my own sharpening filter on the output end.\r\n\r\nPixels[]    \/\/ index0 rgba = pixels[ 0 to 4 ] \r\n\r\n                var rgb = new Color[Width * Height];\r\n                for (var i = 0; i < Pixels.Length; ++i)\r\n                {\r\n                    var b = Pixels[i];\r\n                    rgb[i].R = b;\r\n                    rgb[i].G = b;\r\n                    rgb[i].B = b;\r\n                    rgb[i].A = b;\r\n                }\r\n               \/\/ filter the data to sharpen it.\r\n               \r\n                \/\/ set the data.\r\n","I have prepared a [gist](https:\/\/gist.github.com\/stromkos\/afaf6bebe0d3bd03737177aa0974be7f) to provide native dynamic font support to Android .  I have a less performant one for Windows.(it seems to slow down at about 230 dynamically generated characters per step), but the Android variant given has lasted over 30 minutes without any performance degradation.  This solution allows any valid text on the system to render including Color Emojis, and all three flags of Scotland, England, and Whales.(Not possible with a basic UTF32 encoding(Since, each requires multiple UTF-32 chars to render.)) \r\nPlease note than I am not purposing that this code should be included in the framework,  merely that the code should be available to those that use it.","I have also implemented something like this in my game. Unfortunately, the code is a bit of a mess and coupled to the engine. It works, but it was not written with intention to be a general library. But I could share the relevant pieces, if needed. \r\n\r\nMy vote goes to FreeType as it is fast, feature rich, multi-platform and well tested library. Good font rasterization is not that easy. \r\n\r\nSince scaling is quite common effect in games, it may be worth considering to store rasterized glyphs in SDF ([Signed Distance Field](https:\/\/www.youtube.com\/watch?v=CGZRHJvJYIg)) format. This would make text rendering even more flexible. However, I'm not sure if SDF is good for small text, were pixel-perfect precision is needed. I haven't implemented SDF myself. \r\nWith FreeType we could also add support for outlined fonts.\r\n\r\nRegarding the implementation, would we do rasterization at load time or on-the-fly?\r\n \r\nPros of load-time rasterization is that it can't slow down the game while running and that we know exact dimensions of the texture atlas that we need. But this might not work that well for Asian fonts with lots of characters. \r\n \r\nWe could also do combination of both. Load time rasterizaton for predefined list of chars and rasterize additional glyphs on-the-fly, if needed. Problem becomes, what size do we need for a texture atlas. We could use shared texture atlases, but this could lead to unecesary texture switching when rendering single line of text. Although this would only happen, if glyph, that was rasterized at later time, has been placed in a new atlas as the old atlas (where the rest of the glyphs for that font are) got full. Shared atlases would be more efficient memory-wise. ","SDF isn't quite helpful for small\/pixel fonts, but yeah, I agree that having the option to render fonts using SDF is a huge plus. Any modern game uses SDF rendering when it comes to very accurate HD texts.\r\n\r\nI think that using or not using SDF rasterizing & rendering should be switch.","There's this repo that looks really interesting: https:\/\/github.com\/LayoutFarm\/Typography","Typography sounds promising, unfortunately it is not usable as of now. I've been playing around with it for our ongoing project and there is a few missing features which make some fonts to crash upon loading with ```NotImplementedException```. Maybe in the long run.","Have the features already been submitted in their issues?","Back when I looked at SkiaSharp, it had a dependency toward ```System.Drawing``` and GDI+, which makes it a mess to be cross-platform. I don't know if it's still the case, though.\r\n\r\nIf you have any feedback regarding SkiaSharp, it is very welcome. Our main concern is to have little to no dependencies.","Took a closer look at it, and SkiaSharp is a binding for the native Skia, which makes it less workable.\r\nIf we have to rely on a native dependency, it would probably be more reliable to work with freetype (which I know works just fine on consoles).","Did anyone figure out if its possible to tell freetype to turn off its aliasing when it renders for spritefont ?"],"labels":["Feature Request","Font"]},{"title":"RenderTargetCube Bug or Design flaw ","body":"Edited to clarify.\r\n\r\n#RenderTargetCube requires a LH view matrix. In order to build a proper matrix that will match a cubemapface direction.\r\n\r\nGraphicsDevice.SetRenderTarget(renderTargetCube, CubeMapFace.NegativeZ); \/\/ front\r\n\r\nYou cannot match the above call to a Matrix.CreateWorld(...) or CreateLookAt(...) resulting matrix.\r\nThere is,... No combination of up vector and forward vector as input paremeters that will create a good view render that will match the output from within a shader to the follwing call. \r\n`float shadowDepth = texCUBE(TextureSamplerB, float4(lightToPixelDir, 0)).x;`\r\n\r\n_Your output will be scrambled in some form no matter what you do.\r\nThis is about the best you can get with a rh monogame create call._\r\n\r\n<img src=\"http:\/\/community.monogame.net\/uploads\/default\/original\/2X\/c\/c4f6914d0a89e4861db95082f35a9414e12898d7.png\">\r\n\r\nSince monogames matrix's are right handed this is extremely obfusicated. It makes the use of the rendertargetcube itself impossible without knowing this. Once you know it, you still need the following to create a compatible matrix. In order to get a view that will match a cubeface.\r\n\r\n_thanks to markus for figuring out that the solution was a inverse matrix and the suggestion to change the current monogame rh to a lh._ \r\n\r\nWith some minor adjustments i made to Monogames CreateLookAt and testing over the last week this appears to be solid.\r\n\r\nrendertargetcube intellisense should bring it up and it should be pretty clear what it does.\r\n.\r\n```\r\n    public static class RenderTargetCubeHelper\r\n    {\r\n        public static Matrix CreateCubeFaceLookAtViewMatrix(Vector3 cameraPosition, Vector3 cameraTarget, Vector3 cameraUpVector)\r\n        {\r\n            var vector = Vector3.Normalize(cameraPosition - cameraTarget);\r\n            var vector2 = -Vector3.Normalize(Vector3.Cross(cameraUpVector, vector));\r\n            var vector3 = Vector3.Cross(-vector, vector2);\r\n            Matrix result = Matrix.Identity;\r\n            result.M11 = vector2.X;\r\n            result.M12 = vector3.X;\r\n            result.M13 = vector.X;\r\n            result.M14 = 0f;\r\n            result.M21 = vector2.Y;\r\n            result.M22 = vector3.Y;\r\n            result.M23 = vector.Y;\r\n            result.M24 = 0f;\r\n            result.M31 = vector2.Z;\r\n            result.M32 = vector3.Z;\r\n            result.M33 = vector.Z;\r\n            result.M34 = 0f;\r\n            result.M41 = -Vector3.Dot(vector2, cameraPosition);\r\n            result.M42 = -Vector3.Dot(vector3, cameraPosition);\r\n            result.M43 = -Vector3.Dot(vector, cameraPosition);\r\n            result.M44 = 1f;\r\n            return result;\r\n        }\r\n        public static Matrix GetRenderTargetCubeProjectionMatrix(float near, float far)\r\n        {\r\n            return Matrix.CreatePerspectiveFieldOfView((float)MathHelper.Pi * .5f, 1, near, far);\r\n        }   \r\n    }\r\n```\r\n\r\nThe additional method brings to light a second secret the aspect ratio for the perspective projection that is used for the rendertarget cube must be 1.\r\n\r\n![buggsshadow06](https:\/\/user-images.githubusercontent.com\/7495196\/40195862-c1078956-59dc-11e8-8e81-3c87f3651dca.png)\r\n\r\n\r\nI hope its clear that the average user will not figure this out on his own from the documentation or without the help of someone who knows or without extensive testing to find the bug.\r\n\r\nThe bug in this case is the design of the class itself in just how un-available any clues are to this vital bit of information or what the fix is..\r\n\r\nI leave it to you to solve how best to deal with it. If there is no simple solution i suggest simply adding the method to the class itself when the user hits a dead end, it will be right were they will likely, look first.\r\n\r\n\r\nSystem stats\r\nDx12 caps\r\n\r\nWhat version of MonoGame does the bug occur on:\r\nMonoGame 3.7\r\n\r\nWhat operating system are you using:\r\nWindows 10\r\n\r\nWhat MonoGame platform are you using:\r\nDesktopGL, WindowsDX\r\n","comments":["So `RenderTargetCube` is an XNA type.\r\n\r\nFirst off we need to get some unit tests for `RenderTargetCube` to ensure we're even doing things right to XNA.\r\n\r\nIf we are doing things right and then we should consider adding an extension method of some sort that clarifies things.","Some additional info. Edit after some few days of testing.\r\n\r\nSo it appears there are a number of things that need to be looked over with the render target cube.\r\nMany of which are basically ... \"it just wont work unless you know about it\" ... problems.\r\n\r\nHere is my initial forum post that shows all the difficultys i had implementing this for the first time as well as a example of the confusion this specific issue resulted in and the reasoning for reporting it.\r\nhttp:\/\/community.monogame.net\/t\/solved-render-target-cube-texture-cube-how-to-questions\/10620\/17\r\n. \r\nInitial test.... Use the F1 keys to see the Regular monogame Rh matrix \r\nF2 or F3 to use the Lh create lookat's to see the difference.\r\nhttps:\/\/drive.google.com\/open?id=1IiAueyOtx5uYR1WGdbst_39I4WlzKRqy\r\n\r\nSome of the other issues are as follows. \r\n_Keep in mind. These are perspective (not orthagonal) projection cube maps or enviromental maps im using in combination with rendertargetcube so they are all dynamic not static renders._\r\n\r\n1) SpriteBatch resets states but some unidentified as of yet ...\r\nBlendState option is responsible whatever state it sets it doesn't turn off even if you stop calling SpriteBatch the solution is to simply set a blend state that does nothing at the begining of draw.\r\nThis took a long time to identify as it appeared to be a effect on the depth culling or stencil buffer.\r\nThough i at first thought i was a state i stoped looking into it after i started thinking it was a stencil error or depth write cull problem.\r\n\r\n2) It is not possible to clear the depth buffer with the far plane value. As the maximum allowed input depth is 1f. The depth buffer represents a 32 bit value and should be cleared to at least the far plane for anyone working in world space.\r\nThis value of 1f represents the maximum depth in clip space or basically the clip space far plane. \r\nHowever this is a assumption that the user will want to be in clip space for ______ reasons.\r\nHowever there are excellent reasons to Not be in clip space when working with the depth buffer.\r\nTo assume that a user will want to do this or know by divination \/ mind reading that it is the frameworks intent he does what he never told to do, is not wise. \r\nThe solution is either a overload that allows the depth buffer to be cleared by the useer properly or Big Red letters. The hack solution i used was to draw the skysphere with no culling on thankfully this was possible or i would have had to rewrite 7 shaders just for this test.\r\n\r\n3) It appears the RenderTargetCube has edge lines were it errors and returns no shadow.\r\nThe solution to this is to turn on AddressU and V   Clamp  Again the average user has no idea he must do this and may not even notice the lines for some time.\r\n![cubeartifacts](https:\/\/user-images.githubusercontent.com\/7495196\/40297134-bc666d72-5cac-11e8-83db-2050f7109eae.png)\r\n\r\n4) When rendering a reflection cube vs a depth cube.\r\nThe depth cube rendered the entire scene with all my primitives using the proper ccw culling. \r\n_I confirmed this by also drawing regular cubes and with a normal to light pixel coloring shader._\r\n\r\nWhen rendering the reflection cube all objects rendered were backfaces i confirmed this by seperating the scene rendering method and inversed the ccw culling to cw culling and everything worked including the skybox. The reflection sphere seen center then rendered everything properly. This bug i just found today and if i find that its due to my code ill amend the issue report.\r\n\r\n<img src=\"http:\/\/community.monogame.net\/uploads\/default\/optimized\/2X\/9\/9fd12c7ba97d2ed6d0d526802cf250e409d8e66e_1_690x438.png\">\r\n\r\nIn short it needs quite a lot of work to even get it working and to know some secrets, which is not the motto of the framework.  \r\n\r\nblendstate turned on by spritebatch.begin below.\r\n`GraphicsDevice.BlendState = new BlendState() {  }; \/\/ the fix`\r\n![depthbuffercanceling01b](https:\/\/user-images.githubusercontent.com\/7495196\/40532458-80a6111a-5fcd-11e8-9747-03d11e82610e.jpg)\r\n\r\nHere is the project i think im done on this for now.\r\n\r\nhttps:\/\/drive.google.com\/open?id=1MDmqwfvfY6EpphuLBCRlPoUSt2lDTY-e\r\n\r\n.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"labels":["Feature Request","Testing","Documentation","Help Wanted"]},{"title":"Drawing transparent texture over instanced geometry not working on Android \/ OpenGL ES ","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nThere are already some issues related to instanced geometry viz. #6293 It's possible this issue is related to that.\r\n\r\nI have an overlay (e.g. a HUD) which is rendered over my geometry. The overlay is a transparent 2D texture which has some stuff rendered to it. The overlay is drawn over the geometry using SpriteBatch.\r\n\r\nWhen drawing everything *except* instanced geometry, everything works fine on all platforms viz. DX, GL and Android. \r\n\r\nWhen drawing instanced geometry (aside from bug #6293 mentioned above, which can be worked around with the fix in pull request #6302 ), this works on DX and GL, but does not work on Android.\r\n\r\nOn Android, the overlay is not visible or drawn if any instanced geometry is also drawn.\r\n\r\nI have put together a sample app which demonstrates the problem. In the sample, if you run it on DX or GL, it works fine. If you run it on Android, you will notice the that blue lines which should overlay the screen are not shown or drawn.\r\n\r\nYou can comment out the instanced geometry and enable the drawing of the model which then works fine on all platforms, including Android. So the problem is only surfacing when drawing instanced geometry with the overlay.\r\n\r\nNote, even with the fix mentioned in PR #6302 , drawing of the overlay does *not* work on Android, so that fix in #6302 isn't fixing this particular issue.\r\n\r\ncc: @Jjagg @dellis1972 \r\n\r\n[particles.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/1959087\/particles.zip)\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.0-1491\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n-Android\r\n-DirectX\r\n","comments":["@Jjagg not sure if you had a chance to look at this and the PR.... it looks like there's a couple issues related to instancing and graphics state. ","@YTN0 I haven't had the time yet, sorry.","Hey,\r\nexperienced the same problem, solution was here to fix\/remove the ifdef in VertexDecleration.OpenGL.cs, line 60. It assumes that there is no instance rendering under OpenGL ES","@lrahmann Thanks for the tip.... I'll give that a try when I have a chance."],"labels":["OpenGL"]},{"title":"Nuget Extensions in MonoGame Pipeline Tool with new CSProj format ","body":"Since Nuget packages are stored in `~\/.nuget\/packages` instead of the `.\/packages` directory for .NET Core projects, the MGCB needs to reference a different path for any Pipeline extensions that are delivered via Nuget. I ran into this with https:\/\/github.com\/craftworkgames\/MonoGame.Extended\/issues\/495, but it should be equally applicable to other extensions. \r\n\r\n```\r\n\/reference:\/home\/wardp\/.nuget\/packages\/monogame.extended.content.pipeline\/1.0.617\/tools\/MonoGame.Extended.Content.Pipeline.dll\r\n```\r\n\r\nWhile the changed path is simple enough to hard-code, MGCB should provide access to the `$HOME` environment variable so that this would be portable across installations.\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n\r\n- MonoGame Pipeline Tool 3.6.0.1625\r\n\r\n#### What operating system are you using:\r\n\r\n- Arch Linux (Kernel: 4.14.35-1-lts)\r\n\r\n#### What MonoGame platform are you using:\r\n\r\n- DesktopGL.Core (thanks @cra0zy, works great with Rider)\r\n","comments":["Yea, this has nothing do with .NET Core, this is just how nuget works with the new .csproj format. I have it on my TODO list to provide Pipeline Tool with NuGet package manager so you can reference the required nugets from it directly.","@cra0zy do you have any update on this? The only solution that I've come across is to manually copy or symlink NuGet packages into a folder local to the MGCB file.","None so far, once my exams end I'll see if I can add nuget reference support.","We just got burned on this one too. It'd be awesome if this could get fixed.\r\n\r\n@WardBenjamin , how exactly did you solve it by manually copying the dll? I get `System.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types. Retrieve the LoaderExceptions property for more information` when I try and do that. Even if I copy all 3 dll's from the nuget folder","@tomizechsterson This is what I do. I copy the dll to my project's root so I can reference it using the content pipeline.","@Apostolique That appears to work, I think. Now, it gets weird when I try to add a .tmx file to the Content project. It complains that it can't find a default importer for it. However, the .tmx file that's been there this whole time will work in the project just fine (I guess at one point in the past it managed to build it successfully).\r\n\r\nAlso, if I manually specify TiledMapImporter and TiledMapProcessor in Content.mgcb, it'll then say Failed to create importer 'TiledMapImporter' when building the Content project\r\n\r\nThis is quite confusing ","@tomizechsterson Indeed, this is pretty confusing. Are you on the [MonoGame Discord](https:\/\/discord.gg\/N9t26Uv)? [![Discord](https:\/\/img.shields.io\/discord\/355231098122272778.svg)](https:\/\/discord.gg\/N9t26Uv)","@Apostolique I wasn't. I am now, though :)\r\n\r\nI'm torn between the c-sharp channel and the questions channel.."],"labels":["MGCB Editor"]},{"title":"Error in BoundingBox.Contains(BoundingFrustum)","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/6f4e51030120913bc1d5b21b34b07493d2eeebff\/MonoGame.Framework\/BoundingBox.cs#L71\r\n\r\nThe function ```BoundingBox.Contains(BoundingFrustum)``` doesn't work properly. If I have a BoundingFrustum that is outside a BoundingBox, the returned value will be ```ContainmentType.Intersects```.\r\n\r\nIf I instead call the equivalent (?) function on the ```BoundingFrustum.Contains(BoundingBox)```, I get the right result, namely ```ContainmentType.Disjoint```.\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/6f4e51030120913bc1d5b21b34b07493d2eeebff\/MonoGame.Framework\/BoundingFrustum.cs#L179\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL, WindowsDX, NetCore\r\n","comments":["The BoundingFrustum code is more complicated that it need to be. \r\nThe [construction says](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/6f4e51030120913bc1d5b21b34b07493d2eeebff\/MonoGame.Framework\/BoundingFrustum.cs#L128) that BoundingFrustum is defined as a View * Projection matrix.\r\n\r\nLet's look at [Contains(Vector3 point)  ](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/6f4e51030120913bc1d5b21b34b07493d2eeebff\/MonoGame.Framework\/BoundingFrustum.cs#L294-L306)\r\nIf you have a vector3 in world coordinates and you tranform it by ViewProj, you get this point in normalized device coordinates (NDC a.k.a. Clip coordinates).  You can then check if the point is withing -1 to +1 (-1 to 0 for Z).\r\n\r\nSame goes for Planes, Spheres, boxes. Tranform them with ViewProj and then check if it's inside the NDC.\r\nThe NDC is virtual a BoundingBox with corners at (-1,-1,-1) and (1,1,0).\r\n\r\nYou can extract corners and planes the same way. Tranform the corner (1,1,0) from Clip coordinates with inverse ViewProj into world coordinates.\r\nI bet you can simplify the transform by combining values from the matrix Left,Right,Up,Down, Forward. (it's multiplying with 1 and 0 after all)."],"labels":["Help Wanted","Good First Issue"]},{"title":"Instanced geometry not visible \/ working on OpenGL when drawing non-instanced geometry with it","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nDrawing instanced geometry on it's own using OpenGL seems to work fine. However, when also drawing other geometry with it e.g. a model, things start getting weird. In my primary program, I have weird issues with the final image on OpenGL.\r\n\r\nOn DirectX, things look and work as they should i.e. instanced geometry and non-instanced are fine together.\r\n\r\nI put together a test program using the same particle code that was submitted on another bug.\r\n\r\nIn the test program, if you only display the instanced particles, everything is drawn as expected. As soon as you also display the model, the instanced geometry \/ particles are no longer drawn \/ visible. Note, the current code will display the model but not show the particles. Edit and comment out the drawing of the model to see the particles being drawn. \r\n\r\nI *suspect* it has something to do with graphics state and \/ or buffers, however this is beyond my depth of knowledge.\r\n\r\nCC: @Jjagg since you worked on OpenGL instancing.\r\n\r\n[ParticlesGL.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/1930946\/ParticlesGL.zip)\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":["Forgot to mention... if you create an Android project and run the same code (OpenGL ES 3.0+ device), you'll have the exact same problem.\r\n\r\nIf you create a DirectX project and run the exact same code, it all works correctly i.e. you'll see both the particles and the spaceship model.","Anyone have any ideas what the issue might be here? I have tried everything I can to get this working correctly on GL, but I've hit a brick wall. This works every time on DirectX without any problems, but there's nothing but frustration trying to get this working on GL \/ GL ES....\r\n","put \r\n`GraphicsDevice._attribsDirty = true; `\r\nto the end of\r\n ` private void PlatformDrawIndexedPrimitives(PrimitiveType primitiveType, int baseVertex, int startIndex, int primitiveCount)`\r\n  and\r\n  `private void PlatformDrawPrimitives(PrimitiveType primitiveType, int vertexStart, int vertexCount)`\r\n\r\nGraphicsDevice.OpenGL.cs","Awesome, thanks for looking into this @PumpkinPudding! If you think that's the right fix, please do set up a pull request :) \n\nIf you're not familiar with Git, DM me on Gitter and I'll walk you through it when I have the time.","@PumpkinPudding Nice work in figuring this out! \r\n\r\nFYI, I just tested out your fix by making those changes and building a new MonoGame.Framework.dll for OpenGL... works perfectly now!","@PumpkinPudding @Jjagg  I created a pull request for this fix. Thanks and credit goes to @PumpkinPudding  for this! ","@Jjagg This issue might in some way be related to a new issue I filed viz. #6306","Also had this issue, thanks to @nkast for pointing to https:\/\/github.com\/nkast\/MonoGame\/commit\/155a55be4db7e0ce19aada85225472cde557bc68 to work around this"],"labels":["OpenGL"]},{"title":"[DesktopGL] Creating a texture binds it to T0","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build insaller from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue bellow -->\r\n\r\nOn DesktopGL when you create a texture it is bound to the first texture slot. \r\nThe following project demonstrates the issue: https:\/\/github.com\/Jjagg\/MgTextureBindBug\r\nIt creates a red texture then renders a triangle with an effect that samples a texture. The texture is not set in the Game1.cs file, so we'd expect a black triangle or garbage. Instead the created texture is sampled and the triangle is drawn in red.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- ie. DesktopGL, WindowsDX, WindowsUWP, Android:-->\r\n- DesktopGL\r\n","comments":[],"labels":["OpenGL"]},{"title":"[DesktopGL] Explicit sampler\/texture registers incorrectly mapped","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue below -->\r\n\r\nFor DesktopGL projects explicit sampler and texture registers are not handled correctly.\r\nI have a sample project that sets the sampler register to s0. This makes the texture it samples bind to t1 (regardless of texture register binding). Using any other explicit sampler register or not assigning a register at all binds the texture to t0.\r\nThe test project is here: https:\/\/github.com\/Jjagg\/MgTextureRegisterBug\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->\r\n- DesktopGL\r\n","comments":[],"labels":["MGFX","OpenGL"]},{"title":"[DX] Shader parameter semantics are ignored","body":"Shader parameters are bound by position rather than by semantics for WindowsDX projects. For DesktopGL parameters are bound correctly.\r\n\r\nI set up a minimal project that shows the issue: https:\/\/github.com\/Jjagg\/MgSemanticsBug\r\nThe vertex shader:\r\n```\r\nstruct VertexShaderOutput\r\n{\r\n\tfloat4 Position : SV_POSITION;\r\n        float4 Red : COLOR1;\r\n\tfloat4 Color : COLOR0;\r\n};\r\n\r\nVertexShaderOutput MainVS(float4 position : POSITION0, float4 Color : COLOR0)\r\n{\r\n    VertexShaderOutput output = (VertexShaderOutput)0;\r\n    output.Position = position;\r\n    output.Red = float4(1, 0, 0, 1);\r\n    output.Color = color;\r\n    return output;\r\n}\r\n```\r\n\r\nand the pixel shader:\r\n\r\n```\r\nfloat4 MainPS(float4 position : SV_POSITION, float4 color : COLOR0, float4 red : COLOR1) : COLOR\r\n{\r\n    return color;\r\n}\r\n```\r\n\r\nFor DesktopGL this correctly outputs the color that's passed in (green), but for WindowsDX this outputs red. So `output.Red` is bound to `color` and `output.Color` is bound to `red` because of the order.\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- ie. DesktopGL, WindowsDX, WindowsUWP, Android:-->\r\n- WindowsDX\r\n","comments":["That's a DX runtime thing with user-semantics needing to be in sequence between stages when passed argument style. You'd have to parse and automatically restructure the HLSL to fix, since when a shader for a stage is compiled it's clueless about the other stages.\r\n\r\nShows its head all the time when you're plugging in some GS\/HS+DS into some existing shaders that use that awful function style.","> You'd have to parse and automatically restructure the HLSL to fix\r\n\r\nI think this is what the effect-compiler tool (fxc) does. Though I can't seem to find documentation on it. \r\n\r\nThis is a bit tricky to do for us right now since our effects parser is very limited. Once we switch to a more complete parsing approach, rewriting the parameter order should become pretty doable with some syntax tree manipulations.","It would require adding SharpDX.Direct3D11 as a dependency but as far as I'm aware the signature checking functions don't require an actual device context to be active, so could maybe at least provide an error ahead of time. Granted I've never bothered with using them since turning on the debug layer has it screaming at you about signature compliance.\r\n\r\nO\/T: Is there anything more detailed on the 2MGFX pipeline and where it's going? It's seemingly stagnated so long that I just said screw it and added GS\/HS\/DS a few days ago despite some minor confusion with d3dx_state's *operation* field and some seemingly nonsensical parser constructs for parameters ([commits](https:\/\/github.com\/JSandusky\/MonoGame\/commits\/develop), runtime untested - compiling checks out so far). It felt like everything in there was being pulled all sorts of ways."],"labels":["MGFX","DirectX"]},{"title":"A question about widely misused finalizers and dispose","body":"I've been delving in the code and I've found a lot of classes that implement Dispose pattern not correctly.\r\n\r\n1. Some of them try to emulate destructor semantics with a finalizer (which is considered an anti-pattern) to interact with global singletons. Although it is ugly and unreadable and a few classes do it in an unsafe way, (for example, `Game` with `ANDROID` defined, `GamePlatform`, etc.), I can understand their existence.\r\n2. Some classes implement finalizes that do nothing useful at all. They are either empty or delegate their functions to some helper methods that do nothing meaningful for finalization (`VideoContent`, `SoundEffect`, `SoundEffectInstance`, `AudioEngine`, `SoundBank`, `WaveBank`, `ContentManager`, etc.) \r\n3. `GameComponent` defines completely meaningless finalizer that can only call the logic defined in his children, which is not needed because the children should provide their own finalizers if they work with unmanaged resources\r\n4. Some classes seem to rely on the order of finalization (they try to dispose other entities through references and it is only meaningful if the entities have not been finalized) which is undetermined.\r\n\r\nTo cut the long story short, I've found few classes with finalizers that actually work with `GCHanldes` or unmanaged pointers.\r\n\r\nCan someone explain me the reason why? Is it a natural artefact of the long going development (as I see in the history, some of the finalizers were removed\/deprecated once, but came back later) or is there any greater meaning to them?","comments":["The reason for things being as they are is historic, it wasn't planned to have the finalizers implemented as they are now.\r\n\r\nMG is a project that's been in development for a long time. Lots of different people touch the code and everyone has their own way of doing things. It seems in the early days things were checked less by a central group of people so code is less consistent. And of course good practices change over time.\r\n\r\nThere's definitely room for improvement to provide consistent and correct implementations for finalizers and dispose. A pull request that fixes these issues would be much appreciated. ","@Jjagg could you please provide a little guidance to me? As i started refactoring finalizers, I'm obviously in need of running tests. Is `MonoGameTests.exe` a confessional way of running tests? Also what result should I expect?\r\nI've got\r\n```\r\nTest Run Summary\r\n  Overall result: Warning\r\n  Test Count: 1292, Passed: 1272, Failed: 0, Warnings: 0, Inconclusive: 0, Skipped: 20\r\n    Skipped Tests - Ignored: 20, Explicit: 0, Other: 0\r\n```\r\nAre there any other tests I should run?","@quixoticaxis Yes, those are the tests you should run. If you set up a pull requests the build bot will run the tests as well, on Windows and on Mac, so you don't *have* to run them locally."],"labels":["Maintenance","Help Wanted","Question"]},{"title":"3.7.0.1465 - Crash when loading FBX files with Open Asset Importer","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build insaller from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\nWhen I try to load a model processed with FBX model with Open Asset Importer, I get this exception:\r\n\r\n```\r\nMicrosoft.Xna.Framework.Content.ContentLoadException\r\n  HResult=0x80131500\r\n  Message=Could not find ContentTypeReader Type. Please ensure the name of the Assembly that contains the Type matches the assembly in the full type name: Microsoft.Xna.Framework.Content.ReflectiveReader`1[[Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent, MonoGame.Framework.Content.Pipeline, Version=3.7.0.1465, Culture=neutral, PublicKeyToken=null]] (Microsoft.Xna.Framework.Content.ReflectiveReader`1[[Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent, MonoGame.Framework.Content.Pipeline]])\r\n  Source=MonoGame.Framework\r\n  StackTrace:\r\n   at Microsoft.Xna.Framework.Content.ContentTypeReaderManager.LoadAssetReaders(ContentReader reader)\r\n   at Microsoft.Xna.Framework.Content.ContentReader.InitializeTypeReaders()\r\n   at Microsoft.Xna.Framework.Content.ContentReader.ReadAsset[T]()\r\n   at Microsoft.Xna.Framework.Content.ContentManager.ReadAsset[T](String assetName, Action`1 recordDisposableObject)\r\n   at Microsoft.Xna.Framework.Content.ContentManager.Load[T](String assetName)\r\n   at Sandbox1.Game1.LoadContent() in F:\\_ScrachSpace\\_Monogame\\WinDesktop 3DModel Sandbox\\Sandbox1\\Sandbox1\\Game1.cs:line 50\r\n   at Microsoft.Xna.Framework.Game.Initialize()\r\n   at Sandbox1.Game1.Initialize() in F:\\_ScrachSpace\\_Monogame\\WinDesktop 3DModel Sandbox\\Sandbox1\\Sandbox1\\Game1.cs:line 35\r\n   at Microsoft.Xna.Framework.Game.DoInitialize()\r\n   at Microsoft.Xna.Framework.Game.Run(GameRunBehavior runBehavior)\r\n   at Microsoft.Xna.Framework.Game.Run()\r\n   at Sandbox1.Program.Main() in F:\\_ScrachSpace\\_Monogame\\WinDesktop 3DModel Sandbox\\Sandbox1\\Sandbox1\\Program.cs:line 18\r\n\r\n```\r\n\r\nSomething to do with `Microsoft.Xna.Framework.Content.ReflectiveReader`.\r\n\r\nThe FBX model processed with FBX Importer loads fine.\r\n\r\nThe reason I want to try using Open Asset Importer is because the current version of FBX Importer is processing the specular lighting in a different way than previous versions, giving a \"light burnt\" look to our current renders.\r\n\r\nI don't know if the specular change in FBX Importer is a fix, but it certainly looks different than how XNA looked like.\r\n\r\nExample FBX: [Content.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/1894503\/Content.zip)\r\n- When processed with FBX importer, it loads fine but it renders light-burnt\r\n- When processed with Open Asset Importer, it crashes on load.\r\n\r\nAs a side note, if Monogame Framework crashes when trying to load the file, I would suggest the content pipeline processor to try reload the assets it creates, just to ensure they crash at build time and not at runtime.\r\n\r\nRelated to #6179 and https:\/\/github.com\/MonoGame\/MonoGame\/commit\/35c152856d3aa9585219c1da195c61e096430288\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.0.1465\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- ie. DesktopGL, WindowsDX, WindowsUWP, Android:-->\r\n- DesktopGL\r\n","comments":["CC. @tomspilman ","Would like to add that I have this issue with every model format. I have to load OBJs with the FBX importer (not sure why that works, someone who is more familiar maybe able to tell me).","This should be closed as a duplicate of https:\/\/github.com\/MonoGame\/MonoGame\/issues\/6179 to keep everything tidy :)."],"labels":["ContentPipeline"]},{"title":"Update PVRTexLibNET","body":"Update to the latest PVRTexLibNET (ensure it is using the latest official PVRTexLib).\r\n\r\nWe should fork....\r\n\r\n https:\/\/github.com\/flyingdevelopmentstudio\/PVRTexLibNET\r\n\r\n... and setup the build server to build it just like we did NVTT and other dependencies.\r\n","comments":[],"labels":["Maintenance"]},{"title":"[WinDX] Handle \"graphics device removed\" scenario","body":"Occasionally I get a crash report due to a SharpDX exception with error code `DXGI_ERROR_DEVICE_REMOVED`. I know this can happen normally due to a number of reasons (e.g. video card removed, driver upgrade, driver error, etc).\r\n\r\nThe reason I am raising this issue is because XNA seems to handle this scenario gracefully and recover from it automatically. Whereas MonoGame currently just silently swallows the exception when it first occurs in `GraphicsDevice.Present()`, which then results in it just being thrown in the next place which happens to try to do something relating to the graphics device. (N.B. I tested this using `dxcap -forcetdr` as described [here](https:\/\/docs.microsoft.com\/en-us\/windows\/uwp\/gaming\/handling-device-lost-scenarios#testing-device-removed-handling))\r\n\r\nSo ideally, MonoGame should also be able to recover from this. I took a look into how to do this, and found the following article which describes how this scenario should be handled:\r\nhttps:\/\/docs.microsoft.com\/en-us\/windows\/uwp\/gaming\/handling-device-lost-scenarios\r\n\r\nBasically, the Direct3D device must be reinitialised which is straightforward enough to do. But, all device-dependent resources must also be recreated. So using a texture as an example, I imagine this means that the original data must be kept so that it can be used to later recreate the texture after the device has been reinitialised.\r\n\r\nI started messing around with this and seemed to get the device reinitialised correctly, but got stuck on the resource recreation part. fwiw, here's my code from `GraphicsDevice.DirectX.PlatformPresent()`:\r\n```csharp\r\ntry\r\n{\r\n    var syncInterval = PresentationParameters.PresentationInterval.GetSyncInterval();\r\n\r\n    \/\/ The first argument instructs DXGI to block n VSyncs before presenting.\r\n    lock (_d3dContext)\r\n        _swapChain.Present(syncInterval, PresentFlags.None);\r\n}\r\ncatch (SharpDX.SharpDXException ex)\r\n{\r\n    if ((ex.ResultCode == SharpDX.DXGI.ResultCode.DeviceRemoved) || (ex.ResultCode == SharpDX.DXGI.ResultCode.DeviceReset))\r\n    {\r\n        _swapChain.Dispose();\r\n        _swapChain = null;\r\n        CreateDeviceResources();\r\n        Reset();\r\n    }\r\n    else\r\n    {\r\n        throw;\r\n    }\r\n}\r\n```\r\nSo I'm not really too sure how to proceed with this. I'm hoping someone else may be able to help out here or offer some insight. But at the very least, I'd say that `GraphicsDevice.DirectX.PlatformPresent()` should stop swallowing the SharpDX exceptions as that just muddles the true source of the error.","comments":["I think this is related to #2539.\r\n\r\nIn XNA, the GraphicsDevice has a DeviceResourceManager which keeps track of all the resources. When the device has been lost and the GraphicsDevice is being reset, the DeviceResourceManager checks all its resources of type IDynamicGraphicsResource and triggers their ContentLost event. This allows the developer to recreate these resources. Examples of classes that implement IDynamicGraphicsResource in XNA are RenderTargets and Dynamic Vertex and Index buffers.","Android already does similar for when an activity is recreated.  See `ContentManager.ReloadGraphicsContent()`.  Explicitly created resources such as RenderTargets, textures loaded through `FromStream()` and buffers need to be recreated by the developer because they are in the best position to know how to recreate their own resources.  That is what the `DeviceLost` and `DeviceReset` events in `GraphicsDevice` are for.  Android makes sure the `OnDeviceReset` event is triggered after it has called `ReloadGraphicsContent()`.\r\n\r\nXNA does indeed have internal interfaces `IGraphicsResource` and `IDynamicGraphicsResource` that appear to try to copy the data for recreation of the resource, but if the device is lost or reset, how do you get the data that was in the buffer?","I was indeed talking about explicitly created resources. Before MonoGame we used XNA and a DeviceLost event was quite common under DirectX9 (e.g. lock your screen or screensaver kicked in). The ContentLost event of the DynamicVertexBuffers we used to recreate the buffers by filling them from source data. In our case these were used for height map tiles in a quadtree. (the reason we use dynamic buffers is because the source data is modified in realtime by excavation equipment so the tiles need to be updated contantly).\r\nSince I use MonoGame I didn't get DeviceLost events anymore, but I believe that is because it works differently in DirectX11.","Thanks for the insight guys!\r\n\r\nI tested a few different texture sources in XNA to see what would happen to them after forcing a \"device removed\" event. This is what I tested:\r\n\r\n- `Texture2D` loaded from an XNB via the content manager\r\n- `Texture2D` loaded from a PNG using `FromStream`\r\n- `Texture2D` programmatically created using `SetData`\r\n- `RenderTarget2D` with `RenderTargetUsage.PreserveContents` filled with a colour\r\n\r\nAlso note that `RenderTarget2D` has the `ContentLost` event, whereas `Texture2D` does not.\r\n\r\nAll of the `Texture2D`'s were automatically restored by XNA after the device was \"removed\". However, the `RenderTarget2D` was not restored and was blank afterwards. It's `ContentLost` event was fired though.\r\n\r\nSo it seems like graphics resources with the `ContentLost` event (I assume this must be from the mentioned `IDynamicGraphicsResource`) are expected to be recreated by the developer when the event is fired. Whereas graphics resources without this event (`IGraphicsResource` I'm guessing) seem to be automatically restored.\r\n\r\nSo in regards to XNA automatically restoring `Texture2D`'s (regardless of their source) and how it might be doing that - The only thing I can think of is that before it creates the texture on the GPU, it must be keeping a copy of the original data. And then when the device is reset, it copies that data back to the GPU again.\r\n\r\nThis should be easy enough to do in MonoGame (for WinDX at least), but will obviously use more memory.\r\n\r\nAny thoughts on this?","XNA uses a resource manager to store all device resources. These resources are stored in (system) memory as `WeakReferences`. When the device is lost, the resource manager will try to recreate all resources of type `IGraphicsResource` by restoring the data from system memory. The `IDynamicGraphicsResources` can't be restored like this (since their data is dynamic), so their ContentLost event is triggered in that case to allow the developer to restore them.\r\n\r\nWhen you memory profile XNA, all these WeakReferences are probably what make up the large unmanaged memory block. So this indeed uses more memory (system memory that is, not GPU memory).\r\n\r\nI'm not sure how MonoGame handles this, but I didn't find a similar mechanism yet. I also didn't encounter DeviceLost events anyway, but I read that DeviceLost events occur less often in DirectX11 than they did in DirectX9 (XNA).","Thanks @harmwind.\r\n\r\nI might try and take another crack at this if I can find some time. But I'm not going to worry about replicating these internals since they're not part of XNA's public API. Please let me know if you think these are actually required though (cc @KonajuGames @tomspilman).\r\n\r\nWhat I'm taking from this is that the original resource data is kept in system memory and restored automatically when the device is lost. And for any resources with a `ContentLost` event (i.e. the \"dynamic\" resources), they won't do this but they must fire this event when the device is lost (btw, XNA also seems to fire this when manually calling `GraphicsDevice.Reset`).\r\n\r\nAnd I'll also make sure that the [`GraphicsDevice.DeviceLost`](https:\/\/docs.microsoft.com\/en-us\/previous-versions\/windows\/xna\/bb196147(v=xnagamestudio.41)) event is fired when the device is lost (same as XNA).\r\n\r\n> I also didn't encounter DeviceLost events anyway, but I read that DeviceLost events occur less often in DirectX11 than they did in DirectX9 (XNA).\r\n\r\nThis is my understanding as well from what I've read. Apparently this is mainly due to DX9 treating the graphics device as an exclusive resource (so it's \"lost\" every time something else takes focus), whereas DX11 treats it as a shared resource. They do still happen though, just much less often. The differences are desribed a bit more [here](https:\/\/docs.microsoft.com\/en-us\/windows\/uwp\/gaming\/handling-device-lost-scenarios).","For me it hasn't been an issue yet that this part from XNA seems to be missing in MonoGame. XNA was only a small part of our software suite and only last month I found time to finally migrate from XNA to MonoGame (allowing us to go 64 bit and have a library that is maintained and worked on actively).\r\nThe `ContentLost` events of `IDynamicGraphicsResource` was the only part (in our code) that was not implemented in MonoGame and I found issue #2539 describing this.\r\n\r\nI'm not sure whether this automatic restore mechanism and firing of ContentLost events should be implemented. Our software will soon be field tested (with MonoGame) and then we'll know if DeviceLost events will still occur.\r\nRemoving a video card or updating a driver are not scenario's that need to be supported while running the software and I think this also applies to most games.\r\n\r\nMonoGame is already used for many different games and applications and the fact that only few people have noticed this automatic resource restoring is missing indicates that it's not really an issue.\r\nDid you encounter it yourself already or only by triggering is by using `forcetdr`?","@harmwind Yeah, I've received several crash reports from players of my game relating to this. It's not common, but it does happen on occasion. I'd definitely prefer to recover from it gracefully if possible rather than my players getting a crash or a message telling them to restart the game.","@MichaelDePiazzi \r\nat some point you might want to call the `ContentManager.ReloadGraphicsContent()`.\r\n\r\nFYI, there is a bug there that cause memory leaks.\r\n1) Some readers will create a new resource instead of reloading the `existingInstance`. The old resource remains in the .disposableAssets and .loadedAssets.\r\n2) The ContentManager does not lookup the `existingInstance` of Shared and Embedded resources. One example are the VertexBuffers and  IndexBuffers of `Model`. \r\n\r\nhere is an old PR with all the necessary fixes.  #3725","@nkast\r\nCould you explain why the old PR (#3725) was closed? Was it because WP8 support was dropped?\r\nI think it is still relevant to other platforms. ","I don't quite remember but probably it was after the WP8 drop and\/or a clean up of stagnant branches.\r\nI still have a patch with those changes in my fork and never had an issue, although the `ReloadGraphicsContent()` code path is not actively used nowadays.\r\n","Thanks @nkast, I will definitely keep all of that in mind. Although for WinDX desktop, it seems like it will be easier and faster to just keep a copy of the data in system memory.\r\n\r\n> ReloadGraphicsContent() code path is not actively used nowadays.\r\n\r\nActually, @KonajuGames mentioned that it was being used by Android. So in this case I'd assume the fixes in your PR would still be useful, right?","I thought xna just called Load() again on a device reset and set these callback flags for stuff the user didn't put in load content that he needed to manually reload or reset himself. So if you set up your rendertargets in load shouldn't they get recreated as well ?\r\nNot sure on that but...","> I thought xna just called Load() again on a device reset\n\nIf I understand you correctly, you're talking about how it was in XNA 1.0, but they changed this behavior in XNA 2.0 so the user no longer has to worry about device lost.\n\nDetails in a blog post by our Lord and savior Shawn Hargreaves: https:\/\/blogs.msdn.microsoft.com\/shawnhar\/2007\/12\/12\/virtualizing-the-graphicsdevice-in-xna-game-studio-2-0\/ ","> I thought xna just called Load() again on a device reset \r\n\r\nYeah it doesn't.\r\n\r\n> t seems like it will be easier and faster to just keep a copy of the data in system memory.\r\n\r\nThat should be our path forward on desktop systems where this matters.  Note this is a platform specific solution, so it shouldn't be in common code... but in code only executed by platforms that need it.\r\n\r\nDoes OpenGL on Mac\/Linux have \"device lost\" like events and do we need to restore static texture resources?  Or is this just a DirectX on Windows issue?  Does it affect iOS?  @cra0zy  @dellis1972 ?\r\n\r\nAndroid does have this issue... but we solve it by loading from disk as it is not feasible to keep them in memory.  That said... would it be better if we hit disk on Windows too?\r\n","> `FromStream()`\r\n\r\nI bet XNA restores textures loaded via `Texture2D.FromStream()` .\r\n\r\nAlso i bet if you `SetData` on a loaded texture from either `ContentManager` or `FromStream` that XNA restores it including the modifications at runtime.  This then means it always modifies the system memory cache first then copies it back to the GPU.\r\n\r\nThis is likely why they do not load content back from disk as they couldn't reproduce the modifications done at runtime.\r\n\r\nBut again remember... this only happens in the case of a GPU failure of some sort.  It does seem like alot of overhead and trouble for an infrequent issue.  Still we want to be XNA compatible... so we should do it.","> I bet XNA restores textures loaded via Texture2D.FromStream() .\r\n\r\nYeah, it does. I tested this and a few other cases (see https:\/\/github.com\/MonoGame\/MonoGame\/issues\/6265#issuecomment-375517548).\r\n\r\n> Also i bet if you SetData on a loaded texture from either ContentManager or FromStream that XNA restores it including the modifications at runtime.\r\n\r\nI hadn't specifically tested modifying a loaded texture, but just tried it then and can confirm that XNA also restores it including the modifications.\r\n\r\n> But again remember... this only happens in the case of a GPU failure of some sort. It does seem like alot of overhead and trouble for an infrequent issue. Still we want to be XNA compatible... so we should do it.\r\n\r\nYeah, it does seem like a lot of work for what is an infrequent issue. But I'd definitely prefer to recover from it gracefully if possible rather than my players getting a crash or a message telling them to restart the game. So if I can find some time, I will definitely take another crack at this. And, as you mentioned, I will make sure any changes for this are only in the WinDX platform specific code.","@MichaelDePiazzi\r\nI have been trying myself to reproduce the DeviceLost events, but have only been able to do so by triggering it with `dxcap -forcetdr`. I'm also worried a bit that my users will experience crashes due to this happening, but can't reproduce it. Even on Windows tablets changing the orientation or resolution during running is all working properly.\r\nDid you receive crash logs or stack traces from your users? If so I would like to know what can trigger a DeviceLost event using DirectX11 (other than removing the GPU or updating the driver).","@harmwind\r\nSame here. I've tried a few things, but the only way I've managed to trigger this is with `dxcap -forcetdr` also.\r\n\r\nAnd yes, I have received crash logs complete with stack traces from my users. Although they don't tell me a whole lot at the moment because:\r\n\r\n1. MonoGame is currently swallowing SharpDX exceptions on `Present`, so it ends up throwing from the next thing that does something with the graphics device. So it's difficult to know for sure if it was thrown from `Present` originally (although this is fairly likely based on what the DirectX documentation says).\r\n2. If you do get a device removed error, I found out you need to call [`GetDeviceRemovedReason`](https:\/\/msdn.microsoft.com\/en-us\/library\/windows\/desktop\/ff476526(v=vs.85).aspx) to find out why it was \"removed\". But I haven't started doing this yet.\r\n\r\nSo that I can get more info, I've patched MonoGame to no longer swallow the exception on `Present`. And then if it does happen, I'm calling `GetDeviceRemovedReason` and logging the result. But I haven't pushed this change to my users yet. I plan to soon though.\r\n\r\nI'm not sure of all of the scenarios that can cause a \"device removed\" error in DX11. But [the article I linked to earlier](https:\/\/docs.microsoft.com\/en-us\/windows\/uwp\/gaming\/handling-device-lost-scenarios) lists a few potential examples as follows:\r\n\r\n- The graphics driver is upgraded.\r\n- The system changes from a power-saving graphics adapter to a performance graphics adapter.\r\n- The graphics device stops responding and is reset.\r\n- A graphics adapter is physically attached or removed.\r\n\r\nAnd `GetDeviceRemovedReason` can return the following potential reasons:\r\n\r\n- `DXGI_ERROR_DEVICE_HUNG`: The application's device failed due to badly formed commands sent by the application. This is an design-time issue that should be investigated and fixed.\r\n- `DXGI_ERROR_DEVICE_REMOVED`: The video card has been physically removed from the system, or a driver upgrade for the video card has occurred. The application should destroy and recreate the device.\r\n- `DXGI_ERROR_DEVICE_RESET`: The device failed due to a badly formed command. This is a run-time issue; The application should destroy and recreate the device.\r\n- `DXGI_ERROR_DRIVER_INTERNAL_ERROR`: The driver encountered a problem and was put into the device removed state.\r\n- `DXGI_ERROR_INVALID_CALL`: The application provided invalid parameter data; this must be debugged and fixed before the application is released.","@MichaelDePiazzi \r\nOK, thanks for the info. In my case (MonoGame embedded in Winforms), I'm not using `Present` at all but instead I'm using `SwapChainRenderTargets` which have their own `Present`. All exceptions that occur there are also swallowed and ignored. The exceptions that occur are always SharpDX exceptions, but often not of the type DeviceRemoved or DeviceReset. I'm getting `SharpDX.SharpDXException: 'HRESULT: [0x80070057], Module: [General], ApiCode: [E_INVALIDARG\/Invalid Arguments], Message: The parameter is incorrect.`\r\nThe solution is however still the same (I used your code example from your first post) and put it in a separate public method for testing.\r\nIt is something we have to keep in mind when you find a way to properly recover and reload the graphics resources. When only using `SwapChainRenderTargets` it will be a bit more difficult to trigger the recover since the exception doesn't happen in the GraphicsDevice, but in the `SwapChainRenderTarget.Present` (which is called from user code)."],"labels":["DirectX","Help Wanted"]},{"title":"SetPosition not always working","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build insaller from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n\r\nI think Mouse.SetPosition sometimes does not move the cursor. This issue is similar to other issues (like https:\/\/github.com\/MonoGame\/MonoGame\/issues\/6210 , but it's closed now)\r\n\r\nPlease note that this bug is not the same as the issue where MouseState is not updated until the next frame. It's not that the values are not updated. The cursor is not moved.\r\n\r\nI've set up a 'working' example of the bug: https:\/\/github.com\/KakCAT\/mouseBugTest\r\n\r\nMove the mouse gently left to right provoking the recentering of the mouse. After some time (it's random, usually 10-20 seconds in my rig) the exception inside lastFrameMouseWasCentered is thrown.\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- Tested on latest build (3.7.1429)\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- ie. DesktopGL, WindowsDX, WindowsUWP, Android:-->\r\n- WindowsDX\r\n","comments":["We have the same problem with the same environment.\r\n\r\nOur workaround is to release the thread to the OS. Don't look nice but minimize the problem.\r\nWe also minimize the number of calls to SetPosition() by using an larger area (50% of window) to detect out of range before we center mouse position. This is how we changed PlatformSetPosition() in mouse.Windows.cs.\r\n\r\n        private static void PlatformSetPosition(int x, int y)\r\n        {\r\n            PrimaryWindow.MouseState.X = x;\r\n            PrimaryWindow.MouseState.Y = y;\r\n\r\n            var pt = Window.PointToScreen(new System.Drawing.Point(x, y));\r\n            SetCursorPos(pt.X, pt.Y);\r\n\r\n            \/\/ Detect SetPosition() problem\r\n            POINTSTRUCT point;\r\n            GetCursorPos(out point);\r\n            if ((point.X != pt.X) || (point.Y != pt.Y)) {\r\n                Thread.Sleep(0);\r\n                SetCursorPos(pt.X, pt.Y);\r\n                \/\/ Detect one second time (rare)\r\n                GetCursorPos(out point);\r\n                if ((point.X != pt.X) || (point.Y != pt.Y)) {\r\n                    Thread.Sleep(0);\r\n                    SetCursorPos(pt.X, pt.Y);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n","More test on this issue done. My previous workaround didn't work on all situation. Worked fine on my computer but not another.\r\n\r\nThe problem with SetPosition() (Mouse) is several.\r\n1. We assume that GetCursorPos() should return same value after SetCursorPos() but it's not the case.\r\nInstead we should think of it as two ques in\/out to the OS. One that reads the position and one that updates the position (magic happens behind our control)\r\n\r\n2. The MouseState is updated always before the main Update() is done. Even if we not using a mouse. Monogame should instead always read the position when we call Mouse.GetState().\r\n\r\n3. The position might have changed when we call Mouse.GetState() and SetPosition() updates the internal mouse X,Y position. But should not. \r\n\r\nHow to fix this issue is to move update when GetState is called and ignore updating X\/Y position when SetPosition() is done. Make it clear that GetState and SetPostion not always follow each other if we use them fast. It would also make sense to make the Setters in MouseState public.\r\n \r\nHow do we then check mouse movement when centering the mouse every frame.\r\nRead mouse position GetCursorPos()\/GetState() and update the Diff X\/Y from center position then\r\nUse SetCursorPos()\/SetPosition() to center the mouse again. If we do this on a regular rate the Diff X\/Y work like expected. Suggested changes must be done. \r\nI do think this can be done for windows without breaking monogame compatibility.\r\n\r\n","Hi @svantechgit ,\r\n\r\nwhat I did in the prototype game where I had to use it was  the following:\r\n\r\nframe N:   SetCursorPos + raise a flag \"lastFrameChangedCursorPos\"\r\nframe N+1: GetCursorPos . If cursor out of the 'cage' && lastFrameChangedCursorPos supose the SetCursorPos has failed and SetCursorPos it again (but taking into account that previous frame the screen was moved and this frame has also moved, so just \"subtract\" the difference. Logic may vary depending on implementation ). Clear lastFrameChangedCursorPos\r\n\r\nIf the 'cage' is big enough only exageratedly fast and lengthy mouse movements should be lost (i.e. half screen length in a single frame)\r\n\r\n\r\nThis of course is a dirty hack around the limitation, and can't be implemented in MG as is, but may serve useful if somebody has to hack around it too meanwhile the problem is fixed. Being the game a minecraft-like one, the SetCursorPos loss was very very annoying."],"labels":["Windows","Input"]},{"title":"Support DXT1 cutout alpha","body":"Looks like we lost support of cutout alpha in DXT1 some time back.  The reason this is important is that DXT1 takes half the space of DXT3\/DXT5 so it is a big memory savings to use it for cutout alpha.\r\n\r\nThe two main issues that are blocking us are NVTT issues:\r\n\r\n  https:\/\/github.com\/castano\/nvidia-texture-tools\/issues\/283\r\n  https:\/\/github.com\/castano\/nvidia-texture-tools\/issues\/284\r\n\r\nOnce we resolve these we can enable this path in our texture processing again.","comments":[],"labels":["DirectX","Help Wanted"]},{"title":"Fix Ignored Unit Tests on Mac","body":"Here are the current unit tests that have been set to `[Ignore]` on the Mac test pass:\r\n\r\n```\r\nIgnored : MonoGame.Tests.ContentPipeline.BuilderTargetsTest.BuildSimpleProject(\"msbuild\") OneTimeSetUp:\r\nFails on Mac build server with xbuild for some reason.\r\n \r\nIgnored : MonoGame.Tests.ContentPipeline.BuilderTargetsTest.BuildSimpleProject(\"xbuild\") OneTimeSetUp:\r\nFails on Mac build server with xbuild for some reason.\r\n \r\nIgnored : MonoGame.Tests.ContentPipeline.IntermediateDeserializerTest.Colors\r\nFails on Mac build server some reason.\r\n \r\nIgnored : MonoGame.Tests.ContentPipeline.OpenAssetImporterTests.BlenderTests\r\nThis crashes inside Assimp on Mac!\r\n \r\nIgnored : MonoGame.Tests.Framework.GameComponentTest.InitializeOrderTest\r\nThis crashes inside SDL on Mac!\r\n \r\nIgnored : MonoGame.Tests.GameTest+Misc.ExitHappensAtEndOfTick\r\n This crashes inside SDL on Mac!\r\n \r\nIgnored : MonoGame.Tests.Graphics.EffectTest.EffectParameterShouldBeSetIfSetByNameAndGetByIndex\r\nFails under OpenGL!\r\n \r\nIgnored : MonoGame.Tests.Graphics.GraphicsDeviceManagerFixtureTest.MultiSampleCountRoundsDown\r\n Expected 2 but got 3. Needs Investigating\r\n \r\nIgnored : MonoGame.Tests.Graphics.GraphicsDeviceTest.VertexSamplerStatesGetSet\r\nVertex samplers are not implemented for OpenGL\r\n \r\nIgnored : MonoGame.Tests.Graphics.GraphicsDeviceTest.VertexTexturesGetSet\r\n Vertex Textures are not implemented for OpenGL\r\n \r\nIgnored : MonoGame.Tests.Graphics.GraphicsDeviceTest.VertexTextureVisualTest\r\n Vertex Textures are not implemented for OpenGL\r\n \r\nIgnored : MonoGame.Tests.Graphics.RenderTarget2DTest.ZeroSizeShouldFailTest\r\n This test causes the unit test runner to lock up and not exist. Resource leak of some sort? Threading?\r\n \r\nIgnored : MonoGame.Tests.Graphics.RenderTargetCubeTest.ZeroSizeShouldFailTest\r\n This test causes the unit test runner to lock up and not exist. Resource leak of some sort? Threading?\r\n \r\nIgnored : MonoGame.Tests.Graphics.SamplerStateTest.VisualTestComparisonFunction\r\n Comparison samplers are ps_4_0 and up, cannot use them on DesktopGL due to MojoShader\r\n \r\nIgnored : MonoGame.Tests.Graphics.SpriteBatchTest.Draw_many\r\n OpenGL produces a slightly different result\r\n \r\nIgnored : MonoGame.Tests.Graphics.Texture2DNonVisualTest.LoadOddSizedDxtCompressed\r\nPlatformGetData fails under OpenGL!\r\n \r\nIgnored : MonoGame.Tests.Graphics.Texture2DTest.ShouldSetAndGetDataForTextureArray(1,1)\r\nOneTimeSetUp: Not yet implemented in OpenGL\r\n \r\nIgnored : MonoGame.Tests.Graphics.Texture2DTest.ShouldSetAndGetDataForTextureArray(8,8)\r\nOneTimeSetUp: Not yet implemented in OpenGL\r\n \r\nIgnored : MonoGame.Tests.Graphics.Texture2DTest.ShouldSetAndGetDataForTextureArray(31,7)\r\nOneTimeSetUp: Not yet implemented in OpenGL\r\n \r\nIgnored : MonoGame.Tests.Graphics.VertexBufferTest.ShouldThrowHelpfulExceptionWhenVertexFormatDoesNotMatchShader \r\ne should figure out if there's a way to check this in OpenGL\r\n\r\nIgnored : MonoGame.Tests.Visual.MiscellaneousTests.DrawOrder_falls_back_to_order_of_addition_to_Game\r\n Microsoft.Xna.Framework.Graphics.MonoGameGLException :\r\nGL.GetError() returned 1286. Invesigate \r\n```\r\n\r\nThese need to be investigated and fixed.","comments":["I investigated on **MonoGame.Tests.Graphics.EffectTest.EffectParameterShouldBeSetIfSetByNameAndGetByIndex**. And it turns out, that the provided Resource BasicEffect.ogl.mgfxo has a different parameters order than the original file BasicEffect.fx. in the case of OpenGL FogColor has Index 0 and DiffuseColor has Index 1.\r\nMy first guess would be, that the OpenGL converter (2MGFX) rearranged the parameters.\r\nI'm new, so I'm not sure what is the best approach. Is it worth to investigate if a recompilation of mgfxo fix it, or dig deeper in the 2MGFX converter and find the rearranging?","Thanks for wanting to help our @griseus!\r\nIMO that's a very low priority issue and there's a plan to replace the current MGFX implementation (see #2167). MGFX is also very complex to get into. I think our time is better spent in other places :) ","FYI, since SDL 2.0.14 (which implemented a threading requirement from Apple), it is no more possible to run the tests on macOS with NUnit (because NUnit can't run tests on the main thread by design, and SDL needs that the GL context is created on the main thread, otherwise the thread will lock itself).\r\n\r\nFor now the macOS tests are disabled, and as far as I've looked into it, we would need to workaround NUnit.\r\n\r\nWe can run the DesktopGL tests on Windows and\/or Linux as a possible workaround, but we'll likely miss some per-platform edge cases (and it seems that an OpenAL test fails on Windows only)."],"labels":["Linux","MacOS","OpenGL","Maintenance","Testing","Help Wanted"]},{"title":"Array of float\/float3 in HLSL translates as an array of zeros when running app","body":"#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n- WindowsDX\r\n\r\nI don't know if https:\/\/github.com\/MonoGame\/MonoGame\/issues\/6184 is related to this or if I set up my array in a wrong way ?\r\nI'm wondering why no one has noticed this before ?\r\n\r\nThe shader's code:\r\n```\r\n#if OPENGL\r\n\t#define SV_POSITION POSITION\r\n\t#define VS_SHADERMODEL vs_3_0\r\n\t#define PS_SHADERMODEL ps_3_0\r\n#else\r\n\t#define VS_SHADERMODEL vs_4_0\r\n\t#define PS_SHADERMODEL ps_4_0\r\n#endif\r\n\r\n\/\/-----------------------------------------\r\n\/\/ Textures\r\ntexture DepthBuffer;\r\nsampler2D depthSampler = sampler_state\r\n{\r\n\tTexture = < DepthBuffer > ;\r\n\tMipFilter = LINEAR;\r\n\tMagFilter = LINEAR;\r\n\tMinFilter = LINEAR;\r\n\tAddressU = Clamp;\r\n\tAddressV = Clamp;\r\n};\r\n\r\ntexture NormalBuffer;\r\nsampler2D normalSampler = sampler_state\r\n{\r\n\tTexture = < NormalBuffer > ;\r\n\tMipFilter = LINEAR;\r\n\tMagFilter = LINEAR;\r\n\tMinFilter = LINEAR;\r\n\tAddressU = Clamp;\r\n\tAddressV = Clamp;\r\n};\r\n\r\ntexture RandomMap;\r\nsampler2D randomSampler = sampler_state\r\n{\r\n\tTexture = < RandomMap > ;\r\n\tMipFilter = POINT;\r\n\tMagFilter = POINT;\r\n\tMinFilter = POINT;\r\n\tAddressU = WRAP ;\r\n\tAddressV = WRAP ;\r\n};\r\n\r\n\/\/-------------------------------\r\n\/\/ Structs\r\n\/\/-------------------------------\r\nstruct VertexShaderInput\r\n{\r\n\tfloat4 Position : SV_POSITION;\r\n\tfloat2 TexCoord : TEXCOORD0;\r\n};\r\n\r\nstruct VertexShaderOutput\r\n{\r\n\tfloat4 Position : POSITION0;\r\n\tfloat2 Tex0 : TEXCOORD0;\r\n\t\/\/float2 TexCoordHalfBuffer : TEXCOORD1;\r\n};\r\n\r\nfloat3 normal_from_depth(float depth, float2 texcoords)\r\n{\r\n\tconst float2 offset1 = float2(0.0,0.001);\r\n\tconst float2 offset2 = float2(0.001,0.0);\r\n\t\r\n\tfloat depth1 = tex2D(depthSampler, texcoords + offset1).r;\r\n\tfloat depth2 = tex2D(depthSampler, texcoords + offset2).r;\r\n\t\r\n\tfloat3 p1 = float3(offset1, depth1 - depth);\r\n\tfloat3 p2 = float3(offset2, depth2 - depth);\r\n\t\r\n\tfloat3 normal = cross(p1, p2);\r\n\tnormal.z = -normal.z;\r\n\t\r\n\treturn normalize(normal);\r\n}\r\n\r\nfloat4 ps_ssao(VertexShaderOutput input): COLOR\r\n{ \r\n\t\/\/const float total_strength = 1.0;\r\n\tconst float total_strength = 01.750;\r\n\tconst float base = 0.2;\r\n\t\r\n\tconst float area = 0.0075;\r\n\tconst float falloff = 0.000001;\r\n\t\r\n\tconst float radius = 0.0002;\r\n\t\r\n\tconst int samples = 16;\r\n\tfloat3 sample_sphere[samples] = {\r\n\t\tfloat3( 0.5381, 0.1856,-0.4319), float3( 0.1379, 0.2486, 0.4430),\r\n\t\tfloat3( 0.3371, 0.5679,-0.0057), float3(-0.6999,-0.0451,-0.0019),\r\n\t\tfloat3( 0.0689,-0.1598,-0.8547), float3( 0.0560, 0.0069,-0.1843),\r\n\t\tfloat3(-0.0146, 0.1402, 0.0762), float3( 0.0100,-0.1924,-0.0344),\r\n\t\tfloat3(-0.3577,-0.5301,-0.4358), float3(-0.3169, 0.1063, 0.0158),\r\n\t\tfloat3( 0.0103,-0.5869, 0.0046), float3(-0.0897,-0.4940, 0.3287),\r\n\t\tfloat3( 0.7119,-0.0154,-0.0918), float3(-0.0533, 0.0596,-0.5411),\r\n\t\tfloat3( 0.0352,-0.0631, 0.5460), float3(-0.4776, 0.2847,-0.0271)\r\n\t};\r\n\t\r\n\tfloat3 random = normalize( tex2D(randomSampler, input.Tex0 * 4.0).rgb );\r\n\t\r\n\tfloat depth = tex2D(depthSampler, input.Tex0).r;\r\n\t\r\n\tfloat3 position = float3(input.Tex0.x, input.Tex0.y, depth);\r\n\tfloat3 normal = normal_from_depth(depth, input.Tex0);\r\n\t\r\n\tfloat radius_depth = radius \/ depth;\r\n\tfloat occlusion = 0.0;\r\n\tfor(int i=0; i < samples; i++) {\r\n\t\r\n\t\tfloat3 ray = radius_depth * reflect(sample_sphere[i], random);\r\n\t\tfloat3 hemi_ray = position + sign(dot(ray,normal)) * ray;\r\n\t\t\r\n\t\tfloat occ_depth = tex2D(depthSampler, saturate(hemi_ray.xy)).r;\r\n\t\tfloat difference = depth - occ_depth;\r\n\t\t\r\n\t\tocclusion += step(falloff, difference) * (1.0-smoothstep(falloff, area, difference));\r\n\t}\r\n\t\r\n\tfloat ao = 1.0 - total_strength * occlusion * (1.0 \/ samples);\r\n\tfloat finalvalue = saturate(ao + base);\r\n\t\r\n\treturn float4(finalvalue, finalvalue, finalvalue, 1.0f);\r\n}\r\n\r\ntechnique BasicColorDrawing\r\n{\r\n\tpass P0\r\n\t{\r\n\t\tPixelShader = compile PS_SHADERMODEL ps_ssao();\r\n\t}\r\n};\r\n```\r\n(I know I'm not yet using NormalBuffer nor NormalBuffer. But they are out of the scope of the problem.)\r\n\r\nIf I store the sample_sphere array out of the ps_ssao method, the resulting shader draws as if the values sampled from it were float3(0.0f, 0.0f, 0.0f), ie: if the array was filled with float3(0.0f, 0.0f, 0.0f)\r\n\r\nIs it better to store an array in a method or outside ? (I would say the 2nd is better but I'm no expert)","comments":["The shader with the array in out of the method:\r\n\r\n```\r\n#if OPENGL\r\n\t#define SV_POSITION POSITION\r\n\t#define VS_SHADERMODEL vs_3_0\r\n\t#define PS_SHADERMODEL ps_3_0\r\n#else\r\n\t#define VS_SHADERMODEL vs_4_0\r\n\t#define PS_SHADERMODEL ps_4_0\r\n#endif\r\n\r\n\/\/-----------------------------------------\r\n\/\/ Textures\r\ntexture DepthBuffer;\r\nsampler2D depthSampler = sampler_state\r\n{\r\n\tTexture = < DepthBuffer > ;\r\n\tMipFilter = LINEAR;\r\n\tMagFilter = LINEAR;\r\n\tMinFilter = LINEAR;\r\n\tAddressU = Clamp;\r\n\tAddressV = Clamp;\r\n};\r\n\r\ntexture NormalBuffer;\r\nsampler2D normalSampler = sampler_state\r\n{\r\n\tTexture = < NormalBuffer > ;\r\n\tMipFilter = LINEAR;\r\n\tMagFilter = LINEAR;\r\n\tMinFilter = LINEAR;\r\n\tAddressU = Clamp;\r\n\tAddressV = Clamp;\r\n};\r\n\r\ntexture RandomMap;\r\nsampler2D randomSampler = sampler_state\r\n{\r\n\tTexture = < RandomMap > ;\r\n\tMipFilter = POINT;\r\n\tMagFilter = POINT;\r\n\tMinFilter = POINT;\r\n\tAddressU = WRAP ;\r\n\tAddressV = WRAP ;\r\n};\r\n\r\nconst int samples = 16;\r\nfloat3 sample_sphere[16] = {\r\n\t\tfloat3( 0.5381, 0.1856,-0.4319), float3( 0.1379, 0.2486, 0.4430),\r\n\t\tfloat3( 0.3371, 0.5679,-0.0057), float3(-0.6999,-0.0451,-0.0019),\r\n\t\tfloat3( 0.0689,-0.1598,-0.8547), float3( 0.0560, 0.0069,-0.1843),\r\n\t\tfloat3(-0.0146, 0.1402, 0.0762), float3( 0.0100,-0.1924,-0.0344),\r\n\t\tfloat3(-0.3577,-0.5301,-0.4358), float3(-0.3169, 0.1063, 0.0158),\r\n\t\tfloat3( 0.0103,-0.5869, 0.0046), float3(-0.0897,-0.4940, 0.3287),\r\n\t\tfloat3( 0.7119,-0.0154,-0.0918), float3(-0.0533, 0.0596,-0.5411),\r\n\t\tfloat3( 0.0352,-0.0631, 0.5460), float3(-0.4776, 0.2847,-0.0271)\r\n\t};\r\n\r\n\/\/-------------------------------\r\n\/\/ Structs\r\n\/\/-------------------------------\r\nstruct VertexShaderInput\r\n{\r\n\tfloat4 Position : SV_POSITION;\r\n\tfloat2 TexCoord : TEXCOORD0;\r\n};\r\n\r\nstruct VertexShaderOutput\r\n{\r\n\tfloat4 Position : POSITION0;\r\n\tfloat2 Tex0 : TEXCOORD0;\r\n\t\/\/float2 TexCoordHalfBuffer : TEXCOORD1;\r\n};\r\n\r\nfloat3 normal_from_depth(float depth, float2 texcoords)\r\n{\r\n\tconst float2 offset1 = float2(0.0,0.001);\r\n\tconst float2 offset2 = float2(0.001,0.0);\r\n\t\r\n\tfloat depth1 = tex2D(depthSampler, texcoords + offset1).r;\r\n\tfloat depth2 = tex2D(depthSampler, texcoords + offset2).r;\r\n\t\r\n\tfloat3 p1 = float3(offset1, depth1 - depth);\r\n\tfloat3 p2 = float3(offset2, depth2 - depth);\r\n\t\r\n\tfloat3 normal = cross(p1, p2);\r\n\tnormal.z = -normal.z;\r\n\t\r\n\treturn normalize(normal);\r\n}\r\n\r\nfloat4 ps_ssao(VertexShaderOutput input): COLOR\r\n{ \r\n\t\/\/const float total_strength = 1.0;\r\n\tconst float total_strength = 01.750;\r\n\tconst float base = 0.2;\r\n\t\r\n\tconst float area = 0.0075;\r\n\tconst float falloff = 0.000001;\r\n\t\r\n\tconst float radius = 0.0002;\r\n\t\r\n\t\/*array was here*\/\r\n\t\r\n\tfloat3 random = normalize( tex2D(randomSampler, input.Tex0 * 4.0).rgb );\r\n\t\r\n\tfloat depth = tex2D(depthSampler, input.Tex0).r;\r\n\t\r\n\tfloat3 position = float3(input.Tex0.x, input.Tex0.y, depth);\r\n\tfloat3 normal = normal_from_depth(depth, input.Tex0);\r\n\t\r\n\tfloat radius_depth = radius \/ depth;\r\n\tfloat occlusion = 0.0;\r\n\tfor(int i=0; i < samples; i++) {\r\n\t\r\n\t\tfloat3 ray = radius_depth * reflect(sample_sphere[i], random);\r\n\t\tfloat3 hemi_ray = position + sign(dot(ray,normal)) * ray;\r\n\t\t\r\n\t\tfloat occ_depth = tex2D(depthSampler, saturate(hemi_ray.xy)).r;\r\n\t\tfloat difference = depth - occ_depth;\r\n\t\t\r\n\t\tocclusion += step(falloff, difference) * (1.0-smoothstep(falloff, area, difference));\r\n\t}\r\n\t\r\n\tfloat ao = 1.0 - total_strength * occlusion * (1.0 \/ samples);\r\n\tfloat finalvalue = saturate(ao + base);\r\n\t\r\n\treturn float4(finalvalue, finalvalue, finalvalue, 1.0f);\r\n}\r\n\r\ntechnique BasicColorDrawing\r\n{\r\n\tpass P0\r\n\t{\r\n\t\tPixelShader = compile PS_SHADERMODEL ps_ssao();\r\n\t}\r\n};\r\n```\r\n\r\nAnd the effect read in game:\r\n![image](https:\/\/user-images.githubusercontent.com\/19704413\/37402146-c138d83c-278a-11e8-9ff4-d7327ed079cf.png)\r\n\r\nMy test projects with references to Monogam's sources\r\n[____TestShadersArrays 180314 133250.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/1811015\/____TestShadersArrays.180314.133250.zip)\r\n\r\nWhen I stop in ```private static EffectParameterCollection ReadParameters(BinaryReader reader)```,\r\nLine 402,\r\n(count = 16)\r\neach float3 gives:\r\n\r\nclass_ = Vector\r\ntype = Single\r\nname = \"sample_sphere\"\r\nsemantic = \"\"\r\n\/\/annotations is empty\r\nrowCount = 1\r\ncolumnCount = 3\r\n\r\nelements:\r\n![image](https:\/\/user-images.githubusercontent.com\/19704413\/37402844-43840120-278d-11e8-9e07-14c2c3ee9833.png)\r\n\r\n\r\n\r\n","I might be running into a similar \/ related issue with arrays in my shader.\r\n\r\nI posted a comment about it in the Monogame community forums:\r\n\r\nhttp:\/\/community.monogame.net\/t\/arrays-in-shader-fx-not-working-for-opengl\/10502\r\n\r\n","This is a bug in MGFXC. It doesn't store default values for arrays properly. You can initialize the array from C# yourself though.\r\n\r\nIf you are not planning to set the array values from C#, you should turn this into a static array, which will solve the problem:\r\n```static float3 sample_sphere[samples] = ...```\r\nThis will make it a real HLSL constant, rather than a shader parameter that get's initialized by MonoGame.\r\n\r\nI don't want to spend the time to fix this right now, but I can point out the basic problem. This line will only allocate data for the first element in the array:\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/2911bbb3bcc412aedc00c109f3a96bb2480b255f\/Tools\/MonoGame.Effect.Compiler\/Effect\/ConstantBufferData.sharpdx.cs#L31\r\nThe total byte size of the array is `vdesc.Description.Size`. But even if you fix this here, by making the data array large enough, this data will still not be written to the xnb file. The writer doesn't write the entire array at once, it wants to write each element individually. Parameters for the individual elements are being created, but the default value data doesn't get filled in:   \r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/2911bbb3bcc412aedc00c109f3a96bb2480b255f\/Tools\/MonoGame.Effect.Compiler\/Effect\/ConstantBufferData.sharpdx.cs#L121\r\n\r\nSo the solution is to either make the writer write the entire array at once, or make sure the individual elements get the default value data filled in."],"labels":["MGFX","DirectX"]},{"title":"3.7.0.1371 - Slow \/ Inconsistent Texture2D.SetData for DesktopGL Project","body":"I'm setting up a little project part of which emulates older hardware.\r\n\r\nAs a 41 year old, I remember the 'good ole' days of computers that didn't have any concept of a GPU or 'modern' graphics architecture, typically addressing memory directly for the display i.e. you draw the pixels directly, and no not in a shader :)\r\n\r\nIn my little project I have a tiny 128x128 texure and an array.  I set pixel data in the array and then use the SetData method in Texture2D to get that over to the GPU.  I know this process is inherently slow but its a small texture and should be fine for real time use.  I then upscale that using the GPU to draw my 'display'.\r\n\r\nHowever, on DesktopGL project the performance of SetData is erratic.  For example my timings for the same code using MG DirectX show SetData at a consistent ~0.2-0.3ms per execution across many reruns and for a decent period of time (same ~0.2-0.3ms when using FNA as an aside).\r\n\r\nBack on MG DesktopGL I'm seeing anywhere from ~0.5-16ms.  Sometimes its fine, sometimes it climbs in duration after 5-10 seconds, bizarrely if I move the MG game window around with my mouse it seems to drop back down and then climb again, can't figure it out!  Same behaviour on my Mac.\r\n\r\nSeems like a bug if MG DirectX is consistently ~0.3ms?  Any ideas?\r\n\r\nMonoGame - 3.7.0.1371\r\nWin 10 v1709\r\nVS Community 2017 15.5.2\r\n\r\nCode showing what I'm doing (totally unoptimised :)), hit the space bar to get your timings.\r\n\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\nusing Microsoft.Xna.Framework;\r\nusing Microsoft.Xna.Framework.Graphics;\r\nusing Microsoft.Xna.Framework.Input;\r\n\r\nnamespace _8bitDNA\r\n{\r\n    public class Game1 : Game\r\n    {\r\n        private GraphicsDeviceManager graphics;\r\n        private SpriteBatch spriteBatch;\r\n\r\n        Texture2D display;\r\n\r\n        byte[] rawData = new byte[128 * 128 * 4];\r\n\r\n        Stopwatch watch = new Stopwatch();\r\n        KeyboardState previousState;\r\n        private int frames = 0;\r\n\r\n        public Game1()\r\n        {\r\n            graphics = new GraphicsDeviceManager(this);\r\n            Content.RootDirectory = \"Content\";\r\n\r\n            graphics.PreferredBackBufferWidth = 512;\r\n            graphics.PreferredBackBufferHeight = 512;\r\n        }\r\n\r\n        protected override void Initialize()\r\n        {\r\n            display = new Texture2D(\r\n                GraphicsDevice,\r\n                128, 128,\r\n                false,\r\n                GraphicsDevice.PresentationParameters.BackBufferFormat);\r\n\r\n            watch = new Stopwatch();\r\n            previousState = Keyboard.GetState();\r\n            base.Initialize();\r\n        }\r\n\r\n        protected override void LoadContent()\r\n        {\r\n            spriteBatch = new SpriteBatch(GraphicsDevice);\r\n        }\r\n\r\n\r\n        protected override void UnloadContent()\r\n        {\r\n\r\n        }\r\n\r\n        protected override void Update(GameTime gameTime)\r\n        {\r\n            KeyboardState state = Keyboard.GetState();\r\n\r\n            if (state.IsKeyDown(Keys.Escape))\r\n                Exit();\r\n\r\n            if (state.IsKeyDown(Keys.Space) & !previousState.IsKeyDown(Keys.Space))\r\n            {\r\n                Console.WriteLine(watch.Elapsed.TotalMilliseconds \/ frames);\r\n                this.frames = 0;\r\n                this.watch.Restart();\r\n            }\r\n\r\n            previousState = state;\r\n\r\n            base.Update(gameTime);\r\n        }\r\n\r\n        protected override void Draw(GameTime gameTime)\r\n        {\r\n            setDisplayMemory();\r\n\r\n            watch.Start();\r\n            display.SetData(rawData);\r\n            watch.Stop();\r\n\r\n            spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.Opaque, SamplerState.PointClamp,DepthStencilState.None,RasterizerState.CullNone);\r\n            spriteBatch.Draw(display, new Rectangle(0, 0, 512, 512), Color.White);\r\n            spriteBatch.End();\r\n\r\n            frames++;\r\n            base.Draw(gameTime);\r\n        }\r\n\r\n        private void setDisplayMemory()\r\n        {\r\n            for (var x = 0; x < 128; x++)\r\n            {\r\n                for (var y = 0; y < 128; y++)\r\n                {\r\n                    rawData[((y * 128) + x) * 4] = 255;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n","comments":["Maybe the texture is locked while it's being used by the GPU. The 16ms you mentioned is very close to one frame. Maybe if you disable VSync and fixedTimeStep and measure it again you get a better idea as to what is going on.\r\n\r\nCan you try double buffering, using two textures and swap them on each frame?\r\n\r\n","@nkast - That is a good idea.\r\n\r\nAlso i wonder if our check there for blocking if the GL calls are not in the main thread are causing these stalls.  Specifically i mean our implementation of `Threading.BlockOnUIThread`.\r\n\r\nThe only other thing could be that the way we do SetData isn't efficient.  I know on DirectX can use an intermediate surface to receive the the data then copies to the final surface.  I wonder if that is something we should be doing in GL.\r\n\r\nAnyway... not a GL expert here.","Thanks for the info and advice @nkast and @tomspilman\r\n\r\nOk, a little more on this......\r\n\r\nIf I switch off VSync the SetData call is taking ~0.8ms per frame.  If I re-enable VSync again and switch off fixed time step the SetData call is taking ~16.5ms per frame (i.e. the whole frame).\r\n\r\nSwitching VSync off AND switching off a fixed time step the SetData call is taking ~0.1ms per frame.\r\n\r\nI don't quite understand those timings though.  I can't quite understand why the just the SetData calls alone would be quicker?  In my code you can see I'm isolating just the SetData call as I noticed whilst profiling it was the bottleneck.  I understand the frequency they get called would change but why will it perform better?  Sorry if I'm being a little thick!\r\n\r\nGoing to setup a little double buffer arrangement and report back, thanks for that tip @nkast","Ok, tried a quick double buffering approach and same timings as originally seen.  Seeing similar timings to my last post regarding VSync and fixed step disabling as well.  Not really sure where to go with it now as unfortunately I don't have the tech chops :(\r\n\r\nHeres my quick and dirty double buffering, 'doublebuffer' is a bool set at class level and 'display2' is simply another 128x128 texture with the same spec as 'display'.....\r\n\r\n```\r\n        protected override void Draw(GameTime gameTime)\r\n        {\r\n            setDisplayMemory();\r\n            spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.Opaque, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullNone);\r\n\r\n            watch.Start();\r\n            if(doublebuffer)\r\n            {\r\n                doublebuffer = false;\r\n                display.SetData(rawData);\r\n                spriteBatch.Draw(display2, new Rectangle(0, 0, 512, 512), Color.White);\r\n            }\r\n            else\r\n            {\r\n                doublebuffer = true;\r\n                display2.SetData(rawData);\r\n                spriteBatch.Draw(display, new Rectangle(0, 0, 512, 512), Color.White);\r\n            }\r\n            watch.Stop();\r\n\r\n            spriteBatch.End();\r\n\r\n            frames++;\r\n            base.Draw(gameTime);\r\n        }\r\n```","@8bitdna \r\nI think you should set and draw the same texture. Now you are Setting the texture that was scheduled for drawing in the previous frame and might still be locked by the GPU.\r\n\r\n@tomspilman \r\nThis reminds me of DynamicVertexBuffer and SetDataOptions.Discard. MG doesn't have something analogous for textures (a `DynamicTexture2D()`?). \r\n\r\n@8bitdna \r\nThe delay you see is the GPU blocking the thread until it's done rendering the texture from the previous frame, which is as much as one VSync behind. This article describes a similar situation on VertexBuffers.\r\nhttps:\/\/blogs.msdn.microsoft.com\/shawnhar\/2010\/07\/07\/setdataoptions-nooverwrite-versus-discard\/\r\n",">This reminds me of DynamicVertexBuffer and SetDataOptions.Discard.\r\n> MG doesn't have something analogous for textures\r\n\r\nWell you could say `RenderTarget2D` is the dynamic version of a texture in XNA.\r\n\r\nStill there is no reason `Texture2D.SetData` should perform worse on OpenGL.","Hi @nkast I did have it set to that same texture to begin with and got the same problem timings unfortunately.  I then tried the flip which you see in the code to see if the 'delay' of actually using the texture would help, sadly neither did.\r\n\r\n@tomspilman I have also tried with a RenderTarget2D instead of Texture2D in-case there was any change just for the hell of it, still the same result :(\r\n\r\nThanks again both both of your time, wish I knew more about OpenGL and MG in a depper sense.  I have the develop branch source code setup so I can compile MG to try anything out if anybody has any ideas.\r\n\r\np.s. I'm too old for modern rendering, can you tell :)","@8bitdna - We'll figure this out.\r\n\r\n@dellis1972 - Any ideas?","In DX the present() blocks until all the commands are finished and it's safe to set them right away in the next draw(). I don't know much about the GL platform but the findings point me to the direction that's a different in how the GPU is synced with the gameloop.\r\n ","@8bitdna  \r\nAdd a second stopwatch to measure the intervals between frames right after SetData().\r\nIf you see a steady 16.6ms without fluctuations then the delay you see in SetData in normal and you don't have to worry about it. ","@nkast Thanks again, I tried this by adding StopWatch watch2.....\r\n\r\n```\r\n            watch2.Stop();\r\n            watch.Start();\r\n            if(doublebuffer)\r\n            {\r\n                \/\/doublebuffer = false;\r\n                display.SetData(rawData);\r\n                spriteBatch.Draw(display, new Rectangle(0, 0, 512, 512), Color.White);\r\n            }\r\n            else\r\n            {\r\n                \/\/doublebuffer = true;\r\n                display2.SetData(rawData);\r\n                spriteBatch.Draw(display2, new Rectangle(0, 0, 512, 512), Color.White);\r\n            }\r\n            watch.Stop();\r\n            watch2.Start();\r\n```\r\n\r\n...and am getting the following back per frame averaged out (in ms) since the last time I requested it by pressing space bar, I'm waiting about 1 second in-between each space bar press.  The two totalled together make the 16.6ms.  Also note how StopWatch watch creeps up to the 16.6ms, thats the odd thing.  VSync on and fixed time step on.\r\n\r\n0.387366666666667 - Stopwatch 'watch'\r\n16.2759572916667 - Stopwatch 'watch2'\r\n0.982524066390042 - Stopwatch 'watch'\r\n15.7529643153527 - Stopwatch 'watch2'\r\n0.979578362573099 - Stopwatch 'watch'\r\n15.6891643274854 - Stopwatch 'watch2'\r\n2.57076892655367 - Stopwatch 'watch'\r\n14.0934073446328 - Stopwatch 'watch2'\r\n4.22953672316384 - Stopwatch 'watch'\r\n12.5311005649718 - Stopwatch 'watch2'\r\n5.45515652173913 - Stopwatch 'watch'\r\n11.2109951086957 - Stopwatch 'watch2'\r\n6.88870529411765 - Stopwatch 'watch'\r\n9.77903941176471 - Stopwatch 'watch2'\r\n8.30429763313609 - Stopwatch 'watch'\r\n8.36082899408284 - Stopwatch 'watch2'\r\n9.60005476190476 - Stopwatch 'watch'\r\n7.06658988095238 - Stopwatch 'watch2'\r\n10.870924822695 - Stopwatch 'watch'\r\n5.79471985815603 - Stopwatch 'watch2'\r\n11.8688324675325 - Stopwatch 'watch'\r\n4.79757792207792 - Stopwatch 'watch2'\r\n13.182925974026 - Stopwatch 'watch'\r\n3.48352987012987 - Stopwatch 'watch2'\r\n14.3651448275862 - Stopwatch 'watch'\r\n2.30871655172414 - Stopwatch 'watch2'\r\n15.5888647798742 - Stopwatch 'watch'\r\n1.07201698113208 - Stopwatch 'watch2'\r\n16.4487431506849 - Stopwatch 'watch'\r\n0.231343835616438 - Stopwatch 'watch2'\r\n16.5115448275862 - Stopwatch 'watch'\r\n0.150429655172414 - Stopwatch 'watch2'\r\n16.5305985915493 - Stopwatch 'watch'\r\n0.151644366197183 - Stopwatch 'watch2'\r\n16.5194822695035 - Stopwatch 'watch'\r\n0.15404609929078 - Stopwatch 'watch2'","I disabled the double buffering for the moment as well to keep the test as simple as possible as well just in-case you didn't spot it in the code snippet :)","I don't think you can use stop watch like that in this particular case. \r\nIts short circuiting the render update loop i think.\r\n\r\nThis is what i got from a altered 1 second elapsed time test run on GL.\r\nThe longer the timing the more accurate the average time is but mehh.\r\n\r\nelapsed time: 1.001076  frames: 1425  updates: 1426  fps: 1423.46834805749\r\nelapsed time: 1.0003664  frames: 1748  updates: 1748  fps: 1747.35976738123\r\nelapsed time: 1.0004643  frames: 1753  updates: 1753  fps: 1752.1864598267\r\nelapsed time: 1.0006279  frames: 1779  updates: 1779  fps: 1777.88366684559\r\nelapsed time: 1.0001524  frames: 1771  updates: 1771  fps: 1770.73014072655\r\nelapsed time: 1.0004066  frames: 1775  updates: 1775  fps: 1774.27857833005\r\nelapsed time: 1.0001327  frames: 928  updates: 928  fps: 927.876870739253 \/\/ moved window\r\nelapsed time: 1.0001287  frames: 1727  updates: 1727  fps: 1726.77776370181\r\nelapsed time: 1.0000698  frames: 1721  updates: 1721  fps: 1720.8798825842\r\nelapsed time: 1.0004206  frames: 1723  updates: 1723  fps: 1722.27561087806\r\nelapsed time: 1.0000604  frames: 1725  updates: 1725  fps: 1724.89581629269\r\nelapsed time: 1.0006554  frames: 1731  updates: 1731  fps: 1729.86624566259\r\nelapsed time: 1.000095  frames: 1724  updates: 1724  fps: 1723.83623555762\r\nelapsed time: 1.0000237  frames: 1723  updates: 1723  fps: 1722.95916586777\r\nelapsed time: 1.0000247  frames: 1744  updates: 1744  fps: 1743.95692426397\r\nelapsed time: 1.0004007  frames: 1702  updates: 1702  fps: 1701.3182817645\r\nelapsed time: 1.0001026  frames: 1709  updates: 1709  fps: 1708.82467458839\r\nelapsed time: 1.0002233  frames: 1707  updates: 1707  fps: 1706.61891199695\r\nelapsed time: 1.0000082  frames: 1680  updates: 1680  fps: 1679.98622411296\r\n\r\nTry your test like this on both gl and dx and see what you get.\r\n\r\n\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\nusing Microsoft.Xna.Framework;\r\nusing Microsoft.Xna.Framework.Graphics;\r\nusing Microsoft.Xna.Framework.Input;\r\n\r\nnamespace Game_SetDataExample\r\n{\r\n    public class Game1 : Game\r\n    {\r\n        private GraphicsDeviceManager graphics;\r\n        private SpriteBatch spriteBatch;\r\n        Texture2D display;\r\n        byte[] rawData = new byte[128 * 128 * 4];\r\n        KeyboardState previousState;\r\n        private double frames = 0;\r\n        private double updates = 0;\r\n        private double elapsed = 0;\r\n        private double last = 0;\r\n        private double now = 0;\r\n\r\n        public Game1()\r\n        {\r\n            graphics = new GraphicsDeviceManager(this);\r\n            Content.RootDirectory = \"Content\"; \r\n        }\r\n\r\n        protected override void Initialize()\r\n        {\r\n            graphics.PreferredBackBufferWidth = 512;\r\n            graphics.PreferredBackBufferHeight = 512;\r\n            this.TargetElapsedTime = TimeSpan.FromSeconds(1d \/ 60d);\r\n            this.IsFixedTimeStep = false;\r\n            graphics.SynchronizeWithVerticalRetrace = false;\r\n            graphics.ApplyChanges();\r\n            display = new Texture2D(\r\n                GraphicsDevice,\r\n                128, 128,\r\n                false,\r\n                GraphicsDevice.PresentationParameters.BackBufferFormat\r\n                );\r\n            previousState = Keyboard.GetState();\r\n            base.Initialize();\r\n        }\r\n\r\n        protected override void LoadContent()\r\n        {\r\n            spriteBatch = new SpriteBatch(GraphicsDevice);\r\n        }\r\n\r\n        protected override void UnloadContent() { }\r\n\r\n        protected override void Update(GameTime gameTime)\r\n        {\r\n            KeyboardState state = Keyboard.GetState();\r\n            if (state.IsKeyDown(Keys.Escape))\r\n                Exit();\r\n            now = gameTime.TotalGameTime.TotalSeconds;\r\n            elapsed = (double)(now - last);\r\n            if(elapsed > 2.0d)\r\n            {\r\n                Console.WriteLine(\"elapsed time: \" + elapsed.ToString() + \"  frames: \"+ frames + \"  updates: \"+updates+\"  fps: \"+ (frames \/ elapsed).ToString() );\r\n                elapsed = 0;\r\n                frames = 0;\r\n                updates = 0;\r\n                last = now;\r\n            }\r\n            previousState = state;\r\n            updates++;\r\n            base.Update(gameTime);\r\n        }\r\n\r\n        protected override void Draw(GameTime gameTime)\r\n        {\r\n            setDisplayMemory();\r\n            display.SetData(rawData);\r\n            spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.Opaque, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullNone);\r\n            spriteBatch.Draw(display, new Rectangle(0, 0, 512, 512), Color.White);\r\n            spriteBatch.End();\r\n            frames++;\r\n            base.Draw(gameTime);\r\n        }\r\n        Random rnd = new Random();\r\n        private void setDisplayMemory()\r\n        {\r\n            for (var x = 0; x < 128; x++)\r\n            {\r\n                for (var y = 0; y < 128; y++)\r\n                {\r\n                    int r = rnd.Next(0, 255);\r\n                    rawData[((y * 128) + x) * 4] = (byte)r;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n```","Hi @willmotil Thanks for looking at this as well.  I tried your test and I get 60 FPS etc.  However, am I right in saying MG have VSync and fixed time step enabled by default will always hit that cap?\r\n\r\nI disabled vsync and fixed time step by adding this in the Game1 constructor.  If I understand things correct the code will run full pelt that way...\r\n\r\n```\r\ngraphics.SynchronizeWithVerticalRetrace = false;\r\nthis.IsFixedTimeStep = false;\r\n```\r\n\r\nWith that done heres the timings for GL...\r\n\r\nelapsed time: 6  frames: 15982  updates: 15983  fps: 2663\r\nelapsed time: 6  frames: 34476  updates: 34477  fps: 5746\r\nelapsed time: 6  frames: 52610  updates: 52611  fps: 8768\r\nelapsed time: 6  frames: 70943  updates: 70944  fps: 11823\r\nelapsed time: 6  frames: 89445  updates: 89446  fps: 14907\r\nelapsed time: 6  frames: 107693  updates: 107694  fps: 17948\r\nelapsed time: 6  frames: 126044  updates: 126045  fps: 21007\r\nelapsed time: 6  frames: 144342  updates: 144343  fps: 24057\r\nelapsed time: 6  frames: 162581  updates: 162582  fps: 27096\r\n\r\n...and DX...\r\n\r\nelapsed time: 6  frames: 28333  updates: 28334  fps: 4722\r\nelapsed time: 6  frames: 60183  updates: 60184  fps: 10030\r\nelapsed time: 6  frames: 94248  updates: 94249  fps: 15708\r\nelapsed time: 6  frames: 127906  updates: 127907  fps: 21317\r\nelapsed time: 6  frames: 161904  updates: 161905  fps: 26984\r\nelapsed time: 6  frames: 195637  updates: 195638  fps: 32606\r\nelapsed time: 6  frames: 229517  updates: 229518  fps: 38252\r\nelapsed time: 6  frames: 262759  updates: 262760  fps: 43793\r\nelapsed time: 6  frames: 296228  updates: 296229  fps: 49371\r\n\r\nI think there's an issues with the timing code as it stops running so I'm assuming its overflowing due its much more rapid use or something.  The timings themselves don't look right with the increasing FPS?  Even so theres a big difference between GL and DX?","Oh sorry. \r\nI had forgot to clear the update and draw counters at first.\r\nYou must have copied it before i edited it.\r\n\r\nI just re: edited it again, just copy paste it directly.\r\n\r\n_Ya on win 10 i remember reading something about windows wants to have its way with vsync. but i don't remember the details._\r\n\r\nDetails.\r\n\r\nThe stopwatch class is good for timing individual blocks of code when they are unaffected by the timing of the entire app. However since what is in the block of code is affected by gameTime. Brute system interrupts to get the clock ticks stop watch uses, i suspect are short circuiting the app and probably causing IsRunningSlowly to be set and probably worse to update, just messing it up. \r\nThough i didn't verify this is the actual case it was my suspicion at first glance. A very long time ago i ran into a similar problem.","Thank you again @willmotil \r\n\r\nOk, heres the new timings....  For GL....\r\n\r\nelapsed time: 2.0001189  frames: 4675  updates: 4676  fps: 2337.36104388594\r\nelapsed time: 2.0000824  frames: 5744  updates: 5744  fps: 2871.88167847485\r\nelapsed time: 2.0075146  frames: 5364  updates: 5364  fps: 2671.96064227877\r\nelapsed time: 2.0003095  frames: 4966  updates: 4966  fps: 2482.6158152026\r\nelapsed time: 2.0000234  frames: 5059  updates: 5059  fps: 2529.47040519626\r\nelapsed time: 2.0001315  frames: 5105  updates: 5105  fps: 2552.33218415889\r\nelapsed time: 2.0001806  frames: 5218  updates: 5218  fps: 2608.7644285721\r\nelapsed time: 2.0001788  frames: 5423  updates: 5423  fps: 2711.25761356935\r\nelapsed time: 2.0003212  frames: 5400  updates: 5400  fps: 2699.56644962819\r\nelapsed time: 2.0001479  frames: 5344  updates: 5344  fps: 2671.80242021102\r\nelapsed time: 2.0000099  frames: 5452  updates: 5452  fps: 2725.9865063668\r\n\r\n...and for DX...\r\n\r\nelapsed time: 2.0002247  frames: 3755  updates: 3756  fps: 1877.28908657112\r\nelapsed time: 2.0003103  frames: 4253  updates: 4253  fps: 2126.17012470515\r\nelapsed time: 2.0001593  frames: 3819  updates: 3819  fps: 1909.34792043814\r\nelapsed time: 2.0004948  frames: 3485  updates: 3485  fps: 1742.0690121264\r\nelapsed time: 2.0003603  frames: 3598  updates: 3598  fps: 1798.67596852427\r\nelapsed time: 2.00027  frames: 3713  updates: 3713  fps: 1856.24940633015\r\nelapsed time: 2.0000214  frames: 3741  updates: 3741  fps: 1870.47998586415\r\nelapsed time: 2.0003807  frames: 3623  updates: 3623  fps: 1811.15524659881\r\nelapsed time: 2.0002075  frames: 3644  updates: 3644  fps: 1821.81098711009\r\nelapsed time: 2.0004165  frames: 3647  updates: 3647  fps: 1823.1203351902\r\n\r\nWorking that FPS back into ms for the frame I make the GL draw 0.35ms and the DX one 0.56ms (roughly).  Definitely in the ballpark of what I would have liked to see.  I'll run some more tests here but looks like you solved the case Sherlock!\r\n\r\nIs it worth mentioning I saw the funny timings in the VS profiler as well?  Is gametime definitely a perfect reference for this kind of timing?","> MG have VSync and fixed time step enabled by default will always hit that cap?\r\n\r\nDoesn't XNA as well?\r\n\r\nDoes MonoGame's DirectX and DesktopGL have different defaults?  I don't think it should.","Hi @tomspilman \r\n\r\nYes I think so, I never did any XNA dev but my learnings tell me they are enabled by default.  I just needed them switched off so we can time things another way from what @willmotil has brought to light. \r\n\r\n@willmotil I dropped in a StopWatch and replaced the timing line of code like this...\r\n\r\n```\r\n\/\/now = gameTime.TotalGameTime.TotalSeconds;\r\nnow = myWatch.Elapsed.TotalMilliseconds \/ 1000;\r\n```\r\n\r\nI'm getting the same timings as I posted about an hour ago so things are looking good.  Difficult one to understand but I do seem to be able to get a consistent result now.","Ya it's the start() method primarily. Stop watch needs it for high precision timings on small code blocks. Its some deep greasy hack. It's really the only thing that makes it both special and screwy. Without it you get the same accuracy as gametime about 20 ms of inaccuracy so you just measure over a longer time like shown above.\r\n\r\nIm surprised to see it go this fast honestly, on xna and it was tricky and way slow.\r\n\r\ngood luck.\r\n","@willmotil yes I understand.  Reading up StopWatch uses actual hardware in the PC for it timings which makes sense given its degree of potential accuracy.  The thing that started me down this path of using StopWatch etc was the fact the .NET profiler in VS was showing me some big differences in timings, it still does.  My problem is now I don't know what to believe it correct or how to troubleshoot hotspots, I assumed the profiler would be the defacto measure of time?","Well im not sure if there is a reliable way if you don't have a high performance monitor on your comp. You can get 0 second return intervals on small blocks. You can maybe try with Enviroment.TickCount but this isn't guaranteed either.\r\n\r\nSo basically the thing is you can measure small blocks with stopwatch or the whole app with regular old gameTime. but... mixing it up can give false results.\r\n\r\nAnyways i just keep a framerate counter up from the start if i see a big dip then ill start to second guess my functions. https:\/\/github.com\/willmotil\/MonoGameUtilityClasses","Cheers, As I understand every 'modern' PC (like not over 10 years old) has the required performance hardware.  The PC I'm using is a 2 year old gaming rig so I'd be shocked to find it didn't have this.  The thing is I did use StopWatch to time one call to Texture2D.setData orginally as in my code right up above.  I'd prefer not to use just FPS alone.  How will I know how to profile things and isolate a hotspot method etc?  I would have expected the VS profiler to be my standard way to analyse code or am I understanding things wrong?  Remember I only see the issue on GL for Desktop with, DX is is consistently (and significantly) faster.  I also tried using FNA which reported on app start in the console it was using GL and theres no issue there, similar timings to MG DX.  Try the test again with MG GL for Desktop and the odd timings start.  Confused....","Hey Guys,  Congrats on the 3.7 release :)  Been some time since I tried this and will try this out again and report back if I see any differences.","No dice I'm afraid, I'm seeing the same as before sadly.  However, I had wondered if I recreated the instance of Texture2D every frame instead of reusing the same one might help, as it does.  So I did this...\r\n\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\nusing Microsoft.Xna.Framework;\r\nusing Microsoft.Xna.Framework.Graphics;\r\nusing Microsoft.Xna.Framework.Input;\r\n\r\nnamespace Pixel\r\n{\r\n    public class Game1 : Game\r\n    {\r\n        private GraphicsDeviceManager graphics;\r\n        private SpriteBatch spriteBatch;\r\n\r\n        byte[] rawData = new byte[128 * 128 * 4];\r\n\r\n        Stopwatch watch = new Stopwatch();\r\n        KeyboardState previousState;\r\n        private int frames = 0;\r\n\r\n        public Game1()\r\n        {\r\n            graphics = new GraphicsDeviceManager(this);\r\n            Content.RootDirectory = \"Content\";\r\n\r\n            graphics.PreferredBackBufferWidth = 512;\r\n            graphics.PreferredBackBufferHeight = 512;\r\n        }\r\n\r\n        protected override void Initialize()\r\n        {\r\n            watch = new Stopwatch();\r\n            previousState = Keyboard.GetState();\r\n            base.Initialize();\r\n        }\r\n\r\n        protected override void LoadContent()\r\n        {\r\n            spriteBatch = new SpriteBatch(GraphicsDevice);\r\n        }\r\n\r\n\r\n        protected override void UnloadContent()\r\n        {\r\n\r\n        }\r\n\r\n        protected override void Update(GameTime gameTime)\r\n        {\r\n            KeyboardState state = Keyboard.GetState();\r\n\r\n            if (state.IsKeyDown(Keys.Escape))\r\n                Exit();\r\n\r\n            if (state.IsKeyDown(Keys.Space) & !previousState.IsKeyDown(Keys.Space))\r\n            {\r\n                Console.WriteLine(watch.Elapsed.TotalMilliseconds \/ frames);\r\n                this.frames = 0;\r\n                this.watch.Restart();\r\n            }\r\n\r\n            previousState = state;\r\n\r\n            base.Update(gameTime);\r\n        }\r\n\r\n        protected override void Draw(GameTime gameTime)\r\n        {\r\n            setDisplayMemory();\r\n\r\n            Texture2D display = new Texture2D(\r\n                GraphicsDevice,\r\n                128, 128,\r\n                false,\r\n                GraphicsDevice.PresentationParameters.BackBufferFormat);\r\n\r\n            watch.Start();\r\n            display.SetData(rawData);\r\n            watch.Stop();\r\n\r\n            spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.Opaque, SamplerState.PointClamp,DepthStencilState.None,RasterizerState.CullNone);\r\n            spriteBatch.Draw(display, new Rectangle(0, 0, 512, 512), Color.White);\r\n            spriteBatch.End();\r\n\r\n            display.Dispose();\r\n\r\n            frames++;\r\n            base.Draw(gameTime);\r\n        }\r\n\r\n        private void setDisplayMemory()\r\n        {\r\n            for (var x = 0; x < 128; x++)\r\n            {\r\n                for (var y = 0; y < 128; y++)\r\n                {\r\n                    rawData[((y * 128) + x) * 4] = 255;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n...Now I get a timing of ~0.6ms per frame which is much more like what I was expecting.  Obviously there's a little time spent throwing away and recreating the texture but it might help someone with more brain power get to bottom of whats going on.  Thanks again, great project.","Can confirm that this is still an issue in the 3.8 release as well."],"labels":["OpenGL","Performance","Help Wanted"]},{"title":"Triggering Add Files Dialog in Pipeline Tool","body":"The new [file linking support in MGCB and the Pipeline Tool](https:\/\/github.com\/MonoGame\/MonoGame\/pull\/6223) current does not show the \"Add Files\" dialog in some cases where we wanted to preserve the old behavior and not show a popup by default.  We need to figure out a way for the user to force the \"Add Files\" dialog to appear.\r\n\r\nMy first thought was to do this via a modifier key sort of like Windows does in a few places:\r\n\r\nWhen i right-click in a folder on Windows i get:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/37277349-6f8ec246-25b2-11e8-994a-28ed42d5b330.png)\r\n\r\nWhen i Shift+right-click i get a \"Open Powershell window here\" option:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/37277430-92d86b62-25b2-11e8-98b8-51f2d492b993.png)\r\n\r\nAnother case is dragging and dropping files.  If i do so with the left mouse button it just drops the files.  If i do so with the right mouse button i get this context menu popup:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/37277501-daf108d2-25b2-11e8-97a7-13da07574fed.png)\r\n\r\nI could see a context menu Shift+right-click make the command for \"Add Existing Item...\" change to something like \"Add Existing Item As...\".\r\n\r\nThe biggest problem with this technique is users have to be told the feature exists.  We could simply add a second menu item in the context menu \"Add Existing Item As...\" but it could prove to be confusing as to which one to use and when.  Maybe that can be improved with a better name for it.\r\n\r\nThe one thing that is easier is the extension to the existing File Dialog that VS does:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/37277796-d077e5be-25b3-11e8-890f-605dec6d1473.png)\r\n\r\nWhile it would be really nice and elegant, but i think will be too complex and error prone for us to maintain.\r\n\r\nWe should also consider what we want to do for future drag and drop support too.","comments":["I understand that this issue is related to drag and dropping files no longer working in the pipeline on Windows. I would just like to add that drag and dropping files in the pipeline is very much appreciated by my high school students when I teach them MonoGame, having to use \"Add->Existing item\" is much more of a hassle for them. Drag and drop support would simply make them enjoy using MonoGame a bit more =)","Any progress on drag and dropp support for the Pipeline Tool? If you have not yet decided if a drag and drop should trigger an \"Add file\" dialog, it would be great if there was a temporary solution which copies all drag and dropped files to the content directory."],"labels":["MGCB Editor"]},{"title":"Fix Pipeline Tool Treeview Selection","body":"I don't know when this changed, but it was pretty recent:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/37252869-21f561ae-24f7-11e8-8b6c-8ff80a116174.png)\r\n\r\nWe now have this black box around the selection.  Compare to Visual Studio tree view:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/37252874-5739bc5c-24f7-11e8-808e-0dfde5de68b4.png)\r\n\r\nWhich doesn't have a black box around the selection and the selection extends across the entire window.\r\n\r\nWe should be more like VS in this area.","comments":["https:\/\/github.com\/picoe\/Eto\/issues\/718","And the black box?","Its the default of WPF I think, tho its easy to style that out.","Side note, we could totally style the entire Pipeline Tool like Visual Studio on Windows.","> Its the default of WPF I think, tho its easy to style that out.\r\n\r\nIt isn't a default i've ever seen in WPF... but if we can style it out then great.\r\n\r\n> We could totally style the entire Pipeline Tool like Visual Studio on Windows.\r\n\r\nI wouldn't be opposed to this.\r\n\r\nStill my bigger concerns are weird layouts and behavior.  That is what breaks the flow of using the Pipeline Tool more than anything.","> Still my bigger concerns are weird layouts and behavior. That is what breaks the flow of using the Pipeline Tool more than anything.\r\n\r\nOpen up issue or any of them that you find weird and I'll fix them. ","> pen up issue or any of them that you find weird and I'll fix them.\r\n\r\nI'm working on it...  just alot of things to do here and to log it i need time to explain them clearly.\r\n\r\nStill back to the point of this issue.  Lets return the styling of that selection to what it was before the treeview was changed out."],"labels":["MGCB Editor"]},{"title":"Add Build Spinner to Pipeline Tool","body":"We need some sort of spinner to appear on screen while the MGCB.exe process is running.  Don't know where it should appear but it should be a spinner.  Maybe we replace the gears icon here:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/37252493-aa629d02-24ef-11e8-9eac-e4eb3957c957.png)\r\n\r\nBetter would be to have it somewhere common so the spinner works for both filtered and unfiltered output views.\r\n\r\nI've used both [Chimply](http:\/\/www.chimply.com\/Generator) and [Loading.io](https:\/\/loading.io\/) to create spinner GIFs to embed in GUIs (Winforms supported animated GIFs!).  \r\n\r\nHopefully ETO supports something similar or we'll have to do a manual flipbook animation for it.","comments":[],"labels":["Feature Request","MGCB Editor"]},{"title":"Improve Pipeline Tool Filter View","body":"Some suggestions to improve the filter view of the Pipeline Tool.\r\n\r\nRemove drop down arrows on \"Cleaning\" and \"Build\" lines that do not contain useful info.  All of these lines:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/37252319-48d5bc60-24ed-11e8-8688-b0f23bd4a296.png)\r\n\r\nAnd all of these lines:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/37252359-d95a6150-24ed-11e8-8d1f-d40de62b6448.png)\r\n\r\nContain useless info in them and we should not show expansion arrows on them.  All those arrows with useless info hidden under it reinforce to the user that all the info is useless.  Instead if we only show the arrow when there is useful info... like error messages or warnings... then the arrow becomes a feature and not \"visual noise\".\r\n\r\nThe logic could be as simple as if the content didn't generate an error and there is only one captured line of output for the item... then don't render the arrow or allow expansion.\r\n\r\nSecond it seems we're losing some info in the filter view:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/37252394-5bc972fc-24ee-11e8-9994-fb029686ba0d.png)\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/37252406-85d990c2-24ee-11e8-9af2-5eec041867f8.png)\r\n\r\nHere the warning message was lost in the filter view and not visible to the user.  We really need to capture these lines and show them else this view becomes irrelevant as it hides useful information.\r\n\r\nWe also need an \"Expand All\" \"Colapse All\" feature for this view.  Could just be added via a new context menu when right clicking on the view.  Could come in useful for other things in the future too.\r\n\r\nFinally grey text on grey box makes the expanded info very hard to read.  We should greatly darken the text there.\r\n","comments":["I would say this is connected to: https:\/\/github.com\/MonoGame\/MonoGame\/issues\/5804\r\n\r\nWe don't need just to get better info from the Pipeline Tool, but also from the MGCB. I really like what @nkast did with https:\/\/github.com\/MonoGame\/MonoGame\/pull\/5163","> We don't need just to get better info from the Pipeline Tool, but also from the MGCB\r\n\r\nThat would be nice... but we cannot assume perfect formatting from MGCB.\r\n\r\nWe often depend on 3rd-party tools that have their own ways to format errors.  Us trying to \"fix\" the error\/warning output of all shader compilers, texture compressors, audio compressors, etc to fit our own rules is just going to cause us more errors.  \r\n\r\nThis is why i was unsure about  #5163 ... i have integrated enough console tools into MGCB and the content pipeline to know that was going to be a mess to actually support fully.\r\n\r\nI think we have to embrace the fact all we can control a few lines that MGCB outputs:\r\n\r\n 1. The \"Clean\" line.\r\n 2. The \"Skipping\" line.\r\n 3. The \"Build\" line.\r\n 4. The \"Error\" line.\r\n\r\nThese 4 lines are ones we generate from within MGCB and the only ones we can use to parse build info. That plus the knowledge that content processing happens in sequence is all we can depend on.\r\n\r\nWe see an error message after a Clean\/Skip\/Build line... then that item error-ed.\r\n\r\nWe see any other line after Clean\/Skip\/Build... it is informational.\r\n\r\nWe can try to parse file and line info from any line that passes the regex parse for it.  But we cannot assume that all content processing will output good info like that.\r\n\r\nThat really is the best we can do i think.","The errors are not the thing I want to format, the thing I want to format is the output MGCB provides for Clean\/Skip\/Build etc, currently its not the easiest thing to either read or parse. \r\n\r\nFor example, how about always outputting all the failed files at the end, that way no scrolling is needed to find what failed to compile.\r\n\r\nOr how about having better verbosity on what its doing, like: \r\n```\r\nBuilding: Car.x.... [Success]\r\nBuilding: B.x.... [Failed]\r\nError: <error message>\r\nBuilding: A.x.... [Success]\r\n```\r\n\r\ninstead of doing:\r\n```\r\nCar.x\r\nB.x: error: asdasdasdasdadsaas\r\nA.x\r\n```\r\n\r\n","> Or how about having better verbosity on what its doing\r\n\r\nThe formatting how it is now started as mimicking XNA's output, but we don't have to and i wouldn't have an issue improving it.  However what you are suggesting doesn't work how i see it.\r\n\r\n```\r\nBuilding: Car.x.... [Success]\r\nBuilding: B.x.... [Failed]\r\n```\r\nThe build line and the success\/failed cannot be on the same line.  First you need a message to be emitted when building of an item starts... else you wouldn't know what is currently building.  Second it could spit out a bunch of warnings or errors before the build succeeds\/fails.  So the build start has to be a line of its own.  Still i don't have a problem putting a wart on the start like \"Building\".\r\n\r\n```\r\nError: <error message>\r\n```\r\nWe [already do this](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/Tools\/MGCB\/BuildContent.cs#L347) just formatted like VS does it's errors: `filename: error: message` or `filename(line): error: message`.  While i feel content building has no place in VS... i still want to retain its formatting for errors so line links still work.\r\n\r\n> instead of doing:\r\n\r\nThat isn't really accurate to how our build logging works.  Here is a more accurate example:\r\n```\r\nBuild started 3\/11\/2018 7:28:52 AM\r\n\r\nCleaning C:\/Project\/Content\/Car.x\r\nSkipping C:\/Project\/Content\/Logo.png\r\nC:\/Project\/Content\/Car.x\r\nYou could get some random info\/warning text during content building.\r\nIt can be multi-line and formatted in any weird way the user chooses to log things.\r\nC:\/Project\/Content\/B.x\r\nC:\/Project\/Content\/B.x(123): error: asdasdasdasdadsaas\r\nC:\/Project\/Content\/Font.spritefont\r\nC:\/Project\/Content\/Font.spritefont: error: Importer 'FontDescriptionImporter' had unexpected failure!\r\nMicrosoft.Xna.Framework.Content.Pipeline.InvalidContentException: An error occured parsing. ---> System.Xml.XmlException: 'xmlns' is an unexpected token.\r\n   at System.Xml.XmlTextReaderImpl.Throw(Exception e)\r\n   at System.Xml.XmlTextReaderImpl.ParseAttributes()\r\n   blah blah blah\r\nC:\/Project\/Content\/A.x\r\n\r\nBuild 3 succeeded, 2 failed.\r\n\r\nTime elapsed 00:00:00.87.\r\n```\r\n\r\nI don't see a lot to improve there other than maybe `Building` lines:\r\n```\r\nBuild started 3\/11\/2018 7:28:52 AM\r\n\r\nCleaning C:\/Project\/Content\/Car.x\r\nSkipping C:\/Project\/Content\/Logo.png\r\nBuilding C:\/Project\/Content\/Car.x\r\nYou could get some random info\/warning text during content building.\r\nIt can be multi-line and formatted in any weird way the user chooses to log things.\r\nBuilding C:\/Project\/Content\/B.x\r\nC:\/Project\/Content\/B.x(123): error: asdasdasdasdadsaas\r\nBuilding C:\/Project\/Content\/Font.spritefont\r\nC:\/Project\/Content\/Font.spritefont: error: Importer 'FontDescriptionImporter' had unexpected failure!\r\nMicrosoft.Xna.Framework.Content.Pipeline.InvalidContentException: An error occured parsing. ---> System.Xml.XmlException: 'xmlns' is an unexpected token.\r\n   at System.Xml.XmlTextReaderImpl.Throw(Exception e)\r\n   at System.Xml.XmlTextReaderImpl.ParseAttributes()\r\n   blah blah blah\r\nBuilding C:\/Project\/Content\/A.x\r\n\r\nBuild 3 succeeded, 2 failed.\r\n\r\nTime elapsed 00:00:00.87.\r\n```\r\nBut i honestly don't see how that improves much of anything.","Well the above are just few things that I would like changing, I'll write a proper set of changes a bit later, but for now.\r\n\r\n> The build line and the success\/failed cannot be on the same line. First you need a message to be emitted when building of an item starts... else you wouldn't know what is currently building. Second it could spit out a bunch of warnings or errors before the build succeeds\/fails. So the build start has to be a line of its own. Still i don't have a problem putting a wart on the start like \"Building\".\r\n\r\nYou could:\r\n- Send \"Building: Car.x.... \" when the build starts (without an end line)\r\n- Write either \"[Success]\" or \"[Failed]\" + new line when the building of the file ends\r\n- Write any error\/warning messages from the build in a new line or post them later\r\n\r\n> I don't see a lot to improve there other than maybe Building lines:\r\n\r\nIt would look like (error lines could be written an extra time immediately after failed message, I think I would like them to appear twice more than just at the end):\r\n```\r\nBuild started 3\/11\/2018 7:28:52 AM\r\n\r\nCleaning C:\/Project\/Content\/Car.x\r\nSkipping C:\/Project\/Content\/Logo.png\r\nBuilding C:\/Project\/Content\/Car.x............... [Success]\r\nBuilding C:\/Project\/Content\/B.x................. [Failed]\r\nBuilding C:\/Project\/Content\/Font.spritefont..... [Failed]\r\nBuilding C:\/Project\/Content\/A.x................. [Success]\r\n\r\nErrors:\r\n\r\nC:\/Project\/Content\/B.x(123): error: asdasdasdasdadsaas\r\n\r\nC:\/Project\/Content\/Font.spritefont: error: Importer 'FontDescriptionImporter' had unexpected failure!\r\nMicrosoft.Xna.Framework.Content.Pipeline.InvalidContentException: An error occured parsing. ---> System.Xml.XmlException: 'xmlns' is an unexpected token.\r\n   at System.Xml.XmlTextReaderImpl.Throw(Exception e)\r\n   at System.Xml.XmlTextReaderImpl.ParseAttributes()\r\n   blah blah blah\r\n\r\nBuild 3 succeeded, 2 failed.\r\n\r\nTime elapsed 00:00:00.87.\r\n```","> Send \"Building: Car.x.... \" when the build starts (without an end line)\r\n\r\nThat is a little weird.  I wonder if `Process.OutputDataReceived` would support receiving that before the line ending.\r\n\r\n> Write either \"[Success]\" or \"[Failed]\" + new line when the building of the file ends\r\n\r\nSo what happens when some importer\/processor or a 3rd-party library calls:\r\n\r\n `Console.Write(\"Some message\")`?\r\n\r\nIt just breaks the build message and the parsing in the pipeline tool?  Will it recover or crash?\r\n\r\n> I think I would like them to appear twice more than just at the end\r\n\r\nHow does the new user (or the VS output window for that matter) not get confused by seeing errors twice?  \r\n\r\nCan you point me at any other tool that emits error messages twice?\r\n\r\n\r\n> Building C:\/Project\/Content\/Car.x............... [Success]\r\n\r\nSo we pre-measure the length of all the file paths and figure out how many `....` we need to align the error\/success messages.  Then what happens when an FBX references a texture and builds it and it is a longer path than the others?\r\n\r\nI understand wanting to improve the logging to make parsing easier, but what you're suggesting here seems to be \"make it pretty\".  I can get behind some of that... making the raw MGCB log nicer to read would be ok.\r\n\r\nI just think most of what you've suggested makes the code more complex with more possibilities of failure.\r\n\r\nHow it is now it mimics how almost all compilers on all platforms work.  Which i think is reasonable for what MGCB does.\r\n","> Can you point me at any other tool that emits error messages twice?\r\n\r\nYes, msbuild...:\r\n```\r\nMicrosoft (R) Build Engine version 15.5.180.51428 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 21.96 ms for \/home\/harry\/test\/test.csproj.\r\nGame1.cs(16,30): error CS0103: The name 'truae' does not exist in the current context [\/home\/harry\/test\/test.csproj]\r\n\r\nBuild FAILED.\r\n\r\nGame1.cs(16,30): error CS0103: The name 'truae' does not exist in the current context [\/home\/harry\/test\/test.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:02.69\r\n```\r\n\r\n> So we pre-measure the length of all the file paths and figure out how many .... we need to align the error\/success messages. Then what happens when an FBX references a texture and builds it and it is a longer path than the others?\r\n\r\nNah, we just need terminal width to position passed\/failed messages, its very easy to do.","> That is a little weird. I wonder if Process.OutputDataReceived would support receiving that before the line ending.\r\n\r\nData received from another process has nothing to do with new lines.","Let me jump in and give some examples of how the current system is inconsistent.\r\nConsider the following cases:\r\n\r\n```\r\ncontext.Logger.LogWarning(null, input.Identity, \"This is a Warning\");\r\ncontext.Logger.LogWarning(null, null, \"This is another Warning\");\r\nthrow new InvalidContentException(\"This is an Error\", input.Identity);\r\n```\r\n\r\nThose will output the following:\r\n\r\n```\r\nP:\/TestContent\/test.fbx: This is a Warning\r\nThis is another Warning\r\nP:\/TestContent\/test.fbx: This is an Error\r\n```\r\n \r\nClearly we have a problem here. We can't tell which one is an error, a warning or just a message.\r\n#5163 would output this:\r\n\r\n```\r\nP:\/TestContent\/test.fbx : warning : this is a Warning\r\nP:\/TestContent\/test.fbx : warning : this is another Warning\r\nP:\/TestContent\/test.fbx : error : this is an Error\r\n```\r\n\r\nThat's what #5163 was about. To make MGCB output consistent and easy to parse.\r\nIt follows the microsoft standard to make errors\/warnings visible to Visual studio and easy to parse by  the pipeline or other 3rd party tools.\r\n\r\nThe only fancy thing is the last commit which handles MGFX output. Maybe we can find a better way to handle this.\r\n\r\nAnother thing I was not able to solve was multiline messages. I assume XNA\/VS is not parsing the console output but attaches to a logger.  There is documentation on how to implement such a thing but before going into that I wanted to get the common cases fixed.\r\n "],"labels":["MGCB Editor"]},{"title":"Cleanup Pipeline tool About box","body":"The About box in the Pipeline tool could use some cleanup:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/37251932-f3538bba-24e6-11e8-9d4d-549073b60210.png)\r\n\r\nMy suggested fixes mocked up:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/37252287-b28b9798-24ec-11e8-9336-9674233e253b.png)\r\n\r\nBetter spacing and balance in the dialog overall.  Removed the description of the pipeline tool which didn't describe things any better than the title \"MonoGame Pipeline Tool\".  Used our URL for the weblink which helps with people knowing our URL.  Removed the weird license tab license from the dialog... they can find that on the website.\r\n\r\nAlso we should be able to pull the copyright line from the assembly properties in the Pipeline executable.  This makes things easier to maintain.\r\n\r\n","comments":["We are using Etos About Dialog so I might as well improve it (on Linux this dialog uses the native Gtk dialog which is pretty much standardized: https:\/\/developer.gnome.org\/gtk3\/stable\/GtkAboutDialog.html )","> Linux this dialog uses the native Gtk dialog \r\n\r\nDoesn't surprise me Linux has such a thing.  \r\n\r\nStill we really shouldn't try to mimic it on Windows or Mac.  We should roll our own and make it nice.","We are already not mimicking it, I'm just saying we should make the Etos AboutDialog look nice instead of making a custom one for the Pipeline Tool. ","> I'm just saying we should make the Etos AboutDialog look nice\r\n\r\nI guess i come from the old school world of Windows where about dialogs are all custom to the application.\r\n\r\nAs long as we're not stuck with weird-o formatting or features in the About box because some Eto user wants it... i'm good with that.","Copying over current 3.8 screenshot which shows the current state of the About Box\r\n![image](https:\/\/user-images.githubusercontent.com\/1793042\/91281378-e9f17600-e77f-11ea-88eb-ff60f745361e.png)\r\n\r\nAs you can see, it needs a little more work.\r\n\r\n* Title\r\n* Text formatting\r\n* Should probably include a link to the MCB-editor documents page."],"labels":["MGCB Editor"]},{"title":"TouchLocationState.Released not recognized","body":"I was working on a game on Android when I suddenly realized that the enum TouchLocationState.Released is not being called when you release the screen. I created a test project to reproduce it with the following code:\r\n\r\nTouchCollection touchCollection = TouchPanel.GetState();\r\n\r\n            foreach (TouchLocation tl in touchCollection)\r\n            {\r\n                if (tl.State == TouchLocationState.Moved)\r\n                {\r\n                    var test = \"test\";\r\n                }\r\n\r\n                if (tl.State == TouchLocationState.Released)\r\n                {\r\n                    var test = \"test\";\r\n                }\r\n            }\r\n\r\nI set a breakpoint in the second if-statement and it never arrives there, which I do expect. \r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.6\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n- MonoGame Android\r\n","comments":["same problem here","same issue here,.. just in case someone is still looking at this bug."],"labels":["Android","Input"]},{"title":"Content Pipeline ModelProcessor wrongly assumes that all model mesh parts have the same VertexDeclaration","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build insaller from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue bellow >\r\n\r\n\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.0.1381\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- ie. DesktopGL, WindowsDX, WindowsUWP, Android:-->\r\n- WindowsDX\r\n\r\nI am migrating from XNA to MonoGame and during conversion of all my models using the Content Pipeline tool I encountered a model (FBX) that built correctly (no errors or warnings), but caused an out-of-memory exception during loading.\r\n\r\nUsing the PipelineManager directly, I found that during processing of the meshes it is assumed that each GeometryContent (mesh part) of a MeshContent has the same VertexDeclaration (same vertex channels). One of my models has a mesh containing 18 mesh parts of which some have 5 channels and a stride of 44, while other have 6 channels (an extra normal) and a stride of 56. All these vertices are stored in the same VertexBuffer. In the VertexBufferWriter the vertex count is written as data length (bytes) divided by vertex declaration stride. The vertex declaration will the one of the last mesh part, hence the vertex count  will be wrong, making the xnb corrupt.\r\n\r\nI have compared the code with the XNA ModelProcessor which stores all unique vertex declarations separately and a VertexBuffer is created for each unique VertexDeclaration ensuring the data is properly written to file and can be read back correctly.\r\n\r\nI think the MonoGame Content Pipeline should do something similar or at least give a warning during compiling when the encountered Vertex Declarations are not identical.\r\n\r\nI have attached the FBX model that causes the error (during loading of the compiled XNB with the ContentManager).\r\n[CAT 312.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/1794853\/CAT.312.zip)\r\n\r\n","comments":["Thanks @harmwind for the test case.  I'll give it a look and report back."],"labels":["ContentPipeline"]},{"title":"Null reference exception in RenderTarget2D when setting SwapChainRenderTarget with MSAA","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build installer from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue bellow >\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7.0.1376\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- ie. DesktopGL, WindowsDX, WindowsUWP, Android:-->\r\n- WindowsDX\r\n\r\nI am using MonoGame embedded in WinForms. To properly handle resizing of the window, I'm using a SwapChainRenderTarget. All works fine as long as I don't use MSAA (preferredMultiSampleCount = 0).\r\n\r\nWhen I set preferredMultiSampleCount to a higher value (8 in my case), this works fine when I set this as a render target the first time. However, setting a new render target to the graphics device (SwapChainRenderTarget or a normal RenderTarget2D), a null reference occurs in the RenderTarget2D class, method ResolveSubResource(). This is because the _resolvedTexture field of a SwapChainRenderTarget is always null. The _renderTargetViews of a SwapChainRenderTarget is constructed in a different way compared to the RenderTarget2D class. This means the CreateTexture override of the RenderTarget2D is never called resulting in the _resolvedTexture always remaining null.\r\n\r\nIn the PlatformResolveRenderTargets method of GraphicsDevice the ResolveSubResource method is called for all render targets that are of type RenderTarget2D which will fail for SwapChainRenderTargets.\r\nI'm not sure how this should be fixed; should a SwapChainRenderTarget have a _resolvedTexture when MSAA is used, or should the ResolveSubResource method never be called in these cases?","comments":["IMO SwapChainRenderTarget should have a _resolvedTexture when MSAA is used. Because if ResolveSubResource method is never called MSAA won't work I think (not sure).\r\n\r\nAs I added MSAA support to RenderTarget2D I didn't do any changes and tests for SwapChainRenderTarget, so it is quite possible SwapChainRenderTarget needs to be fixed to support MSAA.","I have eveything working properly now with MSAA by creating a RenderTarget2D and setting that as _resolvedTexture on the SwapChainRenderTarget. I'm using that as temporary workaround since I'm not sure exactly how MSAA is supposed to work with ResolveSubResource.","If I remember it correctly, it goes something like this. When using RenderTarget2D with MSAA we need two resources. One is multisampled and the other is not. That is because multisampled resource can't be directly used as texture. So for example when we use multisampled render targets:\r\n\r\n1. Set multisampled RT so we can draw onto it (multisampled resource is used)\r\n2. Set another RT. Our multisampled RT from step one is automatically resolved. Contents of multisampled resource is resolved (copied) into non-multisampled resource. \r\n3. If we use our RT from step one like a texture, non-multisampled resource is used.\r\n\r\nWhen multisampled rendertarget is unset, it is automatically resolved by MG. Contents from multisampled resource is transferred to non-multisampled resource. Non-multisampled RTs don't need to be resolved as same resource can be used as RT and as texture.\r\n\r\nYou can check PlatformResolveRenderTargets() method in GraphicsDevice.DirectX.cs. It is called from ApplyRenderTargets(...) method. If you want to see how MSAA is supposed to work with ResolveSubResource.","OK, I understand. Would this modification (in SwapChainRenderTarget) be correct:\r\n\r\nIn the constructor of SwapChainRenderTarget create and set the _resolvedTexture, similar as what happens in the RenderTarget2D. The _resolvedTexture should become protected (or create a virtual method to do this).\r\n\r\n```\r\n\/\/backbuffer of swap chain is used as texture for the SwapChainRenderTarget\r\n_texture = backBuffer;\r\n\r\n\/\/ MSAA RT needs another non-MSAA texture where it is resolved\r\nif (preferredMultiSampleCount > 1)\r\n{ \r\n            _resolvedTexture = new RenderTarget2D(\r\n                GraphicsDevice,\r\n                Width,\r\n                Height,\r\n                Mipmap,\r\n                Format,\r\n                DepthStencilFormat,\r\n                1,\r\n                RenderTargetUsage,\r\n                Shared,\r\n                ArraySize);\r\n }\r\n\r\n```","Yes, I think that should work :)\r\n\r\nMaybe we could move \r\n```\r\n\/\/ MSAA RT needs another non-MSAA texture where it is resolved\r\n            if (SampleDescription.Count > 1)\r\n            {\r\n                _resolvedTexture = new RenderTarget2D(\r\n                    GraphicsDevice,\r\n                    Width,\r\n                    Height,\r\n                    Mipmap,\r\n                    Format,\r\n                    DepthStencilFormat,\r\n                    1,\r\n                    RenderTargetUsage,\r\n                    Shared,\r\n                    ArraySize);\r\n            }\r\n```\r\nFrom CreateTexture() to new protected method. And then just call that method from CreateTexture() & from SwapChainRenderTarget constructor. Less code duplication that way. ","Hi, just upgraded MonoGame and got this problem with MSAA.\r\n\r\nCompared to my earlier MSAA implementation there are some minor changes to get it fixed in this release for DirectX, if this is the same problem as I got.\r\nFirst the check for valid multisample level seems wrong. Implementation below is working. Compare to GetMaxMultiSampleCount() already in the framework. It validates to get the highest possible MSAA rate from requested in the rendertarget (GraphicDevice.DirectX.cs):\r\n\r\n        private int GetMultiSamplingQuality(Format format, int multiSampleCount)\r\n        {\r\n            return _d3dDevice.CheckMultisampleQualityLevels(format, multiSampleCount) - 1;\r\n        }\r\n\r\n\r\n        internal SampleDescription GetSupportedSampleDescription(Format format, int multiSampleCount)\r\n        {\r\n            var multisampleDesc = new SharpDX.DXGI.SampleDescription(1, 0);\r\n\r\n            while (multiSampleCount > 1)\r\n            {\r\n                var quality = GetMultiSamplingQuality(format, multiSampleCount);\r\n                if (quality >= 0) {\r\n                    multisampleDesc.Count = multiSampleCount;\r\n                    multisampleDesc.Quality = quality;\r\n                    break;\r\n                }\r\n                multiSampleCount \/= 2;\r\n            }\r\n\r\n            return multisampleDesc;\r\n        }\r\n``\r\n\r\nThe second problem will be that Rendertarget MultiSampleCount is used to check if texture should be resolved. But if there is no support for MSAA it tries to resolve and you get NULL exception.\r\nMultiSampleCount must be set to the calculated value as below (RenderTarget2D.DirectX.cs).\r\n\r\n```\r\n        protected internal override SampleDescription CreateSampleDescription()\r\n        {\r\n            SampleDescription sampleDescription = this.GraphicsDevice.GetSupportedSampleDescription\r\n                (SharpDXHelper.ToFormat(this._format), this.MultiSampleCount);\r\n\r\n            \/\/ Set maximum multisample supported\r\n            this.MultiSampleCount = sampleDescription.Count;\r\n\r\n            return sampleDescription;\r\n        }\r\n```\r\nIn my implementation I never resolved the texture, It is used as texture input in a shader directly. I will make some test to see the performance difference with and without ResolveSubresource(). If it gives any negative performance it should be optional for cases where it is needed. Is there anyone that know if using the MSAA target directly is bad in any way?","@svantechgit I do not resolve the texture either because it cause [an issue](https:\/\/github.com\/MonoGame\/MonoGame\/pull\/6256#issuecomment-381405596) when presenting the swapchain.\r\nAdditionally it's a lot slower.\r\n\r\nhere are my changes https:\/\/github.com\/nkast\/MonoGame\/commit\/eb49d13aee0aae7ece96b2cf07759820aa955e11","@svantechgit The MSAA computation is done in two places. First the max level is retrieved in [GraphicsCapabilities](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/faea8a6a89504673e2bb7e435f0da8cc513d8c30\/MonoGame.Framework\/Graphics\/GraphicsCapabilities.DirectX.cs#L39-L54), then the quality is retrieved in the DirectX specific implementation of [GraphicsDevice](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/faea8a6a89504673e2bb7e435f0da8cc513d8c30\/MonoGame.Framework\/Graphics\/GraphicsDevice.DirectX.cs#L883-L905). Note that `1` is subtracted in GraphicsDevice.DirectX as in your implementation. The implementation in GraphicsCapabilities needs to store the supported MSAA level in a cross platform way. Is our current implementation incorrect?\r\n\r\nNow I'm not sure where this goes wrong. The property `RenderTarget2D.MultiSampleCount` is used in multiple places to check if the RT is multisampled. The issue in OP happens [here](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/3e92fc7bff7b4c32edf1314e143a4b7de4fab161\/MonoGame.Framework\/Graphics\/GraphicsDevice.DirectX.cs#L1111-L1112) when `ResolveSubresource` is called if MSAA count > 1. To assign  `RenderTarget2D.MultiSampleCount`, the passed `preferredMultiSampleCount` is clamped in the [constructor](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/faea8a6a89504673e2bb7e435f0da8cc513d8c30\/MonoGame.Framework\/Graphics\/RenderTarget2D.cs#L30) to the closest smaller power of two and to the sample count in GraphicsCapabilities [here](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/faea8a6a89504673e2bb7e435f0da8cc513d8c30\/MonoGame.Framework\/Graphics\/GraphicsDevice.cs#L281-L302).","@Jjagg Our problem was not the same as with SwapChainRenderTarget, it was caused by another change on our side. I still think that the implementation could be stronger.\r\n\r\nThe weakness is that _resolvedTexture is created with this condition\r\n`      if (SampleDescription.Count > 1)            {`\r\n                \r\nand is resolved with this condition\r\n`if (MultiSampleCount > 1)`\r\n\r\nif the function [GetSupportedSampleDescription()](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/faea8a6a89504673e2bb7e435f0da8cc513d8c30\/MonoGame.Framework\/Graphics\/GraphicsDevice.DirectX.cs#L892) isn't evaluated to the same result we could get NULL exception as in our case. Today the function return same value but instead ignore the return value where the format don't support the same samplecount as MaxMultiSampleCount. \r\nOur code check max samplecount for the format and don't use this at all if not supported. It updates MultiSampleCount  = SampleDescription.Count to reflect the actual value.\r\n\r\nSo this was no big issue, I will keep our implementation and comment out the resolve as we need all speed we can get.\r\n","I wanted to add that the most important part to remove all resolve code and use the MSAA output directly into a shader is to remove the line where the BindFlags.ShaderResource is unmasked.\r\n  ```\r\n          desc.BindFlags |= BindFlags.RenderTarget;\r\n            \/\/if (desc.SampleDescription.Count > 1)\r\n            \/\/    desc.BindFlags &= ~BindFlags.ShaderResource;\r\n\r\n```\r\nIt's ok to have more than one flag set, but the rekommendation is to use only one. Maybe In the future this could be an option depending on the users rendertarget output usage. For example some flags for combination in the RenderTargetUsage enum.\r\n"],"labels":["DirectX","Help Wanted"]},{"title":"MediaPlayer.IsMuted set to false on Android resume","body":"Version: MonoGame 3.6\r\nPlatform: Android\r\n\r\nSteps to reproduce:\r\n\r\n1. Create a MonoGame Android application\r\n2. Add any mp3 to your Content file\r\n3. In your LoadContent method, write the following:\r\n```\r\nvar song = Content.Load<Song>(\"yourMP3Name\");\r\nMediaPlayer.IsMuted = true;\r\nMediaPlayer.Volume = 1f;\r\nMediaPlayer.Play(song);\r\n```\r\n4. Start the application on Android.\r\n5. When the application button is running, hit the power button on your phone (or emulator, either works).\r\n6. Hit the power button again to bring it back.\r\n\r\nUpon resume, the value of MediaPlayer.IsMuted changes to false and the music is audible.\r\n\r\nI suspect there might be a way to work around this by trapping some resume event in the GameActivity. I'll give that a whirl and post back here, but I figured I'd log the issue since it's probably not desired behaviour ;)\r\n\r\nThanks!","comments":["As a quick update. I've tried adding code to the AndroidGameActivity OnResume and OnPostResume methods to set MediaPlayer.IsMuted to the value it's supposed to be at. What I've noticed is that the following three scenarios occur, seemingly at random:\r\n\r\n- The game will resume and audio won't play at all (desired outcome).\r\n- The game will resume and audio can be heard for a very brief period but the silences. You hear a very small blip.\r\n- The game will resume and audio can be heard and continues to be heard.\r\n\r\nThis sounds like there might be a bit of a race condition going on in here, which makes it a little difficult to work around. I can detect when MediaPlayer.IsMuted is not the value it's supposed to be in an Update method somewhere, but there exists a possibility that there can be an instant where audio is audible when it should not be.","@dellis1972 ?"],"labels":["Android","Help Wanted","Audio"]},{"title":"xml pipeline reading past end of xnb file ","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build insaller from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\n<!-- Write your issue bellow >\r\nI have been working on the pipeline and mgcb tools and have fixes for some problems in both but now I have a problem where the pipeline (specifically ReflectiveReader) continues to read after the end of the xnb file has been reached resulting in exception read past end and invalid reader index.\r\nBoth problem are reproducible in my game and am willing to pursue a solution but wanted to get a response from the pipeline team before I do. \r\n\r\n\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.7\r\n\r\n#### What operating system are you using:\r\n- Windows\r\n\r\n#### What MonoGame platform are you using:\r\n<!-- ie. DesktopGL, WindowsDX, WindowsUWP, Android:-->\r\n- DesktopGL\r\n","comments":["Can you please provide more detail on what the error is and how it can be reproduced?","I am trying to migrate the original XNA RPG kit to monogame and have been working on getting the pipeline and MGCB tools sorted out as they both had problems with the xml.\r\nHaving completed that activity I resumed my migration only to find that the pipleline itself has problems.\r\nThe first instance of the error occurs in the content load of the Map002.xnb file.\r\nthe pipeline dies in the InnerReader routine where it reads past the end of file and get completely confused trying to process what its read. I am able to reproduce it in VS debug mode and track the failure to the point where the object id is not within the xml. I believe it thinks it has a SpriteTexture.\r\nThe area in the xml file is the PlayerNpc segment.\r\nI can provide screen shots of what I have seen if that is of any help at all.\r\nI have not spent any time since the failure as it seemed to me to be outside of my original scope of 'fixing' the pipeline and MGCB tools.\r\nI would be happy to spend some time trying to sort this out. \r\nOne thing I did notice looking through the code while in the debugger there does not seem to be any check on the read position comparing it to the file length.","https:\/\/blogs.msdn.microsoft.com\/charlie\/2009\/09\/27\/the-xna-role-playing-game-starter-kit\/\r\n\r\n@MrMajorThorburn - Is this the XNA RPG Kit you are talking about?\r\n\r\nI see a `Map002.xml` which seems to be processed as passthru...\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/103522\/37203860-b7317702-2354-11e8-9925-ba80d48a2953.png)\r\n\r\nThat seems to load into the `RolePlayingGameData.Map` object.\r\n\r\nI don't see anything obvious in the `Map002.xml` `PlayerNpcEntries` section that could be causing issues.\r\n\r\nWe will need to setup a unit test to discover the bug then whittle down the XML file and data class to just part that causes the crash.  We can then go and fix it.\r\n\r\nIf anyone has the time to dig in here that would help.","If the PlayerNpcEntry is removed the error occurs in the next map. If I change the mapposition that allow it to work so can 'work round' but would prefer to resolve this issue. \r\nI am ok with continuing the investigation.\r\nI have not setup a test case in Git before so need a hint or three.\r\nI did setup some tests to help identify the solutions to problem in the pipeline so think I can setup a test where this problem occurs earlier in the game but I don't think that would be a good test case as you would still need most of the class files in order to create the MGCB.\r\nAre there some test cases specifically for xml that I could look at to see if I can figure this out?\r\n"],"labels":["ContentPipeline","Help Wanted"]},{"title":"Monogame 3.6 gametimes wonky on 240 Hz monitor","body":"<!--\r\n# Please make sure that the issue is present in the\r\n# develop branch of MonoGame before reporting\r\n#\r\n# You can download the development build insaller from:\r\n# http:\/\/www.monogame.net\/downloads\/\r\n-->\r\n\r\nWhen SynchronizeWithVerticalRetrace == true  .... the gameTime values for Update()\/Draw() randomly oscillate between 0 and ~7-8ms instead of being a more consistent ~4ms between calls.  (1\/240sec VSYNC ON = 4.1ms)\r\n\r\nMotion looks fine if you calculate motion on exact pixel steps (e.g. moving sprites at 4 pixels per frame) but if you try to calculate object positions off gametime, you get really bad stutter even if the framebuffer flipping is perfect (and you run >1000fps in VSYNC OFF).\r\n\r\nThere are one dozen models of 240 Hz monitors now available.   \r\n\r\nRefresh rates won't end at these levels \r\n -- an experimental 480 Hz monitor is now available, www.blurbusters.com\/480hz and developments are under way with prototype 1000 Hz displays which will be commercialized by the mid 2020s -- www.blurbusters.com\/1000hz-journey .... The benefits of higher refresh rates is actually visible ([Photo](https:\/\/www.blurbusters.com\/wp-content\/uploads\/2017\/08\/project480-mousearrow-690x518.jpg)).\r\n\r\nGametimes need to be better synchronized.\r\n\r\n\r\n<!-- System stats -->\r\n\r\n#### What version of MonoGame does the bug occur on:\r\n- MonoGame 3.6\r\n\r\n#### What operating system are you using:\r\n- Windows 10\r\n\r\n#### What MonoGame platform are you using:\r\n- Windows DX\r\n","comments":["I also see the problem happen sometimes on 120Hz and 144Hz where suddenly, I get a surge of two Update()\/Draw() in a row.  \r\n\r\nAnimations continue smoothly but the gametimes are like 8,8,8,8,**16,0**,8,8,8,8 milliseconds.   This includes the gametime timestamps.\r\n\r\nFrame pacing issue?","What do you have `Game.IsFixedTimeStep` set to? If it's enabled, your issue may be related to the problem PR #4207 aims to resolve. Try setting it to `false` and see if that makes a difference."],"labels":["Help Wanted"]},{"title":"[DesktopGL] PreferMultiSampling does not enable anti-aliasing","body":"When I set PreferMultiSampling to true, the game runs but I can clearly see that the triangles are rendered without anti-aliasing. This happens with the NuGet package id=\"MonoGame.Framework.DesktopGL\" version=\"3.6.0.1625\". When I downgrade the package to version=\"3.5.1.1679\" anti-aliasing works fine with the same game code: [Game1.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/1740880\/Game1.zip)\r\n\r\nI also built the latest version https:\/\/github.com\/MonoGame\/MonoGame\/commit\/6f4e51030120913bc1d5b21b34b07493d2eeebff myself but it has the same issue as the 3.6.0 package.\r\n\r\nWhile debugging I noticed that GraphicsDevice.PresentationParameters.MultiSampleCount has a different value depending on which package version I use.\r\n- NuGet package 3.6.0: MultiSampleCount = 32\r\n- NuGet package 3.5.1: MultiSampleCount = 4\r\n\r\nI tried adding an event handler to graphics.PreparingDeviceSettings right after \"graphics = new GraphicsDeviceManager\" and call \"e.GraphicsDeviceInformation.PresentationParameters.MultiSampleCount = 4;\" in there but anti-aliasing is still disabled.","comments":["What happens when you change the constructor of the GraphicsDeviceManager to this:\r\n\r\n```\r\n this.Graphics = new GraphicsDeviceManager(this)\r\n            {\r\n                PreferMultiSampling = true,                \r\n            }; \r\n```\r\n\r\nA MultiSampleCount of 32 definitely seems too high. With the event handler, do you actually see later on that the anti aliasing is now 4?\r\n\r\nMaybe you can also try rendering to a render target with an explicit aa count, to see if it works there?\r\n\r\n```\r\nvar target = new RenderTarget2D(device, width, height, false, SurfaceFormat.Color, DepthFormat.Default, 4, RenderTargetUsage.DiscardContents);\r\n```","@roy-t \r\nPreferMultiSampling = true in the constructor does not work. GraphicsDevice.PresentationParameters.MultiSampleCount is set to 32 and no anti-aliasing is applied to the rendered image.\r\n\r\nThe PreparingDeviceSettings event handler fires exactly once and PreparingDeviceSettingsEventArgs.GraphicsDeviceInformation.PresentationParameters.MultiSampleCount is also 32 in there.\r\n\r\nWhen I render to a render target with DepthFormat.Depth24 and preferredMultiSampleCount=4 I get a black render target.\r\nWhen I render to a render target with DepthFormat.Depth24 and preferredMultiSampleCount=0 I get a cube without anti-aliasing.\r\nWhen I render to a render target with DepthFormat.None and preferredMultiSampleCount=4 I get a cube without anti-aliasing.\r\n\r\nEverything tested with build 1371: http:\/\/teamcity.monogame.net\/viewLog.html?buildId=63984&tab=buildResultsDiv&buildTypeId=MonoGame_PackagingWindows","Ah, its weird that you get a black render target. It might be the case that the combination of no depth buffer and multi sampling is not supported, hence no aa. But I wonder why your get a black render target when aa is truly enabled. Can you also try with the DirectX renderer? What kind of GPU do you have?","My ThinkPad has a discrete NVIDIA NVS 5400M graphics card. The integrated Intel graphics card is disabled. Tested with driver versions 386.01 and 391.03","Another test on a different computer with an AMD Radeon HD 6450 instead of an NVIDIA Quadro graphics card:\r\nWhen rendering directly to the backbuffer with PreferMultiSampling = true I get a cube without AA.\r\nWhen I render to a render target with DepthFormat.Depth24 and preferredMultiSampleCount=4 I get a black render target.\r\nWhen I render to a render target with DepthFormat.Depth24 and preferredMultiSampleCount=0 I get a cube without anti-aliasing.\r\nWhen I render to a render target with DepthFormat.None and preferredMultiSampleCount=4 I get a cube without anti-aliasing.\r\nConsole.WriteLine(GraphicsDevice.PresentationParameters.MultiSampleCount) also prints 32\r\n\r\nIt's the exact same outcome as with the NVIDIA Quadro card, so this issue is clearly not a hardware or driver issue.\r\n\r\nTested on build 3.7.0.1376.","I know this is an old issue, but this appears to also be happening in the MonoGame.Framework.DesktopGL.Core package, the version of the package on Nuget is 3.7.0.7.  I discussed this briefly on the Discord and no one could really come up with anything to try more than what I already have.\r\n\r\nHere is a repo project: https:\/\/gist.github.com\/roncli\/8d898ab28b05e12b186006ee62c6db87\r\n\r\nAnd this is what I see as output on both Windows and Mac (don't really have access to a Linux desktop to test there):\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/498929\/52722972-85861180-2f61-11e9-8eaf-c0fbf05e9d85.png)\r\n","it does NOT work (the sample)","Still having this issue in 3.8.0.1082.\r\n\r\n ~~The only difference is that rendertargets are always black no matter which parameters I use.~~ _(Ignore that part. I'm an idiot.)_","I've had a look at the source now and I've noticed that in [GraphicsDeviceManager.SDL.cs](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Platform\/GraphicsDeviceManager.SDL.cs), the multisample settings are never actually passed to SDL, so I added this method:\r\n\r\n```csharp\r\n        partial void PlatformPreparePresentationParameters(PresentationParameters presentationParameters)\r\n        {\r\n            if (presentationParameters.MultiSampleCount > 0)\r\n            {\r\n                Sdl.GL.SetAttribute(Sdl.GL.Attribute.MultiSampleBuffers, 1);\r\n                Sdl.GL.SetAttribute(Sdl.GL.Attribute.MultiSampleSamples, presentationParameters.MultiSampleCount);\r\n            }\r\n        }\r\n```\r\n\r\nWith that change, multisampling works. Sort of.\r\n\r\nThe next problem is that the multisample count is always set to 32, regardless of your actual setting:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/3aed7d516712108e064356f1444d4c64243d8875\/MonoGame.Framework\/GraphicsDeviceManager.cs#L304-L309\r\n\r\nI've tried setting it in the event handler as described, but it doesn't work.\r\n\r\nThis is an issue because, for some reason, 32 does weird things on my machine, but 16 works fine. I'm curious as to why this block of code exists because the comment doesn't mention that.","wow!!! if you can get this to work, y'd be my hero. I would like to help but I have no idea of that Sdl code. Just saying: Very much appreciated \ud83d\udc4d ","Well, I've [sent a PR](https:\/\/github.com\/MonoGame\/MonoGame\/pull\/7338). Fingers crossed.\r\n\r\nEdit: We fixed it! This can probably be closed now"],"labels":["OpenGL"]},{"title":"mgcb.exe process left running if pipeline tool crashes","body":"If the pipeline tool crashes for some reason, it will leave any running mgcb.exe process stranded and still running (this may also occur if you launched from the IDE and 'stop debugging').\r\n\r\nThere should be a mechanism to avoid this -- on windows i am certain that there is, it involves making some win32 pinvokes to register the process as a child and windows closes it automatically.","comments":[],"labels":["MGCB Editor"]},{"title":"Support ContentTypeWriter.ShouldCompressContent Correctly","body":"We're not correctly supporting `ContentTypeWriter.ShouldCompressContent` on:\r\n\r\n - [SoundEffectContentWriter](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework.Content.Pipeline\/Serialization\/Compiler\/SoundEffectContentWriter.cs)\r\n - [Texture2DContentWriter](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework.Content.Pipeline\/Serialization\/Compiler\/Texture2DContentWriter.cs)\r\n - [TextureCubeWriter](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework.Content.Pipeline\/Serialization\/Compiler\/TextureCubeWriter.cs)\r\n\r\nI know that XNA skips compression on sound effects compressed with MSADPCM... not sure about texture content.\r\n\r\nThe idea behind this API is to avoid extra overhead of generic compression formats (XNA used LZX and MonoGame uses LZ4) on content that is already significantly compressed.  Otherwise at content loading time you do alot of extra CPU work to decompress it to only gain a tiny percentage of space.\r\n\r\nIdeally we would test different sound effect and texture XNBs with and without compression to decide if compression is worth it in those cases.  Like i don't remember if a texture already in a DXT format gains all that much when LZ4 compressed as well.  If we gain less than 10% or 20% disk space it is arguable that we shouldn't compress those XNBs.\r\n\r\nAlso we need to fix `ContentWriter` to correctly obey `ShouldCompressContent` which it does not:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework.Content.Pipeline\/Serialization\/Compiler\/ContentWriter.cs#L147\r\n","comments":["@KonajuGames  - I think you did work on our LZ4 compression before, so you might want to see this.","Yeah, I can take care of this.  I've got a good understanding of the systems behind this.","Interesting topic for thought.  The [XNA documentation](https:\/\/msdn.microsoft.com\/en-us\/library\/dd231952.aspx?f=255&MSPPError=-2147217396) states \"The automatic compression algorithms do not compress source data that is small in size\u2014less than one disk sector.\" (assuming 'disk' is a HDD).  At the time XNA 3.5 and 4.0 were developed, HDD sector sizes were 512 bytes. Starting in 2009, becoming more widespread in 2010 and becoming mainstream in 2011, HDD sector sizes were expanded to 4096 bytes.\r\n\r\nDefining it on a disk sector made sense back then, because I\/O read time had a greater effect than they typically do now, and reading a 10-byte file or a 500-byte file took the same amount of time because it has to read an entire sector regardless.\r\n\r\nWe should apply the same conditions, but I think it would make sense to use the more typical 4096 byte size as a minimum for compression.",">  I think it would make sense to use the more typical 4096 byte size as a minimum for compression.\r\n\r\nThat sounds reasonable to me."],"labels":["ContentPipeline","Help Wanted"]},{"title":"Android | Render Target Drawing Occasionally Out Of Sync","body":"So I don't know if this constitutes posting a github issue. Because I honestly have no idea what's going on...\r\n\r\nBut sometimes it seems like my drawing to RenderTargets and gets out of sync with my drawing for the rest of the game on Android (specifically Fire TV). I know it sounds crazy, but I checked and double checked the positions, they should be drawing to the exact same location on the screen, and 95% of the time they do. However, sometimes they get out of sync, \"out of sync\" is the best description I can come up with. Then it will correct itself within about 10 seconds. \r\n\r\nAlso, this only ever happens right after I see something like this in the debug output\r\nThread finished: <Thread Pool> # 11 \r\nThread started: <Thread Pool> # 14 \r\nThe thread 'Unknown' (0xb) has exited with code 0 (0x0).\r\n\r\nFrom what little bit I dug in to on Monogame for Android, it looks like there is separate threads that get set up for rendering. Is it possible that these threads could get messed up occasionally so that the draw calls to render targets don't happen in the same frame as standard draw calls?\r\n\r\nHere's an image of the problem\r\n![screen](https:\/\/user-images.githubusercontent.com\/3883656\/36308410-3d049442-12e6-11e8-9472-e914e1e989d1.png)\r\n\r\nAnd here's a short video\r\nhttps:\/\/www.youtube.com\/watch?v=zTLxkBbBgCc\r\n\r\nThis isn't a breaking bug, and frankly it's rare enough that I don't mind publishing with it since it corrects itself within a short time period. It's just an annoyance.\r\n\r\nAlso I feel like this could possibly be relevant? Maybe not, but it's something I wish I could try out to see if it fixes the issue, but as stated there we still just get a black screen.\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/issues\/3222\r\n\r\n\r\n","comments":["I don't know if this is relevant, and might be wrong...  I recall that on android, all rendering operating need to happen in the main UI thread. Given that monogame API is multithreaded, I think, on android, the underlying code defers all the calls so they can execute in the UI thread.","By default the android system will create the OpenGL context on the UI thread. The game thread will run in the background and \"Send\" to the UI thread for each \"Update\" . There is a way to get it to create and update the context on the background thread, in which case the \"Send\" is not used this can improve performance since the \"Send\" can take up to 200ms to run [1]\r\n\r\nIt might be you are hitting this kind of delay. The downside of setting `RenderOnUIThread` to false is if you interact with native UI elements (e.g post dialogs etc) you will need to use `Game.Activity.RunOnUiThread`. \r\n\r\n[1] https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Android\/MonoGameAndroidGameView.cs#L324","@vpenades with android, you can only draw on the thread the OpenGL context was created on and it must be \"Current\". So it doesn't need to be the UI Thread. Take a look at https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Android\/MonoGameAndroidGameView.cs if you are interested in the details :)","@dellis1972 Is RenderOnUIThread supposed to be working? I just get a black screen, so I wasn't able to test if it helped or not.\r\n\r\nAlso, this project's source is open and you can find it here.\r\nhttps:\/\/github.com\/Romans-I-XVI\/MonoGame-RainbowDash\r\n\r\nYou also need to have this shared project referenced.\r\nhttps:\/\/github.com\/Romans-I-XVI\/monoEngine\r\n\r\nThe only thing that sucks is that it doesn't happen very much... and I actually only think I've ever seen it on my Fire TV device. I don't recall seeing it on my phone ever.","I can't hunt through the code in your project to find the relevant line of drawing code, but if you are using `SpriteBatch` to draw the circles, it could be the sort mode.","The issue is not with the order of drawing. But man, this is a weird issue."],"labels":["Android","OpenGL"]},{"title":"ContentImporter fails when there is no DefaultProcessor","body":"When defining a  ContentImporter, the DefaultProcessor attribute (Decorator?) is optional as it is shown between brackets. But it seems to be required as it makes the MG Pipeline Tool fail with a NullException when selecting an importer without a DefaultProcessor.\r\n","comments":["So what should it do under this circumstance?  What does the XNA pipeline do in this case?","In first place, with XNA, when adding a known asset type, the content tool selects the right importer and processor, so you cannot leave the field \"ContentProcessor\" empty in the properties of an asset (in the content project)\r\nWhen no valid processor is selected, it throws a \"Wrong content processor input type\" error. \r\n\r\nWhen adding  asset is of an unknown type, for ex an *.xyz file, the ContentProcessor field and Importer are empty.\r\nIf the ContentProcessor is left empty, after selecting an importer without a defaultprocessor, it does not throw an exception:\r\n![image](https:\/\/user-images.githubusercontent.com\/19704413\/36428315-e7e9e6e8-164f-11e8-9d39-d1bbf543d8cc.png)\r\n\r\n```\r\n2>  Building dude.xyz -> H:\\XNA\\TestContentImporterAndImporter\\XNA_WindowsGame1\\XNA_WindowsGame1\\bin\\x86\\Debug\\Content\\dudexyz.xnb\r\n2>  Rebuilding because asset is new\r\n2>  Importing dude.xyz with ContentPipelineExtension2.ContentImporter1\r\n2>  Serializing H:\\XNA\\TestContentImporterAndImporter\\XNA_WindowsGame1\\XNA_WindowsGame1\\obj\\x86\\Debug\\dude_1.xml\r\n2>  Compiling H:\\XNA\\TestContentImporterAndImporter\\XNA_WindowsGame1\\XNA_WindowsGame1\\bin\\x86\\Debug\\Content\\dudexyz.xnb\r\n```\r\n\r\nI think it is more a problem of the MonoGamePipelineTool not handling this case and crashing when no processor is provided. But I may be wrong.\r\n "],"labels":["Help Wanted","MGCB Editor"]},{"title":"Can't load an effect containing an array \/ \"An element with the same key has already been added\"","body":"Hi !\r\nSince this morning, after having installed the build 1255, \r\nall my shaders containing an array won't load:\r\nconst float weights[] = { 0.051f, 0.1f, 0.15f, 0.28f, 0.5f,\r\n 0.7f, 0.8f, 0.9f, 1.0f, 1.0f,\r\n 1.0f, 1.0f, 1.0f, 0.9f, 0.8f,\r\n 0.7f, 0.5f, 0.28f, 0.15f, 0.1f,\r\n 0.051f };\r\nit seems the parser tries to find a name for each value in the array...\r\n\r\nIs it impossible to write arrays this way from now on ? It used to work until build 1248\r\n\r\n@guFalcon ?","comments":["After some investigation by using directly the sources of Monogame with my game, I found the exact line of code:\r\n\r\n It's in when adding to _indexLookup, it adds an empty string because all _parameters' Name are empty:\r\n\r\n```\r\ninternal EffectParameterCollection(EffectParameter[] parameters)\r\n        {\r\n            _parameters = parameters;\r\n            _indexLookup = new Dictionary<string, int>(_parameters.Length);\r\n            for (int i = 0; i < _parameters.Length; i++)\r\n            {\r\n                _indexLookup.Add(_parameters[i].Name, i); \/\/ <- error here\r\n            }\r\n        }\r\n```\r\n\r\nException's stacktrace:\r\n>  \u00e0 System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n>    \u00e0 System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n>    \u00e0 Microsoft.Xna.Framework.Graphics.EffectParameterCollection..ctor(EffectParameter[] parameters) dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Graphics\\Effect\\EffectParameterCollection.cs:ligne 18\r\n>    \u00e0 Microsoft.Xna.Framework.Graphics.Effect.ReadParameters(BinaryReader reader) dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Graphics\\Effect\\Effect.cs:ligne 455\r\n>    \u00e0 Microsoft.Xna.Framework.Graphics.Effect.ReadParameters(BinaryReader reader) dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Graphics\\Effect\\Effect.cs:ligne 403\r\n>    \u00e0 Microsoft.Xna.Framework.Graphics.Effect.ReadEffect(BinaryReader reader) dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Graphics\\Effect\\Effect.cs:ligne 269\r\n>    \u00e0 Microsoft.Xna.Framework.Graphics.Effect..ctor(GraphicsDevice graphicsDevice, Byte[] effectCode, Int32 index, Int32 count) dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Graphics\\Effect\\Effect.cs:ligne 107\r\n>    \u00e0 Microsoft.Xna.Framework.Content.EffectReader.Read(ContentReader input, Effect existingInstance) dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Content\\ContentReaders\\EffectReader.cs:ligne 20\r\n>    \u00e0 Microsoft.Xna.Framework.Content.ContentTypeReader`1.Read(ContentReader input, Object existingInstance) dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Content\\ContentTypeReader.cs:ligne 57\r\n>    \u00e0 Microsoft.Xna.Framework.Content.ContentReader.InnerReadObject[T](T existingInstance) dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Content\\ContentReader.cs:ligne 188\r\n>    \u00e0 Microsoft.Xna.Framework.Content.ContentReader.ReadObject[T]() dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Content\\ContentReader.cs:ligne 163\r\n>    \u00e0 Microsoft.Xna.Framework.Content.ContentReader.ReadAsset[T]() dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Content\\ContentReader.cs:ligne 72\r\n>    \u00e0 Microsoft.Xna.Framework.Content.ContentManager.ReadAsset[T](String assetName, Action`1 recordDisposableObject) dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Content\\ContentManager.cs:ligne 332\r\n>    \u00e0 Microsoft.Xna.Framework.Content.ContentManager.Load[T](String assetName) dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Content\\ContentManager.cs:ligne 254\r\n>    \u00e0 Swift.Engine._ResShaders.LoadContent(ContentManager content) dans H:\\_____MG\\____Swift2k17\\Engine\\_ResShaders.cs:ligne 289\r\n>    \u00e0 Swift.Engine.__Core.Initialize() dans H:\\_____MG\\____Swift2k17\\Engine\\__Core.cs:ligne 264\r\n>    \u00e0 Microsoft.Xna.Framework.Game.DoInitialize() dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Game.cs:ligne 674\r\n>    \u00e0 Microsoft.Xna.Framework.Game.Run(GameRunBehavior runBehavior) dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Game.cs:ligne 383\r\n>    \u00e0 Microsoft.Xna.Framework.Game.Run() dans H:\\_____MG\\____MonogameSource\\MonoGame\\MonoGame.Framework\\Game.cs:ligne 369\r\n>    \u00e0 Swift.Launcher.Program.Main() dans H:\\_____MG\\____Swift2k17\\Launcher\\Program.cs:ligne 18\r\n","I think I narrowed the problem:\r\nIn my shader, I have:\r\n\r\n`\tconst float weights[] = { 0.051f, 0.1f, 0.15f, 0.28f,\r\n    \t    \t    \t    \t    \t    \t0.5f, 0.7f, 0.8f, 0.9f,\r\n    \t    \t    \t    \t    \t    \t1.0f, 1.0f, 1.0f, 1.0f,\r\n    \t    \t    \t    \t    \t    \t1.0f, 0.9f, 0.8f, 0.7f,\r\n    \t    \t    \t    \t    \t    \t0.5f, 0.28f, 0.15f, 0.1f, 0.051f };`\r\nAnd it seems the parser tries to find a name to the second line, the third, etc...\r\n\r\nIs it impossible to write arrays this way ?? It used to work until build 1248 ! \r\n\r\nAfter putting all the array on one single line, it still tries to add an Empty line because it tries to find the 21 elements of the array as an effect parameter !\r\n","Even a simple\r\n\r\n```\r\nuniform float weights[KERNEL_SIZE];\r\nuniform float2 offsets[KERNEL_SIZE];\r\n```\r\n\r\ngives this Exception... \r\nPutting static instead of uniform allows to load the effect, but effectparameters are null and when setting value, the game throws a nullexception !\r\n\r\nAnd debugging shows:\r\n![debugmg](https:\/\/user-images.githubusercontent.com\/19704413\/36251752-9efdaffc-1242-11e8-9b7d-f10f6fa166c2.jpg)\r\n\r\nKERNEL_SIZE's value is 15, which corresponds to the allocated array by MojoShader. But why each array's value is considered as an effectparameter ??!","Oh. Sorry that I didn't react earlier. Just saw that.\r\nYes. It seems that it's because of my submission... To my defense, there were no tests for this and I really didn't know how the parser\/converter reads the parameters.\r\n\r\nI'll look into it tonight or tomorrow. The solution seems to be just to NOT add variables with the name NULL...\r\nThx and nice debugging btw.","No problem ;) I'm not in a hurry. I learned some things by the way\r\n\r\nI would have fixed it myself (with a call to if(!String.IsNullOrWhiteSpace()) before adding to the list) if I was more confortable with GIT and the problem of white spaces in code (I dunno which line ending is to be kept, to not trigger changes where there are not)\r\n\r\n","I feel you man :)","@MarcVador @guFalcon - I merged the fix just now.\r\n\r\nStill it seems weird we're getting these null parameter names in the collection at all.\r\n\r\nWe need someone to step thru the `EffectReader` code and see where these nulls are coming from.  Either the loading process is adding them or they are being added by the MGFX code.  Either case needs to be fixed.\r\n","From what I saw (maybe unrelated):\r\n\r\nin Effect.cs, line 239:\r\n```\r\n\tfor (var c = 0; c < buffers; c++) \r\n            {\t\t\t\t\r\n\t\t\t\tvar name = reader.ReadString();               \r\n\r\n\t\t\t\t\/\/ Create the backing system memory buffer.\r\n\t\t\t\tvar sizeInBytes = (int)reader.ReadInt16 ();\r\n```\r\nname is empty too.\r\n\r\nNulls seem to be coming from byte[] effectCode in the Effect constructor (see below)\r\nIs this the binary file of the effect after having been built to an xnb ?\r\n\r\nWhen loading game, calls are\r\n```\r\npublic Effect (GraphicsDevice graphicsDevice, byte[] effectCode, int index, int count) : this(graphicsDevice)\r\n|__ private void ReadEffect (BinaryReader reader)\r\n___|__ private static EffectParameterCollection ReadParameters(BinaryReader reader)\r\n```\r\nwhere I get nulls for an array.\r\n\r\n\r\nprivate void ReadEffect (BinaryReader reader)","@MarcVador  - The code you linked there was the constant buffer loading code... almost always the CBs have no name.  This is normal.\r\n\r\nThe code where the parameter name is loaded is here:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Graphics\/Effect\/Effect.cs#L397\r\n\r\nYou should step thru that code and verify we're getting a null parameter name there.\r\n\r\nIf that is null then look at where the parameter names are created and written in the 2MGFX code.\r\n\r\nI suspect that here:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/Tools\/2MGFX\/ConstantBufferData.sharpdx.cs#L26\r\n\r\nThe name is null and it is triggering all this mess.\r\n\r\nIf that is true i would recommend not adding the parameter if the name is null as the parameter is useless without a name to reference it.\r\n\r\nSecond i would go here:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/Tools\/2MGFX\/EffectObject.writer.cs#L155\r\n\r\nAnd add an exception if the parameter name is null to detect this bug in the future.","Sorry for the delay, I didn't have much time these days to work on a so big problem.\r\n\r\nAfter a step by step debug on https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Graphics\/Effect\/Effect.cs#L397, the name is effectively null when parsing an array.\r\n\r\nThe fix provided by @guFalcon has solved the issue for now :).\r\n\r\nBut I noticed something while creating shaders, it may be related (or not ?)\r\nWhen I first created my shader, doing this was as if the arrays were 0 filled (the screen was filled with a single color, changing when moving the mouse as the 'texturetoblur' was updated) :\r\n```\r\nconst float offset[] = { 0.0f, 1.3846153846f, 3.2307692308f };\r\nconst float weight[] = { 0.2270270270f, 0.3162162162f, 0.0702702703f };\r\n\r\nfloat4 MainPSLinearHoriz(in VS_OUTPUT input) : SV_TARGET\r\n{\r\n\tfloat4 color = texturetoblur.SampleLevel(TexSampler, input.tex * _TexRes, 0) * weight[0];\r\n\tfor(int i = 1; i < 3; i++) {\r\n\t \tcolor +=  texturetoblur.SampleLevel(TexSampler, input.tex + float2(offset[i], 0.0f) * _TexRes, 0) * weight[i];\r\n\t \tcolor +=  texturetoblur.SampleLevel(TexSampler, input.tex - float2(offset[i], 0.0f) * _TexRes, 0) * weight[i];\r\n\t}\r\n\r\n\treturn color * (1.0 + 0.2270270270f +  0.3162162162f* 0.5 + 0.0702702703f* 0.25);\r\n}\r\n```\r\nWhen I figured it, I changed the code to:\r\n```\r\nfloat4 MainPSLinearHoriz(in VS_OUTPUT input) : SV_TARGET\r\n{\r\n\tconst float weight[] = { 0.2270270270f, 0.3162162162f, 0.0702702703f };\r\n\tconst float offset[] = { 0.0f, 1.3846153846f, 3.2307692308f };\r\n\r\n\tfloat4 color = texturetoblur.SampleLevel(TexSampler, input.tex * _TexRes, 0) * weight[0];\r\n\tfor(int i = 1; i < 3; i++) {\r\n\t \tcolor +=  texturetoblur.SampleLevel(TexSampler, input.tex + float2(offset[i], 0.0f) * _TexRes, 0) * weight[i];\r\n\t \tcolor +=  texturetoblur.SampleLevel(TexSampler, input.tex - float2(offset[i], 0.0f) * _TexRes, 0) * weight[i];\r\n\t}\r\n\r\n\treturn color * (1.0 + 0.2270270270f +  0.3162162162f* 0.5 + 0.0702702703f* 0.25);\r\n}\r\n```\r\nwhich works like expected: the weights and offsets are not 0.\r\n\r\n@tomspilman Is there a way to debug 2MGFX ? Like using the command line debug arguments to build a shader and stop where I need to see what it does ?","Wait a minute :)\r\nYou moved the array declaration into the function, which should effectively stop exposing it to the effect as EffectParameter (I think it should only parse globals). So they are not interpreted wrong when parsing them at startup.\r\nAre the arrays accessible via EffectParameters in your second test?\r\n(As to your question. I would very much like such a tool myself.)","Of course i just noticed this when working on my shader. \r\nBut within my tests to check names they are \"out\" of the function like in my first code excerpt,, and each value has \"no name\"\r\nI was just wondering if an array is supported at all or not by 2MGFX or MojoShader as it seems the arrays are empty, regardless what is put in it ?"],"labels":["MGFX","Help Wanted"]},{"title":"3.7.0.1248 - Exception loading a 3d model that loaded correctly in 3.7.0.1126","body":"I've just upgraded to 3.7.0.1248 , and I get this exception when I do `Content.Load<Model>(\"KinectV2\");`\r\n\r\n```\r\nMicrosoft.Xna.Framework.Content.ContentLoadException\r\n  HResult=0x80131500\r\n  Message=Could not find ContentTypeReader Type. Please ensure the name of the Assembly that contains the Type matches the assembly in the full type name: Microsoft.Xna.Framework.Content.ReflectiveReader`1[[Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent, MonoGame.Framework.Content.Pipeline, Version=3.7.0.1248, Culture=neutral, PublicKeyToken=null]] (Microsoft.Xna.Framework.Content.ReflectiveReader`1[[Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent, MonoGame.Framework.Content.Pipeline]])\r\n  Source=MonoGame.Framework\r\n  StackTrace:\r\n   at Microsoft.Xna.Framework.Content.ContentTypeReaderManager.LoadAssetReaders(ContentReader reader)\r\n   at Microsoft.Xna.Framework.Content.ContentReader.InitializeTypeReaders()\r\n   at Microsoft.Xna.Framework.Content.ContentReader.ReadAsset[T]()\r\n   at Microsoft.Xna.Framework.Content.ContentManager.ReadAsset[T](String assetName, Action`1 recordDisposableObject)\r\n   at Microsoft.Xna.Framework.Content.ContentManager.Load[T](String assetName)\r\n   at Game1.Game1.LoadContent() in F:\\tests\\Game1.cs:line 53\r\n   at Microsoft.Xna.Framework.Game.Initialize()\r\n   at Game1.Game1.Initialize() in F:\\tests\\Game1.cs:line 39\r\n   at Microsoft.Xna.Framework.Game.DoInitialize()\r\n   at Microsoft.Xna.Framework.Game.Run(GameRunBehavior runBehavior)\r\n   at Game1.Program.Main() in F:\\tests\\Program.cs:line 18\r\n\r\n```\r\n\r\n[This is the 3D model (both the original and the XNB)](https:\/\/github.com\/MonoGame\/MonoGame\/files\/1710793\/ModelException.-.3.7.0.1248.zip)\r\n\r\nThe model is a very basic Wavefront OBJ model with a material and a texture, processed with Open Asset Importer. The content pipeline processes it fine without complains.\r\n\r\nAlso, the model, nor the processing options, have not been changed since November last year, so It's a regression introduced recently.\r\n\r\nUpdate: Digging inside the content importer, I've got this exception message:\r\n\r\n`Error loading shared resource. Expected type Effect, received type MaterialContent`\r\n","comments":["I assume you are using the stock `ModelProcessor`?\r\n\r\nI suspect we should be handling the material changes in the `OpenAssetImporter` within that stock processor.  Might need to do a little refactoring, but we can ensure it returns a `BasicEffect` like it did before.\r\n\r\nThis sound right?","Yes, the importer is `Open Asset Import Library` and `BasicEffect` , and we haven't changed anything related to this asset in a while, so it's something that has changed very recently.\r\n\r\nIn fact, we might have the same issue with other wavefront models... keep in mind that MGCB processes the models correctly, they fail at runtime when you try to load them.\r\n\r\n@tomspilman Sure, I think handling the materials in a general way should be good enough, Additionally, it could be good to add some wavefront obj files to the test cases.","> Sure, I think handling the materials in a general way should be good enough, \r\n\r\nYeah there should be no reason for the `ModelProcessor` to ever return anything but a stock effect.  This should occur regardless of the importer.\r\n\r\n> it could be good to add some wavefront obj files to the test cases.\r\n\r\nIf you have a simple OBJ model we could add to the unit tests i'm all for it.","If you don't mind, there's some test wavefront objs in some public repositories, so far I know about these:\r\n\r\n[helix-toolkit test models](https:\/\/github.com\/helix-toolkit\/helix-toolkit\/tree\/develop\/Models\/obj)\r\n\r\nBut if you don't feel confident about using them, I can prepare some test models.\r\n\r\nIn any case, we need this to be closed soon, since we have our development workflow stucked again!\r\n","There are several issues like this in the forums. It'd probably be better to put this issue in 3.7 to avoid skipping it\r\n\r\nhttp:\/\/community.monogame.net\/t\/solved-content-load-model-contentloadexception\/10355\r\nhttp:\/\/community.monogame.net\/t\/contentloadexception-in-version-3-7-0-1232\/10281\r\nhttp:\/\/community.monogame.net\/t\/contentloadexception-in-version-3-7-0-1316\/10371\r\n\r\n","I suppose you already knew it, but the \"_xnaCompatible\" path (ImportXnaMaterials instead of ImportMaterials) makes the model work.\r\n\r\nBut if you're stuck and need the latest mgcb like me, changing the bool in the constructor of OpenAssetImporter class from false to true and recompiling works.\r\n\r\nedit: I hadn't realized FbxImporter is still there, just switching to it would probably fix errors.","Based on feedback by @KakCAT I found the current workaround is to use the FBX Importer, even with Wavefront OBJ files.  I've changed the importer and the models appear again.\r\n\r\n@tomspilman should I close the issue as resolved?\r\n\r\nSince the Assimp importer is still failing, and as far as I know, it remains the default importer for OBJ files when you add them to a content project, at least I would change MGCB to use the FBX Importer by default.","@vpenades\r\n\r\n> should I close the issue as resolved?\r\n\r\nNo i plan to fix it here soon.\r\n","I get the same exception with a simple textured cube in COLLADA format when I execute the line Content.Load<Model>().\r\n\r\n```\r\nMicrosoft.Xna.Framework.Content.ContentLoadException\r\n  HResult=0x80131500\r\n  Message=Could not find ContentTypeReader Type. Please ensure the name of the Assembly that contains the Type matches the assembly in the full type name: Microsoft.Xna.Framework.Content.ReflectiveReader`1[[Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent, MonoGame.Framework.Content.Pipeline, Version=3.7.0.1371, Culture=neutral, PublicKeyToken=null]] (Microsoft.Xna.Framework.Content.ReflectiveReader`1[[Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent, MonoGame.Framework.Content.Pipeline]])\r\n  Source=MonoGame.Framework\r\n  StackTrace:\r\n   at Microsoft.Xna.Framework.Content.ContentTypeReaderManager.LoadAssetReaders(ContentReader reader)\r\n   at Microsoft.Xna.Framework.Content.ContentReader.InitializeTypeReaders()\r\n   at Microsoft.Xna.Framework.Content.ContentReader.ReadAsset[T]()\r\n   at Microsoft.Xna.Framework.Content.ContentManager.ReadAsset[T](String assetName, Action`1 recordDisposableObject)\r\n   at Microsoft.Xna.Framework.Content.ContentManager.Load[T](String assetName)\r\n   at ColladaTest.Game1.LoadContent() in D:\\dev\\_tests\\ColladaTest\\Game1.cs:line 45\r\n   at Microsoft.Xna.Framework.Game.Initialize()\r\n   at ColladaTest.Game1.Initialize() in D:\\dev\\_tests\\ColladaTest\\Game1.cs:line 32\r\n   at Microsoft.Xna.Framework.Game.DoInitialize()\r\n   at Microsoft.Xna.Framework.Game.Run(GameRunBehavior runBehavior)\r\n   at ColladaTest.Program.Main() in D:\\dev\\_tests\\ColladaTest\\Program.cs:line 17\r\n```\r\n\r\nScreenshot of model:\r\n![screenshot](https:\/\/user-images.githubusercontent.com\/22099714\/37036960-82d27fb0-2151-11e8-8a94-60658232a120.PNG)\r\n\r\nExported COLLADA format:\r\n[textured_cube.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/1785318\/textured_cube.zip)\r\n\r\nBlender source file:\r\n[textured_cube.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/1785325\/textured_cube.zip)\r\n\r\nContent.mgcb:\r\n```\r\n\r\n#----------------------------- Global Properties ----------------------------#\r\n\r\n\/outputDir:bin\/$(Platform)\r\n\/intermediateDir:obj\/$(Platform)\r\n\/platform:DesktopGL\r\n\/config:\r\n\/profile:Reach\r\n\/compress:False\r\n\r\n#-------------------------------- References --------------------------------#\r\n\r\n\r\n#---------------------------------- Content ---------------------------------#\r\n\r\n#begin textured_cube.dae\r\n\/importer:OpenAssetImporter\r\n\/processor:ModelProcessor\r\n\/processorParam:ColorKeyColor=0,0,0,0\r\n\/processorParam:ColorKeyEnabled=True\r\n\/processorParam:DefaultEffect=BasicEffect\r\n\/processorParam:GenerateMipmaps=True\r\n\/processorParam:GenerateTangentFrames=False\r\n\/processorParam:PremultiplyTextureAlpha=True\r\n\/processorParam:PremultiplyVertexColors=True\r\n\/processorParam:ResizeTexturesToPowerOfTwo=False\r\n\/processorParam:RotationX=0\r\n\/processorParam:RotationY=0\r\n\/processorParam:RotationZ=0\r\n\/processorParam:Scale=1\r\n\/processorParam:SwapWindingOrder=False\r\n\/processorParam:TextureFormat=Compressed\r\n\/build:textured_cube.dae\r\n```\r\n\r\nTested on build 3.7.0.1371","@andrekoehler - Yeah this issue has nothing to do with the model format.  It has to do with how materials are processed. \r\n\r\nI will have a fix soon.","@tomspilman Anything I can do to help with this? Would be great to get this in 3.7.1.","@Jjagg - First FYI...\r\n\r\nhttps:\/\/twitter.com\/Tesla3D\/status\/1047981452560936964\r\n\r\nThe issue is knowing when to process materials like legacy XNA and when to process them in a better way.  XNA always returned a `BasicEffect` for models which throws away a lot of the material info the artist setup.  This is fine if you just want the few features XNA and BasicEffect provided... not fine if you're wanting to do more.\r\n\r\nSo to do more i have it returning a `MaterialContent` passing along all the content info that AssImp provides.  This allows someone to extended the processor to generate their own custom effects or material data.\r\n\r\nThe problem @vpenades and @andrekoehler are having is that they are trying to use the MonoGame `OpenAssetImporter` and assuming it will return `BasicEffect` objects and it is not.  Our implementation of the XNA `FbxImporter` and `ObjImporter` do work like XNA.  Since by convention importers in the XNA pipeline do not have properties it isn't like they can enable\/disable this feature.\r\n\r\nSo i see three options here:\r\n\r\n 1. Break compatibility and this is just how the `OpenAssertImporter` works.\r\n 2. Make a new importer like `XnaCompatibleOpenAssertImporter` which sucks... but does what some want.\r\n 3. Add support for importer properties to our Pipeline tooling and MGCB.\r\n\r\n3 is a long term good feature making the pipeline more flexible.  2 might be just what we need to do.\r\n\r\nI really don't have any time to work on this so hopefully this helps someone move forward on this.","Just an update of our status regarding this issue:\r\n\r\nIn the end, we took the hard and long path of modifying all our assets, so they look like they used to look before, but processed with the new processors.\r\n\r\nNew assets being added to our project use a custom glTF importer, so they use neither of the assimp importers.\r\n\r\nSo, on our side, choosing Tom option 1 of breaking compatibility is no longer a problem","@tomspilman I get the purpose of the change to the importer, but it would have been better if the processor had been changed so behavior of the model building pipeline didn't change\/break. I don't think we should support importer parameters for this, but instead just drop the extra information in the processor. IMO we could make things a lot easier for users in a few simple steps:\r\n\r\n- Have only 1 importer for models, `AssimpImporter` (if for compatibility we have to keep the old ones, we can maybe just not display them in the Pipeline Tool)\r\n- Have only 1 processor for models that strips down the imported stuff and writes the XNA compatible xnb with the `BasicMaterialContent`.\r\n- Write docs that explain that the imported model has additional data that can be accessed and made into an effect using a custom processor.\r\n\r\nEDIT: Writing `MaterialContent` in the `ModelWriter` should probably fail, since it can't be loaded that way. Would be nice if we could check that what we write is actually an `Effect`.","@Jjagg \r\n\r\nSo thinking about this more.  \r\n\r\nIf `MaterialProcessor` (which is what `ModelProcessor` uses internally) was fixed to first convert plain `MaterialContent` into a `BasicMaterialContent` then it would solve the issue @vpenades ran into.  This would just be a process of making a simple translation between them from the code here:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework.Content.Pipeline\/OpenAssetImporter.cs#L352\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework.Content.Pipeline\/OpenAssetImporter.cs#L416\r\n\r\nThen we can leave the existing `OpenAssertImporter` to export rich material info by default.  Leaving it open for people to write custom processors (model or material processors) to exploit that info.\r\n\r\n\r\n> Have only 1 importer for models\r\n> Have only 1 processor for models\r\n\r\nI think it is a bad idea to get into thinking one processor or one importer is enough.  The reason importers and processors are separate is so you can mix and match them.\r\n\r\n\r\n> Writing `MaterialContent` in the `ModelWriter` should probably fail,\r\n\r\nYeah i think that is something we could consider doing.","@tomspilman \r\n\r\n> If `MaterialProcessor` was fixed to first convert plain `MaterialContent` into a `BasicMaterialContent`\r\n\r\nYeah, that's a good idea.\r\n\r\n> I think it is a bad idea to get into thinking one processor or one importer is enough. The reason importers and processors are separate is so you can mix and match them.\r\n\r\nRegarding the importer my point was that it's redundant to have the `XImporter` and `FbxImporter` because they just delegate to the AssimpImporter and it's confusing to users. Functionally we only have 1 importer anyways. We already only have 1 built-in processor, but of course with the extra stuff that's imported now users can do whatever with a custom processor.","@jjagg I agree, right now there's two importers but they both use assimp. I guess the only thing that changed between both importers is how assimp content is converted to xna content. In the other hand, I am worried that further changes may force us to reexport all our assets again, ","> Regarding the importer my point was that it's redundant to have the XImporter and FbxImporter because they just delegate to the AssimpImporter and it's confusing to users\r\n\r\nWell they are there specifically because they behave like XNA does... including always returning `BasicMaterialContent` objects.  If not any user custom processors could have to be re-written to support how `OpenAssertImporter` materials are generated.\r\n\r\n\r\n> In the other hand, I am worried that further changes may force us to reexport all our assets again,\r\n\r\nWe should be sure to check any change we make for this with your project @vpenades and be sure it didn't break it.\r\n","> Well they are there specifically because they behave like XNA does... including always returning BasicMaterialContent objects.\r\n\r\nOops, bit of an oversight on my part. Yeah, we definitely want an XNA compatible importer too.","Seeing this issue currently on latest packages MonoGame.Content.Builder 3.7.0.9 and monogame.framework.desktopgl 3.7.1.189.\r\n\r\nSeems to happen no matter which content importer I choose sadly.\r\n\r\nAny suggestions for how I can import models without this failing upon content load?","Ah, this could be a version mismatch. MonoGame.Content.Builder is a version published by Cra0zy, and is fairly out of date.\r\n\r\nIt would be nice if the nuget packages for this could be sorted out. Going through a dependency hell trying to get a simple game to work \ud83d\ude04 ","Just a note that this is still happening in 3.8 but that the fix (use the FBX importer or write your own processor) still works :)"],"labels":["ContentPipeline"]},{"title":"Load Songs from Streams","body":"Currently there is no way in MonoGame to load a Song from a stream. All other assets (at least the types I use) can be loaded from streams somehow, but for Songs the only option available is to load them from an URIs which doesn't help if one creates a package for his game assets (for easy modding and simplified management). \r\n\r\nI imagine a stream is read at some point so even if direct creation of Song object from stream may be not possible, maybe there is a way to intercept that read request and send my on bytes buffer.","comments":["When you say load from streams, you mean the filestream classes that are a part of the System.IO namespace.  Also do you mean creating a new content pipeline loader using FileStream classes?","Yes, I mean loading songs from something like a System.IO.Stream. \r\nTextures have Graphics.Texture2D.FromStream(...) or ContentManager.Load<Texture2D>(...), sounds have Audio.SoundEffect.FromStream(...), but for songs there is only Media.Song.FromUri(...) which does not allow passing a Stream object. ","I will have to look into that.  Would be cool to put that in. \ud83d\ude0a","Historically, there is no ```Song.FromSteam()``` because there was no WMA decoder that accepts steams on Windows (for instance, Media Foundation, and therefore SharpDX don't allow it). Don't know if it's still the case today, but this will probably imply to ditch the WMA format, which is something we may not want for XNA backward compatibility.\r\n\r\nA good start would be to look for a Windows WMA decoding library that accepts streams, and not just URIs. Once we get there, we'll have to make the WindowsDX target to use it, and once this is done, we can start thinking about adding ```FromStream``` to all platforms.","FYI.   At least with XACT i was able to hack a streaming implementation under the hood with just access to `DynamicSoundEffectInstance`.  I'll try to find time to contribute that code back as it worked fairly well for like less than 200 lines of code."],"labels":["Feature Request","Help Wanted","Audio"]},{"title":"Add touchscreen support to OpenGL \/ Desktop","body":"Currently, touchscreen is not supported on OpenGL \/ Desktop projects. With the proliferation of laptops \/ 2-in-1's etc. with touchscreens, it would be great to support this feature.","comments":[],"labels":["Feature Request"]},{"title":"Hang when task switching during ad (AdMob)","body":"Please see the following community thread for details:\r\nhttp:\/\/community.monogame.net\/t\/workaround-ish-monogame-app-crashes-when-task-switched-with-admob-ad-visible\/9981\r\n\r\nWhen an ad is showing over a MonoGame app, if you task switch out and then try to return to the game, the application will hang. It doesn't crash, you just can't get back to it. Attempts to do so seem to drop my simulator back to the main screen and the only way to recover is to kill the app and restart.\r\n\r\nIn the community thread, I've provided a simple program that can easily reproduce the issue. I was unable to reproduce using a pure Xamarin app in Visual Studio, or an OpenGL app using Android Studio.\r\n\r\nThis has a rather large impact on me as I would like to release a free, ad-enabled version of my upcoming game. If a user clicks an ad, the game is task switched away. Now the user is unable to return to the game.","comments":["Just wanted to update. I received a reply on the community thread where it was demonstrated that a LaunchMode of SingleTop seems to resolve the issue. I've confirmed this in my own project, though I'll want to do a lot more testing.\r\n\r\nMy game is using a LaunchMode of SingleInstance and that seems to be what causes the issue. I don't really understand this... I've even read some documentation on LaunchMode and have to admit, I'm a little confused by it.\r\n\r\nSo I'll leave this information with you guys... I'm not sure if this is expected behaviour or if ads should still work, regardless of the value of LaunchMode. If you guys feel this is expected, feel free to close this issue, though I will say it's quite confusing as to which you need here :)\r\n\r\nThanks,\r\nGary"],"labels":["Android"]},{"title":"DesktopGL graphical errors when loading\/unloading ContentManagers","body":"In order to get around ContentManager unable to unload content, I've been using multiple ContentManagers to prevent leaking all that memory. It's works great most of the time, however I've run into problems on the DesktopGL platform. When a spritefont or texture is released by unloading one ContentManager, loading it in a second ContentManager can act squirrelly. For example if I load and unload ArialBlack.spritefont several times, all of a sudden my text might be drawn with Background.jpg instead. I've tested it in several different projects but having a hard time determining why\/when this behavior is triggered.\r\n\r\nI only see it on MonoGame.DesktopGL, MonoGame.Android and MonoGame.iOS are fine, which leads me to believe it might some sort of SDL\/implementation bug.\r\n\r\nI've attached a video of this behavior... Every time it loads a new screen is a new ContentManager, you can start to see it bugging out after 4-5 screens.\r\n![screen recording 2018-01-25 at 12 00 45 am](https:\/\/user-images.githubusercontent.com\/1888089\/35373243-5a9575ec-0163-11e8-9b21-6ae1ba0193d6.gif)\r\n\r\n","comments":["Do you have some example code which can be used to create a test? "],"labels":["Linux","MacOS","OpenGL","Help Wanted"]},{"title":"Unloading individual content","body":"MonoGame currently does not support unloading content individually, which is a feature I feel can be useful for a variety of reasons. I'll list several use-cases:\r\n\r\n1. Playing a cutscene that has one new asset that needs to be loaded just for that cutscene.\r\n2. Unloading a single shader that no longer needs to be used.\r\n3. Wanting to unload some assets without unloading every asset.\r\n\r\nThese can be done with multiple ContentManagers, but that seems overkill if you have only a few assets that you'd need for a specific purpose.\r\n\r\nI suggest we can either add an overload to Unload with the following signature:\r\n\r\n`public virtual void Unload(string assetName)`\r\n\r\nor add a new method:\r\n\r\n`public virtual void UnloadAsset(string assetName)`\r\n\r\nThoughts?","comments":["I'm going to look more into this. @Jjagg I vaguely recall a while back you said that models may be problematic because this method would have to also unload anything related to them, such as textures. What if we make it clear that it's unloading only a single asset and not anything else?","I'm fine with adding the method. It's something that comes up every once in a while. \n\nThis has been a discussion point before though, so I'd like other people to weigh in.\n\n@tomspilman @cra0zy","Definitely something that would prove useful. I keep hearing from devs who re-implement their own content manager because of this.","Agreed."],"labels":["Feature Request"]},{"title":"Keyboard State Stuck in Fullscreen","body":"I'm having the same issue as that outlined in this thread:\r\n\r\nhttp:\/\/community.monogame.net\/t\/when-starting-in-fullscreen-mode-the-keyboard-state-gets-stuck\/10114\r\n\r\nThe pressed keys are getting \"stuck\" according to the IsKeyDown() when the application is running in fullscreen using \"graphics.ToggleFullScreen();\"\r\n\r\nOne of the answers says it is fixed in 3.7.0.1206-develop but I've tried that version and 3.7.0.1232-develop and it's still happening.","comments":["Can you try setting IsFullScreen to true instead of calling ToggleFullScreen? \nToggleFullScreen calls ApplyChanges and I suspect that messes up initialization.","What platform WindowsDX or DesktopGL?","The forum topic is about UWP.","Hey Jjagg, thanks for the reply, doing:\r\n\r\nthis.graphics = new GraphicsDeviceManager(this)\r\n{\r\n    IsFullScreen = true\r\n};\r\n\r\nin the constructor has fixed the problem, cheers!\r\n","Had to re-open this as it is still happening :( It's a lot less frequent now to be fair and usually only happens when more than one key is held and released but it is still happening from time to time on single key presses.\r\n\r\n*Only in fullscreen still, non-fullscreen is fine"],"labels":["Windows 10 UWP","Input"]},{"title":"MGCB crash loading FIT_UINT16 image","body":"ConvertAndSwapChannels is called to convert this image but FreeImage.ConvertTo32Bits fails to convert it , and it fails later. Type is FreeImageAPI.FREE_IMAGE_TYPE.FIT_UINT16\r\n\r\nsample image failing (from DigitalRune):  https:\/\/raw.githubusercontent.com\/DigitalRune\/DigitalRune\/master\/Samples\/Content\/Terrain\/Terrain001-Height-0-1.png","comments":["It seems that using the same case as FREE_IMAGE_TYPE.FIT_RGB16 fixes the problem (The texture compiles and loads into DigitalRune, and the terrain works). However as it's converting the texture to RGB, and I suspect the FIT_UINT16 is not an RGB texture, I don't know if I'm wasting 4 times the memory required for that texture. \r\n\r\n```\r\n                case FREE_IMAGE_TYPE.FIT_RGB16:\r\n\t\tcase FREE_IMAGE_TYPE.FIT_UINT16:\r\n                    \/\/ Swap R and B channels to make it BGR, then add an alpha channel\r\n                    SwitchRedAndBlueChannels(fBitmap);\r\n                    bgra = FreeImage.ConvertToType(fBitmap, FREE_IMAGE_TYPE.FIT_RGBA16, true);\r\n                    FreeImage.UnloadEx(ref fBitmap);\r\n                    fBitmap = bgra;\r\n                    break;\r\n```\r\n\r\n"],"labels":["ContentPipeline"]},{"title":"Streaming for XACT sounds","body":"SoundEffects seem to be more rich in features than MediaPlayer Songs with the exception that **they cannot be streamed**, as such large tracks have to be loaded in memory and also **are not seekable**.\r\n\r\nIt would be great if there was an option to have a SoundEffect streamable that would also allow us to create instances of it, apply volume, pan, pitch and also seek (get\/set) the track position. I understand this would also possibly need a **_AudioStream_** type in the Pipeline tool, which would need the sound converted to the correct audio format per-platform)\r\n\r\n[Forum reference topic](http:\/\/community.monogame.net\/t\/audio-features-problem-more-than-1-song-at-a-time-streaming-seeking-sound-effects\/10200\/4)","comments":["I'm in full support of this. I'm particularly interested in being able to seek through SoundEffects. Is there anything missing in the API that this feature requires?","Not sure what this has to do with XACT, though","> \r\n> \r\n> Not sure what this has to do with XACT, though\r\n\r\nXACT supports looping audio (eg. via Wavosaur loop points)."],"labels":["Feature Request","XACT"]},{"title":"Seeking track position for MediaPlayer Songs","body":"There should be the ability to be able to **seek MediaPlayer Songs** and get\/set their track position while a Song is playing\/paused\/stopped. \r\n\r\nThat would allow cases like skipping parts of a song, syncing the song to the action or creating custom loop points. Following the [reference topic](http:\/\/community.monogame.net\/t\/audio-features-problem-more-than-1-song-at-a-time-streaming-seeking-sound-effects\/10200\/4), it is stated that seeking works only for a few platforms.\r\n\r\n[Forum reference topic](http:\/\/community.monogame.net\/t\/audio-features-problem-more-than-1-song-at-a-time-streaming-seeking-sound-effects\/10200\/4)","comments":[],"labels":["Feature Request","Help Wanted","Audio"]},{"title":"Ability for playback of multiple MediaPlayer songs","body":"There should be the ability to **be able to use more than one Song at a time.** \r\n\r\nCommon use cases would be to be able to **crossfade between 2 songs** or **use other songs as background ambience** (like sea, birds, rain) and **play together** along with the background music.\r\n\r\n[Reference forum topic\r\n](http:\/\/community.monogame.net\/t\/audio-features-problem-more-than-1-song-at-a-time-streaming-seeking-sound-effects\/10200)","comments":["Other use case: vertical slicing (multi-layered music) for adaptive music."],"labels":["Audio"]},{"title":"Render Targets ignore RenderTargetUsage parameter","body":"I recently started updating to MonoGame 3.6 (boo technical debt!) but I've noticed that none of my \"games\" that use rendertargets are rendering correctly... It seems that between MonoGame 3.5.1 -> 3.6 the RenderTargetUsage parameter is being ignored.\r\n\r\nThis is a DesktopGL tool that worked perfectly in 3.5.1, but after updating to 3.6 clears the screen contents to black. I specifically have the following code in the app:\r\n\r\n\r\n\/\/When using render targets, don't clear the screen!!!\r\nGraphicsDevice.PresentationParameters.RenderTargetUsage = RenderTargetUsage.PreserveContents;\r\n\r\nwhich is being ignored.\r\n\r\nSomewhere in the guts of the GL code the RenderTargetUsage is being reset to DiscardContents.","comments":[],"labels":["OpenGL"]},{"title":"Wrong assumption about Renderbuffer\/Texture names when creating Framebuffers in OpenGL","body":"Hello,\r\n\r\nIt appears there's a small bug when a texture and a renderbuffer belonging to a framebuffer share the same resource name. When I create a MSAA RenderTarget2D in an otherwise empty game, the texture name is 1 and the renderbuffer name is 1 (Windows 10, Nvidia 1050 Ti, driver version 388.43). It appears there is an assumption renderbuffer and textures can never share a name in GraphicsDevice.OpenGL.cs:844:\r\n\r\n```cs\r\nif (renderTarget.GLColorBuffer != renderTarget.GLTexture)\r\n    this.framebufferHelper.FramebufferRenderbuffer(attachement, renderTarget.GLColorBuffer, 0);\r\nelse\r\n    this.framebufferHelper.FramebufferTexture2D(attachement, (int)renderTarget.GetFramebufferTarget(renderTargetBinding), renderTarget.GLTexture, 0, renderTarget.MultiSampleCount);\r\n```\r\n\r\nI'm not sure how to fix it. I changed the condition to `if (renderTarget.MultiSampleCount > 0)` and it fixed my issue, but I'm not sure if that logic is inherently correct. (Can MultiSampleCount > 0 and a texture is still be used as the attachment?)\r\n\r\nOpenGL generates an error about an incomplete buffer binding, and apitrace shows that a texture is attached as the color attachment instead of the renderbuffer.","comments":[],"labels":["OpenGL"]},{"title":"Proposal to switch from local dependency references to NuGet packages.","body":"Right now, all third party dependencies required to build MonoGame SDK are located in a [Dependencies Repository](https:\/\/github.com\/MonoGame\/MonoGame.Dependencies) and so far, this architecture has worked well.\r\n\r\nBut right now, developers are moving towards NuGet packages as the preferred mechanism to reference third party dependencies. We will have different feelings whether this is a right or wrong approach, but certainly, it's a train that cannot be stopped anymore.\r\n\r\nMore and more developers expect MonoGame to be available as NuGet packages. But in order to offer proper nuget packages, MonoGame also needs to be part of the ecosystem, which means that MonoGame should consume nuget packages when applicable.\r\n\r\nThere's already a number of third party dependencies that are available as NuGet packages, in fact, some dependencies are ONLY available as NuGet packages, SharpDX being the most notorious case, as more projects in which we depend move to NuGet, this problem will only get worse.\r\n\r\nIn the early days, a lot of work was done to provide a specific cross platform solution for MonoGame, when nothing else was available, but IDEs and NET itself have finally catched up to provide better and more powerful cross platform solutions. I understand some developers might want to work the traditional way, everything with local dependencies, etc, but not supporting NuGets is not an option anymore, and trying to keep MonoGame SDK being able to build \"the old fashioned way\" and \"with nugets\" is consuming a lot of time from the lead developers.\r\n\r\nSo my proposal is to write here some sort of roadmap for a progressive transition from local dependencies to nuget packages:\r\n\r\n1. Identify the current problems that prevent referencing nuget packages in monogame SDK.\r\n2. Identify which local third party dependencies can be switched to nuget packages.\r\n3. progressively replace these dependencies, one by one.\r\n\r\nOther issues already mentioning the Nuget package issue: #5724 #5565 #5262\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","comments":["I think this is a good idea. It makes upgrading managed dependencies a lot easier too. To upgrade SharpDX I used a script to pull the nugets. Would be way easier to just reference the NuGets directly.","@tomspilman Responding to [this comment](https:\/\/github.com\/MonoGame\/MonoGame\/pull\/6102#issuecomment-357744176) from #6102.\r\n\r\n> Mostly because updating our dependencies is a huge pain in the ass and we constantly have issues with it. \r\n\r\nThis issue would be resolved by switching to NuGet. MG's dependency management is annoying because dependencies don't have a consistent workflow to upgrade and they live in a seperate repository. With NuGet upgrading is as simple as changing a version number in the main repo.\r\n\r\n>  I just like having access to the actual code\/binaries used in our builds\r\n\r\nHaving source code included is a good argument IMO. It's a bit of a hassle to clone a repo and switch references if you need to step into some project and make fixes. But that's only the case for NVorbis atm, since all other dependencies are just included by binaries, which does not offer an advantage over NuGet as far as I can tell.\r\n\r\n>  and versioned along with MG.\r\n\r\nWe should set a specific version for NuGet dependencies, so the version of dependencies for a certain MG version is always the same.","This is related to #5262.","@tomspilman nuget packages allow for a lot of fun tricks:\r\n\r\nFor example, let's say you want to keep an eye of a dependency's project source code, you can reference it like this:\r\n\r\n```\r\n<ItemGroup>\r\n    <ProjectReference Condition=\"'$(Configuration)' == 'Debug'\"   Include=\"..\\ThirdParty\\NewtonSoft.JSON.csproj\" \/>\r\n    <PackageReference Condition=\"'$(Configuration)' == 'Release'\" Include=\"NewtonSoft.JSON\" Version=\"1.2.3.4\" \/>\r\n<\/ItemGroup>\r\n```\r\nThis way, in debug mode you can step into the dependency cloned repo source code, but in release mode it will use the official nuget package (this allows your DLLs\/packages to use the right references to the official binaries and not the binaries in your cloned repo, which might have a different signature and cause DLL Not found exceptions)\r\n\r\nNow, let's say you're not confident about the source of these packages, and you want to keep your own packages repository, at the root of MonoGame project, you drop a `NuGet.config` file with this content:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <add key=\"MonoGame Local ThirdParty packages\" value=\"C:\\HelloWorld\\MyLocalMonoGameNugetPackages\" \/>\r\n  <\/packageSources>  \r\n<\/configuration>\r\n```\r\nPackage resolution works this way: when a project needs to resolve its packages, there's a first step that configures the package sources, this is done by looking into all the directories from the current project's directory, all the way to the root. Whenever a NuGet.config is found, it is parsed and used as part of the configuration. You can cascade multiple NuGet.configs to control the origin of your packages, on a per directory basis. Package sources can also be remote, or local to your hard disk.\r\n\r\nNow, I know all these tricks work very well with Visual Studio 2017, I have no clue if they work with other IDEs commonly used for MonoGame development. I've read somewhere that MonoDevelop\/Xamarin was in the process of getting up to date, but I don't know their status.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Could this be a Protobuild option? I like to have both flavors depending on my needs.","@mrhelmut the whole point of this change is to reduce the dependency maintenance costs of the framework, keeping both would probably be a maintenance nightmare","> Could this be a Protobuild option? I like to have both flavors depending on my needs.\r\n\r\n@mrhelmut You mean include the source project or NuGet?","Yes, having some sort of Protobuild options, \u00e0 la ```Protobuild -generate Windows -dependencies nuget|source```.","@mrhelmut my proposal's objective is to make maintenance easier, and I think keeping both flavours would make maintenance more complicated for lead developers, and adding external dependencies more complicated for contributors.\r\n\r\nYou'll notice that a good number of issues are related to DLLs not found, third party dependency conflicts, or making things needlessly complicated when someone wants to add a third party dependency. All these issues are wasting valuable developer time and slowing down MonoGame development, which ultimately makes monogame look bad when compared to other solutions.","I fully understand, but I don't know if there is a sweet spot. I know that part of the core maintainers will prefer having the source code for debugging purpose (and because of console versions and possibly MG specific fixes), as much as I know that nugets make the whole thing more maintainable and enjoyable to work with.\r\n\r\nYour proposition to have source or nuget depending on the build configuration is interesting, but in the case of a third party lib requiring an MG specific fix, what's happening to the nuget? (this is a real question to move forward, I'm not questioning your proposition)","@mrhelmut If there's a dependency that's been forked and patched specifically for MonoGame, then I think it needs to be referenced directly as a project located in MonoGame main repository, not as a nuget package.\r\n\r\nI never said to switch all dependencies from old school third party directory to nugets, because I'm aware that some dependencies are only available as old school DLLs and not as nugets packages, yet.\r\n\r\nBut a lot of these projects are in the process of migrating to nuget packages, and I think we have to setup a procedure for MonoGame to keep up with them. so, whenever a dependency becomes available as a nuget package, we can reference it as a nuget package and remove it from the third party repository.","Thanks for clarifying, I'm all in then.","> Identify the current problems that prevent referencing nuget packages in monogame SDK.\r\n\r\n@vpenades @Jjagg @mrhelmut \r\n\r\nFirst problem is that i come from the old school check your dependencies into your repo world.  I just don't trust that NuGet will always be around and be 100% reliable.  My big concerns:\r\n\r\n - What happens if i don't have a network connection?\r\n - What happens if NuGet.org is down?\r\n - What happens if a new version of a package on NuGet is bad?\r\n - What happens if a new version of a package on NuGet requires changes to MG?\r\n\r\nI also hear bad things about [issues with NuGet restore](https:\/\/docs.microsoft.com\/en-us\/nuget\/consume-packages\/package-restore-troubleshooting).\r\n\r\nIt just all makes me wonder if it just isn't better for us to commit the right versions when we need to?\r\n\r\nThe big hindrance for us is the separate dependencies repo, but has GIT LFS become a good solution to the repo bloat issue?  Could we get rid of that now and have a single repo?","@tomspilman Answering your concerns:\r\n\r\n> What happens if i don't have a network connection?\r\n\r\nThe first time you open a project with nuget dependencies, (at least in Visual Studio 2017) required packages are downloaded and cached in the hidden `C:\/Users\/[YOU]\/.nuget\/packages` , so whenever a project needs a nuget package, it first looks into that folder. If you don't have an internet connection, and you don't need any new package, you will be able to compile fine.\r\n\r\n> What happens if NuGet.org is down?\r\n\r\nNuGet.org is the main packages source because it's the one Microsoft uses, but there's more sources, like https:\/\/www.myget.org\/ which is typically used for alpha packages. You can create your own packages store service, or even configure a project to use local packages instead of network packages.\r\n\r\nFor example, in the current Monogame.Dependencies repository, you could create a \"packages\" directory to store nuget packages, and let the projects use them from there.\r\n\r\nHaving multiple package sources, even local sources was a problem of the past, it is mostly fixed now.\r\n\r\n> What happens if a new version of a package on NuGet is bad?\r\n\r\nIf you check again your `C:\/Users\/[YOU]\/.nuget\/packages` , you'll notice that inside every package, there's ALL the versions you have ever used, for example, in my SharpDX directory, I have 2.6.3 , 3.0.2, 3.1.0, 3.1.1, 4.0.0 and 4.0.1 , so if a newly released package is buggy, you just revert to an older version.\r\n\r\nNotice that by using the in-built cached packages and online sources, you don't need to update any local dependencies folder. If you choose to have a local repository, then you would have to copy the packages you are going to use.\r\n\r\n> What happens if a new version of a package on NuGet requires changes to MG?\r\n\r\nNuget packages follow the [SemVer ](https:\/\/semver.org\/) convention. Which states that minor versions of the packages should not break their API.\r\n\r\nFor example, we can be confident that future `SharpDX 4.x.x` will not include breaking API changes. So as long as we stay with `4` we can more or less keep updating to the latest version. If at some point SharpDX 5 is released, then it's most probably because there's new features with backward incompatibilities.\r\n\r\nIn any case, you always control when and how to update a package; they're not updated automatically.\r\n\r\n> I also hear bad things about issues with NuGet restore.\r\n\r\nAs far as I know, most of these issues have been sorted out, at least in Visual Studio 2017. My concerns come when opening projects with other IDEs, in that case I don't have any experience.\r\n\r\nAlso, I am aware that, althought nuget packages work well with \"old styled\" csproj files, they're better suited for new style csproj files.\r\n\r\n> It just all makes me wonder if it just isn't better for us to commit the right versions when we need to?\r\n\r\nAs mentioned before, you can have a local package sources where you simply drop the packages you need.\r\n\r\n> The big hindrance for us is the separate dependencies repo, but has GIT LFS become a good solution to the repo bloat issue? Could we get rid of that now and have a single repo?\r\n\r\nEven if having a single repo could help improve maintainability issues, the true advantage of using nuget packages is their hability to be reused across multiple platforms seamlessly, it's in cross platform environments where packages excel in making maintenance much easier.\r\n\r\nLet's say you have a cross platform dependency where you need some shared resources for all platforms, and some other resources, specific for each platform. Typically you set a directory structure and configure each platform's project to point to the right resources.\r\n\r\nWith packages, you can embed all that complex structure into a single package, and reference it from all platform projects in the same way. At compile time, MSBuild will detect the target platform and cherry pick the right resources for that current compiled platform.\r\n\r\n\r\n\r\n","> The big hindrance for us is the separate dependencies repo, but has GIT LFS become a good solution to the repo bloat issue? Could we get rid of that now and have a single repo?\r\n\r\nGit LFS has not changed, it still has the horrible pricing model.","A tl;dr rundown of concerns:\n\n> What happens if i don't have a network connection?\n\nNuGet has a global cache on the user machine. We can prefetch packages when installing if that's something people want.\n\n> What happens if NuGet.org is down?\n\nMG could host its own NuGet server, but I've never known NuGet.org to be down.\n\n> What happens if a new version of a package on NuGet is bad?\n\n> What happens if a new version of a package on NuGet requires changes to MG?\n\nExplicit versions means no automatic upgrades. It's just a number in the .csproj.","> What happens if i don't have a network connection?\r\n\r\nSince no one seems to mention it, there is one extra thing on this note, the new .csproj format has a `<RestoreSources>` tag which allows specifying where to check for nuget packages.\r\n\r\nNow if you wanted you could do the following setup:\r\n - Main repo only references nuget packages\r\n - Secondary repo containing one .csproj (containing the tag mentioned above) and all the local versions of nuget packages used in the main repo\r\n\r\nSo if you need to download all the dependencies locally, you download the secondary repo as well, and it will just fill up the nuget cache with all the needed dependencies for the main repo.","@cra0zy @tomspilman \r\n\r\nYou can also use `NuGet.config` files, [here's an example](https:\/\/github.com\/vpenades\/UberFactory\/blob\/master\/NuGet.config) I use on one of my projects.\r\n\r\n`NuGet.config` are very special files that change the behavior of Nuget within its own directory and subdirectories, so you can have a _cascade_ of `NuGet.config` in multiple subdirectories. In the example above, I'm declaring a secondary nuget source to pull packages from.\r\n\r\nIn MonoGame, it would be as easy as to have a NuGet.config file located at the root of the repository (same level as ProtoGame.exe), which would look like this:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n\r\n    <!-- ensure only the sources defined below are used -->\r\n    <clear \/>\r\n\r\n    <!-- key for local packages -->\r\n    <add key=\"MonoGame LOCAL\" value=\".\\Dependencies\\NugetPackages\" \/>\r\n\r\n    <!-- key for remoted packages hosted in the MonoGame server -->\r\n    <add key=\"MonoGame REMOTE\" value=\"https:\/\/nuget.monogame.org\/api\/v3\/index.json\" \/>\r\n\r\n  <\/packageSources>\r\n<\/configuration>\r\n```\r\n\r\nNotice the clear command would remove default `nuget.org` and other sources defined in upper level directories with other nuget.config files. (for example, I have a nuget.config located at the drive root to declare the source of my locally compiled nugets, so they're available for all my local projects regardless of where the project is located, it's like having a local nuget server, machine wide).\r\n\r\nAlso, notice that have a nuget server at monogame.net would probably be a bad idea since it would be a bandwidth burden for the server.\r\n\r\nOnce the package sources have been defined, you can declare the package dependencies manually editing csproj files , or with VS2017 nuget package wizard, in which case, you can choose the package sources like this (screenshot of my VS instance):\r\n\r\n![nuget package sources](https:\/\/user-images.githubusercontent.com\/5433822\/35686205-01586ef8-076c-11e8-9040-2f616fc8ecce.gif)\r\n"],"labels":["Maintenance"]},{"title":"[SharpDX] SamplerComparisonState doesn't work with SurfaceFormat.HalfSingle","body":"SamplerComparisonState doesn't work as intended with SurfaceFormat.HalfSingle.\r\nWhen I use SurfaceFormat.HalfSingle with Cascaded Shadow Maps I get this as a result:\r\n![cmp_wrong](https:\/\/user-images.githubusercontent.com\/10170250\/34663539-a3f56c10-f457-11e7-8bc3-5065c4ed72ff.jpg)\r\n\r\nChanging DXGI_FORMAT in this line:\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Windows\/SharpDXHelper.cs#L96\r\n from **R16_Float** to **R16_UNorm** results in correct sampling:\r\n![cmp_good](https:\/\/user-images.githubusercontent.com\/10170250\/34663544-a8f032ae-f457-11e7-93c9-40b2cfc64953.jpg)","comments":["@Sizaar Are you sure you're expecting the right thing?\r\n\r\nReading the docs it seems like [`SurfaceFormat.HalfSingle`](https:\/\/msdn.microsoft.com\/en-us\/library\/microsoft.xna.framework.graphics.surfaceformat.aspx) does correspond to [`DXGI_FORMAT_R16_FLOAT`](https:\/\/msdn.microsoft.com\/en-us\/library\/windows\/desktop\/bb173059(v=vs.85).aspx).\r\n\r\nXNA `SurfaceFormat.HalfSingle`:\r\n> (Floating-point format) 16-bit float format using 16 bits for the red channel.\r\n\r\nDXGI_FORMAT_R16_FLOAT:\r\n> A single-component, 16-bit floating-point format that supports 16 bits for the red channel.\r\n\r\nWhereas `DXGI_FORMAT_R16_UNORM` docs say:\r\n> A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for the red channel.","@Jjagg Yes, I'm expecting the right thing :smile:. \r\nI want to use 16-bit shadow maps instead of 32-bit and SamplerComparisonState allows me to use hardware PCF filtering.\r\n\r\nAfter reading some DX11 docs it looks like R16_FLOAT doesn't support using SamplerComparisonStates:\r\nhttps:\/\/msdn.microsoft.com\/pl-pl\/library\/windows\/desktop\/cc627091(v=vs.85).aspx#Shader_Sample_C_Filter\r\n\r\nMaybe we should add a new SurfaceFormat and leave HalfSingle as is?\r\nOr maybe we should add some docs telling people that SampleCmp and SampleCmpLevelZero doesn't work for this format and even throw an exception when such RT and samplerstate are set.\r\n  \r\n  ","I think we should add Red16. It's also a required supported format for OpenGL, so that works out nicely cross-platform.\r\nAnd of course docs saying what formats support comparison should be added as well."],"labels":["DirectX"]},{"title":"ffprobe misdetects wave files during content building","body":"We get this error \"Calcualted block align does not match RIFF\"\r\n\r\n![sfx-error](https:\/\/user-images.githubusercontent.com\/13956755\/34644960-54d60622-f307-11e7-91b9-d44ae5d75876.JPG)\r\n\r\nWhen trying to build wav files. Seems to be caused by ffprobe heuristics misdetecting it as mp4. \r\n\r\n[swoosh1 - Copy.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/1609362\/swoosh1.-.Copy.zip)\r\n\r\nWe worked around it by munging the file a bit (resampling to 48k then back to 44.1k) which made the mp4 magic word no longer appear. The problem definitely wasn't in the plentiful metadata; first thing i tried was deleting that and it didn't help.\r\n\r\nThis method for identifying content is not good.\r\n\r\nI don't really expect anyone to fix this, I'm just putting it here for findability, in case anyone else hits the same issue\r\n  ","comments":[],"labels":["ContentPipeline","Audio"]},{"title":"[DesktopGL] Pixel Shader compilation failed in runtime","body":"Hello,\r\n\r\nI'm working on an engine called C3DE, it supports Windows and DesktopGL. Recently I've a serious issue with all my shaders for DesktopGL. The compilation from HLSL to GLSL is fine with the Pipeline tool. My code is well generated into XNB. However, when I try to use some of my shaders, it fails with a this message:  `An unhandled exception of type 'System.AccessViolationException' occurred in Unknown Module.`\r\n\r\nAfter some debugging, I found a part of the problem\r\n\r\nThe `DrawIndexedPrimitives` function will call many functions.\r\n- `Link(Shader vs, Shader ps)` in ShaderProgramCache.cs\r\n- `GetShaderInfoLog` in OpenGL.cs\r\n- And finally `GetShaderInfoLogInternal`\r\n\r\nThis is the last one which causes the crash. The Vertex Program is fine, it's hashkey is normal. However almost **all** my pixel shader have a negative hashkey and those ones failed to compile.\r\n\r\nThis is the pixel shader generated by Pipeline\r\n\r\n```glsl\r\n#ifdef GL_ES\r\nprecision mediump float;\r\nprecision mediump int;\r\n#endif\r\n\r\nuniform vec4 ps_uniforms_vec4[4];\r\nconst vec4 ps_c4 = vec4(-1.0, 0.0, 1.0, 0.0);\r\nconst vec4 ps_c5 = vec4(-1.0, -2.0, -3.0, 0.0);\r\nvec4 ps_r0;\r\nvec4 ps_r1;\r\nvec4 ps_r2;\r\nvec4 ps_r3;\r\nvec4 ps_r4;\r\n#define ps_c0 ps_uniforms_vec4[0]\r\n#define ps_c1 ps_uniforms_vec4[1]\r\n#define ps_c2 ps_uniforms_vec4[2]\r\n#define ps_c3 ps_uniforms_vec4[3]\r\nuniform samplerCube ps_s0;\r\nvarying vec4 vTexCoord0;\r\n#define ps_v0 vTexCoord0\r\n#define ps_oC0 gl_FragColor\r\n\r\nvoid main()\r\n{\r\n\tps_r0.xy = ps_c4.xy;\r\n\tps_r0.x = ps_r0.x + ps_c3.x;\r\n\tps_r1.xyz = normalize(ps_v0.xyz);\r\n\tps_r1 = textureCube(ps_s0, ps_r1.xyz);\r\n\tif (-ps_r0.x != ps_r0.x) {\r\n\t\tps_r2 = ps_c4.yyyy;\r\n\t} else {\r\n\t\tif (-ps_c1.x < ps_r0.y) {\r\n\t\t\tps_r0.z = ps_v1.x * ps_v1.x;\r\n\t\t\tps_r0.w = ps_c1.y * ps_c1.y;\r\n\t\t\tps_r0.z = ps_r0.z * ps_r0.w;\r\n\t\t\tps_r0.w = log2(ps_c0.x);\r\n\t\t\tps_r0.z = ps_r0.w * ps_r0.z;\r\n\t\t\tps_r0.z = exp2(ps_r0.z);\r\n\t\t\tps_r0.z = 1.0 \/ ps_r0.z;\r\n\t\t\tps_r3.x = fract(ps_c1.x);\r\n\t\t\tps_r3.y = ((-ps_r3.x >= 0.0) ? ps_c4.y : ps_c4.z);\r\n\t\t\tps_r0.y = ((ps_c1.x >= 0.0) ? ps_r0.y : ps_r3.y);\r\n\t\t\tps_r3.x = -ps_r3.x + ps_c1.x;\r\n\t\t\tps_r0.y = ps_r0.y + ps_r3.x;\r\n\t\t\tps_r3.x = ps_c1.y * ps_v1.x;\r\n\t\t\tps_r0.w = ps_r0.w * ps_r3.x;\r\n\t\t\tps_r0.w = exp2(ps_r0.w);\r\n\t\t\tps_r0.w = 1.0 \/ ps_r0.w;\r\n\t\t\tps_r3.xyz = ps_r0.yyy + ps_c5.xyz;\r\n\t\t\tps_r0.z = ((-abs(ps_r3.z) >= 0.0) ? ps_r0.z : ps_c4.z);\r\n\t\t\tps_r0.z = ((-abs(ps_r3.y) >= 0.0) ? ps_r0.w : ps_r0.z);\r\n\t\t\tps_r0.w = -ps_c1.z + ps_c1.w;\r\n\t\t\tps_r0.w = 1.0 \/ ps_r0.w;\r\n\t\t\tps_r3.y = ps_c1.w + -ps_v1.x;\r\n\t\t\tps_r0.w = ps_r0.w * ps_r3.y;\r\n\t\t\tps_r0.z = ((-abs(ps_r3.x) >= 0.0) ? ps_r0.w : ps_r0.z);\r\n\t\t\tps_r0.w = clamp(ps_r0.z, 0.0, 1.0);\r\n\t\t\tps_r0.y = ((-ps_r0.y >= 0.0) ? ps_r0.z : ps_r0.w);\r\n\t\t\tps_r0.z = -ps_r0.y + ps_c4.z;\r\n\t\t\tps_r0.yzw = (ps_r0.yyy * ps_r1.xyz) + ps_r0.zzz;\r\n\t\t\tps_r3.xyz = ps_r0.yzw * ps_c2.xyz;\r\n\t\t\tps_r3.w = ps_c4.z;\r\n\t\t} else {\r\n\t\t\tps_r3 = ps_c4.yyyy;\r\n\t\t}\r\n\t\tps_r4 = (ps_r1.xyzx * ps_c4.zzzy) + ps_c4.yyyz;\r\n\t\tps_r2 = ((-ps_c1.x >= 0.0) ? ps_r4 : ps_r3);\r\n\t}\r\n\tps_oC0 = ((ps_r0.x >= 0.0) ? ps_r2 : ps_r1);\r\n}\r\n```\r\n\r\nThe original HLSL shader can [be found here](https:\/\/github.com\/demonixis\/C3DE\/blob\/6552355276bd3f034a355a0c9643590f63051c88\/C3DE.Demo\/Content\/Shaders\/SkyboxEffect.fx). I tried to [change few things] and now it works (https:\/\/github.com\/demonixis\/C3DE\/blob\/develop\/C3DE.Demo\/Content\/Shaders\/SkyboxEffect.fx).\r\n\r\n### How to reproduce\r\n- Clone the [develop branch of C3DE](https:\/\/github.com\/demonixis\/C3DE) from github\r\n- Open the C3DE.Desktop solution\r\n- Open C3DE.Demos\/Content\/Shaders\/SkyboxEffect.fx and force FOG_ENABLED to `True`\r\n- Start the samples and launch the VR demo (don't worry VR is disabled if you don't have a connected compatible headset).\r\n- I recommand you to change references to use the sources of MonoGame.\r\n\r\nThank you.\r\n","comments":["Any update on this? Encountering the same issue.","Which version of MG are you using? There's some chance that #7340 fixes this problem. The shader will probably still fail to compile, but the crash should not happen, and you should get some message why compilation failed."],"labels":["OpenGL"]},{"title":"[UWP] Wrong BackBuffer size","body":"BackBufferWidth & BackBufferHeight don't always match real Window size in UWP. \r\n\r\nI think #5615 broke setting backbuffer sizes at startup (there is white are around rendered content). \r\n\r\nEDIT: Setting new preferred backbuffer sizes while in windowed mode wasn't working even before #5615 (windows size isn't changed, but backbuffer size is changed, resulting in white area around rendered content because of mismatch between window viewbounds size and backbuffer size). Also described here #5914","comments":["I'm having similar problems with mg 3.7.1385 and uwp. The following code in initialize method:\r\n\r\n```\r\ngraphics.PreferredBackBufferWidth = 960;\r\ngraphics.PreferredBackBufferHeight = 520;\r\ngraphics.ApplyChanges();\r\n```\r\n\r\ncauses project to open in 500x800 window. Moving this code to constructor doesn't change the end result.","Unfortunately UWP version of MG does not resize the window like it does on other platforms. Its not implemented (missing feature) in UWP. \r\n\r\nYou can check some suggested workarounds here https:\/\/github.com\/MonoGame\/MonoGame\/pull\/5615#issuecomment-354855177"],"labels":["Windows 10 UWP","Windowing"]},{"title":"Guid.BeginShowKeyboardInput does not persist its state object","body":"`BeginShowKeyboardInput` function does not persist the state object. If you pass a value in that is not null it will be overwritten by the internal `ShowKeyboardInputDelegate`. This means that the callback function cannot use its `IAsyncResult.AsyncState` object - it contains rubbish.","comments":[],"labels":["Input"]},{"title":"SoundEffectInstance Stop() behavior differens bewteen Windows and DesktopGL builds","body":"Using monogame 3.6\r\n\r\nIf you create a SoundEffectInstance and set IsLooped to true like so:\r\n\r\n```c#\r\n tireSqueal= content.Load<SoundEffect>(\"tire-squeal\").CreateInstance();\r\n tireSqueal.IsLooped = true;\r\n```\r\n\r\nUnder DesktopGL, a call to `tireSqueal.Stop(false)` will stop the sound after completion of the current loop.  In a Windows build it will never stop playing.  You have to call Stop(true), which stops it immediately, does not let the current loop finish.\r\n","comments":["I Think the bug is here:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/c9143e38079cfe08135ea9ab0685d9c5e3fe8557\/MonoGame.Framework\/Audio\/SoundEffectInstance.XAudio.cs#L221\r\n\r\nThat should check to see if the sound is looped, and if so, use ExitLoop instead.\r\n\r\nI may take a stab at fixing this, if setting up the build for monogame isn't too hard.\r\n\r\n","Looks like a two part bug,  the GL version doesn't even consider the immediate input: \r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/f7e20cb186837bae93c6818ff759423b972912e4\/MonoGame.Framework\/Audio\/SoundEffectInstance.OpenAL.cs#L168","Hmm, maybe immediate doesn't have anything to do with letting a sound effect finish a loop before stopping? http:\/\/www.monogame.net\/documentation\/?page=M_Microsoft_Xna_Framework_Audio_SoundEffectInstance_Stop_1","I set up a test project for this. It's really apparent in even such a simple case.\r\n[SoundEffectInstance Play Difference Test.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/2896610\/SoundEffectInstance.Play.Difference.Test.zip)\r\n\r\nSimply run the game in each project and press the Space bar to make it stop and play the same `SoundEffectInstance` 3 times with a 500 ms delay between them. In the DesktopGL project, you hear 3 drum rolls, but in Windows you hear 2. For some reason, the Windows implementation is completely silent every other time you stop and play the same sound (Ex. if you played it 6 times in a row, you'd hear it 3 times, once every other time).","I'm using MonoGame 3.7 and it still has the same issue. \r\nHowever, one weird workaround is that if you add all sounds to a list and then loop through the list, SoundEffectInstance.Stop() and both of its variants and SoundEffectInstance.Pause() work just as intended."],"labels":["Audio"]},{"title":"Effect parameter keys differ between directx and opengl builds","body":"using Monogame 3.6 a shader with the following form:\r\n```\r\n#if OPENGL\r\n\t#define SV_POSITION POSITION\r\n\t#define VS_SHADERMODEL vs_3_0\r\n\t#define PS_SHADERMODEL ps_3_0\r\n#else\r\n\t#define VS_SHADERMODEL vs_4_0_level_9_1\r\n\t#define PS_SHADERMODEL ps_4_0_level_9_1\r\n#endif\r\n\r\nTexture2D RoadTexture;\r\nTexture2D TerrainTexture;\r\nTexture2D MaskTexture;\r\n\r\nSamplerState Sampler;\r\n```\r\nWith a DESKTOPGL build the effect.Parameters key ends up being \"Sampler+TerrainTexture\" etc.\r\nWith a windows\/directx build it ends up being \"TerrainTexture\"\r\n\r\n\r\n","comments":["This is because of a limitation in GLSL and the implementation of MojoShader. The issue is that the newer HLSL syntax seperates sampler and texture state, while in GLSL (and the old HLSL syntax) the texture is part of the sampler state. I.e. there is no distinction between texture and sampler. Because you can use 1 sampler to sample different textures in HLSL the different combinations of texture+sampler need a seperate sampler in GLSL. So MojoShader creates a Texture+SamplerState sampler for each used combination in HLSL. I think it makes sense from the perspective of MojoShader to keep the naming rules consistent regardless of whether there are actually conflicts in translating to GLSL.","That said, MG could abstract this away for the user... Worth thinking about!"],"labels":["MGFX","OpenGL"]},{"title":"EffectParameter Get\/Set methods missing for several data types","body":"Based on the following:\r\nhttps:\/\/msdn.microsoft.com\/en-us\/library\/microsoft.xna.framework.graphics.effectparameter_methods(v=xnagamestudio.40).aspx\r\n\r\nMissing these methods and their SetValue overload counterparts:\r\nGetValueInt32Array\r\nGetValueBooleanArray\r\nGetValueMatrixTranspose           \/\/ this one does have a set method\r\nGetValueMatrixArrayTranspose\r\nGetValueQuaternionArray","comments":["Most of these were done in #4361. Related effort in #4300. Please check out those pull requests if you'd like to help out with this :) ","Hey is this issue still relevant? I would like to work on this.\r\n"],"labels":["Help Wanted","Good First Issue"]},{"title":"ModelProcessor's SwapWindingOrder does nothing","body":"\r\nI've tried to reverse the winding order of a model in MGCB, but after compiling the assets I didn't notice any effect.\r\n\r\nThe expected behavior is that when SwapWindingOrder is true, it should flip all the faces.\r\n\r\nI've checked the source code, and [SwapWindingOrder](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework.Content.Pipeline\/Processors\/ModelProcessor.cs#L84) is not being referenced anywhere in the code. It's like an unused property.\r\n","comments":["There is a method to swap winding order in [MeshHelper](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/6f34eb393aa0ac005888d74c5c4c6ab5615fdc8c\/MonoGame.Framework.Content.Pipeline\/Graphics\/MeshHelper.cs#L513). We just need to check if the flag is set and invoke the `SwapWindingOrder` method on the `MeshContent` if it is. Though it might be better to swap winding when processing vertices [here](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/6f34eb393aa0ac005888d74c5c4c6ab5615fdc8c\/MonoGame.Framework.Content.Pipeline\/Processors\/ModelProcessor.cs#L175-L196) to avoid first copying the vertices and then swapping them."],"labels":["ContentPipeline","Help Wanted","Good First Issue"]},{"title":"2MGFX compilation error when compiling simple shader","body":"I've reached the end of my google-fu about this problem, nothing is coming up. The error comes up when any instructions are put inside the branch, I've also tested this with completely redundant statements such as `if(true)`, the error still persists.\r\n\r\nThe error: \r\n![](https:\/\/i.imgur.com\/Ew0Rk7s.png)\r\n\r\nShader code:\r\n```hlsl\r\nmatrix xWorld;\r\nmatrix xView;\r\nmatrix xProjection;\r\n\r\nfloat3 spheres[3];\r\nuint sphereCount;\r\n\r\n\r\nstruct VertexShaderInput\r\n{\r\n\tfloat3 Position : POSITION0;\r\n};\r\n\r\nstruct VertexShaderOutput\r\n{\r\n\tfloat4 Position : SV_POSITION;\r\n\tfloat2 PixelPosition : TEXCOORD0;\r\n};\r\n\r\nfloat4 RayCaster(float2 position)\r\n{\r\n\tfloat4 returnCol = float4(position, 0, 1);\r\n\tfloat3 ray = float3(position, 1) - float3(position, 0);\r\n\r\n\tfor (uint i = 0; i < sphereCount; i++)\r\n\t{\r\n\t\t\/\/float4 worldPos = mul(float4(spheres[i], 1.0), xWorld);\r\n\t\t\/\/float4 viewPos = mul(worldPos, xView);\r\n\t\t\/\/float4 projPos = mul(viewPos, xProjection);\r\n\r\n\t\tif (position.x == 25)\r\n\t\t{\r\n\t\t\treturnCol = float4(1, 1, 1, 1);\r\n\t\t}\r\n\t}\r\n\r\n\treturn returnCol;\r\n}\r\n\r\nVertexShaderOutput MainVS(in VertexShaderInput input)\r\n{\r\n\tVertexShaderOutput output = (VertexShaderOutput)0;\r\n\r\n\toutput.Position = float4(input.Position, 1.0);\r\n\toutput.PixelPosition = input.Position.xy;\r\n\treturn output;\r\n}\r\n\r\nfloat4 MainPS(VertexShaderOutput input) : COLOR\r\n{\r\n\tfloat4 finalColor = RayCaster(input.PixelPosition);\r\n\treturn finalColor;\r\n}\r\n\r\ntechnique BasicColorDrawing\r\n{\r\n\tpass P0\r\n\t{\r\n\t\tVertexShader = compile vs_4_0 MainVS();\r\n\t\tPixelShader = compile ps_4_0 MainPS();\r\n\t}\r\n};\r\n```\r\n\r\nPlease excuse my horrible in-between state of the code.","comments":["The uint parameter is causing the problem, uint is currently not supported. I just added support for uint to my compute shader PR with this [commit ](https:\/\/github.com\/MonoGame\/MonoGame\/pull\/7533\/commits\/eda5993a16e99a2ec0a5f7a4a928766b969f5801). uint becomes more important for compute shaders."],"labels":["MGFX"]},{"title":"Documentation for useful external libraries.","body":"The documentation should include a page with a list of useful external libraries.\r\nStuff like [Nez](https:\/\/github.com\/prime31\/Nez) and[ Monogame.Extended](https:\/\/github.com\/craftworkgames\/MonoGame.Extended)\r\n\r\nThere's a fantastic list here:\r\nhttps:\/\/github.com\/aloisdeniel\/awesome-monogame\r\n\r\n","comments":["@Jjagg - I wonder if we could include the page from...\r\n\r\n https:\/\/github.com\/aloisdeniel\/awesome-monogame\r\n\r\n... into the docfx docs as part of the build process somehow.","You mean embed it? Since it's markdown that would be pretty easy to do. We could have the build bot check out the git repo so it's always up to date. The GitHub star badges might look out of place in the MG theme though, maybe we should parse them out?","Doesn't look great if I use the page without any editing:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/14875382\/33864423-df522b7a-deec-11e7-81fe-e0890595f8d6.png)\r\n","> You mean embed it? \r\n\r\nYeah...  that is what i was thinking at first.\r\n\r\nBut maybe we're better off just linking it prominently from some other place in our docs?\r\n","> But maybe we're better off just linking it prominently from some other place in our docs?\r\n\r\nI think that'd be better. We can maybe have a page for .Extended, Nez and Protogame or something and then a link to the awesome page.","@aloisdeniel fyi"],"labels":["Documentation"]},{"title":"Pixel Shader - blank texture on some Android devices","body":"Hey,\r\n\r\nI'm facing issues with pixel shaders on Android. Works as expected on various devices (verified on 5+ devices) but on Samsung Galaxy S8 with Android 7.0 I have blank textures when applying shaders. I would also mention that shader works fine on Windows Phone. Shader is very simple, so here I place a piece of code. This is critical for me, because this device is quite new .. Any clues how to fix or workaround this ? Tried various stuff but this is strange that shader works fine on most of devices. I think this is common issue, this one looks like related one: \r\nhttp:\/\/community.monogame.net\/t\/result-of-pixel-shader-invisible-on-some-android-devices\/9547\r\n\r\n```\r\nfloat Shift;\r\nfloat MaxShift;\r\nfloat ExtraShiftScaleFactor;\r\n\r\nstruct VertexShaderOutput\r\n{\r\n\tfloat4 position : SV_POSITION;\r\n\tfloat4 color : COLOR;\r\n\tfloat2 texCoords : TEXCOORD;\r\n};\r\n\r\nsampler TextureSampler;\r\n\t\r\n\r\n\/\/ Input color (which comes from vertex shader output) - color specified in SpriteBatch.Draw() method.\r\nfloat4 PixelShaderFunction(VertexShaderOutput input) : COLOR\r\n{\r\n    const float4 originalColor = tex2D(TextureSampler, input.texCoords) * input.color;\r\n\r\n\tif(originalColor.a == 0)\r\n\t{\r\n\t\treturn originalColor;\r\n\t}\r\n\r\n\tfloat4 newColor = tex2D(TextureSampler, float2(input.texCoords.x + sin(input.texCoords.x * Shift * ExtraShiftScaleFactor)*0.01, \r\n\t                        input.texCoords.y + sin(input.texCoords.y * Shift * ExtraShiftScaleFactor)*0.01)) * input.color;\r\n\t\r\n\tnewColor.r = lerp(newColor.r, newColor.r * 1.6, Shift \/ MaxShift);\r\n\tnewColor.g = lerp(newColor.g, newColor.g * 0.1, Shift \/ MaxShift);\r\n\tnewColor.b = lerp(newColor.b, newColor.b * 1.6, Shift \/ MaxShift);\r\n\tnewColor.a = originalColor.a;\r\n\r\n\treturn newColor;\r\n}\r\n\r\n\/\/ Windows Phone requires SM 4_0_level_9_1 or higher\r\n\/\/ Android requires SM 3_0\r\n#ifdef SM4\r\n#define TECHNIQUE(name, vsname, psname ) \\ \r\ntechnique Technique1\r\n{\r\n    pass Pass1\r\n    {\r\n        PixelShader = compile ps_4_0_level_9_1 PixelShaderFunction();\r\n    }\r\n}\r\n\r\n#else\r\n#define TECHNIQUE(name, vsname, psname ) \\ \r\ntechnique Technique1\r\n{\r\n\tpass Pass1\r\n\t{\r\n\t\tPixelShader = compile ps_3_0 PixelShaderFunction();\r\n\t}\r\n}\r\n#endif\r\n\r\n```","comments":["This is an old ticket, but I bet the issue is in this line:\r\n```if(originalColor.a == 0)```\r\nThis shader is using an old version of PixelShader, I bet it is truncating `originalColor.a` to an int when comparing to `0`. I've done a similar check in several pixel shaders that works correctly:\r\n```if(originalColor.a == 0.0)```"],"labels":["Android"]},{"title":"UWP GamePage.xaml question\/proposal","body":"Hi,\r\n\r\neach time I have to make an UWP app that has to navigate to another XAML page, when going back to the 'monogame' GamePage.xaml, it is created again (meaning that everything is initialized again, loaded again, ...) because the system 'kills' GamePage.xaml the moment it is navigated away.\r\n\r\nWouldn't it be better to keep the MonoGame page intact as default, so that when people navigate back, everything is as it was before?\r\n\r\nAccording to https:\/\/docs.microsoft.com\/en-us\/windows\/uwp\/porting\/getting-started-navigation , this would be achieved adding to the constructor of GamePage.xaml.cs ' template\r\n\r\n````\r\nNavigationCacheMode = Windows.UI.Xaml.Navigation.NavigationCacheMode.Enabled;\r\n````\r\n\r\nFor people that wants the old behaviour, it's easier to delete a line than having to browse internet to find a solution.\r\n\r\n","comments":["```\r\nTo enable a page to be cached, set NavigationCacheMode to either Enabled or Required. \r\nThe difference in behavior is that Enabled might not be cached if the frame's cache size \r\nlimit (CacheSize ) is exceeded, whereas Required always generates an entry no matter the size limit.\r\n```\r\n\r\nIMO, `Required` is a better option, `Enabled` is unpredictable.","To be honest.  It's rare for most games to need the ability to navigate to another XAML page, so this is more of a fringe case (please feel free to shoot me down if you feel I'm wrong)\r\n\r\nIn which case, adding the note to the docs, highlighting that option would be better, instead of forcing all projects to use it.","If people don't switch anyway, this option doesn't matter, right? So it won't hurt either way to set it to Required. Or is there some downside to it?","Not sure if there is a downside, or the impact on running memory for the single page.\r\nusually with UWP, you don't turn something on unless you need it.  Unsure what effect this would have on tombstoning \/ activation \/ etc for a single page,  could mean the game doesn't release it's memory while in the background?\r\n(Clutching at straws and walking through it)","> Not sure if there is a downside, or the impact on running memory for the single page.\r\n\r\nNo idea either. All I can say it that adding that line made no impact in my game in terms of memory (i.e. when minimizing), tombstoning and activation. I haven't received any bug report that can be assigned to this change either. But all of this is hardly a proof of anything, I just wanted to expose the issue in order for UWP experts to decide on it. (a note in the documentation, a comment in the template code, or leaving that line on, all seem good solutions to me)\r\n\r\n>  It's rare for most games to need the ability to navigate to another XAML page\r\n\r\nIn my experience those have been the cases:\r\n\r\n* Writing (complex) configuration pages in XAML instead of ingame code, just because it's easier.\r\n* Writing a tool instead of a game (often lots of pages are used then)\r\n* On Xbox, I need \"RequiresPointer\" to interact and close advertisments, so you have to create a new page to avoid the GamePage to have a dancing pointer while you're playing. (or in similar case, any library\/plugin that requires you to use an extra page)\r\n\r\n\r\nHow common are those cases and do they justify the addition of the line? No idea :)","> Writing a tool instead of a game (often lots of pages are used then)\r\n\r\nIn that case it would be bad to have multiple MG pages cached. (assuming the developer copy-pasted the GamePage.xaml)\r\n\r\n> Writing (complex) configuration pages in XAML instead of ingame code, just because it's easier.\r\n\r\nIt's not cross-platform and I think we should discourage people from navigating way from the GamePage. I don't even know if MG was supposed to support this scenario in the first place or if it still works. There are some major changes in the UWP from 3.6, have you tried with the latest Develop 3.7.* ? For example Does the game & input loop work correctly (with and without the cache)?\r\n","Ok, based on your feedback \/ testing @KakCAT , I would endorse adding that option for UWP, especially with your testing on Xbox.\r\n\r\n@nkast true, it's not very multi-platform, as the approach would need separate implementations for each platform, however, that's obviously the developers choice in everything.  This suggestion simply makes it easier for UWP devs who do this, with (it seems) no obvious downsides to UWP devs."],"labels":["Windows 10 UWP","Feature Request"]},{"title":"[WIN OPENGL] Some PCM wave file won't load correctly after audioloader update ","body":"Here's the problematic file:\r\nhttps:\/\/drive.google.com\/open?id=1SP4qr-zLglM9c0IvbZU0D2X5oa3MryYu\r\n\r\nI was building a 6 month \"developer\" branch and the file did play correctly. After the recent changes the file doesn't load anymore via the SoundEffect.FromStream(...) method.\r\n\r\nIt seems something wrong is happening in the branch\r\n    if (chunkSize > 16)\r\naround line 142 of AudioLoader.cs\r\n\r\nthe old code : \r\n         \/\/ reads residual bytes\r\n        reader.ReadBytes(chunkSize - 16);\r\nseems to work fine.\r\n","comments":["Calling in audio wizard @KonajuGames"],"labels":["Audio","Needs Testing"]},{"title":"MRTs with unsupported surface format failing silently in DesktopGL.","body":"This example causes draws to the rendertargets to fail if FAIL is set.\r\nI ran this on a Win7 machine with the current nightly as a DesktopGL project and a GeForce GTX 960.\r\nWhen using the default constructor everything works as expected, when picking Rg32 for the depthTarget the color target is not drawn to.\r\n\r\nI think this is either a bug or unsupported by OGL. The GraphicsDevice will still show that 2 Rendertargets are bound.\r\n\r\nIt would make sense for me to at least not fail silently under those circumstances.\r\n\r\n```\r\nusing Microsoft.Xna.Framework;\r\nusing Microsoft.Xna.Framework.Graphics;\r\nusing Microsoft.Xna.Framework.Input;\r\n\r\nnamespace MRTIssue\r\n{\r\n    public class SomeFail : Game\r\n    {\r\n        GraphicsDeviceManager graphics;\r\n        SpriteBatch spriteBatch;\r\n        RenderTarget2D colorTarget;\r\n        RenderTarget2D depthTarget;\r\n\r\n        public SomeFail()\r\n            : base()\r\n        {\r\n            graphics = new GraphicsDeviceManager(this);\r\n            Content.RootDirectory = \"Content\";\r\n        }\r\n        protected override void Initialize()\r\n        {\r\n#if FAIL\r\n            colorTarget = new RenderTarget2D(GraphicsDevice, GraphicsDevice.Viewport.Width, GraphicsDevice.Viewport.Height, false, SurfaceFormat.Color, DepthFormat.None);\r\n            depthTarget = new RenderTarget2D(GraphicsDevice, GraphicsDevice.Viewport.Width, GraphicsDevice.Viewport.Height, false, SurfaceFormat.Rg32, DepthFormat.None);\r\n#else\r\n            colorTarget = new RenderTarget2D(GraphicsDevice, GraphicsDevice.Viewport.Width, GraphicsDevice.Viewport.Height);\r\n            depthTarget = new RenderTarget2D(GraphicsDevice, GraphicsDevice.Viewport.Width, GraphicsDevice.Viewport.Height);\r\n#endif\r\n            base.Initialize();\r\n        }\r\n\r\n        protected override void LoadContent()\r\n        {\r\n            spriteBatch = new SpriteBatch(GraphicsDevice);\r\n        }\r\n\r\n        protected override void UnloadContent()\r\n        {\r\n        }\r\n\r\n        protected override void Update(GameTime gameTime)\r\n        {\r\n            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))\r\n                Exit();\r\n\r\n            base.Update(gameTime);\r\n        }\r\n\r\n        protected override void Draw(GameTime gameTime)\r\n        {\r\n            GraphicsDevice.SetRenderTargets(new RenderTargetBinding(colorTarget), new RenderTargetBinding(depthTarget));\r\n            GraphicsDevice.Clear(Color.CornflowerBlue);\r\n            GraphicsDevice.SetRenderTargets(null);\r\n\r\n            spriteBatch.Begin();\r\n            spriteBatch.Draw(colorTarget, Vector2.Zero, Color.White);\r\n            spriteBatch.End();\r\n\r\n            base.Draw(gameTime);\r\n        }\r\n    }\r\n}\r\n```\r\n","comments":[],"labels":["OpenGL"]},{"title":"Game.Draw is never called when tracing the code with a debugger","body":"[The official XNA documentation](https:\/\/msdn.microsoft.com\/en-us\/library\/bb203873.aspx#ID4E5B) says that Game.Update should not be called again when the code is running under a debugger.\r\nWhat happens now is that, when the code is traced with a debugger, MonoGame calls Game.Update repeatedly and never calls Game.Draw.\r\n\r\n","comments":["I have found no mentions of which state the GameTime.IsRunningSlowly property should be in when the code is traced, but I guess it should be left to false.\r\n\r\nI have found no mentions of how GameTime.ElapsedGameTime and GameTime.TotalGameTime should be treated either. I guess it would be nice for them not to take into account the time spent on a breakpoint, if such a thing is possible.","The relevant part of the linked docs is the following\r\n\r\n> When your game pauses in the debugger, Game will not make extra calls to Update when the game resumes.\r\n\r\nWith the .NET API we can check if a debugger is attached, but I do not know how we'd go about checking if the game was paused.\r\n\r\nThe code we'd need for this would be something like the following:\r\n```\r\n#if DEBUG\r\n\/\/ only do 1 Update call when a debugger paused execution\r\nif (GameWasPaused)\r\n{\r\n    var newTicks = _accumulatedElapsedTime.Ticks % TargetElapsedTime.Ticks;\r\n    _accumulatedElapsedTime = TimeSpan.FromTicks(newTicks);\r\n}\r\n#endif\r\n```\r\ninserted in [Game.cs after DoUpdate](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Game.cs#L463-L464).\r\nThe question is how to figure out `GameWasPaused` in the above snippet.","This would be nice to support identical to XNA... but could be tricky to figure out.\r\n\r\nMy guess is some combination of exceeding `_maxElapsedTime` and the game window loosing and gaining focus.\r\n\r\nWe should setup a test in XNA to figure out the real exact behavior first and not assume based on docs alone."],"labels":["Help Wanted"]},{"title":"Content Pipeline unable to write type with abstract\/interface field\/property","body":"I'm using 3.6 and trying to port an old XNA game that uses a lot of custom type writers\/readers.\r\n\r\nThe actual example is a lot more complicated than this.\r\n```\r\npublic class LogicalExpression {...}\r\npublic TrueLogicalExpression : LogicalExpression {...}\r\npublic FalseLogicalExpression : LogicalExpression {...}\r\npublic class Episode {\r\n    public LogicalExpression Criteria;\r\n}\r\n```\r\n\r\nAssuming our xml is setup properly and each of the concrete implementations of LogicalExpression have writers and readers this works fine in XNA.  MonoGame is trying to get a type writer for the LogicalExpression abstract type which for us redirects to the appropriate concrete implementation's writer, but in the process MonoGame tries to get a reader for the LogicalExpression type which doesn't exist.  I think the problem is in ReflectiveWriter<T> it uses the declared type of the property or field instead of the object's actual type.\r\n","comments":["Do you have ContentTypeWriters that inherit a base  ContentTypeWriter, \r\nsomething like the following ? \r\n\r\n```\r\nclass TrueLogicalExpressionWriter : LogicalExpressionWriter\r\n{\r\n        protected override void Write(ContentWriter output, object value)\r\n        {\r\n            \/\/ ...\r\n        }\r\n}\r\n```\r\n\r\n","> MonoGame is trying to get a type writer for the LogicalExpression abstract type which for us redirects to the appropriate concrete implementation's writer, but in the process MonoGame tries to get a reader for the LogicalExpression type which doesn't exist.\r\n\r\nI think you might have a similar problem as I had in #5257.\r\nThe pipeline ignores the base `ContentTypeWriter` and `ContentTypeWriter.TargetType`. \r\nInstead, MG is looking for the generic `ContentTypeWriter<T>` and assumes *`T`* is the `TargetType`. \r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/156f4f861e5257bec9db4ade01927b7a3f79448f\/MonoGame.Framework.Content.Pipeline\/Serialization\/Compiler\/ContentCompiler.cs#L46-L60\r\n\r\n\r\nCan you give the basic structure of the base writer and the concrete writers ?","Thanks, I wasn't expecting a reply so fast.  I setup a minimal example, but it's breaking differently.\r\n\r\nI changed about 15 lines of code in MGCB and got my content project to build with it, but while trying to figure out why the minimal example was breaking differently I did something similar to what you suggested.  Mine didn't inherit from the base writer, but the base one forwarded calls to the specific writers and that writer is the one that was causing the problem.\r\n\r\nI removed this ContentTypeWriter and now it's working in my game, but I've got another example project that's failing differently.\r\n```\r\n    [ContentTypeWriter]\r\n    public class LogicalExpressionBaseContentWriter: ContentTypeWriter<LogicalExpressionBase>\r\n    {\r\n        protected override void Write(ContentWriter output, LogicalExpressionBase value)\r\n        {\r\n            LogicalExpressionSerializer.WriteILogicalExpressionObject(value, output);\r\n        }\r\n\r\n        public override string GetRuntimeReader(TargetPlatform targetPlatform)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n```\r\n\r\nFor the other project it builds fine, but when I try to load the content I get a NullReferenceException with this stack trace.  I'll try debugging that more later.\r\n```\r\n   at Microsoft.Xna.Framework.Content.ContentTypeReaderManager.LoadAssetReaders(ContentReader reader)\r\n   at Microsoft.Xna.Framework.Content.ContentReader.InitializeTypeReaders()\r\n   at Microsoft.Xna.Framework.Content.ContentReader.ReadAsset[T]()\r\n   at Microsoft.Xna.Framework.Content.ContentManager.ReadAsset[T](String assetName, Action`1 recordDisposableObject)\r\n   at Microsoft.Xna.Framework.Content.ContentManager.Load[T](String assetName)\r\n   at Game1.Game1.LoadContent() in c:\\users\\tom\\Source\\Repos\\CWDemo\\Game1\\Game1.cs:line 46\r\n   at Microsoft.Xna.Framework.Game.Initialize()\r\n   at Game1.Game1.Initialize() in c:\\users\\tom\\Source\\Repos\\CWDemo\\Game1\\Game1.cs:line 33\r\n   at Microsoft.Xna.Framework.Game.DoInitialize()\r\n   at Microsoft.Xna.Framework.Game.Run(GameRunBehavior runBehavior)\r\n   at Microsoft.Xna.Framework.Game.Run()\r\n   at Game1.Program.Main() in c:\\users\\tom\\Source\\Repos\\CWDemo\\Game1\\Program.cs:line 18\r\n```\r\n\r\nThis code did work in XNA and doesn't with MonoGame, but I'm not sure how important \"fixing\" that is since now I can just remove the XNA kludge.","Here's the minimal example that's generating that null reference exception in case it helps. https:\/\/github.com\/headhunter45\/MonoGameContentPipelineError"],"labels":["ContentPipeline"]},{"title":"[DesktopGL] Suggestion: use FBO as back buffer render target","body":"Long wall of text incoming, tl;dr at the bottom.\r\n\r\nCurrently there are some issues in the DesktopGL implementation with respect to pixel format of the window. In OpenGL you can either use an FBO for MSAA and depth support or create the Default Framebuffer with support for MSAA and depth.\r\n\r\nTo create the Default FrameBuffer with MSAA and a depth\/stencil buffer, you need to indicate this in the pixel format of the window that the context will be created for (e.g. on Windows by using [wglChoosePixelFormatArb](https:\/\/www.khronos.org\/registry\/OpenGL\/extensions\/ARB\/WGL_ARB_pixel_format.txt)). Because of this you need to recreate the whole window whenever you want to change the surface format, depth bits, stencil bits or multisampling as there is no way to change the pixel format of an existing window [[1]](#setpixelformat). Because you recreate the window, you also need to recreate the GL context [[2]](#so-context). That in turn will mess up all graphics resources, and since recreating them isn't properly implemented yet this is a big issue. It's also annoying that you can actually see that the window is being recreated. \r\n\r\nIf we use an FBO for MSAA and depth instead, the Default Framebuffer only needs a color buffer. We would render everything to the FBO instead of the Default Framebuffer and in `Present` blit the FBO color buffer to the Default Framebuffers color buffer. That way we can bypass the recreation of the window in most cases. The only case where we can't is if the backbuffer format is changed by the user because we need to change the color buffer of the Default Framebuffer [[3]](#bb-format). Using an FBO will allow changing multisample count, depth and stencil buffer size at runtime for DesktopGL. \r\nWe'd still need to implement recreating the window in case the user changes the surface format, but using an FBO lowers priority for supporting window recreation IMO because changing the surface format at runtime is not something most users will do, while changing multisample count is more common.\r\n\r\nCurrently we create the Default Framebuffer with depth and MSAA support as required, however we do not support changing these settings at runtime because of the issues described in the second paragraph. \r\nSo I suggest using an FBO instead. MG already requires FBO support for RenderTargets, but we would need require the [ARB_texture_multisample](https:\/\/www.khronos.org\/registry\/OpenGL\/extensions\/ARB\/ARB_texture_multisample.txt) extension to have a multisampled FBO, so GL requirements if you want a multisampled back buffer would go up slightly [[4]](#requirements). I don't know how well supported ARB_texture_multisample is. The most significant benefit IMO is that we can let MG users change MSAA at runtime without any issues and without the player noticing (i.e. without recreating the window). We'd just need to switch out the FBO attachments, quick and simple.\r\n\r\nWe could optionally only use the FBO if ARB_texture_multisample is supported and fall back to creating the Default FrameBuffer with MSAA and depth buffer support, but that increases complexity and makes maintenance harder. (I think that's what FNA does, flibit calls the FBO 'faux-backbuffer' IIRC)\r\n\r\n____________________\r\n\r\n<a name=\"setpixelformat\">[1]<\/a>: e.g. from [wgl docs](https:\/\/msdn.microsoft.com\/en-us\/library\/dd369049(v=vs.85).aspx):\r\n> Setting the pixel format of a window more than once can lead to significant complications for the Window Manager and for multithread applications, so it is not allowed. An application can only set the pixel format of a window one time. Once a window's pixel format is set, it cannot be changed.\r\n\r\n<a name=\"so-context\">[2]<\/a>: A GL context can apparently be used with the new window if the same pixel format is used, however that functionality is not exposed in SDL, see [this SO post](https:\/\/stackoverflow.com\/a\/12881231). And either way it's not really useful here, because we need to recreate the window *because* the pixel format needs to be changed.\r\n\r\n<a name=\"bb-format\">[3]<\/a>: Blitting does not require the formats of both involved color buffers to be the same, but it is limited in that not all combinations work and I think it's driver-dependent, so we should probably just ensure they're the same.\r\n\r\n<a name=\"requirements\">[4]<\/a>: If we decide to make RenderTargets optional to lower GL requirements (see #5580) this will make it a lot harder to do so.\r\n\r\n______________________\r\n\r\n**tl;dr**\r\n\r\nPros of FBO approach:\r\n\r\n- Runtime switching of multisample count, depth and stencil buffer size without recreating the window.\r\n\r\nCons of FBO approach:\r\n\r\n- Higher requirements if you want a multisampled back buffer (ARB_texture_multisample required)\r\n- Harder to support older OpenGL versions if we ever decide we want that.\r\n\r\ncc @cra0zy @mrhelmut ","comments":["So, the lesser of 2 evils.","I suppose :D ","To my mind, this is just having a hidden RenderTarget2D in GraphicsDevice\nthat is selected in the case of SetRenderTarget(null). During Present(),\nthis hidden RenderTarget2D is drawn as a quad to the back buffer. This\nwould also take care of colour format differences if needed. The window\ncolour format could be the same as the desktop, but the hidden revert\ntarget could be different.\n\nAs for the pros and cons, I don't agree with going backwards in supporting\nlower versions of OpenGL.\n","ARB_texture_multisample is 3.1+, which is quite high to me (mostly because of Intel IGP missing a 3.0 driver on Win10). This is the only drawback that comes to my mind, otherwise this sounds interesting.","> To my mind, this is just having a hidden RenderTarget2D in GraphicsDevice that is selected in the case of SetRenderTarget(null). During Present(), this hidden RenderTarget2D is drawn as a quad to the back buffer.\r\n\r\nYes, that's pretty much how it is and maybe even how we'd implement it. Blitting with `glBlitFrameBuffer` is faster than drawing traditionally, but you're right that in case there's a format mismatch we could do a regular render instead so we don't have to recreate the window.\r\n\r\n> ARB_texture_multisample is 3.1+, which is quite high to me\r\n\r\nYes, that is quite high. We could let support for changing ms count at runtime be optional and only allow setting it before window creation (i.e. in Game1 ctor) when ARB_texture_multisample is not supported. Could add a bool in GraphicsCapabilities for it. That way we don't sacrifice any functionality we have right now, but have better support with the extension and we don't need to implement (unless people really want it) the horrible mess that is window recreation."],"labels":["OpenGL","Windowing"]},{"title":"GameWindow.Position is inconsistent","body":"For DX GameWindow.Position is the WinForms Form location, meaning the top left of the window.\r\nFor DesktopGL it's the top left of the client rectangle, so there will be a slight offset when the window is not borderless. \r\n\r\nWindow position seems the obvious solution, so I'll fix the DesktopGL implementation.","comments":["I think that's the window that mouse is relative to (=the client topleft position). I am not sure about that, I will have to check it with XNA. ","This functionality is not in XNA.\r\n\r\nSDL does not seem to support getting the border size on Windows. Thinking about this some more, from an x-platform POV it might make more sense that setting position sets the client rectangle position since borders are different across platforms.","\r\nOk I see. In that case you are right. It probably sould return the window position. If someone needs the client position we can add a .ClientPosition (as we have a .ClientSize).\r\n\r\n","> Window position seems the obvious solution, so I'll fix the DesktopGL implementation.\r\n\r\nTrust me, its gonna be way less painful doing it the other way around.","@cra0zy Any idea if\/how it's possible to get\/set the window position (not of the client display) with SDL on Windows? I found SDL_GetWindowBordersSize but it's only implemented for X11.\r\nEDIT: Woah, beat me to it. Yeah I figured...","We could P\/Invoke Win32 on Windows to get the border size (with a runtime OS check).","> cra0zy Any idea if\/how it's possible to get\/set the window position (not of the client display) with SDL on Windows?\r\n\r\nI know of a trick to get window border size, but the mouse would need to be inside the window, and moving the mouse for no reason seams annoying to me. I would rather this be inconsistent than us moving mouse on game start.\r\n\r\n> I found SDL_GetWindowBordersSize but it's only implemented for X11.\r\n\r\nMir and Wayland are a thing now, don't forget that (tho Wayland does not support server side decorations so that is technically \"done\").\r\n\r\n> We could P\/Invoke Win32 on Windows to get the border size (with a runtime OS check).\r\n\r\nYou are gonna have to do it for all the platforms, technically possible.","> I would rather this be inconsistent than us moving mouse on game start.\r\n\r\nAgreed.\r\n\r\n> Mir and Wayland are a thing now\r\n\r\nYeah, just mentioning that it won't work x-platform.\r\n\r\n> You are gonna have to do it for all the platforms, technically possible.\r\n\r\nRight, this would be a real pain :\/ I'm not gonna do that right now, I was working on something else but got sidetracked."],"labels":["Windowing"]},{"title":"Mouse.SetCursor() - Boom.....GDS+ unhandled exception after many iterations.","body":"Hey,\r\n  We had a report that one of our playtesters downloaded our game and no cursors showed up. I currently have been setting the OS cursor myself, not realizing that monoGame had the Mouse.SetCursor functionality. However, when I moved to use Monogames SetCursor, I get a GDI+ exception after a period of time..\r\n\r\n**I had this previously, which worked perfectly for dozens of playtesters except the guy that just reported it....**\r\nForm.FromHandle(Game.Window.Handle).Cursor = (System.Windows.Forms.Cursor)(MyCursorBitmap);\r\n\r\n**I moved that to instead use**\r\nMouse.SetCursor(m_MyTexture2DCursor, 65, 65));  \/\/130x130 image\r\n\r\nThat worked great as well....at least for the first 20-30 seconds of sitting there at the menu. It would then blow up with a \"An unhandled exception of type 'System.Runtime.InteropServices.ExternalException' occurred in System.Drawing.dll\".\r\n\r\nMouse.SetCursor gets called over and over in our render loop because game state changes will change the texture used on the fly. It might be that Mouse.SetCursor is doing something under the hood and is not freeing some resource it should. I have no idea.  I'm also not 100% confident that Mouse.SetCursor will fix his problem. I looked at your code, and it basically does what I am doing as far as image assignment goes.\r\n\r\n","comments":[],"labels":["Windows","Help Wanted","Input"]},{"title":"Unable to add dependency in a custom pipeline importer","body":"When we create a custom **importer** in a pipeline extension project, we override this method :\r\n`public abstract TOutput Process(TInput input, ContentProcessorContext context);`\r\n\r\nHowever, we can't add a dependency to an external file by using `context.AddDependency(filepath)` because this method is empty :\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/1c09add4a7407cf14690614d5ec36666d6c2a8ea\/MonoGame.Framework.Content.Pipeline\/Builder\/PipelineImporterContext.cs#L22-L24\r\n\r\nThe type `ContentProcessorContext`  is abstract but the concrete type is `PipelineImporterContext` which has this empty method, and this method is not overriden anywhere else.\r\n\r\nYou may note that adding a dependency does work with a custom **processor** as the `PipelineProcessorContext` has an implementation for the method `AddDependency` :\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/1c09add4a7407cf14690614d5ec36666d6c2a8ea\/MonoGame.Framework.Content.Pipeline\/Builder\/PipelineProcessorContext.cs#L37-L40","comments":["You are right @Paphos .  This is indeed missing pipeline functionality.\r\n\r\nI think the implementation is simple.  The existing `PipelineBuildEvent` should be passed into the `PipelineImporterContext` here:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework.Content.Pipeline\/Builder\/PipelineManager.cs#L650\r\n\r\nThen just like we do for `PipelineProcessorContext` the `AddDependency` can be implemented.","@tomspilman Know I'm reviving a dead thread, but has anyone noticed the open PR from '21 here? The fix looks incredibly simple and follows your suggested script. I've built it and am using it myself currently."],"labels":["ContentPipeline","Help Wanted"]},{"title":"[Pipeline Tool]Double-clicking or pressing enter on a treeview item does nothing.","body":"Double-clicking or pressing enter on a treeview item does nothing.\r\nWould expect the open command to activate.","comments":[],"labels":["Feature Request","MGCB Editor"]},{"title":"OpenAL: SIGSEGV in alcDeviceResumeSOFT","body":"MonoGame 3.6 on Android throws a lot of errors related to libopenal32.so\r\nMy Google Play Console is showing me lots of these Crash reports (2.8% of players suffer from this isue). Seems like MonoGame does not correctly handle the resume event:\r\n\r\nsignal 11 (SIGSEGV), code 1 (SEGV_MAPERR)\r\nlibopenal32.so\r\n\r\n```\r\nbacktrace: \r\nnative: pc 0000000000037748 \/data\/app\/com.xxx\/lib\/arm\/libopenal32.so \r\nnative: pc 00000000000363e8 \/data\/app\/com.xxx\/lib\/arm\/libopenal32.so \r\nnative: pc 0000000000025208 \/data\/app\/com.xxx\/lib\/arm\/libopenal32.so (alcDeviceResumeSOFT+136) \r\nnative: pc 000000000000ba14 \r\n```\r\nThis is my handler of the resume event:\r\n```\r\n        private void GameResumed()\r\n        {\r\n            if (AmbientSound == null || AmbientSound.IsDisposed)\r\n            {\r\n                AmbientSound = Content.Load<SoundEffect>(\"ambience\").CreateInstance();\r\n                AmbientSound.IsLooped = true;\r\n            }\r\n            if (BgSong == null || BgSong.IsDisposed)\r\n            {\r\n                BgSong = Content.Load<Song>(\"bgsong\");\r\n            }\r\n            if (Settings == null)\r\n            {\r\n                LoadGameSettings(true);\r\n            }\r\n            SoundEffect.MasterVolume = Settings.SoundEnabled ? 1f : 0f;\r\n            if (AmbientSound != null && !AmbientSound.IsDisposed)\r\n            {\r\n                AmbientSound.Volume = Settings.BgSoundEnabled ? 0.2f : 0f;\r\n                AmbientSound.PlaySafely();\r\n            }\r\n            if (BgSong != null && !BgSong.IsDisposed)\r\n            {\r\n                Microsoft.Xna.Framework.Media.MediaPlayer.Volume = Settings.BgSoundEnabled ? 0.1f : 0f;\r\n                Microsoft.Xna.Framework.Media.MediaPlayer.Play(BgSong);\r\n                Microsoft.Xna.Framework.Media.MediaPlayer.IsRepeating = true;\r\n            }\r\n        }\r\n```\r\n","comments":[],"labels":["Android","Audio"]},{"title":"Support PNG image for window icon","body":"Using a BMP for window icon is very limiting, as it does not support transparency, commonly used in icons.\r\nLooks like there is already some PNG loading code: https:\/\/github.com\/MonoGame\/MonoGame\/tree\/develop\/MonoGame.Framework\/Utilities\/Png\r\n\r\nCould we possibly have PNG support in taskbar\/window icon, cross platform?\r\nThanks!","comments":["It is a known limitation and I believe that it is planned to be implemented (@cra0zy I can't remember if that was something you were considering).\r\n\r\nYou can however support transparency for window icon with BMP. The BMP has to be encoded in a very specific format which is quite uncommon (and unsupported by Photoshop).\r\n\r\nI have been successfully using this tool to convert transparent PNG to the correct BMP format that will use transparency for window icon: https:\/\/pngtobmp32.codeplex.com\/","> I can't remember if that was something you were considering\r\n\r\nIts very very low on my TODO list.\r\n\r\n> Looks like there is already some PNG loading code: https:\/\/github.com\/MonoGame\/MonoGame\/tree\/develop\/MonoGame.Framework\/Utilities\/Png\r\n\r\nSDL will only accept .bmp images unless you want to include SDL image native lib, which we want to avoid.","GIMP also supports exporting BMP's with transparency. "],"labels":["Feature Request"]},{"title":"Miss touch event during slow frames","body":"https:\/\/github.com\/MonoGame\/MonoGame\/blob\/bd59328676004e6183b415dad98d91ae0b06e66a\/MonoGame.Framework\/Input\/Touch\/TouchPanelState.cs#L137\r\n\r\nWe noticed some touch event that were missing during slow frames for ppl with older devices. It seems that MonoGame discard events a bit too aggressively. Removing this block *seem* to solve our issues.\r\n\r\nAre there specific cases this is supposed to solve that we are missing? Asking for a friend :)","comments":["> Removing this block seem to solve our issues.\r\n\r\n...but How? \r\nSameFrameReleased is never set. SameFrame events are removed in TouchPanel.Apply().\r\n\r\nWhat you describe is a common issue with all MonoGame\/XNA Input (key & mouse). \r\nFor touch there's also Gestures , for example you can check for Tap. However I think that monogame will remove a SameFrame event before it can reach the Gesture list. Perhaps that's what the SameFrameReleased was for and why the clean up was done late inside GetState().\r\n\r\n\r\n\r\n","> SameFrameReleased is never set\r\n\r\nIt is, when a press and release happen in the same frame (which is common if frame is slow). In that case it is removed from the event list and we have no chance to act on it. ","Where?\r\nI searched for it but I couldn't find it.\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/search?utf8=\u2713&q=SameFrameReleased&type=","github search is really bad :)\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/bd59328676004e6183b415dad98d91ae0b06e66a\/MonoGame.Framework\/Input\/Touch\/TouchLocation.cs#L245"],"labels":["Input"]},{"title":"GamePad.GetState().IsConnected is always false on Game.Initialize even if controller is connected","body":"**Summary**\r\n\r\nThe following code returns `false` on MonoGame UWP when a controller is connected in `Game.Initialize`, but returns `true` in Microsoft XNA:\r\n\r\n```\r\nMicrosoft.Xna.Framework.Input.GamePad.GetState(PlayerIndex.One, GamePadDeadZone.Circular).IsConnected\r\n```\r\n\r\n**Code Example**\r\n\r\nTo reproduce:\r\n\r\n1. Connect an Xbox One wired controller (this will allow the same code and hardware to be used on both a MonoGame UWP project as well as Microsoft XNA project)\r\n1. Replace the Game1 contents with the code that follows\r\n1. Run the code in Microsoft XNA and notice that an exception is not thrown.\r\n1. Run the code in MonoGame UWP and notice that an exception is thrown.\r\n\r\n```\r\npublic class Game1 : Microsoft.Xna.Framework.Game\r\n{\r\n    GraphicsDeviceManager graphics;\r\n\r\n    public Game1() : base()\r\n    {\r\n        graphics = new GraphicsDeviceManager(this);\r\n    }\r\n\r\n    protected override void Initialize()\r\n    {\r\n        var gamepadState = Microsoft.Xna.Framework.Input.GamePad.GetState(PlayerIndex.One, GamePadDeadZone.Circular);\r\n\r\n        if (gamepadState.IsConnected == false)\r\n        {\r\n            throw new Exception(\"Not connected!\");\r\n        }\r\n\r\n        base.Initialize();\r\n    }\r\n}\r\n```\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/729631\/31616348-b64b5b68-b249-11e7-9092-0701305e4f01.png)\r\n\r\nNote that some functions (such as Draw) have been removed for brevity. They are not necessary to reproduce the bug.\r\n\r\n**Additional Information and Workarounds**\r\n\r\nThe `IsConnected` property will accurately reflect the connected state of a game pad in a game's Update method (after Initialize has finished). The issue is isolated specifically to the Initialize method. Changing the code to call `base.Initialize()` before getting the GamePad state does not fix the bug.\r\n\r\n**Why does this matter?**\r\n\r\nTutorials and simple games may query the connected state of the GamePad to identify whether to use gamepad controls or keyboard controls. This behavior may lead programmers to believe that controller support is broken in UWP, when it in fact is not.\r\n","comments":["UWP uses the `Windows.Gaming.Input` API for gamepads:\r\n\r\n https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Input\/GamePad.UWP.cs\r\n\r\nI don't see any special initialization in this code which suggests to me that WGI internally depends on some other system we enable\/trigger\/initialize during `base.Initialize()`.\r\n\r\nI suggest stepping into `base.Initialize()` and put `Windows.Gaming.Input.Gamepad.Gamepads.Count` in the watch window.  Then as you step you should see the count go up from zero once the code that \"enables\" the gamepads is triggered.","@cra0zy - You did the UWP input code here originally.  Have any ideas?","> I don't see any special initialization in this code which suggests to me that WGI internally depends on some other system we enable\/trigger\/initialize during base.Initialize().\r\n> I suggest stepping into base.Initialize() ...\r\n\r\nApologies if this wasn't clearly explained above, even if I call base.Initialize() **before** looking at at the connected, the value is still false for the entirety of the Initialize call. \r\n\r\nSo I'd guess the critical code isn't in base.Initialize(), but rather somewhere else before Update().\r\n","> but rather somewhere else before Update().\r\n\r\nOh... i mis-read that.  Sorry.\r\n\r\nWell then it is deeper in.  Still stepping thru the bowels of MG code with `Windows.Gaming.Input.Gamepad.Gamepads.Count` in the Watch Window should let you detect the specific call where it starts working.\r\n","Long story short: https:\/\/docs.microsoft.com\/en-us\/uwp\/api\/windows.gaming.input.gamepad\r\n\r\n> Remarks\r\nThis list is initally empty and will not list gamepads even if they are already connected. After a short period this will return a complete list of gamepads.","> After a short period this will return a complete list of gamepads.\r\n\r\nUggh... yuck!\r\n\r\nHack... if we put a 5 second delay at launch does it hack around this issue?\r\n","> Hack... if we put a 5 second delay at launch does it hack around this issue?\r\n\r\nDo we really want a 5 second delay due to this?","> Do we really want a 5 second delay due to this?\r\n\r\nNot really... just wondering if just waiting a bit solves it.\r\n\r\nIf so i could see the UWP code look like this:\r\n\r\n```\r\nRETRY:\r\nif (Gamepad.Gamepads.Count == 0)\r\n{\r\n    if (FirstCall)\r\n    {\r\n       FirstCall = false;\r\n       Sleep(1000);\r\n       goto RETRY;\r\n    }\r\n    return GetDefaultState();\r\n}\r\n```\r\n\r\nor something like that.","I don't know if it's on a separate thread, but I did put a breakpoint in the Init method and let it sit, then proceeded - it still returned false. ",">  I did put a breakpoint in the Init method and let it sit, then proceeded - it still returned false.\r\n\r\nWell a breakpoint stops all threads in the application.  So i wouldn't expect that to do it.  If you put a Sleep in there it might work.\r\n\r\nOr it might just depend on some messages pumping in UWP and we can do nothing about it.","Take look at: https:\/\/github.com\/Microsoft\/DirectXTK\/blob\/master\/Src\/GamePad.cpp maybe we need to attach to added\/removed or rework the gamepad logic","Good idea to check DirectXTK @amerkoleci !\r\n\r\n@cra0zy @vchelaru ?","Possible, someone would need to test it out ofc."],"labels":["Windows 10 UWP","Input"]},{"title":"setting Input.Mouse.WindowHandle should make Mouse events work WITHOUT needing Game class.","body":"Looking at old XNA-using code, under Windows, the way to make Microsoft.Xna.Framework.Input.Mouse provide mouse events relative to a given window, was to do this:\r\n\r\n    Mouse.WindowHandle = ..the window's IntPtr...\r\n\r\nThen calling `FrameworkDispatcher.Update()` each game loop should be sufficient to update internal information, that is retrieved via `Mouse.GetState()`.\r\nIn MonoGame, this has no effect - a default mouse state of 0's is always returned,\r\nunless one is using a Game class (which creates a MonoGame GameWindow).\r\n\r\nAs a result, any MonoGame client that is using custom game loop that does not create a Game class, has to replace their XNA Mouse code with some non-XNA solution.\r\n\r\nA fix (at least on Windows) would be to add another case to the code that checks for a GameWindow. If there is no Primary GameWindow, then look at Mouse.WindowHandle, and create a MouseState relative to that.","comments":["@tomspilman Are you OK with moving the mouse handling in the Mouse class?\r\n\r\nPlatformWindow wont be changed (`Mouse.GetState(GameWindow)` & Touch emulation will still function as before).","@nkast - As long as we still support multiple `GameWindow`s then moving the state\/code to `Mouse` could be good overall.","@ToolmakerSteve You can test the following build if you like.\r\nhttp:\/\/teamcity.monogame.net\/repository\/download\/MonoGame_PackagingWindows\/58823:id\/MonoGameSetup.exe"],"labels":["Input"]},{"title":"ExternalReference paths not being sensibly parsed","body":"This may actually be two separate issues, but they're closely related.\r\n\r\nFirst, when using a simple reference path such as `Sprites\\marble.xnb` as an ExternalReference's reference path, it looks in the directory of the _source_ file, not where the xnb would be stored.  This then produces an error:\r\n`ExternalReference 'E:\\(...)\\Content\\Terrains\\Sprites\\marble.xnb' must be in the root directory 'E:\/(...)\/CityEditor\/Content\/bin\/Windows\/'`\r\n<sub><sup>Possibly of note, the original path produced by IntermediateSerializer was \"Sprites\/marble.xnb\", but this just produced the same error with the one slash inverted<\/sup><\/sub>\r\n\r\nSecondly, when adding a relative target of `..\\bin\\Windows\\Terrains\\` before the path, mgcb returned another, less sensical error:\r\n`ExternalReference 'E:\\(...)\\Content\\Terrains\\..\\bin\\Windows\\Terrains\\Sprites\\marble.xnb' must be in the root directory 'E:\/(...)\/Content\/bin\/Windows\/'`\r\n\r\nSo... either it's not recognizing \"..\", not recognizing backslashes as folder seperators, not recognizing that a path with backslashes is the same as one with forward slashes, or some combination of those factors, is what I'm seeing.\r\n\r\nFor reference, I'm running Monogame 3.6.0.1625 on Windows 7.","comments":[],"labels":["ContentPipeline"]},{"title":"Exception processing Gesture State on Android","body":"Android occasionally crashes with the following exception.\r\n\r\n```\r\n[AndroidGameView] System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n[AndroidGameView]   at System.ThrowHelper.ThrowInvalidOperationException (System.ExceptionResource resource) [0x0000b] in <896ad1d315ca4ba7b117efb8dacaedcf>:0 \r\n[AndroidGameView]   at System.Collections.Generic.List`1+Enumerator[T].MoveNextRare () [0x00013] in <896ad1d315ca4ba7b117efb8dacaedcf>:0 \r\n[AndroidGameView]   at System.Collections.Generic.List`1+Enumerator[T].MoveNext () [0x0004a] in <896ad1d315ca4ba7b117efb8dacaedcf>:0 \r\n[AndroidGameView]   at Microsoft.Xna.Framework.Input.Touch.TouchPanelState.UpdateGestures (System.Boolean stateChanged) [0x0002b] in \/Users\/dean\/Documents\/Sandbox\/MonoGame\/MonoGame.Framework\/Input\/Touch\/TouchPanelState.cs:391 \r\n[AndroidGameView]   at Microsoft.Xna.Framework.Input.Touch.TouchPanelState.get_IsGestureAvailable () [0x00001] in \/Users\/dean\/Documents\/Sandbox\/MonoGame\/MonoGame.Framework\/Input\/Touch\/TouchPanelState.cs:321 \r\n[AndroidGameView]   at Microsoft.Xna.Framework.Input.Touch.TouchPanel.get_IsGestureAvailable () [0x00001] in \/Users\/dean\/Documents\/Sandbox\/MonoGame\/MonoGame.Framework\/Input\/Touch\/TouchPanel.cs:153 \r\n[AndroidGameView]   at Develop.Game1.Update (Microsoft.Xna.Framework.GameTime gameTime) [0x0019f] in \/Users\/dean\/Desktop\/DevelopBrighton\/Develop.Shared\/Game1.cs:111 \r\n[AndroidGameView]   at Microsoft.Xna.Framework.Game.DoUpdate (Microsoft.Xna.Framework.GameTime gameTime) [0x0001f] in \/Users\/dean\/Documents\/Sandbox\/MonoGame\/MonoGame.Framework\/Game.cs:647 \r\n[AndroidGameView]   at Microsoft.Xna.Framework.Game.Tick () [0x00105] in \/Users\/dean\/Documents\/Sandbox\/MonoGame\/MonoGame.Framework\/Game.cs:463 \r\n[AndroidGameView]   at Microsoft.Xna.Framework.AndroidGameWindow.OnUpdateFrame (System.Object sender, Microsoft.Xna.Framework.MonoGameAndroidGameView+FrameEventArgs frameEventArgs) [0x00053] in \/Users\/dean\/Documents\/Sandbox\/MonoGame\/MonoGame.Framework\/Android\/AndroidGameWindow.cs:89 \r\n[AndroidGameView]   at Microsoft.Xna.Framework.MonoGameAndroidGameView.UpdateFrameInternal (Microsoft.Xna.Framework.MonoGameAndroidGameView+FrameEventArgs e) [0x00017] in \/Users\/dean\/Documents\/Sandbox\/MonoGame\/MonoGame.Framework\/Android\/MonoGameAndroidGameView.cs:640 \r\n[AndroidGameView]   at Microsoft.Xna.Framework.MonoGameAndroidGameView.UpdateAndRenderFrame () [0x00061] in \/Users\/dean\/Documents\/Sandbox\/MonoGame\/MonoGame.Framework\/Android\/MonoGameAndroidGameView.cs:662 \r\n[AndroidGameView]   at Microsoft.Xna.Framework.MonoGameAndroidGameView.processStateRunning (System.Threading.CancellationToken token) [0x00077] in \/Users\/dean\/Documents\/Sandbox\/MonoGame\/MonoGame.Framework\/Android\/MonoGameAndroidGameView.cs:417 \r\n[AndroidGameView]   at Microsoft.Xna.Framework.MonoGameAndroidGameView.RunIteration (System.Threading.CancellationToken token) [0x000fb] in \/Users\/dean\/Documents\/Sandbox\/MonoGame\/MonoGame.Framework\/Android\/MonoGameAndroidGameView.cs:617 \r\n[AndroidGameView]   at Microsoft.Xna.Framework.MonoGameAndroidGameView.WorkerThreadFrameDispatcher (System.Threading.SynchronizationContext uiThreadSyncContext) [0x00071] in \/Users\/dean\/Documents\/Sandbox\/MonoGame\/MonoGame.Framework\/Android\/MonoGameAndroidGameView.cs:337 \r\nThread started: <Thread Pool> #3\r\n```\r\n\r\nLooks like we need some kind of locking to ensure that the `_gestureState` does not get updated during the `UpdateGestures` call. \r\n\r\n@tomspilman @KonajuGames thoughts?\r\n\r\n[1] https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Input\/Touch\/TouchPanelState.cs#L391\r\n","comments":["This happens when `RenderOnUIThread` is False. So its a sync problem. The Android `AndroidTouchEventManager` is adding events during the middle of the `UpdateGestures` call. \r\nNormally I would use a lock for this.. but the `UpdateGestures` is quite a long method.","Adding a lock to `IsGestureAvailable` and `AddEvent` in `TouchPanelState` seems to fix the issue. Not sure its the best approach though.","https:\/\/github.com\/MonoGame\/MonoGame\/pull\/5410#issuecomment-292521502","@nkast intersting, I must have missed that.","I guess #5815 is relevant too. "],"labels":["Android"]},{"title":"[Mac OS X] Tap on trackpad not works correctly","body":"Hello, guys!\r\n\r\nI trying to migrate my iOS game to MacOS, and my code: \r\n'mouse.LeftButton == ButtonState.Pressed' only is executed when I click the trackpad and not when I tap it.\r\n\r\nMy MacOS is configured to \"Tap to click - Tap with one finger\".\r\n\r\nSometimes on trackpad-Tap state of left mouse button changed on 'Pressed' state, but it's very unstable (1 of 10 taps) in other cases in update method we get always 'Released' mouse state like we don't Tap ever.\r\n\r\nLooks like MonoGame not catch very fast clicks (Tap-s). (i.e. 'Pressed' state changed very fast from 'Pressed' to 'Released', and Update method don't catch it).\r\n\r\nTested on last **stable MonoGame Release 3.6** and with **develop branch**. Same problem.\r\n\r\nThank in advance!","comments":["Hmm... this might be due to how XNA input API works, it might be missing the state when the touchpad is pressed.\r\n\r\nWhat platform MG assembly are you using, DesktopGL?","@cra0zy thank you for answer.\r\n\r\nYes, DesktopGL.\r\n\r\n> it might be missing the state when the touchpad is pressed.\r\n\r\nNo, input works fine.\r\n\r\nI make some research and can say that ->\r\nUpdate method calls slower than Mac trackpad change state (chain) ['Released' -> 'Pressed' -> 'Released']. i.e. between Update calls mouse state changed from 'Released' to 'Released' and we can't catch that use make tap.\r\n\r\nI check this with snippet, in my LoadContent method i call it:\r\n\r\n        private void CheckActualMouseState()\r\n        {\r\n            Task.Run(() =>\r\n            {\r\n                while (true)\r\n                {\r\n                    var mouseState = Mouse.GetState();\r\n                    if(mouseState.LeftButton == ButtonState.Pressed)\r\n                        Debug.WriteLine(mouseState.LeftButton);\r\n                }\r\n            });\r\n        }\r\n\r\nforever while catch my trackpad taps correctly, but it's ugly solution, because new thread, and while block.","> I make some research and can say that ->\r\n> Update method calls slower than Mac trackpad change state (chain) ['Released' -> 'Pressed' -> 'Released']. i.e. between Update calls mouse state changed from 'Released' to 'Released' and we can't catch that use make tap.\r\n\r\nThat is exactly what I said... its missing the state when its pressed...\r\n\r\n@tomspilman @KonajuGames @dellis1972 So... anybody for an event driven input API?, in all seriousness this does sound like a big problem and I'm just tagging you along for an idea on how to fix it.","@cra0zy Thank you again, yes all right.\r\n\r\nAlso. It's very interesting check this case on Windows, with same behavior of mouse click. But firstly tune mouse button like 'make click on left mouse down'.\r\n\r\nI think we again catch this.","Good idea :+1: ","@mgkcortyw I also encountered this issue when making double tap in my GUI. Did you find a solution?","@mgkcortyw what Mac system are you using to test this? If I recall correctly Mac trackpads don't support tapping. Only clicking. It's one of the many things that annoy me about Macs.","This is a huge problem - has nobody released anything for Macs ever using MonoGame?\r\n\r\nHaving this code in the update loop:\r\n```\r\nMouseState curMouseState = Mouse.GetState();\r\nif (curMouseState.LeftButton != ButtonState.Released) Console.WriteLine(\"Left Button Pressed\");\r\n```\r\n\r\nresults in a trackpad tap being recognised some of the time only - most of the time it is ignored.\r\n\r\nAnyone know any way to work around this problem? I can't release any product for Macs with this problem present.","I'm looking into fixing this. I'm currently trying capturing mouse events with SDL_SetEventFilter, adding button-press events to a concurrent-queue and pumping the queue each game tick.","There is no bug here, the API does what its meant to do.","The API was designed before mouse events could happen faster than 60Hz.\r\n\r\nI have a working solution on my fork but it has a flaw where simultaneous mouse events will be delivered on successive game ticks. This is not a problem for my game so I won't bother fixing it. If you change your mind I'll be happy to fix the flaw and make a PR.","Again, not a flaw, that's how the API is supposed to act, you get the current state of the mouse when you poll for it, getting anything other than that would be considered wrong.\r\n\r\nAs for what the proper solution would be, I would say its to add few more events to the `GameWindow` like the `TextInput` event.","Not a flaw, agreed. :-)\r\n\r\nI started on a solution similar to the TextInput event and then noticed the TouchPanel. Is there a good reason to not use TouchPanel? It would be nice to get gesture support for free.","`TouchPanel` is the touch screen API, I didn't really have any touchscreen desktop devices to implement and test it out. Not sure if XNA also treated touchpad as a `TouchPanel`.","I also don't have a touchscreen desktop device. The SDL documentation and tutorials I've been looking at suggest both the mac touchpad and touchscreen devices generate the finger events. I'll see how I get on with the mac touchpad updating TouchPanel.","@HaikuJock, \r\nmonogame can emulate a touch events from mouse, TouchPanel.EnableMouseTouchPoint. \r\nYou can ignore the mouse and use the touch input. Each touchlocation has a complete lifecycle  Pressed-Moved*-Release.","EnableMouseTouchPoint doesn't currently work on the DesktopGL version. Adding it I find that TouchPanelState doesn't distinguish between left and right mouse-buttons.\r\n\r\nAdding a new event-handler for finger-touches would put more work on client applications to then convert finger input into taps. SDL is already converting two-finger taps into right mouse-button presses so there's no point in doing that work again.\r\n\r\nI'd like to add event handlers for left and right mouse button touch events.","Mac touchpad mouse-button events are not marked as being touches, so the event handlers would be for all left and right mouse button events. I'm suggesting this would only be for the DesktopGL version of MonoGame.","I've made a PR but I'm open to discussing alternative solutions.\r\n","I changed SDL2.cs and SDLGamePlatform.cs (from the 3.7.1 release) locally to allow for Input events for my Mac releases and all works fine. They current situation is not acceptable on Macs at the moment. I can post the code if needed, but you'd probably want to find some other solution that does not involve using Events.","Hi @AidanMcK \r\nI'm curious to see how you solved this problem and what is your objection to using events?","@HaikuJock I've no objection to using events and use them, but I would imagine the MonoGame guys would prefer a solution that is consistent across all platforms.\r\n\r\nHere's the code:\r\nGame.cs\r\n```\r\npublic delegate void MouseButtonEventDelegate(byte button, bool down, float posX, float posY);\r\npublic delegate void MouseMoveEventDelegate(float posX, float posY);\r\npublic delegate void MouseWheelEventDelegate(float scrollX, float scrollY);\r\npublic delegate void KeyEventDelegate(Input.Keys key, bool pressed, bool repeat);\r\n\r\npublic MouseButtonEventDelegate  MouseButtonEventCB;\r\npublic MouseMoveEventDelegate    MouseMoveEventCB;\r\npublic MouseWheelEventDelegate   MouseWheelEventCB;\r\npublic KeyEventDelegate          KeyEventCB;\r\n```\r\n\r\nSDL2.cs\r\n```\r\n[FieldOffset(0)]\r\npublic Mouse.ButtonEvent Button;\r\n\r\n[StructLayout(LayoutKind.Sequential)]\r\npublic struct ButtonEvent\r\n{\r\n    public EventType Type;\r\n    public uint Timestamp;\r\n    public uint WindowID;\r\n    public uint Which;\r\n    public byte Button;\r\n    public byte State;\r\n    private byte _padding1;\r\n    private byte _padding2;\r\n    public int X;\r\n    public int Y;\r\n}\r\n```\r\n\r\nSDLGamePlatform.cs\r\n```\r\nprivate void SdlRunLoop()\r\n{\r\n...\r\n    else if (ev.Type == Sdl.EventType.MouseWheel)\r\n    {\r\n        const int wheelDelta = 120;\r\n        Mouse.ScrollY += ev.Wheel.Y * wheelDelta;\r\n        Mouse.ScrollX += ev.Wheel.X * wheelDelta;\r\n        Game.MouseWheelEventCB?.Invoke(ev.Wheel.X * wheelDelta, ev.Wheel.Y * wheelDelta);\r\n    }\r\n    else if (ev.Type == Sdl.EventType.MouseMotion)\r\n    {\r\n        Window.MouseState.X = ev.Motion.X;\r\n        Window.MouseState.Y = ev.Motion.Y;\r\n        Game.MouseMoveEventCB?.Invoke(ev.Motion.X, ev.Motion.Y);\r\n    }\r\n    else if (ev.Type == Sdl.EventType.MouseButtonDown)\r\n    {\r\n        switch (ev.Button.Button)\r\n        {\r\n            case 1: Game.MouseButtonEventCB?.Invoke(0, true, ev.Button.X, ev.Button.Y); break;\r\n            case 3: Game.MouseButtonEventCB?.Invoke(1, true, ev.Button.X, ev.Button.Y); break;\r\n            case 2: Game.MouseButtonEventCB?.Invoke(2, true, ev.Button.X, ev.Button.Y); break;\r\n        }\r\n    }\r\n    else if (ev.Type == Sdl.EventType.MouseButtonup)\r\n    {\r\n        switch (ev.Button.Button)\r\n        {\r\n            case 1: Game.MouseButtonEventCB?.Invoke(0, false, ev.Button.X, ev.Button.Y); break;\r\n            case 3: Game.MouseButtonEventCB?.Invoke(1, false, ev.Button.X, ev.Button.Y); break;\r\n            case 2: Game.MouseButtonEventCB?.Invoke(2, false, ev.Button.X, ev.Button.Y); break;\r\n        }\r\n    }\r\n    else if (ev.Type == Sdl.EventType.KeyDown)\r\n    {\r\n        var key = KeyboardUtil.ToXna(ev.Key.Keysym.Sym);\r\n        if (!_keys.Contains(key))\r\n            _keys.Add(key);\r\n        Game.KeyEventCB?.Invoke(key, true, ev.Key.Repeat > 0);\r\n        ...\r\n    }\r\n    else if (ev.Type == Sdl.EventType.KeyUp)\r\n    {\r\n        var key = KeyboardUtil.ToXna(ev.Key.Keysym.Sym);\r\n        _keys.Remove(key);\r\n        Game.KeyEventCB?.Invoke(key, false, ev.Key.Repeat > 0);\r\n        ...\r\n    }\r\n    ...\r\n}\r\n```\r\n","And can someone change the title to say \"does not work correctly\" please.","@tomspilman @harry-cpp API change proposal for mouse-button events.\r\n\r\nProblem statement\r\nThe current Mouse.GetState() is inadequate for mouse devices that allow for sub-frame presses and releases such as Mac TouchPads.\r\n\r\nProposed change\r\nAdd two event handlers to the game window for button presses and releases. The parameters to these events to include:\r\n- Button (left, right, middle, x1 and x2)\r\n- Game window coordinates\r\n\r\nAs the problem has only been reported for Mac TouchPads, I'm suggesting that the change is only added to the DesktopGL version of MonoGame. There's a trade-off between maintaining API consistency and adding complexity to the Windows API where it's not needed. I'm happy to add handlers for the Windows API if that's the consensus.","@AidanMcK Did you also find Mouse.GetState() inadequate for mouse motion and mouse wheel? Or did you change all your input handling to be event-driven?","Do we have this same polling problem for all inputs? Should we have a broader solution that can handle keyboard events as well?","@HaikuJock  I use events entirely for the Mac versions only.","@jnoyola The problem comes from the fact that you can do stuff like touch to click, and it just sends both a mouse down and mouse up event, so you can't really catch it.\r\n\r\nAll XNA games will miss it, and probably a lot of other stuff miss it as they are not designed to catch it in any way.","A button has inertial that put a limit on how fast it can change state. There are other factors that put extra delay like polling by mouse microprocessor, usb polling, etc. \r\nEven when a button in directly connected to an input\/interrupt line,  you get a capacitor in-parallel to prevent multiple signals from sparks. That also put a delay on how fast a button can change to Released state.\r\n\r\nThe touchpad driver probably sends a Pressed msg followed by Released msg without any delay.\r\nThat fools most programs but it's not a good simulation of a button. \r\n\r\nYou can simulate that inertia in MG by keeping a timestamp of the last Press event.\r\nin GetState you return Pressed either if the last event was pressed or if the last timestamp is not older than ,say, 20ms.","> You can simulate that inertia in MG by keeping a timestamp of the last Press event.\r\n> in GetState you return Pressed either if the last event was pressed or if the last timestamp is not older than ,say, 20ms.\r\n\r\nThat would make an input delay, but that is a wonderful idea, it just needs a small tweek!\r\n\r\nAll we have to do is check SDLs timestamps when we receive [MouseButtonEvent](https:\/\/wiki.libsdl.org\/SDL_MouseButtonEvent) during our [SdlRunLoop](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Platform\/SDL\/SDLGamePlatform.cs#L101), and if the interval is small enough, we mark the button as Pressed until next SdlRunLoop.\r\n\r\nWe don't care about previous or next invocations of SdlRunLoops as the issue can only occur during single pass of SdlRunLoop where it receives both a Pressed and Released signals in a row.\r\n\r\nUnless you are using touch to click it will not create an extra Release event.\r\n\r\nI'll make a PR for this tomorrow (I do use a mac btw.).","About the event based API, will the events fire from another thread or get queued and fire in succession before each frame\/update()? \r\nEither way it's not a clean-cut solution for the end user. All it does is to expose the events and let the user solve the problem.\r\n\r\nA simple implementation like the one below will fail on a mac trackpad for the same reasons.\r\nWindow.LeftButtonInput += (s,e) => { spaceShip.Engine.Enable = (e == ButtonState.Pressed); }\r\n\r\nThe user will have to set a boolean and clean it on each frame to solve the problem of trackpad.\r\nBasically adding a one-frame-lag between press\/release.\r\nWindow.LeftButtonInput += (s,e) => { fireEngines = (e == ButtonState.Pressed); }\r\nbool fireEngines = false;\r\nUpdate()\r\n{\r\n    spaceShip.Engine.Enable = fireEngines;\r\n    fireEngines = false;\r\n}\r\n","@nkast Yes, the event-based API is not ideal and requires more work on the user's part.\r\nI think what yourself and @harry-cpp have come up with is a better solution.\r\nIf that doesn't work another option would be to capture the finger touch events, send the finger events to TouchPanel and add two new gesture-types to TouchPanel: TwoFingerTap and ThreeFingerTap. (EDIT: Or add a button identifier to GestureSample)"],"labels":["MacOS","Input"]},{"title":"[Android] Can't load any ETC1 textures","body":"On latest develop, I can't get any ETC1 compressed textures to load.\r\n\r\nIf there is no mipmap, it fails here: https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Content\/ContentReaders\/Texture2DReader.cs#L74\r\n\r\n... with a \"can't read behind end of stream\" error (levelCount, height and width are read correctly).\r\n\r\nIf there are mipmaps, it fails here: https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Graphics\/Texture2D.cs#L377\r\n\r\nI think it's related to #5983 (or possibly its cause\/consequence).\r\n\r\n@dellis1972 @KonajuGames  would you have any suggestion on where to look? (I believe it happened on late OpenTK versions too.)\r\n\r\n","comments":["@mrhelmut I think @KonajuGames will need to take a look at this one. ","Setting the data with ```CompressedTexImage2D``` instead of ```CompressedTexSubImage2D``` works. Most probably a parameter issue.\r\n\r\nEDIT: I may be wrong, but could it be possible that ETC1 doesn't support ```CompressedTexSubImage2D``` on some hardware?","Confirmed, it works on another Android device.\r\n\r\nIs there any way to fallback to ```CompressedTexImage2D``` when ```rect``` is the full texture?","> Is there any way to fallback to CompressedTexImage2D when rect is the full texture?\r\n\r\nYeah, that would be better. That's already done when the overload without a rect is called, but if you use the overload with a rectangle and pass null for it or the rect for the full texture, it does a `*TexSubImage2D` call.","Fixing that right now along with falling back to 16-bit textures when not able to process into ETC1. Also found some other issues, like `ContentLoadException` being silently consumed and results in the app stuck in an endless loop of trying to load content and failing.","Writing a bunch of unit tests for this.  It's after 3am now, so I have to get some sleep. Will finish this tomorrow night.","Please have some rest! Thank you for taking a look at this!"],"labels":["Android","ContentPipeline"]},{"title":"IOS MediaPlayer ands playing song when AVPlayer finishes","body":"1) Use MediaPlayer.Play() to play some longer song\r\n2) Create AVPlayer, use it to play some shorter video\r\n3) When AVPlayer reaches the end of video, song also stops playing\r\n\r\nAs far as I can say based on source code, Monogame Song reacts to ObserveDidPlayToEndTime notification even if it was issued for some different AVPlayerItem.  Problem is in MonoGame.Framework\/Media\/Song.IOS.cs , method PlatformInitialize() when creating observer for notification\r\n","comments":[],"labels":["iOS","Audio"]},{"title":"Support MediaPlayer.GetVisualizationData","body":"[![IMAGE ALT TEXT HERE](https:\/\/img.youtube.com\/vi\/F_7IO4C4Xk4\/0.jpg)](https:\/\/www.youtube.com\/watch?v=F_7IO4C4Xk4)\r\n(prototype video)\r\n\r\nI recently used ActionScript 3.0 to prototyped an audio visualizer background for my game.\r\nI want to implement the contents of the above video.\r\nSo, I asked the community how to can implement this in Monogame.\r\n\r\nJjagg responded to this.\r\n>XNA can  be implemented using **MediaPlayer.GetVisualizationData**,\r\n>but not yet implemented in Monogame.\r\n\r\nDoes the Monogame team have a specific plan to implement this?\r\nI really need this feature.\r\n\r\nthanks","comments":[],"labels":["Feature Request"]},{"title":"Incorrect resolution values being returned on my new 4K monitor","body":"OK, so this is a fun mysterious one. I bought a new 4K monitor and am having very weird results as far as what XNA says my resolution is.\r\n\r\n**In Windowed Mode:**\r\nWindows OS says my display resolution is 3840 x 2160\r\nOur game, however, says my OS resolution is 2560x1440!\r\nThe game says the client window is 2560x1377\r\nA screenshot taken of the windowed mode game comes out at 3840x2160\r\n\r\n**I am using these two values to get the information from in the code:**\r\ngame.Window.ClientBounds.Height\r\nGraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height\r\n\r\nI've shared a screenshot containing all of the windows in question and the resolutions. The interesting thing is my co-developer has a 4K monitor as well, same resolution, but does not have this issue in windowed mode. It all comes out correct. To top it off, if you go into full screen mode, the values are all exactly right.\r\n\r\n![screenresolutionhell](https:\/\/user-images.githubusercontent.com\/31192691\/30791405-c9f04940-a177-11e7-98d7-d3c6ba10df53.jpg)\r\n\r\n\r\n\r\n","comments":["Even this is giving me the wrong resolution. \r\nSystem.Windows.Forms.Screen.PrimaryScreen.Bounds;\r\n\r\nSomething wacky is afoot. I don't think it's monogame so not sure if this is even appropriate now.","> Something wacky is afoot.\r\n\r\nBy default MG and XNA titles are not \"dpi aware\".  You have to opt in by a Win32 call and\/or the app manifest:\r\n\r\nhttps:\/\/msdn.microsoft.com\/en-us\/library\/windows\/desktop\/aa374191(v=vs.85).aspx\r\n\r\n\r\n@KonajuGames @dellis1972 @Jjagg @cra0zy - Should we just force MG to always be DPI aware?  4k systems are becoming more common and likely games just need to deal with it.","IMO the manifest in the templates is enough.","The manifest should be enough, but I'm going to give this some test anyway.\r\n\r\nI've been using the manifest in the template to work with DPI awareness and it worked quite well so far. But recently we started to received reports of DPI awareness being broken on Windows 10 while we didn't update the game (and it previously worked on Win10). I don't know if it's a problem specific to Windows 10 Creator Update (or a more recent update) or a problem on the user side. I need to investigate.\r\n\r\nEDIT: bingo, latest Win10 versions (post 1703) require additional manifest entries. See section ```dpiAware``` and ```dpiAwereness``` in the manifest documentation.\r\n\r\nThis should be changed in manifests (I can't setup a PR for now):\r\n\r\n```\r\n<asmv3:application>\r\n  <asmv3:windowsSettings>\r\n    <dpiAware xmlns=\"http:\/\/schemas.microsoft.com\/SMI\/2005\/WindowsSettings\">true\/pm<\/dpiAware> <!-- legacy -->\r\n    <dpiAwareness xmlns=\"http:\/\/schemas.microsoft.com\/SMI\/2016\/WindowsSettings\">permonitorv2,permonitor<\/dpiAwareness> <!-- falls back to pm if pmv2 is not available -->\r\n  <\/asmv3:windowsSettings>\r\n<\/asmv3:application>\r\n```\r\n","Thanks for jumping on this. I'll see how this helps out! If MonoGame did have it built in without manifest tweaking, that would certainly resolve what I suspect might eventually become a constant issue as more 4k monitors roll out as the norm instead of the exception. In the meantime, I'll see if this helps resolve that issue.","> IMO the manifest in the templates is enough.\r\n\r\nI'm just concerned it is easy to miss...  if we want to support it by default then maybe forcing it in code is best.\r\n\r\n\r\n> EDIT: bingo, latest Win10 versions (post 1703) require additional manifest entries. \r\n\r\n@mrhelmut - Should we just make MG on Windows always be dpi aware by calling the Win32 APIs that enable it?  The manifest seems easy to forget or not notice.","> @mrhelmut - Should we just make MG on Windows always be dpi aware by calling the Win32 APIs that enable it? The manifest seems easy to forget or not notice.\r\n\r\nAnother option is to include it in nuget package and add .targets file to import it into the project in case it does not already exist.","I created the manifest and the manifest already had the DPI awareness set to true. It did not change the outcome. I verified the manifest was deploy in the same folder. The biggest thing I am noticing is this:\r\n\r\n            DisplayModeCollection o = GraphicsAdapter.DefaultAdapter.SupportedDisplayModes;\r\n            DisplayMode dm = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode;\r\n\r\nWhen I compare my current display mode to the list of available ones, my current display mode does not exist in the collection. My new monitor is magical.","@AgisisTheCoder - Is this Win10?  Did you also set the second `<dpiAwareness>` setting which is required on the latest versions of Win10?  Look at the post by @mrhelmut above.","> @mrhelmut - Should we just make MG on Windows always be dpi aware by calling the Win32 APIs that enable it? The manifest seems easy to forget or not notice.\r\n\r\nI think that the manifest is convenient to allow developers to control the DPI awareness, though I never saw a game not being DPI aware.","Good News: It's working now. Somehow when it moved the manifest over to the debug folder, it had left that section commented out and I didn't notice it. I just recreated it anew and it wasn't commented out this time. It worked perfectly, completely solving the issue.  Thanks so much guys. As always, you are top notch in responding!","I'd also like to add that I had a different problem on a crappy laptop with a weird resolution. In full screen mode, it would stretch. This DPIAware\/DPIAwareness setting completely resolved that issue too. Did I mention that the game also looks crisper? Thanks again!","@AgisisTheCoder - Thanks for reporting back your results.  Good to know that solves it.\r\n\r\n@mrhelmut - I think maybe we should just take the option away from the developer here.  MG games should always be DPI aware no matter what... they are games after all and resolution matters.","@tomspilman I believe that you are right, and doing it with the Win32 API is most probably more future proof than a manifest if Microsoft breaks again backward compatibility.","@mrhelmut thank you for the updated manifest!\r\n\r\nFor current manifest solution, it would be very helpful if this was described in MG documentation. Maybe under Platform-Specific Notes? Especially since new Windows builds can require manifest updates.","@mrhelmut @tomspilman will this affect DesktopGL too?","Yes, both the manifest or the Win32 API call works on DesktopGL.","Maybe Monogame could, in debug mode only, to inform the developer that it is running at a screen resolution that would require to set up the DPI configuration, and let the developer choose the best way to do it, either by manifest or win32 call","I would say that MonoGame must always be DPI-aware from now on.  There is no correct situation where an application should refuse to be DPI-aware these days, even when running on \"normal\" resolutions.  External manifests are more for adding these new features to existing applications that don't use the correct APIs, and results in one more file to deploy and one more file to potentially go missing and then bad things happen.  We should use the Windows API to enable DPI support.","How exactly is DPI-awareness surfaced to the game developer? I am using the preview version of 3.8, the manifest is there, yet `Window.ClientBounds` and `GraphicsAdapter.DefaultAdapter.CurrentDisplayMode` still report the scaled resolution, not the native resolution of the display in both DesktopGL and WindowsDX."],"labels":["Windows","Windowing"]},{"title":"VideoPlayer poor performance and unusually high memory usage","body":"So I mainly develop from my desktop PC so sometimes there are things that slip past me due to the hardware difference. I wanted to support lower end hardware since the game itself is simple enough to do so. While the game runs fine, VideoPlayer lags to the point where the video is not only out of sync but often missable due to how many frames are dropped.\r\n\r\nNot sure what the issue is though, I did notice CPU usage going up a bit, memory seems to be going up constantly each time the video runs (sometimes crashing after a few times) and this happens on both desktop and laptop. My game normally sits around 100mb - 150mb range max but letting a video (even if it is the same one) play over and over again can increase the memory usage to around 1gb after a minute of testing.\r\n\r\nThis is being tested on a Windows DX project, both testing platforms running Windows 10.","comments":["I noticed the CPU\/memory issue as well. I created a test project that loads a video and lets you toggle between Play\/Stop: https:\/\/drive.google.com\/file\/d\/0B9OprX_2DQFESWFLR2dwSllBVGs\/view?usp=sharing\r\n\r\nIf you use the diagnostics in Visual Studio you'll see memory usage climb every time you Play() the video. However, taking a snapshot shows nothing new being created. I'm stumped. The project also lets you dispose, unload, garbage collect, and recreate the video & player, to showcase that it doesn't change anything.\r\n\r\nAll that I've gathered so far is that when a video is played for the first time, a `Media.VideoSampleGrabber` is made for it and kept. It persists even after the video is disposed \/ unloaded. Additional `VideoSampleGrabbers` aren't created when the same video is played again though (unless you unload and reload the video) so I'm not sure why memory increases on every Play(). Maybe there are two bugs here.\r\n\r\nEither way it's pretty problematic for games with videos. Even if a video is only played once, the memory is never freed up, which can cause issues for long play sessions that have multiple videos throughout.","I have a pending PR that fixes a load of video player issues in DirectX.\nYour description here actually gave me an idea of how to fix a bug I have\nin that PR when multiple videos are played at the same time.\n","I tested your branch back on September 9th (I talked with Jjagg about this on Gitter that day) and I was having the same memory issues. I might have been using an old version, but I don't think I was.\r\n\r\nCould you give that test project a shot and see if you're seeing the same issue? (Or just load and play\/stop a video if you don't feel like downloading the project.) I've tested on two separate PCs with the same result.\r\n\r\n","hi, any update. i've same result on desktop and laptop. thanks.","No update that I'm aware of. ","I am testing video with MonoGame 3.5 and seems that it starts to choke with medium & large filesizes, image stutters or causes the computer to freeze and audio is getting cutoff","Any update about this issue?I Have met the same memory problem."],"labels":["Performance","Video"]},{"title":"VideoPlayer DirectX - DllNotFound MediaFoundation (missing mf.dll)","body":"We've had several complaints from users that their application cannot find mf.dll. Our game uses the DirectX backend. We've found that our users can install this on Windows 10 to fix the issue:\r\n\r\nhttps:\/\/support.microsoft.com\/en-us\/help\/4016817\/media-feature-pack-for-n-edition-of-windows-10-version-1703-april-2017\r\n\r\nGenerally our players crash when trying to play our intro cinematic in the VideoPlayer. Is it possible for us to ship with this dependency, or for it to be included in standard MG DX builds?\r\n\r\n(NOTE: If this is just something we have to require our users to install on their system, then this may not be a bug at all).","comments":["> We've found that our users can install this on Windows 10 to fix the issue:\r\n\r\nYeah... so some systems might never had this dependency installed.  So some crash and others just work.\r\n\r\n\r\n> be included in standard MG DX builds?\r\n\r\nI don't think we can do that.  My guess is that this mf.dll has to be installed into the OS with a bunch of registry junk to work.  We likely cannot just add this DLL into the C# project at build time.\r\n\r\nSo i don't think we can do that specifically.\r\n\r\nHowever we could possibly protect against the crash and throw something reasonable that the game code can handle and\/or maybe show an appropriate error message.\r\n\r\nIn fact you can likely do this yourself now... catch the exception that occurs in your game code and pop up a dialog leading them to where to download this dependency.\r\n\r\nAnother approach for MG is to drop the Windows OS video player for our own which we can redistribute.  I forget if this has been discussed before.\r\n\r\nStill at the very least the MG docs should be updated to alert developers that this is a dependency for using the Video Player on Windows.\r\n\r\n> Is it possible for us to ship with this dependency, \r\n\r\nI am unsure.  Because it seems like there isn't just one dependency to ship here and it may need different ones depending on OS version:\r\n\r\nhttps:\/\/support.utomik.com\/hc\/en-us\/articles\/115003677505-A-game-asks-me-to-install-Media-Feature-Pack-WMVCore-dll\r\n\r\nIt suggest the better thing is to redirect users to your own landing page that points to the correct installer to run.\r\n\r\n\r\n\r\n","> Still at the very least the MG docs should be updated to alert developers that this is a dependency for using the Video Player on Windows.\r\n\r\nI would be fully okay with closing this issue and amending the documentation to include mention of this.\r\n\r\nI was a little afraid that it would be the sort of thing that is required to be installed on their system. That makes sense, given what the user-facing solution is.\r\n\r\nI'm mainly logging this issue here to aid the google searches of future developers.","I have a pending documentation update that is mentionning this: #4430\r\n\r\nBecause the license of Windows Media Player doesn't allow to ship this dependency with other software, the best you can do is to detect the presence of the media feature pack through registery keys and prompt the player to download it manually if it isn't installed: https:\/\/github.com\/MonoGame\/MonoGame\/pull\/4430\/files#diff-8dc49b1ae8de8e9bbca27d3fe4787a20R10","I keep wondering if we're better off supporting some other open source video player library, but i know other AAA engines still use platform specific video players by default.\r\n\r\nI think the best bet is to document things and throw a good exception in the `VideoPlayer` constructor if we cannot initialize the video playback system on the platform.  This allows games to capture the exception then continue without video and\/or forward players to an appropriate support page with details on how to address the issue.","Isn't any C# solution for FFMPEG? I think that'd work for most platforms"],"labels":["Windows","DirectX","Help Wanted","Video"]},{"title":"Strange problems with full-screen using latest development build (3.7.0.849) - DirectX","body":"Today I updated from the previous version of MonoGame I was using, which was either the 3.6 stable build or some development build between then and now, and ran into serious problems with full-screen that weren't there before.\r\n\r\nHere's an example Game1.cs file that illustrates the problems:\r\n\r\n    using Microsoft.Xna.Framework;\r\n    using Microsoft.Xna.Framework.Graphics;\r\n    using Microsoft.Xna.Framework.Input;\r\n\r\n    namespace Example\r\n    {\r\n        public class Game1 : Game\r\n        {\r\n            public const int HorizontalResolution = 128;\r\n            public const int VerticalResolution = 96;\r\n            public const int ResolutionScale = 8;\r\n\r\n            GraphicsDeviceManager graphics;\r\n            SpriteBatch batch;\r\n\r\n            RenderTarget2D renderTarget;\r\n            Rectangle renderTargetDestination;\r\n            Color renderTargetColor = new Color(255, 255, 255);\r\n\r\n            Texture2D pattern;\r\n\r\n            public Game1()\r\n            {\r\n                graphics = new GraphicsDeviceManager(this);\r\n                Content.RootDirectory = \"Content\";\r\n\r\n                graphics.PreferredBackBufferWidth = HorizontalResolution * ResolutionScale;\r\n                graphics.PreferredBackBufferHeight = VerticalResolution * ResolutionScale;\r\n\r\n                graphics.IsFullScreen = true;\r\n            }\r\n\r\n            protected override void Initialize()\r\n            {\r\n                renderTarget = new RenderTarget2D(GraphicsDevice, HorizontalResolution, VerticalResolution);\r\n\r\n                \/\/Create new texture with pattern to make any aspect ratio distortion noticeable\r\n                pattern = new Texture2D(GraphicsDevice, HorizontalResolution, VerticalResolution);\r\n                Color[] data = new Color[HorizontalResolution * VerticalResolution];\r\n                for (int i = 0; i < data.Length; i++)\r\n                    data[i] = (i % 2) == (i \/ HorizontalResolution) % 2 ? Color.Gray : Color.LightGray;\r\n                pattern.SetData(data);\r\n\r\n                base.Initialize();\r\n\r\n                renderTargetDestination = new Rectangle(0, 0, GraphicsDevice.PresentationParameters.BackBufferWidth, \r\n                    GraphicsDevice.PresentationParameters.BackBufferHeight);\r\n            }\r\n\r\n            protected override void LoadContent()\r\n            {\r\n                batch = new SpriteBatch(GraphicsDevice);\r\n\r\n            }\r\n            protected override void Update(GameTime gameTime)\r\n            {\r\n                if (Keyboard.GetState().IsKeyDown(Keys.Escape) ||\r\n                    GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed)\r\n                    Exit();\r\n\r\n                base.Update(gameTime);\r\n            }\r\n\r\n            protected override void Draw(GameTime gameTime)\r\n            {\r\n                GraphicsDevice.SetRenderTarget(renderTarget);\r\n\r\n                GraphicsDevice.Clear(Color.CornflowerBlue);\r\n\r\n                batch.Begin();\r\n\r\n                batch.Draw(pattern, Vector2.Zero, Color.White);\r\n\r\n                batch.End();\r\n\r\n                GraphicsDevice.SetRenderTarget(null);\r\n\r\n                GraphicsDevice.Clear(Color.CornflowerBlue);\r\n\r\n                batch.Begin(samplerState: SamplerState.PointClamp);\r\n\r\n                batch.Draw(renderTarget, renderTargetDestination, renderTargetColor);\r\n\r\n                batch.End();\r\n\r\n                base.Draw(gameTime);\r\n            }\r\n        }\r\n    }\r\n\r\nThis code does not work at all. At a <code>ResolutionScale<\/code> of 8, the height of the backbuffer should exactly match the vertical resolution of my screen (which has a resolution of 1366 by 768; a scale of 8 should lead to a back buffer size of 1024 by 768), the game displays incorrectly, with visible distortion in the checker pattern and both letter- and pillar-boxes surrounding the image.\r\n\r\nThings change when I move the lines that set the back buffer size to the <code>Initialize<\/code> method, but they don't really get better. Here's the code with that change:\r\n\r\n    using Microsoft.Xna.Framework;\r\n    using Microsoft.Xna.Framework.Graphics;\r\n    using Microsoft.Xna.Framework.Input;\r\n\r\n    namespace Example\r\n    {\r\n        public class Game1 : Game\r\n        {\r\n            public const int HorizontalResolution = 128;\r\n            public const int VerticalResolution = 96;\r\n            public const int ResolutionScale = 8;\r\n\r\n            GraphicsDeviceManager graphics;\r\n            SpriteBatch batch;\r\n\r\n            RenderTarget2D renderTarget;\r\n            Rectangle renderTargetDestination;\r\n            Color renderTargetColor = new Color(255, 255, 255);\r\n\r\n            Texture2D pattern;\r\n\r\n            public Game1()\r\n            {\r\n                graphics = new GraphicsDeviceManager(this);\r\n                Content.RootDirectory = \"Content\";\r\n            }\r\n\r\n            protected override void Initialize()\r\n            {\r\n                renderTarget = new RenderTarget2D(GraphicsDevice, HorizontalResolution, VerticalResolution);\r\n\r\n                \/\/Create new texture with pattern to make any aspect ratio distortion noticeable\r\n                pattern = new Texture2D(GraphicsDevice, HorizontalResolution, VerticalResolution);\r\n                Color[] data = new Color[HorizontalResolution * VerticalResolution];\r\n                for (int i = 0; i < data.Length; i++)\r\n                    data[i] = (i % 2) == (i \/ HorizontalResolution) % 2 ? Color.Gray : Color.LightGray;\r\n                pattern.SetData(data);\r\n\r\n                base.Initialize();\r\n\r\n                graphics.PreferredBackBufferWidth = HorizontalResolution * ResolutionScale;\r\n                graphics.PreferredBackBufferHeight = VerticalResolution * ResolutionScale;\r\n\r\n                graphics.IsFullScreen = true;\r\n\r\n                graphics.ApplyChanges();\r\n\r\n                renderTargetDestination = new Rectangle(0, 0, GraphicsDevice.PresentationParameters.BackBufferWidth, \r\n                    GraphicsDevice.PresentationParameters.BackBufferHeight);\r\n            }\r\n\r\n            protected override void LoadContent()\r\n            {\r\n                batch = new SpriteBatch(GraphicsDevice);\r\n\r\n            }\r\n            protected override void Update(GameTime gameTime)\r\n            {\r\n                if (Keyboard.GetState().IsKeyDown(Keys.Escape) ||\r\n                    GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed)\r\n                    Exit();\r\n\r\n                base.Update(gameTime);\r\n            }\r\n\r\n            protected override void Draw(GameTime gameTime)\r\n            {\r\n                GraphicsDevice.SetRenderTarget(renderTarget);\r\n\r\n                GraphicsDevice.Clear(Color.CornflowerBlue);\r\n\r\n                batch.Begin();\r\n\r\n                batch.Draw(pattern, Vector2.Zero, Color.White);\r\n\r\n                batch.End();\r\n\r\n                GraphicsDevice.SetRenderTarget(null);\r\n\r\n                GraphicsDevice.Clear(Color.CornflowerBlue);\r\n\r\n                batch.Begin(samplerState: SamplerState.PointClamp);\r\n\r\n                batch.Draw(renderTarget, renderTargetDestination, renderTargetColor);\r\n\r\n                batch.End();\r\n\r\n                base.Draw(gameTime);\r\n            }\r\n        }\r\n    }\r\n\r\nA scale of 8 seems to display correctly. But with this new change, at a scale of 8, the mouse suddenly becomes visible when I move it to the left edge of the screen, and if I click there, the full-screen window is minimized to show whatever other program I have open. And the smaller the resolution scale, the higher the percentage of area of the game buffer that will inexplicably show the mouse.\r\n\r\nAnd, for the icing on the cake, my computer threw up a blue error screen and restarted not once, but _twice_ while running the program.\r\n\r\nI uninstalled the newly installed version of MonoGame, downloaded the 3.6 stable build instead, and installed that. With the stable 3.6 build, the second code example works exactly as expected, with no issues. The first example results in the image being stretched to fit the whole screen instead of remaining at a 4:3 aspect ratio. Neither example exhibits the strange mouse bug when using the stable 3.6 build.","comments":[],"labels":["DirectX"]},{"title":"Feature Request: ContentSerializerCollection attribute","body":"At the moment, any ContentSerializerAttribute that is applied to a collection will effect only the collection itself, not any items inside it<sup>1<\/sup>. For most of the attribute's effects, this isn't a huge deal; however, the only way<sup>2<\/sup> to serialize a collection of shared resources to allow cyclic references is to [derive a class from the collection and roll your own ContentTypeSerializer](https:\/\/blogs.msdn.microsoft.com\/shawnhar\/2008\/11\/20\/serializing-collections-of-shared-resources\/), as well as a [ContentTypeReader and ContentTypeWriter to deploy it as an XNB](https:\/\/blogs.msdn.microsoft.com\/shawnhar\/2010\/09\/28\/serializing-collections-of-shared-resources-part-2\/).  This is a complicated solution to what I'd imagine must be a common problem, and it requires adding a reference to the Monogame.Framework.Content.Pipeline dll<sup>3<\/sup>; it also hides the base collection's constructors, along with all the other<sup>4<\/sup> inconveniences of a derived class.\r\n\r\nI'd like to see a [ContentSerializerCollection] attribute which accepts either a ContentSerializerAttribute or simply shares properties with the same, and when applied to a generic Collection, applies that attribute \/ those properties to the items within the collection.  \r\n\r\n<sub>alternatively, we could just make a [SharedResourceCollection] attribute and get most of the value of this, but doing the more robust solution seems better.<\/sub>\r\n\r\n<sub>also a possibility: adding a Recurse property to the ContentSerializerCollectionAttribute to apply itself to nested collections<\/sub> \r\n\r\n<sup>1<\/sup>CollectionItemName excluded, of course.\r\n<sup>2<\/sup>unless I'm missing something, which is entirely possible\r\n<sup>3<\/sup>which yes, isn't really that big a deal, but I added a reference to the one installed on my computer rather than the portable one and was super confused when it wouldn't load on android, so I'm frustrated with it being necessary at the moment.\r\n<sup>4<\/sup>admittedly, minor","comments":[],"labels":["Feature Request"]},{"title":"In the Pipeline tool, in the Project tree, pressing the menu key should open the context menu","body":"In most apps, pressing the Menu key (this thing: https:\/\/en.wikipedia.org\/wiki\/Menu_key) opens a context menu when it's available. This should happen in the Pipeline tool also, to make keyboard navigation smoother.","comments":["I attempted getting this to work. I tried:\r\n\r\nIn Pipeline.Windows\\Controls\\ProjectControl.xwt.cs:\r\n- On line 68, add a line: `_treeView.KeyReleased += Handle_KeyReleased;`\r\n- On line 154, add lines:\r\n```\r\n        private void Handle_KeyReleased(object sender, KeyEventArgs e)\r\n        {\r\n            if (e.Key == Key.Menu)\r\n            {\r\n                if (_showContextMenu && _contextMenu.Items.Count > 0)\r\n                    _contextMenu.Show(_etoView);\r\n            }\r\n        }\r\n```\r\n- Set a breakpoint on the Handle_KeyReleased event.\r\n\r\nAfter doing the above, no event was fired when pressing the \"Menu\" key on my keyboard. However, events did fire for other keys on the keyboard.\r\n\r\nSo maybe this is an upstream problem, where the KeyReleased event isn't being fired for Menu button presses?"],"labels":["Feature Request"]},{"title":"VideoPlayer.GetTexture() and VideoPlayer.Stop() crash in UWP Projects","body":"Occurs when running UWP project on Xbox and Windows. Haven't tested other platforms. Non-UWP Windows project executes these methods without issue. Error messages below.\r\n\r\n**VideoPlayer.GetTexture()**\r\nException thrown: 'SharpDX.SharpDXException' in SharpDX.dll\r\nAn exception of type 'SharpDX.SharpDXException' occurred in SharpDX.dll but was not handled in user code\r\nHRESULT: [0x80070057], Module: [General], ApiCode: [E_INVALIDARG\/Invalid Arguments], Message: The parameter is incorrect.\r\n\r\n**VideoPlayer.Stop()**\r\nAn exception of type 'SharpDX.SharpDXException' occurred in SharpDX.dll but was not handled in user code\r\nHRESULT: [0x80070057], Module: [General], ApiCode: [E_INVALIDARG\/Invalid Arguments], Message: The parameter is incorrect.","comments":["Are you using a develop version of MG? ","I'm using version 3.6.0.1625. If I recall correctly I installed it through the link on http:\/\/www.monogame.net\/2017\/03\/01\/monogame-3-6\/ so I don't believe it's a develop version.","VideoPlayer.GetTexture()\r\nI found this to be a common problem especially the faster the video frame rate is for the video.\r\nI got videos that would crash with the texture error to work... by running them thru ffmpeg and slowing down the frame rate and reducing the quality.","I've hit this issue also, the audio plays, but trying to retrieve the texture with the GetTexture() method crashes the app.","Is there a workaround?","I'm also having this issue.\r\n@willmotil: what are the target frame rates and resolutions you got to work?","I also have this issue. It works fine in 3.6.0.1625, but when using the latest release (or development branch), i get an object not set to an instance exception when getting the texture (getTexture()) - This is a show stopper for my project, and 3.7 fixes some other issues that are show-stopper for my project in 3.6 - Is MonoGame dying, or are the list of high-priority issues just so long, since it isn't fixed? (I'd gladly contribute, but i don't think that i have the skills) - Don't get me wrong, i LOVE monogame, but if critical bugs like this aren't fixed fast, i will have to consider using something else for my projects.","I think I found the cause:\r\n\r\nChanging VideoPlayer.WME.cs:83\r\nfrom\r\n_mediaEngine.TransferVideoFrame(_lastFrame._texture, null, region, null);\r\nto\r\n_mediaEngine.TransferVideoFrame(_lastFrame.GetTexture(), null, region, null);\r\n\r\nFixes the Problem for me.\r\n\r\nTwo sideeffects \/ still present bugs:\r\n* you need to manually dispose of the returned Texture2D after drawing or my app uses 2GB of memory after 10 seconds\r\n* I need to wait 500 ms or a couple of updates or I will get exception 0xC00D4E26 (MF_E_NO_VIDEO_SAMPLE_AVAILABLE)\r\n\r\nI'm not sure why there is a new Texture created every call, but the Exception should be caught and a Null Texture returned, like the comment says.\r\n\r\n(Sorry for posting a patch here, but I don't really create a fork and a pull request for this one-liner)","@Belkaar that is definitely not the right fix. ","In version 3.6, you also need to dispose the texture2d you get from VideoPlayer.GetTexture(), or you will end up using all memory on your gfx card in matter of seconds. That was not the case in XNA 4, don't know why there is this difference, but its not a huge issue to me, i just call videoTexture.dispose() when im done with the drawing.\r\n\r\nBy the way: in addition to the title \"VideoPlayer.Stop()\" crash the player... \r\n\r\n1. \"VideoPlayer.Resume()\" also crash the player, after calling \"VideoPlayer.Pause()\"...  \r\n2. \"VideoPlayer.IsLooping\" throws an \"Not Implemented Exception\"\r\n3. When the video ends, the MG framework crashes (and stops rendering) without any exception.\r\n4. And....\r\nI see huge frame-drops in my 3d scene when the video player is running. (even if i don't use GetTexture() - In other words, the VideoPlayer is just playing, but im not using it.) The scene i render, can easily render with 5000 fps on my pc, when disabling vsync and fixedtime (with VideoPlayer running, and GetTexture() getting called every frame), but still i get frame-drops (lags spikes) as soon the player is \"playing\", if i stop the player, everything runs smooth.\r\n\r\nSeems that VideoPlayer could use some serious attention.\r\n\r\nAgain, i'd be happy to contribute - but i have nothing to contribute with (other than feedback and test)\r\n","Sorry i didnt see this before. I haven't messed with video in a long time now and my old videoplayer app throws errors soo anyways. \r\n\r\nEdit: ok so i rebuilt my old app and got it working now. If i remember right with the below command sequence... what matters is mainly this line.  libx264 -profile:v main -level:v 3.0 -ab 84k.\r\n264 is of course H264. The profile you use matters baseline is supposed to work on everything but for some reason the main profile worked better. Now the next 3 lines are all exclusive trade offs basically.\r\n84k -vf fps=32 -s 450x300 ... the resolution of the video can be whatever 84 is the baud rate or bandwidth if you like. The higher the better the quality on both, fps is the thing though, your framerate in game shouldn't be higher then the fps you plan to play the video at it in fact it should be lower.\r\nThe higher you up it though the better and the more chance it will time out. The video player class is not easy to understand and the last update was a year ago, its terribly fragile too boot.\r\n\r\nYou can take a look at this to help you understand it a bit better about whats involved but you can basically optimize your videos with ffmpeg to monogame. \r\n\r\nhttps:\/\/slhck.info\/video\/2017\/03\/01\/rate-control.html.\r\n\r\nYou can fire up ffmpeg and toss some commands at it. \r\n    https:\/\/www.ffmpeg.org\/download.html\r\nsetting its path\r\n    http:\/\/www.nerdfirst.net\/getting-started-with-ffmpeg\/\r\nreferences\r\n      https:\/\/ffmpeg.org\/documentation.html\r\n      https:\/\/www.ostechnix.com\/20-ffmpeg-commands-beginners\/\r\n\r\n**This is the ffmpeg command sets i used to use for most of my file conversions.**\r\n\r\nFFmpeg ExecuteCommand\r\n\r\nffmpeg -y -i \"C:\\Users\\Me\\Documents\\Video\\test.mp4\" -c:v libx264 -profile:v main -level:v 3.0 -ab 84k -vf fps=32 -s 450x300 -c:a copy \"C:\\Users\\Me\\Documents\\Video\\Output\\test.mp4\"\r\n\r\n_(really its cmd\/c at the start but i feed that in seperate really i break up all the parts)_\r\n\r\n**Here is how i pass commands to ffmpeg thru monogame this is the main call basically.**\r\n\r\n```\r\n\r\n        public void ExecuteCommandSync(string command)\r\n        {\r\n            Console.WriteLine(\"\\n FFmpeg ExecuteCommandSync: \\n\");\r\n            Console.WriteLine(\"command: \\n\"+ command +\"\\n\");\r\n            try\r\n            {\r\n                \/\/ Create the ProcessStartInfo using \"cmd\". and use \"\/c \" as the parameters.\r\n                \/\/ This tells cmd that we want it to execute, then exit.\r\n                System.Diagnostics.ProcessStartInfo procStartInfo = \r\n                new System.Diagnostics.ProcessStartInfo(\"cmd\", \"\/c \" + command);\r\n                \/\/ Redirect the standard output.\r\n                procStartInfo.RedirectStandardOutput = true;\r\n                procStartInfo.RedirectStandardError = true;\r\n                procStartInfo.UseShellExecute = false;\r\n                procStartInfo.CreateNoWindow = true;\r\n                System.Diagnostics.Process p = new System.Diagnostics.Process();\r\n                p.StartInfo = procStartInfo;\r\n                p.Start();\r\n                string result = p.StandardOutput.ReadToEnd();\r\n                string result2 = p.StandardError.ReadToEnd();\r\n                \/\/ Display the command output.\r\n                Console.WriteLine(\"StandardOutput:\");\r\n                Console.WriteLine(result);\r\n                Console.WriteLine(\"StandardError:\");\r\n                Console.WriteLine(result2);\r\n                Console.WriteLine(\"\");\r\n            }\r\n            catch (Exception objException)\r\n            {\r\n                \/\/ Log the exception\r\n                Console.WriteLine(\"!!! Exception !!!\");\r\n                Console.WriteLine(objException.ToString());\r\n            }\r\n            ClearCommands();\r\n            Console.WriteLine(\"** done \\n\");\r\n        }\r\n```\r\n\r\nffmpeg also comes with ffplay but i have no idea how to embed it into monogame.","Is this on the list to be fixed any time soon? I've been waiting for a fix for 2 years now. Also, I'd be happy to fix it, but this low level type of work is out of my wheel house. \r\n","Hello, April 28th 2023 here and still getting the same issue in UWP DirectX. Same code works fine in Windows DX but then the DX code uses VideoPlayer.WMS, UWP uses VideoPlayer.WME.\r\n\r\nI've noticed that...\r\n\r\nFirst time Draw a texture is returned that appears to be Blank but it's not null and can be drawn without error (but there's nothing there).\r\n\r\nSecond time round is when the exceptions start...\r\n\r\nIf I Dispose the Texture2D after drawing then I get the error message above but if I don't I get a slightly different: **A video sample is not currently queued on a stream that is required for mixing.**\r\n\r\n```\r\nVideoPlayer.WME.cs, Line 83:\r\n\r\nThis exception was originally thrown at this call stack:\r\n    SharpDX.Result.CheckError()\r\n    SharpDX.MediaFoundation.MediaEngine.TransferVideoFrame(SharpDX.ComObject, SharpDX.MediaFoundation.VideoNormalizedRect?, SharpDX.Mathematics.Interop.RawRectangle, SharpDX.Mathematics.Interop.RawColorBGRA?)\r\n    Microsoft.Xna.Framework.Media.VideoPlayer.PlatformGetTexture() in VideoPlayer.WME.cs\r\n    Microsoft.Xna.Framework.Media.VideoPlayer.GetTexture() in VideoPlayer.cs\r\n    Mono.Shared.Game1.Draw(Microsoft.Xna.Framework.GameTime) in Game1.cs\r\n\r\n \r\n\r\nHRESULT: [0xC00D4E26], Module: [Unknown], ApiCode: [Unknown\/Unknown], Message: A video sample is not currently queued on a stream that is required for mixing.\r\n\r\n\r\nat SharpDX.Result.CheckError()\r\n   at SharpDX.MediaFoundation.MediaEngine.TransferVideoFrame(ComObject dstSurfRef, Nullable`1 srcRef, RawRectangle dstRef, Nullable`1 borderClrRef)\r\n   at Microsoft.Xna.Framework.Media.VideoPlayer.PlatformGetTexture()\r\n   at Microsoft.Xna.Framework.Media.VideoPlayer.GetTexture()\r\n   at Mono.Shared.Game1.Draw(GameTime gameTime) in D:\\Projects\\Tests\\MonoGamePlayVideo\\Mono.Shared\\Game1.cs:line 67\r\n```\r\n\r\n","Some more info if it may help someone as a workaround of sorts:\r\n\r\nUWP Xaml apps can take advantage of Xaml UI components and use those to play video in a Xaml layer's \"swapChainPanel\" (which is created as default by the MonoGame UWP Xaml Template in the GamePage.xaml page and assigned to the GraphicsDeviceManager property of the same name). Therefore you could play a fullscreen video something like this in a Game1.LoadContent() method:\r\n\r\n```\r\nMediaElement newElement = new MediaElement();\r\nnewElement.Source = new Uri(\"ms-appx:\/\/\/Content\/com.oculus.vrshell-20200304-030407.mp4\");\r\n_graphics.SwapChainPanel.Children.Add(newElement);\r\nnewElement.Play();\r\n```\r\nCreated by default, note the **SwapChainPanel**:\r\n```\r\n<Page\r\n    x:Class=\"PlayVideoUWPCore.GamePage\"\r\n    xmlns=\"http:\/\/schemas.microsoft.com\/winfx\/2006\/xaml\/presentation\"\r\n    xmlns:x=\"http:\/\/schemas.microsoft.com\/winfx\/2006\/xaml\"\r\n    xmlns:local=\"using:UwpGame\"\r\n    xmlns:d=\"http:\/\/schemas.microsoft.com\/expression\/blend\/2008\"\r\n    xmlns:mc=\"http:\/\/schemas.openxmlformats.org\/markup-compatibility\/2006\"\r\n    mc:Ignorable=\"d\">\r\n\r\n    <SwapChainPanel x:Name=\"swapChainPanel\"\/>\r\n<\/Page>\r\n```\r\n\r\nIt's also worth noting that the mp4 original video file seems to be preserved and copied over from the build process, the XNB file just acting as a kind of wrapper. So you could maybe write a component (a DrawableGameComponent perhaps) that might act as a Shim for both types of behaviour. Unfortunately UWP Core games with no Xaml throw exceptions if you try to do mad things like create SwapChainPanels dynamically in code so it seems to be no dice for Core Apps I'm afraid.\r\n"],"labels":["Windows 10 UWP","Video"]},{"title":"MonoGame Android does not properly notify window on Immersive mode","body":"In my application, we have several `RenderTarget2D` resources that we use to render secondary screen views. Essentially, we draw to these render targets, then draw them to the screen afterwards.\r\n\r\nI am able to listen to `Game.GameWindow.ClientBoundsChanged` in order to recreate these render targets when the screen rotates. However, this does not work correctly with immersive mode - when the system changes to immersive mode, this callback is not called and the client bounds do not update. This causes the render target to be cropped and drawn several pixels below the top of the screen, at least until the screen rotates again and we have the correct sizes.\r\n\r\nIs there any other, more reliable way to get this information, or is the `GameWindow` the correct way to do it? If it's the latter, could we please patch this change in?","comments":["@Compynerd255 any chance you can post up a sample which demonstrates the issue. I've not used immersive mode yet. Also it might be worth getting the output from https:\/\/github.com\/MonoGame\/MonoGame\/pull\/5410 as this does a major bit of rework on the Android platform. It might fix the issue..","Here's a sample: [GreyBarTest.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/1289441\/GreyBarTest.zip)\r\n","@Compynerd255 I think the property you are after is \r\n\r\n```csharp\r\ngraphics.GraphicsDevice.Adapter.CurrentDisplayMode;\r\n```\r\n\r\nThat will get your the correct display mode (fullscreen) for the current orientation.","Also this might be related https:\/\/github.com\/MonoGame\/MonoGame\/issues\/5935\r\n"],"labels":["Android"]},{"title":"Holographic (HoloLens) support","body":"Would be nice to see this integrated:\r\n\r\nhttps:\/\/github.com\/vladkol\/MonoGame\r\n\r\nso HoloLens support was built in.","comments":["@vladkol would you mind setuping a pull request to get your work upstream?","@vladkol 's repository isn't mine, though he is a Microsoft Dev that has a good rep for this sort of integration.  There's no issues section on his repository, so I'm not sure how he might be notified to bring him in on this.\r\n\r\nIf there's no one on the MonoGame team side to do the HoloLens support, please let me know and I will look into getting the work done.\r\n\r\nI think HoloLens support would be a good win for MonoGame!\r\n\r\nThe @nkast tag appears to be unrelated.","@Noemata \r\n> The @nkast tag appears to be unrelated.\r\n\r\nhttps:\/\/github.com\/nkast\/MonoGame\/blame\/90a6168313df00a42cf5a0083a32343afbcf600a\/MonoGame.Framework\/WindowsUniversal\/UAPFrameworkView.cs#L16\r\nhttps:\/\/github.com\/vladkol\/MonoGame\/blame\/8a11d8370a6d3eccf7789b0ae54eda12f74b54ca\/HolographicSmokeTest\/AppView.cs#L14\r\n\r\nhttps:\/\/github.com\/vladkol\/MonoGame\/blame\/8a11d8370a6d3eccf7789b0ae54eda12f74b54ca\/HolographicSmokeTest\/AppViewSource.cs#L7\r\nhttps:\/\/github.com\/nkast\/MonoGame\/blame\/90a6168313df00a42cf5a0083a32343afbcf600a\/MonoGame.Framework\/WindowsUniversal\/GameFrameworkViewSource.cs#L13\r\n\r\nI can go on... 8-)\r\n\r\n**EDIT**\r\nSo basically, @vladkol had to reimplement CoreApplication from scratch because that feature was not transfered to UWP. My PR is not related to VR\/HoloLens.","@vladkol repo seems good but would have been better if they had committed under a new branch to make seeing the changes easier.\r\n\r\nWalking through the commits, not sure I agree with creating \"another\" platform as Holographic is a superset of UWP (so @nkast 's link is right as it's updating uwp).  Should really just be a few extensions to enable special mapping and other holographic extensions to UWP.\r\n\r\nI completely agree, this should either be in the base or (maybe better) an extension project to MonoGame like MonoGame.Extensions.   MonoGame.Hologaphic? \r\n\r\nI'm digging more in to the Mixed Reality space which also uses similar extensions so I would be very interested in this,\r\nI'm dinning ","My fork is not quite done yet. So far, it only establishes non-XAML framework (CoreWindow only) for running the game, which would be helpful to have in MonoGame regardless of HoloLens\/Mixed Reality support. \r\nIf anyone wants to finish it, you\u2019re welcome. I don\u2019t think I\u2019ll have time for that until November 2017.","The changes @vladkol has made to MonoGame are encapsulated within his last 4 commits.  The recent SharpDX based HoloLens templates Microsoft put out are reasonably straight forward; the bulk of the Holographic initialization is just a form of preamble.\r\n\r\nI think @vladkol is the best person to move the Holographic MonoGame bits forward, but if that doesn't pan out I can look at doing this.\r\n\r\nWhat are your suggestions?\r\n\r\n(Thanks @vladkol , your post arrived before I sent this, so I didn't see it when this was written, this being an edit of the post)","This is a great idea. I would love to have Hololense support in the main repo. @tomspilman just to get this on your radar. ","This thread has gone quiet for a month.  Are there any HoloLens devs out there that are looking for Monogame support?  Anyone taken another crack at this?","At home I'm working on a proof of concept experiment with SharpDX and Oculus Rift... when it's mature enough, I want to _try_ integrating it with monogame, trying to keep the changes to monogame core to a minimum, and I was planning to use vladkol's PR as a template.\r\n\r\nSadly, it's going to be that way for a while, until we can settle on a common framework for VR.\r\n\r\nWhat's worse is that almost nobody has all the available helmets to work on a common framework. In my case I own a Rift, so it's the only one I can work with, but looking forward to see a Hololens\/Mixed reality inplementation!","I have made some progress with HoloLens.  The basics are starting to work.  There are input modalities that presently have no analog in the existing code, so I really have no clue how to wire in aspects of the HoloLens capabilities.  Given where VR is headed, this is something that will have to be resolved soon.","Is there a market for HoloLens ? wouldn't it be better to focus on Google\/Apple AR solutions ?","@Scellow The full story is: Microsoft developed the Hololens as a proof of concept to research and understand what's really needed for all aspects of VR, not only gaming. As it is, the hololens it's always been intended for developers only. Now that microsoft has achieved this stage, they've rebranded Hololens SDK to Mixed Reality SDK, which now supports many more VR headsets, and way cheaper than Oculus and VIVE.\r\n\r\n[You can see the new batch of Hololens compatible headsets here.](https:\/\/www.microsoft.com\/en-us\/store\/collections\/vrandmixedrealityheadsets)\r\n\r\nWhat's interesting is that, unlike all other VR platforms, the mixed reality SDK begins to look like some sort of standard... some people even call it DirectVR. And the best thing is that any company can build compatible headsets for it... and there's speculation whether Oculus and VIVE will eventually support it or not.\r\n\r\nThe bad thing is that, of all existing VR platforms, is the less mature one... but, well, it's microsoft.\r\n\r\nLong story short, supporting Hololens means now, not only supporting the hololens itself, but all these new cheaper headsets, because they essentially use the same SDK.","@vpenades @Noemata I have a MS mixed reality headset (the HP one) so if I have some free time (which is the real challenge), I am happy to test out stuff if you guys have anything testable ....\r\n","@vladkol I've forked and updated your branch, you can take a look at [my changes here](https:\/\/github.com\/demonixis\/MonoGame\/tree\/MixedReality). I made a quick test with your demo project, it's a XamlGame, I changed few things in the XamlGame.cs to force MR but I got a black screen (but it starts, we can see the fancy animation in the MR headset when the application is started).\r\n\r\nI don't know if it can help you, but I'll continue to work on that fork if you can't.\r\n","This will probably work better with the recent changes for the MonoGame CoreApplication template, rather than XAML.  Although I haven't the time at the mo to dig through it.\r\n\r\nI think we also need to expose the \"CoreWindow\" from the Platform, like what is done in iOS and Android, as it's needed by the HL \/ MR API's for defining space. See #6038","Thanks to @Nkast s work and the new \"CoreApplication\" template, I'm revisiting this again now.\r\n\r\nDigging in to this further now and although I like what @vladkol has done, it's (imho) a bit overkill.   We shouldn't be adding a \"Holographic\" device with all it's mannerisms.\r\nRather it's a case of opening up the graphic subsystem to allow for multiple graphic devices \/ targets.\r\n\r\nIssue I'm facing with this atm, is that when you define a \"Holographic\" workspace, there is no one \"graphicsdevice\", these are initialised later (likely to allow for extension).  So MG trips up because there is no GD to initialise.  So I'm investigating options to either:\r\n\r\n* Define your own GraphicsDevice template using the IGraphicsDevice interface\r\n* Enable MG to be able to accept GD's on startup, rather than just \"discovering\" the primary.\r\n\r\nSlowly getting there.\r\n\r\nThe \"Holographic\" example provided by the HL API in C#, uses SharpDX direct. So it's just a case of unpinning that work to implement in MG in a good framework way.","Hey guys, [I made some progress](https:\/\/github.com\/demonixis\/MonoGame\/blob\/develop\/MonoGame.Framework\/Graphics\/GraphicsDevice.DirectX.cs#L644) with @vladkol's branch, but I still have some problems because I'm not very good with SharpDX, maybe someone can help me.\r\n\r\nWe've to create a `SharpDX.Direct2D1.Bitmap1` that is used as a target for `d2dContext`. \r\n\r\n```csharp\r\nIntPtr pSurface = IntPtr.Zero;\r\nMarshal.QueryInterface(pResource, ref WindowsUniversal.DXUtils.IDXGISurface, out pSurface);\r\n\r\nvar obj = Marshal.GetIUnknownForObject(pSurface);\r\nusing (var dxgiBackBuffer = new Surface(obj))\r\n\t_bitmapTarget = new SharpDX.Direct2D1.Bitmap1(_d2dContext, dxgiBackBuffer, bitmapProperties);\r\n```\r\n\r\nThis code crashes because the interface is unknow.  So I tried this\r\n\r\n```csharp\r\nSharpDX.Direct3D11.Resource resource = SharpDX.Direct3D11.Resource.FromPointer<SharpDX.Direct3D11.Resource>(pResource);\r\nMarshal.Release(pResource);\r\nvar texture = resource.QueryInterface<SharpDX.Direct3D11.Texture2D>();\r\n``` \r\n\r\nI can get a valid `Texture2D`, but I don't know if it's possible to convert it to `Bitmap1`. Both are `Resource`.\r\n\r\nThe idea behind this code to initialize the Holographic Space into MonoGame. The GraphicDevice is responsible to\r\n* Initializes resources\r\n* Updates resources\r\n* Updates the HolographicSpace\r\n* Render the backbuffer\r\n"],"labels":["Feature Request","Help Wanted"]},{"title":"Loading songs from Uri leaks memory","body":"I'm not completely sure whether this is causes by Monogame, but the mediaplayer seems to increase RAM usage each time a new song is loaded. Any ideas?","comments":["Which platform? The media player implementation is different for different platforms.","Windows (DX) ","@NaamloosDT -  I assume you are doing something like this:\r\n\r\n```\r\nvar song = Song.FromUri(\"Song Name\");\r\nMediaPlayer.Play(song);\r\n```\r\n\r\nAre you later disposing the `Song` object?","No, Though I'm not loading them over and over each time, I'm only loading them into memory once and storing them","> I'm only loading them into memory once and storing them\r\n\r\nThen it does sound like there could be some sort of issue.\r\n","Hmm, weird.. let me check whether anything is wrong from my side. Will report back! :)","My local copy of my game is disposing Song objects and loading new one, yet still seems to increase RAM usage..","Taskmanager tells me it's about 1MB per map change","> yet still seems to increase RAM usage..\r\n\r\nThanks for double checking this @NaamloosDT !\r\n\r\n\r\n","No problem. I've tried trying to find a fix earlier but I'm not too familiar with monogame's code :s","Hello there, I was thinking about contributing to Monogame and this issue seems like a good start and something I can look into. @NaamloosDT Do you have a scenario I can setup where I can replicate the memory leak?","Not really, the only code I have available is very case-specific.\r\nYou could take a look at Rizumu (my game) but I don't have any maps ready for you to try it with (you'd need multiple in this case)."],"labels":["Help Wanted","Audio"]},{"title":"Feature Request: Add text stroke and fill styles to SpriteFontDescription","body":"I would like to be able to specify stroke and fill styles for text in SpriteFont descriptions, for instance to create different outlines and color styles for text (esp. title text). This would include things like thickness as well as color and joint types. What would other developers think of this feature?","comments":["Seems like outlines and custom fill is supported in FreeType. I haven't checked if there are also bindings to it from SharpFont.\n\nWe could extend the SpriteFont description format and support these features. It would require no changes to the runtime. FreeType does require the user to implement the rendering of glyphs when using colors and stuff, so that complicates the implementation a bit.\n\nI think this would be a pretty neat feature to have :) "],"labels":["Feature Request","ContentPipeline"]},{"title":"ViewPort remains at 800x600 regardless of backbuffer size","body":"Tested in both existing and new projects. Regardless of what the preferred backbuffer width\/height is set to.\r\n\r\nAlso as note din @dellis1972 s article in 2014, it shouldn't be used?\r\nhttp:\/\/www.infinitespace-studios.co.uk\/general\/handling-multiple-screen-resolutions-in-monogame-for-android-part-1\/","comments":["We should test the desktop platforms for this one. "],"labels":["Need Info"]},{"title":"Idea: DrawSprite function that takes an unit vector instead of rotation as an argument.","body":"SpriteBatch.DrawSprite should be overloaded to take an unit vector instead of the rotation angle.\r\n\r\nYou don't always need to represent a rotation with an angle, but an unit vector instead, which is, in fact, [cos, sin] of the angle. By passing it to DrawSprite directly instead of that angle, you don't need to use Math.Atan2, Math.Cos and Math.Sin each sprite like you do now (to retrieve the angle from [cos, sin] then convert it back to [cos, sin] to perform the rotation).\r\n\r\nIt should be a huge performance boost when you have lots of moving sprites and unit vectors instead of rotation angles. Now I have to create my own little sprite batch that features it to achieve better performance.","comments":["> [...], but an unit vector instead, which is, in fact, [cos, sin] of the angle. \r\n\r\nAnother name for that is a [Complex number](https:\/\/github.com\/tainicom\/Aether.Physics2D\/blob\/247c19027978c8950210171ecfa5d70638d397b7\/Physics2D\/Maths\/Complex.cs), but in principle it's the same thing.\r\nIt's like a 2x2 rotation matrix but you don't store the duplicate +cos and -sin.\r\n\r\n \r\n","Yes, in fact passing the rotation matrix should be possible too.\r\n\r\nAnd yes, I'm using the unit vector often because of complex number multiplication which lets me avoid lots of trig function calls (and also makes the code cleaner).","For a 2d function you can simply wrap your own spritebatch call and use Math.Atan2(y, x).\r\n\r\npublic static void MyDraw(SpriteBatch sb, Texture2D t, ... ect... , Vector2 rot, ...)\r\n{\r\n   float r = (float)(Math.Atan2( rot.Y, rot.Y));\r\n   \/\/ then call the spritebatch.Draw and pass r for rotation. \r\n}\r\n\r\n   however... Math.Atan2 uses a polar operational axis system so you have to pass like - rot.Y or something i forget because monogame and xna invert the z axis ?.\r\n   For 3d this isn't proper to pass a vector3 for rotations its non standardized as x,y,z angles can have up to 16 different meanings, depending or the order of mathematical operations performed on the rotations.\r\n   In 2d the axis is standardly defined as being on the positive z axis with 0 degrees being up and rotation clockwise to 90 degrees being the right.\r\n   So a full rotation matrix would have to be passed for 3d orientations.","> For a 2d function you can simply wrap your own spritebatch call and use Math.Atan2(y, x).\r\n\r\nWhich is totally not the point. It's obvious that I can do it, but simply using Atan2 makes me in fact do 3 trigonometric function calls that convert the vector to angle (atan2), then that angle back to the unit vector\/complex number (cos, sin) that represents the rotation. By allowing the SpriteBatch to be able to receive the rotation in an unit vector\/complex number form or a rotation matrix, the trig functions are not needed. Which means less redundant CPU overhead.\r\n\r\n>For 3d this isn't proper to pass a vector3 for rotations its non standardized as x,y,z angles can have up to 16 different meanings, depending or the order of mathematical operations performed on the rotations.\r\n\r\nI think it's unrelated. SpriteBatch seems to be focused on 2D. Anyway, in case of 3D, you'd likely analogously pass an unit quaternion (which is just a \"higher order\" complex number that could be represented by Vector4) instead of an unit complex number (represented by Vector2 in my case).\r\n\r\n\r\n","Well you have a point, though there is a bit more to it then just a new method.\r\n\r\nYou can drop spritebatch and draw quads directly you will have to pass a full rotation matrix.  \r\nI would actually like to see a couple changes to spritebatch myself like being able to specify the vertices and or uv positions of the corners changing this spritebatch (rectangle drawer) into a actual (quad drawer).\r\n"],"labels":["Feature Request"]},{"title":"PVRTexLibNET.PVRTexture.Transcode crashes with SIGFPE on Linux","body":"Running the tests on Linux causes a crash with a SIGFPE (arithmetic error, usually caused by division by 0 or overflow) when running [PVRTexLibNET.PVRTexture.Transcode](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework.Content.Pipeline\/Graphics\/PvrtcBitmapContent.cs#L120).\r\n\r\nAs far as I can tell PVRTexLib is proprietary, so we can't really debug this.","comments":["Relevant part of the stacktrace:\r\n```\r\n  at <unknown> <0xffffffff>\r\n  at (wrapper managed-to-native) PVRTexLibNET.PVRTexture.Transcode (intptr,PVRTexLibNET.PixelFormat,PVRTexLibNET.VariableType,PVRTexLibNET.ColourSpace,PVRTexLibNET.CompressorQuality,bool) [0x0000c] in <07998f81766f4b1694992a6283983b93>:0\r\n  at PVRTexLibNET.PVRTexture.Transcode (PVRTexLibNET.PixelFormat,PVRTexLibNET.VariableType,PVRTexLibNET.ColourSpace,PVRTexLibNET.CompressorQuality,bool) [0x00016] in <07998f81766f4b1694992a6283983b93>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.Graphics.Etc1BitmapContent.TryCopyFrom (Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle) [0x0013d] in <b124cee554284608b8e55884ea77d8f5>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.Copy (Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Rectangle) [0x0012c] in <b124cee554284608b8e55884ea77d8f5>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.Copy (Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent) [0x00051] in <b124cee554284608b8e55884ea77d8f5>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent.ConvertBitmapType (System.Type) [0x0012b] in <b124cee554284608b8e55884ea77d8f5>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.Graphics.GraphicsUtil.CompressEtc1 (Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent) [0x00064] in <b124cee554284608b8e55884ea77d8f5>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.Graphics.DefaultTextureProfile.PlatformCompressTexture (Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext,Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent,Microsoft.Xna.Framework.Content.Pipeline.Processors.TextureProcessorOutputFormat,bool) [0x0006b] in <b124cee554284608b8e55884ea77d8f5>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureProfile.ConvertTexture (Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext,Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent,Microsoft.Xna.Framework.Content.Pipeline.Processors.TextureProcessorOutputFormat,bool) [0x00044] in <b124cee554284608b8e55884ea77d8f5>:0\r\n  at Microsoft.Xna.Framework.Content.Pipeline.Processors.TextureProcessor.Process (Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext) [0x00309] in <b124cee554284608b8e55884ea77d8f5>:0\r\n  at MonoGame.Tests.ContentPipeline.TextureProcessorTests.CompressDefault<T_REF> (Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform,Microsoft.Xna.Framework.Color) [0x00066] in <60abfee1dd604221ae33982100692a09>:0\r\n  at MonoGame.Tests.ContentPipeline.TextureProcessorTests.CompressDefaultAndroidOpaque () [0x00008] in <60abfee1dd604221ae33982100692a09>:0\r\n```"],"labels":["ContentPipeline"]},{"title":"UWP ARM runtime failure","body":"Hello,\r\n\r\nI have problem by building my UWP app using VS2015 SP3 and MonoGame 3.6.\r\n The compiler probably produce wrong code, if \"Compile with .NET Native tool chain\" is active.\r\n If I disable this feature, then all working fine.\r\n\r\nIt happened only, if I create a final windows store package.\r\n The DEBUG and RELEASE builds working fine, if I deploy and start app from debugger.\r\n But if I create a final windows store package with active \"Compile with .NET Native tool chain\" and manual install,\r\n then by start my app showing only SplashScreen and then app be terminated.\r\n\r\nIf I disable \"Compile with .NET Native tool chain\" and create a final windows store package,\r\n then my app working fine by manual install too.\r\n\r\nThe x86 and x64 packages working fine.\r\n It's looked that problem only under ARM.\r\n\r\nMy app using last MonoGame Framework version 3.6 .\r\n To reproduce problem enough to  create a default (empty) MonoGame Windows 10 Universal Project.\r\n Then activate \"Compile with .NET Native tool chain\" and create a final windows store package.\r\n After build, try to manual install ARM package to any windows phone.\r\n After start app - it show only SplashScreen and then app be terminated.\r\n If you disable \"Compile with .NET Native tool chain\" and create a final windows store package.\r\n Then by manual install all working fine.\r\n\r\nI found similar issues:\r\nhttps:\/\/github.com\/aspnet\/EntityFramework\/issues\/6253\r\nhttps:\/\/github.com\/aspnet\/EntityFramework\/issues\/6027\r\nhttps:\/\/stackoverflow.com\/questions\/43530071\/how-to-fix-app-submission-error-of-1300\r\n\r\nbut no any solutions not help to resolve this problem.\r\n\r\nMy question is how I can resolve this problem ?\r\n\r\nDid somebody successful generated a submitt any monogame app to MS and successful go thru submission?\r\n\r\nthanks,\r\n\r\n\r\nPS: I just tested with last developer build 3.7.0.678. It's same problem !\r\n\r\nI asked help on MS forum: https:\/\/social.msdn.microsoft.com\/Forums\/Windowsapps\/en-US\/0e3dd982-8458-4dce-a513-b51847d8dddf\/monogame-and-uwp?forum=wpdevelop\r\nBut they not can or not want to help us resolve this problem :-( ...","comments":["Hello,\r\n\r\ndid you or MS developers have any News about my Problem?\r\n\r\nI just built and tested again using latest Version 15.3.2 VS2017 and latest developer build of MonoGame 3.7.0.768.\r\n\r\n(it used latest Microsoft.NET.Native.Framework.1.7).\r\n\r\nThis Problem exist until now !\r\n\r\nThe game, created using default (empty) MonoGame Windows 10 Universal Project wizard not work,\r\nif you create the final windows store package on ARM platform."],"labels":["Windows 10 UWP"]},{"title":"Setting hlsl array elements","body":"It doesn't work to set individual array elements like this:\r\n\r\n`effectParameter.Elements[x].SetValue(value);`\r\n\r\nIf I understand the code correctly, the ConstantBuffer.Update method checks StateKey to see if a parameter needs updating, and it does so for root parameters only, not caring if an array's elements have been set.","comments":[],"labels":["DirectX"]},{"title":"Only the first instance of VideoPlayer can play video","body":"Only the first instance of VideoPlayer that gets created can play a video. The next instances fail with the error \"cannot start video\".\r\n\r\n```\r\nVideoPlayer player = new VideoPlayer();\r\n        player.Play(video); \r\n\r\n        player.Stop();\r\n        player.Dispose();\r\n\r\n\/\/ try a 2nd time:\r\n        player = new VideoPlayer();\r\n        player.Play(video); \/\/<-- throws exception \"cannot start video\"\r\n```\r\n\r\nA workaround is to create a single (static) VideoPlayer and only use that one.","comments":[],"labels":["Video"]},{"title":"Pipeline Tool crashes when opening file without association","body":"Hello,\r\n\r\nI have this weird crash on the pipeline tool gui when right clicking an selecting \"Open\" on an XML file. I tested with other files types (wave, spritefont) and the tool doesn't crash.\r\n\r\nThat's maybe **due to the file association for XML being not set in Windows** (the file association configuration panel shows \"Unknown application\" (not sure of the translation, my OS is set to french), because after setting an application, the pipeline tool GUI doesn't crash anymore.","comments":["Did it give an error message, stack trace or exception report when it crashed?","Nothing. Just the usual message \"this program has stopped working\". I would have provided more info (stack trace) if I had one.\r\n\r\nNote that I'm using MonoGame 3.6, not the latest nightly.","Oh, I know what the problem is..."],"labels":["MGCB Editor"]},{"title":"Add support for arrow keys in GameWindow.TextInput","body":"After correcting my setup for #5806, I finally found out that `Keys.Back` key was supported, and the `Keys.Delete` key too. **However, I wasn't able to make the arrows keys functioning**.\r\n\r\nUsually, when you're editing some text, you are able to navigate in a `Textbox` control using the arrows keys (left-right in a simple text box, up and down in a multi-line text-area).\r\n\r\nCould it be possible to implement the support for them? (and other keys like insert\/home\/end\/page-up\/page-down would be great too).","comments":["It should be possible (I'm surprised it doesn't work). I'll take a look at this (also cc'ing @cra0zy).","The code that checks if an SDL key down event should raise TextInput is [here](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/SDL\/SDLGamePlatform.cs#L140-L142):\r\n\r\n```\r\nchar character = (char)ev.Key.Keysym.Sym;\r\n if (char.IsControl (character))\r\n     _view.CallTextInput (character, key);\r\n```\r\n\r\nThis is not a good approach because the character we get does not make sense for keys that do not have a mapping to a character in SDL. It's 'O' for Down and 'R' for Up for example. I think a nice solution would be to have a function (internally) that says if we should raise the TextInput event for a given instance of Keys and provide the character it should use for the event. That could be used on all platforms for consistency. Implementation could simply use a dict with the characters and a special character or no entry for a key that should not raise Textinput.\r\nEDIT: Actually, because it's an enum we should just use an array instead of a dict!","I've been thinking of replacing `TextInput` event with `KeyDown` and `KeyUp` event which would give you pressed\/released `Keys` enum + give you a char that it represents with current local on the system.","as work around for this https:\/\/github.com\/MonoGame\/MonoGame\/issues\/5715 i'm now using TextInput event from the Window it is perfect and follow the keyboard layout automatically\r\n\r\nMy setup:\r\n\r\nTextInput event for adding chars to my TextBox\r\n\r\nKeyboard state for checking actions (delete, copy, paste, moving left\/right etc)\r\n\r\n@cra0zy i think the best would be 2 new events in Window, ``KeyUp`` ``KeyDown`` and existing one ``TextInput``  this way we will have a fully event driven input management, way better than existing solution imo\r\n\r\nEDIT: and probably implement all other events for mobiles such has (TouchUp\/Down, Gyroscope, Orientation etc)\r\n\r\nEDIT 2: SFML have something similar: https:\/\/github.com\/SFML\/SFML.Net\/blob\/master\/src\/Window\/Window.cs#L637","@cra0zy Keypressed is the event we need for text input though, since its the only one that takes the OS's key-repeat delay into account. But having a separate event that returned all keys \"unmapped\"(same as the Keyboard class) would be very helpful for implementing things like menus and certain puzzle games\/roguelikes."],"labels":["Feature Request"]},{"title":"SpriteBatch arbitrary quad support","body":"This is a proposal for the implementation and discussion, of a irregular rectangle draw call or in reality a spritebatched quad type draw overload to be added to spritebatch. \r\n\r\nI had previously mentioned this on the wishlist http:\/\/community.monogame.net\/t\/monogame-feature-wishlist\/6850\/171 , there has been some speak of it here and there on occasion but i wanted to make a formalized request for it here.\r\n\r\nThis would add to the functionality of spritebatch in a big way with a small change.\r\n\r\nEssentially you would gain the ability to have things like trapzoids rombus ect and irregular 2d geometric draws. This would be done like any existing spriteBatch.Draw( ... ) call does currently.\r\n\r\n<img src=\"https:\/\/qph.ec.quoracdn.net\/main-qimg-98166276b744a923fb269438244e2d96\" alt=\"\">\r\n\r\nSince this functionality is natural to these classes it is very easy to add it.\r\n\r\nSome (untested) psuedo code is given (_which is less pesudo code then it is a trimmed down existing Draw call_) with different paremeters. Additionally this example shows a addition of a Third set(...) method in SpriteBatchItem which this draw call would use.\r\n\r\n```\r\n\r\n        \/\/ In SpriteBatch\r\n        \/\/ https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Graphics\/SpriteBatch.cs\r\n\r\n        \/\/\/ <summary>\r\n        \/\/\/ Submit a sprite for drawing in the current batch.\r\n        \/\/\/ Altered for irregular shaped rectangles i.e. quads.\r\n        \/\/\/ Shows eliminations for a more functional draw.\r\n        \/\/\/ It might be nice to have color 0 1 2 3 but that would fatten it up a bit more\r\n        \/\/\/ <\/summary>\r\n        public void Draw(\r\n            Texture2D texture,\r\n            Vector2 TL, Vector2 TR, Vector2 BR, Vector2 BL,\r\n            Rectangle? sourceRectangle,\r\n            Color color,\r\n            float layerDepth)\r\n        {\r\n            CheckValid(texture);\r\n\r\n            var item = _batcher.CreateBatchItem();\r\n            item.Texture = texture;\r\n\r\n            \/\/ set SortKey based on SpriteSortMode.\r\n            switch (_sortMode)\r\n            {\r\n                \/\/ Comparison of Texture objects.\r\n                case SpriteSortMode.Texture:\r\n                    item.SortKey = texture.SortingKey;\r\n                    break;\r\n                \/\/ Comparison of Depth\r\n                case SpriteSortMode.FrontToBack:\r\n                    item.SortKey = layerDepth;\r\n                    break;\r\n                \/\/ Comparison of Depth in reverse\r\n                case SpriteSortMode.BackToFront:\r\n                    item.SortKey = -layerDepth;\r\n                    break;\r\n            }\r\n\r\n            \/\/ Source rectangle could be kept for efficiency instead of passing Vector uv's\r\n            \/\/ origin isn't needed now.\r\n            if (sourceRectangle.HasValue)\r\n            {\r\n                var srcRect = sourceRectangle.GetValueOrDefault();\r\n                _texCoordTL.X = srcRect.X * texture.TexelWidth;\r\n                _texCoordTL.Y = srcRect.Y * texture.TexelHeight;\r\n                _texCoordBR.X = (srcRect.X + srcRect.Width) * texture.TexelWidth;\r\n                _texCoordBR.Y = (srcRect.Y + srcRect.Height) * texture.TexelHeight;\r\n            }\r\n            else\r\n            {\r\n                _texCoordTL = Vector2.Zero;\r\n                _texCoordBR = Vector2.One;\r\n            }\r\n\r\n            \/\/ We dont need SpriteEffects when manually passing vertices.\r\n            \/\/ We are responsible for passing them in the order we desire.\r\n            \/\/ We can just pass the vertices in different orders to replace SpriteEffects\r\n\r\n            \/\/ We do however need a additional set overloaded method in SpriteBatchItem.cs\r\n\r\n            item.Set\r\n                (\r\n                TL,\r\n                TR,\r\n                BL,\r\n                BR,\r\n                color,\r\n                _texCoordTL,\r\n                _texCoordBR,\r\n                layerDepth\r\n                );\r\n\r\n            FlushIfNeeded();\r\n        }\r\n\r\n        \/\/ in  MonoGame\/MonoGame.Framework\/Graphics\/SpriteBatchItem.cs\r\n        \/\/ https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Graphics\/SpriteBatchItem.cs#L60\r\n\r\n        \r\n        public void Set(Vector2 TL, Vector2 TR, Vector2 BL, Vector2 BR, Color color, Vector2 texCoordTL, Vector2 texCoordBR, float depth)\r\n        {\r\n            vertexTL.Position.X = TL.X;\r\n            vertexTL.Position.Y = TL.Y;\r\n            vertexTL.Position.Z = depth;\r\n            vertexTL.Color = color;\r\n            vertexTL.TextureCoordinate.X = texCoordTL.X;\r\n            vertexTL.TextureCoordinate.Y = texCoordTL.Y;\r\n\r\n            vertexTR.Position.X = TR.X;\r\n            vertexTR.Position.Y = TR.Y;\r\n            vertexTR.Position.Z = depth;\r\n            vertexTR.Color = color;\r\n            vertexTR.TextureCoordinate.X = texCoordBR.X;\r\n            vertexTR.TextureCoordinate.Y = texCoordTL.Y;\r\n\r\n            vertexBL.Position.X = BL.X;\r\n            vertexBL.Position.Y = BL.Y;\r\n            vertexBL.Position.Z = depth;\r\n            vertexBL.Color = color;\r\n            vertexBL.TextureCoordinate.X = texCoordTL.X;\r\n            vertexBL.TextureCoordinate.Y = texCoordBR.Y;\r\n\r\n            vertexBR.Position.X = BR.X;\r\n            vertexBR.Position.Y = BR.Y;\r\n            vertexBR.Position.Z = depth;\r\n            vertexBR.Color = color;\r\n            vertexBR.TextureCoordinate.X = texCoordBR.X;\r\n            vertexBR.TextureCoordinate.Y = texCoordBR.Y;\r\n        }\r\n```\r\n\r\nMy personal foremost functional use for this would be text related.\r\nHowever im sure that many creative people would find unforeseeable uses for such functionality.\r\n\r\nhttp:\/\/community.monogame.net\/t\/fastest-way-to-draw-lots-of-simple-mesh-as-possable\/9413\r\n\r\nAnyways i posted this for any thoughts comments or just to show the basic premise of the simplicity of the code changes involved.\r\n\r\n\r\n\r\n","comments":["Related to #5348.","> Since this functionality is natural to these classes it is very easy to add it.\r\n\r\nWhile this is true for now, using this internal functionally will limit [other](https:\/\/github.com\/MonoGame\/MonoGame\/pull\/4172#r43038546) possible [implementations](https:\/\/github.com\/MonoGame\/MonoGame\/issues\/5348#issuecomment-273357162).\r\n\r\nIt depends on where SpriteBatch will go in the future and what's useful and for the average user. Should it became a generic primitive batcher for arbitrary sized polygons or focus on rendering -rectangular- quads.","> While this is true for now, using this internal functionally will limit other possible implementations.\r\n\r\nI don't see how this will limit other possible implementations? Unless you mean a more full parameter accepting set call ?\r\n\r\nIn regards to those links. I think that this or a even more full parameter draw and set(...) satisfy's all of those requests within the 2d realm.\r\n\r\nIt doesn't change any sorting or do anything that i can see to be of concern to how sorting would occur.\r\nThis first segment of code i posted is just a another spritebatch.Draw overload.\r\nThe second is just a existing set call that takes different parameters.\r\n\r\n> It depends on where SpriteBatch will go in the future and what's useful and for the average user. Should it became a generic primitive batcher for arbitrary sized polygons or focus on rendering -rectangular- quads.\r\n\r\nAfter a lot of thought about it. I don't think it needs to be over thought much. \r\nOriginally i had thought it should be a separate class but i think that would just be redundant.\r\n\r\nAs long as there is not a performance impact on the other draw calls by adding a additional .set(). to the spritebatchitem. If there is no impact with the uv coordinates passed to .set() i would ask for that as well. Even each separate color passed if that was not a concern for performance to the other draw calls.\r\n\r\nSomething like this  doesn't need its own class like (\"_generic primitive batcher_\"). Rectangles are quads after all, at the end of the line internally these rectangles are quads. SpriteBatch _Draws_ by _position_ or by _rectangle_ and this is just another Draw by _corner points_. \r\n\r\nBy not separating such a call to a separate class. Then everything extra spritebatch can do, it can do it for just this (\"Draw( ... )\") overload too. **Every improvement made to spritebatch, is good for this overload too.** \r\n\r\nWhile its true it really is a generic primitive quad, as long as its just a draw overload, and that's a powerful draw overload to just plop in. You get to then say \"_oh ya spritebatch.Draw can now be used to batch and sort 2d quads as well_\".","> As long as there is not a performance impact on the rest of the draw calls by adding a additional .set(). to the spritebatchitem,\r\n\r\nIt's not the additional .Set() but committing to a particular structure of SpritebatchItem. \r\n\r\n\r\n\r\n\r\n","I don't follow how this would make anything more or less committed then they are at present or in the future.\r\nAll the existing spritebatch.Draw(...) methods already call to set(...) in SpriteBatchItem.\r\nAny future changes in structure to SpriteBatchItem would already effect the current draw methods in SpriteBatch.\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Graphics\/SpriteBatchItem.cs\r\n\r\n","Isn't this already possible by setting the correct transformation matrix in the Begin() method from SpriteBatch ?","> Isn't this already possible by setting the correct transformation matrix in the Begin() method from SpriteBatch ?\r\n\r\nNo. The transformation matrix is applied equally to all vertices based on the origin.\r\n\r\nThis is about the ability to change the geometry from rectangle to a quad (a non right angle quad) while retaining all the current functionality and optimizations to date under spritebatch."],"labels":["Feature Request"]},{"title":"MGCB.exe crashes when a ContentTypeWriter for a specific type can not be found.","body":"In the process of writing a new importer, I voluntarily forgot to write the `ContentTypeWriter` associated with the output type of the `ContentProcessor`. It made the MGCB tool crash. \r\n\r\nWe need to have an error instead of a crash.","comments":[],"labels":["ContentPipeline"]},{"title":"Build and publish PR NuGet's to a new stream","body":"It's getting tougher to test NuGet releases as they only show up on the current dev feed after they have been pulled.\r\n\r\nThis introduces some risk as they cannot be formally tested until after merge.\r\n\r\nWe should have another stream, like the dev release stream to test updated packages.  Granted this should also have a limited lifespan like the dev release, probably the last 10 builds or so (gives enough time to at least pull the package locally to test \/ verify)","comments":["The easiest solution would be for PackageNuget build bot to offer artifacts, like the other build bots.","That would be a good halfway solution @cra0zy , any chance of using Harry's solution @tomspilman ?","We should look into this when upgrading to the SDK-style csproj (#6207), we need to come up with a naming\/versioning scheme. Something like [GitVersioning](https:\/\/github.com\/AArnott\/Nerdbank.GitVersioning) would be really nice because it automates the whole process, just need to upgrade the version after a release.\r\n\r\nWe should also handle #5192. Maybe we should set up a myget feed, that seems to be what everybody uses for beta NuGets nowadays."],"labels":["Maintenance"]},{"title":"Guidance for contributing to documentation","body":"I've been a user of MonoGame for some time, and I've liked the idea of contributing to the project. The problem is, I know very little about the inner workings of the framework and I doubt I would be able to help with any of the coding issues.\r\n\r\nOne area I probably _could_ help is in documentation. Before I start submitting PRs for documentation changes out of nowhere, though, I want to discuss it so that I don't end up wasting my time or anyone else's. I apologize if this is the wrong place to bring it up (since this isn't exactly an issue with MonoGame, but rather _contributing_ to MonoGame).\r\n\r\nA few things that might be problematic to me helping with documentation:\r\n\r\n- My level of understanding of MonoGame is much more that of an end-user than a contributor. In other words, I'm familiar with the API, but not the implementation.\r\n- I'm a Windows user only, and almost all of my experience with MonoGame is with working on desktop DirectX projects. I'm unfamiliar with UWP and I'm still using Windows 8.1, and I haven't really tried using OpenGL seriously.\r\n- My knowledge is mostly limited to 2D game development.\r\n- I've never actually published a video game, but I have been working on projects off and on for two years.\r\n\r\nWith all those caveats, should I even bother? I do think I have enough knowledge to at least contribute a little.\r\n\r\nFor documentation guidelines, I've seen #2520, which is somewhat old and it was never really confirmed in that discussion what the final outline would be. There's also the README in the documentation folder, but that just has a TODO under the style guide for manuals, guides, and tutorials.\r\n\r\nIf I could help with documentation, any guidance on how to get started would be appreciated.","comments":["Hi @HopefulToad .\r\n\r\n> I'm familiar with the API, but not the implementation.\r\n\r\nI think then the best thing you could possibly do is help convert an existing XNA tutorial to MonoGame and add it to our docs.  It would go a long way towards helping people with starting with MonoGame and also give people some reference on how to do things.\r\n\r\nRiemer from [http:\/\/www.riemers.net](http:\/\/www.riemers.net) has offered to let us use his tutorial in MonoGame documentation.  It would be sort of a big job... first moving it over with correct markup and then doing some improvements to it to meet the current state of MonoGame.\r\n\r\nIf you are interested let me know and we can start an issue on it.","@tomspilman That sounds good to me.\r\n\r\n> first moving it over with correct markup and then doing some improvements to it to meet the current state of MonoGame\r\n\r\nSo does that mean the plan should be to first move the entirety of each tutorial over verbatim, and then go back and fix things up to make it MonoGame specific? Or to make changes to sections as I go?","> So does that mean the plan should be to first move the entirety of each tutorial over verbatim,\r\n\r\nI think so....  just because it gives us some immediate progress.  It would still be useful even if it mentions XNA and not MonoGame.\r\n\r\nThe next steps would be to fix up formatting, improving the content, etc.","OK. Should I open a new issue specifically about porting Riemer's tutorials, or just rename this one?","@tomspilman One great set of tutorials for XNA, IMO, is: http:\/\/rbwhitaker.wikidot.com\/xna-tutorials Contacting the guy behind them so we can use those as well might also not be a bad idea.","I would really like to add the rbwhitaker tutorials. I would wait until #5753 is finished and do it then analog for rbwhitaker.","Yeah, always ask for permission first before grabbing them. \r\nGot the ok for DHPO's tutorials. Not many but they are all excellent.  Pulled them on to the XNAGameStudio archive for now and will upgrade them.\r\nhttp:\/\/www.dhpoware.com\/demos\/index.html\r\n\r\nStill need to think of a long term plan for how to link these in to the MonoGame docs eventually","I rephrased my comment, looking at it now it could have had a double meaning."],"labels":["Documentation","Question"]},{"title":"Default Language Proposal","body":"In localizing games for multiple languages you often need to figure out what the current language setting is for the phone\/tablet\/console you're running on.  This way the default localized content you show the player is based on the settings they chose for their device.\r\n\r\nYou can sort of do this in plain C# using:\r\n\r\n `System.Globalization.CultureInfo.InstalledUICulture.TwoLetterISOLanguageName`\r\n\r\nThis however just returns the 2 letter language code which can tell you the language is Portuguese...  but to know the difference between Brazilian Portuguese and Portugal Portuguese you have to start messing with:\r\n\r\n `System.Globalization.CultureInfo.InstalledUICulture.InstalledUICulture.LCID` \r\n\r\n... which returns numerical codes you have to hard code into your game.\r\n\r\nWhile this might be good for traditional apps that have complex language needs... it is overly complicated for games and a waste of time seeing so many games have to reinvent how to do this.\r\n\r\nInstead maybe we can do something like this:\r\n```\r\nenum GameLanguage\r\n{\r\n   EnglishUS,\r\n   EnglishUK,\r\n   EnglishAustralia,\r\n   EnglishCanada,\r\n   SpanishSpain,\r\n   SpanishMexico,\r\n   \/\/ etc!\r\n}\r\n\r\nclass Game\r\n{\r\n    public GameLanguage DefaultLanguage { get; }\r\n}\r\n```\r\n\r\nWe would populate the `GameLanguage` enum using the combined supported languages from Xbox One, PS4, Vita, Switch, iOS, Android, and Steam.  This should ensure we support all the languages that matter for game localization.\r\n\r\nUnder the hood each platform would provide its own implementation to fetch the active OS language.\r\n\r\nWe could even go beyond just a single enum and instead return a immutable `GameLanguage` type that has additional helpers methods.","comments":["Here's a spreadsheet I started, if anyone whishes to contribute to identify the relevant languages: https:\/\/docs.google.com\/spreadsheets\/d\/1cf3aC1n6kSapbqptqdGnI42idrUy-x77veMFIo9mUy8\/edit?usp=sharing","Table complete \ud83d\udc4d ","In past projects I have used `CultureInfo.CurrentUICulture.Name` which gives the language and locale, e.g. \"pt-BR\" and \"zh-TW\", and this has served all purposes of getting the correct language and locale.  I've never had to deal with LCIDs to get the correct locale.  The lang-locale form is also an easy to use and widely understood method of referring to languages.","Thats what I've used too. The 2 letter codes are all ISO standard so there should be no variations on this to worry about. Web browsers\/servers report their locale using the same strings so its very very standard.\r\n\r\nI would hesitate to make our own list - pretty sure steam is used in a very very wide range of countries.","Yey, my country has 1 green square.... ","I would like to warn against using a fixed enum table, and stick to use CultureInfo instead.\r\n\r\nWe have some experience with dealing with localization, here's some insights:\r\n\r\n- Windows 10 has more cultures available than Windows 8, expect to get even more with updates.\r\n- CultureInfo can be extended so you can add regional cultures not initially supported natively.\r\n- Also, CultureInfo has formatting APIs that help deal with language specific issues.\r\n"],"labels":["Feature Request","Design"]},{"title":"GamePad.GetState always returns IsConnected == false on Android","body":"Android does not seem to detect game pads in MonoGame even though a game controller is connected through bluetooth.\r\n\r\nMore information (including screenshot) here:\r\n\r\nhttp:\/\/community.monogame.net\/t\/gamepad-support-in-android-not-ouya\/2180\/4","comments":["FWIW, I just created a project using the current (i.e. 3.7.1) MonoGame and deployed it to:\r\n- my Nvidia Shield TV (AndroidTV 9.0 based)\r\n- my Razer Phone (Android 8.1 based)\r\n\r\n**All 4 [GamePads] say they are disconnected until I press a button on the SN30 Bluetooth gamepad - which will turn [GamePads.PlayerOne] to 'connected' state.**\r\n\r\nI can't read the 'Select' (i.e. 'back'?) button, though - and its DPad doesn't produce DPad but LeftThumbstick events unfortunately. :("],"labels":["Android","Input"]},{"title":"AudioEmitter.DopplerScale is not used","body":"There is a global DopplerScale (`SoundEffect.DopplerScale`) that is implemented in MG, but `AudioEmitter.DopplerScale` is unused for both XAudio and OpenAL. We need to investigate exactly how XNA applies this scale (most likely just multiply it with the global scale) and fix both paths.\r\n\r\nThe XAudio fix is straightforward because XAudio emitters have their own DopplerScale. Assuming XNA multiplies the Doppler scales, we just need to remove [this line](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Audio\/SoundEffectInstance.XAudio.cs#L42) and multiply the emitter DopplerScale with SoundEffect.DopplerScale [here](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Audio\/SoundEffectInstance.XAudio.cs#L116). It looks like assigning the DopplerScale was accidentally put inside that #if block. It should be moved out so it is applied for UWP too. \r\n\r\nFor OpenAL we need to do some more experimenting. There is only a global Doppler scale in OpenAL, no emitter-specific setting. We need to test if sound effects keep the doppler scale they get when they start playing or if changing the scale affects playing sounds too (that's not in the docs). If playing sounds are affected when changing the global Doppler scale, we can't replicate XAudio behaviour and we should just use `SoundEffect.DopplerScale`, ignoring the emitter settings.","comments":["We could probably just multiply the velocity vector with the scale, I didn't think of that before.\r\nNot sure if it would just be linear scale or whatever, so this would still need some work\/testing.","is this still an issue?"],"labels":["Help Wanted","Audio"]},{"title":"[OpenAL] SoundEffectInstance settings not applied when not playing","body":"Under OpenAL SoundEffectInstance instances only get a source assigned when they are playing (a source is the native resource for playing a sound in OpenAL). A source is reserved in the PlatformPlay method [here](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Audio\/SoundEffectInstance.OpenAL.cs#L115).\r\nThe platform specific methods for setting pitch, volume, etc. check if the instance has a source id and do not apply the setting if there is no source linked to the SFX instance. That means settings are only applied when the sound is playing or paused. An example of what intuitively should work, but does not is the following:\r\n```\r\nvar instance = sfx.CreateInstance();\r\ninstance.Pitch = pitch;\r\ninstance.Play();\r\n```\r\n\r\nThere's some comments about OpenAL [limiting the number of sources](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Audio\/OpenALSoundController.cs#L78), but I don't think that's still relevant with OpenAL soft. My best guess is that the source limit was the reason sound effect instances did not get a source on creation. So I think we can just change that to reserve a source when creating a sound effect instance to fix this issue.","comments":["OpenAL Soft is said to have a number of sources dependent of the memory available (virtually unlimited), but there is a limit of 256 on MacOS and Linux even with OpenAL Soft. I've already encountered this limit (and I believe I'm the one who put this constant and comment here).\r\n\r\nI'll double check with an uncapped stress test tomorrow.\r\n\r\n(Other platforms, including consoles, are affected by this issue, and that includes other properties like the volume and \"is repeating\" on media player. Source binding can be a touchy problem, so maybe we should look into a generic high level properties management that would work everywhere, like setting ptich\/volume\/etc after each Play.)","> I'll double check with an uncapped stress test tomorrow.\r\n\r\nThanks!\r\n\r\n> so maybe we should look into a generic high level properties management that would work everywhere, like setting ptich\/volume\/etc after each Play\r\n\r\nI had the same idea! Let's do it this way if OpenAL soft sources are limited on Mac\/Linux.","> Other platforms, including consoles, are affected by this issue\r\n\r\nExactly....  there is no such thing as an unlimited number of sound resources.  We shouldn't design for that on any platform.\r\n\r\n> maybe we should look into a generic high level properties management that would work everywhere, like setting ptich\/volume\/etc after each Play\r\n\r\nWe currently do this internally on most platforms, so making this part of the common sound code would be nice.  It will just be a difficult transition to make as we have to fix public and private platform implementations."],"labels":["Audio"]},{"title":"[Keyboard - Azerty] Some keys not recognized","body":"Hello\r\n\r\nI have an azerty keyboard, most of the keys are not recognized, and some of them are mapped to the wrong values\r\n\r\n![chrome_2017-05-17_08-41-24](https:\/\/cloud.githubusercontent.com\/assets\/27389256\/26141553\/cb850e28-3adc-11e7-99ba-e93b4051767c.png)\r\n\r\n\r\nLegend:\r\nGreen: incorect key returned\r\nPink: Not recognized at all, return \"None\"\r\n\r\nOS: Windows 10 x64\r\nMonoGame: 3.6 (DesktopGL from nuget)","comments":["Hello,\r\n\r\nThis has to do with the way openTK handles keyboard input.\r\nMore information in #3836.\r\n\r\nEdit: I tested this myself and my results are a little bit different.\r\n![480px-belgian_keyboard_layout](https:\/\/cloud.githubusercontent.com\/assets\/7582207\/26150306\/2ab28e4a-3afe-11e7-8d14-7574737ec138.png)\r\n\r\nRed: Returns \"None\"\r\nYellow: Returns incorrectly. In my case the \"AltGr\" returns \"LeftControl + RightAlt\". If I hold \"AltGr\" and then press \"LeftControl\", \"LeftControl\" dissapears.\r\n\r\nOS: Windows 10 x64\r\nMonoGame: 3.7.0.379 (DesktopGL Nuget)","Latest MG DesktopGL does not use OpenTK, it uses SDL. A dictionary lookup is used to translate reported SDL keys to the XNA key mapping [here](https:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Input\/KeyboardUtil.SDL.cs#L15). Maybe some entries are missing\/incorrect. Some of the keys you report are not detected are in the mapping though, so it could be a bug in SDL. It would be awesome if someone could log SDL key down events and check if they're wrong or if we just need to add some mappings to the dict used for translating to XNA Keys.","We're using the SDL Keycode as input to that mapping to XNA Keys mapping function.  SDL Keycode values are supposed to have already taken the user's keyboard layout into account.  @Scellow or @BaseCrosser, are you able to confirm that the SDL Keycode being passed to that `ToXna` function is the incorrect or correct for the key being pressed?","I have checked the key codes that are passed to the `ToXna()` function.\r\n\r\nHere are my results:\r\n![2ab28e4a-3afe-11e7-8d14-7574737ec138](https:\/\/cloud.githubusercontent.com\/assets\/7582207\/26161206\/86318864-3b23-11e7-85ff-511a76b59fbe.png)\r\n\r\nAll these blue numbers are not present in the SDL to Xna Key mapping Dictionary\r\n\r\n\"AltGr\" passes two different keycodes to `ToXna()`.\r\n`1073742048` for \"LeftControl\" and `1073742054` for \"RighAlt\".\r\n","Thanks @BaseCrosser! There are no entries in the XNA Keys enumeration for those keys. Not sure what XNA does in this case. We could add entries to the Keys enumeration for these keys @KonajuGames.","I'm open to a proposal to add those key to our `Keys` enum.","It would be good if @Scellow could also test the key codes since his\/her results differ a bit from mine.\r\nWhich keys are returning \"None\" and which are returning the wrong key.\r\n\r\nAlso there is still the problem of \"AltGr\" returning two keys instead of one.","I can confirm the layout issues @BaseCrosser posted, but I can't reproduce @Scellow's ones. Returned key is always ```Keys.None``` for the red keys.\r\nI'm on a FR-fr keyboard.\r\n\r\nAlso related: supporting non latin keyboard is an another issue.\r\n\r\nI'm in for adding these azerty keys to the ```Keys``` enum, but regarding future versions of MonoGame, we should look into working with raw keycodes (or something like an external keymap file to allow players to customize their bindings, which would support any kind of keyboard if we go with raw codes).","The OS already provides the function of mapping of keyboard scan codes to keys using the active keyboard layout, and this is what SDL would be using behind the scenes. We should not be re-implementing that mapping functionality.\r\n\r\nThe XNA Keys enumeration appears to be an attempt to mix keyboard scan codes and key codes into one enumeration. SDL does it better by returning both the scan code and the key code in separate member fields for each key press.","So if we add the missing code enumeration for each keyboard layout, we're good to go with any kind of keyboard? Chinese and Russian keyboards concern me.","That's why mixing scan codes and key codes is not a good idea.  There are a limited number of scan codes, but a far wider ranger of key codes dependent on keyboard layout.","Good to know, and way to go.","I will only chime in to say I have no clue what the right choice is here... i'll leave this to @KonajuGames to define.  We just need to ensure we make the correct fix and consider all the possibilities so we don't have to reverse course on this later.","Oops my bad i colorized more keys than needed\r\n\r\nThis is pretty serious issue since it makes typing on AZERTY a real pain\r\n\r\nI also trying to revert to 3.5.1 but it looks like it doesn't care about my keyboard layout, everything seems to be QWERTY","> We're using the SDL Keycode as input to that mapping to XNA Keys mapping function. SDL Keycode values are supposed to have already taken the user's keyboard layout into account. @Scellow or @BaseCrosser, are you able to confirm that the SDL Keycode being passed to that ToXna function is the incorrect or correct for the key being pressed?\r\n\r\nI don't understand, what do you want me to do ?","> I don't understand, what do you want me to do ?\r\n\r\nFor the green or pink keys you show above, what is the SDL Keycode being passed to the `ToXna()` function?","Oh, ok i'll clone the repo and test this!","Looks like it is tedious to do for each key individualy, since most of the keys from 1-0 needs to be used with MAJ or ALT Gr modifiers\r\n\r\nAnd i checked here: \r\n\r\nFor most characters, there are no scan codes available since they are not physical key, only keycode: https:\/\/wiki.libsdl.org\/SDL_Scancode\r\n\r\neg: &\u00e9\"'(-\u00e8_\u00e7\u00e0)=~#{[|`\\^@]} \r\n\r\nSo mapping the scan code is not the right choice, need to find something else i think","What about this: https:\/\/wiki.libsdl.org\/SDL_GetKeyName\r\n\r\nSo we get the char,  then convert the char directly to Xna KeyCode ?","So what about this issue?\r\n\r\nReverting to 3.5.1 completly ignore the keyboard layout (DesktopGL\/Windows)","Hi, any update on this bug ? I really need to use a french layout . Thanks","Added my workaround to https:\/\/github.com\/MonoGame\/MonoGame\/issues\/6617"],"labels":["Input"]},{"title":"WindowsDX: Game.IsActive defaults to true on launch, even if the user is clicking or typing in another program","body":"The only way to have Game.IsActive update correctly is to give the game window focus and then click elsewhere. Until you focus on the game window it will always be true, which can cause issues if a player is typing in a browser, for example. \r\n\r\nTo recreate:\r\n\r\n- Add a `Console.Writeline(IsActive)` to Game1.Update()\r\n- Launch a game or app, but don't click the window\r\n- Click around \/ type in other applications and you'll see it continues to say `True`","comments":["DesktopGL or WindowsDX?","WindowsDX, I'll add that to the OP."],"labels":["Windows"]},{"title":"XNA Mouse.GetState().Y Inaccurate on Multi Monitor Setup","body":"The Y Coordinate reported by Microsoft.Xna.Framework.Input.Mouse.GetState() can be incorrect on multi-monitor setups. It appears that if the secondary monitor is vertically offset from the primary monitor, the Y coordinate is similarly vertically offset.\r\n\r\nIn these screenshots the application is running on a secondary, 4k monitor. The X coordinate is always correct, the Y coordinate offset is based on offset between monitors.\r\n\r\nNo vertical offset, the entity correctly tracks cursor using GetState():\r\n![xna-coords-good](https:\/\/cloud.githubusercontent.com\/assets\/711100\/25536916\/baae1096-2bf9-11e7-9b9a-0119f64e4af9.png)\r\n\r\nVertical offset in monitors, the entity is similarly offset from cursor:\r\n![xna-coords-bad](https:\/\/cloud.githubusercontent.com\/assets\/711100\/25536935\/c90d686c-2bf9-11e7-9ba0-969e6b45dad4.png)\r\n","comments":["Are you using DesktopGL template or Mac template?","DesktopGL template","I couldn't reproduce this on Linux, so it's probably Mac only bug.\r\n\r\n@mrhelmut Can you take a look at this?","Totally looks like a Retina issue, and it highly depends on how your application bundle is made (```NSHighResolutionCapable``` has to be ```false``` to correctly work on Retina displays, which means that debugging from the IDE may expose this issue since only packaged app can specify this property -- as far as I know -- but packaged app shouldn't have this problem...).\r\n\r\n@profexorgeek could you please try to package your game project in a .app bundle with ```NSHighResolutionCapable``` set to ```false``` in the ```Info.plist``` and let us know if the results is the same?\r\n\r\nP.S.: this doesn't mean that MonoGame doesn't support Retina resolutions, it only means that MonoGame works better when handling its own scaling and that leaving MacOS to handle it isn't quite MonoGame-friendly. I still haven't figured out how to disable Retina scaling for debugging.","Thank you for your comments. I'm very new to dev targeting OSX. I know what plists and app packages are for mobile devices but my desktop project does not have one and I don't see an option to package it as a bundle.\r\n\r\nI created a super-simple project to repro the issue (attached). Run it on a native laptop screen and the sprite will track the mouse. Run it on a secondary monitor and the sprite is offset on the Y axis IF the monitors are not vertically aligned in display preferences.\r\n\r\n[test.zip](https:\/\/github.com\/MonoGame\/MonoGame\/files\/968015\/test.zip)\r\n\r\n","@mrhelmut I am having the same issue with my game. Visual Studio for Mac wasn't giving me an option to bundle so I created one myself using [this tutorial](https:\/\/mhut.ch\/journal\/2010\/01\/24\/creating_mac_app_bundle_for_gtk_app). I tried setting ```NSHighResolutionCapable``` to ``false``, however the bug is still present.\r\n\r\nHere is my Info.plist, if it helps:\r\n\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <!DOCTYPE plist PUBLIC \"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\" \"http:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\">\r\n    <plist version=\"1.0\">\r\n    <dict>\r\n\t<key>CFBundleDevelopmentRegion<\/key>\r\n\t<string>English<\/string>\r\n\t<key>CFBundleExecutable<\/key>\r\n\t<string>example<\/string>\r\n\t<key>CFBundleIdentifier<\/key>\r\n\t<string>com.philiprader.example<\/string>\r\n\t<key>CFBundleInfoDictionaryVersion<\/key>\r\n\t<string>6.0<\/string>\r\n\t<key>CFBundleName<\/key>\r\n\t<string>Example<\/string>\r\n\t<key>CFBundlePackageType<\/key>\r\n\t<string>APPL<\/string>\r\n\t<key>CFBundleShortVersionString<\/key>\r\n\t<string>2.2<\/string>\r\n\t<key>CFBundleSignature<\/key>\r\n\t<string>xmmd<\/string>\r\n\t<key>CFBundleVersion<\/key>\r\n\t<string>2.2<\/string>\r\n\t<key>NSAppleScriptEnabled<\/key>\r\n\t<string>NO<\/string>\r\n    <key>NSHighResolutionCapable<\/key>\r\n    <string>NO<\/string>\r\n    <\/dict>\r\n    <\/plist>","Try to completely remove the key from the plist file. Also make sure that your .app bundle is correctly packaged, otherwise the plist will not be read by MacOS. You might also need to clear the plist cache of MacOS, since it caches app metadata may not update correctly (or make sure that you always increment CFBundleVersion).","According to the [plist documentation](https:\/\/developer.apple.com\/library\/content\/documentation\/GraphicsAnimation\/Conceptual\/HighResolutionOSX\/Explained\/Explained.html), NSHighResolutionCapable is default **YES** when not present. I did try removing the key, it did not work. I put it back in, except used ```<false\/>``` instead of ```<string>NO<\/string>``` for the value of NSHighResolutionCapable, and checked the info of my .app using Finder. It appears that macOS is reading my plist correctly, because the \"Open in Low Resolution\" box is checked and disabled for changing:\r\n\r\n<img width=\"267\" alt=\"screen shot 2017-06-05 at 8 43 27 pm\" src=\"https:\/\/cloud.githubusercontent.com\/assets\/2125989\/26812936\/a753cbe0-4a2f-11e7-840a-ee0868031556.png\">\r\n\r\nWhich, according to the docs, is what is supposed to happen when NSHighResolutionCapable is set to false. Now, I'm not familiar with the inner workings of .app's in macOS, so my .app bundle is probably incorrectly set up. Here's my .app:\r\n\r\n<img width=\"906\" alt=\"screen shot 2017-06-05 at 8 45 29 pm\" src=\"https:\/\/cloud.githubusercontent.com\/assets\/2125989\/26812984\/f99f92e4-4a2f-11e7-8e9c-d3e7fa9b0d0d.png\">\r\n\r\nThe executable that is specified inside my plist is SuperPong (my plist from earlier I had changed, so it doesn't match exactly). SuperPong is a sh script that runs ```mono SuperPong.exe```. I don't know how else to launch SuperPong.exe. If I had to guess, because SuperPong.exe isn't being launched by the .app directly, macOS runs it normally? It runs the executable, SuperPong, in low-res mode, which doesn't do me any good. Unless I'm wrong (like the whole process chain from the launch of the app is in some sort of sandbox or something). I'll keep investigating.","Looks good. You might want to try to embed mono with your app by using MonoGame\/MonoKickstart to avoid the dependency, but launching a .app with a script should work well (note that launching by double-clicking on the .sh directly won't use the plist).\r\n\r\nHaving \"Open in Low Resolution\" checked should be the correct configuration to avoid this problem.\r\n\r\nI'm going to do some tests on my side too.","I've been double-clicking the .app to open it. I switched users and tried the .app there as well; no luck. What I *have* noticed, however, is that I can't seem to get any of my apps to launch in Low Resolution mode. Here's the App Store with the \"Open in Low Resolution\" enabled on the top, disabled on the bottom:\r\n\r\n<img width=\"1031\" alt=\"screen shot 2017-06-06 at 5 23 23 pm\" src=\"https:\/\/user-images.githubusercontent.com\/2125989\/26857366-ea984ea8-4ade-11e7-86eb-4bf608f78280.png\">\r\n\r\nThere's no difference (the two tests weren't running at the same time, I closed it out, unchecked the box, and opened it back up). I bought my laptop around when they first launched the MacBooks with the Retina displays. Most third-party apps did not support Retina at the time, and as a result they looked all blurry and pixelated due to the upscaling. I can't tell any difference in the picture above. My hunch is that it has something to do with Sierra (my current OS), but I can't tell for certain. I tried to force my Retina display into standard 1280x800 by going to the settings, displays, and pressing \"Scaled\" while holding down the option key. Before Sierra it would have a selection box with a whole bunch of resolutions. Now nothing happens ([see this post](https:\/\/discussions.apple.com\/message\/31382249)). I found an app that changes the resolution, so I changed it to 1280x800 and tried the .app again. No luck, although my hopes weren't high. Too bad I don't have a mac with an earlier macOS nearby to try it with.","I'll try to test this against Sierra. Our games don't have any problem with pre-Sierra Retina (and I believe post-Sierra too) so I must be missing something that we did with our bundles and\/or resolution management."],"labels":["MacOS","Input"]},{"title":"Filter GraphicsDevice by GraphicsProfile","body":"Somewhere in here:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/GraphicsDeviceManager.cs#L291\r\n\r\nWe should be enumerating the `GraphicsAdapter`s in the system and picking the ones available based on requirements including `GraphicsAdapter.IsProfileSupported(GraphicsProfile)`.  You can see sort of how this works in the XNA docs:\r\n\r\nhttps:\/\/msdn.microsoft.com\/en-us\/library\/microsoft.xna.framework.graphicsdevicemanager.findbestdevice.aspx\r\n\r\nIf no supported device is found XNA seems to throw a `NoSuitableGraphicsDeviceException`:\r\n\r\nhttps:\/\/msdn.microsoft.com\/en-us\/library\/microsoft.xna.framework.graphics.nosuitablegraphicsdeviceexception.aspx\r\n\r\nYou can see it in use from `GraphicsDeviceManager.ApplyChanges()` which does the work of \r\n\r\nhttps:\/\/msdn.microsoft.com\/en-us\/library\/microsoft.xna.framework.graphicsdevicemanager.applychanges.aspx\r\n\r\n","comments":["`.RankDevices()` looks like the one that filter out adapters that don't fit the prefered requirements.\r\nThen maybe `.FindBestDevice()` picks the first from the returned list?\r\n\r\nI think MG has to set the default Adapter through `.FindBestDevice()` sometime before the `.PreparingDeviceSettings()` event.\r\n\r\n","Bump!","I've made a start on this, implementing `FindBestDevice()` and `RankDevices()`.  Will then insert it into the relevant point in `ApplyChanges()`."],"labels":["Feature Request","Help Wanted"]},{"title":"Stretching Window too far causes exception","body":"I have my \"Window.AllowUserResizing\" set to 'true'.\r\n\r\nTo test the limits, I stretched the Window across both monitors. That is what caused the exception to be thrown.\r\n\"SharpDX.SharpDXException: 'HRESULT: [0x80070057], Module: [General], ApiCode: [E_INVALIDARG\/Invalid Arguments], Message: The parameter is incorrect.\"\r\n\r\nI have created my event for \"ClientSizeChanged\", but obviously that makes no difference as this is happening in SharpDX\r\n\r\n`\r\n\r\n    private void Window_ClientSizeChanged(object sender, EventArgs e)\r\n    {\r\n      if (graphics.PreferredBackBufferHeight < 480)\r\n      {\r\n        graphics.PreferredBackBufferHeight = 480;\r\n        graphics.ApplyChanges();\r\n      }\r\n\r\n      if (graphics.PreferredBackBufferHeight > 1440)\r\n      {\r\n        graphics.PreferredBackBufferHeight = 1440;\r\n        graphics.ApplyChanges();\r\n      }\r\n\r\n      if (graphics.PreferredBackBufferWidth < 800)\r\n      {\r\n        graphics.PreferredBackBufferWidth = 800;\r\n        graphics.ApplyChanges();\r\n      }\r\n\r\n      if (graphics.PreferredBackBufferWidth > 2560)\r\n      {\r\n        graphics.PreferredBackBufferWidth = 2560;\r\n        graphics.ApplyChanges();\r\n      }\r\n\r\n      ScreenHeight = graphics.PreferredBackBufferHeight;\r\n      ScreenWidth = graphics.PreferredBackBufferWidth;\r\n    }\r\n\r\n`\r\n\r\nThanks","comments":["Can you post a screenshot of DXDiag.exe (\/Display) ?  or just what Feature levels your card support?\r\nGPU-Z will do as well.\r\n\r\nHave you tried with HiDef profile or with the OpenGL project?","My DxDiag info is [here](https:\/\/jpst.it\/Y6fl).\r\n\r\nI've just created an OpenGL project and it works perfectly fine, which means it's only DirectX.\r\n\r\nI tried setting on HiDef, but I get a 'NullReferenceException' in my \"spriteBatch.End()\" after it's changed.","All right, it doesn't look like a limitation of the GPU, it has to be something else. Unfortunately I don' t have dual monitor. I might be helpful to have  the full stack trace of the exception and at what size the exception is thrown. Is it something like after >2048px, >4096 or it's completely random? ","I just chucked this in the \"Update\" method to see where it's happening\r\n`\r\n      graphics.PreferredBackBufferWidth++;\r\n      graphics.ApplyChanges();\r\n`\r\nand you're right. It's when the window is getting > 4096px.\r\n\r\nStack trace below\r\n\r\nSharpDX.SharpDXException occurred\r\n  HResult=0x80070057\r\n  Message=HRESULT: [0x80070057], Module: [General], ApiCode: [E_INVALIDARG\/Invalid Arguments], Message: The parameter is incorrect.\r\n\r\n  Source=SharpDX\r\n  StackTrace:\r\n   at SharpDX.Result.CheckError()\r\n   at SharpDX.DXGI.SwapChain.ResizeBuffers(Int32 bufferCount, Int32 width, Int32 height, Format newFormat, SwapChainFlags swapChainFlags)\r\n   at Microsoft.Xna.Framework.Graphics.GraphicsDevice.CreateSizeDependentResources()\r\n   at Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset()\r\n   at Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset(PresentationParameters presentationParameters)\r\n   at Microsoft.Xna.Framework.GraphicsDeviceManager.ApplyChanges()\r\n   at PleaseThem.Game1.Update(GameTime gameTime) in E:\\Projects\\CGJ12016\\PleaseThem\\Game1.cs:line 127\r\n   at Microsoft.Xna.Framework.Game.DoUpdate(GameTime gameTime)\r\n   at Microsoft.Xna.Framework.Game.Tick()\r\n   at MonoGame.Framework.WinFormsGameWindow.RunLoop()\r\n   at MonoGame.Framework.WinFormsGamePlatform.RunLoop()\r\n   at Microsoft.Xna.Framework.Game.Run(GameRunBehavior runBehavior)\r\n   at Microsoft.Xna.Framework.Game.Run()\r\n   at PleaseThem.Program.Main() in E:\\Projects\\CGJ12016\\PleaseThem\\Program.cs:line 18\r\n","Now we have to make HiDef work to see if it's a limit of the selected feature level or a hard limit of the driver\/card.\r\nCan you temporary disable spritebatch drawing and test HiDef? Also if you can post the stacktrace of NullReferenceException in spritebatch. So far ther are no similar reports.","When set to HiDef we managed to get a width of 16400px before throwing an exception.\r\n\r\nAs for the spriteBatch stack trace:\r\nSystem.NullReferenceException occurred\r\n  HResult=0x80004003\r\n  Message=Object reference not set to an instance of an object.\r\n  Source=MonoGame.Framework\r\n  StackTrace:\r\n   at Microsoft.Xna.Framework.Graphics.SpriteBatch.Setup()\r\n   at Microsoft.Xna.Framework.Graphics.SpriteBatch.End()\r\n   at PleaseThem.States.MenuState.Draw(GameTime gameTime, SpriteBatch spriteBatch) in E:\\Projects\\CGJ12016\\PleaseThem\\States\\MenuState.cs:line 59\r\n   at PleaseThem.Game1.Draw(GameTime gameTime) in E:\\Projects\\CGJ12016\\PleaseThem\\Game1.cs:line 176\r\n   at Microsoft.Xna.Framework.Game.DoDraw(GameTime gameTime)\r\n   at Microsoft.Xna.Framework.Game.Tick()\r\n   at MonoGame.Framework.WinFormsGameWindow.RunLoop()\r\n   at MonoGame.Framework.WinFormsGamePlatform.RunLoop()\r\n   at Microsoft.Xna.Framework.Game.Run(GameRunBehavior runBehavior)\r\n   at Microsoft.Xna.Framework.Game.Run()\r\n   at PleaseThem.Program.Main() in E:\\Projects\\CGJ12016\\PleaseThem\\Program.cs:line 18\r\n\r\nFrom what I can see \"GraphicsDevice\" inside \"SpriteBatch\" is 'null', even when I re-initialize the \"SpriteBatch\" on my PreparingDeviceSettings call.","> When set to HiDef we managed to get a width of 16400px before throwing an exception.\r\n\r\nWow that's a hell of a virtual monitor! The limit is 16384, right?\r\n\r\n> From what I can see \"GraphicsDevice\" inside \"SpriteBatch\" is 'null', even when I re-initialize the \"SpriteBatch\" on my PreparingDeviceSettings call.\r\n\r\nI am not sure what that means but it doesn't sound right. You should  initialize spritebatch just once in `Initialize()` or in `LoadContent()`.","I tried to change the backbuffer under XNA, and found that I can set the Backbuffer up to 16384, even with  Reach Profile. Anything >16384 will throw NoSuitableGaraphicsDevice and reset\/destroy the GraphicsDevice.\r\nThe test was performed by setting PreferredBackBufferWidth and ApplyChanges, I don't know how XNA will behave with resizing the Client beyond 16384px. Can we force a size limit based on the feature level?\r\nhttps:\/\/www.codeproject.com\/Questions\/229308\/Disable-resize-form-width-when-comes-to-a-limit-wi\r\n\r\nIs it possible to create a backfuffer with the highest dimensions supported independently of the selected feature level? Or the only fix is to always create the device using the highest supported feature level as @Jjagg suggested, no matter what the profile is?","any updates? i currentley have kind of the same issue. when using the hidef profile as soon as i resize my window the GraphicDevice in every spritebatch and rendertarget2d is null. and it throws out null reference exceptions.","@chuk95 That's a completely different problem. Can you open a new issue for it?","@Jjagg yes i will create a new ticket for this, after some more testing so i can pinpoint the issue","In xna you could set the back buffer to anything you want but make no mistake you cannot get just anything you want in reality on the hardware, thats why your setting the preffered back buffer not the back buffer itself.\r\n\r\nIn monogame just the same as xna if you set the preffered back buffer to a specific screen resolution that you know exists on your card _(and the refresh rate and color format also exists this part was always a little touchy)_ then call apply changes in fullscreen you can change your actual display mode to that resolution. \r\n\r\nMy guess is some how doing this in this case... \r\n\r\n**If this is on the monogame side** \r\nit might be possible that the backbuffer is actually trying to set a screen resolution that is invalid on the other monitor. \r\nOr a valid screen resolution with a invalid format or refresh rate for that resolution.\r\n\r\nThat's just a guess.\r\n\r\nIf the graphics device attempted to set the backbuffer to a invalid screen resolution for \/ on the second monitor. \r\nThen that is not possible because the monitors hardware scaler cant support something that doesn't exist for it. So some were along the line you would get a error if not from the os then from the card.\r\n\r\nEither way the graphics device would be in a bad state null or reset-ing or something. SpriteBatch relys on the device so that would just be messed up to and its very possible it would end up being null.\r\n\r\nThis is just what poped to mind though it seems to be a reasonable possible cause.\r\n\r\n"],"labels":["Windows","Windowing"]},{"title":"DesktopGL resizing only updates at the end","body":"When manually resizing a GameWindow in a DesktopGL project, the values for Window.ClientBounds.Width and Window.ClientBounds.Height are only changed when the window is done being resized. In Monogame 3.5 those values were updated throughout the resizing process.","comments":[],"labels":["Windowing"]},{"title":"AudioStopOptions.AsAuthored is not supported (XACT)","body":"When using XACT Cue.Stop(AudioStopOptions.AsAuthored) stops immediately and doesn't actually stop as authored.\r\n\r\nI have a looping sound that has been authored to \"play release\" when told to stop as authored and it just kills the sound instead.\r\n\r\n","comments":[],"labels":["XACT"]},{"title":"Xact Marker Events are not supported","body":"I get a NotImplementedException(\"Marker event\"); when I try to load a xact file with a marker set in it.\r\n\r\nIs this planned to be implemented or does anyone have any tips on how I should start?\r\n\r\nDoes anyone have any idea of where this format is documented, or is it more of a fiddle with the bit loading until we get some data that looks right kind of thing?\r\n\r\n","comments":["> Is this planned to be implemented \r\n\r\n If I had the free time or had a project that needed it I would, but I don't right now.\r\n\r\n\r\n> does anyone have any tips on how I should start?\r\n\r\nYes...  there are three parts to this.\r\n\r\nFirst the format.  Unfortunately there is no complete documentation for the XACT format.  There are some partial docs out there, but we've already drained them of their information.  Everything from here on out we have to figure out ourselves.\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Audio\/Xact\/XactClip.cs#L366\r\n\r\nThat is where your exception is coming from.  If I remember correctly last time I worked on this a marker is just one byte.  If you read one byte there I bet it would load your XACT file without issues.  I suspect stop markers are also a byte and a similar format I think.\r\n\r\nWhat is stored in that byte... I didn't examine it...  but how I worked things like this out was looking at the XACT tool and seeing what options for markers were available.  Flip one option on...  run the code see how the byte changes, flip the option off, see how the byte changes.... repeat as needed.\r\n\r\nTwo...\r\n\r\nOnce you know and can decode all the data (or just the data you need).  You need to create some new type like `MarkerEvent` type similar to how the `VolumeEvent` is created:\r\n\r\nhttps:\/\/github.com\/MonoGame\/MonoGame\/blob\/develop\/MonoGame.Framework\/Audio\/Xact\/VolumeEvent.cs\r\n\r\nThis will hold the data for the marker you just decoded.  That is stored in the clip like the other events.\r\n\r\nThree...\r\n\r\nNow you can do the final bit... figure out what to do when a `MarkerEvent` is hit in its `Update` method.  I don't remember exactly how they work, but you would have to figure it out and make an implementation there for that.\r\n","Just hit this for 'Stop event' when trying to up-convert an old monogame project from a few years ago.\r\n\r\nIs there a way to suppress\/ignore it instead of throwing an exception?","> Is there a way to suppress\/ignore it instead of throwing an exception?\r\n\r\nI think if you just comment out the exception and have it return it should work."],"labels":["Feature Request","XACT"]},{"title":"No pdb's generated for Release configuration.","body":"See attached image showing the current settings of \"Debug Info: none\" for the Release configuration.\r\nThe request is that this instead be \"Debug Info: pdb-only\" for Release configurations.\r\n\r\nThis would actually be a protobuild change, this issue is just for tracking progress towards that, since Protobuild.exe would at least need to be updated within the monogame project after that.\r\n\r\n![image](https:\/\/cloud.githubusercontent.com\/assets\/155688\/25156939\/95d9aa0c-2463-11e7-9451-e8f153f7a6bb.png)\r\n","comments":["This will be addressed in https:\/\/github.com\/MonoGame\/MonoGame\/issues\/6207."],"labels":["Maintenance"]}]