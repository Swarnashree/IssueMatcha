[{"title":"Incorrect java warning\/error location in new Problems API","body":"### Current Behavior\n\nTake something like...\r\n```java\r\npublic class WarningsCreator {\r\n\r\n  private static int idx = 0;\r\n\r\n  private void createIndirectAccessWarning() {\r\n    int idx = new WarningsCreator().idx;\r\n  }\r\n}\r\n```\r\n\r\nwith compile settings...\r\n```groovy\r\ntasks.withType(JavaCompile).configureEach {\r\n\toptions.compilerArgs << '-Xlint:all'\r\n}\r\n```\r\n\r\nJava will throw a warning: `static variable should be qualified by type name, WarningsCreator, instead of by an expression`\r\n\r\nThe `javax.tools.Diagnostic` class will have the following position data for this warning...\r\n\r\n```java\r\n    int idx = new WarningsCreator().idx;\r\n              ^                               startPosition (in file)\r\n                                      ^       endPosition (in file)\r\n                                   ^          position (in file)\r\n                                   ^          columnNumber (in line)\r\n```\r\nThis is because Java sets `startPosition` and `endPosition` to the whole `new WarningsCreator().idx` range but it sets `columnNumber`, `position` to point to the start of `.idx;`\r\n\r\nThe `offsetInFileLocation` is being reported using `startPosition` and `endPosition - startPosition` (so the length is 25).  This is correct.\r\n\r\nBut the **`lineInFileLocation`** is being reported incorrectly because the `length` is calculated using `endPosition - startPosition` (i.e. 25) when it **should be using `endPosition - position`** (i.e. 4)\r\n\n\n### Expected Behavior\n\nThe length in `lineInFileLocation` should be correct\n\n### Context (optional)\n\nTrying to highlight the errors\/warning correctly in an IDE\n\n### Steps to Reproduce\n\nUse the simple java snippet above with the `xlint` settings provided.\n\n### Gradle version\n\n8.8-20240323001552+0000\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\nWindows 11","comments":[],"labels":["a:bug","to-triage"]},{"title":"[8.7, 8.6,...] Annotation processing issue ","body":"### Current Behavior\r\n\r\nI have 2 annotation processor defined in my project - one works, the other one is ignored by Gradle for no reason?\r\n\r\n### Expected Behavior\r\n\r\nI expected both annotation processor to work!\r\n\r\n### Steps to Reproduce\r\n\r\n[I have published a reproducible code](https:\/\/github.com\/hrstoyanov\/gradle-issue-28553), look at the README.md for complete instructions.\r\n\r\n### Gradle version\r\n\r\n8.7 (also 8.6 and possibly earlier)\r\n\r\n### Your Environment (optional)\r\n\r\nJava 21, MacOS Sonoma 14.3.1","comments":["For a workaround, [see this.](https:\/\/github.com\/eclipse-store\/store\/issues\/183)"],"labels":["a:bug","to-triage"]},{"title":"Add support for running Gradle on Java 22","body":"Fixes #26162 \r\n\r\nOther issues may be present with Kotlin still.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["@bot-gradle test this","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"28ed9c0dfc4ef42757ef22500b59a5f7fe499220\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=28ed9c0dfc4ef42757ef22500b59a5f7fe499220) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=80044373)"],"labels":["a:feature","in:groovy-plugin","in:invoking-gradle","1 min review","platform:jvm","platform:documentation","platform:build_infrastructure","platform:core_execution"]},{"title":"Fix doc info","body":"<!--- The issue this PR addresses -->\r\n<!-- Fixes #? -->\r\n#28550\r\n### Context\r\n<!--- Why do you believe many users will benefit from this change? -->\r\n<!--- Link to relevant issues or forum discussions here -->\r\n\r\n### Contributor Checklist\r\n- [x] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [x] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [x] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [x] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [ ] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective.\r\n- [ ] Provide unit tests (under `<subproject>\/src\/test`) to verify logic.\r\n- [ ] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [ ] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`.\r\n- [ ] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["<h3>Change Summary<\/h3> This PR is 50% new code. <table> <tr> <td>Platform<\/td> <td>Added Lines<\/td> <td>% of Total Line Changes<\/td> <td>Deleted Lines<\/td> <td>% of Total Line Changes<\/td> <td>Files Changed<\/td> <td>% of Total Files Changed<\/td> <\/tr>\n<tr> <td>bt_ge_build_cache<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>build_infrastructure<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_configuration<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_execution<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_runtime<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>documentation<\/td> <td>9<\/td> <td>50%<\/td> <td>9<\/td> <td>50%<\/td> <td>1<\/td> <td>100%<\/td> <\/tr>\n<tr> <td>extensibility<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>gradle_enterprise<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>ide<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>jvm<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>kotlin_dsl<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>release_coordination<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>software<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<\/table>\n<automation id=\"summary_table\/summary_table\"\/>"],"labels":["to-triage","from:contributor"]},{"title":"Fix doc info","body":"### Issue type\n\nWrong or misleading information\n\n### Problem description\n\nFix lines 5, 15, 25, 71, 88, 92, 93, 97, 161\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nplatforms\/documentation\/docs\/src\/docs\/design\/gradle-module-metadata-1.0-specification.md","comments":[],"labels":["a:documentation","to-triage"]},{"title":"Tiny improvements to Gradle 8.7 upgrade guide","body":"### Context\r\nImprove https:\/\/docs.gradle.org\/8.7\/userguide\/upgrading_version_8.html\r\n\r\n### Contributor Checklist\r\n- [ ] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [x] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [x] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [x] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [ ] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective.\r\n- [ ] Provide unit tests (under `<subproject>\/src\/test`) to verify logic.\r\n- [x] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [ ] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`.\r\n- [ ] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["<h3>Change Summary<\/h3> This PR is 50% new code. <table> <tr> <td>Platform<\/td> <td>Added Lines<\/td> <td>% of Total Line Changes<\/td> <td>Deleted Lines<\/td> <td>% of Total Line Changes<\/td> <td>Files Changed<\/td> <td>% of Total Files Changed<\/td> <\/tr>\n<tr> <td>bt_ge_build_cache<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>build_infrastructure<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_configuration<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_execution<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_runtime<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>documentation<\/td> <td>2<\/td> <td>50%<\/td> <td>2<\/td> <td>50%<\/td> <td>1<\/td> <td>100%<\/td> <\/tr>\n<tr> <td>extensibility<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>gradle_enterprise<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>ide<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>jvm<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>kotlin_dsl<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>release_coordination<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>software<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<\/table>\n<automation id=\"summary_table\/summary_table\"\/>"],"labels":["to-triage","from:contributor"]},{"title":"Provide a way to inspect a task from console","body":"### Expected Behavior\n\nAs I user, I want:\r\n1. Get the task output location from command line. E.g.\r\n   ```sh\r\n   .\/gradlew task --outputs :mySuperTask\r\n   ....\r\n   .\/build\/reports\/tests\/archTest\/index.html\r\n   ...\r\n   ```\r\n   This can be useful for integration and\/or build authors\r\n2.  Get the list of task inputs  \r\n     Same as above. While both can be solved by reading the source code of the task, it's not something a user would want to do.\r\n3. Get the list of tasks this task depends on\r\n    it might be trickier, but it may be useful for debugging the buildthe \n\n### Current Behavior (optional)\n\n_No response_\n\n### Context\n\nInspecting a build may be tricky. Having tools to inspect it can make it easier to debug and reason about build scripts","comments":[],"labels":["a:feature","to-triage"]},{"title":"Switch to abstract property getters in built-in tasks and extensions","body":"The recommended way to declare properties for a task or extension is to declare an abstract getter like so:\r\n\r\n```java\r\n    public abstract Property<Boolean> getEnablePreview();\r\n```\r\n\r\nYet many of our tasks still explicitly create `Property` objects and return them in non-abstract getters:\r\n\r\n```java\r\n\tpublic SomeTask() {\r\n\t\tthis.enablePreview = getObjectFactory().property(Boolean.class);        \r\n    }\r\n\r\n    @Inject\r\n    protected ObjectFactory getObjectFactory() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    public Property<Boolean> getEnablePreview() {\r\n        return enablePreview;\r\n    }\r\n```\r\n\r\nThis is unnecessarily verbose and sets a bad example for third-party plugin developers. We should use the recommended way ourselves.","comments":["We probably don't need to wait until 9.0, at least for tasks that are already abstract. Which should be all of them... \ud83e\udd14 "],"labels":["a:chore","in:provider-api"]},{"title":"Support `--enable-preview` in DSL","body":"Fixes #28540\r\n\r\nProvides a low-friction way for users to enable feature preview for Java projects via the `java` extension:\r\n```kotlin\r\njava {\r\n    enablePreview = true\r\n}\r\n```\r\n\r\nThis is also configurable on the task level, but task properties user the extension setting as a convention.\r\n```\r\ntasks.withType<JavaCompile>().configureEach {\r\n    options.enablePreview = false\r\n}\r\n```\r\n\r\nTODO:\r\n- Support the convention for JavaExec, Test and Javadoc tasks","comments":["\ud83e\udd77 **Code experts: tresat, adammurdoch** \n \ntresat, hegyibalint have most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nadammurdoch, alllex have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/jvm\/language-java\/src\/integTest\/groovy\/org\/gradle\/api\/tasks\/compile\/JavaCompileCompatibilityIntegrationTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat | hegyibalint| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n alllex: 100% \n\n`platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/JavaCompilerArgumentsBuilder.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | hegyibalint| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 14% \n\n`platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/tasks\/compile\/JavaCompile.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | hegyibalint| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |12 additions & 11 deletions | \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n alllex: 26% \nadammurdoch: 13% \n\n`platforms\/jvm\/language-jvm\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/DefaultJvmLanguageCompileSpec.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | hegyibalint| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 41% \n\n`platforms\/jvm\/language-jvm\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/JvmLanguageCompileSpec.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | hegyibalint| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 61% \n\n`platforms\/jvm\/language-jvm\/src\/main\/java\/org\/gradle\/api\/tasks\/compile\/CompileOptions.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | hegyibalint| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC | 3 additions & 3 deletions |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 7% \n\n`platforms\/jvm\/plugins-java-base\/src\/main\/java\/org\/gradle\/api\/plugins\/JavaBasePlugin.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | hegyibalint| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 122 additions & 57 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 10% \nalllex: 4% \n\n`platforms\/jvm\/plugins-java-base\/src\/main\/java\/org\/gradle\/api\/plugins\/JavaPluginExtension.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | hegyibalint| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 16% \n\n`platforms\/jvm\/plugins-java-base\/src\/main\/java\/org\/gradle\/api\/plugins\/internal\/DefaultJavaPluginExtension.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | hegyibalint| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 10% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>"],"labels":["10 min review","platform:jvm"]},{"title":"Allow configuring Java feature preview in DSL","body":"### Expected Behavior\r\n\r\nIt should be easy to start working with Java feature previews.\r\n\r\n```kotlin\r\njava {\r\n    enablePreviews()\r\n}\r\n```\r\n\r\nThis should be enough to enable previews across compilation, tests and exec tasks.\r\n\r\nThe Javadoc task should probably be included as well. There were [user reports](https:\/\/github.com\/gradle\/gradle\/issues\/27001#issuecomment-1803632810) previously that hinted on that.\r\n\r\n### Current Behavior (optional)\r\n\r\nYou are forced to configure feature previews on the task level, and also using raw JVM args.\r\n\r\nhttps:\/\/docs.gradle.org\/current\/userguide\/building_java_projects.html#sec:feature_preview\r\n\r\n### Context\r\n\r\nJDK authors deliver new previews with almost every new release, which is happening relatively fast these days.\r\n\r\nIntelliJ allows switching to previews with a single action. After activating it, users are given an impression that the preview features fully work with their project, because in-editor errors disappear. However, as soon as they try to run the build via Gradle, things break, because feature previews have to be configured there separately, and on a low task-level as well.","comments":["I am not sure if this also be integrated with Groovy and Scala tasks out-of-the-box. It likely should, since we usually share the same JVM options with those plugins.\r\n\r\nAn additional consideration is the `release` option. In order to [enable previews for a particular release](https:\/\/docs.oracle.com\/en\/java\/javase\/21\/language\/preview-language-and-vm-features.html), Java compiler users can also explicitly set the `--release` or `-source` options. The `release` option we expose in the DSL does not have a convention, but the source compatibility should be defaulting to the toolchain if not explicitly configured. So the preview enabling should work nicely with the toolchains.","Related:\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/27001\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/12984"],"labels":["a:feature","in:java-plugins"]},{"title":"Minor plugin doc snippet update","body":"Quick update for https:\/\/github.com\/gradle\/gradle\/pull\/28167 ","comments":["[The merge queue build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=80016055) has started. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=da82fd1d63f926c1fdf1e9f0fa54da2beb255ba6) to see all failures if any.","[The merge queue build](https:\/\/builds.gradle.org\/viewLog.html?buildId=80016055&buildTypeId=Gradle_Release_Check_GitHubMergeQueueCheckPass) has failed. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=da82fd1d63f926c1fdf1e9f0fa54da2beb255ba6) to see all failures.","This has a dead internal link. I moved it to 8.8 RC1.\r\n@lkasso Let's use it as a test for doing changes out of the release cycle"],"labels":["a:documentation"]},{"title":"Fix Scala incremental compilation of sourceSet dependent on changed Scala objects","body":"Fixes #28536 \r\n\r\n### Context\r\nCurrently incremental compilation that involves Scala objects in different sourceSets is broken.\r\n\r\n### Contributor Checklist\r\n- [x] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [x] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [x] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [x] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [x] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective.\r\n- [ ] Provide unit tests (under `<subproject>\/src\/test`) to verify logic.\r\n- [ ] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [x] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`.\r\n- [ ] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["<h3>Change Summary<\/h3> This PR is 96.43% new code. <table> <tr> <td>Platform<\/td> <td>Added Lines<\/td> <td>% of Total Line Changes<\/td> <td>Deleted Lines<\/td> <td>% of Total Line Changes<\/td> <td>Files Changed<\/td> <td>% of Total Files Changed<\/td> <\/tr>\n<tr> <td>bt_ge_build_cache<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>build_infrastructure<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_configuration<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_execution<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_runtime<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>documentation<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>extensibility<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>gradle_enterprise<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>ide<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>jvm<\/td> <td>81<\/td> <td>96.43%<\/td> <td>3<\/td> <td>3.57%<\/td> <td>2<\/td> <td>100%<\/td> <\/tr>\n<tr> <td>kotlin_dsl<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>release_coordination<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>software<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<\/table>\n<automation id=\"summary_table\/summary_table\"\/>"],"labels":["to-triage","from:contributor"]},{"title":"Incremental compilation of Scala does not detect changes in objects in different sourceSet of the same project","body":"### Current Behavior\r\n\r\nWhen the Scala `object` changes in the `main` sourceSet it does not trigger the incremental recompilation of dependant classes\/objects in the `test` module.\r\n\r\n### Expected Behavior\r\n\r\nWhen the Scala `object` changes in the `main` sourceSet it should trigger the incremental recompilation of dependant classes\/objects in the `test` module.\r\n\r\n### Context (optional)\r\n\r\nIMHO the issue stems from the fact that `zinc` needs its last compilation analysis file with the references to classes generated from Scala `objects`.\r\n\r\nThose objects are compiled into class files that contain `$` in their names.\r\nFor `class Main` and `object Main` combination it means that `Main.class` and `Main$.class` files are generated.\r\nFor modules embedded into objects separate class files may be generated e.g. `Main$1.class`, and so on...\r\n\r\nCurrently after the `object` from `main` is changed the change is not picked up by `zinc` that compiles the `test` sourceSet.\r\nThis leads to failures at runtime as the class compiled in `main` is now incompatible with the last compiled version of its dependencies in `test`.\r\nThe only way to make the proper compilation again is to kill the GradleWorker daemon and make the full compilation of project.\r\n\r\nAfter some analysis I came up with a quick and (probably too) dirty solution that passes the `zinc` analysis files to dependant tasks and it seems to work.\r\nhttps:\/\/github.com\/gradle\/gradle\/pull\/28537\r\n\r\nI am by no means an expert on how Gradle works internally and I seek some guidance whether the way I try to fix the issue is acceptable and if not then what would be a better approach :)\r\n\r\n### Steps to Reproduce\r\n\r\nThe reproducing test case may be found in this commit:\r\nhttps:\/\/github.com\/gradle\/gradle\/commit\/f9c5a54ffd8a5bf813c3c5ef374a6fb5372d69a0\r\n\r\n### Gradle version\r\n\r\n8.3+\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":[],"labels":["a:bug","to-triage"]},{"title":"Gradle doesn't lock used configuration when build is run","body":"### Current Behavior\n\ngradle isn't locking my `errorprone` configuration when I run `build` even though `errorprone` is run when I run build. My understanding is that when running a task that with `--write-locks` dependencies of that task should be written. Thus running `build --write-locks` since `errorprone` hooks into classes (or something) as an annotation processor and uses the `errorprone``configuration` the errorprone configuration itself should be locked.\n\n### Expected Behavior\n\nerrorprone should be locked\n\n### Context (optional)\n\nI don't want my dependencies to written when used\n\n### Steps to Reproduce\n\nI am an incredibly lazy human being, I'm imagining this alone will do it, then run `.\/gradlew build --write-locks`, no locks with the configuration scope `errorprone` will be written. run `.\/gradlew dependencies --write-locks` this will add `errorprone` to the locks.\r\n\r\n\r\n```kts\r\nbuildscript { dependencyLocking { lockAllConfigurations() } }\r\n\r\nplugins {\r\n    `java-library`\r\n    id(\"net.ltgt.errorprone\") version \"3.+\"\r\n}\r\nrepositories {\r\n    mavenCentral()\r\n}\r\ndependencyLocking {\r\n  lockAllConfigurations()\r\n}\r\ndependencies {\r\n    errorprone(\"com.google.errorprone:error_prone_core:2.+\")\r\n}\r\n```\r\n\r\nIn the event this simple build script doesn't do it, it might have something to do with using `buildSrc`, full code can be found https:\/\/github.com\/xenoterracide\/java-commons\/blob\/ae2d9bfa8c9fca5e094200c55eb5706cca12c75e\/buildSrc\/src\/main\/kotlin\/our.javacompile.gradle.kts#L16\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n\r\n\r\n```\r\n------------------------------------------------------------\r\nGradle 8.6\r\n------------------------------------------------------------\r\n\r\nBuild time:   2024-02-02 16:47:16 UTC\r\nRevision:     d55c486870a0dc6f6278f53d21381396d0741c6e\r\n\r\nKotlin:       1.9.20\r\nGroovy:       3.0.17\r\nAnt:          Apache Ant(TM) version 1.10.13 compiled on January 4 2023\r\nJVM:          21.0.2 (Eclipse Adoptium 21.0.2+13-LTS)\r\nOS:           Linux 6.6.19-1-MANJARO amd64\r\n```","comments":[],"labels":["a:bug","to-triage"]},{"title":"Warning about undeclared build service usage is lost in some cases","body":"### Current Behavior\n\nIf there's some build service that is registered before enabling `STABLE_CONFIGURATION_CACHE` feature preview, it disables the warning about using build service in task action without declaration.\n\n### Expected Behavior\n\nThe warning is reported consistnently\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\nPlease refer to README of https:\/\/github.com\/ALikhachev\/gradle-build-service-declaration-warning-reproducer\n\n### Gradle version\n\n8.7-rc-4\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":[],"labels":["a:bug","to-triage"]},{"title":"idea: compile suites","body":"### Expected Behavior\n\napi may need tuning, but this would be a new api that culminates a replacement for current dependency management api, source set hackery, deficiencies in test fixtures and jvm test suites. It's a half baked idea for team discussion.\r\n\r\n```kts\r\nsources {\r\n  java {\r\n    toolchain {\r\n      languageVersion.set(JavaLanguageVersion.of(21))\r\n    }\r\n  }\r\n  val main by getting(JavaSource::class) {\r\n    dependencies {\r\n      compileOnly(libs.jspecify)\r\n    }\r\n    withJavadocJar()\r\n    withSourcesJar()\r\n  }\r\n  val testFixtures by getting(JavaSource::class) {\r\n    depenencies {\r\n      compileOnly(libs.jspecify)\r\n      implementation(main)\r\n      implementation(projects.someOther)\r\n    }\r\n    withJavadocJar()\r\n    withSourcesJar()\r\n  }\r\n  val test by getting(JavaSource::class) {\r\n    dependencies {\r\n      implementation(platform(libs.spring.bom))\r\n      implementation(libs.junit.api)\r\n      implementation(libs.assertj)\r\n      implementation(libs.vavr)\r\n      implementation(main)\r\n      implementation(testFixtures)\r\n\r\n      runtimeOnly(platform(libs.spring.bom))\r\n      runtimeOnly(libs.junit.engine)\r\n      runtimeOnly(libs.junit.launcher)\r\n    }\r\n  }\r\n}\r\n\r\n\/\/ same as now, just included for context\r\ntasks.withType<Test>().configureEach {\r\n  dependencyLocking { lockAllConfigurations() }\r\n  useJUnitPlatform()\r\n  reports {\r\n    junitXml.required.set(false)\r\n    html.required.set(false)\r\n  }\r\n  testLogging {\r\n    lifecycle {\r\n      showStandardStreams = true\r\n      displayGranularity = 2\r\n      exceptionFormat = TestExceptionFormat.FULL\r\n      events.addAll(\r\n        listOf(\r\n          TestLogEvent.SKIPPED,\r\n          TestLogEvent.FAILED,\r\n        ),\r\n      )\r\n    }\r\n  }\r\n  inputs.dir(rootProject.file(\"buildSrc\/src\/main\"))\r\n}\r\n```\n\n### Current Behavior (optional)\n\nthis is real code, I didn't actually need test fixtures or other projects here, but you can see the next bug for how I'd have to hack in javadoc\/source jars.\r\n```kts\r\ndependencies {\r\n  compileOnly(libs.jspecify)\r\n}\r\n\r\ntasks.compileJava {\r\n  options.release = 11\r\n}\r\n\r\ntesting {\r\n  suites {\r\n    val test by getting(JvmTestSuite::class) {\r\n      dependencies {\r\n        implementation(platform(libs.spring.bom))\r\n        implementation(libs.junit.api)\r\n        implementation(libs.assertj)\r\n        implementation(libs.vavr)\r\n        implementation(project(path))\r\n\r\n        runtimeOnly(platform(libs.spring.bom))\r\n        runtimeOnly(libs.junit.engine)\r\n        runtimeOnly(libs.junit.launcher)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ntasks.withType<Test>().configureEach {\r\n  dependencyLocking { lockAllConfigurations() }\r\n  useJUnitPlatform()\r\n  reports {\r\n    junitXml.required.set(false)\r\n    html.required.set(false)\r\n  }\r\n  testLogging {\r\n    lifecycle {\r\n      showStandardStreams = true\r\n      displayGranularity = 2\r\n      exceptionFormat = TestExceptionFormat.FULL\r\n      events.addAll(\r\n        listOf(\r\n          TestLogEvent.SKIPPED,\r\n          TestLogEvent.FAILED,\r\n        ),\r\n      )\r\n    }\r\n  }\r\n  inputs.dir(rootProject.file(\"buildSrc\/src\/main\"))\r\n}\r\n```\n\n### Context\n\nI'll never understand why put context at the end, feels linguistically unnatural.\r\n\r\nThis idea is based around [this deficiency that makes test-fixtures feel unfinished](https:\/\/github.com\/gradle\/gradle\/issues\/20539) and the real mentality of what it is and needs to be fixture always has been.  the problem with test fixtures before the `test-fixtures` plugin and the workaround in that bug is it's a lot of code and hard for us mere mortals to understand. It's also based around the api for Jvm test suites. I don't know that this issue is a real action item, but more an idea for team discussion. It'd probably be a huge piece of work.\r\n\r\nAdditionally I'm using the gradlex plugin that lets me turn my test suite into a jpms module. That feels like a good idea in general, to treat these as separate modules... perhaps automagically like it does if a `module-info.java` is present it'd be considered a separate module. I think modules need to be thought about if this thought is progressed on.","comments":[],"labels":["a:feature","to-triage"]},{"title":"Intentionally break task validation strings to expose related tests","body":"<!--- The issue this PR addresses -->\r\n<!-- Fixes #? -->\r\n\r\n### Context\r\n<!--- Why do you believe many users will benefit from this change? -->\r\n<!--- Link to relevant issues or forum discussions here -->\r\n\r\n### Contributor Checklist\r\n- [ ] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [ ] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [ ] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [ ] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [ ] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective.\r\n- [ ] Provide unit tests (under `<subproject>\/src\/test`) to verify logic.\r\n- [ ] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [ ] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`.\r\n- [ ] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["@bot-gradle test QuickFeedbackLinux\r\n","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"a7292f9694536ad3bde5f7b12cd10adb266bd18e\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=a7292f9694536ad3bde5f7b12cd10adb266bd18e) to see all build failures.\n- [QuickFeedbackLinux build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79982728)","\ud83e\udd77 **Code experts: lptr, reinsch82** \n \ndonat, lptr have most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nreinsch82, lptr have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/core-configuration\/configuration-cache\/src\/main\/kotlin\/org\/gradle\/configurationcache\/flow\/FlowParametersInstantiator.kt` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 4 additions & 3 deletions |  \n| JAN | 3 additions & 3 deletions |  \n| DEC | 1 additions & 1 deletions |  \n| NOV | 5 additions & 8 deletions |  \n| OCT | 1 additions & 1 deletions |  \n \n\nKnowledge based on git-blame: \n reinsch82: 10% \n\n`platforms\/core-configuration\/model-core\/src\/main\/java\/org\/gradle\/internal\/properties\/annotations\/AbstractTypeAnnotationHandler.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 4 additions & 4 deletions |  \n| JAN |   |  \n| DEC |   |  \n| NOV | 3 additions & 4 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n lptr: 37% \nreinsch82: 8% \n\n`platforms\/core-configuration\/model-core\/src\/main\/java\/org\/gradle\/internal\/properties\/annotations\/DefaultTypeMetadataStore.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 16 additions & 16 deletions |  \n| JAN |   |  \n| DEC | 2 additions & 2 deletions |  \n| NOV | 10 additions & 13 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n lptr: 48% \nreinsch82: 10% \n\n`platforms\/core-configuration\/model-core\/src\/main\/java\/org\/gradle\/internal\/properties\/annotations\/NestedValidationUtil.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 8 additions & 8 deletions |  \n| JAN |   |  \n| DEC |   |  \n| NOV | 5 additions & 7 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n reinsch82: 16% \n\n`platforms\/core-configuration\/model-core\/src\/main\/java\/org\/gradle\/internal\/reflect\/DefaultTypeValidationContext.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 7 additions & 10 deletions |  \n| JAN | 6 additions & 6 deletions |  \n| DEC | 3 additions & 3 deletions |  \n| NOV | 10 additions & 7 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n reinsch82: 19% \nlptr: 15% \n\n`platforms\/core-configuration\/model-core\/src\/main\/java\/org\/gradle\/internal\/reflect\/annotations\/impl\/DefaultTypeAnnotationMetadataStore.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 26 additions & 26 deletions |  \n| JAN |   |  \n| DEC | 38 additions & 18 deletions |  \n| NOV | 17 additions & 23 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n lptr: 70% \nreinsch82: 10% \n\n`platforms\/core-execution\/execution\/src\/main\/java\/org\/gradle\/internal\/execution\/model\/annotations\/AbstractInputPropertyAnnotationHandler.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 4 additions & 4 deletions |  \n| JAN |   |  \n| DEC | 7 additions & 1 deletions |  \n| NOV | 5 additions & 5 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n lptr: 11% \nreinsch82: 8% \n\n`platforms\/core-execution\/execution\/src\/main\/java\/org\/gradle\/internal\/execution\/model\/annotations\/InputPropertyAnnotationHandler.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 14 additions & 14 deletions |  \n| JAN |   |  \n| DEC | 4 additions & 4 deletions |  \n| NOV | 10 additions & 13 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n reinsch82: 27% \nlptr: 14% \n\n`platforms\/core-execution\/execution\/src\/main\/java\/org\/gradle\/internal\/execution\/model\/annotations\/ServiceReferencePropertyAnnotationHandler.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 6 additions & 6 deletions |  \n| JAN |   |  \n| DEC | 1 additions & 1 deletions |  \n| NOV | 4 additions & 4 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n lptr: 16% \nreinsch82: 11% \n\n`platforms\/core-execution\/execution\/src\/main\/java\/org\/gradle\/internal\/execution\/steps\/ValidateStep.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 9 additions & 9 deletions |  \n| JAN | 9 additions & 9 deletions |  \n| DEC | 1 additions & 1 deletions |  \n| NOV | 16 additions & 14 deletions |1 additions & 5 deletions | \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n lptr: 36% \nreinsch82: 13% \n\n`platforms\/extensibility\/plugin-development\/src\/main\/java\/org\/gradle\/plugin\/devel\/tasks\/internal\/ValidateAction.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 6 additions & 6 deletions |  \n| JAN | 6 additions & 6 deletions |  \n| DEC | 3 additions & 2 deletions |  \n| NOV | 7 additions & 8 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n reinsch82: 55% \nlptr: 40% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/transform\/DefaultTransform.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 3 additions & 5 deletions |  \n| JAN | 2 additions & 2 deletions |  \n| DEC | 1 additions & 1 deletions |  \n| NOV | 6 additions & 7 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n lptr: 18% \nreinsch82: 4% \n\n`subprojects\/core\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/properties\/AbstractValidatingProperty.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 2 additions & 3 deletions |  \n| JAN |   |  \n| DEC |   |  \n| NOV | 9 additions & 9 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n lptr: 8% \nreinsch82: 6% \n\n`subprojects\/core\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/properties\/ValidationActions.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 35 additions & 35 deletions |  \n| JAN |   |  \n| DEC |   |  \n| NOV | 20 additions & 27 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n reinsch82: 17% \nlptr: 10% \n\n`subprojects\/core\/src\/main\/java\/org\/gradle\/execution\/plan\/MissingTaskDependencyDetector.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 7 additions & 7 deletions |  \n| JAN |   |  \n| DEC |   |  \n| NOV | 4 additions & 4 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n reinsch82: 4% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>"],"labels":["5 min review","platform:software","platform:core_execution","platform:core_configuration"]},{"title":"Provide an easy way to download files","body":"### Expected Behavior\r\n\r\nDownloading arbitrary files should be provided out of the box by Gradle. Configuring it should be easy and straight forward. Gradle should take care of deciding whether a file needs to be (re-)downloaded because it has changed, and Gradle should handle storage and retrival from the store location.\r\n\r\nBasically there should be something similar to download Maven dependencies, but more flexible, not tied to something that has a GAV and dependency metadata.\r\n\r\n### Current Behavior (optional)\r\n\r\nThere are ways of doing this but they are cumbersome for one or the other reason:\r\n\r\n## Custom task using HTTP client\r\n\r\n- Requires ceremony in they build in order to build that custom task. You either need to put it into your build script or you need a place like buildSrc or an included build to build the task.\r\n- When running on Java < 11 you need external libraries to get access to an HTTP client\r\n- Pretty low level, you need to configure the client, provide authentication, deal with different errors, etc.\r\n- Storing efficiently is difficult. Either you download to the build folder which will cause the file to be downloaded for task registration, or you download into a central location such as Gradle user home, which requires locking in case multiple task instances execute at the same time.\r\n\r\n## Community plugins such as de.undercouch.download\r\n\r\nThis is probably the most commonly used plugin for downloading things. It provides tasks and services for downloading files.\r\n\r\n- Still suffering from the storage problem. You need to decide where to put the file and if you need it in multiple places in the build, you need to register multiple tasks and work out how to make sure it's only downloaded once.\r\n\r\n## Modeling downloadable resources using Ivy repositories\r\n\r\nAnother way of doing this is bending dependency management to work with arbitrary resources. The way this works is using a Ivy repository with `exclusiveContent` filtering and using a pattern layout to describe the download Url. Here is an example for downloading the Trivy docker image scanner binary that way:\r\n\r\n```kotlin\r\nval os = OperatingSystem.current()\r\n\r\nval driverOsFilenamePart =\r\n    when {\r\n        os.isMacOsX && os.nativePrefix.contains(\"aarch64\") -> \"macOS-ARM64\"\r\n        os.isMacOsX && !os.nativePrefix.contains(\"aarch64\") -> \"macOS-64bit\"\r\n        os.isLinux && os.nativePrefix.contains(\"arm64\") -> \"Linux-ARM64\"\r\n        os.isLinux && os.nativePrefix.contains(\"64\") -> \"Linux-64bit\"\r\n        else -> \"Linux-32bit\"\r\n    }\r\n\r\nval trivyVersion = \"0.45.1\"\r\n\r\nrepositories {\r\n    exclusiveContent {\r\n        forRepository {\r\n            ivy {\r\n                url = uri(\"https:\/\/github.com\/aquasecurity\/\")\r\n                patternLayout {\r\n                    artifact(\"[module]\/releases\/download\/v[revision]\/[artifact]_[revision]_[classifier].[ext]\")\r\n                }\r\n                metadataSources {\r\n                    artifact()\r\n                }\r\n            }\r\n        }\r\n        filter {\r\n            includeModule(\"aquasecurity\", \"trivy\")\r\n        }\r\n    }\r\n}\r\n\r\nval trivy by configurations.creating {\r\n    isCanBeResolved = true\r\n    isCanBeConsumed = false\r\n    attributes.attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.DIRECTORY_TYPE)\r\n}\r\n\r\ndependencies {\r\n    trivy(\"aquasecurity:trivy:${trivyVersion}:$driverOsFilenamePart@tar.gz\")\r\n}\r\n\r\n```\r\n\r\nThis also deals with the fact that there are different binaries per operating system. Furthermore it uses an artifact transform to unpack the downloaded tar.gz.\r\n\r\nAgain there's a lot of ceremony to do something that should be easier.\r\n\r\n### Context\r\n\r\nWe use this most of the time to download binaries that we then pass to Exec tasks for execution. That way we don't need our engineers to install all of these binaries on their machines.","comments":["This feature request is in the backlog of the relevant team and is prioritized by them.\r\n","Here are two more options, neither of which are great, but I'm listening them here for exhaustiveness and to emphasise that Gradle is too confusing.\r\n\r\n\r\n## Ant Get\r\n\r\n[Ant Get task](https:\/\/ant.apache.org\/manual\/Tasks\/get.html) can be used to download files.\r\n\r\nIt's nice that it's included with Gradle, and that it can be used on demand without much ceremony, but not great. It's not type safe, annoying to cache. Adding advanced features like checksum validation or ETags is theoretically possible but not easy. \r\n\r\n```kotlin\r\nval downloadGradleReadme by tasks.registering {\r\n  val gradleReadmeUrl = \"https:\/\/raw.githubusercontent.com\/gradle\/gradle\/master\/README.md\"\r\n\r\n  inputs.property(\"gradleReadmeUrl\", gradleReadmeUrl)\r\n\r\n  val outputDir = temporaryDir\r\n  outputs.dir(outputDir).withPropertyName(\"outputDir\")\r\n\r\n  doLast {\r\n    val destinationFile = outputDir.resolve(\"readme.md\")\r\n\r\n    ant.withGroovyBuilder {\r\n      \"get\"(\r\n        \"src\" to gradleReadmeUrl,\r\n        \"dest\" to destinationFile,\r\n      )\r\n    }\r\n\r\n    logger.lifecycle(\"Downloaded Gradle README: ${destinationFile.readText()}\")\r\n  }\r\n}\r\n```\r\n\r\n\r\n## ResourceHandler\r\n\r\n[ResourceHandler](https:\/\/docs.gradle.org\/current\/kotlin-dsl\/gradle\/org.gradle.api.resources\/-resource-handler\/index.html) can be used to download files.\r\n\r\nIt can be convenient in build scripts, but it's buggy, it can only download some files, it's not `@Inject`able for use during task execution, and causes cache misses because Gradle generates a random file name.\r\n\r\n```kotlin\r\nval gradleReadme: TextResource = resources.text.fromUri(\r\n  \"https:\/\/raw.githubusercontent.com\/gradle\/gradle\/master\/README.md\"\r\n)\r\n\r\nval downloadGradleReadme by tasks.registering(Sync::class) {\r\n  from(gradleReadme) {\r\n    rename { \"README.json\" }\r\n  }\r\n  into(\"src\/main\/resources\/gradle_data\")\r\n}\r\n```\r\n","Honestly, I've thought of how npm allows for custom script execution and how all those end up in dev dependencies...\r\n\r\nto expand on this... allowing arbitrary downloads and putting them somewhere might consider allowing a similar progression of \"off classpath\" \"script\" execution. That in and of itself would be another feature, but might be worth keeping in brain."],"labels":["a:feature","in:dependency-remoting"]},{"title":"Upgrade wrapper to 8.8-20240322001955+0000","body":"To dogfood native services and instrumentation changes.\r\n\r\nAlso we now initialize NativeServices when calling create project via TestUtil static methods.\r\nThis is done by making sure we call TestUtil constructor, where NativeServices initialization was added due to similar issues in the past see:\r\nhttps:\/\/github.com\/gradle\/gradle\/commit\/19a5d4884e5f2e565659cbe376b12ff8d0b9e21d\r\n\r\n> TestUtil initializes native services before using ProjectBuilder\r\nThis prevents the native services from being initialized into the test\r\ntemporary directory, which is problematic for 2 reasons:\r\n> 1. The native services dll may be locked, preventing directory cleanup.\r\n> 2. The directory may be cleaned up, meaning that native services is\r\n   statically initialized against a non-existent directory.\r\n","comments":["@bot-gradle test this","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"729880b397d7193880868c66fec4b5dbf9196fac\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=729880b397d7193880868c66fec4b5dbf9196fac) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=80018220)","@bot-gradle test this","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"729880b397d7193880868c66fec4b5dbf9196fac\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=729880b397d7193880868c66fec4b5dbf9196fac) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=80020823)"],"labels":["a:chore"]},{"title":"Gradle toolchain warnings are logged on every execution","body":"### Current Behavior\r\n\r\nOn build machines with \"invalid\" Common Linux Locations for Java, the paths are logged on every Gradle task execution. Depending on the task, the invalid paths are even logged multiple times.\r\n```shell\r\ndonnerbart@firefly:~\/IdeaProjects\/helm-charts$ .\/gradlew javaToolChain\r\n\r\n> Configure project :hivemq-operator:hivemq-operator-plugins\r\nPath for java installation '\/usr\/lib\/jvm\/openjdk-21' (Common Linux Locations) does not contain a java executable\r\nPath for java installation '\/usr\/lib\/jvm\/openjdk-17' (Common Linux Locations) does not contain a java executable\r\nPath for java installation '\/usr\/lib\/jvm\/openjdk-8' (Common Linux Locations) does not contain a java executable\r\nPath for java installation '\/usr\/lib\/jvm\/openjdk-11' (Common Linux Locations) does not contain a java executable\r\nPath for java installation '\/usr\/lib\/jvm\/openjdk-17' (Common Linux Locations) does not contain a java executable\r\nPath for java installation '\/usr\/lib\/jvm\/openjdk-11' (Common Linux Locations) does not contain a java executable\r\nPath for java installation '\/usr\/lib\/jvm\/openjdk-8' (Common Linux Locations) does not contain a java executable\r\nPath for java installation '\/usr\/lib\/jvm\/openjdk-21' (Common Linux Locations) does not contain a java executable\r\nPath for java installation '\/usr\/lib\/jvm\/openjdk-8' (Common Linux Locations) does not contain a java executable\r\nPath for java installation '\/usr\/lib\/jvm\/openjdk-17' (Common Linux Locations) does not contain a java executable\r\nPath for java installation '\/usr\/lib\/jvm\/openjdk-11' (Common Linux Locations) does not contain a java executable\r\nPath for java installation '\/usr\/lib\/jvm\/openjdk-21' (Common Linux Locations) does not contain a java executable\r\n```\r\n\r\n### Expected Behavior\r\n\r\nAfter https:\/\/github.com\/gradle\/gradle\/pull\/28311 I expected these paths to be logged once per daemon. The intended caching doesn't seem to work.\r\n\r\n### Context (optional)\r\n\r\nhttps:\/\/github.com\/gradle\/gradle\/issues\/22921\r\nhttps:\/\/github.com\/gradle\/gradle\/issues\/26706\r\n\r\nThe support for `Common Linux Locations` should include that a lot of popular and common OS have these source-only folders for Java. I would suggest to either ignore these locations completely or add proper support in `org.gradle.jvm.toolchain.internal.InstallationLocation` for a source-only locations.\r\n\r\nThe default behavior should then be to ignore source-only locations in the toolchain on successful task executions (no log message at all, please). Only if no suitable installation location can be found, these folders should be listed as \"installation location candidates\", that were ignored because of the missing Java executable.\r\n\r\nThe source-only locations should also be shown when running with `--debug`, but not on `--info`.\r\n\r\nThis would reduce the _constant_ log spam on very common build machines, without taking away useful information in case of a build failure.\r\n\r\n### Steps to Reproduce\r\n\r\n* Have a build machine with the `Common Linux Locations` for Java, where some directories only contain the sources, e.g.:\r\n```shell\r\ndonnerbart@firefly:\/usr\/lib\/jvm$ ls -l\r\ntotal 36\r\nlrwxrwxrwx 1 root root   21  java-1.11.0-openjdk-amd64 -> java-11-openjdk-amd64\r\nlrwxrwxrwx 1 root root   21  java-1.17.0-openjdk-amd64 -> java-17-openjdk-amd64\r\nlrwxrwxrwx 1 root root   21  java-1.19.0-openjdk-amd64 -> java-19-openjdk-amd64\r\ndrwxr-xr-x 9 root root 4096  java-11-openjdk-amd64\r\nlrwxrwxrwx 1 root root   21  java-1.21.0-openjdk-amd64 -> java-21-openjdk-amd64\r\ndrwxr-xr-x 9 root root 4096  java-17-openjdk-amd64\r\nlrwxrwxrwx 1 root root   20  java-1.8.0-openjdk-amd64 -> java-8-openjdk-amd64\r\ndrwxr-xr-x 7 root root 4096  java-19-openjdk-amd64\r\ndrwxr-xr-x 9 root root 4096  java-21-openjdk-amd64\r\ndrwxr-xr-x 7 root root 4096  java-8-openjdk-amd64\r\ndrwxr-xr-x 3 root root 4096  openjdk-11\r\ndrwxr-xr-x 3 root root 4096  openjdk-17\r\ndrwxr-xr-x 3 root root 4096  openjdk-21\r\ndrwxr-xr-x 2 root root 4096  openjdk-8\r\ndonnerbart@firefly:\/usr\/lib\/jvm$ ls -l openjdk-21\r\ntotal 4\r\ndrwxr-xr-x 2 root root 4096  lib\r\nlrwxrwxrwx 1 root root   11  src.zip -> lib\/src.zip\r\n```\r\n* Checkout a Gradle project with a Java Toolchain, e.g. https:\/\/github.com\/hivemq\/helm-charts.\r\n* Execute `.\/gradlew javaToolChain`.\r\n* Repeat the last step.\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\nhttps:\/\/gradle.com\/s\/xaeen3c7me32e\r\n\r\n### Your Environment (optional)\r\n\r\n```shell\r\ndonnerbart@firefly:~\/IdeaProjects\/helm-charts$ cat \/etc\/lsb-release \r\nDISTRIB_ID=Ubuntu\r\nDISTRIB_RELEASE=22.04\r\nDISTRIB_CODENAME=jammy\r\nDISTRIB_DESCRIPTION=\"Ubuntu 22.04.4 LTS\"\r\n```","comments":["@Donnerbart, please clarify.\r\nThe [PR](https:\/\/github.com\/gradle\/gradle\/pull\/28311) you mentioned has not been released yet (it will be included in 8.8, and the latest version is 8.7-RC4 currently).\r\nYou are using 8.5. It will not get an update.\r\n \r\n You are saying:\r\n > The intended caching doesn't seem to work.\r\n \r\n If you are referencing 8.5 here - that is expected. If you are referencing your build of master, please provide details for it."],"labels":["a:bug","to-triage","pending:feedback"]},{"title":"Donat\/problems\/java compile","body":"<!--- The issue this PR addresses -->\r\n<!-- Fixes #? -->\r\n\r\n### Context\r\n<!--- Why do you believe many users will benefit from this change? -->\r\n<!--- Link to relevant issues or forum discussions here -->\r\n\r\n### Contributor Checklist\r\n- [ ] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [ ] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [ ] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [ ] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [ ] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective.\r\n- [ ] Provide unit tests (under `<subproject>\/src\/test`) to verify logic.\r\n- [ ] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [ ] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`.\r\n- [ ] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["@bot-gradle test QuickFeedbackLinux\r\n","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"3dcc1ea90c47f8fdf62c58408aafb6e711e06e42\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=3dcc1ea90c47f8fdf62c58408aafb6e711e06e42) to see all build failures.\n- [QuickFeedbackLinux build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79929507)","@bot-gradle test QuickFeedbackLinux","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"93cdf232de6d3b04685b5199b77117c3f8d22ae7\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=93cdf232de6d3b04685b5199b77117c3f8d22ae7) to see all build failures.\n- [QuickFeedbackLinux build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79934104)"],"labels":["platform:jvm","platform:ide","platform:core_runtime"]},{"title":"Stacktrace filtering and handling logic is inconsistent and spread out","body":"There many places in the codebase, where stacktraces of exceptions are manipulated. In various places, the same or similar logic is duplicated.\r\n\r\nThis issue documents the current places\r\n\r\n1. `StackTraceSanitizier`\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/37ff26f9dd6be75af0cc1a97115fc5250862165d\/platforms\/core-runtime\/logging\/src\/main\/java\/org\/gradle\/internal\/featurelifecycle\/StackTraceSanitizer.java#L58-L64\r\n\r\n2. `StackTraceSanitizingExceptionAnalyser`\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/37ff26f9dd6be75af0cc1a97115fc5250862165d\/subprojects\/core\/src\/main\/java\/org\/gradle\/initialization\/exception\/StackTraceSanitizingExceptionAnalyser.java#L32-L34\r\n\r\n3. CC \/ `DecoratedPropertyProblem.kt`\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/37ff26f9dd6be75af0cc1a97115fc5250862165d\/platforms\/core-configuration\/configuration-cache\/src\/main\/kotlin\/org\/gradle\/configurationcache\/problems\/DecoratedPropertyProblem.kt#L105-L114\r\n\r\n4. `LoggingDeprecatedFeatureHandler`\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/37ff26f9dd6be75af0cc1a97115fc5250862165d\/platforms\/core-runtime\/logging\/src\/main\/java\/org\/gradle\/internal\/featurelifecycle\/LoggingDeprecatedFeatureHandler.java#L187-L195\r\n\r\n5. `DefaultProblemLocationAnalyzer`\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/37ff26f9dd6be75af0cc1a97115fc5250862165d\/subprojects\/core\/src\/main\/java\/org\/gradle\/internal\/problems\/DefaultProblemLocationAnalyzer.java#L130-L141\r\n\r\n\r\n\r\n\r\n\r\n\r\n","comments":[],"labels":["a:chore","in:problems","@ide-experience","re:comprehensibility"]},{"title":"Structural stacktrace classification with `Failure`","body":"Fixes hacky string-matching logic to decorate stacktraces included in CC report by introducing structural stacktrace classification.\r\n\r\nAims at addressing:\r\n- https:\/\/github.com\/gradle\/gradle\/issues\/28517\r\n\r\nThe PR introduces a new `Failure` type that is derived from a `Throwable` but with additional facilities for stacktrace classification. The stacktrace is processed once when converting to a `Failure`, and then its consumers may choose to decide how should the trace be displayed.\r\n\r\nThe `Failure` comes with a `FailurePrinter` companion that is able to print the failures in precisely the same way JDK prints exception stack traces. On top of this, the printer allows filtering out unhelpful stack frames and enables stacktrace partitioning into primary and secondary sections for improved UX in the CC report.\r\n\r\nThe PR intentionally puts the new types into the `problems-api` project to later reuse them for `ProblemDiagnosticsFactory` implementation refactor. The project also makes the types visible to all classes the similar logic lives (see #28517)","comments":["\ud83e\udd77 **Code experts: no user but you matched threshold 10** \n \nalllex, reinsch82 have most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nalllex has most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/core-configuration\/configuration-cache\/src\/main\/kotlin\/org\/gradle\/configurationcache\/problems\/ConfigurationCacheReport.kt` \n \n\nActivity based on git-commit: \n\n |  | alllex | reinsch82| \n | --- | --- | --- | \n | MAR | 2 additions & 2 deletions |  \n| FEB |   |  \n| JAN | 95 additions & 80 deletions |  \n| DEC | 65 additions & 28 deletions |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n alllex: 26% \n\n`platforms\/core-configuration\/configuration-cache\/src\/main\/kotlin\/org\/gradle\/configurationcache\/problems\/DecoratedPropertyProblem.kt` \n \n\nActivity based on git-commit: \n\n |  | alllex | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN | 137 additions & 2 deletions |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n alllex: 100% \n\n`platforms\/core-configuration\/configuration-cache\/src\/main\/kotlin\/org\/gradle\/configurationcache\/problems\/JsonModelWriter.kt` \n \n\nActivity based on git-commit: \n\n |  | alllex | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN | 38 additions & 27 deletions |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n alllex: 11% \n\n`subprojects\/core\/src\/main\/java\/org\/gradle\/internal\/service\/scopes\/GlobalScopeServices.java` \n \n\nActivity based on git-commit: \n\n |  | alllex | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |17 additions & 9 deletions | \n \n\nKnowledge based on git-blame: \n alllex: 1% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>","@bot-gradle test without pts","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"0dde12467cd315276ffa9d37cd952aab6e8cf45a\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds with parameters: `-DenablePredictiveTestSelection=false` for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=0dde12467cd315276ffa9d37cd952aab6e8cf45a) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79927297)","@bot-gradle test this","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"184994884a40f88d10e55f7e674e5a159694fd66\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=184994884a40f88d10e55f7e674e5a159694fd66) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79945756)"],"labels":["30 min review","platform:ide","platform:core_runtime","platform:core_configuration"]},{"title":"Expose more methods for `GradleVersion`","body":"### Expected Behavior\n\nExpose `getMajor()`, `getMinor()`, `getPatch()`, `isStage()`, `isFinal()`, etc\n\n### Current Behavior (optional)\n\n_No response_\n\n### Context\n\n`GradleVersion` models version, however, it's hard to use. Currently, it only exposes only selected aspects.\r\nIt can be useful for our promotion job and for plugin authors","comments":[],"labels":["a:feature","in:core-utilities"]},{"title":"--profile incorrectly works in composite build","body":"### Current Behavior\r\n\r\nWhen using composite build, method [getProjectProfile](https:\/\/github.com\/gradle\/gradle\/blob\/c604256d04ade715e553d0de812a90753bbfa7e2\/platforms\/core-runtime\/build-profile\/src\/main\/java\/org\/gradle\/profile\/BuildProfile.java#L109) is getting two project paths `:` - one for the root build and another one for the included build.\r\n\r\nThis is leads to incorrect profiling result. \r\n\r\n### Expected Behavior\r\n\r\nProject paths for root and included builds differs, profile result is correct.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\nRun `help --profile` on composite build setup\r\n\r\n### Gradle version\r\n\r\n8.8\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Related:\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/28140"],"labels":["a:bug","in:profile-report"]},{"title":"[POC] Stacktrace handling clean up","body":null,"comments":[],"labels":["30 min review","platform:ide","platform:core_runtime","platform:core_configuration"]},{"title":"Configuration cache doesn't detect prohibited calls if they are in a distant Closure descendant","body":"### Current Behavior\n\nCan run Runtime.exec at configuration time inside a Groovy Closure implementation if it doesn't extend `Closure` directly\n\n### Expected Behavior\n\nA configuration cache problem is emitted.\n\n### Context (optional)\n\nWhen detecting Closure implementation for instrumentation, we're not taking the whole type hierarchy into account and only check if the direct super class is Closure.\n\n### Steps to Reproduce\n\n`buildSrc\/src\/main\/java\/MyBaseClosure.java`:\r\n```java\r\nimport groovy.lang.Closure;\r\n\r\npublic class MyBaseClosure extends Closure<Void> {\r\n    protected MyBaseClosure(Object owner) {\r\n        super(owner);\r\n    }\r\n}\r\n```\r\n\r\n`build.gradle`:\r\n```gradle\r\ntask(\"hello\") {\r\n\tdef execClosure = new MyBaseClosure(this) {\r\n\t \tvoid doCall(String argument) {\r\n\t    \texec(\"\/bin\/echo $argument\").waitForProcessOutput(System.out, System.err)\r\n\t\t}\r\n\t}\r\n\texecClosure.setDelegate(Runtime.getRuntime())\r\n\texecClosure.setResolveStrategy(Closure.DELEGATE_ONLY)\r\n\texecClosure(\"world\")\r\n}\r\n```\r\n\r\nRun `gradle --configuration-cache hello`. Note that interception of `exec` in Closures is also broken because of #28507, but patching that issue alone doesn't fix this one.\r\n\r\n\n\n### Gradle version\n\nup to Gradle 8.8 included\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":[],"labels":["a:bug","in:configuration-cache","in:instrumentation"]},{"title":"Some forbidden calls are not intercepted by configuration cache if happen inside a Closure","body":"### Current Behavior\n\nNo configuration cache problems are emitted when some forbidden calls happen inside a Closue at configuration time. This include `Runtime.exec`, `ProcessBuilder.start`. This only happens if the call is performed through delegate\/owner lookup (aka `callCurrent`).\n\n### Expected Behavior\n\nConfiguration cache problems should be emitted for all forbidden calls regardless of the call method.\n\n### Context (optional)\n\ncallCurrent interception relies on call interceptors implementing `SignatureAwareCallInterceptor`. Most of our artisanal interceptors do not implement this interface, only the annotation processor does that by default. \n\n### Steps to Reproduce\n\n```gradle\r\ntask(\"hello\") {\r\n    def execClosure = {\r\n        exec(\"\/bin\/echo Hello\").waitForProcessOutput(System.out, System.err)\r\n    }\r\n    execClosure.setDelegate(Runtime.getRuntime())\r\n    execClosure.setResolveStrategy(Closure.DELEGATE_ONLY)\r\n    execClosure()\r\n}\r\n```\r\n\r\n`gradle --configuration-cache hello`.\n\n### Gradle version\n\nTip-Of-Tree\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["One solution is to migrate all hand-made interceptors to the annotation processor."],"labels":["a:bug","in:configuration-cache"]},{"title":"Integrate local build cache cleanup with global Gradle User Home cleanup config","body":"### Expected Behavior\n\nWhen cache-cleanup is configured via init-script for Gradle User Home, these settings should apply to `caches\/build-cache-1` except where overridden by `DirectoryBuildCache.removeUnusedEntriesAfterDays`.\r\n\r\nSpecifically:\r\n- Setting `cleanup = Cleanup.DISABLED` or `cleanup = Cleanup.ALWAYS` should prevent or force the cleanup of the local build cache\r\n- If `DirectoryBuildCache.removeUnusedEntriesAfterDays` is not set, a value configured via `createdResources.setRemoveUnusedEntriesAfterDays` should be used instead. (The default value of 7 days would remain if neither of these is configured).\r\n\n\n### Current Behavior (optional)\n\nThe schedule of build-cache cleanup is not influenced by the setting of `cleanup = Cleanup.ALWAYS` (or DISABLED).\r\nThe default retention period for build-cache entries is always 7 days, even when `createdResources.removeUnusedEntriesAfterDays` is configured.\n\n### Context\n\nReliable and predictable cleanup of Gradle User Home is important to users attempting to manage disk usage, both locally and on CI.","comments":["This feature request is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:feature","in:build-cache"]},{"title":"Try to reproduce GitHub Action issue","body":"Related to:\r\n\r\n- https:\/\/github.com\/gradle\/gradle\/issues\/28475","comments":[],"labels":["in:execution-engine"]},{"title":"buffer TestKit logs to FileBackedOutputStream","body":"Improves #23965\r\n\r\n### Context\r\n\r\nReduce memory usage when running TestKit tests.\r\n\r\n- If the TestKit output logs are large, then they are buffered into a file.\r\n- Delay converting the buffered output to a String until necessary, when `BuildResult.getOutput()` is called.\r\n\r\n\r\n[FileBackedOutputStream](https:\/\/javadoc.io\/doc\/com.google.guava\/guava\/27.1-jre\/index.html) Javadoc:\r\n\r\n> An [OutputStream](https:\/\/docs.oracle.com\/javase\/9\/docs\/api\/java\/io\/OutputStream.html?is-external=true) that starts buffering to a byte array, but switches to file buffering once the data reaches a configurable size.\r\n> This class is thread-safe.\r\n\r\n### Contributor Checklist\r\n\r\n- [x] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [x] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [x] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [x] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [x] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective.\r\n- [ ] Provide unit tests (under `<subproject>\/src\/test`) to verify logic.\r\n- [x] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [x] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`.\r\n- [x] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["<h3>Change Summary<\/h3> This PR is 84.67% new code. <table> <tr> <td>Platform<\/td> <td>Added Lines<\/td> <td>% of Total Line Changes<\/td> <td>Deleted Lines<\/td> <td>% of Total Line Changes<\/td> <td>Files Changed<\/td> <td>% of Total Files Changed<\/td> <\/tr>\n<tr> <td>bt_ge_build_cache<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>build_infrastructure<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_configuration<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_execution<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_runtime<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>documentation<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>extensibility<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>gradle_enterprise<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>ide<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>jvm<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>kotlin_dsl<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>release_coordination<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>software<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<\/table>\n<automation id=\"summary_table\/summary_table\"\/>","Thank you for your contribution! Before we ask the team responsible for this area to review your PR, could you please fix the commits history so the changes are added in a separate commit, not inside the merging commit?","> Thank you for your contribution! Before we ask the team responsible for this area to review your PR, could you please fix the commits history so the changes are added in a separate commit, not inside the merging commit?\r\n\r\nSorry, what do you mean?","<img width=\"457\" alt=\"image\" src=\"https:\/\/github.com\/gradle\/gradle\/assets\/4946730\/4804c3c1-0c7b-41aa-879f-cdc681fda553\">\r\n","@ov7a I asked for an explanation of what you meant, because I was confused, and I can see you sent me a screenshot of the commits page back. I'm now more confused. Did you mean to add a description in your message? Are you asking me to explain what Git commits are?\r\n\r\nIf you don't want to explain, then feel free to just make the changes yourself. \"Allow edits and access to secrets by maintainers\" is enabled."],"labels":["to-triage","from:contributor"]},{"title":"Gradle cleans local build cache at inopportune times and sometimes freezes during","body":"### Current Behavior\n\nI've had a few users report that Gradle sometimes hangs after a build, and that the console reports that it is \"busy\" cleaning the local build cache:\r\n\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/885137\/2fa1d97f-9c26-4128-8d3a-4e282e87027e)\r\n\r\nIn the example above, they waited over an hour and cleanup did not complete. Also in this example the stall happened during IDE sync, and prevented Android Studio from syncing.\r\n\n\n### Expected Behavior\n\n1. local build cache cleanup should be fast, and not take several minutes (or over an hour)\r\n2. cache cleanup should be skipped for IDE sync, I don't think build cache plays much of a role in that process so I think it could be skipped to speed things up.\n\n### Context (optional)\n\nWe have tried working around this by setting the `removeUnusedEntriesAfterDays` value to a really high number, which technically works, but is not really a solution.\n\n### Steps to Reproduce\n\nWe are unable to reproduce the freezes consistently. Since it has never happened to me directly, I unfortunately don't have any thread dumps to share. It's difficult to further interrupt these user's work to perform debugging steps, they'll usually screenshot their console output, kill the daemon, remove the build-cache folder manually, send me the screenshot, and move on with their day.\n\n### Gradle version\n\n8.5\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\nmacOS (M1 max), JDK 17","comments":["The cleanup should happen quickly (under a few seconds tops), so I don't think there's anything to do about sync specifically. The hanging sounds like a bug, though. I wonder if it's caused by two daemons deciding to both clean up the local cache. \ud83e\udd14\r\n\r\nIf indeed it's about two daemons colliding, then the problem should come out with Square more often than with others because of the large build. It produces lots of local cache artifacts that take longer to clean up, so there's a bigger chance for two daemons to overlap.","In my case, the clean-up is never completely stalled, it\u2019s just very very slow. I don\u2019t know if it\u2019s normal or not for a build-cache-1 of about 6.5G and 40k files. I'll try to see if there's multiple daemons running next time this happens.","Once [this issue](https:\/\/github.com\/gradle\/gradle\/issues\/28505) is fixed, you'll be able to use an init-script to force cache-cleanup at the time of your choosing.\r\nThere's a PR in review so we hope to this fix in Gradle 8.8.\r\n\r\nThat said, the cleanup shouldn't be horrendously slow. I wonder if there is competition between Android Studio and Gradle during the cache cleanup. With the upcoming changes you should be able to force-trigger a cleanup, which might make the situation easier to reproduce."],"labels":["a:bug","in:build-cache"]},{"title":"Add ephemeral CI caching performance test","body":"This test mostly targets the performance of input fingerprinting, with all task outputs coming from the remote build cache. I've added a bunch of libraries which I've seen used in many projects and which add a lot of weight to the classpath to really give the fingerprinting code a good workout. The versions of those libraries are arbitrary, the code does not reference them. I also opted to use the small Java project template as a base, because the difference between it and the large Java project was not very big, but the large one takes a lot longer on the first iteration, as it has to compile many classes and run many tests to fill the build cache.\r\n\r\n### Context\r\nAs discussed on Slack with @ldaley and @lptr, this would show improvements in fingerprinting performance very clearly.\r\n\r\n### Contributor Checklist\r\n- [x] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [x] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [x] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [x] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [ ] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective.\r\n- [ ] Provide unit tests (under `<subproject>\/src\/test`) to verify logic.\r\n- [ ] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [x] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`.\r\n- [x] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["Here's a flame graph, where you can see that this scenario is almost entirely dominated by fingerprinting:\r\n\r\n![clean-check-on-ephemeral-ci-8 8-commit-e05ff61b47f-cpu-raw-flames](https:\/\/github.com\/gradle\/gradle\/assets\/1191797\/fdeea473-7fd7-47b7-972d-65981c7ddadf)","This PR appears to be lacking tests.  Consider adding tests to cover the new functionality.\n\n<automation id=\"lacks_tests\/no_tests\"\/>","<h3>Change Summary<\/h3> This PR is 88.89% new code. <table> <tr> <td>Platform<\/td> <td>Added Lines<\/td> <td>% of Total Line Changes<\/td> <td>Deleted Lines<\/td> <td>% of Total Line Changes<\/td> <td>Files Changed<\/td> <td>% of Total Files Changed<\/td> <\/tr>\n<tr> <td>bt_ge_build_cache<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>build_infrastructure<\/td> <td>35<\/td> <td>48.61%<\/td> <td>7<\/td> <td>9.72%<\/td> <td>3<\/td> <td>60%<\/td> <\/tr>\n<tr> <td>core_configuration<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_execution<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_runtime<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>documentation<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>extensibility<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>gradle_enterprise<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>ide<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>jvm<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>kotlin_dsl<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>release_coordination<\/td> <td>28<\/td> <td>38.89%<\/td> <td>0<\/td> <td>0%<\/td> <td>1<\/td> <td>20%<\/td> <\/tr>\n<tr> <td>software<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<\/table>\n<automation id=\"summary_table\/summary_table\"\/>","@bot-gradle test APT","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"eb70559d93f817221f050f15334737c999dfac79\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=eb70559d93f817221f050f15334737c999dfac79) to see all build failures.\n- [AllPerformanceTestsReadyForRelease build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79835056)"],"labels":["from:contributor","\u26a0\ufe0f Lacks Tests"]},{"title":"Add missing deprecation information to problem","body":"Fixes \r\n - gradle\/gradle-private#4084\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["@bot-gradle test this\r\n","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"68443f74c9aae6d4b5090212bd1a8dad6c124172\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=68443f74c9aae6d4b5090212bd1a8dad6c124172) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79991040)","\ud83e\udd77 **Code experts: donat, lptr** \n \ndonat, lptr have most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \ndonat has most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/core-runtime\/logging\/src\/main\/java\/org\/gradle\/internal\/deprecation\/DeprecatedFeatureUsage.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR | 6 additions & 5 deletions |  \n| FEB |   |  \n| JAN |   |  \n| DEC | 1 additions & 1 deletions |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n donat: 4% \n\n`platforms\/core-runtime\/logging\/src\/main\/java\/org\/gradle\/internal\/deprecation\/DeprecationLogger.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR | 1 additions & 1 deletions |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n donat: 10% \n\n`platforms\/core-runtime\/logging\/src\/main\/java\/org\/gradle\/internal\/deprecation\/DeprecationMessage.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR | 1 additions & 1 deletions |  \n| FEB |   |  \n| JAN |   |  \n| DEC | 1 additions & 1 deletions |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n donat: 4% \n\n`platforms\/core-runtime\/logging\/src\/main\/java\/org\/gradle\/internal\/deprecation\/DeprecationMessageBuilder.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR | 1 additions & 1 deletions |  \n| FEB |   |  \n| JAN | 4 additions & 4 deletions |  \n| DEC | 2 additions & 2 deletions |  \n| NOV |   |1 additions & 0 deletions | \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n donat: 5% \n\n`platforms\/core-runtime\/logging\/src\/main\/java\/org\/gradle\/internal\/featurelifecycle\/LoggingDeprecatedFeatureHandler.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 6 additions & 7 deletions |  \n| JAN | 2 additions & 2 deletions |  \n| DEC | 5 additions & 4 deletions |  \n| NOV | 26 additions & 22 deletions |  \n| OCT | 2 additions & 2 deletions |  \n \n\nKnowledge based on git-blame: \n donat: 10% \n\n`platforms\/core-runtime\/logging\/src\/test\/groovy\/org\/gradle\/internal\/deprecation\/DeprecatedFeatureUsageTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR | 5 additions & 5 deletions |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n donat: 9% \n\n`platforms\/core-runtime\/logging\/src\/test\/groovy\/org\/gradle\/internal\/deprecation\/LoggingDeprecatedFeatureHandlerTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR | 3 additions & 3 deletions |  \n| FEB |   |1 additions & 1 deletions | \n| JAN |   |  \n| DEC |   |  \n| NOV | 1 additions & 1 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n donat: 1% \n\n`platforms\/extensibility\/plugin-use\/src\/integTest\/groovy\/org\/gradle\/plugin\/repository\/PluginManagementDslSpec.groovy` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC | 4 additions & 0 deletions |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n donat: 1% \n\n`platforms\/ide\/problems-api\/src\/main\/java\/org\/gradle\/api\/problems\/internal\/DefaultProblemBuilder.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR | 9 additions & 9 deletions |  \n| FEB | 54 additions & 49 deletions |  \n| JAN | 21 additions & 17 deletions |  \n| DEC | 73 additions & 32 deletions |  \n| NOV | 236 additions & 0 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n donat: 80% \n\n`platforms\/ide\/problems-api\/src\/main\/java\/org\/gradle\/api\/problems\/internal\/InternalProblemSpec.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR | 2 additions & 2 deletions |  \n| FEB | 22 additions & 11 deletions |  \n| JAN |   |  \n| DEC | 91 additions & 0 deletions |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n donat: 100% \n\n`platforms\/software\/dependency-management\/src\/integTest\/groovy\/org\/gradle\/integtests\/resolve\/DetachedConfigurationsIntegrationTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC | 4 additions & 0 deletions |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n donat: 2% \n\n`subprojects\/core\/src\/main\/java\/org\/gradle\/api\/services\/internal\/BuildServiceProviderNagger.java` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n \n`subprojects\/internal-integ-testing\/src\/main\/groovy\/org\/gradle\/integtests\/fixtures\/problems\/KnownProblemIds.groovy` \n \n\nActivity based on git-commit: \n\n |  | donat | lptr| \n | --- | --- | --- | \n | MAR | 8 additions & 3 deletions |  \n| FEB | 83 additions & 0 deletions |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n donat: 100% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>","@bot-gradle test this","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"d61d11141813686787df20be7236c9e1e404748b\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=d61d11141813686787df20be7236c9e1e404748b) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=80016717)"],"labels":["platform:software","platform:ide","platform:build_infrastructure","platform:core_runtime"]},{"title":"Enrich auto-generated `Closure<>` methods with extra type information","body":"Partially solves #27077, as this PR would add the annotations to the generated methods.\r\n\r\n@ljacomet I'm not sure of the `in:` label, can you help me out?","comments":["\ud83e\udd77 **Code experts: alllex, adammurdoch** \n \nalllex has most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nldaley, adammurdoch have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/core-configuration\/model-core\/src\/main\/java\/org\/gradle\/internal\/instantiation\/generator\/AsmBackedClassGenerator.java` \n \n\nActivity based on git-commit: \n\n |  | alllex |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 36% \nldaley: 1% \n\n`platforms\/core-configuration\/model-core\/src\/test\/groovy\/org\/gradle\/internal\/instantiation\/generator\/AsmBackedClassGeneratorDecoratedTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | alllex |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n ldaley: 57% \nadammurdoch: 33% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>","It seems #27077 is mainly about improving the IDE experience with statically defined `Closure` taking methods. Do these runtime decorations affect the IDE experience in any way?","Unfortunately, with the time @hegyibalint and I spent on this, we did not get that far.\r\n\r\nWhat we could already observe:\r\n* IntelliJ IDEA navigation takes you directly to the `Action` taking method, skipping the `Closure` taking method used at runtime.\r\n\r\nThings that remain to be done:\r\n* Finish the code generation so the annotation is properly visible at runtime\r\n* Assess impact on IntelliJ IDEA, VSCode and Eclipse at least"],"labels":["a:feature","in:groovy-dsl","1 min review","platform:core_configuration"]},{"title":"Deprecation warning info should not get in the way of a build failure","body":"### Expected Behavior\n\nWhen a build fails, the first thing that users should see on the console (or IDE output) is the reason for the failure\n\n### Current Behavior (optional)\n\nWhen deprecation warnings are emitted, they occupy a significant chunk of the output at the very end. There is a very tiny chance that this output is actually useful at all in a case of a build failure.\r\n\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/2759152\/3b95b604-7d69-4f8a-a0f8-d0c0349b9e86)\r\n\n\n### Context\n\n_","comments":[],"labels":["a:feature","in:console","in:invoking-gradle","@ide-experience","re:comprehensibility"]},{"title":"Gradle sanity check not performing proper lint checks","body":"### Issue type\n\nPolishing\n\n### Problem description\n\n\r\nHi there, as I was trying to work on an issue within gradle i have found for some reason some of the linting checkstyles were commented out, I am not sure if this intentional by the team or not. \r\n```\r\ndiff --git a\/build-logic-commons\/code-quality-rules\/src\/main\/resources\/checkstyle\/checkstyle.xml b\/build-logic-commons\/code-quality-rules\/src\/main\/resources\/checkstyle\/checkstyle.xml\r\nindex 6cbb4182e42..b4c5a7070a1 100644\r\n--- a\/build-logic-commons\/code-quality-rules\/src\/main\/resources\/checkstyle\/checkstyle.xml\r\n+++ b\/build-logic-commons\/code-quality-rules\/src\/main\/resources\/checkstyle\/checkstyle.xml\r\n@@ -53,10 +53,10 @@\r\n         <module name=\"WhitespaceAfter\">\r\n             <property name=\"tokens\" value=\"COMMA, SEMI\"\/>\r\n         <\/module>\r\n-        <!--<module name=\"WhitespaceAround\">-->\r\n+        <module name=\"WhitespaceAround\">\r\n             <!-- everything except { and } -->\r\n             <!--<property name=\"tokens\" value=\"ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND\"\/>-->\r\n-        <!--<\/module>-->\r\n+        <\/module>\r\n \r\n         <!-- Coding -->\r\n         <module name=\"CovariantEquals\"\/>\r\n@@ -86,7 +86,7 @@\r\n         <module name=\"IllegalImport\">\r\n             <!--\r\n                 We shouldn't use jdk.internal types.\r\n-                \r\n+\r\n                 com.beust and org.testng.collections has classes that look like Guava.\r\n \r\n                 We prefer to import javax.annotation and fully-qualify references to org.jetbrains.annotations.\r\n```\r\n\r\nhere is the output with some of the checkstyles enabled\r\n\r\n```\r\n$ .\/gradlew test-base:checkstyleMain\r\nReusing configuration cache.\r\n\r\n> Task :testing-base:checkstyleMain\r\n[ant:checkstyle] [ERROR] \/Users\/Thomas\/Projects\/gradle\/platforms\/software\/testing-base\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/testing\/junit\/result\/TestClassResult.java:64:11: 'if' is not followed by whitespace. [WhitespaceAround]\r\n[ant:checkstyle] [ERROR] \/Users\/Thomas\/Projects\/gradle\/platforms\/software\/testing-base\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/testing\/DefaultTestSuiteDescriptor.java:31:30: '+' is not preceded with whitespace. [WhitespaceAround]\r\n[ant:checkstyle] [ERROR] \/Users\/Thomas\/Projects\/gradle\/platforms\/software\/testing-base\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/testing\/filter\/TestSelectionMatcher.java:246:10: 'else' is not preceded with whitespace. [WhitespaceAround]\r\n[ant:checkstyle] [ERROR] \/Users\/Thomas\/Projects\/gradle\/platforms\/software\/testing-base\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/testing\/filter\/TestSelectionMatcher.java:246:10: '}' is not followed by whitespace. [WhitespaceAround]\r\n[ant:checkstyle] [ERROR] \/Users\/Thomas\/Projects\/gradle\/platforms\/software\/testing-base\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/testing\/filter\/TestSelectionMatcher.java:246:14: 'else' is not followed by whitespace. [WhitespaceAround]\r\n[ant:checkstyle] [ERROR] \/Users\/Thomas\/Projects\/gradle\/platforms\/software\/testing-base\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/testing\/filter\/TestSelectionMatcher.java:246:14: '{' is not preceded with whitespace. [WhitespaceAround]\r\n[ant:checkstyle] [ERROR] \/Users\/Thomas\/Projects\/gradle\/platforms\/software\/testing-base\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/testing\/worker\/TestEventSerializer.java:222:20: 'catch' is not followed by whitespace. [WhitespaceAround]\r\n[ant:checkstyle] [ERROR] \/Users\/Thomas\/Projects\/gradle\/platforms\/software\/testing-base\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/testing\/worker\/TestWorker.java:110:25: 'synchronized' is not followed by whitespace. [WhitespaceAround]\r\n[ant:checkstyle] [ERROR] \/Users\/Thomas\/Projects\/gradle\/platforms\/software\/testing-base\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/testing\/logging\/JavaClassNameFormatter.java:34:14: 'while' is not followed by whitespace. [WhitespaceAround]\r\n```\r\n\r\nI am happy to raise PRs to help with the liniting(maybe something like one highlevel folder per PR) and after all that is done reenable the checkstyle, cause i think straight enabling the checkstyle will most likely cause the ci to fail.\r\n\n\n### Context (optional)\n\n_No response_","comments":["This issue needs a decision from the team. They have been informed. Response time may vary.","@yctomwang A PR fixing that would be appreciated! Please uncomment the settings and fix the formatting where needed. ","@ov7a thanks Vlad, I am happy to raise PR, in terms of the actual PR, do you guys want one mass PR with all the formatting fixed?","Yep, single PR would be the best."],"labels":["a:chore","in:building-gradle"]},{"title":"Gradle builds using 'mavenLocal()' are extremely slow","body":"### Current Behavior\r\n\r\nI use Maven 95%. My local Maven repository is huge, and for the rare cases in which I have to use Gradle, I do not want it to download all the same artifacts again, given the fact that my SSD does not have unlimited free space. Therefore, whichever project I am cloning, e.g. to help other people on Stack Overflow, I always add `mavenCentral()` and `mavenLocal()` repositories to the build. Otherwise, even for e.g. a simple Spring Boot project, Gradle would download tons of dependencies which already reside on my local disk.\r\n\r\nThe problem is that with `mavenLocal()` in place, even the smallest projects (a single class) take 20 to 60 seconds to even start building, probably because there is no caching for the local Maven repo and everything is scanned from scratch every single build. Even if the project is up to date and the build does nothing, the duration is the same. Removing `mavenLocal()` makes the build time drop from 60 s to 1 s.\r\n\r\nFor many projects, I cannot just omit `mavenLocal()`, because the Gradle build needs local build artifacts from my Maven builds during development. But currently, this makes using Gradle a PITA.\r\n\r\n### Expected Behavior\r\n\r\nGradle should utilise the local Maven repository more intelligently and, once scanned, should be able to use it as efficiently as a local Gradle repository. \r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\nOn a machine with a huge local Maven repository, add `mavenLocal()` to a simple Gradle project and build it.\r\n\r\n### Gradle version\r\n\r\n8.6, but in 7.0 or 6.6.1 it is the same\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\nWindows 10 Pro","comments":["I am curious if [Repository Content Filtering](https:\/\/docs.gradle.org\/current\/userguide\/declaring_repositories.html#sec:repository-content-filtering) could help you. You said there are a few dependencies that require `mavenLocal`. What if you used `includeGroup` so that `mavenLocal` only searched for these specific dependencies?","@mgroth0, thanks for the advice, but that would be a tedious workaround, not a solution. Usually, it is different for each project which dependencies it needs. Imagine trying to predict which direct and transitive dependencies - usually dozens of them - a Spring Boot project might need. The solution would be to make a local Maven repository a first-class citizen when it comes to resolving dependencies. Currently, it rather seems to resemble an unwanted stepchild.","You may be right. Just speaking as a fellow user though, I have found that setting repository content filtering has benefits beyond just performance; it has also helped me make builds more deterministic and prevent strange dependency conflicts that can occasionally arise since gradle is sensitive to the order that repositorties are defined. It was tedius for me to setup but I do not regret it. Though, its understandable that for your project it might be less realistic.","This issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.","> My local Maven repository is huge, and for the rare cases in which I have to use Gradle, I do not want it to download all the same artifacts again, given the fact that my SSD does not have unlimited free space. Therefore, whichever project I am cloning, e.g. to help other people on Stack Overflow, I always add mavenCentral() and mavenLocal() repositories to the build. \r\n\r\nThis is based on a misunderstanding. Even if `mavenLocal()` is NOT included as a repository, Gradle will look into `~\/.m2\/repository` to attempt to avoid re-downloading artifacts: if your Maven local has a required artifact, Gradle will copy it from there assuming the hash matches the hash declared in the remote repository. See here: https:\/\/docs.gradle.org\/current\/userguide\/dependency_resolution.html#sub:cache_artifact_reuse\r\n\r\nSo `mavenLocal` is not useful to speed up resolution. If you need to consume artifacts produced locally by Maven, then using `mavenLocal` with repository content filtering is the way to go. [See here](https:\/\/docs.gradle.org\/current\/userguide\/declaring_repositories.html#sec:case-for-maven-local) for more information.","Why did you close the issue? Gradle is still slow. Is that not worth investigating and fixing? ","I'll reopen this, since I'm not the one who normally processes issues. \r\nYou'll have much more luck getting this investigated if you :\r\n\r\n1) Provide a reproducer. You say that even a small project with 1 class will take 60s to start. Please provide a GitHub repo that someone can clone and reproduce these results.\r\n2) Provide a Gradle Build Scan\u00ae. These give a good idea of what's taking a long time WRT dependency resolution.","1. https:\/\/github.com\/kriegaex\/SO_AJ_GradleFreefairAspectNotFiring_78167916\r\n2. I ran `gradle clean build --scan` twice in the same console session. Weirdly enough, the first run was faster than the second.\r\n    * First run, 12 s: https:\/\/gradle.com\/s\/cgencumllcim6\r\n    * Second run, 25 s: https:\/\/gradle.com\/s\/25rpvmwg3h65s\r\n","I tried again in a Git Bash session:\r\n\r\n```text\r\n$ time gradle clean build\r\n\r\nBUILD SUCCESSFUL in 53s\r\n3 actionable tasks: 3 executed\r\n\r\nreal    0m54.744s\r\nuser    0m0.045s\r\nsys     0m0.351s\r\n\r\n$ time gradle clean build\r\n\r\nBUILD SUCCESSFUL in 4s\r\n3 actionable tasks: 3 executed\r\n\r\nreal    0m5.292s\r\nuser    0m0.135s\r\nsys     0m0.273s\r\n\r\n```\r\n\r\nI really have no idea what takes 55 seconds to initialise here, and why sometimes it is \"only\" 20-25 seconds. The computer was idle otherwise in both situations.\r\n\r\nPlease note, that in both cases (Gradle-scanned builds above and the ones I ran just with `time` now), there was **no `mavenLocal()`**. But like @bigdaz said:\r\n\r\n> Even if `mavenLocal()` is NOT included as a repository, Gradle will look into `~\/.m2\/repository` to attempt to avoid re-downloading artifacts\r\n\r\nI have no idea, if the local Maven repo is involved in the long initialisation time or not (it is just an educated guess), I am just giving you the facts.\r\n","> * Second run, 25 s: https:\/\/gradle.com\/s\/25rpvmwg3h65s\r\n\r\nLooking at the build scan, I noticed that most of the time is spent in initialisation, not in execution, which I found weird.\r\n\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/1537384\/a43f4e67-1b07-48b1-b15a-97248ab2383c)\r\n\r\nSo, I started searching explicitly for \"gradle initialisation slow\" and found [this Stack Overflow answer](https:\/\/stackoverflow.com\/a\/74626372\/1082681). Adding\r\n\r\n```properties\r\norg.gradle.vfs.watch=true\r\n```\r\n\r\nto `[USER_HOME]\/.gradle\/gradle.properties` fixes he problem for me, as it seems. I.e., this issue is not really about `mavenLocal()`, as I thought, because somehow it seemed to help to comment it out (but maybe there was just a Gradle daemon already running somewhere, shortening the build time).\r\n\r\nI think, this issue might be a duplicate of #17955, which is unfixed since 2021. Please investigate my build scans and ask for more verification data, if you like. I will be happy to provide any information you need to determine, if this is really a duplicate or maybe a separate case or new wrinkle."],"labels":["a:bug","in:virtual-file-system","in:maven-integration",":wave: team-triage","in:dependency-remoting"]},{"title":"Documentation contains only Kotlin code examples","body":"### Issue type\r\n\r\nBarrier\r\n\r\n### Problem description\r\n\r\nI don't know Kotlin. I'm a Java developer. I use Gradle to develop Java code. But now I have to somehow know Kotlin just to learn Gradle to develop Java. Groovy is a superset of Java so it makes sense. Kotlin is not a superset of Java so it does not make sense to me, especially the scripting DSL used by Gradle. You're putting the barrier very high for people to be able to learn Groovy. It seems like a poor strategic move on your part, since most people who use Gradle are Java developers.\r\n\r\n### Context (optional)\r\n\r\nI'm finding it hard to learn Gradle.\r\n\r\n### Page with the problem\r\n\r\nAll of them","comments":["Every time a Kotlin DSL code block example appears, you can switch it to Groovy by clicking the 'Groovy' tab on the code block. It also changes the rest of the code blocks on the same page and all other pages when you do so (presumably if you have cookies enabled). If there is one or more blocks where this isn't the case, I would share those examples.","Okay I see that some pages have that. Some don't. For example https:\/\/docs.gradle.org\/current\/userguide\/partr5_build_scripts.html\r\n\r\nThat led me to believe that all of them don't have it.","The issue is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:documentation","in:tutorial"]},{"title":"Worker API documentation incorrectly says process isolation creates daemons that persist across builds","body":"### Issue type\n\nWrong or misleading information\n\n### Problem description\n\nhttps:\/\/docs.gradle.org\/8.6\/userguide\/worker_api.html#creating_a_worker_daemon says\r\n\r\n> These worker daemon processes will persist across builds and can be reused during subsequent builds.\r\n\r\nThis is not accurate since #21632 changed workers to run session scoped instead of daemon scoped.\r\n\r\nIt also talks about performance improvements when using worker daemons:\r\n\r\n> Note that the execution time may be somewhat high. This is because Gradle has to start a new process for each worker daemon, which is expensive. However, if you run your task again, you\u2019ll see that it runs much faster. This is because the worker daemon(s) started during the initial build have persisted and are available for use immediately during subsequent builds.\r\n\r\nThe last two sentences should be removed - there doesn't seem to be any performance benefit to using process isolation now, an in fact it will be quite slow because Gradle has to start a new process for each worker daemon for every build.\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/8.6\/userguide\/worker_api.html#creating_a_worker_daemon","comments":["This issue needs a decision from the team responsible for that area. They have been informed. Response time may vary."],"labels":["in:daemon","in:workers","a:documentation",":wave: team-triage"]},{"title":"Make workers run as daemon scoped","body":"### Expected Behavior\n\n#21632 switched worker implementation to make workers session scoped instead of daemon scoped. This is a request to correct the flaws in the implementation that led to that PR being implemented in Gradle 8 and changing workers back to being daemon scoped.\n\n### Current Behavior (optional)\n\nWorkers are session scoped.\n\n### Context\n\nSession scoped workers can create a large overhead when starting a new build which has many tasks that start workers and those workers are resource intensive to start.","comments":["We need more information to understand the request. Could you please provide more context about what you want to achieve?\r\n\r\nIf we receive a clear use case description, we may be able to suggest a workaround.\r\n\r\nThis issue will be closed after 7 days unless you provide more information.\r\n\r\n***\r\n\r\n1. Can you please provide a detailed scenario when it affects you?\r\n2. Can it be solved by [managing](https:\/\/docs.gradle.org\/current\/userguide\/worker_api.html#creating_a_worker_daemon) daemons\/workers (potentially by adding features to Gradle)?\r\n3. Can it be solved by adding a flag to have a choice between session-scoped and daemon-scoped workers?\r\n"],"labels":["a:feature","to-triage","pending:feedback"]},{"title":"Correct typo in method name","body":null,"comments":["@bot-gradle test this","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"8c2f7054462f25ecbd92725c10d058fcd950e1e8\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=8c2f7054462f25ecbd92725c10d058fcd950e1e8) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79732435)","\ud83e\udd77 **Code experts: adammurdoch, reinsch82** \n \ntresat has most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nadammurdoch, reinsch82 have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`subprojects\/core\/src\/main\/java\/org\/gradle\/internal\/buildevents\/BuildExceptionReporter.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV | 9 additions & 4 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 29% \nreinsch82: 26% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>"],"labels":["a:chore","1 min review"]},{"title":"\"Immutable workspace contents have been modified\" failure when workspace contents are not modified","body":"### Current Behavior\n\nA build can fail with `Immutable workspace contents have been modified` without any modification of the directory in question.\n\n### Expected Behavior\n\nThis error should only occur when files in the workspace have been modified directly or by a non-Gradle process.\n\n### Context (optional)\n\nA few users have reported having builds fail with `Immutable workspace contents have been modified` on CI, where it is very unlikely that these workspace files have been directly modified. Instead, it appears that some scenario driven by Gradle can produce this error.\r\n\r\nI managed to reproduce this scenario once using a [fork of the repository](https:\/\/github.com\/bigdaz\/Anki-Android) where this [issue was reported to gradle\/actions](https:\/\/github.com\/gradle\/actions\/issues\/47).\r\n\r\n[Here is the workflow run demonstrating this failure](https:\/\/github.com\/bigdaz\/Anki-Android\/actions\/runs\/8251951910\/job\/22570285686#step:10:155). \r\n\r\nI have captured the offending `transforms-4` directory immediately prior to the build failing, which allows offline inspection of the contents. However, when I inspect the `metadata.bin` file and calculate the output hashes (using [logic copied from AssignImmutableWorkspaceStep](https:\/\/github.com\/gradle\/gradle\/blob\/c0cd6d646441a195bb0ba2d9762b3130dd96fd4a\/platforms\/core-execution\/execution\/src\/main\/java\/org\/gradle\/internal\/execution\/steps\/AssignImmutableWorkspaceStep.java#L108-L113)), then the hashes in `metadata.bin` exactly match those calculated.\r\n\r\nI don't have an explanation for why the error is being raised for this particular `transforms-4` workspace directory, but it caused the build to fail consistently and repeatedly once in place.\r\n\r\nHere's the data extracted from the `transforms-4\/f46cf63d0a549c8bc814e25133f449eb` workspace:\r\n```\r\nMetadata for f46cf63d0a549c8bc814e25133f449eb\r\nOriginMetadata{buildInvocationId=v5utnjtubnbupherwskzgpwdxy, executionTime=PT1.468S}\r\n{outputDirectory=[33a5350884b175260845f1ad15ac99cf], resultsFile=[91d756dd3d78b7213fe867e6756372d4]}\r\n-----\r\nCalculated output hashes\r\n{outputDirectory=[33a5350884b175260845f1ad15ac99cf], resultsFile=[91d756dd3d78b7213fe867e6756372d4]}\r\n```\n\n### Steps to Reproduce\n\nThis error is difficult to reproduce, and I have only managed to do so once. However, once the error first appears, it is persistent until the underlying `transforms-4\/XX` directory is removed.\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["@gradle\/bt-execution a thought: since the actual workspace directory appears to be internally consistent in the failing case, is it possible that we are incorrectly using a previously calculated value for the hash of `transformed\/android.jar`, rather than recalculating the hash of the actual contents? \r\n\r\n[Looking at the code](https:\/\/github.com\/gradle\/gradle\/blob\/c0cd6d646441a195bb0ba2d9762b3130dd96fd4a\/platforms\/core-execution\/execution\/src\/main\/java\/org\/gradle\/internal\/execution\/steps\/AssignImmutableWorkspaceStep.java#L108-L111) it appears the hash is being recalculated, but I'm not sure what caching might be in place.","Here's a theory that seems to fit what we see. Consider the following chain of events:\r\n\r\n1) A build is executed that triggers the execution of our transform in question, and output contents \"version 1\" is produced in the `$GUH\/caches\/transforms-4\/XXX` workspace directory.\r\n2) Something causes `transforms-4\/XXX` to be cleaned up (but not all of the Gradle user home (GUH) caches). This can be the Gradle GitHub Action aggressively deleting entries untouched during the build (say, after a build that does _not_ trigger the transform), or the regular GUH cleanup triggering, or some sort of other cleanup routine.\r\n3) Another build is executed, which correctly recognizes that the `transforms-4\/XXX` workspace directory is missing, and proceeds to recreate it. It's important that it produces byte-for-byte _different_ output, such as a JAR with different timestamps.\r\n4) Yet another build is executed that once again triggers the transform. Gradle recognizes that `transforms-4\/XXX` is available, and proceeds to reuse it, but then the validation of the content on disk fails.\r\n\r\nThe culprit could be the `CachingFileHasher` used for caching file hashes during and between builds in the GUH caches. This cache is persisted to disk, so it survives even daemon restarts, and the GitHub Action copies it (along with the rest of the global caches) to every executor. So even ephemeral GitHub builds get a warm file hash cache.\r\n\r\nThe assumption is that this file hash cache retains hashes for the \"version 1\" output:\r\n\r\na) when it's deleted from disk, and \r\nb) then when it is subsequently recreated as \"version 2\", the old content is not recognized as stale.\r\n\r\nIf these hold true, then build 4) above would read the \"version 2\" of `metadata.bin` from disk with the hash for the \"version 2\" outputs, but when it snapshotted the outputs, it would get stale hashes from the file hash cache.\r\n\r\nWe know that a) is true because `LeastRecentlyUsedCacheCleanup` doesn't remove entries from the file hash cache when it deletes cache content.\r\n\r\nAs for b), with the GitHub Action we know that the action itself tampers with file timestamps in the global caches. It's a bit unclear whether in the non-ephemeral case we could also somehow end up with `GradleUserHomeScopeFileTimeStampInspector` not recognizing a file in the global caches as changed, and returning the old timestamp.\r\n\r\n## TODO\r\n\r\n1) Add a flag to disable the consistency check to unblock the Gradle 8.7 release\r\n2) Add some more diagnostics to confirm assumptions about stale content in the file hash cache being the root cause of our problems.\r\n3) Either stop the Gradle GitHub Action from tampering with file timestamps in the global caches, or exclude the file hash cache files from the caches it carries from executor to executor.\r\n3) Let `LeastRecentlyUsedCacheCleanup` remove deleted entries from the file hash cache. It should also invalidate any relevant parts of the VFS. (As a simplification we could just drop both caches whenever a cleanup happens.)\r\n4) Integrate the file hash cache and the VFS more closely; make sure the relevant entries are removed from the file hash cache when a part of the VFS is invalidated. We should do this with `FileContentCache` as well. There should be a single mechanism inside a daemon to invalidate everything we know about a location, and it should invalidate all caches.\r\n5) Implement a mechanism where cache cleanup can force other daemons to drop deleted content from both the file hash cache and the VFS. It would be ideal to make sure no other daemon actually runs while cache cleanup happens.\r\n","Actually, for the non-ephemeral case, when we have the daemon surviving between builds, it's possible the VFS itself retains the stale hashes after the cleanup. FTR, the services wrap each other thusly:\r\n\r\n```mermaid\r\ngraph TD\r\n  AssignImmutableWorkspaceStep:::highlight --> FileCollectionSnapshotter\r\n  FileCollectionSnapshotter --> OutputSnapshotter\r\n  OutputSnapshotter --> FileSystemAccess\r\n  FileSystemAccess --> VirtualFileSystem\r\n  VirtualFileSystem:::highlight --> FileHasher:::highlight\r\n\r\n  classDef highlight stroke-width:4px\r\n```","I consistently get this issue with the task `DexMergingTask`, with or without daemon, both on CI and locally.\r\nI'm using Gradle 8.6","@lamphamTL can you maybe create a reproducer and share it with us as github project or a zip file? That would help us a lot. \r\nMore information about your setup could also help: e.g. Operating system, filesystem, AGP version, task you run when it fails, project setup etc.\r\n","@lamphamTL when you say \"consistently\", does this mean that the issue reoccurs even after you remove the offending `transforms-4\/XXX` directory? If not, please make a full copy of your `~\/.gradle` directory while your project is in a bad state.\r\n\r\nThen, some experiments to try:\r\n1) Run the build with a clean Gradle User Home (ie `.\/gradlew -g HOME ...`\r\n2) Run the build with a fresh clone of your project repository\r\n\r\nKnowing if these experiments can reproduce the issue will help. We are having trouble getting a reliable reproducer for this issue, so any evidence you can provide may be helpful.","@bigdaz  no, removing GUH caches did make the first build to work; however, it starts failing consistently from the second one","I've made the handling of the problem more sophisticated in:\r\n\r\n- https:\/\/github.com\/gradle\/gradle\/pull\/28503\r\n\r\nWith this change when Gradle bumps into an inconsistent workspace, it will not fail the build, but instead discard the workspace and re-run the work. It will also produce a deprecation warning with some details:\r\n\r\n```text\r\n> Transform lib1.jar (project :lib) with Duplicator\r\nThe contents of the immutable workspace '...' have been modified. This behavior has been deprecated. This will fail with an error in Gradle 9.0. These workspace directories are not supposed to be modified once they are created. The modification might have been caused by an external process, or could be the result of disk corruption. The inconsistent workspace has been moved to '...', and will be recreated.\r\noutputDirectory:\r\n - transformed (Directory, 7cfc7dbc0901a39cf9a5f44f7ea491b8)\r\n   - 0 (Directory, 78af062fd74d95b8d382f5adabb136f5)\r\n     - lib1-green.jar (RegularFile, 1ba4170a71868b572bca2e747af7a707)\r\n   - tamper-tamper.txt (RegularFile, c2a9b87422fcb39f4f55ff182939992b)\r\n\r\nresultsFile:\r\n - results.bin (RegularFile, 44ec6391aaade3532e59b1d99d292b4d)\r\n```\r\n\r\nThe more sophisticated handling of the problem will be included in 8.7-rc-4 (soon to be released).\r\n\r\nI moved this issue to 8.8-rc-1, as we still need to figure out what causes the false positives, and come up with a fix.","@lptr I encountered this error today on my GitLab CI server after update to Gradle 8.6. I'm using remote Gradle cache to share between branches therefore Gradle cache directory changes every time. \r\n\r\nIt happens consistently for all branches which fetched cache created by `main` branch so maybe that's a hint to reproduce it.\r\n\r\nLocal machine so far wasn't affected.\r\n\r\nAlso not sure if relevant but I'm also using custom `GRADLE_ENCRYPTION_KEY` on my CI.","Could you please try using 8.7-rc-4? It should have the improved behavior where we don't fail the build anymore."],"labels":["a:bug","in:execution-engine","affects-version:8.6"]},{"title":"Dependency updates","body":"* Bump commons compress to 1.26.1\r\n* Bump bouncycastle to 1.73\r\n* Bump okio to 3.4.0 and woodstox-core to 6.4.0\r\n* Bump zinc to 1.9.6\r\n* Bump commons-httclient in performance templates \r\n\r\nAnd necessary transitive updates, code changes and cleanups.","comments":["@bot-gradle test","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"39c96064bb8fafda21fc09c5dcb3c142d778b868\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=39c96064bb8fafda21fc09c5dcb3c142d778b868) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79957101)","@bot-gradle test","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"b86b1bd41c137778c08d39ac6355722c58287110\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=b86b1bd41c137778c08d39ac6355722c58287110) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79961779)"],"labels":["a:chore"]},{"title":"`configureEach` is not a drop-in replacement for `whenObjectAdded`","body":"### Issue type\n\nWrong or misleading information\n\n### Problem description\n\n[This page](https:\/\/docs.gradle.org\/current\/userguide\/task_configuration_avoidance.html#sec:old_vs_new_configuration_api_overview) implies that `DomainObjectCollection.configureEach(org.gradle.api.Action)` is a drop-in replacement for `DomainObjectCollection.whenObjectAdded(org.gradle.api.Action)`, but there are several places in the AGP codebase where substituting the former for the latter breaks AGP because the behavior is slightly different (`whenObjectAdded` doesn't apply to objects already in the collection, but `configureEach` does).\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/current\/userguide\/task_configuration_avoidance.html#sec:old_vs_new_configuration_api_overview","comments":["The documentation does not say that this is a \"drop-in replacement\" and we don't think it's implied. However, it does not explicitly state that you need to adjust your scripts when migrating from the old API to the new API, not just replace the old style with the new style.\r\n\r\nThis can be stated explicitly in the caveats."],"labels":["in:configuration-model","a:documentation"]},{"title":"Assert cross-project locks","body":"Need to run tests and see when these are hit\r\n\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["@bot-gradle test qfl without pts","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"adc9120ea20229a614f54a03b86487f13f88b0a8\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds with parameters: `-DenablePredictiveTestSelection=false` for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=adc9120ea20229a614f54a03b86487f13f88b0a8) to see all build failures.\n- [QuickFeedbackLinux build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79666428)","\ud83e\udd77 **Code experts: tresat, adammurdoch** \n \ntresat has most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \njvandort, adammurdoch have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/local\/model\/DefaultLocalComponentMetadata.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 369 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n jvandort: 43% \nadammurdoch: 34% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>"],"labels":["platform:software"]},{"title":"Add support for using project dependencies in the declarative DSL with DependencyCollector","body":"This is pairing work done with @eskatos when attempting to convert additional subprojects in Now In Android.\r\n\r\nIt is necessary for https:\/\/github.com\/gradle\/nowinandroid\/pull\/5.","comments":["\ud83e\udd77 **Code experts: h0tk3y, jbartok** \n \ntresat, jbartok have most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nh0tk3y, tresat have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/core-configuration\/declarative-dsl-provider\/src\/main\/kotlin\/org\/gradle\/internal\/declarativedsl\/project\/dependencyConfigurationSchema.kt` \n \n\nActivity based on git-commit: \n\n |  | tresat | jbartok| \n | --- | --- | --- | \n | MAR |   |7 additions & 7 deletions | \n| FEB | 137 additions & 65 deletions |113 additions & 13 deletions | \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n h0tk3y: 49% \ntresat: 39% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>"],"labels":["1 min review","platform:core_configuration"]},{"title":"Split ConfigurationBoundExternalDependencyMetadata","body":"This class was for dependency metadata implementations that change behavior relative to some source configuration. The class was used to implement both Ivy and Maven dependencies, and had a flag 'alwaysUseAttributeMatching'.\r\n\r\nFor maven dependencies, this was always true. As a result, the maven instances were never actually configuration-bound anymore.\r\n\r\nThis commit splits up the configuration bound metadata into two implementations, IvyDependencyMetadata, which remains configuration-bound, and MavenDependencyMetadata which no longer relies on a source configuration.\r\n\r\nEventually, we should try to merge MavenDependencyMetadata with GradleDependencyMetadata, as GradleDependenyMetadata is seemingly more like DefaultDependencyMetadata.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["@bot-gradle test this","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"9f26d477988dc6bc140a9fc053f63d69f5354357\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=9f26d477988dc6bc140a9fc053f63d69f5354357) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79665623)","\ud83e\udd77 **Code experts: tresat, adammurdoch** \n \ntresat has most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nadammurdoch, tresat have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/software\/dependency-management\/src\/integTest\/groovy\/org\/gradle\/integtests\/resolve\/ivy\/IvyModuleResolveIntegrationTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 384 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 63% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/repositories\/resolver\/DirectDependencyMetadataAdapter.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 104 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n \n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/ResolutionFailureHandler.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB | 52 additions & 48 deletions |  \n| JAN | 685 additions & 1079 deletions |  \n| DEC | 49 additions & 37 deletions |  \n| NOV | 113 additions & 125 deletions |  \n| OCT | 600 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n tresat: 97% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/external\/model\/ExternalDependencyDescriptor.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV | 2 additions & 1 deletions |  \n| OCT | 53 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 41% \ntresat: 6% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/external\/model\/ivy\/IvyConfigurationHelper.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 123 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n \n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/external\/model\/ivy\/IvyDependencyDescriptor.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN | 1 additions & 1 deletions |  \n| DEC | 2 additions & 2 deletions |  \n| NOV | 7 additions & 7 deletions |  \n| OCT | 314 additions & 2 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 50% \ntresat: 4% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/external\/model\/ivy\/RealisedIvyModuleResolveMetadata.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 345 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 15% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/external\/model\/ivy\/RealisedIvyModuleResolveMetadataSerializationHelper.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 281 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 1% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/external\/model\/maven\/DefaultMavenModuleResolveMetadata.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 317 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 11% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/external\/model\/maven\/MavenDependencyDescriptor.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN | 1 additions & 1 deletions |  \n| DEC |   |  \n| NOV | 6 additions & 6 deletions |  \n| OCT | 225 additions & 2 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 36% \ntresat: 4% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/external\/model\/maven\/RealisedMavenModuleResolveMetadata.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 347 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 17% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/external\/model\/maven\/RealisedMavenModuleResolveMetadataSerializationHelper.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 265 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 5% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/model\/ConfigurationMetadata.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 102 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 62% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/resolution\/failure\/describer\/ExternalRequestedConfigurationNotFoundFailureDescriber.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB | 19 additions & 20 deletions |  \n| JAN | 42 additions & 0 deletions |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n tresat: 100% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/resolution\/failure\/type\/ExternalRequestedConfigurationNotFoundFailure.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB | 5 additions & 1 deletions |  \n| JAN | 38 additions & 0 deletions |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n tresat: 100% \n\n`platforms\/software\/dependency-management\/src\/test\/groovy\/org\/gradle\/api\/internal\/artifacts\/repositories\/resolver\/DependenciesMetadataAdapterOnIvyMetadataTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 35 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n \n`platforms\/software\/dependency-management\/src\/test\/groovy\/org\/gradle\/api\/internal\/artifacts\/repositories\/resolver\/DependenciesMetadataAdapterOnPomMetadataTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 35 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n \n`platforms\/software\/dependency-management\/src\/test\/groovy\/org\/gradle\/internal\/component\/external\/model\/IvyDependencyDescriptorTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB | 6 additions & 7 deletions |  \n| JAN | 4 additions & 1 deletions |  \n| DEC |   |  \n| NOV | 35 additions & 22 deletions |  \n| OCT | 443 additions & 1 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 62% \ntresat: 9% \n\n`platforms\/software\/dependency-management\/src\/test\/groovy\/org\/gradle\/internal\/component\/external\/model\/MavenDependencyDescriptorTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB | 9 additions & 10 deletions |  \n| JAN | 5 additions & 2 deletions |  \n| DEC |   |  \n| NOV | 21 additions & 11 deletions |  \n| OCT | 228 additions & 1 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 69% \ntresat: 11% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>"],"labels":["platform:software"]},{"title":"Support storing `Externalizable` objects in the Configuration Cache","body":"Related to #28325 (Kotlin collection builders use `Externalizable` for serialization).","comments":[],"labels":["a:feature","in:configuration-cache"]},{"title":"Update annotations so they don't require a `@get:` prefix in Kotlin","body":"### Current Behaviour\r\n\r\n- Kotlin requires a more verbose syntax, which adds unnecessary noise, obscuring the meaning of the code.\r\n- The annotations Gradle requires require inconsistent syntax.\r\n- Requiring prefixing annotations with `get:` doesn't prevent invalid code, for example with `@Input` functions that don't match the naming scheme `getFoo()`\r\n\r\n```kotlin\r\nabstract class MyTask\r\n@Inject                             \/\/ a normal annotation, no prefix required \u2705\r\nconstructor(\r\n  private val objects: ObjectFactory\r\n): DefaultTask() {\r\n  @get:Input                        \/\/ `get:` prefix required, but this noisy and redundant \u274c\r\n  abstract val a1: Property<String> \/\/ it's already a read-only val\r\n\r\n  @get:Input                        \/\/ `get:` prefix required, but this noisy and redundant \u274c\r\n  val a2: Property<String> get() = objects.property()\r\n\r\n  @Input                            \/\/ a normal annotation, no prefix required \u2705\r\n                                    \/\/ Inconsistent with a1 & a2, because no `get:` prefix required \u274c\r\n  val a3: Property<String> = objects.property()\r\n\r\n\r\n  @Input                            \/\/ a normal annotation, no prefix required \u2705\r\n                                    \/\/ Inconsistent with a1, because no `get:` required \u274c\r\n  fun b1(): Provider<String> = a1   \/\/ Also, function is invalid because it isn't named `getB1()`\r\n}\r\n```\r\n### Expected Behaviour\r\n\r\n- I don't need to add `@get:` prefix when writing annotations.\r\n- The annotations Gradle requires can be written consistently.\r\n\r\n\r\n```kotlin\r\nabstract class MyTask\r\n@Inject                             \/\/ a normal annotation, no prefix required \u2705\r\nconstructor(\r\n  private val objects: ObjectFactory\r\n): DefaultTask() {\r\n  @Input                            \/\/ no `get:` prefix required \u2705\r\n  abstract val a1: Property<String> \/\/ it's already a read-only val\r\n\r\n  @Input                            \/\/ no `get:` prefix required \u2705\r\n  val a2: Property<String> get() = objects.property()\r\n\r\n  @Input                            \/\/ a normal annotation, no prefix required \u2705\r\n                                    \/\/ Consistent with a1 & a2, because no `get:` prefix required\r\n  val a3: Property<String> = objects.property()\r\n\r\n\r\n  @Input                            \/\/ Consistent with a1, because no `get:` required \u2705\r\n  fun b1(): Provider<String> = a1   \/\/ However, function is invalid because it isn't named `getB1()`\r\n}\r\n```\r\n\r\nNote that requiring prefixing annotations with `get:` doesn't prevent invalid code, for example with `@Input` functions that don't match the naming scheme `getFoo()`\r\n\r\n\r\n### Context\r\n\r\n- Gradle is more difficult to understand for beginners.\r\n- Annotating task inputs has unnecessary friction.\r\n- Gradle promotes the Kotlin DSL as the primary language, and so it makes sense to update the existing annotations so they are easier to use.","comments":["Just as additional information as I had a cursory look already.\r\nI think to support something like that, you would need annotations that are written in Kotlin so that they can have the `property` target.\r\nAnd additionally the description of that target says \"annotations with this target are not visible to Java\", so you would most probably also need the consuming code in Kotlin so that it can see those annotations with \"property\" target.","This issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n****\r\n\r\nAnother question that might be interesting on this topic is: How will these annotations work with Java Records?"],"labels":["a:feature","in:kotlin-dsl","in:writing-tasks",":wave: team-triage"]},{"title":"Reimplement toolchain provisioning to be less flaky","body":"Marker is now inserted after all other operations, to ensure a consistent view of the installed toolchain. Atomic move is used for increased performance and less possibility for race conditions with copying. A lock is held while operating on the install folder as well, to prevent conflicts between two installs with different URIs but the same metadata. Fixes https:\/\/github.com\/gradle\/gradle-private\/issues\/4139\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["\ud83e\udd77 **Code experts: jbartok, tresat** \n \njbartok, tresat have most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \njbartok, tresat have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/jvm\/toolchains-jvm\/build.gradle.kts` \n \n\nActivity based on git-commit: \n\n |  | jbartok | tresat| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |25 additions & 19 deletions | \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n tresat: 87% \njbartok: 5% \n\n`platforms\/jvm\/toolchains-jvm\/src\/main\/java\/org\/gradle\/jvm\/toolchain\/internal\/install\/JdkCacheDirectory.java` \n \n\nActivity based on git-commit: \n\n |  | jbartok | tresat| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n jbartok: 67% \n\n`platforms\/jvm\/toolchains-jvm\/src\/test\/groovy\/org\/gradle\/jvm\/toolchain\/internal\/AutoInstalledInstallationSupplierTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | jbartok | tresat| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n jbartok: 2% \n\n`subprojects\/soak\/src\/integTest\/groovy\/org\/gradle\/jvm\/toolchain\/JavaToolchainDownloadSoakTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | jbartok | tresat| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n jbartok: 67% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>"],"labels":["a:bug","in:toolchains","10 min review","platform:jvm","platform:release_coordination","build-script-change"]},{"title":"Checkstyle plugin is not compatible with Isolated Projects","body":"It seems the only violation is access to the root project's directory. However, there is no straightforward IP-safe replacement at the moment.\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/69bcb288dad80ecc87afb2e5b1ac571212c25b42\/platforms\/jvm\/code-quality\/src\/main\/groovy\/org\/gradle\/api\/plugins\/quality\/CheckstylePlugin.java#L71\r\n\r\n","comments":[],"labels":["a:chore","in:checkstyle-plugin","in:isolated-projects"]},{"title":"Compact strings in CC report via shared dictionary","body":"Uses a trivial compacting approach by replacing strings with their index in they dictionary of seen strings.\r\n\r\nIn an experiment, the size of the full HTML CC report was reduced from `130mb` down to `1.3mb` (x100). The report contained the Isolated Projects violations in a IntelliJ Sync of the Spring Framework project with full stacktraces captured, containing around 4k violations in total. In the mainline, only the first 50 stackstraces are captured.\r\n\r\nCompanion PR:\r\n- https:\/\/github.com\/gradle\/configuration-cache-report\/pull\/14","comments":["\ud83e\udd77 **Code experts: no user but you matched threshold 10** \n \nalllex has most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nalllex has most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/core-configuration\/configuration-cache\/src\/main\/kotlin\/org\/gradle\/configurationcache\/problems\/JsonModelWriter.kt` \n \n\nActivity based on git-commit: \n\n |  | alllex |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN | 38 additions & 27 deletions |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n alllex: 11% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>","Nice \ud83d\udc4d "],"labels":["1 min review","platform:core_configuration"]},{"title":"Configuration cache errors become warnings in the report when Gradle drops stacktraces due to a hardcoded limit","body":"Currently, Gradle has a [hardcoded limit](https:\/\/github.com\/gradle\/gradle\/blob\/a3dc91fa697b5de5fd9c2f4ce13e1fbda561fa26\/platforms\/ide\/problems-api\/src\/main\/java\/org\/gradle\/internal\/problems\/DefaultProblemDiagnosticsFactory.java#L66) for the number of stacktraces captured in the CC report.\r\n\r\nIf more problems are processed, Gradle [stops providing an (implicit) exception](https:\/\/github.com\/gradle\/gradle\/blob\/a3dc91fa697b5de5fd9c2f4ce13e1fbda561fa26\/platforms\/ide\/problems-api\/src\/main\/java\/org\/gradle\/internal\/problems\/DefaultProblemDiagnosticsFactory.java#L149-L153) for them. As a result, for these problems the [`error` field of the JSON is not written](https:\/\/github.com\/gradle\/gradle\/blob\/b1f9bdae0d912f7ca82b44d9d61fab3dfd25ac25\/platforms\/core-configuration\/configuration-cache\/src\/main\/kotlin\/org\/gradle\/configurationcache\/problems\/JsonModelWriter.kt#L81-L84), and this is precisely [what the CC report library uses](https:\/\/github.com\/gradle\/configuration-cache-report\/blob\/61f14d258854c35e427cb996e9d9ddd400d702c8\/src\/jsMain\/kotlin\/Main.kt#L325-L328) to determine whether something is an error or a warning.\r\n\r\nThis behavior misleads users who look at reports with large number of problems into thinking that they only have a few errors, while the rest is just warnings.","comments":[],"labels":["a:bug","in:configuration-cache"]},{"title":"Provide a `DirectDependenciesMetadata::add` method which accepts a `Provider<MinimalExternalModuleDependency>`","body":"### Expected Behavior\r\n\r\nI'd like to be able to use a Gradle catalog with the `DirectDependenciesMetadata::add` method\r\n```kotlin\r\ndependencies {\r\n    components {\r\n        withModule(\"org.morphonets:SNT\") {\r\n            allVariants {\r\n                withDependencies {\r\n                    add(libs.org.jzy3d.jzy3dJglAwt)\r\n                    \/\/ instead of\r\n                    \/\/ add(libs.org.jzy3d.jzy3dJglAwt.get().toString())\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\n### Current Behavior (optional)\r\n\r\nAt the moment, `add` accepts mostly only `String`s\r\n\r\n### Context\r\n\r\nGradle component metadata rules","comments":["The issue is in the backlog of the relevant team and is prioritized by them."],"labels":["a:feature","in:dependency-version-catalog","in:component-metadata-rules"]},{"title":"Auto-configure Java 11 in the shell with SDKMAN","body":"Gradle's own build requires running Gradle on Java 11 JVM, failing with an error if it's not the case:\r\n```\r\nThis build requires JDK 11. It's currently \/Users\/asemin\/.sdkman\/candidates\/java\/17.0.4-amzn. You can ignore this check by passing '-Dorg.gradle.ignoreBuildJavaVersionCheck=true'\r\n```\r\n\r\nSometimes trying to work with other projects that have similar requirements with a different Java version, it becomes annoying fighting those errors, when the tooling could have solved it automatically for you.\r\n\r\nThis PR adds an `.sdkmanrc` file for [SDKMAN](https:\/\/sdkman.io\/) that allows automatic switch to an appropriate Java in the environment. Other projects [like Spring Framework](https:\/\/github.com\/spring-projects\/spring-framework\/blob\/4b732d62c22297aea536a09477d2272c3e87a221\/.sdkmanrc) do this as well.\r\n\r\nSDKMAN requires to specify exact vendor for the JVM to be used. This PR suggests using a Temurin distribution provided by the Eclipse Foundation.","comments":["\ud83e\udd77 **Code experts: no user  matched threshold 10** \n \n <details>\n <summary>See details<\/summary>\n\n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>"],"labels":["1 min review"]},{"title":"Build service registration from wrong classloader should give a more specific help message","body":null,"comments":[],"labels":["a:feature","in:build-services","re:comprehensibility"]},{"title":"Remove deprecated file permission API","body":"Relates to:\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/24861\r\n\r\n### Context\r\n<!--- Why do you believe many users will benefit from this change? -->\r\n<!--- Link to relevant issues or forum discussions here -->\r\n\r\n### Contributor Checklist\r\n- [ ] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [ ] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [ ] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [ ] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [ ] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective.\r\n- [ ] Provide unit tests (under `<subproject>\/src\/test`) to verify logic.\r\n- [ ] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [ ] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`.\r\n- [ ] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["While PR looks good, we probably want to make a more drastic redesign\/deprecation of Copy task in favor of DSL approaches in 9.0. cc @lptr "],"labels":["in:file-tasks"]},{"title":"Make all injector-getters abstract in public types","body":"We use two different syntaxes for getter-injection in tasks and elsewhere:\r\n\r\n```java\r\n    @Inject\r\n    protected BuildOperationRunner getBuildOperationRunner() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n```\r\n\r\nand:\r\n\r\n```\r\n    @Inject\r\n    protected abstract BuildOperationRunner getBuildOperationRunner();\r\n```\r\n\r\nWe should refactor the former ones to the latter, as it's more concise. The change is technically a breaking change, though it's unlikely to affect code out there. Still, it'd be prudent to do it in a major release.","comments":[],"labels":["a:chore","in:core-utilities"]},{"title":"Split AbstractMavenConversionIntegrationTest","body":"It sometimes takes longer than 5m and triggers long running time alerts: https:\/\/ge.gradle.org\/scans\/tests?search.relativeStartTime=P28D&search.timeZoneId=Asia%2FShanghai&tests.container=*KotlinDslMavenConversionIntegrationTest*","comments":["\r\n@bot-gradle cancel\r\n\r\n","<!-- {\"replyTargetCommentId\":2002891827,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"b9dc815aa01f781affff1a6e09e493014189fa39\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nThis PR is not in the queue.","\r\n@bot-gradle cancel\r\n\r\n"],"labels":["10 min review","platform:software","platform:build_infrastructure"]},{"title":"Move platform windows builds to ReadyForRelease stage","body":"Today I reviewed the build time statistics from TeamCity. Surprisingly, platform windows builds take ~20% of total build time (45%*43%), even higher than performance tests.\r\n\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/12689835\/1f490357-dc6f-4f1a-982d-24ce771f49d7)\r\n\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/12689835\/ea5d2640-f87d-4355-a4ba-e0b4150e86c6)\r\n\r\nI doubt if brings more value to us as most of its tests will also be executed in other build configurations. I checked a few pages of failed platform windows builds in build scan, there seems no tests \"failing only in platform windows builds but not in other configurations\".\r\n\r\nThis PR intends to move the time-consuming platform windows builds to later stage (ReadyForRelease, which runs once per day). If it breaks a lot (the failure is not captured by other builds), we can move it back.","comments":["\ud83e\udd77 **Code experts: 6hundreds, wolfs** \n \nblindpirate, 6hundreds have most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nblindpirate, wolfs have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`.teamcity\/src\/main\/kotlin\/model\/CIBuildModel.kt` \n \n\nActivity based on git-commit: \n\n |  | blindpirate | 6hundreds| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 1 additions & 1 deletions |  \n| JAN |   |9 additions & 2 deletions | \n| DEC |   |  \n| NOV | 7 additions & 17 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n blindpirate: 51% \nwolfs: 25% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>"],"labels":["1 min review","platform:build_infrastructure"]},{"title":"Expose root variant in ResolutionResult","body":"There is no way to get the root variant of the root component from a ResolutionResult without looping through all varaints and finding the root variant with its display name.\r\n\r\nThis commit exposes the root varaint so that users do not need to rely on variant display names to begin traversing dependency graphs.\r\n\r\n<!--- The issue this PR addresses -->\r\n<!-- Fixes #? -->\r\n\r\n### Context\r\n<!--- Why do you believe many users will benefit from this change? -->\r\n<!--- Link to relevant issues or forum discussions here -->\r\n\r\n### Contributor Checklist\r\n- [ ] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [ ] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [ ] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [ ] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [ ] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective.\r\n- [ ] Provide unit tests (under `<subproject>\/src\/test`) to verify logic.\r\n- [ ] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [ ] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`.\r\n- [ ] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["\ud83e\udd77 **Code experts: tresat** \n \ntresat, jvandort have most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nadammurdoch, jvandort have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/software\/dependency-management\/src\/integTest\/groovy\/org\/gradle\/integtests\/resolve\/api\/ResolutionResultApiIntegrationTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 860 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n jvandort: 7% \nadammurdoch: 3% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/DefaultDependencyManagementServices.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | MAR |   |6 additions & 4 deletions | \n| FEB | 12 additions & 11 deletions |0 additions & 3 deletions | \n| JAN | 13 additions & 11 deletions |39 additions & 44 deletions | \n| DEC |   |1 additions & 31 deletions | \n| NOV | 5 additions & 4 deletions |  \n| OCT | 677 additions & 5 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 21% \njvandort: 13% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/configurations\/DefaultConfiguration.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | MAR |   |14 additions & 9 deletions | \n| FEB |   |44 additions & 203 deletions | \n| JAN |   |199 additions & 369 deletions | \n| DEC | 5 additions & 5 deletions |155 additions & 228 deletions | \n| NOV |   |  \n| OCT | 2367 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n jvandort: 21% \nadammurdoch: 14% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/configurations\/ResolveConfigurationResolutionBuildOperationResult.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN | 2 additions & 2 deletions |  \n| DEC | 1 additions & 2 deletions |  \n| NOV |   |  \n| OCT | 217 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n jvandort: 1% \nadammurdoch: 1% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/ivyservice\/ShortCircuitEmptyConfigurationResolver.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | MAR |   |2 additions & 2 deletions | \n| FEB |   |5 additions & 0 deletions | \n| JAN |   |62 additions & 71 deletions | \n| DEC |   |19 additions & 21 deletions | \n| NOV |   |  \n| OCT | 210 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n jvandort: 42% \nadammurdoch: 35% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/ivyservice\/resolveengine\/result\/DefaultResolutionResultBuilder.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |5 additions & 4 deletions | \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 157 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 53% \njvandort: 9% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/result\/DefaultResolutionResult.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |17 additions & 8 deletions | \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 111 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n jvandort: 30% \nadammurdoch: 3% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/transform\/DefaultTransformUpstreamDependenciesResolver.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 334 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 70% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/transform\/DefaultTransformUpstreamDependenciesResolverFactory.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 55 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 27% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/attributes\/AttributeDesugaring.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC | 2 additions & 2 deletions |  \n| NOV |   |  \n| OCT | 86 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 3% \n\n`platforms\/software\/dependency-management\/src\/test\/groovy\/org\/gradle\/api\/internal\/artifacts\/result\/DefaultResolutionResultTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |4 additions & 2 deletions | \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 157 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n jvandort: 3% \nadammurdoch: 1% \n\n`platforms\/software\/publish\/src\/main\/java\/org\/gradle\/api\/publish\/internal\/mapping\/DefaultDependencyCoordinateResolverFactory.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |51 additions & 25 deletions | \n| NOV |   |  \n| OCT | 135 additions & 0 deletions |14 additions & 4 deletions | \n \n\nKnowledge based on git-blame: \n jvandort: 100% \n\n`subprojects\/core-api\/src\/main\/java\/org\/gradle\/api\/artifacts\/result\/ResolutionResult.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 3% \njvandort: 2% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>"],"labels":["30 min review","platform:software"]},{"title":"Improve Error Messages for External Variable Capturing in Tasks","body":"### Context\r\n<!--- Why do you believe many users will benefit from this change? -->\r\nWhen tasks attempt to capture variables from the outer scope, the error message `Class_ XXX is a non-static inner class` is not that helpful. This PR improves error message to help developers better resolve problems.\r\n<!--- Link to relevant issues or forum discussions here -->\r\nFixes https:\/\/github.com\/gradle\/gradle\/issues\/25494\r\n\r\n### Contributor Checklist\r\n- [x] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [x] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [x] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [x] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [x] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective.\r\n- [x] Provide unit tests (under `<subproject>\/src\/test`) to verify logic.\r\n- [x] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [x] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`.\r\n- [x] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["Thank you for your contribution!\r\n\r\nWhile this change slightly improves the error message, it does not contain suggestions on how to fix the code as described in the original issue. \r\n\r\nAlso, see the failing tests.\r\n\r\nPlease rework your implementation to match the description in the original issue.\r\n\r\nYou can use the following PR as an inspiration: \r\n* #27158","I hava updated the PR @ov7a \r\n","<h3>Change Summary<\/h3> This PR is 89.29% new code. <table> <tr> <td>Platform<\/td> <td>Added Lines<\/td> <td>% of Total Line Changes<\/td> <td>Deleted Lines<\/td> <td>% of Total Line Changes<\/td> <td>Files Changed<\/td> <td>% of Total Files Changed<\/td> <\/tr>\n<tr> <td>bt_ge_build_cache<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>build_infrastructure<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_configuration<\/td> <td>48<\/td> <td>85.71%<\/td> <td>4<\/td> <td>7.14%<\/td> <td>4<\/td> <td>80%<\/td> <\/tr>\n<tr> <td>core_execution<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_runtime<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>documentation<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>extensibility<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>gradle_enterprise<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>ide<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>jvm<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>kotlin_dsl<\/td> <td>1<\/td> <td>1.79%<\/td> <td>1<\/td> <td>1.79%<\/td> <td>1<\/td> <td>20%<\/td> <\/tr>\n<tr> <td>release_coordination<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>software<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<\/table>\n<automation id=\"summary_table\/summary_table\"\/>","Thank you for your contribution!\r\n\r\nThis PR has a valid DCO and tests. The relevant team for this area will confirm the design of the implementation choices.\r\n","@bot-gradle test ","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"1e911e3e952dc6396cbe594d993439e859bd1fac\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=1e911e3e952dc6396cbe594d993439e859bd1fac) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79855241)"],"labels":["in:kotlin-dsl","from:contributor",":wave: team-triage"]},{"title":"Improve error reporting when repositories are disabled","body":"Fixes #12358 \r\n\r\nThis tracks the reason for a repository being disabled, and adds it as the cause of any subsequent errors that short-circuit to report only the fact that a repo was disabled.  Tracking the ultimate cause like this allows for always printing it.\r\n\r\nThe BuildExceptionReporter gains some additional intelligence to avoid repeating failure trees which stem from the same cause.\r\n\r\nThis change also:\r\n- Adds some additional tests around scenarios where (possibly improper) manual exception handling would have previously hidden the original cause - it is now shown.\r\n- Displays the name of the repo that has been disabled when displaying the failure.\r\n- Renames blacklist to disabled list throughout.\r\n","comments":["@bot-gradle test this","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"d567f4d46f8105f5f24bd199e86363dd2b4d9114\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=d567f4d46f8105f5f24bd199e86363dd2b4d9114) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79674338)","@bot-gradle test this","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"b395f4863578592471f2f92d885ccf5594d06d52\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=b395f4863578592471f2f92d885ccf5594d06d52) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79698479)","\ud83e\udd77 **Code experts: blindpirate, adammurdoch** \n \ntresat has most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nadammurdoch, blindpirate have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/software\/dependency-management\/src\/integTest\/groovy\/org\/gradle\/integtests\/resolve\/DependencyUnresolvedModuleIntegrationTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 432 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n blindpirate: 72% \nadammurdoch: 1% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/ivyservice\/ivyresolve\/ConnectionFailureRepositoryDisabler.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 62 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n blindpirate: 65% \nadammurdoch: 5% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/ivyservice\/ivyresolve\/ErrorHandlingModuleComponentRepository.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 262 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 40% \nblindpirate: 4% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/ivyservice\/ivyresolve\/RepositoryDisabler.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 38 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n blindpirate: 84% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/resolve\/ArtifactResolveException.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 71 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 31% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/resolve\/ModuleVersionResolveException.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 140 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 66% \n\n`platforms\/software\/dependency-management\/src\/test\/groovy\/org\/gradle\/api\/internal\/artifacts\/ivyservice\/ivyresolve\/ErrorHandlingModuleComponentRepositoryTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 306 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n blindpirate: 41% \n\n`subprojects\/core\/src\/main\/java\/org\/gradle\/internal\/buildevents\/BuildExceptionReporter.java` \n \n\nActivity based on git-commit: \n\n |  | tresat |  \n | --- | --- | \n| MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV | 9 additions & 4 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 29% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>"],"labels":["platform:software","re:comprehensibility"]},{"title":"`Configuration cache state could not be cached` on included build with `gradle-enterprise` plugin when running tests","body":"### Current Behavior\r\n\r\nI have a Gradle project (A) that uses _configuration cache_ and that do not have `gradle-enterprise` but includes (using `includedBuild`) a gradle project (B) that do have it in its `settings.gradle.kts`.\r\n\r\nRunning tests on (A) works fine : `.\/gradlew test`\r\n\r\nHowever when running tests specifically on the included build (B, presently named fireplace), e.g. `.\/gradlew :fireplace:fireplace-swing:test` results in the following error.\r\n\r\n```\r\n* What went wrong:\r\nConfiguration cache state could not be cached: field `__accessKey__` of `com.gradle.enterprise.gradleplugin.testdistribution.internal.DefaultTestDistributionExtension` bean found in field `a` of `com.gradle.enterprise.gradleplugin.testacceleration.internal.task.b$b` bean found in field `jvmArgumentProviders` of `org.gradle.process.internal.DefaultJavaForkOptions` bean found in field `forkOptions` of task `:fireplace:fireplace-swing:test` of type `org.gradle.api.tasks.testing.Test`: error writing value of type 'org.gradle.api.internal.provider.DefaultProperty'\r\n> The Gradle Enterprise plugin has to be applied to the top level project in order to use test acceleration features\r\n```\r\n\r\nI have included a reproducer.\r\n\r\n### Expected Behavior\r\n\r\nTests run fine.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\n\r\nSuppose host project `gradle-access-key-reproducer` that do not have gradle enterprise set up.\r\n\r\n`gradle-access-key-reproducer\/settings.gradle.kts`\r\n```kotlin\r\nplugins {\r\n    id(\"org.gradle.toolchains.foojay-resolver-convention\") version \"0.8.0\"\r\n}\r\n\r\nrootProject.name = \"gradle-access-key-reproducer\"\r\ninclude(\"app\")\r\n\r\nincludeBuild(\"with-gradle-enterprise\")\r\n```\r\n\r\n`gradle-access-key-reproducer\/app\/build.gradle.kts`\r\n```kotlin\r\nplugins {\r\n  application \/\/ so test task can be invoked\r\n}\r\napplication {\r\n    \/\/ Define the main class for the application.\r\n    mainClass = \"App\"\r\n}\r\n```\r\n\r\n`gradle-access-key-reproducer\/gradle.properties`\r\n```properties\r\norg.gradle.caching=true\r\norg.gradle.parallel=true\r\norg.gradle.configuration-cache=true\r\norg.gradle.configuration-cache.problems=warn\r\n```\r\n\r\n`with-gradle-enterprise\/settings.gradle.kts`\r\n```kotlin\r\nplugins {\r\n    `gradle-enterprise`\r\n    id(\"org.gradle.toolchains.foojay-resolver-convention\") version(\"0.8.0\")\r\n}\r\n\r\nrootProject.name = \"with-gradle-enterprise\"\r\n\r\nif (providers.environmentVariable(\"CI\").isPresent) {\r\n    gradleEnterprise {\r\n        println(\"CI\")\r\n        buildScan {\r\n            termsOfServiceUrl = \"https:\/\/gradle.com\/terms-of-service\"\r\n            termsOfServiceAgree = \"yes\"\r\n            publishAlways()\r\n            tag(\"CI\")\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`with-gradle-enterprise\/settings.gradle.kts`\r\n```kotlin\r\nplugins {\r\n  `java-library` \/\/ so test task can be invoked\r\n}\r\n```\r\n\r\n[gradle-access-key.zip](https:\/\/github.com\/gradle\/gradle\/files\/14556562\/gradle-access-key.zip)\r\n\r\nRun \r\n\r\n```\r\n.\/gradlew :with-gradle-enterprise:test\r\n```\r\n\r\n### Gradle version\r\n\r\n8.6\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_\r\n","comments":["The issue is in the backlog of the relevant team and is prioritized by them.\r\n","Just tried the reproducer with Gradle 7.2-rc-2, with the same failure\r\n\r\n```\r\n.\/gradlew wrapper --gradle-version=8.7-rc-2\r\n.\/gradlew :with-gradle-enterprise:test\r\n```\r\n\r\nHowever I noticed that adding `--scan` to the command, whether the terms are accepted or not, make the failure go away."],"labels":["a:bug","in:build-scan","has:reproducer"]},{"title":"\"Since\" javadoc check fails when the added uses generic parameters","body":"Consider a method that accepts a parameter of type represented by a type variable:\r\n```kotlin\r\n\/**\r\n * @since 8.8\r\n *\/\r\n@Incubating\r\nfun <T : Any> HasMultipleValues<T>.plusAssign(element: T) {\r\n    this.append(element)\r\n}\r\n```\r\n\r\nIt produces a false positive error:\r\n```\r\nMethod org.gradle.kotlin.dsl.PropertyExtensionsKt.plusAssign(org.gradle.api.provider.HasMultipleValues,java.lang.Object): Is not annotated with @since 8.8\r\n```\r\n\r\nMost likely, the code in [`KotlinSourceQueries`](https:\/\/github.com\/gradle\/gradle\/blob\/44dab3ba60df98488624587cd9e7a2bb74acc496\/build-logic\/binary-compatibility\/src\/main\/kotlin\/gradlebuild\/binarycompatibility\/sources\/KotlinSourceQueries.kt#L147) tries to match generic type parameter `T` with erased type `Object` and fails.","comments":[],"labels":["a:bug","in:building-gradle"]},{"title":"\"Since\" javadoc check fails when JvmName annotation is used","body":"The following snippet fails binary compatibility test:\r\n```kotlin\r\n\/**\r\n * @since 8.8\r\n *\/\r\n@Incubating\r\n@JvmName(\"plusAssignElementProvider\")\r\noperator fun <T> HasMultipleValues<T>.plusAssign(elements: Iterable<T>) {\r\n    this.appendAll(elements)\r\n}\r\n```\r\nThe error is:\r\n```\r\nMethod org.gradle.kotlin.dsl.PropertyExtensionsKt.plusAssignElementProvider(org.gradle.api.provider.HasMultipleValues,java.lang.Iterable): Is not annotated with @since 8.8.\r\n```\r\n\r\nIt looks like we're using binary names to look up method sources in [`KotlinSourceQueries`](https:\/\/github.com\/gradle\/gradle\/blob\/44dab3ba60df98488624587cd9e7a2bb74acc496\/build-logic\/binary-compatibility\/src\/main\/kotlin\/gradlebuild\/binarycompatibility\/sources\/KotlinSourceQueries.kt#L118), which, obviously, does not match with the source.","comments":[],"labels":["a:bug","in:building-gradle"]},{"title":"Creating Kotlin library with `gradle init` makes it seem like the Kotlin plugin is not applied","body":"When generating a Kotlin library:\r\n```\r\ngradle init --no-comments --use-defaults --type kotlin-library\r\n```\r\n\r\nThe plugins block in the build script does not help understanding that a Kotlin plugin is applied:\r\n```\r\nplugins {\r\n    alias(libs.plugins.jvm)\r\n    `java-library`\r\n}\r\n```\r\n\r\nHowever, the actual `libs.plugins.jvm` alias does point to the Kotlin plugin:\r\n```\r\n[plugins]\r\njvm = { id = \"org.jetbrains.kotlin.jvm\", version = \"1.9.22\" }\r\n```\r\n\r\nI think the generated alias should be adjusted for better clarity.","comments":[],"labels":["in:build-init-plugin","a:chore","good first issue"]},{"title":"Make it easier to use the built-in Google or Sun checkstyle configs","body":"### Expected Behavior\r\n\r\nI want to be able to easily set the default `checkstyle` configuration, without the need for creating `config\/checkstyle\/checkstyle.xml`.\r\n\r\nExample API idea:\r\n\r\n```kotlin\r\nplugins {\r\n  checkstyle\r\n}\r\n\r\n\/\/ Variant 1\r\ncheckstyle {\r\n  toolVersion = \"10.14.0\"\r\n  config {\r\n    defaultConfig = \"google_checks.xml\"\r\n  }\r\n}\r\n\r\n\/\/ Variant 2\r\ncheckstyle {\r\n  toolVersion = \"10.14.0\"\r\n  config {\r\n    config = Checkstyle.builtin(\"google_checks.xml\")\r\n  }\r\n}\r\n```\r\n\r\n\r\nThe `google_checks.xml` file comes from checkstyle itself:\r\n- [src\/main\/resources\/google_checks.xml](https:\/\/github.com\/checkstyle\/checkstyle\/blob\/checkstyle-10.14.0\/src\/main\/resources\/google_checks.xml)\r\n\r\n### Current Behavior\r\n\r\nI have to create the `config\/checkstyle\/checkstyle.xml` file and copy-paste a (potentially huge) config file.\r\n\r\nIn my case, I simply want to use the Google style.\r\n\r\n### Context\r\n\r\nThis issue is a revival of https:\/\/github.com\/gradle\/gradle\/issues\/4952\r\n\r\nI think it would be very beneficial for ease of setup. Please bear in mind I have never used checkstyle before. I found the setup to be unnecessarily hard.","comments":["This feature request is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:feature","in:checkstyle-plugin"]},{"title":"Unable to make progress running work with empty buildSrc ","body":"### Current Behavior\r\n\r\nWhen Android Studio Iguana or later attempts to rebuild the project, the build fails with:\r\n`Unable to make progress running work. There are items queued for execution but none of them can be started`.  \r\n\r\n\r\n\r\n### Expected Behavior\r\n\r\nThe build doesn't fail. \r\n\r\n### Context (optional)\r\n\r\nThis has broken our builds in Android Studio Iguana and later, as we're using `buildSrc`.  It is not clear however that this is the fault of Gradle - I'm not sure what the purpose of calling `:buildSrc:testClasses` is.  This was not being called when doing a rebuild on Android Studio Hedgehog. \r\n\r\nThis can be worked around by excluding the :buildSrc:testClasses task in the top level settings.gradle file, via:\r\n```kotlin\r\ngradle.startParameter.excludedTaskNames.addAll(listOf(\":buildSrc:testClasses\"))`\r\n```\r\n\r\n\r\n\r\n### Steps to Reproduce\r\nExtract the reproducer, then run the same set of tasks in the same order as Android Studio's Build -> Rebuild menu option:\r\n\r\n`.\/gradlew :app:clean :buildSrc:clean :app:assembleDebug :app:assembleDebugUnitTest :app:assembleDebugAndroidTest :buildSrc:assemble :buildSrc:testClasses`\r\n\r\n### Gradle version\r\n\r\n8.4, 8.5, 8.6, 8.7-rc2\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["[Broken.zip](https:\/\/github.com\/gradle\/gradle\/files\/14548700\/Broken.zip)\r\nUpdated reproducer (without binaries)","The issue can be simplified down to an empty `buildSrc` and `.\/gradlew  :buildSrc:clean :buildSrc:testClasses`.\r\nSee the simplified reproducer [here](https:\/\/github.com\/gradle\/gradle-reproducers\/tree\/buildsrc-unable-to-make-work) and the output [here](https:\/\/github.com\/gradle\/gradle-reproducers\/actions\/runs\/8233006954\/job\/22511600708).\r\n\r\n***\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n\r\n","Same error, same workaround.\r\n\r\n**Android Studio:** Iguana | 2023.2.1\r\n**Gradle Distribution:** https\\:\/\/services.gradle.org\/distributions\/gradle-8.4-bin.zip\r\n**Gradle Plugin:** com.android.tools.build:gradle:8.3.0\r\n\r\n@mandrachek Thankss for the workaround.\r\n\r\n\r\n ","[Related Android Studio bug](https:\/\/issuetracker.google.com\/issues\/328871352)"],"labels":["a:bug","in:composite-builds","in:execution-engine","has:reproducer"]},{"title":"Add documentation page on GitLab CI","body":"<!--- The issue this PR addresses -->\r\n<!-- Fixes #? -->\r\n\r\n### Context\r\n<!--- Why do you believe many users will benefit from this change? -->\r\n<!--- Link to relevant issues or forum discussions here -->\r\n\r\nGitLab is a popular CI provider, much like GitHub Actions, Jenkins, etc.\r\n\r\nThe addition of this page was suggested in the [Gradle Slack](https:\/\/gradle-community.slack.com\/archives\/CAHSN3LDN\/p1709368339364999).\r\n\r\n### Contributor Checklist\r\n- [x] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [x] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [x] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html). **\u2192 I wrote all the code.**\r\n- [x] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [ ] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective. **\u2192 There is no code changes, thus no test changes.**\r\n- [ ] Provide unit tests (under `<subproject>\/src\/test`) to verify logic. **\u2192 There is no code changes, thus no test changes.**\r\n- [x] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [x] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`.\r\n- [ ] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`. **\u2192 There is no code changes.**\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["There is a TODO left to replace a screenshot. If possible, I would prefer someone else to handle it.","There are new TODOs present in this change.  Should any be removed?\n<automation id=\"includes_todos\/point_out_todos\"\/>","<h3>Change Summary<\/h3> This PR is 100% new code. <table> <tr> <td>Platform<\/td> <td>Added Lines<\/td> <td>% of Total Line Changes<\/td> <td>Deleted Lines<\/td> <td>% of Total Line Changes<\/td> <td>Files Changed<\/td> <td>% of Total Files Changed<\/td> <\/tr>\n<tr> <td>bt_ge_build_cache<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>build_infrastructure<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_configuration<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_execution<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_runtime<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>documentation<\/td> <td>211<\/td> <td>100%<\/td> <td>0<\/td> <td>0%<\/td> <td>1<\/td> <td>100%<\/td> <\/tr>\n<tr> <td>extensibility<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>gradle_enterprise<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>ide<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>jvm<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>kotlin_dsl<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>release_coordination<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>software<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<\/table>\n<automation id=\"summary_table\/summary_table\"\/>","> For advanced users, I think a brief list of tips like you did would be a great addition\r\n\r\nIf you are happy with the PR in its current state, would it be ok with you to merge this, and then I can create a follow-through PR to discuss the tips? I would prefer keeping PRs small if it's alright with you.","> If you are happy with the PR in its current state, would it be ok with you to merge this, and then I can create a follow-through PR to discuss the tips? I would prefer keeping PRs small if it's alright with you.\r\n\r\nI am +1"],"labels":["from:contributor","in:tutorial","\u26a0\ufe0f Includes TODOs"]},{"title":"Separate BuildOperationRunner and BuildOperationExecuter","body":"Fixes https:\/\/github.com\/gradle\/gradle\/issues\/28383.\r\n\r\nFinish separating `BuildOperationRunner` and `BuildOperationExecutor` (started in #28364). The latter used to extend the former, but this is not the case anymore.\r\n\r\n- `BuildOperationRunner` is responsible for running individual build operations, and is part of the build cache library, and has few dependencies.\r\n- `BuildOperationExecutor` is about parallel execution of several operations using a `BuildOperationQueue`. It has many more dependencies, and is not part of the published build cache library.\r\n\r\nThe PR #28364 removed the inheritance between the two types, but left `BuildOperationExecutor` with the same method signatures as `BuildOperationRunner` to keep compatible with existing code. We should follow up and replace these usages by injecting `BuildOperationRunner` instead. Once that's done we should remove the delegating methods from `BuildOperationExecutor`.\r\n\r\nWe should probably rename the executor to something like `ParallelBuildOperationExecutor` or something to signal that it is only about parallelism.","comments":["[The merge queue build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79449196) has started. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=2c62f03144f64e88d32a981968fbbd2fd0e01fde) to see all failures if any.","[The merge queue build](https:\/\/builds.gradle.org\/viewLog.html?buildId=79449196&buildTypeId=Gradle_Master_Check_GitHubMergeQueueCheckPass) has failed. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=2c62f03144f64e88d32a981968fbbd2fd0e01fde) to see all failures.","[The merge queue build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79456152) has started. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=2b6c0b46c3105d010ea01bc00b9a01b130dd5504) to see all failures if any.","[The merge queue build](https:\/\/builds.gradle.org\/viewLog.html?buildId=79456152&buildTypeId=Gradle_Master_Check_GitHubMergeQueueCheckPass) has failed. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=2b6c0b46c3105d010ea01bc00b9a01b130dd5504) to see all failures.","[The merge queue build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79461703) has started. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=0ba012792338a803d2064dea04d6b235f67bc032) to see all failures if any.","[The merge queue build](https:\/\/builds.gradle.org\/viewLog.html?buildId=79461703&buildTypeId=Gradle_Master_Check_GitHubMergeQueueCheckPass) has failed. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=0ba012792338a803d2064dea04d6b235f67bc032) to see all failures.","^ there seems to be some real problems apart from the flakiness.","[The merge queue build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79511640) has started. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=5024640c96f3b6b512cb302c6dede49f52d78073) to see all failures if any.","[The merge queue build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79513259) has started. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=d6f60a70e2d2e4d79502cd736f650747e5d20605) to see all failures if any.","[The merge queue build](https:\/\/builds.gradle.org\/viewLog.html?buildId=79513259&buildTypeId=Gradle_Master_Check_GitHubMergeQueueCheckPass) has failed. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=d6f60a70e2d2e4d79502cd736f650747e5d20605) to see all failures."],"labels":["a:chore","in:build-operations"]},{"title":"Add property for max daemons and queue up work if that limit is reached","body":"### Expected Behavior\r\n\r\nIf I have a really big project, daemon of which takes up most of my RAM, I don't want Gradle spinning up any more daemons, which would eventually cause my computer to completely run out of memory.\r\n\r\nInstead, I want Gradle to either:\r\n\r\n1. Refuse to start a new job until a daemon is free\r\n2. Wait for existing daemon to become free and run the job then (alternatively, if old daemon is not compatible with the new job, it should wait for old one to become idle, stop it and then spin up a new one)\r\n\r\n\r\n\r\n### Current Behavior (optional)\r\n\r\nCurrently Gradle keeps starting up the new Daemons without any limit, potentially filling up user's computer's memory\r\n\r\n### Context\r\n\r\nI have a problem where building a large project will often freeze my computer, because there are leftover daemons behind, either because I accidentally start a new task (like committing while lint check is still running), because project's properties (such as Gradle version) have been updated and old one can't be reused or sometimes for no apparent reason at all (daemon incompatibility seems hard to debug).\r\n\r\n(this is a reopen of the stale #10321)","comments":["This feature request is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["in:daemon","a:feature"]},{"title":"Deprecate overlapping outputs","body":"Historically, Gradle allowed multiple tasks to write to the same directory. However, when tasks do this, it plays badly with many of our optimizations.\r\n\r\n- If both tasks create file X, but with different content, the result of the build becomes dependent on which order we execute the tasks.\r\n- If we run them in parallel, even more trouble can arise.\r\n- When Gradle runs a task and finds some unknown output is already there, it's hard to provide meaningful error messages if overlapping outputs are allowed.\r\n- Even if they write different kinds of files to the same directory, it makes figuring out what to store in the build cache (and how to load them) harder than necessary.\r\n- And let's not even start talking about trying to auto-assign output locations to a pair of tasks like this. Let alone run them in a sandbox.\r\n\r\nTherefore we want to move Gradle towards a future where overlapping outputs are a thing of the past. If a build is using them today, the user has a number of options:\r\n\r\n- Go from a push-style\/imperative build, where tasks are executed to put its output in the right place (think of a WAR file structure), turn the build into pull-style\/declarative, where each task does its own thing without regards to how it fits into some final layout. In many cases there is no need to arrange the files on disk \"just right\" anyway, as e.g. a `War` task can take its inputs from several different sources.\r\n- If a specific layout must be achieved on disk, use a `Copy` task to pull things together.\r\n- If for some reason this is not possible, keep the tasks as they are, but mark them as `@Untracked`. This way they are allowed to do whatever, but will lose all optimizations, including parallel execution and caching\/up-to-date checks. Gradle will also not check for stale outputs for such tasks.\r\n\r\n## Implementation\r\n\r\nOnce the execution graph is finalized, we should be able to check if any of the outputs overlap, and produce a warning.\r\n\r\nThis supersedes https:\/\/github.com\/gradle\/gradle\/issues\/9041 where some original discussion can be found.","comments":["Forbidding overlapping outputs will help identify problems like https:\/\/github.com\/gradle\/gradle\/issues\/27586, where two tasks are accidentally configured to produce the exact same output.","But how to solve the problem on #2137 @lptr. And why you create a new thread?","We should add first-class support for bytecode instrumentation. I opened a new issue because this is not about investigation anymore, but about going ahead with forbidding overlapping outputs. (I could have renamed the old issue, too, but I did not see it before I created this one; sorry.)"],"labels":["a:feature","in:execution-engine"]},{"title":"Allow transforms to mark the whole input artifact as an output","body":"Transforms that handle both file and directory-style artifacts might choose to include the original artifact in the output. Currently this is done like this:\r\n\r\n```java\r\n        if (artifact.isDirectory()) {\r\n            outputs.dir(artifact);\r\n        } else {\r\n            outputs.file(artifact);\r\n        }\r\n```\r\n\r\nThis is a bit boilerplate-y. We could do better by offering a `TransformOutputs.inclureInputArtifact()` method. As added bonus it would also make it more obvious that the entire input artifact _can_ be used as an output. We could also clarify in the Javadoc that doing so does not mean copying the input artifact on disk.","comments":[],"labels":["a:feature","in:artifact-transforms"]},{"title":"Deprecate circular evaluation chains going through task providers","body":"Currently TaskProvider (or rather all `NamedDomainObjectProvider` implementations) returned by `register` allows to resolve itself or a derived provider inside its configuration closure. This doesn't cause `StackOverflowError` because evaluation of the provider short-circuits after the task has been created, even before configuration finishes. However, this exposes partially configured task instance and may cause double-configuration, as well as re-entrance of the derived providers which may not support it properly. Because of this, we want to deprecate this behavior and replace it with CircularEvaluationException in the next major release.\n\nSee [#28368](https:\/\/github.com\/gradle\/gradle\/issues\/28368) for the small reproducer and additional context.\n\nThere are some places in Gradle codebase that may accidentally trigger this evaluation: in particular, resolving a configuration inside task configuration callback may cause this because of some [lazy attributes Gradle sets up](https:\/\/github.com\/gradle\/gradle\/blob\/7782165138e7083e02c1aa17fbab3c996d44deeb\/platforms\/jvm\/plugins-java-base\/src\/main\/java\/org\/gradle\/api\/plugins\/jvm\/internal\/DefaultJvmLanguageUtilities.java#L68).","comments":[],"labels":["a:chore","in:provider-api"]},{"title":"Finish separating BuildOperationExecutor and BuildOperationRunner","body":"Finish separating `BuildOperationRunner` and `BuildOperationExecutor` (started in #28364). The latter used to extend the former, but this is not the case anymore.\r\n\r\n- `BuildOperationRunner` is responsible for running individual build operations, and is part of the build cache library, and has few dependencies.\r\n- `BuildOperationExecutor` is about parallel execution of several operations using a `BuildOperationQueue`. It has many more dependencies, and is not part of the published build cache library.\r\n\r\nThe PR #28364 removed the inheritance between the two types, but left `BuildOperationExecutor` with the same method signatures as `BuildOperationRunner` to keep compatible with existing code. We should follow up and replace these usages by injecting `BuildOperationRunner` instead. Once that's done we should remove the delegating methods from `BuildOperationExecutor`.\r\n\r\nWe should probably rename the executor to something like `ParallelBuildOperationExecutor` or something to signal that it is only about parallelism.","comments":[],"labels":["a:chore","in:build-operations"]},{"title":"> 100% EXECUTING displayed when writing dependency verification metadata","body":"### Current Behavior\n\nWriting dependency verification metadata will cause the console to display > 100% percentage done.\r\n\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/44197\/81341164-9311-4375-8256-e785cde73536)\r\n\n\n### Expected Behavior\n\nProgress completed should climb from 0 to 100%.\n\n### Context (optional)\n\nRelates to https:\/\/github.com\/gradle\/gradle\/issues\/26035 and https:\/\/github.com\/gradle\/gradle\/issues\/24370\n\n### Steps to Reproduce\n\nRun `.\/gradlew -i -write-verification-metadata sha256,pgp -export-keys resolveAllDependencies` against `master`.\n\n### Gradle version\n\n8.7-rc-2\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":[],"labels":["a:bug","in:console","in:dependency-verification"]},{"title":"Make --quiet quieter","body":"### Expected Behavior\r\n\r\nless noise from gradle, only output from my build. These lines should be changed to warn or info I think, but not output with quiet set\r\n\r\n### Current Behavior (optional)\r\n\r\n```\r\n* Try:\r\n> Run with --stacktrace option to get the stack trace.\r\n> Run with --info or --debug option to get more log output.\r\n> Run with --scan to get full insights.\r\n> Get more help at https:\/\/help.gradle.org\/.\r\n==============================================================================\r\n```\r\n\r\n### Context\r\n\r\nI don't expect to see help on how to run gradle when logging is set to --quiet. Like I know --stacktrace and --info already. This just takes up a lot of space in my intellij terminal, most of it actually, so I can't see the actual error without scrolling up.\r\n\r\n```\r\n\r\n------------------------------------------------------------\r\nGradle 8.6\r\n------------------------------------------------------------\r\n\r\nBuild time:   2024-02-02 16:47:16 UTC\r\nRevision:     d55c486870a0dc6f6278f53d21381396d0741c6e\r\n\r\nKotlin:       1.9.20\r\nGroovy:       3.0.17\r\nAnt:          Apache Ant(TM) version 1.10.13 compiled on January 4 2023\r\nJVM:          21.0.2 (Eclipse Adoptium 21.0.2+13-LTS)\r\nOS:           Linux 6.6.10-1-MANJARO amd64\r\n\r\n```","comments":["This feature request is in the backlog of the relevant team and is prioritized by them."],"labels":["a:feature","in:console"]},{"title":"--quiet doesn't print url for --scan","body":"### Expected Behavior\n\n--scan url should print when it's requested\r\n\r\n`.\/gradlew --scan --quiet` (ok, actually I have it set in properties)\r\n\r\n```properties\r\norg.gradle.logging.level=quiet\r\n```\r\n\r\n```\r\nWelcome to Gradle 8.6.\r\n\r\nTo run a build, run gradlew <task> ...\r\n\r\nTo see a list of available tasks, run gradlew tasks\r\n\r\nTo see more detail about a task, run gradlew help --task <task>\r\n\r\nTo see a list of command-line options, run gradlew --help\r\n\r\nFor more detail on using Gradle, see https:\/\/docs.gradle.org\/8.6\/userguide\/command_line_interface.html\r\n\r\nFor troubleshooting, visit https:\/\/help.gradle.org\r\n```\r\n\r\n`.\/gradlew --scan --warn`\r\n```\r\n\r\nWelcome to Gradle 8.6.\r\n\r\nTo run a build, run gradlew <task> ...\r\n\r\nTo see a list of available tasks, run gradlew tasks\r\n\r\nTo see more detail about a task, run gradlew help --task <task>\r\n\r\nTo see a list of command-line options, run gradlew --help\r\n\r\nFor more detail on using Gradle, see https:\/\/docs.gradle.org\/8.6\/userguide\/command_line_interface.html\r\n\r\nFor troubleshooting, visit https:\/\/help.gradle.org\r\n\r\nPublishing build scan...\r\nhttps:\/\/gradle.com\/s\/aa3mbcfxphb7c\r\n\r\nConfiguration cache entry reused.\r\n```\n\n### Current Behavior (optional)\n\n_No response_\n\n### Context\n\n```\r\n------------------------------------------------------------\r\nGradle 8.6\r\n------------------------------------------------------------\r\n\r\nBuild time:   2024-02-02 16:47:16 UTC\r\nRevision:     d55c486870a0dc6f6278f53d21381396d0741c6e\r\n\r\nKotlin:       1.9.20\r\nGroovy:       3.0.17\r\nAnt:          Apache Ant(TM) version 1.10.13 compiled on January 4 2023\r\nJVM:          21.0.2 (Eclipse Adoptium 21.0.2+13-LTS)\r\nOS:           Linux 6.6.10-1-MANJARO amd64\r\n```","comments":["The issue is in the backlog of the relevant team and is prioritized by them.\r\n","Not printing the \"publishing build scan\" output with `--quiet` is by design: https:\/\/github.com\/gradle\/gradle\/issues\/5043\n\nIf you want a build scan URL even with quiet mode you need to register a callback as described [here](https:\/\/github.com\/gradle\/gradle\/issues\/5043#issuecomment-1425854521).","Giving a quick glance at that. I think there's a design problem. I would suggest that gradle needs to adopt the concept of git's `porcelain` in which they have options for machine parse-able output which has a stable api, and a less stable and prettier output meant for human consumption. Although please don't adopt `--porcelain` as the option for the machine parse-able output, that was a terrible decision.\r\n\r\nI don't think log levels should be used to dictate machine parse-able output. There are actually standards for parse-able logs too. Although I get the impression they're doing more than that.\r\n\r\nThat's my 2 cents, add an option for machine parseable and an option for not, keep the current default, and eventually switch it.","What is it you want to parse from the output? The Build Scan URL? [This callback](https:\/\/docs.gradle.com\/enterprise\/gradle-plugin\/#capturing_the_build_scan_id_or_address) is exactly meant for that.","I'm not parsing anything, I just want to be able to click the link without a lot of extra noise from gradle. gradle itself is more noisy when running on the cli than I'd like, it obscures the actual important messaging. That's why I suggested a machine parse-able output for people that are parsing. As a user writing a callback for this is extreme. Arguably it should be the people who want machine parse-able output writing callbacks (if anyone).","Alright, so you want to be able to get the build scan link while using quiet logs. I don't think we'll change the default behavior, though I suppose if you had a flag you could set to log the Build Scan URL even when using quiet logging that would be good for you, right?","Basically but I feel like that's exactly what the -- scan parameter should do. I explicitly requested a scan why are you not telling me where it is. The default behavior is nonsensical and confusing to new users (or old ones even). It does not follow API best practices.\n\nHow do you even get the scan URL if it's not printed out? Is it actually persisted to the disk somewhere? I've never seen a way to list all my build scans. I don't think they're even associated with me in a way that that would work.","To be honest, there's probably not a solution that's going to make me super happy. The thing that's there now is unintuitive. I can only imagine that whatever change you add will Make the situation even more confusing.\n\nI've also figured out that quiet is both too quiet and not quiet enough to solve my problem. It silences things I explicitly requested and then continues to print things I don't want.\n\nI have no idea even how to describe I want you to print Only the relevant and useful information that will fit in 24 lines. Currently Gradle spends about 10 of those lines printing out a whole lot of noise... And then when you ask it for a scan it doesn't print that if you try to hide that other stuff. Which it turns out enabling quiet mode doesn't hide that anyways."],"labels":["a:bug","in:build-scan"]},{"title":"Copy fails if unable to chmod","body":"### Current Behavior\n\nOn Linux, using a Copy task to copy files to a mounted SMB share fails because setting file modes is not supported by SMB:\r\n\r\n```\r\nCaused by: org.gradle.api.internal.file.AbstractFileTreeElement$CopyFileElementException: Could not copy file 'SRCPATH\/FILE' to 'SMBMOUNT\/FILE'.\r\n        at org.gradle.api.internal.file.AbstractFileTreeElement.copyTo(AbstractFileTreeElement.java:88)\r\n        at org.gradle.api.internal.file.copy.DefaultFileCopyDetails.copyTo(DefaultFileCopyDetails.java:135)\r\n        at org.gradle.api.internal.file.copy.FileCopyAction$FileCopyDetailsInternalAction.processFile(FileCopyAction.java:49)\r\n        at org.gradle.api.internal.file.copy.NormalizingCopyActionDecorator.lambda$execute$0(NormalizingCopyActionDecorator.java:72)\r\n        at org.gradle.api.internal.file.copy.DuplicateHandlingCopyActionDecorator.lambda$execute$0(DuplicateHandlingCopyActionDecorator.java:65)\r\n        at org.gradle.api.internal.file.copy.CopyFileVisitorImpl.processFile(CopyFileVisitorImpl.java:68)\r\n        at org.gradle.api.internal.file.copy.CopyFileVisitorImpl.visitFile(CopyFileVisitorImpl.java:52)\r\n        at org.gradle.api.internal.file.collections.DirectoryFileTree.processSingleFile(DirectoryFileTree.java:136)\r\n        at org.gradle.api.internal.file.collections.DirectoryFileTree.visitFrom(DirectoryFileTree.java:123)\r\n        at org.gradle.api.internal.file.collections.DirectoryFileTree.visit(DirectoryFileTree.java:111)\r\n        at org.gradle.api.internal.file.collections.FileTreeAdapter.visit(FileTreeAdapter.java:110)\r\n        at org.gradle.api.internal.file.CompositeFileTree.visit(CompositeFileTree.java:108)\r\n        at org.gradle.api.internal.file.copy.CopySpecActionImpl.execute(CopySpecActionImpl.java:43)\r\n        at org.gradle.api.internal.file.copy.CopySpecActionImpl.execute(CopySpecActionImpl.java:25)\r\n        at org.gradle.api.internal.file.copy.DefaultCopySpec$DefaultCopySpecResolver.walk(DefaultCopySpec.java:842)\r\n        at org.gradle.api.internal.file.copy.DefaultCopySpec$DefaultCopySpecResolver.walk(DefaultCopySpec.java:844)\r\n        at org.gradle.api.internal.file.copy.DefaultCopySpec$DefaultCopySpecResolver.walk(DefaultCopySpec.java:844)\r\n        at org.gradle.api.internal.file.copy.DefaultCopySpec$DefaultCopySpecResolver.walk(DefaultCopySpec.java:844)\r\n        at org.gradle.api.internal.file.copy.DefaultCopySpec$DefaultCopySpecResolver.walk(DefaultCopySpec.java:844)\r\n        at org.gradle.api.internal.file.copy.DefaultCopySpec.walk(DefaultCopySpec.java:561)\r\n        at org.gradle.api.internal.file.copy.DelegatingCopySpecInternal.walk(DelegatingCopySpecInternal.java:311)\r\n        at org.gradle.api.internal.file.copy.CopySpecBackedCopyActionProcessingStream.process(CopySpecBackedCopyActionProcessingStream.java:42)\r\n        at org.gradle.api.internal.file.copy.DuplicateHandlingCopyActionDecorator.lambda$execute$1(DuplicateHandlingCopyActionDecorator.java:47)\r\n        at org.gradle.api.internal.file.copy.NormalizingCopyActionDecorator.lambda$execute$1(NormalizingCopyActionDecorator.java:64)\r\n        at org.gradle.api.internal.file.copy.FileCopyAction.execute(FileCopyAction.java:38)\r\n        at org.gradle.api.internal.file.copy.NormalizingCopyActionDecorator.execute(NormalizingCopyActionDecorator.java:63)\r\n        at org.gradle.api.internal.file.copy.DuplicateHandlingCopyActionDecorator.execute(DuplicateHandlingCopyActionDecorator.java:47)\r\n        at org.gradle.api.internal.file.copy.CopyActionExecuter.execute(CopyActionExecuter.java:47)\r\n        at org.gradle.api.tasks.AbstractCopyTask.copy(AbstractCopyTask.java:153)\r\n        at java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n        at java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\n        at java.base\/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n        at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:125)\r\n        at org.gradle.api.internal.project.taskfactory.StandardTaskAction.doExecute(StandardTaskAction.java:58)\r\n        at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:51)\r\n        at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:29)\r\n        at org.gradle.api.internal.tasks.execution.TaskExecution$3.run(TaskExecution.java:248)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n        at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n        at org.gradle.api.internal.tasks.execution.TaskExecution.executeAction(TaskExecution.java:233)\r\n        at org.gradle.api.internal.tasks.execution.TaskExecution.executeActions(TaskExecution.java:216)\r\n        at org.gradle.api.internal.tasks.execution.TaskExecution.executeWithPreviousOutputFiles(TaskExecution.java:199)\r\n        at org.gradle.api.internal.tasks.execution.TaskExecution.execute(TaskExecution.java:166)\r\n        at org.gradle.internal.execution.steps.ExecuteStep.executeInternal(ExecuteStep.java:105)\r\n        at org.gradle.internal.execution.steps.ExecuteStep.access$000(ExecuteStep.java:44)\r\n        at org.gradle.internal.execution.steps.ExecuteStep$1.call(ExecuteStep.java:59)\r\n        at org.gradle.internal.execution.steps.ExecuteStep$1.call(ExecuteStep.java:56)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n        at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n        at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:56)\r\n        at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:44)\r\n        at org.gradle.internal.execution.steps.RemovePreviousOutputsStep.execute(RemovePreviousOutputsStep.java:67)\r\n        at org.gradle.internal.execution.steps.RemovePreviousOutputsStep.execute(RemovePreviousOutputsStep.java:37)\r\n        at org.gradle.internal.execution.steps.CancelExecutionStep.execute(CancelExecutionStep.java:41)\r\n        at org.gradle.internal.execution.steps.TimeoutStep.executeWithoutTimeout(TimeoutStep.java:74)\r\n        at org.gradle.internal.execution.steps.TimeoutStep.execute(TimeoutStep.java:55)\r\n        at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:50)\r\n        at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:28)\r\n        at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.executeDelegateBroadcastingChanges(CaptureStateAfterExecutionStep.java:100)\r\n        at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.execute(CaptureStateAfterExecutionStep.java:72)\r\n        at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.execute(CaptureStateAfterExecutionStep.java:50)\r\n        at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:40)\r\n        at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:29)\r\n        at org.gradle.internal.execution.steps.BuildCacheStep.executeWithoutCache(BuildCacheStep.java:179)\r\n        at org.gradle.internal.execution.steps.BuildCacheStep.lambda$execute$1(BuildCacheStep.java:70)\r\n        at org.gradle.internal.Either$Right.fold(Either.java:175)\r\n        at org.gradle.internal.execution.caching.CachingState.fold(CachingState.java:59)\r\n        at org.gradle.internal.execution.steps.BuildCacheStep.execute(BuildCacheStep.java:68)\r\n        at org.gradle.internal.execution.steps.BuildCacheStep.execute(BuildCacheStep.java:46)\r\n        at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:36)\r\n        at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:25)\r\n        at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:36)\r\n        at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:22)\r\n        at org.gradle.internal.execution.steps.SkipUpToDateStep.executeBecause(SkipUpToDateStep.java:91)\r\n        at org.gradle.internal.execution.steps.SkipUpToDateStep.lambda$execute$2(SkipUpToDateStep.java:55)\r\n        at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:55)\r\n        at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:37)\r\n        at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:65)\r\n        at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:36)\r\n        at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:37)\r\n        at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:27)\r\n        at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:76)\r\n        at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:37)\r\n        at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:108)\r\n        at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:55)\r\n        at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:71)\r\n        at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:45)\r\n        at org.gradle.internal.execution.steps.SkipEmptyWorkStep.executeWithNonEmptySources(SkipEmptyWorkStep.java:177)\r\n        at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:86)\r\n        at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:53)\r\n        at org.gradle.internal.execution.steps.RemoveUntrackedExecutionStateStep.execute(RemoveUntrackedExecutionStateStep.java:32)\r\n        at org.gradle.internal.execution.steps.RemoveUntrackedExecutionStateStep.execute(RemoveUntrackedExecutionStateStep.java:21)\r\n        at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsStartedStep.execute(MarkSnapshottingInputsStartedStep.java:38)\r\n        at org.gradle.internal.execution.steps.LoadPreviousExecutionStateStep.execute(LoadPreviousExecutionStateStep.java:36)\r\n        at org.gradle.internal.execution.steps.LoadPreviousExecutionStateStep.execute(LoadPreviousExecutionStateStep.java:23)\r\n        at org.gradle.internal.execution.steps.CleanupStaleOutputsStep.execute(CleanupStaleOutputsStep.java:75)\r\n        at org.gradle.internal.execution.steps.CleanupStaleOutputsStep.execute(CleanupStaleOutputsStep.java:41)\r\n        at org.gradle.internal.execution.steps.ExecuteWorkBuildOperationFiringStep.lambda$execute$2(ExecuteWorkBuildOperationFiringStep.java:66)\r\n        at org.gradle.internal.execution.steps.ExecuteWorkBuildOperationFiringStep.execute(ExecuteWorkBuildOperationFiringStep.java:66)\r\n        at org.gradle.internal.execution.steps.ExecuteWorkBuildOperationFiringStep.execute(ExecuteWorkBuildOperationFiringStep.java:38)\r\n        at org.gradle.internal.execution.steps.AssignWorkspaceStep.lambda$execute$0(AssignWorkspaceStep.java:32)\r\n        at org.gradle.api.internal.tasks.execution.TaskExecution$4.withWorkspace(TaskExecution.java:293)\r\n        at org.gradle.internal.execution.steps.AssignWorkspaceStep.execute(AssignWorkspaceStep.java:30)\r\n        at org.gradle.internal.execution.steps.AssignWorkspaceStep.execute(AssignWorkspaceStep.java:21)\r\n        at org.gradle.internal.execution.steps.IdentityCacheStep.execute(IdentityCacheStep.java:37)\r\n        at org.gradle.internal.execution.steps.IdentityCacheStep.execute(IdentityCacheStep.java:27)\r\n        at org.gradle.internal.execution.steps.IdentifyStep.execute(IdentifyStep.java:47)\r\n        at org.gradle.internal.execution.steps.IdentifyStep.execute(IdentifyStep.java:34)\r\n        at org.gradle.internal.execution.impl.DefaultExecutionEngine$1.execute(DefaultExecutionEngine.java:64)\r\n        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid(ExecuteActionsTaskExecuter.java:145)\r\n        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:134)\r\n        at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute(FinalizePropertiesTaskExecuter.java:46)\r\n        at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute(ResolveTaskExecutionModeExecuter.java:51)\r\n        at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:57)\r\n        at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:74)\r\n        at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:36)\r\n        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.executeTask(EventFiringTaskExecuter.java:77)\r\n        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:55)\r\n        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:52)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n        at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n        at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:52)\r\n        at org.gradle.execution.plan.LocalTaskNodeExecutor.execute(LocalTaskNodeExecutor.java:42)\r\n        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:331)\r\n        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:318)\r\n        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.lambda$execute$0(DefaultTaskExecutionGraph.java:314)\r\n        at org.gradle.internal.operations.CurrentBuildOperationRef.with(CurrentBuildOperationRef.java:80)\r\n        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:314)\r\n        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:303)\r\n        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.execute(DefaultPlanExecutor.java:463)\r\n        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.run(DefaultPlanExecutor.java:380)\r\n        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n        at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)\r\nCaused by: org.gradle.internal.file.FileException: Could not set file mode 644 on 'SMBMOUNT\/FILE'.\r\n        at org.gradle.internal.nativeintegration.filesystem.services.GenericFileSystem.chmod(GenericFileSystem.java:115)\r\n        at org.gradle.api.internal.file.AbstractFileTreeElement.copyTo(AbstractFileTreeElement.java:85)\r\n        ... 150 more\r\nCaused by: net.rubygrapefruit.platform.NativeException: Could not set UNIX mode on SMBMOUNT\/FILE: could not chmod file (errno 95: operation not supported)\r\n        at net.rubygrapefruit.platform.internal.DefaultPosixFiles.setMode(DefaultPosixFiles.java:65)\r\n        at org.gradle.internal.nativeintegration.filesystem.services.NativePlatformBackedChmod.chmod(NativePlatformBackedChmod.java:33)\r\n        at org.gradle.internal.nativeintegration.filesystem.services.GenericFileSystem.chmod(GenericFileSystem.java:113)\r\n        ... 151 more\r\n```\r\n\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/master\/platforms\/core-configuration\/file-collections\/src\/main\/java\/org\/gradle\/api\/internal\/file\/AbstractFileTreeElement.java#L85 seems to be the critical spot to me - if the failing chmod call would only cause a warning to be shown, things would be OK for me. If the chmod was only done if fileMode or filePermissions were set, things would be OK for me.\n\n### Expected Behavior\n\nCopying all source files should happen, even if chmodding them fails.\n\n### Context (optional)\n\nI need to copy artifacts to an SMB share so that other people can continue working with them. Switching to something that's not an SMB share is not a short term option.\n\n### Steps to Reproduce\n\nHave a writable SMB share. Mount it on a Linux machine (here: `gio mount smb:\/\/...`). Create a Copy task that copies something to it. Run that Copy task.\n\n### Gradle version\n\n8.5.0\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\nLinux build environment, SMB file storage.","comments":["The issue is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:bug","in:file-tasks"]},{"title":"Try out embedding Kotlin 2.0.0-Beta4","body":"This is a discovery PR to validate 2.0.0-Beta4 does not regress.\r\nNot to be merged at this stage.\r\n","comments":[],"labels":["in:kotlin-dsl","a:investigation"]},{"title":"Allow empty values for @Option arguments","body":"### Expected Behavior\r\n\r\nThere should be a way to pass an empty string to `@Option` task property.\r\n\r\n### Current Behavior (optional)\r\n\r\nGradle does not seem to support empty strings:\r\n\r\n```kotlin\r\nabstract class FooTask : DefaultTask() {\r\n    @get:Option(option = \"foo\", description = \"description\")\r\n    @get:Internal\r\n    abstract val foo: Property<String>\r\n\r\n    init {\r\n        foo.convention(\"\")\r\n    }\r\n\r\n    @TaskAction\r\n    fun action() {\r\n        println(\"Foo is '${foo.get()}'\")\r\n    }\r\n}\r\n\r\nval foo by tasks.registering(FooTask::class)\r\n```\r\n\r\n```\r\n% gradle foo       \r\n\r\n> Task :foo\r\nFoo is ''\r\n\r\n% gradle foo --foo \r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nProblem configuring task :foo from command line.\r\n> No argument was provided for command-line option '--foo' with description: 'description'\r\n\r\n% gradle foo --foo \"\"  \r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nProblem configuring task :foo from command line.\r\n> An empty argument was provided for command-line option '--foo'.\r\n\r\n```\r\n\r\n### Context\r\n\r\nI want to pass a string argument, and Gradle forbids empty strings.\r\n\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/a814fde3242785bbc4879bdf3db5ae99ec108b78\/platforms\/core-runtime\/cli\/src\/main\/java\/org\/gradle\/cli\/CommandLineParser.java#L439-L442","comments":["This feature request is in the backlog of the relevant team and is prioritized by them.\r\n\r\n\r\n***\r\n\r\nI've updated the description to illustrate the issue better."],"labels":["a:feature","in:console"]},{"title":"Composite build exception when adding a library module dependency from the second build","body":"### Current Behavior\n\n1. I am having 2 Android projects in two folders next to each other as follow:\r\n\r\n`MyApplication`\r\n.. `app` Android application module\r\n...... `build.gradle`\r\n.. `api` - Android library module\r\n...... `build.gradle`\r\n.. `settings.gradle`\r\n\r\n`SharedLibraries`\r\n.. `app` Android application module\r\n...... `build.gradle`\r\n.. `shared-library` - Android library module\r\n...... `build.gradle`\r\n.. `settings.gradle`\r\n\r\n2. `MyApplication\/settings.gradle` has `includeBuild(\"..\/SharedLibraries\")`.\r\n\r\n3. I want to have a `SharedLibraries\/shared-library` dependency in `MyApplication\/api\/build.gradle`\r\n\r\n---\r\n\r\nWhen I add in `MyApplication\/api\/build.gradle` this line:\r\n`implementation(project(\":SharedLibraries:shared-library\"))`\r\n\r\nI get this exception\r\n```\r\nBuild file '\/Users\/dimitar\/AndroidStudioProjects\/MyApplication\/api\/build.gradle.kts' line: 33\r\norg.gradle.api.UnknownProjectException: Project with path ':SharedLibraries:shared-library' could not be found in project ':api'.\r\n\tat org.gradle.api.internal.project.DefaultProject.project(DefaultProject.java:692)\r\n\tat org.gradle.api.internal.project.DefaultProject.project(DefaultProject.java:685)\r\n\tat org.gradle.internal.service.scopes.DefaultProjectFinder.getProject(DefaultProjectFinder.java:33)\r\n```\r\n---\r\n\r\nAttached is a screenshot of the project structure.\r\n\r\n<img width=\"461\" alt=\"composite_build_project\" src=\"https:\/\/github.com\/gradle\/gradle\/assets\/1563337\/2902ad65-48a1-436d-b438-4b93661ef846\">\n\n### Expected Behavior\n\nLibrary module dependency from a `includeBuild()` project should be valid and used as expected.\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\nPlease open `MyApplication` project from Android Studio and try to `File > Sync Project with Gradle Files`.\r\n\r\nException will be shown in `Build` window.\r\n\r\nHere is the project zip - [composite_build_exception.zip](https:\/\/github.com\/gradle\/gradle\/files\/14489329\/composite_build_exception.zip)\r\n\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\nAndroid Studio Iguana\r\nMac OS Sonoma 14.3.1","comments":["Your issue appears to be a question about how to use Gradle. They should be asked in a different channel, so we will close it. Your question might be answered in Gradle documentation or on our community Slack or forums. Find links to these resources on [help.gradle.org](https:\/\/help.gradle.org\/).\r\n\r\nIf you think our analysis is wrong, please provide us with more detailed information explaining why.\r\n\r\n***\r\n\r\nYou are supposed to use `implementation(\"com.example.shared_library:1.0\")` instead of `implementation(project(\":SharedLibraries:shared-library\"))`. See the [documentation](https:\/\/docs.gradle.org\/current\/userguide\/composite_builds.html).","I still think the issue lies in composite builds.\r\n\r\nThe documentation provides sample of using binary libraries (JAR, AAR) - [Defining a composite build](https:\/\/docs.gradle.org\/current\/userguide\/composite_builds.html#defining_composite_builds):\r\n\r\n`The my-utils multi-project build produces two Java libraries, number-utils and string-utils. The my-app build produces an executable using functions from those libraries.`\r\n\r\nThe problem I am having is using the Android library module as code, not as JAR\/AAR.","> The problem I am having is using the Android library module as code, not as JAR\/AAR.\r\n\r\nThen try to include those projects in your build without composite builds, using [regular `include`](https:\/\/docs.gradle.org\/current\/userguide\/declaring_dependencies_between_subprojects.html)","`include()` works **only** when modules are part of same project.\r\n\r\nThese modules are in two separate projects.\r\n\r\nComposite builds include a separate build via `includeBuild()`\r\n\r\nI would not post here unless I am really stuck.\r\n\r\nI think this in issue with Gradle (or Android Gradle plugin).\r\n\r\nStill nothing from Android team - https:\/\/issuetracker.google.com\/issues\/328115462.\r\nAnd not that much in Gradle Community Slack channel - https:\/\/gradle-community.slack.com\/archives\/CAHSN3LDN\/p1709760926133779.\r\n\r\nNo fun :( ","I stand corrected.\r\nThe issue **is** on my side, not a Gradle problem.\r\n\r\nAdding `group` and `version` and using Maven coordinates solved it.\r\n\r\nThanks to the responds which nudged me to the right direction - https:\/\/gradle-community.slack.com\/archives\/CAHSN3LDN\/p1709760926133779","@dimitar71 Sorry for misleading you. Glad you resolved the issue.\r\n\r\nThe comment in [the thread](https:\/\/www.linen.dev\/s\/gradle-community\/t\/16646261\/hello-i-am-trying-to-deal-with-a-specific-issue-which-is-hap#5d6a1723-587b-4717-af35-56ab5ae2e231) is right: the documentation on the composite builds should be improved. Thus, I'm reopening this as a documentation issue."],"labels":["in:composite-builds","a:documentation"]},{"title":"Provide API to obtain the public (user-supplied) type of a Gradle-decorated instance","body":"### Current Behavior\n\nWe have an internal bug to track removals of all internal Gradle usages, and we had a workaround in VariantManager here for the `GeneratedSubclass`: https:\/\/android.googlesource.com\/platform\/tools\/base\/+\/a8b58f3b039fa4be6dfde0457e559ed65a5d1f76\r\n\r\nHowever, this led to a regression in issuetracker.google.com\/325650371, so it was reverted.\r\n\r\nFiling this bug to request a public API that can be used for the `GeneratedSubClass`.\n\n### Expected Behavior\n\nn\/a\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\nn\/a\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["We need more information to understand the request. Could you please provide more context about what you want to achieve?\r\n\r\nIf we receive a clear use case description, we may be able to suggest a workaround.\r\n\r\nThis issue will be closed after 7 days unless you provide more information.\r\n\r\n***\r\n\r\nWhy do you need to know if the class is a `GeneratedSubClass`? What is the original problem you're trying to solve?","We have a check in AGP that is using the GeneratedSubclass property, but we would like to remove all internal usages of Gradle in the codebase.\r\n\r\n```\r\nvariantBuilder.registerExtension(\r\n    if (it is GeneratedSubclass) it.publicType() else it.javaClass,\r\n        it\r\n    )\r\n```\r\n\r\nhttps:\/\/android.googlesource.com\/platform\/tools\/base\/+\/a8b58f3b039fa4be6dfde0457e559ed65a5d1f76%5E%21\/#F0 represents the workaround that we were using previously, but it led to regressions.\r\nVariantManager file: https:\/\/cs.android.com\/android-studio\/platform\/tools\/base\/+\/mirror-goog-studio-main:build-system\/gradle-core\/src\/main\/java\/com\/android\/build\/gradle\/internal\/VariantManager.kt;l=942\r\n\r\nWe need to know if a class is `GeneratedSubclass` in this file in order to register an extension on the class's public type.\r\n\r\nThe bug also explains more about the issue that occurred: https:\/\/issuetracker.google.com\/325650371","\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n","This feature request is in the backlog of the relevant team and is prioritized by them.\r\n***\r\n\r\nI suppose one available workaround would be to design user-facing API so the public type can be supplied separately, similar to what ExtensionContainer allows. Of course, in this particular case it will require tweaking the existing API of the AGP."],"labels":["a:feature","in:core-utilities"]},{"title":"Please clarify the sense of `tasks.named { ... }` opposed to `tasks.matching { ... }`, also in release notes, resp. actually make them behave different","body":"### Current Behavior\r\n\r\nI know that you usually do not modify published release notes, but the release notes for 8.6 are plainly wrong.\r\nThey state that `tasks.matching { it.name.contains(\"pack\") }.configureEach { ... }` does realize all tasks which is not true.\r\nAnd that due to that `tasks.named { it.contains(\"pack\") }.configureEach { ... }` was introduced in 8.6 to mitigate that problem.\r\nBut these statements are plainly wrong.\r\n\r\n`tasks.matching { it.name.contains(\"pack\") }.configureEach { ... }` did never and still does not realize any additional tasks.\r\n\r\n`tasks.matching { it.name.contains(\"pack\") }.forEach { ... }` causes all tasks to be realized.\r\nBut so does `tasks.named { it.contains(\"pack\") }.forEach { ... }`.\r\n\r\n`tasks.matching { it.name.contains(\"pack\") }.all { ... }` causes all tasks to be realized.\r\nBut so does `tasks.named { it.contains(\"pack\") }.all { ... }`.\r\n\r\n`val packs by tasks.registering { dependsOn(tasks.matching { it.name.contains(\"pack\") }) }` causes all tasks to be realized.\r\nBut so does `val packs by tasks.registering { dependsOn(tasks.named { it.contains(\"pack\") }) }`.\r\n\r\nI would have hoped `tasks.named { ... }` can actually work without realizing tasks in situations where `tasks.matching` cannot, for example when using `forEach` or `all` or `dependsOn`, as there only the name should be necessary and not the whole element like with `matching`.\r\nBut as it is currently, as far as I have seen both behave exactly identical and you just have two ways now to do exactly the same with exactly the same sideeffects.\r\n\r\n### Expected Behavior\r\n\r\nThe release notes should not state the false fact that confuses users reading that.\r\nOptimally, the `named { ... }` would be reworked to not force-realize any unmatched tasks even if eager APIs like `all` or `forEach` or `dependsOn` are used, as this should be totally unnecessary and then actually be a significant improvement over `tasks.matching`.\r\n\r\n### Gradle version\r\n\r\n8.6\r\n","comments":["Here is another user wondering about the same: https:\/\/discuss.gradle.org\/t\/question-regarding-8-6-release-notes-tasks-named\/47865","I am very confused. I expected `tasks.named` to not construct tasks and to just use their name from the `TaskProvider`. What am I missing?\r\n\r\nI took the code from the forum post and from this and built upon it:\r\n\r\n<details><summary>Examples<\/summary>\r\n<p>\r\n\r\n```kotlin\r\n\r\n\r\nprintln(\"Gradle Version: ${GradleVersion.current()}\")\r\n\r\nabstract class TX: DefaultTask() {\r\n    init {\r\n        println(\"$this:\\tcreated\")\r\n    }\r\n}\r\ntasks.register<TX>(\"task1\") {\r\n    println(\"$this:\\tconfigured\")\r\n}\r\n\r\n\r\ntasks.register<TX>(\"task2\"){\r\n    println(\"$this:\\tconfigured\")\r\n}\r\n\r\ntasks.register<TX>(\"task3\"){\r\n    println(\"$this:\\tconfigured\")\r\n}\r\n\r\nenum class Example {\r\n    Main,\r\n    DependsOnMatching,\r\n    DependsOnNamed\r\n}\r\n\r\nval EXAMPLE = Example.DependsOnNamed\r\n\r\nprintln(\"\\nEXAMPLE: ${EXAMPLE.name}\\n\")\r\n\r\nwhen (EXAMPLE) {\r\n    Example.Main -> {\r\n        \/\/ causes all to be realized, because you configured the instance\r\n        tasks.matching {  s: Task ->\r\n            println(\"$s:\\tRealized in 'matching'\")\r\n            s.name.startsWith(\"t\")\r\n        }.configureEach {\r\n            println(\"$this:\\tConfigure in 'configureEach'\")\r\n        }\r\n    }\r\n    Example.DependsOnMatching -> {\r\n        val packs by tasks.registering {\r\n            println(\"$this:\\tregistering\")\r\n            dependsOn(tasks.matching {\r\n                println(\"$it:\\tRealized in `matching`\")\r\n                it.name.contains(\"subPack\")\r\n            })\r\n        }\r\n    }\r\n    Example.DependsOnNamed -> {\r\n        val packs by tasks.registering {\r\n            println(\"$this:\\tregistering\")\r\n            dependsOn(tasks.named {\r\n                println(\"$it:\\tNamed referenced in `named`\")\r\n                it.contains(\"subPack\")\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n```\r\n\r\n<\/p>\r\n<\/details> \r\n\r\nWhen I execute `packs` with `EXAMPLE` set to `DependsOnNamed`, I expected that `task1`, `task2`, and `task3` would not be created. But they were. The output includes:\r\n\r\n```\r\ntask ':task1':\tcreated\r\ntask ':task1':\tconfigured\r\n```","@mgroth0 I think any attempt to use TaskContainer iteration \"default\" method , like size(), iterator() causes realization of tasks.\r\n\r\nSo in your example, even simple line like(groovy):\r\n\r\n```groovy\r\ndef filtered = tasks.named { itn ->\r\n        println(\"$itn:\\tNamed referenced in `named`\")\r\n        return itn.contains(\"subPack\")\r\n    }\r\n\r\nprintln \"filtered=${filtered.size()}\"\r\n```\r\n\r\nSo the only way to correctly iterate this Iterbale is by\r\n```\r\nconfigureEach\r\n```\r\nBut the later can't be used in register context\r\n```groovy\r\ntasks.register(\"packs\") { it->\r\n\r\n    println(\"$it:\\tregistering\")\r\n    \r\n    filtered.configureEach { f ->\r\n        t.dependsOn f\r\n    }\r\n}\r\n```\r\n\r\nthrows an exception:\r\n```\r\nA problem occurred configuring root project 'kotlin-registering-gradle'.\r\n> Could not create task ':packs'.\r\n   > DefaultTaskCollection#configureEach(Action) on task set cannot be executed in the current context.\r\n\r\n```\r\n\r\nSeems like a deadend or desisgn  hole  :worried:\r\n","Yes, as I said, it behaves exactly identical to `matching` as far as I have seen.","Thank you for raising this, we are investigating the issue.","@Vampire, you are correct, the release notes are wrong. I've written [a fix](https:\/\/github.com\/gradle\/gradle\/tree\/jb\/clarify-named-collection-method-in-release-notes) and will try to fix the already released documentation.\r\n\r\nIn a nutshell, yes, when you just call `matching()` or `named()`, they behave the same way, until you iterate the filtered task container they produce. Once you do that `matching()` has unpleasant side-effects, because it triggers the creation of ALL lazy tasks in the original container, regardless if they have been filtered out or not. `named()` doesn't have this flaw.\r\n\r\nPlease let me know if you still have issues with the fixed version of the release notes.","@jbartok as I said, in 8.6 both behave identical while I hoped for the behavior \/ difference you described which unfortunately is **not** the case.\r\n\r\nFor example:\r\n- do `gw init --use-defaults`\r\n- add to the build script\r\n  ```kts\r\n  tasks.configureEach { println(\"configured $path\") }\r\n  tasks.named { it == \"help\" }.all {}\r\n  ```\r\n- run `gw -m`\r\n\r\nOutput:\r\n```plain\r\n> Configure project :\r\nconfigured :help\r\nconfigured :projects\r\nconfigured :tasks\r\nconfigured :properties\r\nconfigured :dependencyInsight\r\nconfigured :dependencies\r\nconfigured :buildEnvironment\r\nconfigured :components\r\nconfigured :model\r\nconfigured :dependentComponents\r\nconfigured :outgoingVariants\r\nconfigured :resolvableConfigurations\r\nconfigured :javaToolchains\r\nconfigured :prepareKotlinBuildScriptModel\r\nconfigured :init\r\nconfigured :wrapper\r\nconfigured :kotlinDslAccessorsReport\r\n:help SKIPPED\r\n```\r\n\r\nSame if you change the build script content to\r\n```kts\r\ntasks.configureEach { println(\"configured $path\") }\r\nval foo by tasks.registering {\r\n    dependsOn(tasks.named { it == \"help\" })\r\n}\r\n```\r\nand do `gw foo`.\r\nOutput:\r\n```plain\r\n12:14:48: Executing 'foo'...\r\n\r\nconfigured :foo\r\nconfigured :help\r\nconfigured :projects\r\nconfigured :tasks\r\nconfigured :properties\r\nconfigured :dependencyInsight\r\nconfigured :dependencies\r\nconfigured :buildEnvironment\r\nconfigured :components\r\nconfigured :model\r\nconfigured :dependentComponents\r\nconfigured :outgoingVariants\r\nconfigured :resolvableConfigurations\r\nconfigured :javaToolchains\r\nconfigured :prepareKotlinBuildScriptModel\r\nconfigured :init\r\nconfigured :wrapper\r\nconfigured :kotlinDslAccessorsReport\r\n\r\n> Task :help\r\n\r\nWelcome to Gradle 8.6.\r\n[...}\r\n> Task :foo\r\n```","Also same with 8.7-rc-2.\r\nI can not see any difference in behavior between using `matching` or `named`.","@Vampire, you are correct in everything you said, I'm sorry that it took me so long to reach the same conclusion. In my defense, we have tests for the behavior we aimed for, but apparently we shot ourselves in the foot with them, because they are broken in subtle ways... That's not really an excuse, just saying. We will strive to fix the situation as soon as we are able. "],"labels":["a:bug","in:configuration-model"]},{"title":"\ud83d\uddc2\ufe0f Gradle Configuration Cache","body":"In Gradle 8.1 (April 2023), we announced the general availability of the [Gradle Configuration Cache](https:\/\/docs.gradle.org\/8.5\/userguide\/configuration_cache.html). This feature significantly improves build performance by caching the result of the configuration phase and reusing this for subsequent builds. Using the configuration cache, Gradle can skip the configuration phase entirely when nothing that affects the build configuration, such as build scripts, has changed. See this [blog post](https:\/\/blog.gradle.org\/improvements-in-the-build-configuration-input-tracking) by Mikhail Lopatkin to learn more about how configuration caching works.\r\n\r\n### References\r\n\r\n- [Configuration Cache documentation](https:\/\/docs.gradle.org\/current\/userguide\/configuration_cache.html)\r\n- [Initial Announcement](https:\/\/blog.gradle.org\/improvements-in-the-build-configuration-input-tracking)\r\n- [Features not implemented yet](https:\/\/docs.gradle.org\/current\/userguide\/configuration_cache.html#config_cache:not_yet_implemented)\r\n\r\n### Discuss\r\n\r\n- `#configuration-cache` channel on the Community Slack\r\n- [Related GitHub Issues](https:\/\/github.com\/gradle\/gradle\/labels\/in%3Aconfiguration-cache)\r\n\r\n### Status\r\n\r\n\r\n```[tasklist]\r\n### Planned\r\n- [x] Initial Release\r\n- [x] General Availability\r\n- [ ] Gradle 8 - Stabilization and Improvements. See the full list [here](https:\/\/docs.gradle.org\/current\/userguide\/configuration_cache.html#config_cache:not_yet_implemented)\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/13490\r\n- [ ] Gradle 9 - https:\/\/github.com\/gradle\/build-tool-roadmap\/issues\/75\r\n```\r\n\r\n```[tasklist]\r\n### Considered\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/13510\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/13454\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/13506\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/25979\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/20969\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/13588\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/22879\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/24085\r\n```\r\n","comments":[],"labels":["a:epic","in:configuration-model","in:configuration-cache","@configuration-cache","platform:configuration-cache","platform:core_configuration","roadmap"]},{"title":"\ud83d\udee3\ufe0f Gradle Public Roadmap","body":"### Expected Behavior\r\n\r\nThe Gradle Build Tool project regularly ships new releases full of new features and bug fixes. We also run many other initiatives to improve developer experiences and the ecosystem. To show the key initiatives, we have a [Public Roadmap](https:\/\/github.com\/orgs\/gradle\/projects\/31\/views\/1) \r\n\r\n## References\r\n\r\n- [Public Roadmap - GitHub Board](https:\/\/github.com\/orgs\/gradle\/projects\/31\/views\/1)\r\n- [Public Roadmap Announcement](https:\/\/blog.gradle.org\/roadmap-announcement)\r\n- [gradle\/build-tool-roadmap](https:\/\/github.com\/gradle\/build-tool-roadmap) - Repository for generic roadmap items\r\n\r\n## Discuss \r\n\r\nOur primary channels of communication with the user community to share plans and get feedback were [release notes](https:\/\/gradle.org\/releases\/), [blog](https:\/\/blog.gradle.org\/), [issue tracker](https:\/\/github.com\/gradle\/gradle\/issues), [forums](https:\/\/discuss.gradle.org\/), and [community Slack](https:\/\/gradle-community.slack.com\/). \r\n\r\nTo discuss the roadmap specifically, use the `#roadmap` channel on the community Slack\r\n","comments":[],"labels":["a:epic","in:building-gradle","roadmap"]},{"title":"[POC] Untie parallel TAPI actions from parallel project execution","body":null,"comments":["@bot-gradle test without pts","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"7f96179c2299f8a23812cff4bf9876787d28d243\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds with parameters: `-DenablePredictiveTestSelection=false` for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=7f96179c2299f8a23812cff4bf9876787d28d243) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79004626)","\ud83e\udd77 **Code experts: adammurdoch, lptr** \n \nlptr, reinsch82 have most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nadammurdoch, ghale have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/core-configuration\/configuration-cache\/src\/main\/kotlin\/org\/gradle\/configurationcache\/DefaultBuildTreeModelControllerServices.kt` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 57% \n\n`platforms\/core-runtime\/base-services\/src\/main\/java\/org\/gradle\/internal\/resources\/ProjectLeaseRegistry.java` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 64% \nghale: 29% \n\n`platforms\/core-runtime\/base-services\/src\/main\/java\/org\/gradle\/internal\/resources\/ProjectLockRegistry.java` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 100% \n\n`platforms\/core-runtime\/base-services\/src\/main\/java\/org\/gradle\/internal\/work\/DefaultWorkerLeaseService.java` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 57% \nghale: 39% \n\n`platforms\/core-runtime\/base-services\/src\/main\/java\/org\/gradle\/internal\/work\/ProjectParallelExecutionController.java` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 100% \n\n`platforms\/core-runtime\/base-services\/src\/test\/groovy\/org\/gradle\/internal\/work\/AbstractWorkerLeaseServiceTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 100% \n\n`platforms\/ide\/tooling-api\/src\/crossVersionTest\/groovy\/org\/gradle\/integtests\/tooling\/r68\/ParallelActionExecutionCrossVersionSpec.groovy` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 100% \n\n`subprojects\/composite-builds\/src\/test\/groovy\/org\/gradle\/composite\/internal\/DefaultIncludedBuildTaskGraphParallelTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |1 additions & 2 deletions | \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 97% \n\n`subprojects\/core\/src\/main\/java\/org\/gradle\/api\/internal\/project\/DefaultProjectStateRegistry.java` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 84% \nghale: 5% \n\n`subprojects\/core\/src\/main\/java\/org\/gradle\/api\/internal\/project\/ProjectState.java` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 96% \n\n`subprojects\/core\/src\/main\/java\/org\/gradle\/internal\/buildtree\/BuildModelParameters.java` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 88% \n\n`subprojects\/core\/src\/main\/java\/org\/gradle\/internal\/buildtree\/BuildTreeState.java` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV | 3 additions & 2 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 94% \n\n`subprojects\/core\/src\/main\/java\/org\/gradle\/testfixtures\/internal\/ProjectBuilderImpl.java` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV | 4 additions & 1 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 55% \nghale: 3% \n\n`subprojects\/core\/src\/main\/java\/org\/gradle\/tooling\/provider\/model\/internal\/DefaultToolingModelBuilderRegistry.java` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |2 additions & 1 deletions | \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 81% \nghale: 1% \n\n`subprojects\/core\/src\/test\/groovy\/org\/gradle\/api\/internal\/project\/DefaultProjectStateRegistryTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 91% \nghale: 7% \n\n`subprojects\/core\/src\/test\/groovy\/org\/gradle\/internal\/model\/StateTransitionControllerTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 100% \n\n`subprojects\/core\/src\/test\/groovy\/org\/gradle\/internal\/operations\/DefaultBuildOperationExecutorParallelExecutionTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |3 additions & 4 deletions | \n \n\nKnowledge based on git-blame: \n adammurdoch: 8% \n\n`subprojects\/core\/src\/test\/groovy\/org\/gradle\/internal\/operations\/DefaultBuildOperationQueueTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n ghale: 48% \nadammurdoch: 8% \n\n`subprojects\/core\/src\/test\/groovy\/org\/gradle\/internal\/operations\/MaxWorkersTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |2 additions & 3 deletions | \n \n\nKnowledge based on git-blame: \n ghale: 38% \nadammurdoch: 4% \n\n`subprojects\/core\/src\/test\/groovy\/org\/gradle\/tooling\/provider\/model\/internal\/DefaultToolingModelBuilderRegistryTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 89% \n\n`subprojects\/internal-testing\/src\/main\/groovy\/org\/gradle\/test\/fixtures\/work\/TestWorkerLeaseService.groovy` \n \n\nActivity based on git-commit: \n\n |  | lptr | reinsch82| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 51% \nghale: 46% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>","@bot-gradle test without pts","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"91e365e6a3ffa7cbc505812375d9bf7452636fba\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds with parameters: `-DenablePredictiveTestSelection=false` for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=91e365e6a3ffa7cbc505812375d9bf7452636fba) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79244611)"],"labels":["platform:ide","platform:build_infrastructure","platform:core_runtime","platform:core_configuration"]},{"title":"Kotlin jvm plugin adds to 'Created during configuration' for build scan","body":"### Current Behavior\r\n\r\nApplying alias(libs.plugins.jvm) adds to 'created during configuration' for build scan.\r\n\r\nThis also happens for both the `java-library` plugin, and the `application` plugin\r\n\r\n\r\n### Expected Behavior\r\n\r\nA default jvm plugin should not be adding to configuration time, particularly one is that designed for designed - where the configuration time being incurred is happening due to compileJava, and not even compileKotlin.\r\n\r\nAs per build scan, we can see the below:\r\n\r\nConfiguration time\t0.304s\t(0.306s total)\r\nPlugin application\t0.189s\t(0.191s total)\r\nCollection callbacks\t0.098s\t\r\nProject.afterEvaluate (1st)\t0.007s\t\r\nProject.afterEvaluate (18th)\t0.006s\t\r\nProject.afterEvaluate (20th)\t0.002s\t\r\nProject.afterEvaluate (21st)\t0.002s\t\r\nGradle.projectsEvaluated (1st)\t0.000s\t\r\nGradle.projectsEvaluated (2nd)\t0.000s\t\r\nProject.afterEvaluate (2nd)\t0.000s\t\r\nProject.afterEvaluate (3rd)\t0.000s\t\r\nProject.afterEvaluate (4th)\t0.000s\t\r\nProject.afterEvaluate (5th)\t0.000s\t\r\nProject.afterEvaluate (6th)\t0.000s\t\r\nProject.afterEvaluate (7th)\t0.000s\t\r\nProject.afterEvaluate (8th)\t0.000s\t\r\nProject.afterEvaluate (9th)\t0.000s\t\r\nProject.afterEvaluate (10th)\t0.000s\t\r\nProject.afterEvaluate (11th)\t0.000s\t\r\nProject.afterEvaluate (12th)\t0.000s\t\r\nProject.afterEvaluate (13th)\t0.000s\t\r\nProject.afterEvaluate (14th)\t0.000s\t\r\nProject.afterEvaluate (15th)\t0.000s\t\r\nProject.afterEvaluate (16th)\t0.000s\t\r\nProject.afterEvaluate (17th)\t0.000s\t\r\nProject.afterEvaluate (19th)\t0.000s\t\r\nTaskExecutionGraph.whenReady\t0.000s\t\r\nTotal tasks created\t1\r\nCreated during configuration\tcompileJava\r\n\r\n### Context (optional)\r\n\r\nFor a more complex build scan here: https:\/\/scans.gradle.com\/s\/ia5newdt6kveq\/performance\/configuration, I'm trying to accomplish \r\nCreated during configuration\r\n\t0\r\nCreated during task execution\r\n\t0\t\r\nCreated during task graph calculation\r\n\t0\r\n\r\nand this is preventing me from doing so.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run gradle init project with the following options:\r\n\r\n'\/gradlew init'\r\n\r\nSelect type of project to generate:\r\n  1: basic\r\n  2: application\r\n  3: library\r\n  4: Gradle plugin\r\nEnter selection (default: basic) [1..4] 4\r\n\r\nSelect implementation language:\r\n  1: Groovy\r\n  2: Java\r\n  3: Kotlin\r\nEnter selection (default: Java) [1..3] 3\r\n\r\nSelect build script DSL:\r\n  1: Kotlin\r\n  2: Groovy\r\nEnter selection (default: Kotlin) [1..2] 1\r\n\r\nProject name (default: gradle-8-6-test-project): \r\nGenerate build using new APIs and behavior (some features may change in the next minor release)? (default: no) [yes, no] no\r\n\r\n2. Then run '.\/gradlew test'\r\n\r\n### Gradle version\r\n\r\n8.6\r\n\r\n### Build scan URL (optional)\r\n\r\nhttps:\/\/scans.gradle.com\/s\/mggkzeepyjwtw\/performance\/configuration?help=tasks&openScriptsAndPlugins=WyJjb2RlLXVuaXQta290bGluIl0\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["The issue is in the backlog of the relevant team and is prioritized by them.\r\n","Awesome, do you have a link for the bug that publicly details it? I'd just like to follow along\/be aware of the specific details if possible.","Considering configuration avoidance is being preached on the gradle site, can I also suggest:\r\n\r\n1. Having some form of test infrastructure around the examples you provide\r\n2. Test things like configuration cache, configuration avoidance etc within them\r\n\r\nI have experienced a number of issues related to performance which very easily could have been avoided by basic integration testing\/functional testing.","> Awesome, do you have a link for the bug that publicly details it?\r\n\r\nThis issue IS the issue, you opened it:)\r\n\r\n> Having some form of test infrastructure around the examples you provide\r\n\r\nWe do test our example to be valid. If you discovered some issues, please report them.\r\n\r\n> Test things like configuration cache, configuration avoidance etc within them\r\n\r\nWe do have integration tests for those features. They may not cover 100% of the examples, though. Again, If you discovered some issues, please inform us. "],"labels":["a:bug","in:java-plugins"]},{"title":"Allow inspecting the sizes of configuration cache entries","body":"### Expected Behavior\r\n\r\nThe title says it all. \r\n\r\n### Current Behavior (optional)\r\n\r\nThere is no way to inspect the size of configuration cache interies.\r\n\r\nThe configuration cache is stored in `.bin` files (binary, with a custom, internal encoding?) inside `.gradle\/confgiuration-cache`. I'm sure that the encoding is designed and optimized for performance, but currently there is no direct way for a developer to answer the question \"what entries in my configuration cache is making it so large\"?\r\n\r\nThe workarounds I can think of are:\r\n\r\n- None\r\n\r\n### Context\r\n\r\nThis is the third in my series of issues requesting features to allow developers to debug and better understand their own configuration cache. The previous issues (which as of now are still open):\r\n\r\n1. https:\/\/github.com\/gradle\/gradle\/issues\/24757\r\n2. https:\/\/github.com\/gradle\/gradle\/issues\/26440\r\n\r\n\r\nI have a very large build, and the time it takes to read and write the configuration cache is enormous (in the minutes sometimes) and growing. Now, for the first time, I got an OOM error while gradle was doing some work related to the configuration cache:\r\n\r\n<details><summary>OutOfMemoryError Stack Trace<\/summary>\r\n<p>\r\n\r\n```\r\njava.lang.OutOfMemoryError: GC overhead limit exceeded\r\n\tat org.gradle.configurationcache.serialization.codecs.BeanCodec.decode(BeanCodec.kt)\r\n\tat org.gradle.configurationcache.serialization.CombinatorsKt$reentrant$1$decodeLoop$1.invokeSuspend(Combinators.kt:166)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlin.coroutines.ContinuationKt.startCoroutine(Continuation.kt:115)\r\n\tat org.gradle.configurationcache.serialization.CombinatorsKt$reentrant$1.decodeLoop(Combinators.kt:167)\r\n\tat org.gradle.configurationcache.serialization.CombinatorsKt$reentrant$1.decode(Combinators.kt:131)\r\n\tat org.gradle.configurationcache.serialization.codecs.BindingsBackedCodec.decode(BindingsBackedCodec.kt:59)\r\n\tat org.gradle.configurationcache.serialization.DefaultReadContext.read(Contexts.kt:269)\r\n\tat org.gradle.configurationcache.serialization.beans.BeanPropertyReaderKt.readPropertyValue(BeanPropertyReader.kt:106)\r\n\tat org.gradle.configurationcache.serialization.beans.BeanPropertyReader.readStateOf(BeanPropertyReader.kt:68)\r\n\tat org.gradle.configurationcache.serialization.codecs.TaskNodeCodec$readTask$2.invokeSuspend(TaskNodeCodec.kt:135)\r\n\tat org.gradle.configurationcache.serialization.codecs.TaskNodeCodec$readTask$2.invoke(TaskNodeCodec.kt)\r\n\tat org.gradle.configurationcache.serialization.codecs.TaskNodeCodec$readTask$2.invoke(TaskNodeCodec.kt)\r\n\tat org.gradle.configurationcache.serialization.codecs.TaskNodeCodecKt.withTaskOf(TaskNodeCodec.kt:237)\r\n\tat org.gradle.configurationcache.serialization.codecs.TaskNodeCodecKt.access$withTaskOf(TaskNodeCodec.kt:1)\r\n\tat org.gradle.configurationcache.serialization.codecs.TaskNodeCodec.readTask(TaskNodeCodec.kt:129)\r\n\tat org.gradle.configurationcache.serialization.codecs.TaskNodeCodec.decode(TaskNodeCodec.kt:78)\r\n\tat org.gradle.configurationcache.serialization.codecs.BindingsBackedCodec.decode(BindingsBackedCodec.kt:59)\r\n\tat org.gradle.configurationcache.serialization.DefaultReadContext.read(Contexts.kt:269)\r\n\tat org.gradle.configurationcache.serialization.CodecKt.readNonNull(Codec.kt:96)\r\n\tat org.gradle.configurationcache.serialization.codecs.WorkNodeCodec.readNode(WorkNodeCodec.kt:126)\r\n\tat org.gradle.configurationcache.serialization.codecs.WorkNodeCodec.doRead(WorkNodeCodec.kt:104)\r\n\tat org.gradle.configurationcache.serialization.codecs.WorkNodeCodec.readWork(WorkNodeCodec.kt:62)\r\n\tat org.gradle.configurationcache.ConfigurationCacheState.readWorkGraph(ConfigurationCacheState.kt:493)\r\n\tat org.gradle.configurationcache.ConfigurationCacheState.readBuildContent$configuration_cache(ConfigurationCacheState.kt:474)\r\n\tat org.gradle.configurationcache.ConfigurationCacheState.readBuildState(ConfigurationCacheState.kt:326)\r\n\tat org.gradle.configurationcache.ConfigurationCacheState.readBuildsInTree(ConfigurationCacheState.kt:288)\r\n\tat org.gradle.configurationcache.ConfigurationCacheState.readRootBuild(ConfigurationCacheState.kt:259)\r\n\tat org.gradle.configurationcache.ConfigurationCacheState.readRootBuildState(ConfigurationCacheState.kt:160)\r\n\tat org.gradle.configurationcache.ConfigurationCacheIO$readRootBuildStateFrom$1.invokeSuspend(ConfigurationCacheIO.kt:160)\r\n\tat org.gradle.configurationcache.ConfigurationCacheIO$readRootBuildStateFrom$1.invoke(ConfigurationCacheIO.kt)\r\n\tat org.gradle.configurationcache.ConfigurationCacheIO$readRootBuildStateFrom$1.invoke(ConfigurationCacheIO.kt)\r\n\r\n\r\n```\r\n\r\n<\/p>\r\n<\/details> \r\n\r\nCurrently, there is no reasonable way for me to fix my error. My only options are to basically to delete the cache and try again. My build is large and complex and I have no idea what subprojects\/tasks\/plugins are making the cache so large. My machine has more than enough memory, and this should not be an issue. Even if I didn't get an OOM error, there is still the issue of configuration-cache work taking minutes at a time.\r\n\r\nThe whole Gradle community would benefit greatly if developers had the tools to start inspecting their own configuration cache. \r\n- It would help developers optimize their builds\r\n- It would help plugin authors optimize their plugins to provide a minimal footprint\r\n- It would allow new configuration cache issues to reported with greater detail \r\n\r\nOne way that could possibly be the easiest way to resolve this issue would be a simple command line tool or gradle task that reads a configuration cache folder (with the .bin files) and writes the entries to a json file. Each entry would just need a human-readable name and a byte size. This likely requires a solution to https:\/\/github.com\/gradle\/gradle\/issues\/24757 as well; we need a way to identify which build is associated with which configuration cache folder.\r\n\r\nHere is a proposed json format:\r\n\r\n```json\r\n[\r\n\t{\r\n\t\t\"build\": \"<a build identifier>\",\r\n\t\t\"configuration-cache\": {\r\n\t\t    \"entries\": [\r\n\t\t        {\r\n\t\t            \"name\": \"FileContents[\/some\/jar]\",\r\n\t\t            \"size\": 293555\r\n\t\t        },\r\n                {\r\n\t\t\t\t\t\"name\": \"Property[somePropertyName]\",\r\n\t\t            \"size\": 53\r\n\t\t        }\r\n\t\t    ]\r\n\t\t}\r\n\t}\r\n]\r\n```","comments":["Using `tree -h .` in `.gradle\/configuration-cache` I see:\r\n\r\n```\r\n\u276f tree -h .\r\n[ 224]  .\r\n\u251c\u2500\u2500 [ 192]  38c79z7i2qypbf5b7gp32v486\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [1.1M]  buildfingerprint.bin\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [  42]  entry.bin\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 83K]  projectfingerprint.bin\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [1.1G]  work.bin\r\n\u251c\u2500\u2500 [ 192]  48kt9hrzgb8pg0jjaje343bw9\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [402K]  buildfingerprint.bin\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [  42]  entry.bin\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 83K]  projectfingerprint.bin\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [498M]  work.bin\r\n\u251c\u2500\u2500 [ 192]  bepm718zty3c7g6wqah2mbl2e\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [384K]  buildfingerprint.bin\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [  42]  entry.bin\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [ 83K]  projectfingerprint.bin\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [449K]  work.bin\r\n\u251c\u2500\u2500 [  39]  configuration-cache.lock\r\n\u2514\u2500\u2500 [   0]  gc.properties\r\n\r\n3 directories, 14 files\r\n```\r\n\r\nWhy is `work.bin` over a gigabyte? I would like to inspect it.","This feature request is in the backlog of the relevant team and is prioritized by them.","> Why is `work.bin` over a gigabyte? I would like to inspect it.\r\n\r\nThis tool might help in the meantime: https:\/\/github.com\/gradle\/gcc2speedscope"],"labels":["a:feature","in:configuration-cache"]},{"title":"Configuration cache should support Kotlin collection builders","body":"### Current Behavior\r\n\r\nWhen creating a collection with `buildList` from Kotlin stdlib, CC deserialization fails\r\n\r\n### Expected Behavior\r\n\r\nCC serialization should work with Kotlin collection builders\r\n\r\n### Context (optional)\r\n\r\nThis is not a recent regression but an unsupported feature. However, I'd consider it a bug in the CC adoption track.\r\n\r\nThe most likely reason for the error is the fact that the resulting instance of the list that is being serialized uses `writeReplace` mechanism, that is not currently\/entirely supported by CC:\r\nhttps:\/\/github.com\/JetBrains\/kotlin\/blob\/f844b87f75b0b02919dd35f26afb87bb47059136\/libraries\/stdlib\/jvm\/src\/kotlin\/collections\/builders\/ListBuilder.kt#L27-L29\r\n\r\nA similar problem may exist for other collection builders such as `buildMap`. However, I did not verify this.\r\n\r\n### Steps to Reproduce\r\n\r\n```kotlin\r\n\/\/ build.gradle.kts\r\n\r\ntasks.register(\"something\") {\r\n    val myList = buildList { add(1); add(2); add(3) }\r\n    doLast {\r\n        println(\"My list: $myList\")\r\n    }\r\n}\r\n```\r\n\r\nRunning `.\/gradlew --configuration-cache something` results in the following error:\r\n```\r\norg.gradle.api.GradleException: Could not load the value of field `collection` of `kotlin.collections.builders.SerializedCollection` bean found in field `$myList` of `Build_gradle$$$result$1$1` bean found in field `action` of `org.gradle.api.internal.AbstractTask$TaskActionWrapper` bean found in field `actions` of task `:something` of type `org.gradle.api.DefaultTask`.\r\n```\r\n\r\n### Gradle version\r\n\r\n8.7-rc-2\r\n\r\n### Build scan URL (optional)\r\n\r\nhttps:\/\/ge.gradle.org\/s\/xwvlrc2zi2aju\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["What we've found so far:\n* the builder uses Externalizable internally: it has writeReplace that returns an Externalizable SerializedCollection with a custom serialization protocol. The SerializedCollection has readResolve that reconstructs the builder.\n* Despite the above, CC serialization doesn't produce \"unsupported Externalizable\" here, because when serializing Serializable with `writeReplace`, it unconditionally writes result with bean serialization.\n* The `SerializedCollection` contains a (circular) reference to the builder, which seems to be incorrectly deserialized.\n\nAt least one issue is that we don't check if the type returned by `writeReplace` is supported by CC serialization. Another issue is handling of circular references there."],"labels":["a:bug","in:configuration-cache"]},{"title":"Merge modifier logic into a single common method","body":"### Issue type\n\nRefactoring\n\n### Problem description\n\nCurrently, we have three different code paths for modifiers like `testFixtures` -- `DependencyHandler` has one for normal dependency notation, and one for version catalog (only when it's a provider, though), and we have a separate implementation in our `DependencyModifier` types. We should unify the logic for these into one method, and delegate to it from the three existing places.\n\n### Context (optional)\n\nThis caused a somewhat major issue, #27282.","comments":[],"labels":["a:chore","in:dependency-declarations"]},{"title":"Provide more details about the directory layout of `caches`","body":"### Issue type\n\nPolishing\n\n### Problem description\n\n[This docs page about `~\/.gradle\/caches`](https:\/\/docs.gradle.org\/current\/userguide\/directory_layout.html) is great, but seems to be missing some important directories, notably:\r\n* Configuration cache is not mentioned at all (`<proj dir>\/.gradle\/configuration-cache`)\r\n* `transforms-3` is not documented. I'm also curious why is it `3`? I also have `transforms-4`, whats the difference (#28178)?\r\n* `caches\/<version>\/generated-gradle-jars` is noted as expensive to create in [the official github actions docs](https:\/\/github.com\/gradle\/actions\/tree\/main\/setup-gradle#which-content-is-cached), but not documented in the directory layout page\r\n* Also noted in the github actions docs: `caches\/<version>\/kotlin-dsl` and `caches\/<version>\/scripts` but not found in the directory layout docs\r\n* `caches\/build-cache-1` isn't mentioned anywhere either\n\n### Context (optional)\n\nFor builds that don't use github actions but would like to replicate the caching it does, more detailed knowledge of the directory layout is needed, but isnt easily found in the gradle docs.","comments":["This documentation issue is confirmed.\r\n"],"labels":["in:configuration-cache","in:build-cache","a:documentation","in:dependency-cache","in:core-utilities"]},{"title":"Ad-hoc AAR variants in POMs","body":"### Current Behavior\r\n\r\n(background: https:\/\/issuetracker.google.com\/319470141)\r\n\r\nDependency upgrades may cause multiple variants to be selected for a particular dependency.\r\n\r\nLibrary `androidx\/lifecycle\/lifecycle-runtime\/2.8.0-alpha02`, publishes an [AAR](https:\/\/dl.google.com\/android\/maven2\/androidx\/lifecycle\/lifecycle-runtime\/2.8.0-alpha02\/lifecycle-runtime-2.8.0-alpha02.aar) that is referenced only from the [POM](https:\/\/dl.google.com\/android\/maven2\/androidx\/lifecycle\/lifecycle-runtime\/2.8.0-alpha02\/lifecycle-runtime-2.8.0-alpha02.pom) file. This is used to make this library consumable from other build systems, and it should not be consumed by Gradle.\r\n\r\nOtherwise, this library uses [Gradle metadata](https:\/\/dl.google.com\/android\/maven2\/androidx\/lifecycle\/lifecycle-runtime\/2.8.0-alpha02\/lifecycle-runtime-2.8.0-alpha02.module).\r\n\r\nFor a configuration that contains only `androidx.lifecycle:lifecycle-runtime:2.8.0-alpha02`, running `.\/gradlew getAars` produces:\r\n```\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.arch.core\/core-runtime\/2.2.0\/39705982680d78556b679ef9d5400d4f17509b0b\/core-runtime-2.2.0.aar\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.lifecycle\/lifecycle-runtime-android\/2.8.0-alpha02\/5b283844665266fb43e6e454549180d1125b59dc\/lifecycle-runtime-release.aar\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.profileinstaller\/profileinstaller\/1.3.0\/624641814089cd7bebf427aafa68ac089fb38261\/profileinstaller-1.3.0.aar\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.startup\/startup-runtime\/1.1.1\/9d4ba67056aff98b69eadc1477c19a1e67cb9470\/startup-runtime-1.1.1.aar\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.tracing\/tracing\/1.0.0\/69cef34711dffbc517e7a0a419ec4a98f84f496a\/tracing-1.0.0.aar\r\n```\r\nhttps:\/\/scans.gradle.com\/s\/amoe5pubfxotc\/dependencies?toggled=W1swXSxbMCwwXV0\r\n\r\nIf a configuration contains only `androidx.core:core:1.0.0`, `.\/gradlew getAars` outputs:\r\n```\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.core\/core\/1.0.0\/48ad5ac253f1478cd7643ab4eef497a376098886\/core-1.0.0.aar\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.lifecycle\/lifecycle-runtime\/2.0.0\/ea27e9e79e9a0fbedfa4dbbef5ddccf0e1d9d73f\/lifecycle-runtime-2.0.0.aar\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.versionedparcelable\/versionedparcelable\/1.0.0\/52718baf7e51ccba173b468a1034caba8140752e\/versionedparcelable-1.0.0.aar\r\n```\r\nhttps:\/\/scans.gradle.com\/s\/e7hdy7ynllnuk\/dependencies?toggled=W1swXSxbMCwwXV0\r\n\r\nHaving both `androidx.core:core:1.0.0` and `androidx.lifecycle:lifecycle-runtime:2.8.0-alpha02` as dependencies produces:\r\n```\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.arch.core\/core-runtime\/2.2.0\/39705982680d78556b679ef9d5400d4f17509b0b\/core-runtime-2.2.0.aar\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.core\/core\/1.0.0\/48ad5ac253f1478cd7643ab4eef497a376098886\/core-1.0.0.aar\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.lifecycle\/lifecycle-runtime-android\/2.8.0-alpha02\/5b283844665266fb43e6e454549180d1125b59dc\/lifecycle-runtime-release.aar\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.lifecycle\/lifecycle-runtime\/2.8.0-alpha02\/e1daa58a3e1ec1a74dd6d2d5923ab96472e61cc1\/lifecycle-runtime-2.8.0-alpha02.aar\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.profileinstaller\/profileinstaller\/1.3.0\/624641814089cd7bebf427aafa68ac089fb38261\/profileinstaller-1.3.0.aar\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.startup\/startup-runtime\/1.1.1\/9d4ba67056aff98b69eadc1477c19a1e67cb9470\/startup-runtime-1.1.1.aar\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.tracing\/tracing\/1.0.0\/69cef34711dffbc517e7a0a419ec4a98f84f496a\/tracing-1.0.0.aar\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.versionedparcelable\/versionedparcelable\/1.0.0\/52718baf7e51ccba173b468a1034caba8140752e\/versionedparcelable-1.0.0.aar\r\n```\r\nhttps:\/\/scans.gradle.com\/s\/fgmsvacynufma\/dependencies?toggled=W1swXSxbMCwwXV0\r\n\r\nNotice that both:\r\n```\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.lifecycle\/lifecycle-runtime-android\/2.8.0-alpha02\/5b283844665266fb43e6e454549180d1125b59dc\/lifecycle-runtime-release.aar\r\n~\/.gradle\/caches\/modules-2\/files-2.1\/androidx.lifecycle\/lifecycle-runtime\/2.8.0-alpha02\/e1daa58a3e1ec1a74dd6d2d5923ab96472e61cc1\/lifecycle-runtime-2.8.0-alpha02.aar\r\n```\r\nare present. I'd expect Gradle to select only `lifecycle-runtime-android`.\r\n\r\n### Expected Behavior\r\n\r\nOnly `lifecycle-runtime-android` gets selected.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\nRun `.\/gradlew getAars`\r\n\r\n```\r\nplugins {\r\n   id(\"jvm-ecosystem\")\r\n}\r\n\r\nrepositories {\r\n    google()\r\n    mavenCentral()\r\n}\r\n\r\nabstract class AndJvmCompatRule: AttributeCompatibilityRule<String> {\r\n    override fun execute(t: CompatibilityCheckDetails<String>) {\r\n        if (t.consumerValue == t.producerValue) t.compatible()\r\n        else if (t.consumerValue == \"androidJvm\" && t.producerValue == \"jvm\") t.compatible()\r\n        else t.incompatible()\r\n    }\r\n}\r\n\r\nval kPlatform = Attribute.of(\"org.jetbrains.kotlin.platform.type\", String::class.java)\r\ndependencies.attributesSchema.attribute(kPlatform).compatibilityRules.add(AndJvmCompatRule::class.java)\r\n\r\nconfigurations {\r\n    create(\"aarsConfig\").also {\r\n        it.isCanBeResolved = true\r\n        it.attributes.attribute(Usage.USAGE_ATTRIBUTE, project.objects.named(Usage::class.java, Usage.JAVA_RUNTIME))\r\n        it.attributes.attribute(Category.CATEGORY_ATTRIBUTE, project.objects.named(Category::class.java, Category.LIBRARY))\r\n        it.attributes.attribute(TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE, project.objects.named(TargetJvmEnvironment::class.java, TargetJvmEnvironment.ANDROID))\r\n        it.attributes.attribute(kPlatform, \"androidJvm\")\r\n    }\r\n}\r\n\r\ndependencies {\r\n    add(\"aarsConfig\", \"androidx.lifecycle:lifecycle-runtime:2.8.0-alpha02\")\r\n    add(\"aarsConfig\", \"androidx.core:core:1.0.0\")\r\n}\r\n\r\ntasks.register(\"getAars\") {\r\n    val aars = configurations.getByName(\"aarsConfig\").incoming.artifactView{\r\n        this.attributes.attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, \"aar\")\r\n    }.files\r\n\r\n    doFirst {\r\n        println(aars.files.sorted().joinToString(separator = \"\\n\"))\r\n    }\r\n}\r\n```\r\n\r\n### Gradle version\r\n\r\n8.6\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Another observation...\r\n\r\nAdding a constraint like:\r\n```\r\n    constraints {\r\n        add(\"aarsConfig\", \"androidx.lifecycle:lifecycle-runtime:2.8.0-alpha02\")\r\n    }\r\n```\r\nand only depending on `androidx.core:core:1.0.0` is enough to reproduce the problem too.\r\n\r\nhttps:\/\/scans.gradle.com\/s\/66mrxwoiwyvwq\/console-log?page=1#L3-L4\r\n\r\n"],"labels":["a:bug","in:dependency-resolution"]},{"title":"Cannot pass an unset provider to SourceDirectorySet.srcDir","body":"### Current Behavior\n\nDoing this:\r\n```\r\nsourceSets.main.java.srcDir(provider { null })\r\n```\r\nfails with:\r\n```\r\nCould not determine the dependencies of task ':compileJava'.\r\n> Cannot query the value of this provider because it has no value available.\r\n```\n\n### Expected Behavior\n\nSourceDirectorySet should ignore all unset providers, just like passing a `provider { listOf() }`.\n\n### Context (optional)\n\nWe have a plugin that includes code generation. We tried to add an extension property that lets you disable the code generation, with code like\r\n```\r\nval taskOutputDir = codeGenTaskProvider.flatMap { it.destinationDirectory }\r\nsourceSets.main.java.srcDir(taskOutputDir.filter { ext.enableSourceGeneration })\r\n```\r\n\r\nwhich fails when enableSourceGeneration is false.\r\n\r\nThe workaround is to use something like this, which seems hacky.\r\n```\r\ntaskOutputDir.filter { ext.enableSourceGeneration }.map { listOf(it) }.orElse { listOf() }\r\n```\r\n\r\nThere's a separate issue which I can't reproduce in a sample project yet, but wrapping the output with `listOf(it)` causes failures for us too:\r\n```\r\nQuerying the mapped value of flatmap(provider(task 'codeGenTask', class com.example.CodeGenTask)) before task ':codeGenTask' has completed is not supported\r\n```\r\n\r\nSo we actually need to use a provider that returns a Directory if `enableSourceGeneration` is true, but an empty list if its false. All of this would be much easier if `srcDir()` just ignored unset providers.\n\n### Steps to Reproduce\n\nSimple repro here: https:\/\/github.com\/scottjasso\/gradle-srcdir-filter\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["This issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.","@gradle\/bt-configuration What should this do?\n\n`ConfigurableFileCollection` follows the same behavior today:\n```\ndef foo = objects.fileCollection()\nfoo.from(provider { null })\nprintln foo.files\n```","@abstratt, do you think we should consider this as part of the conventions\/safe incremental updates work? ","@scottjasso I think there are a couple of alternatives that would avoid this behavior:\r\n\r\n1. Always wire the output directory to the source directory. In the code generator task, use `onlyif { }` to check if `enableSourceGeneration` is on. This would cause the code generator task to be skipped when its disabled. \r\n\r\nThis has an issue that if code generation is enabled and you generate some code, it will still exist even after you disable it. Only clean will delete it.\r\n\r\n2. Always wire the output directory to the source directory. In the code generator task, use a task property wired to `enableSourceGeneration`. Check if this is enabled in the task's action. This would cause the code generator task to be executed, but it may not do anything when its disabled. \r\n\r\nWhen disabled, the code generator can just delete its output (if present) as its action, which avoids the problem described in (1).\r\n\r\n3. Never wire the output directory to the source directory by default. Instead of the user setting `enableSourceGeneration` to false, users would need to explicitly configure which source sets have code generation _enabled_.\r\n\r\nThis is obviously less \"it just works\". \r\n\r\n4. Just don't apply the plugin if you aren't going to use code generation. \r\n\r\n","1 we avoided due to the \"onlyIf\" issue.\n\n2's problem is that gradle will still pull in all the dependencies of the code generation task (task dependencies, as well as all the actual dependency downloads).\n\n3 and 4 aren't as user friendly -- what if \"enableCodeGeneration\" wasn't an extension property but something more dynamic, like a system property, or some external input? I don't think we can ask our users to code in this conditional logic to their build.gradle.\n\n","> we avoided due to the \"onlyIf\" issue.\r\n\r\n@scottjasso Could you please include a reference to the issue you alluded to? \r\n\r\nBTW, it seems your request would be addressed by this other issue: https:\/\/github.com\/gradle\/gradle\/issues\/23623 , which asks for the ability to register tasks conditionally (some use cases [here](https:\/\/github.com\/gradle\/gradle\/issues\/23623#issuecomment-1870582270)). Agreed?  ","They're referring to the problem with onlyIf I mentioned in https:\/\/github.com\/gradle\/gradle\/issues\/28304#issuecomment-1984611040","> BTW, it seems your request would be addressed by this other issue: https:\/\/github.com\/gradle\/gradle\/issues\/23623 , which asks for the ability to register tasks conditionally (some use cases [here](https:\/\/github.com\/gradle\/gradle\/issues\/23623#issuecomment-1870582270)). Agreed?  \n\nI'm not sure -- even if we could conditionally register the task, how would we conditionally add it as a dependency to the source set?\n\n",">I'm not sure -- even if we could conditionally register the task, how would we conditionally add it as a dependency to the source set?\r\n\r\nHypothetically speaking: you can add the task provider\/derived output provider as you do now, but if the task is not registered because of a condition - the task provider is empty, source set ignores it, no dependency is pulled in.","But that last part is the problem. The source set doesn't ignore empty providers. "],"labels":["a:bug","in:java-plugins","in:provider-api"]},{"title":"Allow `Property<List<K>>`, `Property<Map<K,V>>`, etc...","body":"### Expected Behavior\n\nI would like the following code to work:\r\n\r\n```kotlin\r\nval property = objects.property(List::class.java)\r\n```\r\n\r\nor in a task:\r\n\r\n```kotlin\r\nabstract class MyTask: DefaultTask() {\r\n  @get:Input\r\n  abstract val listProperty: Property<List<String>>\r\n\r\n  \/\/ More...\r\n}\r\n```\n\n### Current Behavior (optional)\n\nIt currently fails with:\r\n```\r\norg.gradle.api.InvalidUserCodeException: Please use the ObjectFactory.mapProperty() method to create a property of type Map<K, V>.\r\n\tat org.gradle.api.internal.model.DefaultObjectFactory.property(DefaultObjectFactory.java:175)\r\n\tat Build_gradle.<init>(build.gradle.kts:49)\r\n```\n\n### Context\n\nFollow up from https:\/\/github.com\/gradle\/gradle\/issues\/12222. \r\n\r\n`ListProperty` and others have a lot of cognitive load associated with them and not every use case need to have granular collection. Being able to use the regular `Property<>` would make the API more consistent with other uses and simpler too.","comments":["This feature request is in the backlog of the relevant team and is prioritized by them.\r\n\r\n"],"labels":["a:feature","in:provider-api"]},{"title":"Classpath pollution of included builds when using `GradleRunner.withPluginClasspath`","body":"### Current Behavior\r\n\r\nThe classpath of an includED build is affected by the build that is includING it when using `withPluginClasspath`\r\n\r\nThe README on the reproducer goes into much more detail:  \r\n\r\nhttps:\/\/github.com\/yogurtearl\/gradle-issue-28285-reproducer-included-build-classpath-pollution?tab=readme-ov-file#problem\r\n\r\n### Expected Behavior\r\n\r\nThe classpath of an includED build should NOT be affected by the build that is includING it when using `withPluginClasspath`\r\n\r\n### Context (optional)\r\n\r\nIn general, the classpath of an includED build should not be affected by the build that is includING it. But when using `withPluginClasspath` sometimes the classpath of the includED build is polluted with the classpath of the includING build.\r\n\r\n### Steps to Reproduce\r\n\r\nSee reproducer repo here:\r\nhttps:\/\/github.com\/yogurtearl\/gradle-issue-28285-reproducer-included-build-classpath-pollution\r\n\r\nHere is a workaround shown in the `workaround` branch: \r\nhttps:\/\/github.com\/yogurtearl\/gradle-issue-28285-reproducer-included-build-classpath-pollution\/pull\/1\/files\r\n\r\n### Gradle version\r\n\r\n8.2.1\r\n\r\n### Related\r\n\r\n- https:\/\/github.com\/gradle\/gradle\/issues\/25616\r\n","comments":["The issue is in the backlog of the relevant team, but the existence of a workaround means it might take a while before a fix is made.\r\n\r\nRelated:\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/25616"],"labels":["a:bug","in:composite-builds","in:test-kit"]},{"title":"Allow using file with any extension or string as version catalog","body":"### Expected Behavior\n\nAllow build author to skip check which enforces that version catalogs have a `.toml` file extension. Alternatively, just allow using a string.\n\n### Current Behavior (optional)\n\nThe `.toml` file extension is required. Without it, we get an error\r\n\r\n```\r\njava.lang.RuntimeException: org.gradle.api.InvalidUserDataException: Invalid catalog definition:\r\n  - Problem: In version catalog libs, File string9601927313420254717.txt isn't a supported\r\n    \r\n    Reason: Only .toml files are allowed when importing catalogs.\r\n    \r\n    Possible solution: Use a TOML file instead, with the .toml extension.\r\n```\n\n### Context\n\nRather than using an actual File, my version catalog is a String which I read from a BuildService. It's not a typical project structure, but it has some benefits. For example, I have a constant string of my toml text in memory during the build, so if I want to reference values from it without going through the version catalogs, I know for sure that the values will be constant (as opposed to a file which could change).\r\n\r\nCurrently, I copy my string to a temporary file and place it in `libs.from`. However, this requires a .toml suffix.\r\n\r\nThis is fine if I manage my own temporary file, but is not compatible with `TextResource` because creating a temp file through that API currently doesn't allow specifying a file extension\r\n\r\n```kotlin\r\n    dependencyResolutionManagement { deps ->\r\n        deps.versionCatalogs { catalogs ->\r\n            catalogs.register(\"libs\") { libs ->\r\n                libs.from(\/*file here must have .toml suffix*\/)\r\n            }\r\n        }\r\n    }\r\n```","comments":["We need more information to understand the request. Could you please provide more context about what you want to achieve?\r\n\r\nIf we receive a clear use case description, we may be able to suggest a workaround.\r\n\r\n***\r\n\r\nCan you please provide more details on why you create a version catalog from a string?\r\n\r\nWe are considering rephrasing this feature request to allow the version catalog to be configured from a generic provider (File, String, HTTP resource, etc) defaulting to the predefined location, but we need a good scenario when it's feasible.\r\n","> We are considering rephrasing this feature request to allow the version catalog to be configured from a generic provider (File, String, HTTP resource, etc)\r\n\r\nThis would be excellent. That would almost definitely solve this issue.\r\n\r\n> why you create a version catalog from a string?\r\n\r\nI use my libraries toml file for more than just the default features. I add custom metadata tables with things that are version-related. For example, if I want to force all transitive dependencies of a specific library to be a specificy version with dependency constraints, I have added a custom table to my toml file to define the forced version.\r\n\r\nI also access values inside the toml file in a variety of other ways. I use it as a general-purpose configuration file for configuration many version-related tasks.\r\n\r\nAs a result, I need to actually manually read my toml file, and manually parse it in some cases.\r\n\r\nTherefore, in order to ensure that they same exact values in my toml file are used throughout my build, I first read it from the filesystem into memory and then copy it to a temporary file for use in the build (though if I could pass it to gradle as just a string resource and let gradle handle making temporary files, that would be great).\r\n\r\nThe risk of using the toml table in the custom way I described is that gradle will internally read the file from the filesystem at a different time then I read it in my custom plugins, and there is a small chance that the file could have been edited in between the reads causing the values between the reads to be different. Passing the file as a string resource or creating a temporary file prevents this.","Thanks!\r\n\r\nThis feature request is in the backlog of the relevant team and is prioritized by them."],"labels":["a:feature","in:dependency-version-catalog"]},{"title":"Document use of Describable in ValueSource","body":"### Issue type\n\nMissing information\n\n### Problem description\n\nA [ValueSource](https:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/provider\/ValueSource.html) implementation can implement [Describable](https:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/Describable.html) to e.g. give a nicer invalidation message for configuration cache miss. \r\n\r\nThe Describable javadoc gives a hint, but it is too subtle.\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/provider\/ValueSource.html","comments":[],"labels":["a:documentation","in:provider-api"]},{"title":"Implement diagnostic to problem conversion using internal compiler APIs","body":"Solves #27823\r\n\r\nThe solution presented here uses `JavacTool` with an explicit `Context` object we can keep.\r\nThis allows us to gain access to `RichDiagnosticsFormatter`, which we can use to format the same String as the one which would be printed to `stderr`.","comments":["cc. @jvandort @ghale, as you commented on the spec","Which reminds me to add the remaining small section of functional design","\ud83e\udd77 **Code experts: ghale, lptr** \n \nhegyibalint, lptr have most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nghale, hegyibalint have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`build-logic\/jvm\/src\/main\/kotlin\/gradlebuild.unittest-and-compile.gradle.kts` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n hegyibalint: 3% \n\n`platforms\/core-execution\/workers\/src\/integTest\/groovy\/org\/gradle\/workers\/internal\/WorkerExecutorIntegrationTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n ghale: 46% \n\n`platforms\/core-runtime\/base-services\/src\/main\/java\/org\/gradle\/internal\/jvm\/JpmsConfiguration.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n \n`platforms\/core-runtime\/launcher\/src\/main\/java\/org\/gradle\/tooling\/internal\/provider\/LauncherServices.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |2 additions & 3 deletions | \n| DEC | 2 additions & 2 deletions |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n ghale: 6% \n\n`platforms\/core-runtime\/logging\/src\/integTest\/groovy\/org\/gradle\/internal\/logging\/console\/taskgrouping\/AbstractConsoleDeprecationMessageGroupedTaskFunctionalTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n ghale: 6% \n\n`platforms\/jvm\/language-groovy\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/DefaultGroovyJavaJointCompileSpecFactory.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n ghale: 57% \n\n`platforms\/jvm\/language-groovy\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/daemon\/DaemonGroovyCompiler.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n ghale: 54% \n\n`platforms\/jvm\/language-java\/src\/integTest\/groovy\/org\/gradle\/api\/tasks\/compile\/JavaCompileProblemsIntegrationTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR | 45 additions & 27 deletions |  \n| FEB | 142 additions & 61 deletions |  \n| JAN | 146 additions & 121 deletions |  \n| DEC |   |  \n| NOV | 34 additions & 7 deletions |  \n| OCT | 257 additions & 36 deletions |  \n \n\nKnowledge based on git-blame: \n hegyibalint: 96% \n\n`platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/AbstractJavaCompileSpecFactory.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n ghale: 40% \n\n`platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/DaemonJavaCompiler.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n ghale: 51% \n\n`platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/DefaultJavaCompileSpecFactory.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n ghale: 53% \n\n`platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/DefaultJavaCompilerFactory.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n ghale: 14% \nhegyibalint: 11% \n\n`platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/DiagnosticToProblemListener.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR | 95 additions & 46 deletions |  \n| FEB | 0 additions & 3 deletions |  \n| JAN | 47 additions & 27 deletions |  \n| DEC |   |  \n| NOV | 8 additions & 5 deletions |  \n| OCT | 90 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n hegyibalint: 84% \n\n`platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/ForkingJavaCompileSpec.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n ghale: 80% \n\n`platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/IncrementalCompilationAwareJavaCompiler.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n \n`platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/JavaHomeBasedJavaCompilerFactory.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n \n`platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/JdkJavaCompiler.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN | 17 additions & 8 deletions |  \n| DEC | 2 additions & 2 deletions |  \n| NOV | 2 additions & 2 deletions |  \n| OCT | 26 additions & 71 deletions |  \n \n\nKnowledge based on git-blame: \n hegyibalint: 16% \nghale: 2% \n\n`platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/JdkTools.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n \n`platforms\/jvm\/language-java\/src\/test\/groovy\/org\/gradle\/api\/internal\/tasks\/compile\/DefaultJavaCompilerFactoryTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV | 13 additions & 3 deletions |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n ghale: 15% \nhegyibalint: 11% \n\n`platforms\/jvm\/language-java\/src\/test\/groovy\/org\/gradle\/api\/internal\/tasks\/compile\/DiagnosticToProblemListenerTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR | 174 additions & 0 deletions |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n hegyibalint: 100% \n\n`platforms\/jvm\/plugins-java\/src\/integTest\/groovy\/org\/gradle\/java\/compile\/daemon\/JavaCompilerDaemonReuseIntegrationTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n ghale: 59% \n\n`subprojects\/architecture-test\/src\/changes\/archunit_store\/internal-api-nullability.txt` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint | lptr| \n | --- | --- | --- | \n | MAR |   |1 additions & 0 deletions | \n| FEB |   |  \n| JAN |   |1 additions & 1 deletions | \n| DEC | 0 additions & 3 deletions |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n \n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>"],"labels":["a:feature","in:java-plugins","in:problems","platform:jvm","platform:ide","platform:core_execution","platform:core_runtime"]},{"title":"Wrong link in wrapper documentation","body":"### Issue type\n\nWrong or misleading information\n\n### Problem description\n\nThe `API Documentation` link in the text of [this section](https:\/\/docs.gradle.org\/current\/userguide\/gradle_wrapper.html#customizing_wrapper) should point to a more specific location than the `org.gradle` package\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/current\/userguide\/gradle_wrapper.html#customizing_wrapper","comments":["Discovered while answering:\r\n* #28209"],"labels":["in:wrapper","a:documentation"]},{"title":"Possibility to require a capability for a plugin conveniently in the `plugins` block","body":"### Expected Behavior\n\nIn some situations you need to be able to request a capability for a plugin.\r\nI for example have a convention plugin that applies the dependency analysis Gradle plugin.\r\nWhen applying this to a build where the KGP 1.7 is used, like a Gradle 7.6.4 plugin build, you must use at most version 0.20.0, otherwise you can use the latest version, like 0.30.0.\r\n\r\nIt would be nice if you could require that capability within the plugins block.\n\n### Current Behavior (optional)\n\nCurrently you have to use a `buildscript { ... }` block to request the necessary capability and then use the legacy plugin application, instead of being able to use the `plugins { ... }` block unless you add an indirection through another plugin.\n\n### Context\n\nGradle 7.6.4","comments":["Requesting the capability of the dependency is not transitive. \r\nBecause of how plugins work, it would be applied to the marker dependency, not to the plugin jar itself.\r\n\r\nCan you provide a reproducer with the `buildscript` that works so we can better understand your use case?\r\n\r\nNote that you can also require capabilities on [dependency constraints](https:\/\/docs.gradle.org\/current\/userguide\/dependency_management_terminology.html#sub:terminology_dependency_constraint), which can be an alternative way to solve this.","Hm, yeah, that the indirection through the marker plugin is unfortunate here of course. :-\/\r\n\r\nWhat I do right now for this is:\r\n```\r\nbuildscript {\r\n    dependencies {\r\n        classpath(\"com.example:example-gradle-plugins:0.5.0\") {\r\n            capabilities {\r\n                requireCapability(\"com.example:example-gradle-plugins-kotlin17\")\r\n            }\r\n        }\r\n    }\r\n}\r\napply(plugin = \"com.example.settings\")\r\n```\r\n\r\nBecause it also does not work to use `plugins { ... }` to apply the plugin while having the capability constraint respected, I tried that first.\r\n\r\nIn the case of a settings plugin this is not **that** problematic, as no type-safe accessors are generated anyway, besides that it is quite verbose and needs the actual code artifact to be used.\r\n\r\nIn case of a project plugin this is worse as then you would also not get the type-safe accessors generated.","Looking a bit more into this:\r\n* You cannot require a capability on a constraint - only attributes - so that advice was wrong\r\n* I still don't understand why you cannot combine `buildscript` and `plugins`? The following should work:\r\n```\r\nbuildscript {\r\n    dependencies {\r\n        classpath(\"com.example:example-gradle-plugins:0.5.0\") {\r\n            capabilities {\r\n                requireCapability(\"com.example:example-gradle-plugins-kotlin17\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nplugins {\r\n    id(\"com.example.settings\")\r\n}\r\n```\r\n* I also believe setting a capability is not the right answer for this scenario. Gradle has a way to do [variant selection based on the Gradle version](https:\/\/docs.gradle.org\/current\/userguide\/variant_attributes.html#sub:gradle_plugins_default_attributes) applying the plugin. This feels like a better fit.\r\n\r\nIn theory, this feature request remains valid, but it also looks like there are existing solutions for this use case.","> I still don't understand why you cannot combine buildscript and plugins? The following should work:\r\n\r\nActually, that would be slightly better, but still quite verbose.\r\nBut ... it does not work.\r\nAt least not in 7.6.4.\r\nOr at least not in the settings script.\r\nIf I do like suggested, it does not find the plugin as it does not have a version number.\r\nIf I add the version number in the `plugins { ... }` block it gets the default variant, not the one from `requireCapability`.\r\n\r\n> I also believe setting a capability is not the right answer for this scenario. Gradle has a way to do [variant selection based on the Gradle version](https:\/\/docs.gradle.org\/current\/userguide\/variant_attributes.html#sub:gradle_plugins_default_attributes) applying the plugin. This feels like a better fit.\r\n\r\nUnfortunately not, I need a different variant for the same Gradle version.\r\nConcretely, this is to work-around an incompatibility in the `com.autonomousapps.dependency-analysis` plugin.\r\nAnything newer than version `1.20.0` is not compatible with Kotlin 1.7 as it since one version later is compiled against Kotlin 1.9.0 and if you try to use it you get \"Unable to load class 'kotlin.enums.EnumEntriesKt'.\".\r\nSo I have two variants of the plugin, the `kotlin17` variant which depends on 1.20.0 and the default variant which depends on 1.30.0.\r\n\r\nIf a build is using Kotlin 1.7, which the plugin build itself is doing, then it needs to use the `kotlin17` variant.\r\nBut in other builds that do not use Kotlin or use a newer Kotlin version, the latest plugin can be used, so the default variant should be used.","@Vampire Thanks for taking the time and providing details on this.\r\n\r\n***\r\n\r\nThis feature request is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:feature","in:plugin-development","in:plugin-management"]},{"title":"Remove unused test resources","body":"<!--- The issue this PR addresses -->\r\n<!-- Fixes #? -->\r\n\r\n### Context\r\n<!--- Why do you believe many users will benefit from this change? -->\r\n<!--- Link to relevant issues or forum discussions here -->\r\n\r\n### Contributor Checklist\r\n- [ ] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [ ] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [ ] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [ ] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [ ] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective.\r\n- [ ] Provide unit tests (under `<subproject>\/src\/test`) to verify logic.\r\n- [ ] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [ ] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`.\r\n- [ ] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["\ud83e\udd77 **Code experts: lptr** \n \nbig-guy, lptr have most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \ndonat, lptr have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/extensibility\/plugin-use\/build.gradle.kts` \n \n\nActivity based on git-commit: \n\n |  | big-guy | lptr| \n | --- | --- | --- | \n | FEB |   |  \n| JAN |   |6 additions & 0 deletions | \n| DEC |   |  \n| NOV | 37 additions & 0 deletions |  \n| OCT |   |  \n| SEP |   |  \n \n\nKnowledge based on git-blame: \n donat: 18% \nlptr: 13% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>"],"labels":["10 min review","build-script-change"]},{"title":"Improve JVM version too low error message","body":"Second followup to #27858.\r\n\r\nThis adds 2 new `ResolutionFailureDesciber`s that provide custom error messages and resolution suggestion when the `org.gradle.jvm.version` of a requested plugin or dependency is too high (higher than the current JVM):\r\n\r\n```\r\nCould not determine the dependencies of task ':consumer:compileJava'.\r\n> Could not resolve all task dependencies for configuration ':consumer:compileClasspath'.\r\n   > Could not resolve project :producer.\r\n     Required by:\r\n         project :consumer\r\n      > project :producer requires at least a Java 18 JVM. This build uses a Java 17 JVM.\r\n```\r\n\r\nThis replaces the previous more generic message, for example:\r\n\r\n```\r\n> Could not resolve all artifacts for configuration ':classpath'.\r\n   > Could not resolve org.springframework.boot:spring-boot-gradle-plugin:3.2.1.\r\n     Required by:\r\n         project : > org.springframework.boot:org.springframework.boot.gradle.plugin:3.2.1\r\n      > No matching variant of org.springframework.boot:spring-boot-gradle-plugin:3.2.1 was found. The consumer was configured to find a library for use during runtime, compatible with Java 11, packaged as a jar, and its dependencies declared externally, as well as attribute 'org.gradle.plugin.api-version' with value '8.8-20240227050000+0000' but:\r\n          - Variant 'apiElements' declares a library, packaged as a jar, and its dependencies declared externally:\r\n              - Incompatible because this component declares a component for use during compile-time, compatible with Java 17 and the consumer needed a component for use during runtime, compatible with Java 11\r\n              - Other compatible attribute:\r\n                  - Doesn't say anything about org.gradle.plugin.api-version (required '8.8-20240227050000+0000')\r\n          - Variant 'javadocElements' declares a component for use during runtime, and its dependencies declared externally:\r\n              - Incompatible because this component declares documentation and the consumer needed a library\r\n              - Other compatible attributes:\r\n                  - Doesn't say anything about its elements (required them packaged as a jar)\r\n                  - Doesn't say anything about its target Java version (required compatibility with Java 11)\r\n                  - Doesn't say anything about org.gradle.plugin.api-version (required '8.8-20240227050000+0000')\r\n\r\n(continues listing all variants...)\r\n```\r\n\r\nand suggests `Run this build using a Java 17 JVM (or newer).` or using an earlier version of the library.\r\n\r\nWhen a plugin is requested, the version of the currently running JVM is compared.\r\nWhen a library is requested, the requested attribute version is compared.\r\n\r\nThis PR also:\r\n\r\n- Removes the `core-jvm` project, by migrating its code to the `jvm-services` project, which seems more appropriate and removes the need for a very small project.\r\n- Verifies the particular case of running Spring Boot 3+ on JDK 11- now produces the same cleaner error message.","comments":["Note an interesting followup - try running the declarative prototype of the unified Android plugin with JDK 11 to see another example failure.  After this is merged - confirm that situation is detected and the new clearer error message used. ","That's a great improvement!","So, I'm not seeing the most important comment on my review, which makes me think I must have written it, but not saved it before I submitted the review.  It doesn't look like we have a test for when `canDescribeFailure()` returns false (e.g. when some, but not all candidates are incompatible because of JVM version).  Or is that test case covered elsewhere?  If not, I think we should add some coverage for it.","> So, I'm not seeing the most important comment on my review, which makes me think I must have written it, but not saved it before I submitted the review. It doesn't look like we have a test for when `canDescribeFailure()` returns false (e.g. when some, but not all candidates are incompatible because of JVM version). Or is that test case covered elsewhere? If not, I think we should add some coverage for it.\r\n\r\nWe don't.  I figured that's what your comment meant, it's a good idea.  I'll add a unit test for this, and the Plugin application describer as well.  Also, after talking to Sterling, this needs to be restricted to the case of applying plugins for now as well, so there's more to be done here.\r\n","> So, I'm not seeing the most important comment on my review, which makes me think I must have written it, but not saved it before I submitted the review. It doesn't look like we have a test for when `canDescribeFailure()` returns false (e.g. when some, but not all candidates are incompatible because of JVM version). Or is that test case covered elsewhere? If not, I think we should add some coverage for it.\r\n\r\nI started to go down this path, but honestly, setting up all the proper inputs to create a realistic failure for the describer is a lot of code.\r\n\r\nI think leaving the integration tests as the only means of testing this is fine.  Every test that includes a resolution failure tests the `canDescribeFailure` method implicitly, since if these describes return a false positive, the messaging that existing tests expect wouldn't result.","\ud83e\udd77 **Code experts: no user but you matched threshold 10** \n \ntresat, big-guy have most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nadammurdoch, tresat have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`.teamcity\/subprojects.json` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 19 additions & 12 deletions |  \n| JAN | 14 additions & 0 deletions |  \n| DEC |   |  \n| NOV |   |8 additions & 8 deletions | \n| OCT | 44 additions & 16 deletions |  \n \n\nKnowledge based on git-blame: \n tresat: 14% \n\n`platforms\/extensibility\/plugin-use\/build.gradle.kts` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 1 additions & 0 deletions |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |37 additions & 0 deletions | \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 11% \ntresat: 2% \n\n`platforms\/extensibility\/plugin-use\/src\/main\/java\/org\/gradle\/plugin\/use\/internal\/DefaultPluginArtifactRepositories.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |67 additions & 0 deletions | \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 99% \n\n`platforms\/jvm\/distributions-jvm\/build.gradle.kts` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 2 additions & 1 deletions |  \n| JAN | 2 additions & 0 deletions |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 3 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n tresat: 56% \n\n`platforms\/jvm\/platform-jvm\/build.gradle.kts` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 17 additions & 22 deletions |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 2 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n tresat: 29% \nadammurdoch: 2% \n\n`platforms\/jvm\/platform-jvm\/src\/main\/java\/org\/gradle\/api\/plugins\/JvmEcosystemPlugin.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n tresat: 1% \n\n`platforms\/jvm\/plugins-java-base\/build.gradle.kts` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 4 additions & 2 deletions |  \n| JAN | 1 additions & 0 deletions |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n tresat: 68% \n\n`platforms\/jvm\/plugins-java-library\/src\/integTest\/groovy\/org\/gradle\/java\/JavaLibraryCrossProjectTargetJvmVersionIntegrationTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN | 188 additions & 4 deletions |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n tresat: 3% \nadammurdoch: 1% \n\n`platforms\/jvm\/plugins-java-library\/src\/integTest\/groovy\/org\/gradle\/java\/JavaLibraryPublishedTargetJvmVersionIntegrationTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN | 173 additions & 6 deletions |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n tresat: 4% \n\n`platforms\/software\/dependency-management\/src\/integTest\/groovy\/org\/gradle\/integtests\/resolve\/PluginVariantResolveIntegrationTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 184 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n \n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/dsl\/dependencies\/GradlePluginVariantsSupport.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN | 13 additions & 10 deletions |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 74 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n tresat: 6% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/dsl\/dependencies\/PlatformSupport.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 106 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 15% \n\n`settings.gradle.kts` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 2 additions & 1 deletions |  \n| JAN | 2 additions & 0 deletions |  \n| DEC |   |  \n| NOV |   |16 additions & 8 deletions | \n| OCT | 18 additions & 14 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 60% \ntresat: 11% \n\n`subprojects\/core\/build.gradle.kts` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 2 additions & 2 deletions |  \n| JAN | 4 additions & 1 deletions |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |0 additions & 0 deletions | \n \n\nKnowledge based on git-blame: \n adammurdoch: 2% \ntresat: 2% \n\n`subprojects\/distributions-integ-tests\/src\/integTest\/groovy\/org\/gradle\/DistributionIntegrationSpec.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB | 6 additions & 6 deletions |  \n| JAN | 1 additions & 1 deletions |  \n| DEC |   |  \n| NOV |   |  \n| OCT | 4 additions & 4 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 17% \ntresat: 2% \n\n`subprojects\/internal-integ-testing\/src\/main\/groovy\/org\/gradle\/integtests\/fixtures\/jvm\/JavaToolchainFixture.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat | big-guy| \n | --- | --- | --- | \n | MAR |   |  \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n \n\nKnowledge based on git-blame: \n \n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>","@bot-gradle test this","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"ae7e7374db5afcb517b4d594d3c04cb62fba5810\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=ae7e7374db5afcb517b4d594d3c04cb62fba5810) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79732192)","@bot-gradle test this","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"e839a5667c6354d8243d272074e089798a628849\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=e839a5667c6354d8243d272074e089798a628849) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79732679)"],"labels":["30 min review","platform:jvm","platform:software","platform:build_infrastructure","build-script-change","re:comprehensibility"]},{"title":"Pass task dependency list to DefaultTaskOperationDescriptor","body":"### Current Behavior\n\n`TaskFinishEvent.dependencies` throws an `UnsupportedOperationException`:\r\n\r\n```\r\nThe version of Gradle you connect to does not support that method.\r\nTo resolve the problem you can change\/upgrade the target version of Gradle you connect to.\r\nAlternatively, you can ignore this exception and read other information from the model.\r\n```\r\n\r\nThis message seems a little misinformative, because as far as I know there is not any Gradle version that supports `TaskFinishEvent.dependencies`. Looking [here](https:\/\/github.com\/gradle\/gradle\/blob\/734f2f3266d00d37e5aed322b8b2579e00a13680\/subprojects\/build-events\/src\/main\/java\/org\/gradle\/internal\/build\/event\/DefaultBuildEventsListenerRegistry.java#L258) in the `master` branch, we see that task dependency information is not passed to the `DefaultTaskOperationDescriptor` constructor.\r\n\r\n\n\n### Expected Behavior\n\nWe should be able to get task dependencies in a configuration-cache compatible way. Specifically, this would just require that task dependencies are passed to the `DefaultTaskOperationDescriptor` at the above linked line. \r\n\r\nIt would not be required to pass the list of dependencies as a list of objects in the model. If there is any concern about that, passing a list of strings for the task paths would be perfectly sufficient (at least for my use case).\n\n### Context (optional)\n\nWhen migrating to the configuration cache, there are a new set of APIs that you must migrate to as well.\r\n\r\nFor example, you must migrate from reading artifact dependency information directly from a `Configuration`. Instead, you must read information from a `ResolutionResult` to ensure your build is configuration cache behavior.\r\n\r\nWhen it comes to task dependencies, the old way would be to use the task graph:\r\n\r\n```kotlin\r\ngradle.taskGraph.whenReady { graph ->  \r\n        graph.getDependencies(someTask)\r\n}\r\n```\r\n\r\nThis, however, is not configuration cache compatible. We are required to migrate to the new `OperationCompletionListener` API to get task dependency information in a configuration cache compatible way. The API appears to support getting task dependency information given that there exists `TaskOperationDescriptor.getDependencies`. And looking at the javadoc for the method we see:\r\n\r\n```\r\n    \/**\r\n     * Returns the dependencies of the task (other tasks and transforms), if available.\r\n     *\r\n     * @throws UnsupportedMethodException For Gradle versions older than 5.1, where this method is not supported.\r\n     * @since 5.1\r\n     *\/\r\n```\r\n\r\nThe javadoc indicates that this method worked since `5.1` So, it is expected that this method will work in Gradle 8.6. And if this is not supported for the configuration cache, that leaves a gap in the API when using a configuration cache build. \n\n### Steps to Reproduce\n\n1. Register an OperationCompletionListener\r\n2. In the `onFinish` method, wait for a `TaskFinishEvent`. \r\n3. Try to get the dependencies of the task from there\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["related to https:\/\/github.com\/gradle\/gradle\/issues\/28250","Is there any other API for getting task dependencies that is configuration cache compatible?","This issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.","I'm a little confused here because the description mentions bits of the Gradle API and the Tooling API as well. I've attempted to create reproducers for both:\n- a simple tapi client, listening for `TaskFinishEvent`s,\n- a gradle script printing task dependencies in the `TaskGraph.whenReady` callback.\nBoth seems to work fine and produce no warnings when the configuration cache is enable. \n\nCan you please provide a minimal reproducer? With that available I can continue the investigation. ","@donat  thank you for taking a look at this. Sorry about the miscommunications.\r\n\r\nI am happy to provide some sort of reproducer if needed but first let me try to clarify. The reason why `TaskGraph.whenReady` is incompatible with the configuration cache is not because it produces warnings. It is incompatible because it simply does not execute on a build that loads from the configuration cache.\r\n\r\nFor context, I am generating reports and trying to include task dependency information. Currently the main way I know about to extract task dependency info is in `TaskGraph.whenReady`. But then my task that generates a report will not work if the build loaded from the config cache because `TaskGraph.whenReady` never executed, and the task dependency info was never extracted.\r\n\r\nMeanwhile, I am also extracting other task information like so:\r\n\r\n```kotlin\r\n\r\nval taskInfoExtractor = gradle.sharedServices.registerIfAbsent(\"taskInfoExtractor\",TaskFinishHandler::class.java) {\r\n\r\n}\r\n\r\n(gradle as GradleInternal).serviceOf<BuildEventsListenerRegistry>().onTaskCompletion(taskInfoExtractor)\r\n\r\nabstract class TaskFinishHandler : BuildService<BuildServiceParameters.None>, OperationCompletionListener {\r\n    override fun onFinish(event: FinishEvent) {\r\n        println(\"Hello task finish event\")\r\n    }\r\n}\r\n```\r\n\r\nThe `FinishEvent` provides me info about tasks which I could not get from `taskGraph.whenReady`, because the `FinishEvent` api allows me to see info about tasks at execution time such as the result of each task.\r\n\r\nAlso, most importantly, the `FinishEvent` based api always run, no matter if the build loaded from the configuration cache or not.\r\n\r\nThe expectation I have then is that I should be able to get everything I need in a config-cache compatible way (meaning not only that there are no warnings, but also that it works on builds that load from the config cache). The reason I created this issue is because I think it is impossible for users currrently to get task dependency information from a `FinishEvent`. Furthermore, looking at the implementation, I see that the amount of effort it might take the gradle team to expose task dependency info in `FinishEvent` might be pretty minimal (I could be wrong here and don't mean to assume, but it just looked like the information exists at the time the `DefaultTaskOperationDescriptor` is constructed but is simply not passed to it). \r\n\r\nIf `DefaultTaskOperationDescriptor` was just given task dependency info, then I would never have to rely on `TaskGraph.whenReady` for anything.\r\n\r\nThis issue does not involve any Tooling API consumer.\r\n\r\nI hope this provides enough clarification but if a reproducer is still needed please let me know."],"labels":["a:bug","in:tooling-api"]},{"title":"Using test fixtures:  java.lang.NullPointerException (no error message)","body":"### Current Behavior\r\n\r\n```\r\nConfiguration on demand is an incubating feature.\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* Where:\r\nBuild file 'C:\\GitTest2\\EIM_Phoenix\\phoenix-java\\build.gradle' line: 364\r\n\r\n**Line 364:  testImplementation(project(testFixtures(':allure'))) in build.gralde of phoenix-java**\r\n\r\n* What went wrong:\r\nA problem occurred evaluating root project 'phoenix.java'.\r\n> java.lang.NullPointerException (no error message)\r\n\r\n* Try:\r\n> Run with --info or --debug option to get more log output.\r\n> Run with --scan to get full insights.\r\n\r\n* Exception is:\r\norg.gradle.api.GradleScriptException: A problem occurred evaluating root project 'phoenix.java'.\r\n\tat org.gradle.groovy.scripts.internal.DefaultScriptRunnerFactory$ScriptRunnerImpl.run(DefaultScriptRunnerFactory.java:93)\r\n\tat org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl.lambda$apply$0(DefaultScriptPluginFactory.java:133)\r\n\tat org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl$$Lambda$422\/0x0000000000000000.run(Unknown Source)\r\n\tat org.gradle.configuration.ProjectScriptTarget.addConfiguration(ProjectScriptTarget.java:79)\r\n\tat org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl.apply(DefaultScriptPluginFactory.java:136)\r\n\tat org.gradle.configuration.BuildOperationScriptPlugin$1.run(BuildOperationScriptPlugin.java:65)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n\tat org.gradle.configuration.BuildOperationScriptPlugin.lambda$apply$0(BuildOperationScriptPlugin.java:62)\r\n\tat org.gradle.configuration.BuildOperationScriptPlugin$$Lambda$408\/0x0000000000000000.execute(Unknown Source)\r\n\tat org.gradle.configuration.internal.DefaultUserCodeApplicationContext.apply(DefaultUserCodeApplicationContext.java:44)\r\n\tat org.gradle.configuration.BuildOperationScriptPlugin.apply(BuildOperationScriptPlugin.java:62)\r\n\tat org.gradle.configuration.project.BuildScriptProcessor$$Lambda$862\/0x0000000000000000.accept(Unknown Source)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.lambda$applyToMutableState$0(DefaultProjectStateRegistry.java:360)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl$$Lambda$716\/0x0000000000000000.apply(Unknown Source)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.fromMutableState(DefaultProjectStateRegistry.java:378)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.applyToMutableState(DefaultProjectStateRegistry.java:359)\r\n\tat org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:42)\r\n\tat org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:26)\r\n\tat org.gradle.configuration.project.ConfigureActionsProjectEvaluator.evaluate(ConfigureActionsProjectEvaluator.java:35)\r\n\tat org.gradle.configuration.project.LifecycleProjectEvaluator$EvaluateProject.lambda$run$0(LifecycleProjectEvaluator.java:109)\r\n\tat org.gradle.configuration.project.LifecycleProjectEvaluator$EvaluateProject$$Lambda$838\/0x0000000000000000.accept(Unknown Source)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.lambda$applyToMutableState$0(DefaultProjectStateRegistry.java:360)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl$$Lambda$716\/0x0000000000000000.apply(Unknown Source)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.fromMutableState(DefaultProjectStateRegistry.java:378)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.applyToMutableState(DefaultProjectStateRegistry.java:359)\r\n\tat org.gradle.configuration.project.LifecycleProjectEvaluator$EvaluateProject.run(LifecycleProjectEvaluator.java:100)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n\tat org.gradle.configuration.project.LifecycleProjectEvaluator.evaluate(LifecycleProjectEvaluator.java:72)\r\n\tat org.gradle.api.internal.project.DefaultProject.evaluate(DefaultProject.java:762)\r\n\tat org.gradle.api.internal.project.DefaultProject.evaluate(DefaultProject.java:153)\r\n\tat org.gradle.api.internal.project.ProjectLifecycleController.lambda$ensureSelfConfigured$1(ProjectLifecycleController.java:63)\r\n\tat org.gradle.api.internal.project.ProjectLifecycleController$$Lambda$719\/0x0000000000000000.run(Unknown Source)\r\n\tat org.gradle.internal.model.StateTransitionController.lambda$doTransition$12(StateTransitionController.java:236)\r\n\tat org.gradle.internal.model.StateTransitionController$$Lambda$284\/0x0000000000000000.get(Unknown Source)\r\n\tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:247)\r\n\tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:235)\r\n\tat org.gradle.internal.model.StateTransitionController.lambda$maybeTransitionIfNotCurrentlyTransitioning$9(StateTransitionController.java:196)\r\n\tat org.gradle.internal.model.StateTransitionController$$Lambda$720\/0x0000000000000000.run(Unknown Source)\r\n\tat org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:34)\r\n\tat org.gradle.internal.model.StateTransitionController.maybeTransitionIfNotCurrentlyTransitioning(StateTransitionController.java:192)\r\n\tat org.gradle.api.internal.project.ProjectLifecycleController.ensureSelfConfigured(ProjectLifecycleController.java:63)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.ensureConfigured(DefaultProjectStateRegistry.java:334)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.ensureConfigured(DefaultProjectStateRegistry.java:332)\r\n\tat org.gradle.execution.TaskPathProjectEvaluator.configure(TaskPathProjectEvaluator.java:33)\r\n\tat org.gradle.execution.DefaultTaskSelector.getSelection(DefaultTaskSelector.java:59)\r\n\tat org.gradle.execution.selection.DefaultBuildTaskSelector.resolveTaskName(DefaultBuildTaskSelector.java:97)\r\n\tat org.gradle.execution.commandline.CommandLineTaskParser.parseTasks(CommandLineTaskParser.java:49)\r\n\tat org.gradle.execution.TaskNameResolvingBuildTaskScheduler.scheduleRequestedTasks(TaskNameResolvingBuildTaskScheduler.java:50)\r\n\tat org.gradle.execution.DefaultTasksBuildTaskScheduler.scheduleRequestedTasks(DefaultTasksBuildTaskScheduler.java:72)\r\n\tat org.gradle.initialization.DefaultTaskExecutionPreparer.lambda$scheduleRequestedTasks$0(DefaultTaskExecutionPreparer.java:46)\r\n\tat org.gradle.initialization.DefaultTaskExecutionPreparer$$Lambda$769\/0x0000000000000000.run(Unknown Source)\r\n\tat org.gradle.internal.Factories$1.create(Factories.java:31)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.withReplacedLocks(DefaultWorkerLeaseService.java:345)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$DefaultBuildProjectRegistry.withMutableStateOfAllProjects(DefaultProjectStateRegistry.java:205)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$DefaultBuildProjectRegistry.withMutableStateOfAllProjects(DefaultProjectStateRegistry.java:198)\r\n\tat org.gradle.initialization.DefaultTaskExecutionPreparer.scheduleRequestedTasks(DefaultTaskExecutionPreparer.java:45)\r\n\tat org.gradle.initialization.VintageBuildModelController.lambda$scheduleRequestedTasks$0(VintageBuildModelController.java:76)\r\n\tat org.gradle.initialization.VintageBuildModelController$$Lambda$768\/0x0000000000000000.run(Unknown Source)\r\n\tat org.gradle.internal.model.StateTransitionController.lambda$inState$1(StateTransitionController.java:110)\r\n\tat org.gradle.internal.model.StateTransitionController$$Lambda$247\/0x0000000000000000.get(Unknown Source)\r\n\tat org.gradle.internal.model.StateTransitionController.lambda$inState$2(StateTransitionController.java:125)\r\n\tat org.gradle.internal.model.StateTransitionController$$Lambda$248\/0x0000000000000000.create(Unknown Source)\r\n\tat org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:44)\r\n\tat org.gradle.internal.model.StateTransitionController.inState(StateTransitionController.java:121)\r\n\tat org.gradle.internal.model.StateTransitionController.inState(StateTransitionController.java:109)\r\n\tat org.gradle.initialization.VintageBuildModelController.scheduleRequestedTasks(VintageBuildModelController.java:76)\r\n\tat org.gradle.internal.build.DefaultBuildLifecycleController$DefaultWorkGraphBuilder.addRequestedTasks(DefaultBuildLifecycleController.java:255)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeWorkPreparer.lambda$scheduleRequestedTasks$0(DefaultBuildTreeWorkPreparer.java:38)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeWorkPreparer$$Lambda$763\/0x0000000000000000.accept(Unknown Source)\r\n\tat org.gradle.internal.build.DefaultBuildLifecycleController.lambda$populateWorkGraph$3(DefaultBuildLifecycleController.java:143)\r\n\tat org.gradle.internal.build.DefaultBuildLifecycleController$$Lambda$767\/0x0000000000000000.accept(Unknown Source)\r\n\tat org.gradle.internal.build.DefaultBuildWorkPreparer.populateWorkGraph(DefaultBuildWorkPreparer.java:42)\r\n\tat org.gradle.internal.build.BuildOperationFiringBuildWorkPreparer$PopulateWorkGraph.populateTaskGraph(BuildOperationFiringBuildWorkPreparer.java:120)\r\n\tat org.gradle.internal.build.BuildOperationFiringBuildWorkPreparer$PopulateWorkGraph.run(BuildOperationFiringBuildWorkPreparer.java:91)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n\tat org.gradle.internal.build.BuildOperationFiringBuildWorkPreparer.populateWorkGraph(BuildOperationFiringBuildWorkPreparer.java:68)\r\n\tat org.gradle.internal.build.DefaultBuildLifecycleController.lambda$populateWorkGraph$4(DefaultBuildLifecycleController.java:143)\r\n\tat org.gradle.internal.build.DefaultBuildLifecycleController$$Lambda$766\/0x0000000000000000.run(Unknown Source)\r\n\tat org.gradle.internal.model.StateTransitionController.lambda$inState$1(StateTransitionController.java:110)\r\n\tat org.gradle.internal.model.StateTransitionController$$Lambda$247\/0x0000000000000000.get(Unknown Source)\r\n\tat org.gradle.internal.model.StateTransitionController.lambda$inState$2(StateTransitionController.java:125)\r\n\tat org.gradle.internal.model.StateTransitionController$$Lambda$248\/0x0000000000000000.create(Unknown Source)\r\n\tat org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:44)\r\n\tat org.gradle.internal.model.StateTransitionController.inState(StateTransitionController.java:121)\r\n\tat org.gradle.internal.model.StateTransitionController.inState(StateTransitionController.java:109)\r\n\tat org.gradle.internal.build.DefaultBuildLifecycleController.populateWorkGraph(DefaultBuildLifecycleController.java:143)\r\n\tat org.gradle.internal.build.DefaultBuildWorkGraphController$DefaultBuildWorkGraph.populateWorkGraph(DefaultBuildWorkGraphController.java:148)\r\n\tat org.gradle.composite.internal.DefaultBuildController.populateWorkGraph(DefaultBuildController.java:73)\r\n\tat org.gradle.composite.internal.DefaultIncludedBuildTaskGraph$DefaultBuildTreeWorkGraphBuilder.withWorkGraph(DefaultIncludedBuildTaskGraph.java:150)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeWorkPreparer.lambda$scheduleRequestedTasks$1(DefaultBuildTreeWorkPreparer.java:38)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeWorkPreparer$$Lambda$762\/0x0000000000000000.accept(Unknown Source)\r\n\tat org.gradle.composite.internal.DefaultIncludedBuildTaskGraph$DefaultBuildTreeWorkGraph$1.run(DefaultIncludedBuildTaskGraph.java:197)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n\tat org.gradle.composite.internal.DefaultIncludedBuildTaskGraph$DefaultBuildTreeWorkGraph.scheduleWork(DefaultIncludedBuildTaskGraph.java:192)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeWorkPreparer.scheduleRequestedTasks(DefaultBuildTreeWorkPreparer.java:37)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.lambda$doScheduleAndRunTasks$3(DefaultBuildTreeLifecycleController.java:96)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController$$Lambda$758\/0x0000000000000000.apply(Unknown Source)\r\n\tat org.gradle.composite.internal.DefaultIncludedBuildTaskGraph.withNewWorkGraph(DefaultIncludedBuildTaskGraph.java:109)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.doScheduleAndRunTasks(DefaultBuildTreeLifecycleController.java:95)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.lambda$scheduleAndRunTasks$1(DefaultBuildTreeLifecycleController.java:76)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController$$Lambda$1939\/0x0000000000000000.get(Unknown Source)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.lambda$runBuild$5(DefaultBuildTreeLifecycleController.java:113)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController$$Lambda$275\/0x0000000000000000.get(Unknown Source)\r\n\tat org.gradle.internal.model.StateTransitionController.lambda$transition$5(StateTransitionController.java:166)\r\n\tat org.gradle.internal.model.StateTransitionController$$Lambda$277\/0x0000000000000000.get(Unknown Source)\r\n\tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:247)\r\n\tat org.gradle.internal.model.StateTransitionController.lambda$transition$6(StateTransitionController.java:166)\r\n\tat org.gradle.internal.model.StateTransitionController$$Lambda$276\/0x0000000000000000.create(Unknown Source)\r\n\tat org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:44)\r\n\tat org.gradle.internal.model.StateTransitionController.transition(StateTransitionController.java:166)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.runBuild(DefaultBuildTreeLifecycleController.java:110)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.scheduleAndRunTasks(DefaultBuildTreeLifecycleController.java:76)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.scheduleAndRunTasks(DefaultBuildTreeLifecycleController.java:71)\r\n\tat org.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(ExecuteBuildActionRunner.java:31)\r\n\tat org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)\r\n\tat org.gradle.internal.buildtree.ProblemReportingBuildActionRunner.run(ProblemReportingBuildActionRunner.java:49)\r\n\tat org.gradle.launcher.exec.BuildOutcomeReportingBuildActionRunner.run(BuildOutcomeReportingBuildActionRunner.java:65)\r\n\tat org.gradle.tooling.internal.provider.FileSystemWatchingBuildActionRunner.run(FileSystemWatchingBuildActionRunner.java:136)\r\n\tat org.gradle.launcher.exec.BuildCompletionNotifyingBuildActionRunner.run(BuildCompletionNotifyingBuildActionRunner.java:41)\r\n\tat org.gradle.launcher.exec.RootBuildLifecycleBuildActionExecutor.lambda$execute$0(RootBuildLifecycleBuildActionExecutor.java:40)\r\n\tat org.gradle.launcher.exec.RootBuildLifecycleBuildActionExecutor$$Lambda$207\/0x0000000000000000.apply(Unknown Source)\r\n\tat org.gradle.composite.internal.DefaultRootBuildState.run(DefaultRootBuildState.java:122)\r\n\tat org.gradle.launcher.exec.RootBuildLifecycleBuildActionExecutor.execute(RootBuildLifecycleBuildActionExecutor.java:40)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeContext.execute(DefaultBuildTreeContext.java:40)\r\n\tat org.gradle.launcher.exec.BuildTreeLifecycleBuildActionExecutor.lambda$execute$0(BuildTreeLifecycleBuildActionExecutor.java:65)\r\n\tat org.gradle.launcher.exec.BuildTreeLifecycleBuildActionExecutor$$Lambda$164\/0x0000000000000000.apply(Unknown Source)\r\n\tat org.gradle.internal.buildtree.BuildTreeState.run(BuildTreeState.java:53)\r\n\tat org.gradle.launcher.exec.BuildTreeLifecycleBuildActionExecutor.execute(BuildTreeLifecycleBuildActionExecutor.java:65)\r\n\tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor$3.call(RunAsBuildOperationBuildActionExecutor.java:61)\r\n\tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor$3.call(RunAsBuildOperationBuildActionExecutor.java:57)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n\tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor.execute(RunAsBuildOperationBuildActionExecutor.java:57)\r\n\tat org.gradle.launcher.exec.RunAsWorkerThreadBuildActionExecutor.lambda$execute$0(RunAsWorkerThreadBuildActionExecutor.java:36)\r\n\tat org.gradle.launcher.exec.RunAsWorkerThreadBuildActionExecutor$$Lambda$161\/0x0000000000000000.create(Unknown Source)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:249)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:109)\r\n\tat org.gradle.launcher.exec.RunAsWorkerThreadBuildActionExecutor.execute(RunAsWorkerThreadBuildActionExecutor.java:36)\r\n\tat org.gradle.tooling.internal.provider.continuous.ContinuousBuildActionExecutor.execute(ContinuousBuildActionExecutor.java:110)\r\n\tat org.gradle.tooling.internal.provider.SubscribableBuildActionExecutor.execute(SubscribableBuildActionExecutor.java:64)\r\n\tat org.gradle.internal.session.DefaultBuildSessionContext.execute(DefaultBuildSessionContext.java:46)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter$ActionImpl.apply(BuildSessionLifecycleBuildActionExecuter.java:100)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter$ActionImpl.apply(BuildSessionLifecycleBuildActionExecuter.java:88)\r\n\tat org.gradle.internal.session.BuildSessionState.run(BuildSessionState.java:69)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter.execute(BuildSessionLifecycleBuildActionExecuter.java:62)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter.execute(BuildSessionLifecycleBuildActionExecuter.java:41)\r\n\tat org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:63)\r\n\tat org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:31)\r\n\tat org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:52)\r\n\tat org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:40)\r\n\tat org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:47)\r\n\tat org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:31)\r\n\tat org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:65)\r\n\tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:39)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:29)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:35)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.create(ForwardClientInput.java:78)\r\n\tat org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.create(ForwardClientInput.java:75)\r\n\tat org.gradle.util.internal.Swapper.swap(Swapper.java:38)\r\n\tat org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:75)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:55)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:63)\r\n\tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:84)\r\n\tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:52)\r\n\tat org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:297)\r\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n\tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:49)\r\nCaused by: java.lang.NullPointerException\r\n\tat org.gradle.internal.component.external.model.ImmutableCapability.computeHashcode(ImmutableCapability.java:60)\r\n\tat org.gradle.internal.component.external.model.ImmutableCapability.<init>(ImmutableCapability.java:41)\r\n\tat org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler.lambda$testFixtures$2(DefaultDependencyHandler.java:399)\r\n\tat org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler$$Lambda$1441\/0x0000000000000000.execute(Unknown Source)\r\n\tat org.gradle.api.internal.artifacts.dependencies.AbstractModuleDependency.capabilities(AbstractModuleDependency.java:239)\r\n\tat org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler.testFixtures(DefaultDependencyHandler.java:397)\r\n\tat java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base\/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat org.gradle.internal.metaobject.BeanDynamicObject$MetaClassAdapter.invokeMethod(BeanDynamicObject.java:484)\r\n\tat org.gradle.internal.metaobject.BeanDynamicObject.tryInvokeMethod(BeanDynamicObject.java:196)\r\n\tat org.gradle.internal.metaobject.CompositeDynamicObject.tryInvokeMethod(CompositeDynamicObject.java:98)\r\n\tat org.gradle.internal.extensibility.MixInClosurePropertiesAsMethodsDynamicObject.tryInvokeMethod(MixInClosurePropertiesAsMethodsDynamicObject.java:36)\r\n\tat org.gradle.internal.metaobject.ConfigureDelegate.invokeMethod(ConfigureDelegate.java:57)\r\n\tat build_5c3mz5vz63hnqrc5pgnopid7w$_run_closure6$_closure29.doCall(C:\\GitTest2\\EIM_Phoenix\\phoenix-java\\build.gradle:364)\r\n\tat java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base\/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat org.gradle.util.internal.ClosureBackedAction.execute(ClosureBackedAction.java:73)\r\n\tat org.gradle.util.internal.ConfigureUtil.configureTarget(ConfigureUtil.java:155)\r\n\tat org.gradle.util.internal.ConfigureUtil.configure(ConfigureUtil.java:106)\r\n\tat org.gradle.api.internal.project.DefaultProject.dependencies(DefaultProject.java:1247)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor200.invoke(Unknown Source)\r\n\tat java.base\/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat org.gradle.internal.metaobject.BeanDynamicObject$MetaClassAdapter.invokeMethod(BeanDynamicObject.java:484)\r\n\tat org.gradle.internal.metaobject.BeanDynamicObject.tryInvokeMethod(BeanDynamicObject.java:196)\r\n\tat org.gradle.internal.metaobject.CompositeDynamicObject.tryInvokeMethod(CompositeDynamicObject.java:98)\r\n\tat org.gradle.internal.extensibility.MixInClosurePropertiesAsMethodsDynamicObject.tryInvokeMethod(MixInClosurePropertiesAsMethodsDynamicObject.java:36)\r\n\tat org.gradle.internal.metaobject.ConfigureDelegate.invokeMethod(ConfigureDelegate.java:57)\r\n\tat build_5c3mz5vz63hnqrc5pgnopid7w$_run_closure6.doCall(C:\\GitTest2\\EIM_Phoenix\\phoenix-java\\build.gradle:348)\r\n\tat java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base\/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat org.gradle.util.internal.ClosureBackedAction.execute(ClosureBackedAction.java:73)\r\n\tat org.gradle.util.internal.ConfigureUtil.configureTarget(ConfigureUtil.java:155)\r\n\tat org.gradle.util.internal.ConfigureUtil.configure(ConfigureUtil.java:106)\r\n\tat org.gradle.util.internal.ConfigureUtil$WrappedConfigureAction.execute(ConfigureUtil.java:167)\r\n\tat org.gradle.api.internal.DefaultMutationGuard$1.execute(DefaultMutationGuard.java:45)\r\n\tat org.gradle.internal.Actions.with(Actions.java:249)\r\n\tat org.gradle.api.internal.project.BuildOperationCrossProjectConfigurator$1.run(BuildOperationCrossProjectConfigurator.java:69)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n\tat org.gradle.api.internal.project.BuildOperationCrossProjectConfigurator.lambda$runProjectConfigureAction$0(BuildOperationCrossProjectConfigurator.java:66)\r\n\tat org.gradle.api.internal.project.BuildOperationCrossProjectConfigurator$$Lambda$830\/0x0000000000000000.accept(Unknown Source)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.lambda$applyToMutableState$0(DefaultProjectStateRegistry.java:360)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl$$Lambda$716\/0x0000000000000000.apply(Unknown Source)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.fromMutableState(DefaultProjectStateRegistry.java:378)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.applyToMutableState(DefaultProjectStateRegistry.java:359)\r\n\tat org.gradle.api.internal.project.BuildOperationCrossProjectConfigurator.runProjectConfigureAction(BuildOperationCrossProjectConfigurator.java:66)\r\n\tat org.gradle.api.internal.project.BuildOperationCrossProjectConfigurator.access$100(BuildOperationCrossProjectConfigurator.java:32)\r\n\tat org.gradle.api.internal.project.BuildOperationCrossProjectConfigurator$BlockConfigureBuildOperation.run(BuildOperationCrossProjectConfigurator.java:111)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n\tat org.gradle.api.internal.project.BuildOperationCrossProjectConfigurator.runBlockConfigureAction(BuildOperationCrossProjectConfigurator.java:62)\r\n\tat org.gradle.api.internal.project.BuildOperationCrossProjectConfigurator.subprojects(BuildOperationCrossProjectConfigurator.java:48)\r\n\tat org.gradle.api.internal.project.DefaultProject.subprojects(DefaultProject.java:728)\r\n\tat org.gradle.api.internal.project.DefaultProject.subprojects(DefaultProject.java:718)\r\n\tat java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base\/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat org.gradle.internal.metaobject.BeanDynamicObject$MetaClassAdapter.invokeMethod(BeanDynamicObject.java:484)\r\n\tat org.gradle.internal.metaobject.BeanDynamicObject.tryInvokeMethod(BeanDynamicObject.java:196)\r\n\tat org.gradle.internal.metaobject.CompositeDynamicObject.tryInvokeMethod(CompositeDynamicObject.java:98)\r\n\tat org.gradle.internal.extensibility.MixInClosurePropertiesAsMethodsDynamicObject.tryInvokeMethod(MixInClosurePropertiesAsMethodsDynamicObject.java:36)\r\n\tat org.gradle.groovy.scripts.BasicScript$ScriptDynamicObject.tryInvokeMethod(BasicScript.java:135)\r\n\tat org.gradle.internal.metaobject.AbstractDynamicObject.invokeMethod(AbstractDynamicObject.java:163)\r\n\tat org.gradle.groovy.scripts.BasicScript.invokeMethod(BasicScript.java:84)\r\n\tat build_5c3mz5vz63hnqrc5pgnopid7w.run(C:\\GitTest2\\EIM_Phoenix\\phoenix-java\\build.gradle:95)\r\n\tat org.gradle.groovy.scripts.internal.DefaultScriptRunnerFactory$ScriptRunnerImpl.run(DefaultScriptRunnerFactory.java:91)\r\n\t... 211 more\r\n\r\n\r\n* Get more help at https:\/\/help.gradle.org\r\n\r\nBUILD FAILED in 2s\r\n```\r\n\r\n######################################\r\nphoenix-java\r\n   -- allure\r\n   -- other sub projects\r\n\r\n######################\r\n```\r\nproject: allure - build.gradle\r\n\r\nplugins {\r\n    id 'java-test-fixtures'\r\n}\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    testFixturesImplementation(\"io.qameta.allure:allure-java-commons:$versionAllureTool\")\r\n\r\n    testFixturesImplementation(\"org.junit.jupiter:junit-jupiter-api:$versionJunit\")\r\n    testFixturesImplementation(\"org.junit.jupiter:junit-jupiter-engine:$versionJunit\")\r\n    testFixturesImplementation(\"org.junit.jupiter:junit-jupiter-params:$versionJunit\")\r\n}\r\n```\r\n###############################\r\n```\r\nphoenix-java - build.gradle\r\n\r\nsubprojects {\r\n\r\n   dependencies {\r\n        \/\/ OSGi\r\n        implementation 'org.osgi:osgi.core:8.0.0'\r\n        implementation 'org.osgi:osgi.cmpn:7.0.0'\r\n\r\n        \/\/ Test\r\n        testImplementation \"org.mockito:mockito-core:$versionMockito\"\r\n        testImplementation \"org.mockito:mockito-junit-jupiter:$versionMockito\"\r\n        testImplementation \"org.junit.jupiter:junit-jupiter-api:$versionJunit\"\r\n        testRuntimeOnly \"org.junit.jupiter:junit-jupiter-engine:$versionJunit\"\r\n\r\n        \/\/ Add Allure Junit extension to all subpojects (w\/o allure self and mbeanwebapp projects)\r\n        if (!project.name.equals('allure')) {\r\n            \/\/ Not mbeanwebapp project\r\n            if (!project.name.equals('mbeanwebapp')) {\r\n                \/\/testImplementation project(':allure')\r\n                testImplementation(project(testFixtures(':allure')))\r\n                \/\/testImplementation project(testFixtures(':allure'))\r\n\r\n            \/\/ mbeanwebapp project\r\n            } else {\r\n                testImplementation(\"io.qameta.allure:allure-java-commons:$versionAllureToolJava8\")\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Expected Behavior\r\n\r\nexecute project configuration\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\n`gradlew :alure:test`\r\n\r\n### Gradle version\r\n\r\n7.6.1 or 8.6\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["The issue is in the backlog of the relevant team and is prioritized by them."],"labels":["a:bug","in:java-plugins"]},{"title":"Please add an option to avoid caching of the gradle Catalog.","body":"### Expected Behavior\n\nI would like to have an option to avoid gradle catalog caching. For example as in the code that follows up.\r\n\r\n```\r\nversionCatalogs {\r\n        create(\"xxx\") {\r\n            from(\"yyy:+\")\r\n        }\r\n        caching = false\r\n}\r\n```\n\n### Current Behavior (optional)\n\nThere is not such option. And you are forced to use the --refresh-dependencies every time.\n\n### Context\n\nThis affects a lot Catalog usage when you are making plugins or simply adding or removing dependencies from the catalog.","comments":["Do we understand correctly what you want to [control dynamic version resolution](https:\/\/docs.gradle.org\/current\/userguide\/dynamic_versions.html#sec:controlling_dependency_caching_programmatically)? If that is the case, then it's a missing feature.\r\n\r\nThe workaround is to use an included build for the plugin.\r\n\r\n***\r\n\r\nThis issue will be closed as a duplicate of\r\n\r\n* #26775\r\n\r\nPlease add your use case and \ud83d\udc4d to that issue.\r\n\r\nIf you think our analysis is wrong, please provide us with more detailed information explaining why.\r\n\r\n\r\n","No its not. I want an option only for the Catalog if defined. Basically Catalog is not a plugin or a library dependency so it should be downloaded every time or at least there should be an option to avoid gradle caching it. This is a specific and needed feature request. Please reopen this bug.","This issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n","Related: https:\/\/github.com\/gradle\/gradle\/issues\/26009\n\nWe don't want to disable caching because caching is an important part of how Gradle works. \n\nUsing a dynamic version for the catalog will make your builds non-reproducible. e.g., this means that the build you do today won't be able to be done tomorrow if the catalog has changed. ","**Infact i am asking for an option**.  I do not ask you to set this behaviour as default. Just put an option to disable the caching of the catalog (and only the catalog). It is needed. Even if there is such collateral effect. If someone uses that option he\/she should now what he\/she is doing. Please do not  liquidate this problem this way.","@big-guy @ov7a The request is not related to dynamic version. But it's more like giving the possibility to avoid --refresh-dependency from a project which uses the catalog (if needed)\r\n\r\nSuppose I have a dependency in the catalog:\r\n\r\nlibrary => slf4j 1.0\r\n\r\nI update the library to slf4j => 1.1\r\n\r\n(No dynamic versions here)\r\n\r\nAfter the update in all of my projects i need to type .\/gradlew --refresh-dependencies or .\/gradlew -U. Otherwise if I forget to do it I'm continuing to use old dependencies without noticing.\r\nIs it possible to avoid it, allowing to set an option to always make a request to the catalog without using a cache? (Just a non default option)\r\n\r\nI think this need is totally unrelated to dynamic version also because in my project I'm free to lock dependencies if I need reproducibility, but in any case is boring to remember and repeat the command --refresh-dependencies when needed. And if you forget you are using old dependencies."],"labels":["a:feature","in:dependency-locking","in:dependency-version-catalog"]},{"title":"Add provider overload for SigningExtension.useInMemoryPgpKeys","body":"<!--- The issue this PR addresses -->\r\nFixes #28238\r\n\r\n### Context\r\n<!--- Why do you believe many users will benefit from this change? -->\r\n<!--- Link to relevant issues or forum discussions here -->\r\n\r\n### Contributor Checklist\r\n- [ ] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [ ] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [ ] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [ ] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [ ] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective.\r\n- [ ] Provide unit tests (under `<subproject>\/src\/test`) to verify logic.\r\n- [ ] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [ ] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`.\r\n- [ ] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["<h3>Change Summary<\/h3> This PR is 86.67% new code. <table> <tr> <td>Platform<\/td> <td>Added Lines<\/td> <td>% of Total Line Changes<\/td> <td>Deleted Lines<\/td> <td>% of Total Line Changes<\/td> <td>Files Changed<\/td> <td>% of Total Files Changed<\/td> <\/tr>\n<tr> <td>bt_ge_build_cache<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>build_infrastructure<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_configuration<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_execution<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_runtime<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>documentation<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>extensibility<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>gradle_enterprise<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>ide<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>jvm<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>kotlin_dsl<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>release_coordination<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>software<\/td> <td>117<\/td> <td>86.67%<\/td> <td>18<\/td> <td>13.33%<\/td> <td>4<\/td> <td>100%<\/td> <\/tr>\n<\/table>\n<automation id=\"summary_table\/summary_table\"\/>","Thank you for your contribution!\r\n\r\nThis PR has a valid DCO and tests. The relevant team for this area will confirm the design of the implementation choices.\r\n\r\n***\r\n@mlopatkin  Can you confirm that this change is ok based on your changes in this PR?\r\n* #26220 \r\n","AFAIK there is a CachedProvider too, isn't it? For the case, caching is still needed.","We'll take a look at this, but it will be after 8.8 (~April)."],"labels":["in:signing-plugin","from:contributor"]},{"title":"SigningExtension.useInMemoryPgpKeys should support provider input","body":"### Expected Behavior\r\n\r\n```kotlin\r\nsigning {\r\n  val signingKey = providers.gradleProperty(\"signingKey\")\r\n  setRequired(signingKey.isPresent)\r\n  useInMemoryPgpKeys(signingKey, providers.gradleProperty(\"signingPassword\"))\r\n  sign(publishing.publications)\r\n}\r\n```\r\n\r\n### Current Behavior (optional)\r\n\r\n```kotlin\r\nsigning {\r\n  val signingKey = providers.gradleProperty(\"signingKey\")\r\n  if (signingKey.isPresent) {\r\n    useInMemoryPgpKeys(signingKey.get(), providers.gradleProperty(\"signingPassword\").get())\r\n    sign(publishing.publications)\r\n  }\r\n}\r\n```\r\n\r\n### Context\r\n\r\nAs a user, I want to avoid calling `get()` in my build scripts, but `useInMemoryPgpKeys` requires `String` and not a `Provider<String>` overload.\r\n\r\n`BaseInMemoryPgpSignatoryProvider` uses `Lazy` but could use `Provider` directly.","comments":["Thanks for the PR, see the follow-up there"],"labels":["in:signing-plugin","a:feature"]},{"title":"Fingerprinting slow on linux","body":"### Current Behavior\n\nI use linux CI to run our project (pretty large with 300+ module) and fingerprinting takes around 20m or above for full build.\r\n\r\nSome up-to-date task taking 40-60 sec\/each to complete. When using gradle benchmark to try compile avoidance (when most task should be up-to-date) 1st and 2nd build fingerprinting super slow, but 3rd and 4th build getting faster.\r\n\r\nIf im comparing this to our mac OS build, it is only takes 5minutes for fingerprinting on full build, and each task mostly only takes less than 5 sec.\n\n### Expected Behavior\n\nFingerprinting for up-to-date task should fast (< 5sec) on linux, similar to mac os.\n\n### Context (optional)\n\nWe are changing our CI form mac os to linux and build time increased significantly because fingerprinting issue.\r\n\r\nLinux details:\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/38415463\/c2ede253-d28b-4592-a45d-b2f4f8ee426f)\r\n\r\nMac OS details:\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/38415463\/74d80b95-934c-43a6-a737-fabc211524df)\r\n\r\n\r\nDo you have any advice how to debug this issue?\r\n\n\n### Steps to Reproduce\n\nUnable to repro this on small project.\r\nOn our project, we run gradle profiler by changing private method on some modules to trigger compile avoidance. Compile avoidance happen. \r\nImage below showing 4 iteration, the 2nd and \r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/38415463\/f37fcff7-cd11-4e68-8902-5075cd1f8198)\r\nTask execution detail:\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/38415463\/4c874d58-aeb2-468c-b1f3-7997eb6c04c1)\r\n\r\n\r\n\r\nComparing to mac os with same source code:\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/38415463\/69e1d1cd-9c2f-450a-a819-251845464b93)\r\n\r\n\n\n### Gradle version\n\n8.5\n\n### Gradle version that used to work\n\n-\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n","@oehme could your changes be relevant here?","The issues I've found so far are platform-independent, but any fingerprinting issues are interesting to me. @doniwinata0309 since you are already using gradle-profiler, could you share a profile with the slow fingerprinting time, preferably using the `async-profiler` option?","Please find attachment for async profiler and chrome trace:\r\n[async_profiler.zip](https:\/\/github.com\/gradle\/gradle\/files\/14416109\/async_profiler.zip)\r\n[compile_avoidance_app-8.5-trace.json.zip](https:\/\/github.com\/gradle\/gradle\/files\/14416461\/compile_avoidance_app-8.5-trace.json.zip)\r\nfingerprinting for this build is around 34m\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/38415463\/e6daebf1-0818-4b71-9e71-b4954a037b28)\r\n\r\nAppreciate your help","Could you attach another one with `--async-profiler-event wall` and do the same on MacOS for comparison?","[linux.zip](https:\/\/github.com\/gradle\/gradle\/files\/14421775\/linux.zip)\r\nThis is the result on linux. for mac not sure why it is become very large like 500mb for 1 stack file. will retry again and send youthe result later","From what I'm seeing in that snapshot, it looks like everything is waiting on the file hash cache, which is a small database on disk that gets lots of tiny reads and writes during a build. What kind of machine are you running this on? For example, on AWS, I'd strongly recommend agents with SSDs instead of EBS volumes.","It is\r\nc7i.4xlarge | Processor: 4th Generation Intel Xeon Scalable | vCPU: 16 | Memory: 32 | EBS-Only | Network badnwidth: Up to 12.5 | EBS bandwith: Up to 10 \r\n\r\nI will try to benchmark with \r\nc6id.4xlarge with SSD and update you the result.\r\n\r\nThank you, appreciate your help\r\n\r\n","also wondering, is there any other workaround i can do to optimize it on that machine?","I have a [possible fix](https:\/\/github.com\/gradle\/gradle\/compare\/master...oehme:gradle:oehme\/faster-btree-cache) for you to try out, if you're up for building Gradle from source. You'd have to check out that branch of my fork, run `gradlew install -Pgradle_installPath=<where to put the installation>` and then run your experiments with that custom installation.\r\n\r\nI recommend doing the SSD test first though.","Sure let me try that later, Thank you ","The result on AWS using SSD is much faster compared to EBS, and we will consider to use ssd for our CI. But sometimes i can see task like com.android.build.gradle.internal.tasks.DexMergingTask takes 40 sec to just fingerprinting, executing 0.6sec. \r\n\r\nIs there a way to skip fingerprinting on some task, forcing it to just run without cache\/checking up-to-date? \r\n\r\nunfortunately i got some error after using this [possible fix](https:\/\/github.com\/gradle\/gradle\/compare\/master...oehme:gradle:oehme\/faster-btree-cache)\r\nGradle dissapear, probably there some issue with our app when using gradle 8.8.","> The result on AWS using SSD is much faster compared to EBS, and we will consider to use ssd for our CI. \r\n\r\nThat is my experience as well, glad you're seeing a good speedup.\r\n\r\n> But sometimes i can see task like com.android.build.gradle.internal.tasks.DexMergingTask takes 40 sec to just fingerprinting, executing 0.6sec. Is there a way to skip fingerprinting on some task, forcing it to just run without cache\/checking up-to-date?\r\n\r\nActually, this is misleading - DexMerging depends on artifact transformations, which are currently counted towards \"fingerprinting\", but it's actually real work being done by the Android plugin. So disabling fingerprinting in that case won't do anything.\r\n\r\n> unfortunately i got some error after using this [possible fix](https:\/\/github.com\/gradle\/gradle\/compare\/master...oehme:gradle:oehme\/faster-btree-cache)\r\nGradle dissapear, probably there some issue with our app when using gradle 8.8.\r\n\r\nI'd love to know more - Have you tried with the `master` branch for comparison? \r\n\r\n","Ah i see so that may be artifact transform causing issue. I will try later with gradle 8.5 source code and make changes similar to your commit. Will update the result later, thank you for your help.","This is the result from 2 benchmark with 3 iteration (1 warm up)\r\nGradle 8.5 with [possible fix](https:\/\/github.com\/gradle\/gradle\/compare\/master...oehme:gradle:oehme\/faster-btree-cache)\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/38415463\/9bb717a0-4239-426e-89e7-11e6d0ef3260)\r\n\r\nGradle 8.5 and 8.2\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/38415463\/8924ef07-821c-4865-8783-57bf7371c800)\r\n\r\nLooks like it can fix the issue. \r\n\r\nTo use this on our CI, do i need to copy source --> run build --> point out gradle to use custom installtion path ?\r\nOr do you have advice how we can use custom gradle temporarily like use .jar or something?\r\nand if some of my pipeline using custom gradle, some not, they will not share same build cache right?","@doniwinata0309 What version of the Develocity plugin are you using? Using the Develocity Gradle plugin 3.16+ with Gradle 8.3+ will accurately display the transform execution duration, and it will not be included in the fingerprinting duration.\r\n\r\nDevelocity plugin 3.15\r\n![Screenshot 2024-03-04 at 2 56 08\u202fPM](https:\/\/github.com\/gradle\/gradle\/assets\/30589784\/d5e900be-af0d-4f6c-8550-2cd0f56ac93c)\r\n\r\nDevlocity plugin 3.16\r\n![Screenshot 2024-03-04 at 2 56 17\u202fPM](https:\/\/github.com\/gradle\/gradle\/assets\/30589784\/04183b1c-3120-4fae-8d17-b88a72a8fe80)\r\n","@sorin-florea it is Develocity plugin 3.15.1, i will update it to 3.16 thanks\r\n  "],"labels":["a:bug","in:input-normalization",":wave: team-triage","in:internal-native-libraries"]},{"title":"Allow registering task `@OutputFile` that does not create parent directory","body":"### Expected Behavior\n\nTo be able to register an `@OutputFile`, `@OutputFiles`, or `@OutputDirectory` in such a way that it does not automatically create any directories.\n\n### Current Behavior (optional)\n\nIt seems that creating the parent dir of a output file is hardcoded, and that there is no way to disable it. The behavior is the same with `@OutputFiles` and `@OutputDirectory` (in which the directory itself is created).\n\n### Context\n\nI have a task that may write or delete a file, according to the inputs. When writing configured to write the file, this is not an issue. But when the task is configured to delete a file, the result might be that we get an empty folder where the was not one before.","comments":["I would like to be able to configure the other way too: Gradle should create the parent directory of `@OutputFile` too to match the behavior of `@OutputDirectory`.","\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n","@hfhbd \r\n>  Gradle should create the parent directory of @OutputFile\r\n\r\nThis is the current behavior. Or did you mean you want to keep the option to have this behavior? Which I agree.","@mgroth0 I guess I was just not aware of this behavior or I remember some build failures (in the past) so I always explicitly create the parent directories, will test it, but I agree, an option would be nice."],"labels":["a:feature","in:execution-engine",":wave: team-triage"]},{"title":"Clarify how to annotate a file that a task may create or may delete","body":"### Issue type\r\n\r\nMissing information\r\n\r\n### Problem description\r\n\r\nReading the documentation for `@OutputFile` and `@Destroys`, it does not anywhere help the user know how to mark a file that a task may either create or destroy.\r\n\r\nThese are the logical scenarios to consider:\r\n1. The configuration input (such as a `ValueSource` at read configuration time) might tell the task whether to create or delete the file\r\n2. Task input (such as an `@InputFile`) might cause the task to determine whether to create or delete the file at execution time\r\n\r\nWhat do we do here?\r\n\r\nShould we use both annotations?\r\n\r\n```kotlin\r\n@get:Destroys\r\n@get:OutputFile\r\nabstract val managedFile: RegularFileProperty\r\n```\r\n\r\nOr should we just use one of them? If so, which one?\r\n\r\nThe docs for both annotation types should probably mention this scenario and clarify to the user what to do.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Page with the problem\r\n\r\nhttps:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/tasks\/Destroys.html","comments":["Using both annotations causes an error:\r\n\r\n```\r\nproperty 'outputFile' has conflicting type annotations declared: @Destroys, @OutputFile.\r\n    \r\n    Reason: The different annotations have different semantics and Gradle cannot determine which one to pick.\r\n    \r\n    Possible solution: Choose between one of the conflicting annotations.\r\n    \r\n    For more information, please refer to https:\/\/docs.gradle.org\/8.6\/userguide\/validation_problems.html#conflicting_annotations in the Gradle documentation\r\n```\r\n\r\nThe error message does not help me chose which one to pick. Also the linked documentation doesn't help either.\r\n\r\nI am guessing that we just go with `@OutputFile` ?","related: https:\/\/github.com\/gradle\/gradle\/issues\/28234","\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n"],"labels":["in:execution-engine","a:documentation",":wave: team-triage"]},{"title":"Java Problems API improvements","body":"### Expected Behavior\n\nThere are 2 requests here...\r\n\r\n1) The diagnostics returned by the Java compiler to Gradle are incorrect when the file uses tabs as indentation.\r\n\r\nThe compiler assumes that tabs are equivalent to 8 spaces (I've no idea why javac does this - it's not Gradle doing it).\r\n\r\ne.g. (note there is a single tab before `String`)\r\n```java\r\n\tString str = \"\r\n```\r\nHere the JavaCompiler will give an `unclosed string literal` error specifying column 22 when it should be column 15.  The compiler treats that tab as 8 spaces so adds 7 to the column position.  Any client now has to check the source file, go to that line, iterate through the contents and check for tabs to adjust to get the correct column number.\r\n\r\nYou can see a Java plugin project doing that adjustment [here](https:\/\/github.com\/sourcegraph\/scip-java\/blob\/e4c4ffb42e11cf8bab94e8d038c42f939e6b3d27\/semanticdb-javac\/src\/main\/java\/com\/sourcegraph\/semanticdb_javac\/SemanticdbVisitor.java#L419-L439)\r\n\r\nIs it possible for Gradle to do this adjustment?  I realise it's a pain to open the file and probably affects performance.  This is also tied in with https:\/\/github.com\/gradle\/gradle\/issues\/27829 and the issue of multi-line diagnostics.  If the file has to be loaded to adjust for tabs then it may as well adjust for ending line and column.\r\n\r\n2) The problems API aggregates Java warnings\/errors which is fine.  The problems in the aggregation can all be traced back to their particular project\/subproject as they each have a `TaskPathLocation` which is something like `:projectName:compileJava`.\r\n\r\nThe issue I've got is that the aggregated problems get sent to the `ProgressListener` _after_ the `:projectName:compileJava` tasks have already sent through a `FinishEvent`.\r\n\r\nI'm using the `FinishEvent` of `:projectName:compileJava` to summarise the number of warnings and errors but I can't do that if the `FinishEvent` occurs before the aggregated problems get sent through.\r\n\r\nSo can the aggregated problems be sent through before the `FinishEvent`?\n\n### Current Behavior (optional)\n\n1) The problem file column location is not correct if source file uses tabs.\r\n2) Task progress events are being sent though _after_ task finish events have been sent through.\n\n### Context\n\nI'm trying to report on compiler warnings\/errors.  Both the individual problems (with correct locations in an IDE) and a summary of problems.","comments":["This feature request is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:feature","in:problems"]},{"title":"Introduce API for the build script to interactively prompt the user","body":"### Expected Behavior\n\nUser is able to write\r\n```\r\nval userInput = services.get(UserInputHandler::class.java)\r\nval acceptAgreement = userInput.askYesNoQuestion(\"Do you accept the license agreement at $licensePath?\")\r\n```\r\nin their task to prompt user for a response before continuing without having to use any internal APIs.\n\n### Current Behavior (optional)\n\nUserInputHandler currently is an internal service\n\n### Context\n\nIt is very helpful, in fact Gradle Enterprise plugin uses this internal API already. [In androidx we use it for a license agreement before we opening a tool the requires to agree to some terms before using it](https:\/\/cs.android.com\/androidx\/platform\/frameworks\/support\/+\/androidx-main:buildSrc\/private\/src\/main\/kotlin\/androidx\/build\/studio\/StudioTask.kt;l=272?q=userinputhandler&ss=androidx%2Fplatform%2Fframeworks%2Fsupport)","comments":["This issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.","This feature request is in the backlog of the relevant team and is prioritized by them.\r\n***\r\n\r\nThere's movement in this direction ( #27943), but there are some issues to address. The resulting user-facing API may not necessary end up following what UserInputHandler has at the moment, so I'm rewording the title of the issue to untie it from the current implementation.","Would you only need something like `askYesNoQuestion()` on the public API?\r\n\r\nWe could potentially expose just that method on the public API to start with, and this would mean we could defer fix some of the other issues and get a minimal public API exposed sooner."],"labels":["a:feature","in:console"]},{"title":"Project Isolation: PropertyDelegate: Expected unreportedProblemInCurrentCall to be called after enterDynamicCall","body":"### Current Behavior\r\n\r\n```stacktrace\r\nCaused by: java.lang.IllegalStateException: Expected unreportedProblemInCurrentCall to be called after enterDynamicCall\r\n        at org.gradle.configurationcache.DefaultDynamicCallProblemReporting.unreportedProblemInCurrentCall(DynamicCallProblemReporting.kt:75)\r\n        at org.gradle.configurationcache.CrossProjectModelAccessTrackingParentDynamicObject.maybeReportProjectIsolationViolation(CrossProjectModelAccessTrackingParentDynamicObject.kt:114)\r\n        at org.gradle.configurationcache.CrossProjectModelAccessTrackingParentDynamicObject.onAccess(CrossProjectModelAccessTrackingParentDynamicObject.kt:109)\r\n        at org.gradle.configurationcache.CrossProjectModelAccessTrackingParentDynamicObject.tryGetProperty(CrossProjectModelAccessTrackingParentDynamicObject.kt:57)\r\n        at org.gradle.internal.metaobject.CompositeDynamicObject.tryGetProperty(CompositeDynamicObject.java:56)\r\n        at org.gradle.kotlin.dsl.NullableDynamicPropertyDelegate.getValue(PropertyDelegate.kt:65)\r\n```\r\n\r\n### Expected Behavior\r\n\r\nNo error\r\n\r\n### Context (optional)\r\n\r\nWorkaround:\r\n```kotlin\r\nval s: Provider<String> = project.providers.gradleProperty(\"s\")\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\n```kotlin\r\nval s: String? by project\r\nprintln(s)\r\n```\r\n\r\n[gradle28204.zip](https:\/\/github.com\/gradle\/gradle\/files\/14383932\/gradle28204.zip)\r\n`.\/gradlew help`\r\n\r\n### Gradle version\r\n\r\n8.7-RC1\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["The issue is in the backlog of the relevant team and is prioritized by them.","The issue is reproducible with 8.6 and 8.5. Here is a simpler reproducer as an integration test:\r\n```groovy\r\n    def \"reproducer\"() {\r\n        file(\"a\/build.gradle.kts\") << \"\"\"\r\n            val s: String? by project\r\n            println(s)\r\n        \"\"\"\r\n\r\n        settingsFile \"\"\"\r\n            include(\"a\")\r\n        \"\"\"\r\n\r\n        expect:\r\n        isolatedProjectsRun(\"help\")\r\n    }\r\n```\r\n    \r\nIt does not fail the build logic is in the root project."],"labels":["a:bug","has:reproducer","has:workaround","in:isolated-projects"]},{"title":"Fix issues with inferred Scala classpath configurations","body":"### Context\r\nThis pull request fixes the following issues:\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/27226\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/27309\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/18435\r\n\r\nAs a side improvement, it also makes the `Task` interface extend `Named`, similar to the recent improvement to the `Configuration` interface.\r\n\r\n### Contributor Checklist\r\n- [x] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [x] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [x] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [x] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [ ] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective.\r\n- [x] Provide unit tests (under `<subproject>\/src\/test`) to verify logic.\r\n- [x] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [x] Ensure that tests pass sanity check: `.\/gradlew :scala:sanityCheck`.\r\n- [x] Ensure that unit tests pass locally: `.\/gradlew :scala:test`.\r\n- [x] Ensure that tests pass locally: `.\/gradlew :scala:quickTest`.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["I built Gradle locally including my changes, and my earlier reproductions did not fail anymore using this version. \ud83d\ude42\r\nReady for review.\r\n\r\nShould I add any integration tests specifically for these issues, or would the existing ones + new unit tests be enough?","Could these fixes still make their way into the `8.7` release? If so, should I be targeting this PR at a different branch, e.g. [`release`](https:\/\/github.com\/gradle\/gradle\/tree\/release)?","@jvandort I rebased my changes on the `release` branch and switched the PR's target to that too, based on how https:\/\/github.com\/gradle\/gradle\/pull\/28267 got merged into the [`8.7 RC2` milestone](https:\/\/github.com\/gradle\/gradle\/milestone\/270).","Thank you for your contribution!\r\n\r\nPlease, move out your changes related to `Task` interface as they are not scala-specific and would require a separate consideration since it's a change in the core API.\r\n\r\n****\r\n\r\n> Should I add any integration tests specifically for these issues, or would the existing ones + new unit tests be enough?\r\n\r\nWill answer to that later, after the review from the community.\r\n\r\n> Could these fixes still make their way into the 8.7 [release](https:\/\/github.com\/gradle\/gradle\/tree\/release)? If so, should I be targeting this PR at a different branch, e.g. release?\r\n\r\nNo. The release window for 8.7 is closed. This PR can land in 8.8 if it's merged before April. \r\n\r\n****\r\n\r\n@ijuma @tgodzik @dubinsky @SheliakLyr If you have time, can you take a look at this PR? As you know, we are counting on the Scala Community to help improve Gradle Scala Plugin.","@ov7a\r\n\r\n> The release window for 8.7 is closed. This PR can land in 8.8 if it's merged before April.\r\n\r\nAh, too bad. I was hoping that bug fixes can still get included in the next `8.7` release candidate.\r\nI'll rebase everything back on top of `master` then, switch the PR back to target `master`, and update the `@since` in my Javadocs to `8.8`.\r\n\r\n> Please, move out your changes related to `Task` interface as they are not scala-specific and would require a separate consideration since it's a change in the core API.\r\n\r\nWill do, but some of the code in this PR depends on that change. How should I represent this, so that the PR remains buildable? The idea I have:\r\n\r\n1. Rebase commit b05254bfcdff1a011366f7dd8705a951425b8ec0 on top of `master`, and move it to a separate branch and PR targeting `master`\r\n2. Rebase the commits remaining in this PR on top of that new branch, and keep targeting `master`\r\n\r\nIs this the correct approach? I believe that the commit related to the changes in `Task` would still show up here initially, but disappear once that PR gets merged.\r\n\r\nThanks!","> Will do, but some of the code in this PR depends on that change. How should I represent this, so that the PR remains buildable?\r\n\r\nPlease make this PR buildable without that change. You can create a separate PR for the `Task` changes, but please keep them independent. I understand this can result in some complications to this PR, but since the `Task` change is a core API change, it may be rejected or postponed until 9.0.","@ov7a \r\n\r\n> Please make this PR buildable without that change. You can create a separate PR for the `Task` changes, but please keep them independent. I understand this can result in some complications to this PR, but since the `Task` change is a core API change, it may be rejected or postponed until 9.0.\r\n\r\nI have high hopes that it will be accepted quickly, given that it's based on a very similar recent change, and it's completely backwards-compatible. I just submitted the separate PR, if someone could take a quick glance at it (max. 2 minutes), that'd be much appreciated: https:\/\/github.com\/gradle\/gradle\/pull\/28282\r\n\r\nWith that said, I understand your concern. I can make this PR independent without a lot of effort, it's just that the error reporting won't be as descriptive without that core API improvement.","I updated the code in this PR to target the `8.8` release and to avoid relying on PR #28282. I also created a separate `scala-plugin-cleanup` branch in my fork to demonstrate the envisioned end state after that other PR is merged ([see diff here](https:\/\/github.com\/pantherdd\/gradle\/compare\/scala-plugin...scala-plugin-cleanup)).","@ov7a The CI build you started failed with this error:\r\n```\r\nGradle could not start your build.\r\n> Could not create service of type BuildCacheController using .createBuildCacheController().\r\n   > Cannot use Gradle Enterprise build cache client without specifying Gradle Enterprise server address.\r\n```\r\nIt was the same yesterday; I thought that maybe it was just a one-off, but it seems like it isn't. My guess is that this is unrelated my changes, and it's likely some central issue with the CI setup, but just to make sure: is there anything I can\/need to do to fix this?","@pantherdd \r\nYes, this is a known CI problem; it's unrelated to your changes, and you can ignore it.\r\nIt is fixed in the master already, so you can rebase your PR, but this action is optional.","@ov7a No worries, I'm happy to do such small chores to have a successful CI run. But unfortunately rebasing the changes on current `master` did not fix the issue.","@pantherdd whoops. Sorry about that. I've notified the responsible team.","@bot-gradle test this","<!-- {\"replyTargetCommentId\":1972162516,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"9f031f06065ae7e8683d7ada292e793ad26e3015\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nSorry but I'm afraid you're not allowed to do this.","\r\n@bot-gradle test this\r\n\r\n","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"d6e737533fcd9be1741784212de0bb82dadb7f2a\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=d6e737533fcd9be1741784212de0bb82dadb7f2a) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=78900837)","Most of the failures are fixed now, there are only 2 remaining:\r\n* `GradleBuildSanityCheckConfigurationCacheSmokeTest`, which seems unrelated\r\n* `:architecture-test:test` shows that I broke 5 rules\r\n  * `ConfigurationCreationTest` > `configurations_are_created_with_role_based_api`\r\n  * `ProviderMigrationArchitectureTest` > `public_api_task_properties_are_providers`\r\n  * `ProviderMigrationArchitectureTest` > `public_api_task_file_properties_are_configurable_file_collections`\r\n  * `PublicApiCorrectnessTest` > `public_api_methods_do_not_reference_internal_types_as_parameters`\r\n  * `PublicApiCorrectnessTest` > `public_api_classes_do_not_extend_internal_types`\r\n\r\nHow strictly are these rules enforced, do I have to find a way to abide by all of them or is there a way to get an exception? For example:\r\n* The `Configuration`s registered by `ScalaRuntime` would have to use the `ConfigurationRoles.RESOLVABLE_DEPENDENCY_SCOPE` as far as I understand, but there does not seem to be a way to _register_ such a `Configuration`\r\n* `ScalaTask.getConventionMapping()` does not return a `Provider`, and I can't really change that because I'm inheriting that method from `IConventionAware`, but have to declare it myself too only to add an `@Internal` annotation on it\r\n* `ScalaTask extends IConventionAware`, yes, but if that's a no-go, what should it do instead?\r\n* The other method declarations of `ScalaTask` are copied from `ScalaCompile` and `ScalaDoc`, I can't change their signature either\r\n* `ScalaJar.inspect` returns a `Stream`, which is not allowed, but what is the proper alternative that allows short-circuited filtering? Or should I throw the optimization aspect away and just return a `Collection` (or something similar)?\r\n\r\nPlease give me some guidance on how to deal with these few remaining issues reported by the CI build.","> If you have time, can you take a look at this PR? As you know, we are counting on the Scala Community to help improve Gradle Scala Plugin.\r\n\r\nThis pull request is, in my opinion, very helpful and well executed; I hope it gets accepted soon.\r\n\r\n","Rebased on latest `master` now that https:\/\/github.com\/gradle\/gradle\/pull\/28282 is merged.\r\n\r\nWe can now remove the redundant extends from `ScalaTask` (since now `Task` itself extends `Named`).","It's only the `:architecture-test:test` rules now that are causing PR check failures, but I'd need some advice from the maintainers on what I should do about those. Details are in [my earlier comment](https:\/\/github.com\/gradle\/gradle\/pull\/28198#issuecomment-1972938677).\r\n\r\n@ov7a , do you know who could answer my questions?","@pantherdd In general, new code should obey the architecture rules. There might be exceptions, but you need a solid reason to get an exception for the rule. For the Scala plugin, it might be something like \"it was that way before, it is already in the exception list, and it's hard to change\", but it's up to the @gradle\/bt-jvm team to decide.\r\n\r\n> there does not seem to be a way to register such a Configuration\r\n\r\nPlease look at `ConfigurationContainer.resovable` and `ConfigurationContainer.dependencyScope`\r\n\r\n> The other method declarations of ScalaTask are copied from ScalaCompile and ScalaDoc, I can't change their signature either\r\n\r\n`getScalaClasspath()` and similar are in the exclusion list, so it's up to JVM team to decide.\r\n\r\n> ScalaTask extends IConventionAware, yes, but if that's a no-go, what should it do instead?\r\n\r\nPotentially you can avoid this problem by extending `SourceTask` - both `ScalaDoc` and `ScalaCompile` extend it already.\r\n\r\n> ScalaJar.inspect returns a Stream, which is not allowed, but what is the proper alternative\r\n\r\nYou can use `Iterable` or `Collection`, yes.","<h3>Change Summary<\/h3> This PR is 73.32% new code. <table> <tr> <td>Platform<\/td> <td>Added Lines<\/td> <td>% of Total Line Changes<\/td> <td>Deleted Lines<\/td> <td>% of Total Line Changes<\/td> <td>Files Changed<\/td> <td>% of Total Files Changed<\/td> <\/tr>\n<tr> <td>bt_ge_build_cache<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>build_infrastructure<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_configuration<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_execution<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_runtime<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>documentation<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>extensibility<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>gradle_enterprise<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>ide<\/td> <td>14<\/td> <td>1.01%<\/td> <td>14<\/td> <td>1.01%<\/td> <td>1<\/td> <td>5%<\/td> <\/tr>\n<tr> <td>jvm<\/td> <td>960<\/td> <td>69.41%<\/td> <td>354<\/td> <td>25.6%<\/td> <td>16<\/td> <td>80%<\/td> <\/tr>\n<tr> <td>kotlin_dsl<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>release_coordination<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>software<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<\/table>\n<automation id=\"summary_table\/summary_table\"\/>","@ov7a Thanks for the guidance, I was able to modify my code in a way that it now passes the `architecture-test` checks too. \ud83d\udc4d\r\n\r\nNotes:\r\n* The code is still calling `project.configurations.register`, but strangely `configurations_are_created_with_role_based_api` doesn't fail anymore. \ud83d\ude2e (Perhaps it's because the type of `project` is now `ProjectInternal` instead of `Project`?)\r\n  * I can't switch to using `ConfigurationContainer.resovable` \/ `ConfigurationContainer.dependencyScope` because I need both roles here (if I understand them correctly).\r\n  * I could _create_ such a configuration using `RoleBasedConfigurationContainerInternal.resolvableDependencyScopeUnlocked`, but is there a way to _register_ one instead?\r\n* `ScalaTask` can't extend `SourceTask` because the latter is an abstract class, and `ScalaTask` needs to be an interface to keep the class inheritance tree of `ScalaCompile` and `ScalaDoc` intact. The solution I came up with was to use a runtime check whether a given `ScalaTask` instance implements `IConventionAware`, and only register a `scalaClasspath` convention if it does. This allows users to implement their own `ScalaTask` classes without the convention.\r\n* I added `ScalaTask`'s `FileCollection` properties to the exception list (`provider-task-file-collection.txt`), pending approval of course.\r\n* `ScalaJar.inspect` now returns an `Iterable` instead of a `Stream`. It's a bit more clunky to use, but it follows the rules. Same for the `VersionNumber` property.","@pantherdd Thanks! For the remaining issues - it's up to @gradle\/bt-jvm team.","> For the remaining issues - it's up to @gradle\/bt-jvm team.\r\n\r\n@ov7a The @gradle\/bt-jvm tagging doesn't seem to get recognized by Github (at least it's not clickable) \u2013 does that team need to be notified about this in some way, or do they see that their assistance is required here e.g. through a task board? Thanks \ud83d\ude42 ","> @ov7a The @gradle\/bt-jvm tagging doesn't seem to get recognized by Github (at least it's not clickable) \u2013 does that team need to be notified about this in some way, or do they see that their assistance is required here e.g. through a task board? Thanks \ud83d\ude42\r\n\r\nThis is a private group. It's on their board, don't worry. However, this may take time for them to get to it due to other priorities. Sorry for the delay."],"labels":["in:scala-plugin","from:contributor"]},{"title":"Registered configurations are eagerly realized","body":"### Current Behavior\r\n\r\nWhen I define a configuration using `configurations.register(String, Action)`, Gradle realizes the new configuration right away, running the `Action` immediately.\r\n\r\n### Expected Behavior\r\n\r\nWhen I define a configuration using `configurations.register(String, Action)`, Gradle should not realize the new configuration until required, delaying or avoiding the execution of the `Action`.\r\n\r\n### Context\r\n\r\nThis seems to be caused by `BasePlugin`, which is applied in almost every build (transitively), because its `configureConfigurations` method [executes a `configurations.all` call](https:\/\/github.com\/gradle\/gradle\/blob\/v8.6.0\/platforms\/software\/platform-base\/src\/main\/java\/org\/gradle\/api\/plugins\/BasePlugin.java#L101).\r\n\r\nCall chain showing how `configurations` gets forced into eagerly realizing every configuration:\r\n1. `org.gradle.api.plugins.BasePlugin.configureConfigurations (line 101)`\r\n2. `org.gradle.api.internal.DefaultDomainObjectCollection.all (line 142)`\r\n3. `org.gradle.api.internal.DefaultDomainObjectCollection.addEagerAction (line 225)`\r\n4. `org.gradle.api.internal.collections.DefaultCollectionEventRegister.registerEagerAddAction (line 83)`\r\n5. `org.gradle.api.internal.collections.DefaultCollectionEventRegister.registerEagerAddDecoratedAction (line 97)`\r\n6. `org.gradle.api.internal.collections.DefaultCollectionEventRegister.subscribe (line 120)`\r\n\r\nModifying that method to [call `configurations.configureEach` instead](https:\/\/blog.gradle.org\/preview-avoiding-task-configuration-time) looks like a simple fix for this, but I'm not sure whether doing so would break anything with regards to `defaultArtifacts`. If you think that idea would work, I'd like to contribute the fix myself via a pull request.\r\n\r\n### Steps to Reproduce\r\n\r\nBuild script (Kotlin DSL):\r\n```kts\r\nplugins {\r\n    base\r\n}\r\n\r\nlogger.lifecycle(\"[TEST] --- registering ---\")\r\nval myTestTask by tasks.registering { logger.lifecycle(\"[TEST] realizing ${this}\") }\r\nval myTestConf by configurations.registering { logger.lifecycle(\"[TEST] realizing ${this}\") }\r\nlogger.lifecycle(\"[TEST] --- requesting ---\")\r\nmyTestTask.get()\r\nmyTestConf.get()\r\nlogger.lifecycle(\"[TEST] --- finished ---\")\r\n```\r\n\r\nThis prints:\r\n```\r\n[TEST] --- registering ---\r\n[TEST] realizing configuration ':myTestConf'\r\n[TEST] --- requesting ---\r\n[TEST] realizing task ':myTestTask'\r\n[TEST] --- finished ---\r\n```\r\n\r\nWithout the `base` plugin (the correct behavior):\r\n```\r\n[TEST] --- registering ---\r\n[TEST] --- requesting ---\r\n[TEST] realizing task ':myTestTask'\r\n[TEST] realizing configuration ':myTestConf'\r\n[TEST] --- finished ---\r\n```\r\n\r\n### Gradle version\r\n\r\n8.6","comments":["This issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.","I have a large multiproject build, and I have reason to beleive this could dramatically improve performance. \r\n\r\nIn particular, it seems the Kotlin Multiplaform Plugin both creates and configures a large number of configurations. Just the amount of time it takes to iterate through them all (and Gradle sends events each time \"Executing Container Callback Action\" takes a long time.\r\n\r\nEven if this doesn't have a large effect on performance right away, I think its a step in the right direction.","This is the way it works now.\n\nEven if we remove the code in BasePlugin, we still need to realize all configurations as part of dependency resolution. \n\nWe would need to also restrict which configurations are realized when building the local component metadata for a project:\nhttps:\/\/github.com\/gradle\/gradle\/blob\/54092879449df0a8f108a8ba0e31b7c2288f51fa\/platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/internal\/component\/local\/model\/DefaultLocalComponentMetadata.java#L155-L167\n\nTo do that, we need to know if a Configuration is going to be resolved or consumed as a variant and this is a mutable property of a Configuration created from `configurations.register(...)` or `configurations.create(...)`.\n\nThis won't be useful until after 9.0 since Configurations created by Gradle in the built-in plugins are mutable.  In 9.0, we plan to make the Configurations non-mutable and have known roles (resolvable, consumable, dependency scope).\n"],"labels":["a:bug","in:configuration-model","in:dependency-declarations"]},{"title":"docs.gradle.org - \"current\" documentation is excluded in robots.txt","body":"### Current Behavior\n\n\r\n\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/3000480\/68a97191-7933-4e71-9980-679f01339506)\r\n\r\nIt is a bug in robots.txt : https:\/\/docs.gradle.org\/robots.txt\r\n\r\n```\r\nUser-agent: *\r\nsitemap: https:\/\/docs.gradle.org\/current\/sitemap.xml\r\nDisallow: \/nightly\/\r\nDisallow: \/release-nightly\/\r\nDisallow: \/release-candidate\/\r\nDisallow: \/7.6.4\/dsl\/\r\nDisallow: \/7.6.4\/javadoc\/\r\nDisallow: \/7.6.4\/samples\/\r\nDisallow: \/7.6.4\/userguide\/\r\nDisallow: \/8.6\/dsl\/\r\nDisallow: \/8.6\/javadoc\/\r\nDisallow: \/8.6\/kotlin-dsl\/\r\nDisallow: \/8.6\/samples\/\r\nDisallow: \/8.6\/userguide\/\r\n...\r\nDisallow: \/current\/dsl\/\r\nDisallow: \/current\/javadoc\/\r\nDisallow: \/current\/kotlin-dsl\/\r\nDisallow: \/current\/samples\/\r\nDisallow: \/current\/userguide\/\r\n```\n\n### Expected Behavior\n\ncurrent is not included into It is a bug in robots.txt : https:\/\/docs.gradle.org\/robots.txt\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\nGoogle something from documentation\n\n### Gradle version\n\nany\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":[],"labels":["in:documentation-infrastructure","a:bug"]},{"title":"Unused `caches\/transforms-3` directory is not removed by Gradle User Home cache cleanup","body":"### Current Behavior\n\nWhen a user upgrades their build to run with Gradle 8.6, the `~\/.gradle\/caches\/transforms-4` directory is used, and the old `transforms-3` directory is not.\r\nWhen cleanup runs, old unused versions of Gradle are removed from GUH, including the `caches\/<gradle-version>` directory together with other directories that are no longer required (like old `caches\/jars-x` and `caches\/modules-2\/metadata-x` directories.\r\n\r\nHowever, the `transforms-*` directories are not cleaned in this way, and older versions will never be removed by cache cleanup.\n\n### Expected Behavior\n\nWhen a user runs only with Gradle 8.6, the Gradle User Home cleanup should remove the no-longer-used `caches\/transforms-3` directory.\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\n- Run a build with Gradle 8.5. Note that Gradle User Home has a `caches\/transforms-3` directory.\r\n- Run the same build with Gradle 8.6. Now there is a `caches\/transforms-4` directory as well.\r\n- Wait 7 days, or artificially age the files in Gradle User Home.\r\n- Run the same build with Gradle 8.6. Stop the daemon so that Gradle User Home cleanup runs.\r\n- Note that the `caches\/8.5` directory has been removed, but not the `caches\/transforms-3` directory.\r\n\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["@gradle\/bt-execution I've been working on a fix for this, and already have a functional spike. I won't have much time to work on it in the next few weeks, but I'll assign myself and intend on taking care of getting this fixed. Expect a draft PR in a couple of weeks.\r\n\r\nThe fix involves adding an additional `CleanupAction` [here](https:\/\/github.com\/gradle\/gradle\/blob\/7859f9ad08d3a503964f31ff86cd299fabbe03e3\/platforms\/core-execution\/execution\/src\/main\/java\/org\/gradle\/internal\/execution\/workspace\/impl\/CacheBasedImmutableWorkspaceProvider.java#L97-L101), using a `CompositeCleanupAction`. The main complication is that this makes construction of `CacheBasedImmutableWorkspaceProvider` even more configurable than it already was: I will likely introduce a builder for this type to make it a little less convoluted."],"labels":["a:bug","in:artifact-transforms"]},{"title":"Adjust redundant configuration usage change warning","body":"Previously, we emitted a deprecation warning in some cases when a usage for a configuration was set to a value it already had. This was only emitted in certain cases -- for non-legacy, non-detached configurations, and when the value-being-set was to enable the usage.\r\n\r\nThe goal of this warning is to push users to not try to set roles for configurations that already have their roles set upon creation. However, the previous implementation is not ideal for the two following reasons\r\n\r\n1. The warning message was worded in a way to dissuade users from redundantly changing a configuration's usage, making it seem this was a sort of correctness deprecation All other cases of non-redundant changes to roles were handled with a different deprecation warning\r\n2. We only warned about this redundant change in very narrow circumstances -- when the usage's value was being set to true and for configurations with certain names This effectively defeats the purpose of this deprecation. The name matching avoided our own smoke tests from emitting this warning, but there are scenarios that users were hitting where this name matching did not cover.\r\n\r\nReally, the goal here is for build logic to not call setCanBeX methods on configurations where the role is already set upon creation. For this reason, we update redundant calls to setCanBeX to emit the same warning as calling these methods non-redundantly. However, since KMP still redundantly calls setCanBeX, we hide the emitting of this deprecation behind a system property. We plan to file an issue with KMP to stop calling setCanBeX on all configurations that already exist -- or those that are managed by Gradle \/ created via source sets -- and tell them to verify their changes by enabling this system property. Until then, we will not warn for redundant usage changes.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["\ud83e\udd77 **Code experts: tresat** \n \ntresat, jvandort have most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \ntresat, jvandort have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/documentation\/docs\/src\/docs\/userguide\/releases\/upgrading\/upgrading_version_8.adoc` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | FEB |   |  \n| JAN |   |178 additions & 129 deletions | \n| DEC |   |172 additions & 9 deletions | \n| NOV |   |  \n| OCT |   |  \n| SEP |   |88 additions & 0 deletions | \n \n\nKnowledge based on git-blame: \n jvandort: 31% \ntresat: 2% \n\n`platforms\/software\/dependency-management\/src\/integTest\/groovy\/org\/gradle\/integtests\/resolve\/api\/ConfigurationRoleUsageIntegrationTest.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | FEB |   |  \n| JAN |   |3 additions & 15 deletions | \n| DEC |   |  \n| NOV |   |  \n| OCT | 702 additions & 1 deletions |  \n| SEP |   |  \n \n\nKnowledge based on git-blame: \n tresat: 14% \njvandort: 13% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/configurations\/DefaultConfiguration.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | FEB |   |  \n| JAN |   |199 additions & 369 deletions | \n| DEC | 5 additions & 5 deletions |155 additions & 228 deletions | \n| NOV |   |  \n| OCT | 2367 additions & 0 deletions |  \n| SEP |   |4 additions & 1 deletions | \n \n\nKnowledge based on git-blame: \n jvandort: 19% \ntresat: 3% \n\n`subprojects\/internal-integ-testing\/src\/main\/groovy\/org\/gradle\/integtests\/fixtures\/ConfigurationUsageChangingFixture.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP |   |  \n \n\nKnowledge based on git-blame: \n \n`subprojects\/internal-integ-testing\/src\/main\/groovy\/org\/gradle\/integtests\/fixtures\/executer\/ResultAssertion.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP |   |  \n \n\nKnowledge based on git-blame: \n \n`subprojects\/smoke-test\/src\/smokeTest\/groovy\/org\/gradle\/smoketests\/WithKotlinDeprecations.groovy` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | FEB |   |  \n| JAN |   |12 additions & 0 deletions | \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP |   |  \n \n\nKnowledge based on git-blame: \n tresat: 60% \njvandort: 5% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>","This pull request has been automatically marked as stale because it has not had recent activity. It will be closed in 14 days if no further activity occurs. If you don't want the stale bot to close it, then set a milestone for it.","Keep this open"],"labels":["stale","10 min review","platform:software","platform:documentation","platform:build_infrastructure","platform:release_coordination"]},{"title":"No Kotlin type-safe accessor for extension of element in project-extension container","body":"### Current Behavior\r\n\r\nI have a project extension which is a container which contains elements. These elements themselves have extensions added. There are type safe accessors added for each of the elements in that container, but there is no type safe container for the extension added to each element.\r\n\r\n### Expected Behavior\r\n\r\nAccording to the [Kotlin DSL primer](https:\/\/docs.gradle.org\/current\/userguide\/kotlin_dsl.html#type-safe-accessors) accessors are available for:\r\n\r\n- Elements in [project-extension containers](https:\/\/docs.gradle.org\/current\/userguide\/kotlin_dsl.html#kotdsl:containers) (for example the source sets contributed by the Java Plugin that are added to the sourceSets container)\r\n- Extensions on each of the above\r\n\r\nThe accessors for the elements should be covered by the first statement. The accessor for the extension on the elements should be covered by the second statement.\r\n\r\nThis is exactly what would cover, for example, the Groovy source directory sets added as extensions to the source sets by the Groovy plugin.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\nI add all extensions from a plugin, because they have to be added when the `plugins` block is evaluated.\r\n\r\nIn my plugin, I created a dummy type for the elements to store in a container:\r\n\r\n```\r\n\/\/ in plugin\r\ninterface Element extends Named, ExtensionAware {\r\n}\r\n```\r\n\r\nI add a container to the project as an extension:\r\n\r\n```\r\n\/\/ in plugin\r\ndef containerOfElement = project.container(Element)\r\nproject.extensions.add('projectExtensionContainerOfElement', containerOfElement)\r\n```\r\n\r\nThis leads to a type-safe accessor for it being generated:\r\n\r\n```\r\n\/\/ in build script\r\nprintln(project.projectExtensionContainerOfElement)\r\n```\r\n\r\nType safe accessors are also added to elements in the container:\r\n\r\n```\r\n\/\/ in plugin\r\ndef foo = project.objects.newInstance(Element, 'foo')\r\ncontainerOfElement.add(foo)\r\n\r\n\/\/ in build script\r\nprintln(project.projectExtensionContainerOfElement.foo)\r\n```\r\n\r\nI also add an extension to the `foo` element:\r\n\r\n```\r\n\/\/ in plugin\r\nfoo.extensions.add('someStringProperty', project.objects.property(String))\r\n```\r\n\r\nAccording to the [Kotlin DSL primer](https:\/\/docs.gradle.org\/current\/userguide\/kotlin_dsl.html#type-safe-accessors), I expected also a type-safe accessor for the property:\r\n\r\n```\r\n\/\/ in build script\r\nprintln(project.projectExtensionContainerOfElement.foo.someStringProperty)\r\n```\r\n\r\nThis unfortunately doesn't work. I get a compile error.\r\n\r\n### Gradle version\r\n\r\n8.6\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Here's a zip with a reproducible example: [example.zip](https:\/\/github.com\/gradle\/gradle\/files\/14362481\/example.zip)\r\n","Discussed also on the Gradle forum: https:\/\/discuss.gradle.org\/t\/no-kotlin-type-safe-accessor-for-extension-of-element-in-project-extension-container\/47740\/7","This issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.","Thank you, we think it is a valid feature request. We put it to the backlog of the team responsible for this area. It may take a while to get processed.\r\n\r\n----\r\n\r\nThis is related to \r\n* https:\/\/github.com\/gradle\/gradle\/issues\/9277\r\n\r\nIn the same vein, observing extensions of each element instance will defeat containers laziness.\r\n\r\nAlso see https:\/\/github.com\/gradle\/gradle\/issues\/9277#issuecomment-486635757\r\n\r\n> Because observing task instances will get in the way of lazy task creation, the only way to provide type-safe accessors would be an extension model where, instead of registering extensions on task instances, the extensions would be registered by task type and could be queried without realizing the tasks.\r\n\r\nYou can replace \"task\" with \"container element\" in the above quote.","How does this work for the Groovy plugin, when using the Kotlin DSL? The [documentation](https:\/\/docs.gradle.org\/current\/userguide\/groovy_plugin.html#sec:changing_groovy_project_layout) shows the following (comments mine):\r\n\r\n```\r\nsourceSets {  \/\/ container added as project extension\r\n    main {  \/\/ element in the container\r\n        groovy {  \/\/ extension of element in container\r\n            \/\/ ...\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI had a look at the code and `groovy` is contributed using an extension. This is the same situation as in the code from the issue, where the accessor doesn't get added. Is there some extra magic somewhere that triggers the creation of the accessor?","That's because source sets are handled specially. Other core plugins eagerly resolve them already so it's not a big deal. But this is not done for all containers as explained above.\r\n\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/5ff44c006f45b8c702baa4073308855eaa659a19\/platforms\/core-configuration\/kotlin-dsl-provider-plugins\/src\/main\/kotlin\/org\/gradle\/kotlin\/dsl\/provider\/plugins\/DefaultProjectSchemaProvider.kt#L97-L100","Now I get what is meant with getting in the way of lazy creation.\r\n\r\nIs this something that I could do in my own code, for my own containers? I can find `ProjectSchemaProvider` in the javadoc, so I guess it's not public.","Your plugin could ship static Kotlin extensions for your containers' elements. They would require an import but should be discoverable from the IDE content assist.","Is there a shorthand to access the `someStringProperty` extension, aside from getting `project.projectExtensionContainerOfElement.foo.extensions.get(\"someStringProperty\")` and having to cast? With the old convention API, there was a `withConvention()` method, does something similar exist also for extensions?"],"labels":["a:feature","in:kotlin-dsl"]},{"title":"Model the \"--system\" option on JavaCompile","body":"### Expected Behavior\n\nWhen a custom runtime is used during compilation, this can be specified on the JavaCompile task.  Knowing this location, Gradle can then descend into the jimage file and fingerprint module info file and the ABI of the classes similar to how we would for a jar file.\n\n### Current Behavior (optional)\n\nRight now, you can specify this as a jvm argument in which case the custom runtime is ignored during fingerprinting for up-to-dateness or build cache key calculation.  Or, the user can add a command line argument provider, but since the custom runtime uses a jimage file, they can only specify that file as an input, which means unless the file is _exactly_ the same file that was used during previous executions, it will fingerprint differently, causing build cache misses even though the compiled outputs would be the same.\n\n### Context\n\nCustom runtimes can be used to strip down the system modules for a variety of reasons.  One is to provide a slimmer system classpath, which can improve the performance of the compiler.  Another is to reduce the memory footprint of the compiler.  A third reason is to hide classes that will not be available at runtime and prevent users from compiling against them.\r\n\r\nAndroid (starting with AGP 7.1) constructs a custom runtime when source compatibility is set higher than Java 9 (via JdkImageTransform).  This slims down the system modules and removes things that won't be available at runtime (like swing classes).  They set up their own command line argument provider for this, however, they have no good way to specify the normalization of the jimage file which means slight differences in implementation between distributions (which don't affect the compilation output) can cause cache misses during java compilation.  This is currently handled in the Android Cache Fix plugin through a complicated set of transforms and replacing the command line provider that AGP provides, but handling custom runtimes should be a first class feature of JavaCompile.","comments":[],"labels":["a:feature","in:java-plugins"]},{"title":"`groovy-gradle-plugin` usage require additional configuration-cache before being reused","body":"### Current Behavior\n\nSince Gradle 8.1 (8.0 is working), executing the Java init template using Groovy DSL as generated by Gradle 7.5 (not sure about other combinations) requires 2 builds before the configuration cache can be reused on the 3rd build without any changes:\r\n```\r\n$ .\/gradlew build --configuration-cache -g ..\/user-home                    \r\n\r\nWelcome to Gradle 8.1!\r\n\r\nHere are the highlights of this release:\r\n - Stable configuration cache\r\n - Experimental Kotlin DSL assignment syntax\r\n - Building with Java 20\r\n\r\nFor more details see https:\/\/docs.gradle.org\/8.1\/release-notes.html\r\n\r\nStarting a Gradle Daemon (subsequent builds will be faster)\r\nEncryption of the configuration cache is enabled.\r\nCalculating task graph as no configuration cache is available for tasks: build\r\n\r\nBUILD SUCCESSFUL in 32s\r\n20 actionable tasks: 20 executed\r\nConfiguration cache entry stored.\r\n$ .\/gradlew build --configuration-cache -g ..\/user-home\r\nEncryption of the configuration cache is enabled.\r\nCalculating task graph as configuration cache cannot be reused because an input to plugin 'org.gradle.groovy-gradle-plugin' has changed.\r\n\r\nBUILD SUCCESSFUL in 967ms\r\n20 actionable tasks: 20 up-to-date\r\nConfiguration cache entry stored.\r\n$ .\/gradlew build --configuration-cache -g ..\/user-home\r\nEncryption of the configuration cache is enabled.\r\nReusing configuration cache.\r\n\r\nBUILD SUCCESSFUL in 659ms\r\n13 actionable tasks: 13 up-to-date\r\nConfiguration cache entry reused.\r\n```\n\n### Expected Behavior\n\nThe configuration cache should be reusable on the 2nd build without changes.\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\n- Use Gradle 7.5 `init` task to generate a split Java application using Groovy DSL\r\n- Execute `build --configuration-cache` three times\r\n- Profit!\n\n### Gradle version\n\nAffects Gradle 8.1 and later\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["The issue is in the backlog of the relevant team and is prioritized by them.\r\n\r\n***\r\n\r\nThis is reproducible while using Gradle 8.6 for generating the project as well.\r\nOnce you have a CC hit (third run from reproducer instructions), deleting the `<project>\/.gradle` and running `clean` will cause the next `build` invocations to have  a single CC miss. On the second run, you get a hit.\r\nSo there is something that is saved in the Gradle user home that invalidates the cache on first use.","This should probably be addressed by @gradle\/bt-extensibility-maintainers rather than CC team."],"labels":["a:bug","in:plugin-development","in:configuration-cache"]},{"title":"Improve \"Sharing outputs between projects\" documentation","body":"### Issue type\n\nMissing information\n\n### Problem description\n\nThe Gradle documentation goes into great detail for some dependency management related topics but fails to describe others adequately. In particular, the documentation has guides that describe [variant selection](https:\/\/docs.gradle.org\/current\/userguide\/variant_model.html) and [attributes](https:\/\/docs.gradle.org\/current\/userguide\/variant_attributes.html), but fails to adequately describe how to leverage them to share data between projects. \r\n\r\nThe existing documentation, \"[Sharing outputs between projects](https:\/\/docs.gradle.org\/current\/userguide\/cross_project_publications.html)\" attempts to address this, but fails for a number of reasons:\r\n\r\n1. The document _starts_ by explaining artifact sharing with `targetConfiguration`, and then notifies the users that this is a discouraged practice. If we don't want users doing this, we should probably not display it on this page or should at least put it at the bottom.\r\n2. The following section begins to describe variant-aware sharing but falls short. In particular:\r\n\r\n* The examples never add an artifact to the consumable configuration\r\n* The examples never describe how to set up a resolvable configuration in another project to consume the described consumable configuration. The example only shows how to add attributes to a dependency.\r\n* The example assumes the user wants to share _java_ files but does not describe how somebody would share other arbitrary files. In many cases, users just want to share some arbitrary task output between projects.\r\n* The example does not describe _how_ to select which attributes to use. We should 1. link to relevant documentation here, and 2. give a concise overview of how to choose attributes on-page that is suitable for most use-cases. \r\n\r\nIn general, we lack an easily approachable guide on how to solve the problem: \"How do I get a file from this project to that project\" (using best practices). This problem is faced _so often_ by users and is quite poorly documented. \r\n\r\nA proper guide for this workflow should consist of two projects: `producer` and `consumer`. \r\n\r\nWithin the producer\r\n* The producer has a task which writes to a file\r\n* The producer creates a consumable configuration and the artifacts from the task are added to the configuration\r\n* The producer adds attributes to the consumable configuration. How and why these attributes are chosen should be explained.\r\n\r\nWithin the consumer\r\n* The consumer creates a dependency scope configuration\r\n* The consumer creates a resolvable configuration that extends from the dependency scope. The proper attributes are declared on this configuration\r\n* A dependency on the `producer` project is added to the dependency scope configuration\r\n* Optional: The consumer creates a task that resolves the resolvable configuration\r\n\r\nThis is the recommended approach for sharing files between projects. The scripts would look like so (untested code below):\r\n\r\n\r\nproducer.gradle\r\n```\r\nconfigurations {\r\n    myVariant {\r\n        canBeConsumed = true\r\n        canBeResolved = false\r\n        outgoing {\r\n            artifacts {\r\n                artifact(tasks.myArchive)\r\n            }\r\n        }\r\n        attributes {\r\n            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, \"custom-value\"))\r\n        }\r\n    }\r\n}\r\n\r\n\r\ntask myTask {\r\n    def file = layout.buildDirectory.file(\"foo\")\r\n    inputs.file(file)\r\n    doLast {\r\n        file.get().getAsFile().text = \"bar\"\r\n    }\r\n}\r\n\r\n\r\nartifacts {\r\n    myVariant(myTask)\r\n}\r\n```\r\n\r\nconsumer.gradle\r\n```\r\nconfigurations {\r\n    myDependencies {\r\n        canBeConsumed = false\r\n        canBeResolved = false\r\n    }\r\n    myResolver {\r\n        extendsFrom(myDependencies)\r\n        attributes {\r\n            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, \"custom-value\"))\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    myDependencies(project(\":producer\"))\r\n}\r\n\r\ntask doResolve {\r\n    def files = configurations.myResolver.files\r\n    dependsOn(files)\r\n    doLast {\r\n        println(files*.name)\r\n    }\r\n}\r\n```\r\n\r\nThere are a number of issues that have been written up in regards to this documentation page:\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/18846\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/19318\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/25615\r\n\r\nThis issue acts as a general catch-all that should aim to address the problem described in this issue and the above linked issue.\r\n\r\n\r\n\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/current\/userguide\/cross_project_publications.html","comments":["It would be really helpful to improve the docs for this. It would also be helpful to improve the Gradle API to make the functionality clearer.\r\n\r\nSome other information that I would like to see:\r\n\r\n* What does the name 'Configuration' mean? The docs already mention it's an 'overloaded' term, but some context would help. Normally 'configuration' means 'options that determine behaviour', not 'incoming\/outgoing files'.\r\n* What does `Configuration.setIsVisible(true)` do? In what situations should I set it to true or false?\r\n* Debugging is almost impossible, and requires creating custom code and digging through files. It would be nice to have a human readable 'resolved dependencies' report (e.g. HTML, not console output) that shows what files were selected and why, according to the 'matching algorithm'.\r\n* What do I need to do to share files transitively? In order example above, what would I need to do to expose the `myDependencies(project(\":producer\"))` dependency as a transitive dependency. Do I need to make something like `myDependenciesApi(project(\":producer\"))`? How do I wire that up?\r\n* What is the `artifactType` Attribute for? When should I use it? What are some example uses?\r\n* 'The Variant attribute matching algorithm' is too confusing. It's both high level and uses specific, undefined terminology (e.g. 'candidate'), and doesn't match what I see in code.\r\n* What is the purpose of 'secondary variants'? When should I use them?\r\n\r\n  [The docs](https:\/\/docs.gradle.org\/current\/userguide\/variant_model.html) mention secondary variants briefly, but it doesn't provide any guidance or examples.\r\n    \r\n    > It also shows secondary variants, which are exclusive to Gradle projects and not published.\r\n\r\n  Is that a good thing or a bad thing? Should I avoid it because I want my library to be used by other build systems? Or are secondary variants supposed to be used for internal plugin files?\r\n\r\n* Why are outgoing variants attributes merged with the primary variant's attributes? Is this intentional, or a bug?\r\n    \r\n    ```kotlin\r\n    val blah by configurations.creating {  }\r\n    \r\n    blah.outgoing.variants.create(\"blahVariant\") {\r\n      attributes { \r\n        \/\/ What should I put here? Why are attributes here merged with blah's attributes?\r\n      }\r\n    }\r\n    ```\r\n\r\n* What functionality should I avoid due to bugs? Currently I have to discover a number of issues along the way and it would be helpful if I could be aware of any pitfalls before I start developing.\r\n\r\n  * Sharing files isn't fully config cache compliant \r\n    * https:\/\/github.com\/gradle\/gradle\/issues\/27594\r\n    * https:\/\/github.com\/gradle\/gradle\/issues\/27443\r\n  * ArtifactView sometimes doesn't work https:\/\/github.com\/gradle\/gradle\/issues\/27443\r\n  * registering outgoing variants doesn't work https:\/\/github.com\/gradle\/gradle\/issues\/27441\r\n  * don't use `@Nested` task inputs with files https:\/\/github.com\/gradle\/gradle\/issues\/13590\r\n  * Gradle will randomly add files to a Configuration https:\/\/github.com\/gradle\/gradle\/issues\/23776\r\n  * Detached configurations `extendsFrom()` is broken https:\/\/github.com\/gradle\/gradle\/issues\/6881\r\n  * Sometimes there's an obscure bug with resolution with an unhelpful error message https:\/\/github.com\/gradle\/gradle\/issues\/28196\r\n\r\n* How can I _stop_ other plugins from (accidentally) using my plugin's configurations? How can I prevent Gradle from randomly adding files to a Configuration? How can I implement defensive practices to avoid issues?\r\n\r\n   > In other words, the attributes set on the producer must be consistent with the other variants produced on the same project.\r\n\r\n  This advice is too vague and not practical. I might have _no idea_ how my plugin will be used, or in what 'ecosystem', or I might _want_ my plugin to be compatible with _all_ 'ecosystems'. How can I see what variants I need to be consistent with? Why can't Gradle figure it out for me? The docs are telling me I have to make decisions on some information, but isn't providing the tools to get this information. In comparison with the 'unsafe' \"reference other project tasks directly\" approach it's _so_ much more code and confusion to try and do it the 'proper' way.\r\n\r\n* If I have a plugin that produces `.txt` resources and `.png` resources in two separate Configurations. How should I do this? How can I recombine them per-source in a consuming project?\r\n\r\n  For example, `:subproject-alpha` and `:subproject-beta` have separate tasks & configurations for text resources and image resources. `:aggregator` needs to aggregate these resources per subproject.\r\n\r\n    ```text\r\n    .\r\n    \u251c\u2500\u2500 subproject-alpha\/\r\n    \u2502   \u251c\u2500\u2500 build\/\r\n    \u2502   \u2502   \u251c\u2500\u2500 resources\/\r\n    \u2502   \u2502   \u2502   \u251c\u2500\u2500 file1.txt\r\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 file2.txt\r\n    \u2502   \u2502   \u2514\u2500\u2500 img\/\r\n    \u2502   \u2502       \u251c\u2500\u2500 img1.png\r\n    \u2502   \u2502       \u2514\u2500\u2500 img2.png\r\n    \u2502   \u2514\u2500\u2500 build.gradle.kts\r\n    \u2502\r\n    \u251c\u2500\u2500 subproject-beta\/\r\n    \u2502   \u251c\u2500\u2500 resources\/\r\n    \u2502   \u2502   \u2514\u2500\u2500 file1.txt\r\n    \u2502   \u251c\u2500\u2500 img\/\r\n    \u2502   \u2502   \u2514\u2500\u2500 img1.jpg\r\n    \u2502   \u2514\u2500\u2500 build.gradle.kts\r\n    \u2502\r\n    \u2514\u2500\u2500 aggregator\/\r\n        \u251c\u2500\u2500 build\/\r\n        \u2502   \u2514\u2500\u2500 resources\/\r\n        \u2502       \u251c\u2500\u2500 alpha\/    \r\n        \u2502       \u2502   \u251c\u2500\u2500 resources\/\r\n        \u2502       \u2502   \u2502   \u251c\u2500\u2500 file1.txt\r\n        \u2502       \u2502   \u2502   \u2514\u2500\u2500 file2.txt\r\n        \u2502       \u2502   \u2514\u2500\u2500 img\/\r\n        \u2502       \u2502       \u251c\u2500\u2500 img1.png\r\n        \u2502       \u2502       \u2514\u2500\u2500 img2.png\r\n        \u2502       \u2514\u2500\u2500 beta\/\r\n        \u2502           \u251c\u2500\u2500 resources\/\r\n        \u2502           \u2502   \u2514\u2500\u2500 file1.txt\r\n        \u2502           \u2514\u2500\u2500 img\/\r\n        \u2502               \u2514\u2500\u2500 img1.jpg\r\n        \u2514\u2500\u2500 build.gradle.kts\r\n    ```\r\n\r\n* When I am writing a plugin that shares a specific type of file, I need to manually create 3 (or more) Configurations just for one file type. Can't Gradle just provide a single encapsulated 'DependencyManager' class that creates the subtypes for me?"],"labels":["in:dependency-declarations","a:documentation"]},{"title":"FileCollection normalized path is lost accross worker boundary","body":"### Current Behavior\r\n\r\nListing the normalized path using `fileCollection.asFileTree.visit {}` (see https:\/\/github.com\/gradle\/gradle\/issues\/27836#issuecomment-1952419483) loses the normalized path when using a worker.\r\n\r\n\r\n```kotlin\r\nfun FileCollection.dump() {\r\n     asFileTree.visit {\r\n        if (file.isFile) {\r\n            println(\"$path -> ${file.length()}\")\r\n        }\r\n     }\r\n}\r\n```\r\n\r\n`.\/gradlew myTaskNoWorker myTaskWorker` outputs:\r\n\r\n```\r\n> Task :myTaskNoWorker\r\nwrapper\/gradle-wrapper.jar -> 43462\r\nwrapper\/gradle-wrapper.properties -> 250\r\n\r\n> Task :myTaskWorker\r\ngradle-wrapper.jar -> 43462\r\ngradle-wrapper.properties -> 250\r\n```\r\n\r\nThe `wrapper` prefix is lost when going through the worker\r\n\r\n### Expected Behavior\r\n\r\nThe normalized path is preserved:\r\n\r\n```\r\n> Task :myTaskNoWorker\r\nwrapper\/gradle-wrapper.jar -> 43462\r\nwrapper\/gradle-wrapper.properties -> 250\r\n\r\n> Task :myTaskWorker\r\nwrapper\/gradle-wrapper.jar -> 43462\r\nwrapper\/gradle-wrapper.properties -> 250\r\n```\r\n\r\n### Context (optional)\r\n\r\nFollow up from https:\/\/github.com\/gradle\/gradle\/issues\/27836#issuecomment-1952419483\r\n\r\n### Steps to Reproduce\r\n\r\ncopy\/paste the below in a build.gradle.kts file and run `.\/gradlew myTaskNoWorker myTaskWorker`\r\n\r\n```kotlin\r\nimport Build_gradle.MyTask.Companion.dump\r\n\r\n\r\nabstract class MyTask: DefaultTask() {\r\n    @get:InputFiles\r\n    @get:PathSensitive(PathSensitivity.RELATIVE)\r\n    abstract val inputFiles: ConfigurableFileCollection\r\n\r\n    @get:Internal\r\n    abstract val useWorker: Property<Boolean>\r\n\r\n    @get:Inject\r\n    abstract val workerExecutor: WorkerExecutor\r\n\r\n    @TaskAction\r\n    fun taskAction() {\r\n        if (useWorker.get()) {\r\n            workerExecutor.noIsolation().submit(MyWorkAction::class.java) {\r\n                this.inputFiles.from(this@MyTask.inputFiles)\r\n            }\r\n        } else {\r\n            inputFiles.dump()\r\n        }\r\n    }\r\n\r\n    companion object {\r\n        fun FileCollection.dump() {\r\n            asFileTree.visit {\r\n                if (file.isFile) {\r\n                    println(\"$path -> ${file.length()}\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface MyWorkParameters: WorkParameters {\r\n    val inputFiles: ConfigurableFileCollection\r\n}\r\n\r\nabstract class MyWorkAction: WorkAction<MyWorkParameters> {\r\n    override fun execute() {\r\n        parameters.inputFiles.dump()\r\n    }\r\n}\r\n\r\ntasks.register(\"myTaskWorker\", MyTask::class.java) {\r\n    inputFiles.from(fileTree(\"gradle\"))\r\n    useWorker.set(true)\r\n}\r\n\r\ntasks.register(\"myTaskNoWorker\", MyTask::class.java) {\r\n    inputFiles.from(fileTree(\"gradle\"))\r\n    useWorker.set(false)\r\n}\r\n```\r\n\r\n### Gradle version\r\n\r\n8.6\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["The issue is in the backlog of the relevant team and is prioritized by them.","Sorry I missed this before but looks like this is the same issue as https:\/\/github.com\/gradle\/gradle\/issues\/19174"],"labels":["a:bug","in:workers","has:reproducer"]},{"title":"Add debug assertions in dependency resolution when locks should be held","body":"related to #28028 \n\nThis issue uncovered a codepath that has long assumed it had a mutable project lock but does not appear it ever did.  The underlying issue was a thread (with the project lock) modified a container that was being iterated over by another thread (without the project lock).\n\nWe avoided CMEs for a long time because of an unintentional copy of the collection being iterated over. This narrowed the window for the CME significantly. \n\nWe should investigate other places that we obviously assume we have a lock and assert that we do to surface any other codepaths that may be vulnerable to this. ","comments":[],"labels":["a:investigation","in:dependency-resolution"]},{"title":"Task kotlinDslAccessorsReport causes error when configuration cache is enabled","body":"### Current Behavior\n\n`.\/gradlew kotlinDslAccessorsReport --configuration-cache` fails\n\n### Expected Behavior\n\n`.\/gradlew kotlinDslAccessorsReport --configuration-cache` works\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\n```kotlin\r\n\/\/ build.gradle.kts\r\n\r\nplugins {\r\n  idea\r\n}\r\n```\r\n\r\n```\r\n\u2192 .\/gradlew kotlinDslAccessorsReport --configuration-cache\r\nCalculating task graph as no cached configuration is available for tasks: kotlinDslAccessorsReport\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nConfiguration cache state could not be cached: field `reference` of `org.gradle.model.internal.type.ClassTypeWrapper` bean found in field `wrapper` of `org.gradle.model.internal.type.ModelType$Simple` bean found in field `type` of `org.gradle.kotlin.dsl.provider.plugins.DefaultProjectSchemaProviderKt$special$$inlined$typeOf$1` bean found in field `value` of `org.gradle.kotlin.dsl.accessors.SchemaType` bean found in field `target` of `org.gradle.kotlin.dsl.accessors.ProjectSchemaEntry` bean found in field `extensions` of `org.gradle.kotlin.dsl.accessors.ProjectSchema` bean found in field `value` of `org.gradle.internal.Try$Success` bean found in field `result` of `org.gradle.internal.serialization.Cached$Fixed` bean found in field `schema` of task `:kotlinDslAccessorsReport` of type `org.gradle.kotlin.dsl.accessors.tasks.PrintAccessors`: error writing value of type 'java.lang.ref.WeakReference'\r\n> Unable to make field volatile java.lang.ref.Reference java.lang.ref.Reference.next accessible: module java.base does not \"opens java.lang.ref\" to unnamed module @1372bafb\r\n\r\n* Try:\r\n> Run with --stacktrace option to get the stack trace.\r\n> Run with --info or --debug option to get more log output.\r\n> Run with --scan to get full insights.\r\n> Get more help at https:\/\/help.gradle.org.\r\n\r\nBUILD FAILED in 479ms\r\nConfiguration cache entry discarded due to serialization error.\r\n```\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["The issue is in the backlog of the relevant team and is prioritized by them.\r\n\r\n***\r\n\r\nThanks for providing a concise reproducer; it really helps."],"labels":["a:bug","in:kotlin-dsl"]},{"title":".\/gradlew build --profile does not produce profiling report for includebuilds","body":"### Current Behavior\r\n\r\n.\/gradlew build --profile\r\n\r\nBUILD SUCCESSFUL in 9s\r\n13 actionable tasks: 2 executed, 11 up-to-date\r\nWatched directory hierarchies: [\/myprojects\/multimoduleproject1]\r\n\r\nSee the profiling report at: file:\/\/\/myprojects\/multimoduleproject1\/build\/reports\/profile\/profile-2024-02-20-08-26-36.html\r\nA fine-grained performance profile is available: use the --scan option.\r\n\r\n\r\n### Expected Behavior\r\n\r\n.\/gradlew build --profile\r\n\r\nBUILD SUCCESSFUL in 9s\r\n13 actionable tasks: 2 executed, 11 up-to-date\r\nWatched directory hierarchies: [\/myprojects\/multimoduleproject1]\r\n\r\nSee the profiling report at: file:\/\/\/myprojects\/multimoduleproject1\/build\/reports\/profile\/profile-2024-02-20-08-26-36.html\r\nA fine-grained performance profile is available: use the --scan option.\r\n\r\nSee the profiling report at: file:\/\/\/myprojects\/multimoduleproject1\/myIncludeBuild1\/build\/reports\/profile\/profile-2024-02-20-08-26-37.html\r\nA fine-grained performance profile is available: use the --scan option.\r\n\r\nSee the profiling report at: file:\/\/\/myprojects\/multimoduleproject1\/myIncludeBuild2\/build\/reports\/profile\/profile-2024-02-20-08-26-37.html\r\nA fine-grained performance profile is available: use the --scan option.\r\n\r\nSee the profiling report at: file:\/\/\/myprojects\/multimoduleproject1\/myIncludeBuild3\/build\/reports\/profile\/profile-2024-02-20-08-26-37.html\r\nA fine-grained performance profile is available: use the --scan option.\r\n\r\n### Context (optional)\r\n\r\nUpgrading from 7.4 to gradle 8.6 noticed that profiling reports are no logner generated for include builds \r\n\r\nsettings.gradle\r\nincludeBuild 'myIncludeBuild1'\r\nincludeBuild 'myIncludeBuild2'\r\nincludeBuild 'myIncludeBuild3'\r\n\r\n### Steps to Reproduce\r\n\r\n1. upgrade gradle from 7 to 8.6\r\n2. run .\/gradlew build --profile \r\n\r\n### Gradle version\r\n\r\n8.6\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["This issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n***\r\n\r\nRelated:\r\n* #16799 "],"labels":["a:regression","to-triage",":wave: team-triage","in:profile-report"]},{"title":"eclipse-wtp-plugin, task eclipseWtpComponent: NullPointerException when reading org.eclipse.wst.common.component generated by Eclipse","body":"### Current Behavior\r\n\r\n`gradle eclipseWtpComponent `\r\n\r\nfails with\r\n\r\n```\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nExecution failed for task ':eclipseWtpComponent'.\r\n> Cannot parse file '.......\\.settings\\org.eclipse.wst.common.component'.\r\n         Perhaps this file was tinkered with? In that case try delete this file and then retry.\r\n```\r\n\r\nThe failure is\r\n```\r\nCaused by: java.lang.NullPointerException\r\n        at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:903)\r\n        at org.gradle.plugins.ide.eclipse.model.WbDependentModule.<init>(WbDependentModule.java:51)\r\n        at org.gradle.plugins.ide.eclipse.model.WbDependentModule.<init>(WbDependentModule.java:37)\r\n```\r\n\r\n### Expected Behavior\r\n\r\nNo failure when reading a file that Eclipse itself \"tinkered with\".\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\nIn a gradle project (where eclipseWtp was applied) \r\n\r\n1. Project properties (Alt + Enter)\r\n2. Deployment assembly\/Add...\/Fileset\/(select a file set)\/Finish\r\n(Eclipse adds to org.eclipse.wst.common.component a child to `wb-module` called `dependent-module` **without** the attribute `archive-name`.)\r\n3. Run `gradle eclipseWtpComponent ` to get the exception.\r\n\r\nThe constructor WbDependentModule(Node) assumes that there is always an attribute `archive-name`, it seems.\r\n\r\n\r\n\r\n### Gradle version\r\n\r\n8.6\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["This issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.","I cannot reproduce this issue. Which type of file set should I try with? \n\n\n\n![Image](https:\/\/github.com\/gradle\/gradle\/assets\/419883\/732d764e-6ff0-4610-a0f0-3f45ca341bab)\n\n"],"labels":["a:bug","in:eclipse-plugin","in:ide"]},{"title":"[publishing] Add support for the new maven central publisher API","body":"### Expected Behavior\n\nSonatype is changing how artifacts are uploaded with new accounts. See https:\/\/central.sonatype.org\/register\/central-portal\/ and https:\/\/central.sonatype.org\/publish\/publish-portal-api\/\r\n\r\nThe new API uploads a single zip file containing a full publication in one go and as a result the current method doesn't work anymore. Would be nice to have built-in support for the new API in the `maven-publish` plugin.\r\n\r\n\n\n### Current Behavior (optional)\n\n_No response_\n\n### Context\n\nhttps:\/\/github.com\/vanniktech\/gradle-maven-publish-plugin\/issues\/722\r\n[KotlinLang slack discussion](https:\/\/slack-chats.kotlinlang.org\/t\/16407082\/which-gradle-plugin-should-i-use-to-publish-kmp-project-arti#044659f2-81f1-4ea6-b899-2c35b3cc06c2) ","comments":["This is something that we are discussing internally and probably will discuss with Sonatype.\r\n\r\nAn official plugin from Sonatype would be the best option since they own the protocol which is no longer based on Maven `deploy`.\r\n\r\nIf an official Gradle plugin adds that support, it would also make sense to have it _outside_ of the Gradle core plugins, since Sonatype could change their protocol anytime.","Not sure if this is still on the table for Sonatype but keeping a similar API would be quite handy:\r\n\r\n* no need to change every library using Gradle\/Maven out there\r\n* could parallelize the uploads and\/or upload from different machines (for KMP for an example)\r\n\r\nI get that the current implicit staging repos and the split repos are an issue but sounds like this could be fixed transparently for end users by wrapping the file uploads in creation\/close API calls? \r\n\r\nWhile I understand the rationale for a new plugin, adding yet another publishing plugin is going to add more complexity to an already complex landscape.\r\n\r\nAnyways, I understand this is ultimately not in Gradle hands but these were my 2 cents! Thanks for reading!"],"labels":["in:publishing-plugins","a:feature"]},{"title":"The `Exec` task has an unmodeled dependency on the `$PATH` environment variable","body":"### Current Behavior\n\nWhen configuring an `ExecSpec` or similar, it is not required to provide an actual _path_ to the executable; instead it is perfectly legal to supply an executable _name_, which will be resolved against the `$PATH` environment variable of the parent process. This resolution takes place in native code in the forked child process ([example](https:\/\/github.com\/openjdk\/jdk\/blob\/e5cb78cc88761cd27964e9fe77fc9c6f9073e888\/src\/java.base\/unix\/native\/libjava\/childproc.c#L277)), so it is completely invisible to Gradle and its instrumentation of methods like `System::getenv`. Changes to `$PATH` won't cause a configuration cache entry to be invalidated, for example:\r\n\r\n```\r\nConfiguration cache entry stored.\r\n[0] ws-BrazilGradle\/src\/SampleBrazilGradlePackage # PATH=\"$PATH:x\" .\/gradlew build --configuration-cache\r\nReusing configuration cache.\r\n\r\nBUILD SUCCESSFUL in 491ms\r\n24 actionable tasks: 4 executed, 20 up-to-date\r\nConfiguration cache entry reused.\r\n```\r\n\r\nThis bug _might_ be benign: it's not clear that a `$PATH` change would ever require the task graph itself to change; the `Exec` task is already ineligible for caching by default; and according to the documentation, the Gradle client relays its environment variables to the Gradle daemon, which should work as long as the Gradle daemon actually mutates its own environment variables (i.e. through native code) instead of just faking it by intercepting `System::getenv` calls.\r\n\r\nRegarding this last point: it's worth noting that the JDK's `ProcessBuilder` class internally does not go through `System::getenv` to get a copy of the environment (to use with the child process). It goes through a weird package-private class called `java.lang.ProcessEnvironment` which I doubt is instrumented by Gradle. This is worth looking into, to ensure that there really isn't a correctness issue here. I found this issue by inspection and I don't have a reproducer to share.\n\n### Expected Behavior\n\nThe `$PATH` dependency should ideally be replaced with a modeled `Exec` task input, and Gradle should resolve the path to the executable itself, before calling into the JDK to spawn the process. \n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\nI can provide a reproducer upon request. First, I want to confirm that this isn't already a known issue.\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["This issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n***\r\n\r\n@gradle\/bt-execution, please also see the question about providing a reproducer if the issue description is insufficient.","I agree that there is a dependency on the value of `PATH` which is unfortunate. However, even if we resolved the executable, it would not account for all inputs properly.\r\n\r\nHere are some of the potential options of what we could do at this point:\r\n\r\n1) Make the `Exec` task `@Untracked`. This would make it clear that Gradle cannot ensure that the same executable is used based on what `Exec` captures today (whatever \"same executable\" means exactly). If you wanted a cacheable\/incremental task that executes a local command, you'd need to create your own task, relying on `ProcessOperations.exec()` in the task action, capturing your own inputs.\r\n2) Capture the resolved absolute path of the executable; this would fix the reliance on `PATH` specifically. However, it would not ensure that, given different machines, or the same machines at different times, that the same executable would be used. It would also make the task be not cacheable across machines (unless they all had the same executable installed in the same location)\r\n3) Instead of capturing the path, capture the hash of the executable binary. This would allow cross-machine caching, but only as long as you were on the same platform. Also, it would assume that the executable binary contained everything relevant for turning the input into the output. Specifically, if the executable relied on dynamic libraries, those would not be captured.\r\n\r\nThe point is, what \"same executable\" means depends on your specific use case, and Gradle cannot provide a general solution here. The current state of things is misleading, suggesting that `Exec` has enough information where it clearly doesn't. Therefore the best and safest option would be 1)."],"labels":["a:bug","in:exec-tasks",":wave: team-triage"]},{"title":"\"The Java Library Plugin\" page does not document the `annotationProcessor` configuration","body":"### Issue type\n\nMissing information\n\n### Problem description\n\nAs far as I can tell, the entire \"Authoring JVM Builds\" section of the documentation fails to mention the `annotationProcessor` configuration. @ljacomet points out that it is mentioned in the [`java` plugin documentation](https:\/\/docs.gradle.org\/current\/userguide\/java_plugin.html#tab:configurations), but that that page is no longer in the table of contents.\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/current\/userguide\/java_library_plugin.html#sec:java_library_configurations_graph","comments":["This is a valid documentation issue.\r\n\r\n*** \r\n\r\nAnnotation processing should be documented as part of [building Java projects](https:\/\/docs.gradle.org\/current\/userguide\/building_java_projects.html)."],"labels":["a:documentation","in:annotation-processing"]},{"title":"Add Conspicuous Hint to Indicate Gradle Is Working under Offline Mode","body":"### Expected Behavior\r\n\r\nGradle has conspicuous hint about offline mode in Gradle output information.\r\n\r\n### Current Behavior (optional)\r\n\r\n## Reproduce\r\n1. clone repository which uses AGP `8.4.0-alpha09` and gradle `8.6-rc-1-bin` (e.g. [AGPUpgrade](https:\/\/github.com\/galiren\/AGPUpgrade)) and sync\r\n2. open it in Android Studio 2023.3.1 Canary 10 which is compatible with AGP `8.4.0-alpha10` and Gradle `8.6-bin`, the Android Gradle Plugin Upgrade Assistant will try to upgrade\r\n3. turn on Gradle offline mode\r\n4. run the assistant, which will give out errors like below. As AGP `8.4.0-alpha10` related artifacts are not existed in Gradle cache, the behavior is expteced though.\r\n  <details>\r\n\r\n  ```powershell\r\n\r\n  Plugin [id: 'com.android.application', version: '8.4.0-alpha10', apply: false] was not found in any of the following sources:\r\n  * Try:\r\n  > Run with --info or --debug option to get more log output.\r\n  > Run with --scan to get full insights.\r\n  > Get more help at https:\/\/help.gradle.org.\r\n  \r\n  * Exception is:\r\n  org.gradle.api.plugins.UnknownPluginException: Plugin [id: 'com.android.application', version: '8.4.0-alpha10', apply: false] was not found in any of the following sources:\r\n  \r\n  - Gradle Core Plugins (plugin is not in 'org.gradle' namespace)\r\n  - Plugin Repositories (could not resolve plugin artifact 'com.android.application:com.android.application.gradle.plugin:8.4.0-alpha10')\r\n    Searched in the following repositories:\r\n      Google\r\n      MavenRepo\r\n      Gradle Central Plugin Repository\r\n\t  at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.resolveToFoundResult(DefaultPluginRequestApplicator.java:274)\r\n\t  at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.lambda$resolvePluginRequests$3(DefaultPluginRequestApplicator.java:199)\r\n\t  at org.gradle.util.internal.CollectionUtils.collect(CollectionUtils.java:212)\r\n\t  at org.gradle.util.internal.CollectionUtils.collect(CollectionUtils.java:206)\r\n\t  at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.resolvePluginRequests(DefaultPluginRequestApplicator.java:197)\r\n\t  at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.resolvePluginRequests(DefaultPluginRequestApplicator.java:113)\r\n\t  at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugins(DefaultPluginRequestApplicator.java:102)\r\n\t  at org.gradle.kotlin.dsl.provider.PluginRequestsHandler.handle(PluginRequestsHandler.kt:44)\r\n\t  at org.gradle.kotlin.dsl.provider.StandardKotlinScriptEvaluator$InterpreterHost.applyPluginsTo(KotlinScriptEvaluator.kt:217)\r\n\t  at org.gradle.kotlin.dsl.execution.Interpreter$ProgramHost.applyPluginsTo(Interpreter.kt:385)\r\n\t  at Program.execute(Unknown Source)\r\n\t  at org.gradle.kotlin.dsl.execution.Interpreter$ProgramHost.eval(Interpreter.kt:514)\r\n\t  at org.gradle.kotlin.dsl.execution.Interpreter.eval(Interpreter.kt:213)\r\n\t  at org.gradle.kotlin.dsl.provider.StandardKotlinScriptEvaluator.evaluate(KotlinScriptEvaluator.kt:123)\r\n\t  at org.gradle.kotlin.dsl.provider.KotlinScriptPluginFactory$create$1.invoke(KotlinScriptPluginFactory.kt:51)\r\n\t  at org.gradle.kotlin.dsl.provider.KotlinScriptPluginFactory$create$1.invoke(KotlinScriptPluginFactory.kt:48)\r\n\t  at org.gradle.kotlin.dsl.provider.KotlinScriptPlugin.apply(KotlinScriptPlugin.kt:35)\r\n\t  at org.gradle.configuration.BuildOperationScriptPlugin$1.run(BuildOperationScriptPlugin.java:68)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n\t  at org.gradle.configuration.BuildOperationScriptPlugin.lambda$apply$0(BuildOperationScriptPlugin.java:65)\r\n\t  at org.gradle.internal.code.DefaultUserCodeApplicationContext.apply(DefaultUserCodeApplicationContext.java:43)\r\n\t  at org.gradle.configuration.BuildOperationScriptPlugin.apply(BuildOperationScriptPlugin.java:65)\r\n\t  at org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.lambda$applyToMutableState$1(DefaultProjectStateRegistry.java:407)\r\n\t  at org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.fromMutableState(DefaultProjectStateRegistry.java:425)\r\n\t  at org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.applyToMutableState(DefaultProjectStateRegistry.java:406)\r\n\t  at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:46)\r\n\t  at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:27)\r\n\t  at org.gradle.configuration.project.ConfigureActionsProjectEvaluator.evaluate(ConfigureActionsProjectEvaluator.java:35)\r\n\t  at org.gradle.configuration.project.LifecycleProjectEvaluator$EvaluateProject.lambda$run$0(LifecycleProjectEvaluator.java:109)\r\n\t  at org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.lambda$applyToMutableState$1(DefaultProjectStateRegistry.java:407)\r\n\t  at org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.lambda$fromMutableState$2(DefaultProjectStateRegistry.java:430)\r\n\t  at org.gradle.internal.work.DefaultWorkerLeaseService.withReplacedLocks(DefaultWorkerLeaseService.java:360)\r\n\t  at org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.fromMutableState(DefaultProjectStateRegistry.java:430)\r\n\t  at org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.applyToMutableState(DefaultProjectStateRegistry.java:406)\r\n\t  at org.gradle.configuration.project.LifecycleProjectEvaluator$EvaluateProject.run(LifecycleProjectEvaluator.java:100)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n\t  at org.gradle.configuration.project.LifecycleProjectEvaluator.evaluate(LifecycleProjectEvaluator.java:72)\r\n\t  at org.gradle.api.internal.project.DefaultProject.evaluate(DefaultProject.java:789)\r\n\t  at org.gradle.api.internal.project.DefaultProject.evaluate(DefaultProject.java:155)\r\n\t  at org.gradle.api.internal.project.ProjectLifecycleController.lambda$ensureSelfConfigured$2(ProjectLifecycleController.java:84)\r\n\t  at org.gradle.internal.model.StateTransitionController.lambda$doTransition$14(StateTransitionController.java:255)\r\n\t  at org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:266)\r\n\t  at org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:254)\r\n\t  at org.gradle.internal.model.StateTransitionController.lambda$maybeTransitionIfNotCurrentlyTransitioning$10(StateTransitionController.java:199)\r\n\t  at org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:34)\r\n\t  at org.gradle.internal.model.StateTransitionController.maybeTransitionIfNotCurrentlyTransitioning(StateTransitionController.java:195)\r\n\t  at org.gradle.api.internal.project.ProjectLifecycleController.ensureSelfConfigured(ProjectLifecycleController.java:84)\r\n\t  at org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.ensureConfigured(DefaultProjectStateRegistry.java:381)\r\n\t  at org.gradle.execution.TaskPathProjectEvaluator.configure(TaskPathProjectEvaluator.java:34)\r\n\t  at org.gradle.execution.TaskPathProjectEvaluator.configureHierarchy(TaskPathProjectEvaluator.java:48)\r\n\t  at org.gradle.configuration.DefaultProjectsPreparer.prepareProjects(DefaultProjectsPreparer.java:42)\r\n\t  at org.gradle.configuration.BuildTreePreparingProjectsPreparer.prepareProjects(BuildTreePreparingProjectsPreparer.java:65)\r\n\t  at org.gradle.configuration.BuildOperationFiringProjectsPreparer$ConfigureBuild.run(BuildOperationFiringProjectsPreparer.java:52)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n\t  at org.gradle.configuration.BuildOperationFiringProjectsPreparer.prepareProjects(BuildOperationFiringProjectsPreparer.java:40)\r\n\t  at org.gradle.initialization.VintageBuildModelController.lambda$prepareProjects$2(VintageBuildModelController.java:84)\r\n\t  at org.gradle.internal.model.StateTransitionController.lambda$doTransition$14(StateTransitionController.java:255)\r\n\t  at org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:266)\r\n\t  at org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:254)\r\n\t  at org.gradle.internal.model.StateTransitionController.lambda$transitionIfNotPreviously$11(StateTransitionController.java:213)\r\n\t  at org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:34)\r\n\t  at org.gradle.internal.model.StateTransitionController.transitionIfNotPreviously(StateTransitionController.java:209)\r\n\t  at org.gradle.initialization.VintageBuildModelController.prepareProjects(VintageBuildModelController.java:84)\r\n\t  at org.gradle.initialization.VintageBuildModelController.getConfiguredModel(VintageBuildModelController.java:64)\r\n\t  at org.gradle.internal.build.DefaultBuildLifecycleController.lambda$withProjectsConfigured$1(DefaultBuildLifecycleController.java:133)\r\n\t  at org.gradle.internal.model.StateTransitionController.lambda$notInState$3(StateTransitionController.java:132)\r\n\t  at org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:44)\r\n\t  at org.gradle.internal.model.StateTransitionController.notInState(StateTransitionController.java:128)\r\n\t  at org.gradle.internal.build.DefaultBuildLifecycleController.withProjectsConfigured(DefaultBuildLifecycleController.java:133)\r\n\t  at org.gradle.internal.build.DefaultBuildToolingModelController.locateBuilderForTarget(DefaultBuildToolingModelController.java:58)\r\n\t  at org.gradle.internal.buildtree.DefaultBuildTreeModelCreator$DefaultBuildTreeModelController.lambda$locateBuilderForTarget$0(DefaultBuildTreeModelCreator.java:64)\r\n\t  at org.gradle.internal.build.DefaultBuildLifecycleController.withToolingModels(DefaultBuildLifecycleController.java:327)\r\n\t  at org.gradle.internal.build.AbstractBuildState.withToolingModels(AbstractBuildState.java:146)\r\n\t  at org.gradle.internal.buildtree.DefaultBuildTreeModelCreator$DefaultBuildTreeModelController.locateBuilderForTarget(DefaultBuildTreeModelCreator.java:64)\r\n\t  at org.gradle.internal.buildtree.DefaultBuildTreeModelCreator$DefaultBuildTreeModelController.locateBuilderForDefaultTarget(DefaultBuildTreeModelCreator.java:59)\r\n\t  at org.gradle.tooling.internal.provider.runner.DefaultBuildController.getTarget(DefaultBuildController.java:136)\r\n\t  at org.gradle.tooling.internal.provider.runner.DefaultBuildController.getModel(DefaultBuildController.java:107)\r\n\t  at org.gradle.tooling.internal.consumer.connection.ParameterAwareBuildControllerAdapter.getModel(ParameterAwareBuildControllerAdapter.java:39)\r\n\t  at org.gradle.tooling.internal.consumer.connection.UnparameterizedBuildController.getModel(UnparameterizedBuildController.java:113)\r\n\t  at org.gradle.tooling.internal.consumer.connection.NestedActionAwareBuildControllerAdapter.getModel(NestedActionAwareBuildControllerAdapter.java:31)\r\n\t  at org.gradle.tooling.internal.consumer.connection.UnparameterizedBuildController.findModel(UnparameterizedBuildController.java:97)\r\n\t  at org.gradle.tooling.internal.consumer.connection.NestedActionAwareBuildControllerAdapter.findModel(NestedActionAwareBuildControllerAdapter.java:31)\r\n\t  at org.gradle.tooling.internal.consumer.connection.UnparameterizedBuildController.findModel(UnparameterizedBuildController.java:81)\r\n\t  at org.gradle.tooling.internal.consumer.connection.NestedActionAwareBuildControllerAdapter.findModel(NestedActionAwareBuildControllerAdapter.java:31)\r\n\t  at org.gradle.tooling.internal.consumer.connection.UnparameterizedBuildController.findModel(UnparameterizedBuildController.java:66)\r\n\t  at org.gradle.tooling.internal.consumer.connection.NestedActionAwareBuildControllerAdapter.findModel(NestedActionAwareBuildControllerAdapter.java:31)\r\n\t  at org.jetbrains.plugins.gradle.model.ProjectImportAction.doExecute(ProjectImportAction.java:117)\r\n\t  at org.jetbrains.plugins.gradle.model.ProjectImportAction.execute(ProjectImportAction.java:91)\r\n\t  at org.jetbrains.plugins.gradle.model.ProjectImportAction.execute(ProjectImportAction.java:39)\r\n\t  at org.gradle.tooling.internal.consumer.connection.InternalBuildActionAdapter.execute(InternalBuildActionAdapter.java:64)\r\n\t  at org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner$ActionAdapter.runAction(AbstractClientProvidedBuildActionRunner.java:131)\r\n\t  at org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner$ActionAdapter.beforeTasks(AbstractClientProvidedBuildActionRunner.java:99)\r\n\t  at org.gradle.internal.buildtree.DefaultBuildTreeModelCreator.beforeTasks(DefaultBuildTreeModelCreator.java:43)\r\n\t  at org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.lambda$fromBuildModel$2(DefaultBuildTreeLifecycleController.java:82)\r\n\t  at org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.lambda$runBuild$4(DefaultBuildTreeLifecycleController.java:119)\r\n\t  at org.gradle.internal.model.StateTransitionController.lambda$transition$6(StateTransitionController.java:169)\r\n\t  at org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:266)\r\n\t  at org.gradle.internal.model.StateTransitionController.lambda$transition$7(StateTransitionController.java:169)\r\n\t  at org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:44)\r\n\t  at org.gradle.internal.model.StateTransitionController.transition(StateTransitionController.java:169)\r\n\t  at org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.runBuild(DefaultBuildTreeLifecycleController.java:116)\r\n\t  at org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.fromBuildModel(DefaultBuildTreeLifecycleController.java:81)\r\n\t  at org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner.runClientAction(AbstractClientProvidedBuildActionRunner.java:43)\r\n\t  at org.gradle.tooling.internal.provider.runner.ClientProvidedPhasedActionRunner.run(ClientProvidedPhasedActionRunner.java:53)\r\n\t  at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)\r\n\t  at org.gradle.internal.buildtree.ProblemReportingBuildActionRunner.run(ProblemReportingBuildActionRunner.java:49)\r\n\t  at org.gradle.launcher.exec.BuildOutcomeReportingBuildActionRunner.run(BuildOutcomeReportingBuildActionRunner.java:65)\r\n\t  at org.gradle.tooling.internal.provider.FileSystemWatchingBuildActionRunner.run(FileSystemWatchingBuildActionRunner.java:140)\r\n\t  at org.gradle.launcher.exec.BuildCompletionNotifyingBuildActionRunner.run(BuildCompletionNotifyingBuildActionRunner.java:41)\r\n\t  at org.gradle.launcher.exec.RootBuildLifecycleBuildActionExecutor.lambda$execute$0(RootBuildLifecycleBuildActionExecutor.java:40)\r\n\t  at org.gradle.composite.internal.DefaultRootBuildState.run(DefaultRootBuildState.java:123)\r\n\t  at org.gradle.launcher.exec.RootBuildLifecycleBuildActionExecutor.execute(RootBuildLifecycleBuildActionExecutor.java:40)\r\n\t  at org.gradle.internal.buildtree.InitDeprecationLoggingActionExecutor.execute(InitDeprecationLoggingActionExecutor.java:62)\r\n\t  at org.gradle.internal.buildtree.InitProblems.execute(InitProblems.java:38)\r\n\t  at org.gradle.internal.buildtree.DefaultBuildTreeContext.execute(DefaultBuildTreeContext.java:40)\r\n\t  at org.gradle.launcher.exec.BuildTreeLifecycleBuildActionExecutor.lambda$execute$0(BuildTreeLifecycleBuildActionExecutor.java:71)\r\n\t  at org.gradle.internal.buildtree.BuildTreeState.run(BuildTreeState.java:60)\r\n\t  at org.gradle.launcher.exec.BuildTreeLifecycleBuildActionExecutor.execute(BuildTreeLifecycleBuildActionExecutor.java:71)\r\n\t  at org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor$3.call(RunAsBuildOperationBuildActionExecutor.java:61)\r\n\t  at org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor$3.call(RunAsBuildOperationBuildActionExecutor.java:57)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n\t  at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n\t  at org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor.execute(RunAsBuildOperationBuildActionExecutor.java:57)\r\n\t  at org.gradle.launcher.exec.RunAsWorkerThreadBuildActionExecutor.lambda$execute$0(RunAsWorkerThreadBuildActionExecutor.java:36)\r\n\t  at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:264)\r\n\t  at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:128)\r\n\t  at org.gradle.launcher.exec.RunAsWorkerThreadBuildActionExecutor.execute(RunAsWorkerThreadBuildActionExecutor.java:36)\r\n\t  at org.gradle.tooling.internal.provider.continuous.ContinuousBuildActionExecutor.execute(ContinuousBuildActionExecutor.java:110)\r\n\t  at org.gradle.tooling.internal.provider.SubscribableBuildActionExecutor.execute(SubscribableBuildActionExecutor.java:64)\r\n\t  at org.gradle.internal.session.DefaultBuildSessionContext.execute(DefaultBuildSessionContext.java:46)\r\n\t  at org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter$ActionImpl.apply(BuildSessionLifecycleBuildActionExecuter.java:92)\r\n\t  at org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter$ActionImpl.apply(BuildSessionLifecycleBuildActionExecuter.java:80)\r\n\t  at org.gradle.internal.session.BuildSessionState.run(BuildSessionState.java:69)\r\n\t  at org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter.execute(BuildSessionLifecycleBuildActionExecuter.java:62)\r\n\t  at org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter.execute(BuildSessionLifecycleBuildActionExecuter.java:41)\r\n\t  at org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:64)\r\n\t  at org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:32)\r\n\t  at org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:51)\r\n\t  at org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:39)\r\n\t  at org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:47)\r\n\t  at org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:31)\r\n\t  at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:65)\r\n\t  at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\t  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\t  at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:39)\r\n\t  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\t  at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:29)\r\n\t  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\t  at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:35)\r\n\t  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\t  at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.create(ForwardClientInput.java:78)\r\n\t  at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.create(ForwardClientInput.java:75)\r\n\t  at org.gradle.util.internal.Swapper.swap(Swapper.java:38)\r\n\t  at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:75)\r\n\t  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\t  at org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:64)\r\n\t  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\t  at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:63)\r\n\t  at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\t  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\t  at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:84)\r\n\t  at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\t  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\t  at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:52)\r\n\t  at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:297)\r\n\t  at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n\t  at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)\r\n  ```\r\n  <\/details>\r\n\r\n### Context\r\n\r\nI am not sure why Android Studio turns on offline mode, and I didn't click the `toggle offline mode` button, too.\r\n\r\nMeanwhile, I think the information that Gradle provides under offline mode is similar to that under *online mode*, namely:\r\n\r\n## offline mode, upgrade of AGP\r\n```powershell\r\n  Plugin [id: 'com.android.application', version: '8.4.0-alpha10', apply: false] was not found in any of the following sources:\r\n  * Try:\r\n  > Run with --info or --debug option to get more log output.\r\n  > Run with --scan to get full insights.\r\n  > Get more help at https:\/\/help.gradle.org.\r\n\r\n  * Exception is:\r\n  org.gradle.api.plugins.UnknownPluginException: Plugin [id: 'com.android.application', version: '8.4.0-alpha10', apply: false] was not found in any of the following sources:\r\n  \r\n  - Gradle Core Plugins (plugin is not in 'org.gradle' namespace)\r\n  - Plugin Repositories (could not resolve plugin artifact 'com.android.application:com.android.application.gradle.plugin:8.4.0-alpha10')\r\n    Searched in the following repositories:\r\n      Google\r\n      MavenRepo\r\n      Gradle Central Plugin Repository\r\n```\r\n\r\n## online mode, upgrade of AGP to an unexisted version `8.4.0-alpha19`\r\n\r\n```powershell\r\n  Plugin [id: 'com.android.application', version: '8.4.0-alpha19', apply: false] was not found in any of the following sources:\r\n  * Try:\r\n  > Run with --info or --debug option to get more log output.\r\n  > Run with --scan to get full insights.\r\n  > Get more help at https:\/\/help.gradle.org.\r\n\r\norg.gradle.api.plugins.UnknownPluginException: Plugin [id: 'com.android.application', version: '8.4.0-alpha19', apply: false] was not found in any of the following sources:\r\n\r\n- Gradle Core Plugins (plugin is not in 'org.gradle' namespace)\r\n- Plugin Repositories (could not resolve plugin artifact 'com.android.application:com.android.application.gradle.plugin:8.4.0-alpha19')\r\n  Searched in the following repositories:\r\n    Google\r\n    MavenRepo\r\n    ...\r\n```\r\n\r\n\r\nI believe users would benefit from a clear indication in the Gradle output about offline mode when they encounter issues that could potentially be caused by it.","comments":["This feature request is in the backlog of the relevant team and is prioritized by them.\r\n\r\n***\r\n\r\nThere indeed should be a clear indication that offline mode was turned on when dependencies failed to resolve. The two outputs provided in the context should be different to clarify that."],"labels":["a:feature","in:dependency-remoting","re:comprehensibility"]},{"title":"Add assertion for holding project lock when visiting configurations","body":"<!--- The issue this PR addresses -->\r\n<!-- Fixes #? -->\r\n\r\n### Context\r\n<!--- Why do you believe many users will benefit from this change? -->\r\n<!--- Link to relevant issues or forum discussions here -->\r\n\r\n### Contributor Checklist\r\n- [ ] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md).\r\n- [ ] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [ ] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [ ] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team.\r\n- [ ] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective.\r\n- [ ] Provide unit tests (under `<subproject>\/src\/test`) to verify logic.\r\n- [ ] Update User Guide, DSL Reference, and Javadoc for public-facing changes.\r\n- [ ] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`.\r\n- [ ] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["@bot-gradle test this","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"33b496aaa819d0675a34f86bd6404b79e2aa84eb\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=33b496aaa819d0675a34f86bd6404b79e2aa84eb) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=78082108)","\ud83e\udd77 **Code experts: tresat, jvandort** \n \ntresat, jvandort have most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \njvandort, adammurdoch have most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/DefaultDependencyManagementServices.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | FEB | 12 additions & 11 deletions |  \n| JAN | 13 additions & 11 deletions |39 additions & 44 deletions | \n| DEC |   |1 additions & 31 deletions | \n| NOV | 5 additions & 4 deletions |  \n| OCT | 677 additions & 5 deletions |  \n| SEP |   |4 additions & 2 deletions | \n \n\nKnowledge based on git-blame: \n adammurdoch: 20% \njvandort: 13% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/configurations\/DefaultConfigurationContainer.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | FEB |   |  \n| JAN |   |  \n| DEC |   |1 additions & 1 deletions | \n| NOV |   |  \n| OCT | 389 additions & 0 deletions |  \n| SEP |   |  \n \n\nKnowledge based on git-blame: \n jvandort: 55% \nadammurdoch: 10% \n\n`platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/ivyservice\/moduleconverter\/dependencies\/DefaultLocalConfigurationMetadataBuilder.java` \n \n\nActivity based on git-commit: \n\n |  | tresat | jvandort| \n | --- | --- | --- | \n | FEB |   |76 additions & 74 deletions | \n| JAN |   |  \n| DEC | 1 additions & 2 deletions |  \n| NOV |   |11 additions & 9 deletions | \n| OCT | 377 additions & 0 deletions |  \n| SEP |   |  \n \n\nKnowledge based on git-blame: \n jvandort: 76% \nadammurdoch: 17% \n\n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>"],"labels":["1 min review","platform:software"]},{"title":"Add missing annotations to methods that take a `Closure` where applicable","body":"### Expected Behavior\n\nSome methods in Gradle's API take a `Closure` but are missing both `@DelegatesTo` and `@ClosureParams`. As Groovy prioritises `Closure`s over other types, this results in a poor IDE experience and prevents using these methods in `@TypeChecked` and `@CompileStatic` without workarounds.\r\n\r\nThe expected behaviour is for these methods to be annotated appropriately, have parameter and delegate hints and be compliable without needing workarounds in `@TypeChecked`\/`@CompileStatic` Gradle plugins written in Groovy.\n\n### Current Behavior (optional)\n\nCurrently in Gradle 8.6, the lack of these annotations means that worst case, the IDE treats the method similar to a Java `Runnable` and best case, needs special handling in the IDE itself to manually determine the delegate and parameter types.\r\n\r\nFor example, IntelliJ has special handling for the `repositories {}` block in the build.gradle Groovy DSL to provide a better experience, however attempting to use that same block inside a Gradle plugin written in Groovy will fail to surface any suggestions and cause a compile error when using `@TypeChecked`\/`@CompileStatic`.\r\n\r\nIn build.gradle:\r\n<img width=\"423\" alt=\"image\" src=\"https:\/\/github.com\/gradle\/gradle\/assets\/3158390\/1e190a41-9b2d-48fb-8ed4-51532c952f31\">\r\n\r\nSame code in a Gradle plugin written in Groovy:\r\n<img width=\"403\" alt=\"image\" src=\"https:\/\/github.com\/gradle\/gradle\/assets\/3158390\/5d9fe4a8-09be-475d-99cf-86e341408adc\">\r\n\r\nAlso note the lack of a closure parameter hint in both examples - it should show as `repositories { RepositoryHandler it ->`.\n\n### Context\n\nThis issue is related to #27077, which has a more detailed explainer of the benefits of properly annotating `Closure`s. While that issue focuses on adding missing `@ClosureParams` annotations to methods that already have a `@DelegatesTo`, this issue is for methods that are missing both `@DelegatesTo` and `@ClosureParams`.","comments":["This feature request is in the backlog of the relevant team and is prioritized by them.","This is not a duplicate. The referenced issue applies to closures that are already partially annotated, while this issue applies to closures that have no annotations at all","That's fair, although we are planning to fix it in a general way, that will fix your issue as well as  https:\/\/github.com\/gradle\/gradle\/issues\/27077:\r\n- add _all_ missing  `@DelegatesTo` and `@ClosureParams` annotations to the Gradle sources\r\n- add the same annotations to the runtime-generated classes.\r\n\r\nI'll remove my comment above."],"labels":["a:feature","in:groovy-dsl","in:ide"]},{"title":"DefaultTask.dependsOn (setDependsOn) has a broken link to accepted parameter types","body":"### Issue type\n\nMissing information\n\n### Problem description\n\nThe description of [DefaultTask.dependsOn](https:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/DefaultTask.html#dependsOn-java.lang.Object...-) or [DefaultTask.setDependsOn](https:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/DefaultTask.html#setDependsOn-java.lang.Iterable-) has the following link for the possible accepted dependsOn types:\r\n```\r\nhttps:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/DefaultTask.html#dependencies\r\n```\r\n\r\nThe problem is that this link leads nowhere.\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/DefaultTask.html","comments":["It looks like the correct link is:\r\n```\r\nhttps:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/Task.html#dependencies\r\n```","This is a valid documentation issue.\r\n\r\n***\r\n\r\nThis is caused by `DefaultTask` inheriting its javadoc from `Task` where the link [works fine](https:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/Task.html#dependsOn-java.lang.Object...-)\r\n\r\nOne fix could be to have that documentation entry live outside of Javadoc and then link there."],"labels":["a:documentation","in:writing-tasks"]},{"title":"grade init built in Maven converter uses keywords in Kotlin scripts when creating version catalog","body":"### Current Behavior\n\nWhen using gradle init to convert a Maven project to Gradle and dependencies contain Kotlin keywords they are used in the generated version catalog causing the build to fail due to incorrect syntax in the `build.gradle.kts` file.\r\n\r\n```\r\n\r\n* Where:\r\nBuild file '\/Users\/xyz\/abc\/sample\/build.gradle.kts' line: 27\r\n\r\n* What went wrong:\r\nScript compilation errors:\r\n\r\n  Line 27:     api(libs.my.library.string.interface)\r\n                                                                            ^ Name expected\r\n\r\n  Line 32:     testImplementation(libs.org.jetbrains.kotlin.kotlin.test)\r\n                                                                        ^ Expecting ')'\r\n\r\n2 errors\r\n```\n\n### Expected Behavior\n\nIf maven dependencies contain Kotlin keywords they are not used in the generated version catalog. i.e. `interface`\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\n1. Have a Java Maven project\r\n2. One of the POM dependency names should end `-interface`. i.e.: \r\n\r\n```\r\n<artifactId>string-interface<\/artifactId>\r\n```\r\n3. Use `gradle init`\r\n4. Chose to convert from Maven, chose Kotlin, say \"no\" to using new features\r\n5. Run .\/gradlew in newly created Gradle project\r\n\r\nObserve the error:\r\n```\r\n\r\n* Where:\r\nBuild file '\/Users\/xyz\/abc\/sample\/build.gradle.kts' line: 27\r\n\r\n* What went wrong:\r\nScript compilation errors:\r\n\r\n  Line 27:     api(libs.my.library.string.interface)\r\n                                                                            ^ Name expected\r\n\r\n  Line 32:     testImplementation(libs.org.jetbrains.kotlin.kotlin.test)\r\n                                                                        ^ Expecting ')'\r\n\r\n2 errors\r\n```\r\n\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["The issue is in the backlog of the relevant team and is prioritized by them."],"labels":["a:bug","in:dependency-version-catalog","has:reproducer"]},{"title":"Prototype custom console rendering for Java compiler problems","body":null,"comments":[],"labels":["in:console","a:investigation","in:problems"]},{"title":"Convenient and efficient way to add a file from plugin classpath to a copyspec","body":"### Expected Behavior\r\n\r\nI have a plugin that configures a `War` task.\r\nThis `War` task should contain an `index.html`.\r\nI have a template for that file in my plugin resources.\r\nSo now I want to include this file from the plugin classpath to a copyspec and use `expand` on it.\r\n\r\nI tried it like \r\n```kts\r\nfrom(project.resources.text.fromUri(MyPlugin::class.java.getResource(\"index.html\"))) {\r\n    expand(\"placeholder\" to object {\r\n        override fun toString() = stringProviderForPlaceholderValue.get()\r\n    })\r\n    rename { \"index.html\" }\r\n}\r\n```\r\n\r\nThis works, but has the drawback, that the task is never up-to-date as the actual file from the text resource has a different name on each invocation.\r\n\r\nTo mitigate the problem I now have a separate task that unpacks the file to disk and then use that tasks output in the copyspec.\r\n\r\nBut it would be nice if there were some convenient built-in alternative for this.\r\n\r\n### Context\r\n\r\nGradle 7.6.4","comments":["Sorry that you're having trouble with Gradle!\r\n\r\nCan you try Gradle 8.6? \r\nAlso, can you please give us more details on \"the actual file from the text resource has a different name on each invocation\"? How does it change?\r\n\r\nLoosely related:\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/1150","> Can you try Gradle 8.6?\r\n\r\nSure, if you tell me what was added for this.\r\nI don't remember any addition for this.\r\n\r\n> Also, can you please give us more details on \"the actual file from the text resource has a different name on each invocation\"? How does it change?\r\n\r\nWith Gradle 8.6:\r\n\r\n```plain\r\nTask ':foo' is not up-to-date because:\r\n  Input property 'rootSpec$1' file D:\\Dateien\\.gradle\\.tmp\\resource\\wrappedInternalText14348870800785800869.txt has been removed.\r\n  Input property 'rootSpec$1' file D:\\Dateien\\.gradle\\.tmp\\resource\\wrappedInternalText15240243424791876655.txt has been added.\r\n```","Here the complete test build for the last comment:\r\n```plain\r\n.\/bar\/build.gradle.kts\r\nplugins {\r\n    `kotlin-dsl`\r\n}\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ngradlePlugin {\r\n    plugins {\r\n        val foo by registering {\r\n            id = \"foo.foo\"\r\n            implementationClass = \"foo.Foo\"\r\n        }\r\n    }\r\n}\r\n\r\n.\/bar\/settings.gradle.kts\r\nrootProject.name = \"bar\"\r\n\r\n.\/bar\/src\/main\/kotlin\/foo\/Foo.kt\r\npackage foo\r\n\r\nimport org.gradle.api.Plugin\r\nimport org.gradle.api.Project\r\nimport org.gradle.api.tasks.Sync\r\nimport org.gradle.kotlin.dsl.registering\r\nimport org.gradle.kotlin.dsl.getValue\r\nimport org.gradle.kotlin.dsl.provideDelegate\r\n\r\nopen class Foo : Plugin<Project> {\r\n    override fun apply(target: Project) {\r\n        val foo by target.tasks.registering(Sync::class) {\r\n            destinationDir = target.layout.buildDirectory.get().asFile\r\n            from(target.resources.text.fromUri(Foo::class.java.getResource(\"foo.txt\")))\r\n        }\r\n    }\r\n}\r\n\r\n.\/bar\/src\/main\/resources\/foo\/foo.txt\r\n\r\n.\/build.gradle.kts\r\nplugins {\r\n    id(\"foo.foo\")\r\n}\r\n\r\n.\/settings.gradle.kts\r\npluginManagement {\r\n    includeBuild(\"bar\")\r\n}\r\n\r\nrootProject.name = \"foo\"\r\n```","This feature request is in the backlog of the relevant team and is prioritized by them.\r\n ***\r\n\r\n> Sure, if you tell me what was added for this.\r\n\r\nWithout the explicit error, we thought this was transform related. That was wrong."],"labels":["a:feature","in:resource-handler"]},{"title":"Incorrect configuration cache input when reading a file in a `BuildService` and applying a plugin from a composite build","body":"### Current Behavior\n\nFor a multi-module project that applies a plugin which is included from a composite build, a file accessed by a `BuildService` inside `OperationCompletionListener.onFinish` is included in configuration cache inputs. As a result, configuration cache cannot be reused when this file changes, even though the file is not accessed during the configuration phase.\n\n### Expected Behavior\n\nConfiguration cache should be reused even if the file, accessed in the execution phase, is changed.\n\n### Context (optional)\n\nI am developing a Gradle plugin that needs to read a file on task execution completion, which it does by implementing `OperationCompletionListener.onFinish` in a `BuildService`. I normally test this plugin by including it via composite build in another project, but this issue means that such an approach does not produce the same results as usage in a standalone project would.\n\n### Steps to Reproduce\n\n[Reproduction in GH action](https:\/\/github.com\/DennisTsar\/gradle-buildservice-issue\/actions\/runs\/7893808738\/job\/21543185555#step:4:1)\r\n- Clone https:\/\/github.com\/DennisTsar\/gradle-buildservice-issue\r\n- Run `.\/gradlew issue:help --configuration-cache` twice & see that configuration cache is reused the second time\r\n- Create an empty file `issue\/test.txt`\r\n- Run `.\/gradlew issue:help --configuration-cache` & see that configuration cache cannot be reused\r\n\r\nWhile investigating, I noticed that the alphabetical ordering of the project's module names seems to affect the issue. For example, if the `z-test` module in the reproducer is replaced with the otherwise-identical module `a-test`, configuration cache is correctly reused ([action run](https:\/\/github.com\/DennisTsar\/gradle-buildservice-issue\/actions\/runs\/7893808738\/job\/21543185555#step:6:1)). Additionally, if the problematic module also applies the plugin from the composite build, configuration cache is also correctly reused  ([action run](https:\/\/github.com\/DennisTsar\/gradle-buildservice-issue\/actions\/runs\/7893808733\/job\/21543185537#step:5:1)).\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n***\r\n\r\nThe fact that the configuration cache tracks the file is caused by you using it as a parameter for your BuildService. Gradle needs to know it needs to recompute the parameters for build services.\r\n\r\n***\r\n\r\n@gradle\/bt-configuration is there a pattern that allows the user to use that file without tracking? Can we improve our documentation in that area?\r\n","The file is not being used directly as a parameter, as the parameter is of type `Provider<() -> Boolean>`. This file is not considered to be an input when:\r\n- no composite build plugin is applied\r\n- the `issue` module also applies the composite build plugin\r\n- the `issue` module is alphabetically the last module\r\n\r\nI've also realized this issue is not unique to build services:\r\n```kt\r\nval readFileFun = DefaultProvider {\r\n    val testFile = layout.projectDirectory.file(\"test.txt\").asFile\r\n    { testFile.exists() }\r\n}\r\n\r\nabstract class MyTask : DefaultTask() {\r\n    @get:Input\r\n    abstract val readFileFunProp: Property<() -> Boolean>\r\n\r\n    @TaskAction\r\n    fun run() {\r\n        println(\"file exists: ${readFileFunProp.get().invoke()}\")\r\n    }\r\n}\r\n\r\ntasks.register<MyTask>(\"myTask\") {\r\n    readFileFunProp.set(readFileFun)\r\n}\r\n```\r\nexhibits the same behavior. The file is not tracked by configuration cache except in the specific setup used by the reproducer project.","The reproducer is behaving is intended. The build service is registered during the configuration of the `issues` project and, that registration happens before the configuration of `z-test`, which uses the plugin from the included build. The included `gradle\/plugins` build is then built on-demand to satisfy the plugin request in `z-test`. This causes the build service to be notified as tasks from the included build finish execution, still at configuration time from the main build perspective.\n\nA [ValueSource](https:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/provider\/ValueSource.html) can be used to hide the file access from Gradle in scenarios like this:\n\n> A value source implementation is exempt from the automatic detection of work graph cache inputs. For example, if the [obtain()](https:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/provider\/ValueSource.html#obtain--) method calls System.getenv(\"FOO\") then changes to the FOO environment variable only invalidate the cache if the value returned by the obtain() method itself changes. The same applies to reading files or system properties. Starting an external process with a standard API (for example, java.lang.ProcessBuilder) is also allowed.\n"],"labels":["in:configuration-cache","in:build-services","a:documentation"]},{"title":"Dark mode: Black arrows & text on a black background in a diagram","body":"### Issue type\n\nStyling or Accessibility\n\n### Problem description\n\nBlack arrows & text on a black background in `Figure 1. Configurations use declared dependencies for specific purposes`\r\n\r\n\r\n<img width=\"1009\" alt=\"image\" src=\"https:\/\/github.com\/gradle\/gradle\/assets\/897017\/6efe69ee-2f3a-4dc0-9796-bc98ae985d80\">\r\n\r\nAlso https:\/\/docs.gradle.org\/nightly\/userguide\/variant_model.html#maven_component_model\r\n\r\n<img width=\"546\" alt=\"image\" src=\"https:\/\/github.com\/gradle\/gradle\/assets\/897017\/84136a37-1f0c-44ae-ab0a-6857b1e05ecb\">\r\n\r\n\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/nightly\/userguide\/declaring_dependencies.html","comments":["Thank you for your interest in Gradle!\r\n\r\nThis is a valid documentation issue.\r\n","I'm currently going section by section and updating the images to work for both dark and light mode. This will take some time.","hi @lkasso \r\n\r\nThe images on https:\/\/docs.gradle.org\/current\/userguide\/working_with_files.html are completely invisible. \r\n\r\n> <img width=\"946\" alt=\"image\" src=\"https:\/\/github.com\/gradle\/gradle\/assets\/897017\/00499440-2e23-4b9d-ba6b-7f5047692224\">\r\n\r\n\r\nI know you said updating the images will take time, but in the interim can you add some css?\r\n\r\n```css\r\ndiv.imageblock {\r\n  background: white;\r\n}\r\n```\r\n\r\n> <img width=\"941\" alt=\"image\" src=\"https:\/\/github.com\/gradle\/gradle\/assets\/897017\/5c2c2ea0-dd4e-416d-9bd6-fcce67ae2862\">\r\n"],"labels":["in:dependency-declarations","a:documentation"]},{"title":"Interactions between buildSrc and version catalogs should be specified in the docs","body":"### Issue type\r\n\r\nMissing information\r\n\r\n### Problem description\r\n\r\nthis is coming from the discussion on this issue https:\/\/github.com\/gradle\/gradle\/issues\/15383#issuecomment-1940357260\r\n\r\nGradle allows us to use type safe accessors for version catalogs by default in most modules. However, buildSrc is an exception. Because of this different behavior, this should be explicitly called out in the docs until such times as this behavior difference is fixed. Neither the [version catalogs](https:\/\/docs.gradle.org\/current\/userguide\/platforms.html) page, nor the [buildSrc](https:\/\/docs.gradle.org\/current\/userguide\/sharing_build_logic_between_subprojects.html) page mention this particular behavior.\r\n\r\n### Context (optional)\r\n\r\nWhen migrating a multi-module project that makes heavy use of sharing build logic using the buildSrc module to use version catalogs, it is not clear what we can use to access the version catalogs from within buildSrc.\r\n\r\n### Page with the problem\r\n\r\nhttps:\/\/docs.gradle.org\/current\/userguide\/sharing_build_logic_between_subprojects.html","comments":["Thank you for your interest in Gradle!\r\n\r\nThis is a valid documentation issue.\r\n\r\n***\r\n\r\nSome of the information is present on [this page](https:\/\/docs.gradle.org\/current\/userguide\/platforms.html#sec:importing-catalog-from-file), but it's too scarce with details.\r\n"],"labels":["in:dependency-version-catalog","in:build-src","a:documentation"]},{"title":"Result delivery for worker API actions","body":"### Expected Behavior\n\nIt would be nice to be able to return some result from a `WorkAction` besides writing it to a file or using a shared build service as transport vehicle.\n\n### Current Behavior (optional)\n\nIf you make the `WorkAction` an inner class to collect the state in some task property, Gradle cannot create the work action.\r\nWriting to files is an awkward workaround that also then needs disk IO.\r\nThe only way I found currently is to create a build service to transport the results.\n\n### Context\n\nGradle 7.6.4","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n****\r\n\r\nRelated:\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/9190","And the build service to transport the result of course only works with `noisolation()`, otherwise you get an error that \"Build services cannot be serialized.\"."],"labels":["a:feature","in:workers","in:writing-tasks"]},{"title":"Precompiled Plugin Scripts: Support Constructor Injection for eg ToolingModelBuilderRegistry","body":"### Expected Behavior\n\n```kotlin\r\n\/\/ myConventionPlugin.gradle.kts\r\nval toolingModelRegistry: ToolingModelBuilderRegistry by injected\r\n```\n\n### Current Behavior (optional)\n\nNot possible, you have to write a normal plugin:\r\n```kotlin\r\nopen class MyConventionPlugin @Inject constructor(\r\n    val toolingModelRegistry: ToolingModelBuilderRegistry\r\n): Plugin<Project> {\r\n  override fun apply(project: Project) {\r\n}\r\n```\n\n### Context\n\nI want to migrate my normal plugins to the precompiled plugins because the syntax aligns with build scripts and the type safe accessors makes writing plugins very comfortable.\r\n\r\nBut I need to expose a custom object to my IntelliJ plugin during sync and I use the `ToolingModelBuilder`.","comments":["Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team and is prioritized by them\r\n"],"labels":["a:feature","in:precompiled-script-plugin"]},{"title":"`compileScala` task not present\/not invoked in mixed scala-java projects","body":"### Current Behavior\n\nWhen using Gradle 8.6 in a multi-project build with the Kotlin DSL, our mixed-source java & scala projects, which use the Quarkus gradle plugin will not invoke the `compileScala` target. \r\n\r\nIn fact, the `compileScala` target does not appear to exist despite being present in the `plugins` block.\r\n\r\nIntelliJ also reports the plugin type as potentially wrong (vs. the other plugin types) -- See attached image. \r\n![Screenshot 2024-02-12 at 8 53 03\u202fAM](https:\/\/github.com\/gradle\/gradle\/assets\/10260609\/69012d44-d172-4cc3-8aad-0920e8684a58)\r\n\n\n### Expected Behavior\n\n`compileScala` should be present in the task graph and invoked to compile scala code.\n\n### Context (optional)\n\nTrying to build a mixed-source java & scala project using Quarkus.\r\n\r\nExisting build is maven and trying to migrate to Gradle.\n\n### Steps to Reproduce\n\nProject structure is multi-source, multi-library and multi-language. This is infeasible here.\r\n\r\nCreate a multi-project build project using plugin management and the Kotlin DSL, with java and scala.\r\n\r\nPlace mixed scala and java code in a `src\/main\/scala` folder and attempt to compile the project. The `.scala` files will not be compiled.\r\n\r\nThis same project setup works fine in Maven.\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\nMac OS 14.3 Sonoma on an ARM64 mac.\r\nGradle 8.6 - Kotlin DSL.\r\nScala 2.13\r\nJava 17 w\/ OpenJDK\r\nQuarkus 3.7.x","comments":["Sorry that you're having trouble with Gradle!\r\n\r\nWe appreciate the effort that went into filing this issue, but we must ask for more information. \r\n\r\nAs stated in our issue template, a [minimal reproducible example](https:\/\/en.wikipedia.org\/wiki\/Minimal_reproducible_example) is a must for us to be able to track down and fix your problem efficiently. Our available resources are severely limited, and we must be sure we are looking at the exact problem you are facing.\r\n\r\nIf we have a reproducer, we may be able also to suggest workarounds or ways to avoid the problem.\r\n\r\nThe ideal way to provide a reproducer is to leverage our [reproducer template](https:\/\/github.com\/gradle\/gradle-issue-reproducer). You can also use [Gradle Project Replicator](https:\/\/github.com\/android\/project-replicator) to reproduce the structure of your project. \r\n\r\nThis issue will be closed after 7 days unless you provide more information.\r\n\r\n***\r\n\r\nCan you reproduce the issue without Quarkus? Also, your screenshot implies that `scala` comes from the version catalog, does it ring a bell?","I was able to isolate the issue to this in the `settings.gradle.kts`\r\n\r\n```kotlin\r\n\/\/ Now setup a version catalog to make sure all apps\r\n    \/\/ are using the same deps to avoid conflicts.\r\n    \/\/ See: https:\/\/docs.gradle.org\/current\/userguide\/platforms.html#sub:version-catalog-declaration\r\n    val scalaVersion: String by settings\r\n    versionCatalogs {\r\n        create(\"jvm\") {\r\n            \/\/ Keep this in alphabetical order.\r\n            library(\"apache-kafka-client\", \"org.apache.kafka:kafka-clients:3.4.0\")\r\n            library(\"apache-kafka-streams\", \"org.apache.kafka:kafka-streams:3.4.0\")\r\n            library(\"apache-pinot-client\", \"org.apache.pinot:pinot-java-client:1.0.0-hotfix\")\r\n        }\r\n        \/\/ DO NOT CALL THIS \"scala\" it will break the plugin.\r\n        create(\"scaladeps\") {\r\n            library(\"fasterxml-jackson\", \"com.fasterxml.jackson.module:jackson-module-scala_2.13:2.15.2\")\r\n            library( \"core\", \"org.scala-lang:scala-library:${scalaVersion}\")\r\n            library( \"github-pureconfig\", \"com.github.pureconfig:pureconfig_2.13:0.17.2\")\r\n            library( \"typesafe-logging\", \"com.typesafe.scala-logging:scala-logging_2.13:3.9.5\")\r\n        }\r\n        create(\"testcontainers\") {\r\n            library(\"kafka\", \"org.testcontainers:kafka:1.18.0\")\r\n            library(\"postgres\", \"org.testcontainers:postgresql:1.18.0\")\r\n        }\r\n        create(\"junit\") {\r\n            library(\"core\", \"org.junit.jupiter:junit-jupiter-api:5.9.3\")\r\n            library(\"engine\", \"org.junit.jupiter:junit-jupiter-engine:5.9.3\")\r\n            library(\"params\", \"org.junit.jupiter:junit-jupiter-params:5.9.3\")\r\n            library(\"pioneer\", \"org.junit-pioneer:junit-pioneer:2.0.1\")\r\n        }\r\n    }\r\n```\r\n\r\nCreating a version catalog with the name `scala` is then overloaded\/confused by the `plugins` block in the `build.gradle.kts` file down in the project.\r\n\r\nNot sure this is a bug or if its just a classic naming collision. Interested in your take. ","This issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n***\r\nThank you for narrowing this down. This is a name clash indeed. At least a warning should be produced.\r\n\r\nThe workaround is to use `id(\"scala\")` instead of `scala` in your plugins section.","I would recommend that you only define a single version catalog.  The default is 'libs'.   This is the name that's used in the global scope and where the conflict is coming from. "],"labels":["a:bug","in:plugin-management","in:kotlin-dsl","in:groovy-dsl","in:dependency-version-catalog","has:reproducer","has:workaround","re:comprehensibility"]},{"title":"Cleanup old custom caching instrumentation logic","body":"We moved most of the instrumentation either to artifact transforms (https:\/\/github.com\/gradle\/gradle\/pull\/26045, https:\/\/github.com\/gradle\/gradle\/pull\/27738) and execution engine (https:\/\/github.com\/gradle\/gradle\/pull\/27721). \r\nThere is one place missing, see https:\/\/github.com\/gradle\/gradle\/issues\/28045. \r\n\r\nAfter https:\/\/github.com\/gradle\/gradle\/issues\/28045 is done we should cleanup the old instrumentation logic [CachedClasspathTransformer](https:\/\/github.com\/gradle\/gradle\/blob\/0fb9091286b3db4d673787658d67e6f534222eaf\/subprojects\/core\/src\/main\/java\/org\/gradle\/internal\/classpath\/CachedClasspathTransformer.java#L31) and [DefaultCachedClasspathTransformer](https:\/\/github.com\/gradle\/gradle\/blob\/0fb9091286b3db4d673787658d67e6f534222eaf\/subprojects\/core\/src\/main\/java\/org\/gradle\/internal\/classpath\/DefaultCachedClasspathTransformer.java#L64) and all related logic and remove custom instrumentation entirely.\r\n\r\n\r\n\r\n```[tasklist]\r\n### Tasks\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/28045\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/28046\r\n```\r\n","comments":[],"labels":["a:chore","in:instrumentation"]},{"title":"Add Provider<Collection<T>> getElements() to DomainObjectCollection to lazy map\/transform its elements","body":"### Expected Behavior\r\n\r\n```kotlin\r\nval myDomains = objects.domainObjectSet(String::class)\r\nval outputProvider = objects.listProperty(String::class)\r\n\r\n\/\/ actual, there is no method, but you could accidentally use the `map` method of Kotlin, which is wrong\r\noutputProvider.set(myDomains.map { \"$it$it\" })\/\/ this `map` is part of Kotlin stdlib Collection.map which maps the realized elements, and it is not a provider\r\n\r\n\/\/ expected\r\noutputProvider.set(myDomains.elements.map { it.map { \"$it$it\" }}) \/\/ lazily transform the elements\r\n\r\nmyDomains.add(\"foo\")\r\nprintln(outputProvider.get()) \/\/ expected \"[foofoo]\"\r\n\r\n\/\/ works with\r\ninline val <reified T : Any> DomainObjectCollection<T>.elements: Provider<out Collection<T>> get() = project.provider {\r\n    toList()\r\n}\r\n```\r\n\r\n### Current Behavior (optional)\r\n\r\nNo lazy method to transform a `DomainObjectCollection` without realizing it. You can write an `getElemets` function by yourself easily, but I expect a built-in solution.\r\n\r\nThere is also already a `FileCollection.getElements()` to support the same use-case, lazily mapping its content.\r\n\r\n### Context\r\n\r\nI want to pass a `DomainObjectCollection` of an extension to a Java SourceSet. The domain of the collection contains a task provider as member, so I need to map the collection to its member. \r\nThe SourceSet supports `Provider<Iterable<TaskProvider>` as input, but there is no lazy option to map the collection. If you accidental use `map` of the Kotlin stdlib, you are realizing the collection early, resulting into a empty list, because the domains of the collection are added lazily later (using `register`). \r\n\r\nSo you need to get the elements of the collection lazily as Provider.","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n","Thank you, we think it is a valid feature request. The issue is in the backlog of the relevant team, but the existence of a workaround makes it non-critical, so it might take a while before a fix is made."],"labels":["a:feature","in:provider-api"]},{"title":"classpath config of settings script should have `org.jetbrains.kotlin.platform.type` set to jvm","body":"### Current Behavior\r\n\r\nIn a settings script, we may add a dependency. Usually this is straightforward:\r\n\r\n**settings.gradle.kts**\r\n```kotlin\r\nimport org.apfloat.Apfloat\r\n\r\nbuildscript {\r\n    dependencies {\r\n        classpath(\"org.apfloat:apfloat:1.13.0\")\r\n    }\r\n    repositories {\r\n        mavenCentral()\r\n    }\r\n}\r\n\r\nApfloat(\"1\").multiply(Apfloat(\"1\"))\r\n```\r\n\r\nHowever, if we define a kotlin multiplatform library, we get an error:\r\n\r\n```kotlin\r\nbuildscript {\r\n    dependencies {\r\n        classpath(\"io.github.pdvrieze.xmlutil:core:0.86.3\")\r\n    }\r\n    repositories {\r\n        mavenCentral()\r\n    }   \r\n}\r\n```\r\n\r\n```\r\nThe consumer was configured to find a library for use during runtime, compatible with Java 20, packaged as a jar, and its dependencies declared externally, as well as attribute 'org.gradle.plugin.api-version' with value '8.5'. However we cannot choose between the following variants of io.github.pdvrieze.xmlutil:core:0.86.3:\r\n       - androidRuntimeElements-published\r\n       - jvmRuntimeElements-published\r\n```\r\n\r\nThis error indicates that the library has both a jvm-desktop and an android variant, but for some reason gradle cannot decide which one to pick. The answer here is obvious: jvm-desktop should always be picked automatically in this context because the gradle settings script does not execute inside of an android environment.\r\n\r\nSo we have to apply this workaround:\r\n\r\n```kotlin\r\nbuildscript {\r\n    dependencies {\r\n        classpath(\"io.github.pdvrieze.xmlutil:core:0.86.3\")\r\n    }\r\n    repositories {\r\n        mavenCentral()\r\n    }\r\n\r\n\r\n    configurations.configureEach {\r\n        attributes {\r\n            attribute(\r\n                Attribute.of(\"org.jetbrains.kotlin.platform.type\", String::class.java),\r\n                \"jvm\"\r\n            )\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI am creating this issue because the workaround above should not be required. Gradle should automatically add the attribute above or do something to produce equivalent behavior for configurations that resolve dependencies for the settings script.\r\n\r\n### Expected Behavior\r\n\r\nClasspath dependencies on kotlin multiplatform libraries should automatically select the jvm-desktop varient.\r\n\r\n### Context (optional)\r\n\r\nthe xmlutil library discusses the issue [in its readme](https:\/\/github.com\/pdvrieze\/xmlutil#notes).\r\n\r\n### Steps to Reproduce\r\n\r\n1. Initialize an empty project with gradle 8.5\r\n2. Run `.\/gradlew` with the code above. If the attribute is not added, you will see the error.\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["This problem is not restricted to settings scripts.\r\nThe same happens in build scripts too.\r\n\r\nIf such libraries are used from a Gradle plugin, you can do the work-around also on the plugin side, by requesting that attribute for that specific library, so that downstream users don't have to do it.\r\nBut still a bit cumbersome, especially if you also have transitive multi-platform libraries.","Hey @Vampire I was wondering if that was possible from the plugin side, but I could not figure out how to do it. Could you help? I cannot find how we can add attributes or select variants on the plugin side.","In the case of `io.github.pdvrieze.xmlutil:core` you can of course simply use the non-multi-platform sibling `io.github.pdvrieze.xmlutil:core-jvm`.\r\n\r\nIn the case of `io.github.pdvrieze.xmlutil:serialization` it is harder, you can also there use the sibling `io.github.pdvrieze.xmlutil:serialization-jvm`, but that again depends on the multi-platform  `io.github.pdvrieze.xmlutil:core`, so you would need to substitute `core` by `core-jvm`.\r\n\r\nFor the generic case, you can do\r\n```kts\r\nimplementation(libs.xmlutil.core) {\r\n    \/\/ work-around for https:\/\/github.com\/gradle\/gradle\/issues\/28042\r\n    attributes {\r\n        attribute(KotlinPlatformType.attribute, KotlinPlatformType.jvm)\r\n    }\r\n}\r\n```\r\nbut again, you have to care about transitives ugly, so for example\r\n```kts\r\nimplementation(libs.xmlutil) {\r\n    \/\/ part of work-around for https:\/\/github.com\/gradle\/gradle\/issues\/28042\r\n    exclude(group = libs.xmlutil.core.get().group, module = libs.xmlutil.core.get().name)\r\n    attributes {\r\n        attribute(KotlinPlatformType.attribute, KotlinPlatformType.jvm)\r\n    }\r\n}\r\n\/\/ part of work-around for https:\/\/github.com\/gradle\/gradle\/issues\/28042\r\nruntimeOnly(libs.xmlutil.core) {\r\n    attributes {\r\n        attribute(KotlinPlatformType.attribute, KotlinPlatformType.jvm)\r\n    }\r\n}\r\n```","Thanks @Vampire . The plugin itself doesn't depend on xmlutil, but depends on something else that depends on xmlutil. Maybe I could add explicit dependencies from the plugin, but I'm hesitant as that is starting to feel a little bit chaotic. \r\n\r\nI am currently trying to see if there is a way I can publish a gradle plugin to a maven repository with some metadata that says as a blanket statement to resolve it and all of its recursive subdependencies with `KotlinPlatformType.jvm` automatically chosen over `KotlinPlatformType.android`.","Maybe something from the [Gradle Module Metadata 1.1 specification](https:\/\/github.com\/gradle\/gradle\/blob\/master\/platforms\/documentation\/docs\/src\/docs\/design\/gradle-module-metadata-latest-specification.md) can help? I am reading.","Looking at the gradle module metadata for my gradle plugin, I see the plugin publishes 4 variants: `apiElements`, `runtimeElements`, `testFixturesApiElements` and `testFixturesRuntimeElements`. Both `apiElements` and `runtimeElements` already have `\"org.jetbrains.kotlin.platform.type\": \"jvm\"`.\r\n\r\nSince `jvm` is already in the maven metadata like that, I would expect gradle to see that and know that any transitive dependencies that come from the plugin should prefer the `jvm` attribute. I must be missing somethng.","Got it. Here is my workaround:\r\n\r\n```kotlin\r\n    listOf(\"implementation\", \"api\").forEach { cfg ->\r\n        listOf(\"serialization\",\"core\").forEach { moduleName ->\r\n            dependencies.constraints.add(cfg,\"io.github.pdvrieze.xmlutil:$moduleName\") {\r\n                it.attributes {\r\n                    it.attribute(KotlinPlatformType.attribute,jvm)\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nUsing dependency constraints seems better because it can be integrated in a more permanent way into the build logic of many projects. It only has an effect if the dependency is actually present. Thanks again @Vampire for helping me understand this.","Yes, dependency constraint is of course preferable if it works.\r\nI just did not think it will work for adding attributes, so thanks for trying. :-D\r\n\r\n> Since jvm is already in the maven metadata like that, I would expect gradle to see that and know that any transitive dependencies that come from the plugin should prefer the jvm attribute. I must be missing somethng.\r\n\r\nNope, it says that the artifacts attached to that variant have that attribute, not anything about the dependencies.","Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team, but the existence of a workaround makes it non-critical, so it might take a while before a fix is made.\r\n"],"labels":["a:bug","in:writing-tasks","in:buildscript-compilation","in:settings-script"]},{"title":"Consumer task depending on producer task output doesn't run with --continue when producer throws VerificationException from WorkAction","body":"### Current Behavior\r\n\r\nTasks consuming another task's output do not run when `--continue` is passed to Gradle when a `VerificationException` is thrown from a `WorkAction`.\r\n\r\n### Expected Behavior\r\n\r\nBehaviour matches https:\/\/docs.gradle.org\/8.6\/userguide\/custom_tasks.html#verification_failures when `VerificationException` is thrown from `WorkAction`, specifically:\r\n\r\n> When Gradle is run with --continue, consumer tasks that depend on a producer task\u2019s output (via a relationship between task inputs and outputs) can still run after the consumer fails.\r\n\r\n(Side note: that sentence should likely end with \"after the _producer_ fails\", not \"after the _consumer_ fails\")\r\n\r\n### Context (optional)\r\n\r\nMigrating to Worker API is not possible when a producer task uses Worker API and there is an aggregation task depending on its output.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download https:\/\/github.com\/3flex\/gradle-verificationexception-worker\r\n2. Execute `.\/gradlew processCreateFile`. Build fails when `createFile` task fails, as expected.\r\n3. Execute `.\/gradlew processCreateFileWorker`. Build fails when `createFileWorker` task fails, as expected.\r\n4. Execute `.\/gradlew processCreateFile --continue`. Build fails, but `processCreateFile` executes as expected.\r\n5. Execute `.\/gradlew processCreateFileWorker --continue`. Build fails when `createFileWorker` task fails. `processCreateFileWorker` does not execute. This is _not_ expected.\r\n\r\nResults of 4 & 5 should be the same - the consuming task should execute.\r\n\r\n### Gradle version\r\n\r\n8.6\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:bug","in:workers","in:execution-engine"]},{"title":"\"Building Android Apps\" sample projects have duplicate \"src\" directory.","body":"### Issue type\n\nWrong or misleading information\n\n### Problem description\n\nThe files [sample_building_android_apps-kotlin-dsl.zip](https:\/\/docs.gradle.org\/8.6\/samples\/zips\/sample_building_android_apps-kotlin-dsl.zip) and [sample_building_android_apps-groovy-dsl.zip](https:\/\/docs.gradle.org\/8.6\/samples\/zips\/sample_building_android_apps-groovy-dsl.zip), both linked from the [\"Building Android Apps Sample\" page](https:\/\/docs.gradle.org\/8.6\/samples\/sample_building_android_apps.html), have a duplicate version of the `app\/src` directory in the root:\r\n\r\nHere are, for example, the contents of the `sample_building_android_apps-kotlin-dsl.zip` file:\r\n```bash\r\n$ 7z l sample_building_android_apps-kotlin-dsl.zip\r\n\r\n   Date      Time    Attr         Size   Compressed  Name\r\n------------------- ----- ------------ ------------  ------------------------\r\n2024-02-02 16:49:14 .....         1073          558  gradle.properties\r\n2024-02-02 16:49:14 .....          138          108  settings.gradle.kts\r\n2024-02-02 16:49:14 D....            0            2  app\r\n2024-02-02 16:49:14 .....          751          421  app\/proguard-rules.pro\r\n2024-02-02 16:49:14 .....         1007          450  app\/build.gradle.kts\r\n2024-02-02 16:49:14 D....            0            2  app\/src\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/androidTest\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/androidTest\/java\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/androidTest\/java\/org\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/androidTest\/java\/org\/gradle\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/androidTest\/java\/org\/gradle\/samples\r\n2024-02-02 16:49:14 .....          752          377  app\/src\/androidTest\/java\/org\/gradle\/samples\/ExampleInstrumentedTest.java\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/res\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/res\/values\r\n2024-02-02 16:49:14 .....          383          182  app\/src\/main\/res\/values\/styles.xml\r\n2024-02-02 16:49:14 .....          208          125  app\/src\/main\/res\/values\/colors.xml\r\n2024-02-02 16:49:14 .....           75           60  app\/src\/main\/res\/values\/strings.xml\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/res\/drawable\r\n2024-02-02 16:49:14 .....         5606          418  app\/src\/main\/res\/drawable\/ic_launcher_background.xml\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/res\/mipmap-xxhdpi\r\n2024-02-02 16:49:14 .....        10413        10418  app\/src\/main\/res\/mipmap-xxhdpi\/ic_launcher_round.png\r\n2024-02-02 16:49:14 .....         6387         6321  app\/src\/main\/res\/mipmap-xxhdpi\/ic_launcher.png\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/res\/mipmap-mdpi\r\n2024-02-02 16:49:14 .....         2783         2788  app\/src\/main\/res\/mipmap-mdpi\/ic_launcher_round.png\r\n2024-02-02 16:49:14 .....         2060         2065  app\/src\/main\/res\/mipmap-mdpi\/ic_launcher.png\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/res\/mipmap-xxxhdpi\r\n2024-02-02 16:49:14 .....        15132        15086  app\/src\/main\/res\/mipmap-xxxhdpi\/ic_launcher_round.png\r\n2024-02-02 16:49:14 .....         9128         8892  app\/src\/main\/res\/mipmap-xxxhdpi\/ic_launcher.png\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/res\/layout\r\n2024-02-02 16:49:14 .....          780          286  app\/src\/main\/res\/layout\/activity_main.xml\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/res\/mipmap-anydpi-v26\r\n2024-02-02 16:49:14 .....          272          153  app\/src\/main\/res\/mipmap-anydpi-v26\/ic_launcher_round.xml\r\n2024-02-02 16:49:14 .....          272          153  app\/src\/main\/res\/mipmap-anydpi-v26\/ic_launcher.xml\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/res\/mipmap-hdpi\r\n2024-02-02 16:49:14 .....         4905         4910  app\/src\/main\/res\/mipmap-hdpi\/ic_launcher_round.png\r\n2024-02-02 16:49:14 .....         2963         2968  app\/src\/main\/res\/mipmap-hdpi\/ic_launcher.png\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/res\/drawable-v24\r\n2024-02-02 16:49:14 .....         1880          673  app\/src\/main\/res\/drawable-v24\/ic_launcher_foreground.xml\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/res\/mipmap-xhdpi\r\n2024-02-02 16:49:14 .....         6895         6900  app\/src\/main\/res\/mipmap-xhdpi\/ic_launcher_round.png\r\n2024-02-02 16:49:14 .....         4490         4495  app\/src\/main\/res\/mipmap-xhdpi\/ic_launcher.png\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/java\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/java\/org\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/java\/org\/gradle\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/main\/java\/org\/gradle\/samples\r\n2024-02-02 16:49:14 .....          332          198  app\/src\/main\/java\/org\/gradle\/samples\/MainActivity.java\r\n2024-02-02 16:49:14 .....          712          325  app\/src\/main\/AndroidManifest.xml\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/test\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/test\/java\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/test\/java\/org\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/test\/java\/org\/gradle\r\n2024-02-02 16:49:14 D....            0            2  app\/src\/test\/java\/org\/gradle\/samples\r\n2024-02-02 16:49:14 .....          380          256  app\/src\/test\/java\/org\/gradle\/samples\/ExampleUnitTest.java\r\n2024-02-02 16:49:14 D....            0            2  gradle\r\n2024-02-02 16:49:14 D....            0            2  gradle\/wrapper\r\n2024-02-02 16:49:14 .....        43462        38761  gradle\/wrapper\/gradle-wrapper.jar\r\n2024-02-02 16:49:14 .....          230          136  gradle\/wrapper\/gradle-wrapper.properties\r\n2024-02-02 16:49:14 .....          751          421  proguard-rules.pro\r\n2024-02-02 16:49:14 .....         2918         1220  gradlew.bat\r\n2024-02-02 16:49:14 .....         1267          634  README\r\n2024-02-02 16:49:14 .....         8692         3688  gradlew\r\n2024-02-02 16:49:14 D....            0            2  src\r\n2024-02-02 16:49:14 D....            0            2  src\/androidTest\r\n2024-02-02 16:49:14 D....            0            2  src\/androidTest\/java\r\n2024-02-02 16:49:14 D....            0            2  src\/androidTest\/java\/org\r\n2024-02-02 16:49:14 D....            0            2  src\/androidTest\/java\/org\/gradle\r\n2024-02-02 16:49:14 D....            0            2  src\/androidTest\/java\/org\/gradle\/samples\r\n2024-02-02 16:49:14 .....          752          377  src\/androidTest\/java\/org\/gradle\/samples\/ExampleInstrumentedTest.java\r\n2024-02-02 16:49:14 D....            0            2  src\/main\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/res\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/res\/values\r\n2024-02-02 16:49:14 .....          383          182  src\/main\/res\/values\/styles.xml\r\n2024-02-02 16:49:14 .....          208          125  src\/main\/res\/values\/colors.xml\r\n2024-02-02 16:49:14 .....           75           60  src\/main\/res\/values\/strings.xml\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/res\/drawable\r\n2024-02-02 16:49:14 .....         5606          418  src\/main\/res\/drawable\/ic_launcher_background.xml\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/res\/mipmap-xxhdpi\r\n2024-02-02 16:49:14 .....        10413        10418  src\/main\/res\/mipmap-xxhdpi\/ic_launcher_round.png\r\n2024-02-02 16:49:14 .....         6387         6321  src\/main\/res\/mipmap-xxhdpi\/ic_launcher.png\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/res\/mipmap-mdpi\r\n2024-02-02 16:49:14 .....         2783         2788  src\/main\/res\/mipmap-mdpi\/ic_launcher_round.png\r\n2024-02-02 16:49:14 .....         2060         2065  src\/main\/res\/mipmap-mdpi\/ic_launcher.png\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/res\/mipmap-xxxhdpi\r\n2024-02-02 16:49:14 .....        15132        15086  src\/main\/res\/mipmap-xxxhdpi\/ic_launcher_round.png\r\n2024-02-02 16:49:14 .....         9128         8892  src\/main\/res\/mipmap-xxxhdpi\/ic_launcher.png\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/res\/layout\r\n2024-02-02 16:49:14 .....          780          286  src\/main\/res\/layout\/activity_main.xml\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/res\/mipmap-anydpi-v26\r\n2024-02-02 16:49:14 .....          272          153  src\/main\/res\/mipmap-anydpi-v26\/ic_launcher_round.xml\r\n2024-02-02 16:49:14 .....          272          153  src\/main\/res\/mipmap-anydpi-v26\/ic_launcher.xml\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/res\/mipmap-hdpi\r\n2024-02-02 16:49:14 .....         4905         4910  src\/main\/res\/mipmap-hdpi\/ic_launcher_round.png\r\n2024-02-02 16:49:14 .....         2963         2968  src\/main\/res\/mipmap-hdpi\/ic_launcher.png\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/res\/drawable-v24\r\n2024-02-02 16:49:14 .....         1880          673  src\/main\/res\/drawable-v24\/ic_launcher_foreground.xml\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/res\/mipmap-xhdpi\r\n2024-02-02 16:49:14 .....         6895         6900  src\/main\/res\/mipmap-xhdpi\/ic_launcher_round.png\r\n2024-02-02 16:49:14 .....         4490         4495  src\/main\/res\/mipmap-xhdpi\/ic_launcher.png\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/java\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/java\/org\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/java\/org\/gradle\r\n2024-02-02 16:49:14 D....            0            2  src\/main\/java\/org\/gradle\/samples\r\n2024-02-02 16:49:14 .....          332          198  src\/main\/java\/org\/gradle\/samples\/MainActivity.java\r\n2024-02-02 16:49:14 .....          712          325  src\/main\/AndroidManifest.xml\r\n2024-02-02 16:49:14 D....            0            2  src\/test\r\n2024-02-02 16:49:14 D....            0            2  src\/test\/java\r\n2024-02-02 16:49:14 D....            0            2  src\/test\/java\/org\r\n2024-02-02 16:49:14 D....            0            2  src\/test\/java\/org\/gradle\r\n2024-02-02 16:49:14 D....            0            2  src\/test\/java\/org\/gradle\/samples\r\n2024-02-02 16:49:14 .....          380          256  src\/test\/java\/org\/gradle\/samples\/ExampleUnitTest.java\r\n------------------- ----- ------------ ------------  ------------------------\r\n2024-02-02 16:49:14             213905       182609  54 files, 57 folders\r\n```\r\n\r\nAfter extracting, a `diff` confirms that both folders are identical:\r\n```bash\r\n$ diff -r app\/src\/ src\r\n<no output, exit code 0>\r\n```\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/8.6\/samples\/sample_building_android_apps.html","comments":["Thank you for your interest in Gradle!\r\n\r\nThis is a valid documentation issue.\r\n"],"labels":["a:documentation","in:tutorial"]},{"title":"Allow access to InputChanges from outside a task class","body":"### Expected Behavior\n\nI'd like to be able to access `InputChanges` for a task from outside the task class itself. \r\n\r\nSome potential solutions:\r\n- Add a version of `doFirst` and `doLast` that receives the input changes.\r\n- Allow querying the task for the input changes inside a task action.\r\n\r\nRight now you can actually work around this by manually implementing an `Action<Task>` and letting it also implement `InputChangesAwareTaskAction` but these APIs are internal and tedious to implement correctly.\n\n### Current Behavior (optional)\n\nToday, only a task action declared as a member function can receive the `InputChanges`.\n\n### Context\n\nI am attempting to collect the logs for a compile task and write it to a file. In order to get correct results, this needs to support incremental compilation since the compile task is incremental.\r\n\r\nAs of today, there is no official way to know from \"the outside\" if a task is running incrementally or which files are being processed.","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n***\r\n\r\nExposing `InputChanges` or other execution engine internals is probably not the best way to resolve this properly. However, getting the compilation logs, the original problem you trying to solve, is probably something we may want to provide an API for.","I don't know the implications of exposing the input changes, but it doesn't feel unreasonable to me to want to expose incremental compilation information to added task actions.\r\n\r\nIn my use case, providing the complete log out be useful, but not really feasible as you wouldn't know how to merge the new log with the existing log.\r\n\r\nWhat I really need to access is:\r\n- Are we running incrementally (required)\r\n- What files are being processed (optional, but useful to know which log lines I can trim)","We want to do this in a more controlled way. There is a plan to rework `doFirst()` and `doLast()` in a more type-safe way where you'd be able to prepend\/append things that themselves look like tasks, i.e. they have `@InputFiles` and they can also have access to `InputChanges`. There is no concrete plan to implement this in the foreseeable future, though."],"labels":["a:feature","in:execution-engine"]},{"title":"Configuration cache could store more versions of task graph for the same command, not just the latest one","body":"### Expected Behavior\n\nPlease change the behavior of configuration cache so instead of recalculating the graph after each change in configuration, if the task graph of the new configuration was already computed in past, it is reused. \r\n\r\nIt would behave like configuration cache has its own build cache.\n\n### Current Behavior (optional)\n\nCurrently, the configuration cache for each input stores only last state. If I for instance make change in libs.versions.toml (I might change \"version_androidmaterial\" from \"1.5\" to \"1.6\"), and I launch gradlew tasks, I see message in concole:\r\n\r\n_Calculating task graph as configuration cache cannot be reused because file 'gradle\\libs.versions.toml' has changed.\r\n\r\nAt the end new task graph rewrites the previous one in configuration cahe. Which means that if I revert the change (I change \"version_androidmaterial\" back to 1.5), the task graph will be calculated again, instead of reusing older version.\n\n### Context\n\nWe are a team of developers working on android project. We are using bitbucket for managing pull requests. Each change of any pull request launches series of CI jobs to validate the build of project, running various kind of tests etc. We would like to incorporate the use of configuration cache on our CI server to speed builds a little.\r\n\r\nIt is quite often we make some change into our gradle configuration in project. We change some dependency version, or create new module and so on. \r\nBuild of pull request with will on our CI cause the task graph being replaced with new one. Subsequent build of other open pull request does not contain the changed configuration, so task graph will again not be up-to date and again will be recomputed.\r\n\r\nMoreover, the pull request with configuration change will be eventually merged into repository. After that, our bitbucket few days will be in state when some of current open pull requests already contain the configuration change, while others not. \r\nThis also increases number of task graph recalculations, sometimes to the point there is little or no reuse at all.\r\n","comments":["Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:feature","in:configuration-cache"]},{"title":"The `CompilePrecompiledScriptPluginPlugins` task should be replaced with a custom `KotlinCompile` task","body":"### Current Behavior\n\nThe `CompilePrecompiledScriptPluginPlugins` task uses the embedded Kotlin compiler to compile precompiled script plugins `plugins {}` blocks. This also requires mapping the project compilation options to the embedded compiler which involves some gymnastic and is not perfect. Moreover when moving to K2 this will cause issues with the embedded compiler API as the task actually creates a compilation unit that contains a bunch of `.kt` files and `.kts` files.\n\n### Expected Behavior\n\nThis step of the precompiled script plugin task pipeline would be much better modelled with a `KotlinCompile` task.\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\nBuild Kotlin DSL precompiled script plugins\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":[],"labels":["a:chore","in:kotlin-dsl","in:precompiled-script-plugin"]},{"title":"Let embedded integration test executor clean up VFS","body":"We have recently switched to cleaning up symlinks from the VFS between builds:\r\n\r\n- https:\/\/github.com\/gradle\/gradle\/pull\/27361\r\n\r\nSince this change some integration tests that are executed with the embedded executor have become flaky, as the embedded executor does not trigger the VFS cleanup. (Previously the cleanup happened before the end of the build, and hence was part of embedded execution.)\r\n\r\nAs a quick fix we've started requiring isolated daemons for symlink-related integration tests. This is a workaround that fixes the flakiness, but it's not ideal, as it slows down the tests, makes them hard to debug, and there's no indication for the next developer adding a symlink test that they need to require isolated daemons, too.\r\n\r\nFor a better solution we should execute the VFS cleanup after each embedded execution, too.","comments":[],"labels":["a:chore","in:virtual-file-system"]},{"title":"Update tested AGP versions","body":"from 8.3.0-beta02 to 8.3.0-rc01\r\nfrom 8.4.0-alpha06 to 8.4.0-alpha08\r\nbumping nightly\r\n","comments":["@bot-gradle test APT","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"bacf9e0819553d343a14f3e1d1ea3f693cd5d7a3\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=bacf9e0819553d343a14f3e1d1ea3f693cd5d7a3) to see all build failures.\n- [AllPerformanceTestsReadyForRelease build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=77791489)","\r\n@bot-gradle test APT\r\n\r\n","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"ebd6b6bc9d7c9fd9ee7ebd532e97d2405b28ea54\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=ebd6b6bc9d7c9fd9ee7ebd532e97d2405b28ea54) to see all build failures.\n- [AllPerformanceTestsReadyForRelease build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=77803999)"],"labels":["a:chore"]},{"title":"Publish :build-cache-local","body":"The goal here is to publish the `:build-cache-local` subproject so that it can be consumed by the Maven cache extension.","comments":[],"labels":["a:chore","in:build-cache"]},{"title":"Generate accessors for `settings.gradle.kts`","body":"Fixes #11210\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["@bot-gradle test RFN","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"6922893fe1da2bbcaf201d7673fadf96b521582f\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=6922893fe1da2bbcaf201d7673fadf96b521582f) to see all build failures.\n- [ReadyForNightly build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=79648691)","@bot-gradle test QFL","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"5f47d00efba84c35f1447f1cdaddef63a2335c1e\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=5f47d00efba84c35f1447f1cdaddef63a2335c1e) to see all build failures.\n- [QuickFeedbackLinux build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=80002089)"],"labels":["a:feature","in:kotlin-dsl","re:comprehensibility"]},{"title":"Support multiple mounts of ~\/.gradle\/caches in virtualized environments","body":"### Expected Behavior\r\n\r\nGradle has partial support for multiple mounts of cache folders. Currently certain caches related to dependencies support multiple read-only mounts. Details are documented in the [dependency section](https:\/\/docs.gradle.org\/6.2-rc-1\/userguide\/dependency_resolution.html#sub:ephemeral-ci-cache). But there are multiple subfolders to mount, whose version might change per gradle version. And there are potentially more gradle cache folders eligible for multiple mounts such as the build or configuration cache. Mounting the entire `~\/.gradle\/caches` folder would be simpler than multiple subfolder mounts and would cover more cache kinds. Also read-write mounts would be convenient instead of the current read-only support of the dependency cache.\r\n\r\n### Current Behavior (optional)\r\n\r\nBlocked by #8750. Other cache kinds also show issues with lock files. In our case mutliple gradle processes cannot communicate with one another to free lock files except via the mounted folder. read-write dependency cache sharing isn't currently supported.\r\n\r\n### Context\r\n\r\nWe are running CI worker containers in kubernetes and would like to mount a single gradle cache on each kube node our worker containers run on.","comments":["Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:feature","in:configuration-cache","in:build-cache"]},{"title":"Support file inputs for custom tasks that are okay to be missing","body":"### Expected Behavior\n\nAllow a task to declare a file input as \"okay to be missing.\" We could have:\r\n\r\n```java\r\n@InputFile\r\n@PathSensitive(NONE)\r\n@AllowMissing\r\npublic abstract RegularFileProperty getSourceFile();\r\n```\r\n\r\nWith the runtime API it could look like this:\r\n\r\n```groovy\r\ntask.inputs.file(...)\r\n  .withPropertyName(\"sourceFile\")\r\n  .pathSensitive(NONE)\r\n  .allowMissing()\r\n```\n\n### Current Behavior (optional)\n\nIt is not currently possible to tell Gradle to accept a missing file as an input. Users can declare an input file property as `@Optional` to allow the property to be _unconfigured._ But once a property is configured, and points to a location on the file system, Gradle will fail if there is no content at that location.\n\n### Context\n\nWe get regular requests for this feature to be supported.\r\n\r\n\r\nA typical workaround is to declare the property as `@Optional`, and make it return `null` if the input is missing:\r\n\r\n```java\r\n@Internal\r\npublic abstract RegularFileProperty getSourceFile();\r\n\r\n@InputFile\r\n@PathSensitive(NONE)\r\n@Optional\r\nprotected Provider<RegularFile> getSourceFileInternal() {\r\n  return getSourceFile()\r\n    .map(sourceFile -> sourceFile.isFile() ? sourceFile : null);\r\n}\r\n```\r\n\r\nHowever, this is overly verbose, error-prone and well, it's a workaround that replaces missing with an absent provider.","comments":["I initially assumed this is what `Optional` meant. Some other ideas:\r\n- A change could be made that setting an optional property to a file that doesn't exist makes it act as if it was never set.\r\n- Add a function on `RegularFileProperty` that allows setting the file only if it exists.\r\n- Add a parameter to `@Optional` that says `allowEmpty` or something like that"],"labels":["a:feature","in:writing-tasks"]},{"title":"Terminal output causes build result to be obscured in IntelliJ\/Android Studio","body":"### Current Behavior\n\nThe running with an interactive console, Gradle will print what each worker is doing. At the end of the build it cleans up this area. But something about how this is done causes issues in Android Studio\/IntelliJ, especially if you are publishing build scans.\r\n\r\nAs you can see in this screenshot:\r\n<img width=\"600\" alt=\"image\" src=\"https:\/\/github.com\/gradle\/gradle\/assets\/102883\/3da7123b-2706-4158-9d6c-f6f71e17738f\">\r\n\r\nthe terminal prompt is placed mid way in the terminal window and since the build scan is published you now don't know if the build succeeded or not without scrolling up.\r\n\r\nThis causes a lot of friction for us when building from the command line.\r\n\r\nThis also happens in a normal terminal, but they are usually taller and doesn't cause the same issues:\r\n<img width=\"600\" alt=\"image\" src=\"https:\/\/github.com\/gradle\/gradle\/assets\/102883\/947a272f-d9d7-40c5-9284-1e9529e1ac17\">\r\n\n\n### Expected Behavior\n\nIt would be great if the full height of the terminal window was used at the end of a build.\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\n1. Open up a project in Android Studio or IntelliJ.\r\n2. Open up a terminal inside the IDE.\r\n3. Run a task, preferably one that produces a lot of output. Ensure you are running with `--scan`\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\nThis is present in all versions of IntelliJ and Android Studio currently out.","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n\r\n***\r\n\r\nI can confirm it's reproducible. FTR, to reproduce the issue, you need to launch a task that runs multiple workers. "],"labels":["a:bug","in:console","in:ide"]},{"title":"performance issue with checkstyle after upgrading to 8.2","body":"### Current Behavior\r\n\r\nIn a big project one of its modules runs checkstyleMain in 4,5 seconds.\r\n\r\n### Expected Behavior\r\n\r\ncheckstyleMain on this module should run below 2 seconds, as before.\r\n\r\n### Context (optional)\r\n\r\nOur project build duration went up from 27 minutes to 45 minutes. Investigation shows that it happened after upgrading gradle. Gradle run with --profile shows biggest grows on checkstyle task, usually taking 2 times longer.\r\n\r\nWhat was tried? Using different gradle version, 8.2.1, 8.4, 8.6. Using newest checkstyle tool version (10.13.0). Nothing helps reduce build time.\r\n\r\n### Steps to Reproduce\r\n\r\nI hope it should be detectable on any project, unless it is tiny.\r\n\r\n### Gradle version\r\n\r\n8.2\r\n\r\n### Gradle version that used to work\r\n\r\n7.4.2\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\nOur checkstyle configuration:\r\n\r\n    apply plugin: 'checkstyle'\r\n    checkstyle {\r\n        toolVersion = \"10.4\"\r\n        configFile = file(\"$rootDir\/base\/tools\/resources\/checkstyle.xml\")\r\n        ignoreFailures = false\r\n        checkstyleMain.enabled = true\r\n        checkstyleTest.enabled = true\r\n    }\r\n    tasks.withType(Checkstyle) {\r\n        \/\/ Checkstyle task produces too much text, let's suppress it.\r\n        it.logging.setLevelInternal(LogLevel.LIFECYCLE)\r\n    }\r\n","comments":["Sorry that you're having trouble with Gradle!\r\n\r\nWe appreciate the effort that went into filing this issue, but we must ask for more information. \r\n\r\nAs stated in our issue template, a [minimal reproducible example](https:\/\/en.wikipedia.org\/wiki\/Minimal_reproducible_example) is a must for us to be able to track down and fix your problem efficiently. Our available resources are severely limited, and we must be sure we are looking at the exact problem you are facing.\r\n\r\nIf we have a reproducer, we may be able also to suggest workarounds or ways to avoid the problem.\r\n\r\nThe ideal way to provide a reproducer is to leverage our [reproducer template](https:\/\/github.com\/gradle\/gradle-issue-reproducer). You can also use [Gradle Project Replicator](https:\/\/github.com\/android\/project-replicator) to reproduce the structure of your project. \r\n\r\nThis issue will be closed after 7 days unless you provide more information.\r\n","I was able to provide a reproducible example. It turned out that it's enough to have many simplest java files to feel the difference between 2 versions of gradle.\r\n\r\nAfter more tests I changed the gradle version in my report. The actual upgrade we did was from 7.4.2 to 8.2.1. I have not discovered yet which exact version makes the biggest difference.\r\n\r\nHere are my measurements on the test project (described below).\r\n\r\n8.1.1: 8s\r\n7.6.4: 9s\r\n7.4.2: 1s\r\n\r\n**Steps to reproduce**\r\n\r\n1. Clone https:\/\/github.com\/jarekczek\/gradle-issue-slow-checkstyle\r\n1. Optionally adjust the number of generated files in `generator\/src\/main\/java\/jc\/Generator.java`, line 24.\r\n1. Generate a set of source files, so that checkstyle have some load: `gradlew :generator:run`\r\n1. Run checkstyle: `gradlew checkstyleMain --profile`\r\n1. Optionally modify gradle version in `gradle\/wrapper\/gradle-wrapper.properties`\r\n1. Optionally modify `src\/main\/java\/jc\/generated\/Plain001.java` to force a fresh run.\r\n1. Optionally repeat point 4, compare.\r\n","Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["in:checkstyle-plugin","a:regression","has:reproducer"]},{"title":"Provide API to get the list of library coordinates without calling `findLibraries`","body":"### Expected Behavior\n\nThe `VersionCatalog` view provides a number of methods like `getLibraryAliases` or `findLibrary`, which [have performance issues](https:\/\/github.com\/gradle\/gradle\/issues\/25226). It is missing methods to query the model without sorting.\r\n\r\n\n\n### Current Behavior (optional)\n\n_No response_\n\n### Context\n\nIn [our case](https:\/\/github.com\/micronaut-projects\/micronaut-gradle-plugin\/issues\/932), we don't really need to know about the aliases, but simply need to memorize the coordinates. Ideally the view should be enriched with methods allowing to query the model without performance penalties : get the list of dependency providers for example.\r\n\r\nSee [this PR](https:\/\/github.com\/micronaut-projects\/micronaut-gradle-plugin\/pull\/941) which involves a quite dirty solution.\r\n\r\nA [pull request](https:\/\/github.com\/gradle\/gradle\/pull\/27444) was created to improve the performance of `findLibrary`, but it would still involve, in our case, calling `getLibraryAliases` on each project, for each catalog, which would still sort items when we don't need it.\r\n","comments":["Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:feature","in:dependency-version-catalog"]},{"title":"Please expose plugins defined in init script to the target project","body":"### Current Behavior\n\nConsider a gradle project which uses an init script located in the `init.d` directory of the gradle distribution. The init script has the following:\r\n\r\n```\r\ninitscript {\r\n    classpath \"tech.harmonysoft:gradle-release-paperwork:1.8.0\"\r\n}\r\n\r\nallprojects {\r\n    apply plugin: tech.harmonysoft.oss.gradle.release.paperwork.GradleReleasePaperworkPlugin\r\n}\r\n\r\nprojectsEvaluated {\r\n    rootProject.allprojects { project ->\r\n        releasePaperwork {\r\n            releaseNotesFile = \"some-file\" \/\/ plugin configuration works here\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n'Release-paperwork' plugin registered there has extension registered under name `releasePaperwork`, it works fine in the init script. The problem is that the same extension can't be properly configured in the target project which uses kotlin dsl (build.gradle.kts):\r\n\r\n```\r\nreleasePaperwork {\r\n    tagPattern = \"v%s\"\r\n}\r\n```\r\n\r\nBuild output:\r\n\r\n```\r\nBuild file '\/xxx\/build.gradle.kts' line: 9\r\n\r\n* What went wrong:\r\nScript compilation error:\r\n\r\n  Line 9:     tagPattern = \"v%s\"\r\n              ^ Unresolved reference: tagPattern\r\n\r\n1 error\r\n```\n\n### Expected Behavior\n\nIt should be possible to configure a plugin registered in the init script\n\n### Context (optional)\n\nI created a [post in community forums](https:\/\/discuss.gradle.org\/t\/configure-plugin-added-in-init-script\/47609) about this and got a reply that it's likely due to the fact that class loader from the init script is not in the upwards hierarchy of the class loader from the build script\n\n### Steps to Reproduce\n\nDefined in the 'current behaviour' section\n\n### Gradle version\n\n8.5\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["Sorry that you're having trouble with Gradle!\r\n\r\nWe appreciate the effort that went into filing this issue, but we must ask for more information. \r\n\r\nAs stated in our issue template, a [minimal reproducible example](https:\/\/en.wikipedia.org\/wiki\/Minimal_reproducible_example) is a must for us to be able to track down and fix your problem efficiently. Our available resources are severely limited, and we must be sure we are looking at the exact problem you are facing.\r\n\r\nIf we have a reproducer, we may be able also to suggest workarounds or ways to avoid the problem.\r\n\r\nThe ideal way to provide a reproducer is to leverage our [reproducer template](https:\/\/github.com\/gradle\/gradle-issue-reproducer). You can also use [Gradle Project Replicator](https:\/\/github.com\/android\/project-replicator) to reproduce the structure of your project. \r\n\r\nThis issue will be closed after 7 days unless you provide more information.","@cobexer the reproducer is simply that init script.\r\nAnd the three lines in the build script.","The init script posted in the issue does not compile for me:\r\n\r\n```\r\nFAILURE: Build failed with an exception.\r\n\r\n* Where:\r\nInitialization script '...\/example-init.gradle' line: 2\r\n\r\n* What went wrong:\r\nA problem occurred evaluating initialization script.\r\n> Could not find method classpath() for arguments [tech.harmonysoft:gradle-release-paperwork:1.8.0] on object of type org.gradle.api.internal.initialization.DefaultScriptHandler_Decorated.\r\n````\r\nModifying the init-script to successfully compile and adding the example to a project in a build generated by `gradle init` produces a slightly different error (two errors) for me:\r\n\r\n```\r\nJAVA_HOME=$(sdk home java 17.0.7-tem) .\/gradlew -I init.gradle tasks\r\n\r\n> Configure project :lib\r\ne: file:\/\/\/...\/lib\/build.gradle.kts:26:1: Unresolved reference: releasePaperwork\r\ne: file:\/\/\/...\/lib\/build.gradle.kts:26:20: Unresolved reference: tagPattern\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* Where:\r\nBuild file '...\/lib\/build.gradle.kts' line: 26\r\n\r\n* What went wrong:\r\nScript compilation errors:\r\n\r\n  Line 26: releasePaperwork { tagPattern = \"v%s\" }\r\n           ^ Unresolved reference: releasePaperwork\r\n\r\n  Line 26: releasePaperwork { tagPattern = \"v%s\" }\r\n                              ^ Unresolved reference: tagPattern\r\n\r\n2 errors\r\n```\r\n\r\nSo to make sure we are looking at the problematic behavior instead of whatever way we may come up with that uses the information in this issue to produce some error I request a minimal reproducible example that shows the error @denis-zhdanov experiences.\r\n\r\nTherefore, please take the time to create a minimal reproducible example based on our [reproducer template](https:\/\/github.com\/gradle\/gradle-issue-reproducer) as linked above.","Oh, sorry, I missed that the `initscript { ... }` block is invalid and I fixed it also when talking in the forums about it.\r\nBut just fixing it to be\r\n```groovy\r\ninitscript {\r\n   repositories {\r\n      gradlePluginPortal()\r\n   }\r\n   dependencies {\r\n      classpath \"tech.harmonysoft:gradle-release-paperwork:1.8.0\"\r\n   }\r\n}\r\n```\r\nmakes it reproduce for me exactly like stated.","So as I couldn't keep my mouth shut, I also followed suit now: https:\/\/github.com\/Vampire\/gradle-issue-27979\/actions\/runs\/7979672572\/job\/21787608023#step:4:71 :-)","thanks, Bj\u00f6rn :)","The issue is in the backlog of the relevant team and is prioritized by them.\r\n\r\n***\r\n\r\nThanks for taking the time to fix the reproducer.\r\n\r\nFrom what we know, there is currently no way to access a plugin extension that way since they are only generated based on what's declared in the plugins block. Which you cannot access from an init script.","I understand from [this comment in a related issue](https:\/\/github.com\/gradle\/gradle\/issues\/1322#issuecomment-277349115) that exposing the plugin applied from an init script is not wanted. \r\n> An init script should be used only for decorations to a build, which means that a build should function without the init script.\r\n\r\nAnd I tend to agree with that stance.\r\n\r\nBut, would there be a way to expose the plugin coordinates applied from the init script, so they would be accessible by any consuming builds? Or even better, manually generate an accessor similar to the `java`, `idea`, etc. convenience accessors shipped with the official distribution.\r\nThat way users can easily reference applied plugins from init scripts and apply a matching plugin for additional configuration if wanted.\r\n\r\nFor context: we're struggling with the same issue with our in-house gradle distribution as it applies some mandatory plugins, and we're investigating possible resolutions.","Iirc, I think the main problem is, that the plugin that is added to the init script classpath is not in the class loader hierarchy of the build scripts, so the `releasePaperwork` extension of the MCVE gets an accessor but as the type is not found gets `Any` as type and thus you cannot do the configuration.\r\n\r\nSo if you build a custom distribution anyway, a mitigation strategy could be, that you ensure the plugin in question is part of the build script classpath, by including the plugin jar in the library folder of the Gradle distribution.","I'm fine with the plugin not being on the classpath. It would just be nice if the user of the distribution could just add the plugin to their plugins block, without having to figure out the coordinates\/id for it and making sure it's version aligned with what's applied by the init script. Something like:\r\n\r\n```kotlin\r\nplugins {\r\n    requiredPluginFromDistribution \/\/ convenient accessor, somehow exposed\r\n    id(InitScriptAppliedPluginId) \/\/ convenient plugin id constant, somehow exposed. Optionally with additional version declaration from another constant, if truly required\r\n}\r\n```"],"labels":["a:bug","in:plugin-management","has:reproducer"]},{"title":"Document how to use configuration cache with `latest.release` dependency version","body":"### Issue type\r\n\r\nMissing information\r\n\r\n### Problem description\r\n\r\nWhen the configuration cache is enabled, but you declare version dependencies upon `latest.release` you get the following:\r\n\r\n> Calculating task graph as configuration cache cannot be reused because cached version information for [dependency group]:[dependency name]:latest.release has expired.\r\n\r\nThis is very helpful information, but there's no meaningful description on how to change the behaviour to solve this problem.\r\n\r\nPresumably, there are two options:\r\n\r\n1. Increase the default length that `latest.release` versions are cached. Which is currently documented as being 24 hours, but is clearly incorrect when dealing with the configuration cache: https:\/\/docs.gradle.org\/current\/userguide\/dynamic_versions.html#:~:text=By%20default%2C%20Gradle%20caches%20dynamic%20versions%20for%2024%20hours.\r\n2. Fix to a specific version.\r\n\r\n\r\n### Context (optional)\r\n\r\nIdeally, I'd like to use the configuration cache with a dynamic version like `latest.release`, with a short but sane default for the TTL on the dependency.\r\n\r\n### Page with the problem\r\n\r\nhttps:\/\/docs.gradle.org\/current\/userguide\/configuration_cache.html","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n***\r\n\r\n@gradle\/bt-configuration Should the error message and docs be updated or there is something else that can be improved in the described scenario?",">Which is currently documented as being 24 hours, but is clearly incorrect when dealing with the configuration cache:\r\n\r\nThe intended behavior of the configuration cache is to expire the entry when the resolution cache expires, so CC should be valid for 24 hours as well. The interval is configured by the `cacheDynamicVersionsFor` resolution configuration too. If that isn't happening, can you please share a reproducer?\r\n\r\nGiven that, I'm not sure what is being requested here. @JLLeitschuh do you think we need to additionally document configuration cache expiration policy? It should the same as the dependency caching policy - if not, it is a bug to fix.","When I run unit tests with IJ with the configuration cache turned on, I get a warning, every time, that the CC state is invalid due to the use of `latest.release` as a version for a dependency.\n\nLet me see if I can come up with a minimal reproducer"],"labels":["in:configuration-cache","a:documentation","re:comprehensibility"]},{"title":"AvailableJavaHomes can never find JDKs using environment variables","body":"AvailableJavaHomes always uses `JDK\\d\\d?` to lookup locations by environment: https:\/\/github.com\/gradle\/gradle\/blob\/8824d3b1c2d40bb55ea52dd1eff49046215bea78\/subprojects\/internal-integ-testing\/src\/main\/groovy\/org\/gradle\/integtests\/fixtures\/AvailableJavaHomes.java#L322\r\nBut our test environment filters use `JDK_`-style names: https:\/\/github.com\/gradle\/gradle\/blob\/6668ab4c63a1051d917edb5beeb5a5f58fbcc262\/build-logic\/jvm\/src\/main\/kotlin\/gradlebuild\/propagated-env-variables.kt#L76\r\nSo AvailableJavaHomes will never be able to locate a JDK by environment variable, as all of the potential candidates are filtered out of the tests. Ideally, we should share the same filters between these two places.","comments":[],"labels":["a:chore","in:building-gradle"]},{"title":"Make it easy to confirm configuration cache was reused","body":"### Expected Behavior\n\nIt would be nice if there were an easy way for a build to programmatically confirm that the configuration cache had been reused, and if the cache couldn't be reused, to see a brief reason why.\n\n### Current Behavior (optional)\n\nAt the moment it seems that it is possible to search the output of Gradle for the message `Reusing configuration cache.` although hard to be sure that that message will be stable over time (and it also requires some effort to programmatically access the build logs).\n\n### Context\n\nIn AndroidX we run our CI Gradle builds twice in a row to check for out-of-date tasks. When we updated to Gradle 8.1, we [noticed](https:\/\/issuetracker.google.com\/278767328) our configuration cache entries weren't being used in the second build anymore. It was sort of a coincidence that we noticed this, because the text of the message was noticed as suspicious by another system.\r\n\r\nIt could be nice if we could validate that the configuration cache entries get used in our up-to-date builds, to make sure that we can detect configuration cache invalidations even if the text of the message isn't one we've seen before.\r\n\r\nThis issue is similar to https:\/\/github.com\/gradle\/gradle\/issues\/26019 since they both relate to the idea of making it easy to verify that the configuration cache wasn't unexpectedly invalidated - implementing one might make the other one less important.\r\n\r\nThanks!","comments":["Also interesting - it looks like other workarounds include making a task (which uses as an input the timestamp at which it was configured) for verifying that the configuration cache was reused. See for example https:\/\/r.android.com\/2951925 . This doesn't necessarily also show the reason that the configuration cache entry wasn't reused, but it does seem to avoid relying on a specific log message to decide whether to fail the build","Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:feature","in:tooling-api","in:configuration-cache"]},{"title":"Add Error Prone annotations to build","body":"### Issue type\n\nOther\n\n### Problem description\n\nThere are some useful annotations from Error Prone that we could use. Most importantly `@Keep` can be used to mark unused fields and methods if they are needed for some reason.\r\n\r\nhttps:\/\/errorprone.info\/api\/latest\/com\/google\/errorprone\/annotations\/package-summary.html\n\n### Context (optional)\n\nIt is somewhat tricky to add this now, because the dependency validator plugin will flag it as unused for projects where the annotations are not used. So before we can introduce this library we'll need a way to declare dependencies that are available in every subproject (within some scope) without the dependency validator flagging them.","comments":[],"labels":["a:chore","in:building-gradle"]},{"title":"Dependency Locking Issue with Spring Dependency Management and Test-Fixtures","body":"### Current Behavior\r\n\r\nAfter update to Gradle 8.5, running the tests results in error: \"Could not resolve all files for configuration ':testRuntimeClasspath'.\"\r\n\r\n### Expected Behavior\r\n\r\nAfter fixing the dependency versions with \".\/gradlew dependencies --write-locks\", gradle should execute the tests with \".\/gradlew test\".\r\n\r\n### Context (optional)\r\n\r\nUnable to run the tests when using the following features at once:\r\n* dependency locking\r\n* explicit versions for some (selected) dependencies\r\n* spring dependency management\r\n* test-fixtures\r\n\r\n### Steps to Reproduce\r\n\r\nCall\r\n```\r\n.\/gradlew dependencies --write-locks\r\n.\/gradlew test\r\n```\r\nwith the following `build.gradle` file:\r\n```groovy\r\nplugins {\r\n\tid 'java'\r\n\tid 'io.spring.dependency-management' version '1.1.4'\r\n\tid 'java-test-fixtures'\r\n}\r\n\r\njava {\r\n\tsourceCompatibility = '17'\r\n}\r\n\r\nrepositories {\r\n\tmavenCentral()\r\n}\r\n\r\ndependencyLocking {\r\n\tlockAllConfigurations()\r\n}\r\n\r\ndependencies {\r\n\timplementation 'org.keycloak:keycloak-admin-client:22.0.5'\r\n}\r\n```\r\n\r\n==>\r\n\r\n```\r\n$ .\/gradlew test\r\n> Task :test FAILED\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nExecution failed for task ':test'.\r\n> Could not resolve all files for configuration ':testRuntimeClasspath'.\r\n   > Resolved 'com.github.java-json-tools:jackson-coreutils:2.0' which is not part of the dependency lock state\r\n   > Resolved 'com.sun.activation:jakarta.activation:2.0.1' which is not part of the dependency lock state\r\n   > Resolved 'com.github.java-json-tools:msg-simple:1.2' which is not part of the dependency lock state\r\n   > Resolved 'com.github.java-json-tools:btf:1.3' which is not part of the dependency lock state\r\n```\r\n\r\nObservations:\r\n* It does work, when removing the line `id 'java-test-fixtures'` (not used in the minimal example, but I do need it)\r\n* It does work, when removing the line `id 'io.spring.dependency-management' version '1.1.4'` (not used in the minimal example, but I do need it)\r\n* Where are the dependencies from the error message coming from? They are resolved, when running without the spring dependency plugin\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Gradle version that used to work\r\n\r\n8.4\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\nOpenJDK Runtime Environment Temurin-17.0.7+7 (build 17.0.7+7)\r\nLinux","comments":["Sorry that you're having trouble with Gradle!\r\n\r\nMost probably your issue is caused by an external Gradle plugin, which cannot be addressed in the Gradle Build Tool project.\r\n\r\nWe recommend you open an issue on its issue tracker.\r\n\r\nWe have some integration tests with major plugins to catch potential problems early, but we don't have the capacity to cover all plugins available.\r\n\r\nIf you think you have come across a Gradle bug, please provide a reproducer for this issue without the plugin and we\u2019ll consider reopening it.\r\n\r\n***\r\n\r\nThe behavior you observing is most probably caused by `io.spring.dependency-management`. ","I stumbled across the same problem and build a reproducer without the spring dep man plugin: https:\/\/github.com\/fp7\/gradle-locking-repro","@fp7 thank you for providing a reproducer!"],"labels":["a:regression","in:dependency-locking","has:reproducer"]},{"title":"Support \"Configuration on Demand\" when projects are configured without buildscripts. ","body":"### Expected Behavior\n\nProvide support for projects that configure subprojects without buildscripts. If \"Configure on Demand\" can disable the execution of a buildscript for the projects that it determines are not needed, then with a little bit more flexibility even gradle projects that do not use buildscripts could leverage the results of the calculated list of required projects in order to benefit from the advantages of decoupled projects.\n\n### Current Behavior (optional)\n\nAccording to [the docs](https:\/\/docs.gradle.org\/current\/userguide\/multi_project_configuration_and_execution.html#sec:configuration_on_demand) \"Configuration on Demand\" works by selectively enabling or disabling the execution of buildscript files. So if what the docs are saying is true, this will not work for projects that do not use buildscripts.\n\n### Context\n\nI have a large project with many subprojects. It is to chaotic for each module to have its own buildscript, so I place a json file in each module telling gradle how to configure it. At configuration time, I use `allProjects` in the root project (which I plan to move to `gradle.allProjects` in the settings script if possible), and for each project I read the json file located inside its project folder and configure accordingly.\r\n\r\nIn the `settings.gradle.kts` DSL, we can do the following:\r\n\r\n```kotlin\r\ngradle.allprojects {\r\n    val cfg = Json.decodeFromString<ProjectConfig>(\r\n        projectDir.resolve(\"cfg.json\").readText()\r\n    )\r\n    configureProject(cfg)\r\n}\r\n```\r\n\r\nThis is a simplified representation of how my project works. Here `ProjectConfig` is a custom data class representing the basic logic for how I can have individual subprojects with different configurations without needing a single buildscript.\r\n\r\nWhat I am proposing is something such as this:\r\n\r\n```kotlin\r\ngradle.allRequiredProjects {\r\n    val cfg = Json.decodeFromString<ProjectConfig>(\r\n        projectDir.resolve(\"cfg.json\").readText()\r\n    )\r\n    configureProject(cfg)\r\n}\r\n```\r\n\r\nNote the only difference is using a new proposed method `allRequiredProjects` instead of `allprojects`. \r\n\r\nMy understanding is that one of the core features of \"Configure On Demand\" is that Gradle automatically determines which projects are neccesarry based on the tasks that the user asked gradle to execute. Using this filtered list of projects, it determines which buildscripts to execute.\r\n\r\nI propose something like `allRequiredProjects` as a way for the gradle user to be able to leverage the results of the calculation of which projects are required. It would work in all ways the same as `allprojects`, except that the only projects that come through the lambda will be ones that were marked as required, and would be the same list of projects that would have their buildscripts executed if they had them (including the root project).\r\n","comments":["Sorry that you're having trouble with Gradle!\r\n\r\nWe appreciate the effort that went into filing this issue, but we must ask for more information. \r\n\r\nThis issue will be closed after 7 days unless you provide more information.\r\n\r\n***\r\n\r\nCan you please provide some kind of reproducer to demonstrate this scenario better? According to our understanding, `allprojects` should behave lazily already (like you described with `allRequiredProjects`) when configuration on demand is used. \r\n\r\n","Hello! If `Gradle.allprojects` already works the way I described, then I do not have any technical issue. \r\n\r\nIn that case, I just think that this is a documentation issue. For Gradle 8.5, the documentation [here](https:\/\/docs.gradle.org\/8.5\/userguide\/multi_project_configuration_and_execution.html#sec:configuration_on_demand) said:\r\n\r\n> Configuration on demand attempts to configure only projects that are relevant for requested tasks, i.e. it only executes the build script file of projects that are participating in the build. This way, the configuration time of a large multi-project build can be reduced.\r\n\r\nWhen it says \"it only executes the **build script** file of projects that are participating in the build\", that does not clarify that configuration-on-demand also can cause projects to be filtered from the `Gradle.allprojects` function. Based on the documentation, the reader would assume that only buildscripts can be avoided.\r\n\r\nFurthermore, if we look at the javadocs for the `Gradle.allprojects` class for 8.5 [here](https:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/invocation\/Gradle.html#allprojects-org.gradle.api.Action-) it says:\r\n\r\n> Adds an action to execute against all projects of this build. The action is executed immediately against all projects which are already available. It is also executed as subsequent projects are added to this build.\r\n\r\nIf we take these javadocs to be true, then the lambda executes against **all** projects in the build. There is no mention of any filtering, configuration avoidance, or configuration-on-demand here.\r\n\r\nSo when you say:\r\n\r\n> According to our understanding, allprojects should behave lazily already (like you described with allRequiredProjects) when configuration on demand is used.\r\n\r\nThat seems to contradict the javadocs, since that means that not all projects, but only **some** projects in the build could be executed against the given lambda.\r\n\r\nI also noticed that for the most recent version  (8.6), the configuration-on-demand documentation page I mentioned above [seems to have been removed](https:\/\/docs.gradle.org\/current\/userguide\/multi_project_configuration_and_execution.html).\r\n\r\nThe javadoc for `Gradle.allprojects` in 8.6 is [unchanged](https:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/invocation\/Gradle.html#allprojects-org.gradle.api.Action-).\r\n\r\nSo as long as it is expected for configuration-on-demand to filter projects in the `Gradle.allprojects` function, I don't think I need to share a reproducer because I have no reason to think the expected behavior doesn't work. I just think the documentation should reflect this.","Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n","Thanks, this is a valid documentation issue. \n\nFor a callback that's guaranteed to only trigger on configured projects I suggest `beforeProject` or `afterProject` depending on what best fits your use-case."],"labels":["in:configuration-model","a:documentation","in:configure-on-demand"]},{"title":"Filesystem watching breaks with symlinks","body":"### Current Behavior\n\nIn my project I have an included build (Gradle plugin) that has a `\/gradle` directory as a symbolic link to root project's parent directory (to reuse wrapper and version catalog without copying them since it's in the same Git repo).\r\nThis results in the following warning when running Gradle:\r\n```\r\nCaught exception: Already watching path: \/home\/alexey\/projects\/tremotesf-android\/gradle-plugin\/gradle\r\nStopping file watching and invalidating VFS after an error happened\r\n```\r\n\r\nHere is how project's structure looks:\r\n```\r\n\u251c\u2500\u2500 app\r\n\u251c\u2500\u2500 bencode\r\n\u251c\u2500\u2500 build\r\n\u251c\u2500\u2500 build.gradle.kts\r\n\u251c\u2500\u2500 CHANGELOG.md\r\n\u251c\u2500\u2500 common\r\n\u251c\u2500\u2500 fastlane\r\n\u251c\u2500\u2500 gradle\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 libs.versions.toml\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wrapper\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 gradle-wrapper.jar\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 gradle-wrapper.properties\r\n\u251c\u2500\u2500 gradle-plugin\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 build.gradle.kts\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gradle -> ..\/gradle\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gradle.properties -> ..\/gradle.properties\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gradlew -> ..\/gradlew\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gradlew.bat -> ..\/gradlew.bat\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 settings.gradle.kts\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 src\r\n\u251c\u2500\u2500 gradle.properties\r\n\u251c\u2500\u2500 gradlew\r\n\u251c\u2500\u2500 gradlew.bat\r\n\u251c\u2500\u2500 LICENSES\r\n\u251c\u2500\u2500 local.properties\r\n\u251c\u2500\u2500 README.md\r\n\u251c\u2500\u2500 rpc\r\n\u251c\u2500\u2500 settings.gradle.kts\r\n\u2514\u2500\u2500 torrentfile\r\n```\n\n### Expected Behavior\n\nNo errors, filesystem watching works.\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\n1. Clone https:\/\/github.com\/equeim\/tremotesf-android\r\n2. Run Gradle\r\n\r\nThis error does not appear 100% of the time, but very often.\r\nAlso, it seems that it tied to configuration cache somehow? I don't see this error when running Gradle with `--no-configuration-cache`.\n\n### Gradle version\n\n8.6\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\nOS: Linux, Fedora 39","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n","This should be fixed in 8.7 (RC1 expected on Monday). Could you try reproducing the problem with a nightly version of Gradle? https:\/\/gradle.org\/release-nightly\/","> This should be fixed in 8.7 (RC1 expected on Monday). Could you try reproducing the problem with a nightly version of Gradle? https:\/\/gradle.org\/release-nightly\/\r\n\r\nNope, still getting an error (with both nightly and RC1 that was released just now):\r\n```\r\nCaught exception: Already watching path: \/home\/alexey\/projects\/tremotesf-android\/gradle-plugin\/gradle\r\nUnable to watch the file system for changes. Unable to watch same file twice via different paths: Already watching path: \/home\/alexey\/projects\/tremotesf-android\/gradle-plugin\/gradle.\r\n```","I'm observing this failure still with 8.7 RC4. In our case, I have the `gradle` folder symlinked from at least two different locations in my repo. ","If it helps, I do not see this error on MacOS 14.3 with the same repo, just Linux. "],"labels":["a:bug","in:virtual-file-system"]},{"title":"Clean build output","body":"### Issue type\n\nPolishing\n\n### Problem description\n\nEpic will address cleaning up the various warnings and message output during the Gradle build, such as the project health warnings.\t\n\n### Context (optional)\n\n_No response_\n```[tasklist]\n### Tasks\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/27934\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/27939\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/27938\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/27937\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/28071\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/28080\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/28136\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/28137\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/28158\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/28161\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/28164\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/28212\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/28213\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/28214\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/28288\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/28191\n```\n","comments":["Next to check: dependency-management"],"labels":["a:chore","in:building-gradle","platform:jvm","platform:software"]},{"title":"PropertiesUtils.store(...) uses incorrect LineSeperator","body":"### Current Behavior\r\n\r\nIn `PropertiesUtils.java` the method `store(properties, outputStream, comment, Charset charset, lineSeparator)` uses `store0(bw, comments, escUnicode)` which uses `BufferedWriter.newLine()`, which uses `write(System.lineSeparator());`. Whereas `PropertiesUtils.java` uses `SystemProperties.getInstance().getLineSeparator();` which uses the SystemProperty `line.separator`. These might not result in the same LineSeperator if this is overwritten elsewhere (using i.e. `System.getProperties().put(\"line.separator\", \"\\r\\n\");` in UNIX).\r\n\r\n### Expected Behavior\r\n\r\nIn Java 1.8 this `BufferedWriter.newLine()`, uses `write(lineSeparator);`, where `lineSeparator` initialized using the SystemProperty `\"line.separator\"`, using: \r\n\r\n`lineSeparator = java.security.AccessController.doPrivileged(new sun.security.action.GetPropertyAction(\"line.separator\"));`\r\n\r\nAs such the code from the PropertiesUtil Task fails to split (it is looking for the wrong line separator) the `rawContents` it gets back from the `ByteArrayOutputStream out` using the following code: ([line 84](https:\/\/github.com\/gradle\/gradle\/blob\/cd3e35f4d3ba6e2df931e662746876fc67582224\/platforms\/core-runtime\/base-services\/src\/main\/java\/org\/gradle\/internal\/util\/PropertiesUtils.java#L84))\r\n```\r\n List<String> lines = Lists.newArrayList(Splitter.on(systemLineSeparator).omitEmptyStrings().split(rawContents));\r\n```\r\n\r\n### Context (optional)\r\n\r\nIn our build script we have a task that created `module.properties` and `project.properties` which were created, but completely empty. This happened consistently, but did depended on which tasks were run in the same run. Using the IntelliJ debugger we saw that `lines` in `PropertiesUtils.store(...)` was empty, prompting us to investigate the `java.util.Properties`, and in extension the `BufferedWriter`\r\n\r\n### Steps to Reproduce\r\n\r\nAttached a simple gradle project, which contains three tasks: \r\n- setLS (sets the SystemProperty `line.separator` to `\\r\\n`)\r\n- writeProp (prints a simple project.properties in project root), also indicates if the file was empty)\r\n- both (runs both tasks, setLS -> writeProp)\r\n\r\nNotes:\r\n- This is a Linux issue\r\n- Only occurs on Java 11+\r\n\r\n[gradleWriterBug.zip](https:\/\/github.com\/gradle\/gradle\/files\/14139492\/gradleWriterBug.zip)\r\n\r\n\r\n### Gradle version\r\n\r\ngradle 7.6 w\/ java Temurin 17.0.9+9\r\n\r\n### Gradle version that used to work\r\n\r\ngradle 6.9.1 w\/ java 1.8.0_172\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n\r\n***\r\n\r\nThis applies to any recent version of Gradle as well. It's not related to the Gradle version update but to changes between Java 8 and Java 11. The issue is reproducible on Mac too.\r\n\r\nThe `PropertiesUtils` is using three different ways to get a line separator. At least it should be clarified in the Javadoc, but ideally, the number of sources should be reduced."],"labels":["a:bug","has:reproducer","in:core-utilities"]},{"title":"Toolchain should provide a way to programmatically set JDK installation locations","body":"### Expected Behavior\r\n\r\nThe `toolchainManagement` block in settings.gradle.kts should allow developers to programmatically set JDK installation locations.\r\n\r\nExample:\r\n```\r\ntoolchainManagement {\r\n    jvm {\r\n        filesystem(\"Azul 11\") {\r\n            location = \"D:\\JDK\\Azul\\11\"\r\n        }\r\n        filesystem(\"Azul 17\") {\r\n            location = \"D:\\JDK\\Azul\\17\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nCurrently the `toolchainManagement` block only allows us to specify repositories with `resolverClasses` which is only capable of downloading JDKs from https URIs, however our JDKs can be found on a pre mounted network drive that is available on all developer and CI machines, this way we cannot let Gradle to download JDKs from any URI.\r\n\r\nAnother solution we could accept is if you could let us to provide a custom `InstallationSupplier` in the same `toolchainManagement` block similarly to a `resolverClass`.\r\n\r\n\r\n### Current Behavior (optional)\r\n\r\nCurrently we either have to specify properties in gradle.properties and put this into every one of our projects:\r\n```\r\norg.gradle.java.installations.auto-detect=false\r\norg.gradle.java.installations.paths=D:\\JDK\\Azul\\11,D:\\JDK\\Azul\\17\r\n```\r\n\r\nOr we have to specify a toolchainManagement block in settings.gradle that is not capable of accessing JDKs from file system:\r\n```\r\ntoolchainManagement {\r\n    jvm { \r\n        javaRepositories {\r\n            repository(\"foojay\") { \r\n                resolverClass = org.gradle.toolchains.foojay.FoojayToolchainResolver::class.java\r\n            }\r\n            repository(\"made_up\") { \r\n                resolverClass = MadeUpResolver::class.java\r\n                credentials {\r\n                    username = \"user\"\r\n                    password = \"password\"\r\n                }\r\n                authentication {\r\n                    create<DigestAuthentication>(\"digest\")\r\n                } \r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Context\r\n\r\nCurrently we specify the following properties in gradle.properties:\r\n```\r\norg.gradle.java.installations.auto-detect=false\r\norg.gradle.java.installations.paths=D:\\JDK\\Azul\\11,D:\\JDK\\Azul\\17\r\n```\r\n\r\nWe are also aware of that we could specify env variables that could be used, but setting an environment variable is not an option, as they would have to be set by every developer one by one:\r\n```\r\norg.gradle.java.installations.fromEnv=JDK8,JRE17\r\n```\r\n\r\nUnfortunately none of these solutions are good for us, because we would have to put these properties into every one of our gradle.properties file per project and we would like to either write a custom plugin that sets these values or a shared build.gradle.kts\/settings.gradle.kts file that we could apply in our build scripts.\r\n\r\n**Expectation: we would like to see any option that allows us to specify `org.gradle.java.installations.paths`  and `org.gradle.java.installations.auto-detect` within settings.gradle.kts or build.gradle.kts instead of having to define these properties in gradle.properties.**\r\n\r\n_In case you are overloaded with work, but you think that this is a valid use case, we are also open to contributing back to Gradle directly if we can agree on a solution that would fit into your vision and will allow us to do what we requested in this issue._","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n***\r\n\r\nToolchain management is a way to provision the JDKs, not to customize the installation paths. To achieve what you want, you can have a [custom Gradle distribution](https:\/\/docs.gradle.org\/current\/userguide\/organizing_gradle_projects.html#sec:custom_gradle_distribution) with custom properties. Or you can set those properties in [GRADLE_USER_HOME ](https:\/\/docs.gradle.org\/current\/userguide\/build_environment.html#sec:gradle_configuration_properties).\r\n\r\nAnother way would be to change Gradle to support custom installation suppliers.","This is an interesting idea.  There should be a DSL way of doing this and not just properties\/environment variables.\n\nWe're not sure if we want to force you to supply full paths to each JDK.  It might make more sense to be able to search for JDKs in a particular location. \n\nThis area isn't something we're working on right now. ","> There should be a DSL way of doing this and not just properties\/environment variables.\r\n\r\nCompletely agree. Anything that users can hook into, using custom code, would solve the issue described.\r\n\r\n> We're not sure if we want to force you to supply full paths to each JDK. It might make more sense to be able to search for JDKs in a particular location.\r\n\r\nSearching for JDKs most likely requires some assumptions to be made, and such assumptions often fail in a corporate environment. For example, the user may not be have permission to list the common root directory under which all of the required JDKs can be found. Or maybe there are too many JDKs under it, or some of them \"conflict\" with others.\r\n\r\nEither way, it's probably best to allow multiple locations to be specified, since the `org.gradle.java.installations.paths` property allows it too. And once that's possible, we can say that when the user specifies a set of paths, those that end with `\/**` are searched, those that don't are taken literally. They could be Ant-style patterns too. But fortunately we don't have to decide this just yet, these extensions can be added later, as required. Initially, it'd be enough to simply provide a DSL equivalent to the property, i.e. literal paths only.\r\n\r\n> This area isn't something we're working on right now.\r\n\r\nWould you take a contribution for this feature? Or how complex would you say this task is, would it even be reasonable for a newcomer to take a stab at it?"],"labels":["a:feature","in:toolchains"]},{"title":"Noop build performance regression after 8.6-rc-1 upgrade","body":"### Current Behavior\r\n\r\nWe received build performance regression alerts for the TOTAL_BUILD_TIME of UP-TO-DATE build from multiple benchmark projects (https:\/\/issuetracker.google.com\/issues\/321137534)  \r\n\r\nI add the step to reproduce using Gradle Profiler.  However, with Gradle profiler, the difference between 8.4 & 8.6-rc-1 is less obvious then we saw on our end. (see the numbers on our ticket)\r\n\r\n### Expected Behavior\r\n\r\nNo build time increase \r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\n1. Clone https:\/\/github.com\/bingranl\/android-studio-gradle-test.3600041f which is obtained basically by extracting android-studio-gradle-test.3600041f and apply setup.diff\r\n2. Benchmark with the scenario file, e.g. `ANDROID_HOME=\/xxxx\/sdk\/linux LOCAL_REPO=\/xxxx\/android-studio-gradle-test.3600041f\/repo gradle-profiler --benchmark --gradle-version 8.4 --gradle-version 8.6-rc-1 --scenario-file performance.scenarios upToDateSingleVariant`\r\n3. See the result in profile-out-x folder, you should be able to see a 5% regression \r\n\r\n\r\n\r\n### Gradle version\r\n\r\n8.4 and 8.6-rc-1\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Note: the max workers is set to 3  https:\/\/github.com\/bingranl\/android-studio-gradle-test.3600041f\/blob\/main\/gradle.properties#L16","Thank you for reporting this!\r\n\r\nWe'll look into reproducing these numbers on our side.","@bingranl I tried to reproduce the numbers, but the variance of the output is too high to get a conclusive result.\r\nIt seems like the max workers setting does not affect the outcome.\r\n\r\n[benchmark (1).csv](https:\/\/github.com\/gradle\/gradle\/files\/14178149\/benchmark.1.csv)\r\n\r\nDo you have any ideas where the variance might come from? Did you try to shrink the reproducer project to narrow down the root cause?\r\n","If you compare the results from three builds for each row, it has some variance. However, if you compute the mean and median of all the builds of each Gradle version, the mean and median is both lower for the 8.4. \r\n\r\nI didn't try to shrink because I don't have much idea about where the problem could come from. ","If you look at min\/max of run times:\r\n<img width=\"602\" alt=\"image\" src=\"https:\/\/github.com\/gradle\/gradle\/assets\/4946730\/4f4b09ae-c780-4d28-8ee7-d4404325fd25\">\r\nthe min and max values can differ from the average up to 20%, so I don't think those numbers can be trusted.\r\nIf we do, it'd be less than 1% difference on average","Yeah, the min and max differs a lot which is something we don't know why. ","This issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n***\r\n\r\n@gradle\/bt-configuration can you take a look at this during your evaluation of 8.7 performance?"],"labels":["in:configuration-model","a:performance-improvement"]},{"title":"Help the IDEs to infer the correct types on Closure parameters","body":"Fixes [#27077](https:\/\/github.com\/gradle\/gradle\/issues\/27077)\r\n\r\nIssue [#27077](https:\/\/github.com\/gradle\/gradle\/issues\/27077) describes the situation pretty well, but the issue in a nutshell:\r\n We don't annotate our Closure parameters well. This causes the `it` parameter's type to not be inferred by the IDE. This is a suboptimal IDE experience.\r\n\r\n## Work being done by this PR\r\n\r\nThis PR should mitigate and prevent such cases in the future:\r\n\r\nMitigation should be done by simply supplying the annotation for our current use cases.\r\n - Actual code (i.e. `Closure` parameters) are the simplest: we should add the annotation\r\n - Code generation should be fixed so the `Closure` methods generated from an `Action` parameter are correctly annotated.\r\n\r\nPrevention:\r\n  - An ArchUnit rule should be made so no Closure methods could be introduced without the proper annotations","comments":["This pull request has been automatically marked as stale because it has not had recent activity. It will be closed in 14 days if no further activity occurs. If you don't want the stale bot to close it, then set a milestone for it.","This is still relevant."],"labels":["a:feature","in:groovy-dsl"]},{"title":"Configuration methods with Action for @Nested properties","body":"### Expected Behavior\r\n\r\nIf you have a nested property, for example on a task or extension, it would be nice to automatically get a method that takes an `Action` for that type to configure it, so that you do not have to do\r\n```kts\r\nmyNested.property1 = \"foo\"\r\nmyNested.property2 = \"bar\"\r\n```\r\nor\r\n```kts\r\nmyNested.apply {\r\n    property1 = \"foo\"\r\n    property2 = \"bar\"\r\n}\r\n```\r\nor\r\n```kts\r\nconfigure(listOf(myNested)) {\r\n    property1 = \"foo\"\r\n    property2 = \"bar\"\r\n}\r\n```\r\nbut can directly do\r\n```kts\r\nmyNested {\r\n    property1 = \"foo\"\r\n    property2 = \"bar\"\r\n}\r\n```","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n***\r\n\r\nThe syntax you propose would imply having something like\r\n```kotlin\r\noperator fun invoke(action: this.() -> R)\r\n```\r\nThis might complicate the implementation a bit but, which is more concerning, it may imply extra mental overload.","That's one option. Another would be to have\r\n```kts\r\nfun myNested(action: Action<MyNested>)\r\n```\r\nwouldn't it?\r\nThat should then also cover Groovy DSL right away.\r\nBecause there is currently also no Groovy DSL magic that makes it work.\r\nThere you currently for example have to do\r\n```groovy\r\nmyNested.tap {\r\n    property1 = \"foo\"\r\n    property2 = \"bar\"\r\n}\r\n```","Thank you for your interest in Gradle!\n\nThis feature request is in the backlog of the relevant team and is prioritized by them.\n\n***\nThis feature makes sense but existence of workarounds makes it less urgent. We're also not sure how to expose nested objects (i.e. `Property<Nested>` vs. `Nested` that contains `Property`), which also affects the design. The Declarative Gradle effort can provide a different perspective too.\n\nIn the end, we need to spend some time at the drawing board to figure out how this can look like and how it should interact with other features."],"labels":["a:feature","in:kotlin-dsl","in:groovy-dsl"]},{"title":"Mark generated code with javax.annotations.processing.Generated","body":"The `javax.annotations.processing.Generated` annotation is source-retention only. Adding it to generated code allows Error Prone to recognize it as such, and skip validating it.\r\n\r\nNote: we are also annotating (some?) generated code with `org.gradle.api.Generated`, but Error Prone doesn't recognize that.\r\n","comments":["@lptr Please clarify what generated code you're referencing to."],"labels":["a:chore","in:building-gradle"]},{"title":"Fix errorprone warnings","body":"### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["\ud83e\udd77 **Code experts: hegyibalint, adammurdoch** \n \nhegyibalint has most \ud83d\udc69\u200d\ud83d\udcbb **activity** in the files. \nadammurdoch has most \ud83e\udde0 **knowledge** in the files. \n <details>\n <summary>See details<\/summary>\n\n\n`platforms\/ide\/tooling-api-builders\/build.gradle.kts` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint |  \n | --- | --- | \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP | 45 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 5% \n\n`platforms\/ide\/tooling-api-builders\/src\/main\/java\/org\/gradle\/tooling\/internal\/provider\/runner\/TestExecutionResultEvaluator.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint |  \n | --- | --- | \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP | 216 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 3% \n\n`platforms\/ide\/tooling-api-builders\/src\/main\/java\/org\/gradle\/tooling\/internal\/provider\/runner\/TestOperationMapper.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint |  \n | --- | --- | \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP | 173 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 76% \n\n`platforms\/ide\/tooling-api\/build.gradle.kts` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint |  \n | --- | --- | \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP | 90 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n \n`platforms\/ide\/tooling-api\/src\/main\/java\/org\/gradle\/tooling\/events\/test\/Destination.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint |  \n | --- | --- | \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP | 49 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n \n`platforms\/ide\/tooling-api\/src\/main\/java\/org\/gradle\/tooling\/internal\/adapter\/ProtocolToModelAdapter.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint |  \n | --- | --- | \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP | 1117 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 62% \n\n`platforms\/ide\/tooling-api\/src\/main\/java\/org\/gradle\/tooling\/internal\/build\/VersionOnlyBuildEnvironment.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint |  \n | --- | --- | \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP | 37 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 8% \n\n`platforms\/ide\/tooling-api\/src\/main\/java\/org\/gradle\/tooling\/internal\/consumer\/ConnectorServices.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint |  \n | --- | --- | \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP | 102 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 47% \n\n`platforms\/ide\/tooling-api\/src\/main\/java\/org\/gradle\/tooling\/internal\/consumer\/DefaultModelBuilder.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint |  \n | --- | --- | \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP | 100 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 71% \n\n`platforms\/ide\/tooling-api\/src\/main\/java\/org\/gradle\/tooling\/internal\/consumer\/ExceptionTransformer.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint |  \n | --- | --- | \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP | 62 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n \n`platforms\/ide\/tooling-api\/src\/main\/java\/org\/gradle\/tooling\/internal\/consumer\/parameters\/BuildProgressListenerAdapter.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint |  \n | --- | --- | \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP | 915 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n adammurdoch: 11% \n\n`platforms\/ide\/tooling-api\/src\/main\/java\/org\/gradle\/tooling\/internal\/protocol\/InternalCancellationToken.java` \n \n\nActivity based on git-commit: \n\n |  | hegyibalint |  \n | --- | --- | \n| FEB |   |  \n| JAN |   |  \n| DEC |   |  \n| NOV |   |  \n| OCT |   |  \n| SEP | 41 additions & 0 deletions |  \n \n\nKnowledge based on git-blame: \n \n<\/details>\n \n\n \n \nTo learn more about \/:\\ gitStream - [Visit our Docs](https:\/\/docs.gitstream.cm\/) \n \n \n\n<automation id=\"code_experts\/comment_experts\"\/>","This pull request has been automatically marked as stale because it has not had recent activity. It will be closed in 14 days if no further activity occurs. If you don't want the stale bot to close it, then set a milestone for it."],"labels":["stale","platform:ide","build-script-change"]},{"title":"Add toolchain auto-detection mechanism for Daemon JVM via CLI","body":"### Context\r\nThe `Daemon toolchain auto-detection mechanism` is part of `Phase 1` of `toolchain support for Gradle Daemon`, where the motivation behind it and other technical details can be found on the public [spec document](https:\/\/docs.google.com\/document\/d\/1CU1e4QjPs2yj_SmJuykPUXutynvn4X_SF0BPXVnAlKI\/edit?usp=drive_link). This PR exposes the new `updateDaemonJvm` task responsible for populating the new `Gradle properties` located under the project directory `gradle\/gradle-build.properties` with the required Daemon toolchain criteria. This criteria will be used by the launcher to trigger the [auto-detection](https:\/\/docs.gradle.org\/current\/userguide\/toolchains.html#sec:auto_detection) mechanism to locate a local installed toolchain from known locations and apply [the rule of precedence](https:\/\/docs.gradle.org\/current\/userguide\/toolchains.html#sec:precedence) in case multiple toolchains match the criteria. The located toolchain will be used to set up the `Daemon JVM` to execute the build. An exception will be triggered in this phase in case doesn't exist the local installed toolchain matching the criteria. In addition, this PR doesn't include the `caching` for the auto-detection mechanism that will be implemented separated and the `TAPI` required changes to support this in the IDE.\r\n\r\n#### Tasks\r\nThose are the implemented tasks extracted from the spec document:\r\n - [Create necessary helpers to read\/write the new gradle-build.properties](https:\/\/github.com\/vmadalin\/gradle\/issues\/2)\r\n - [Expose a task to allow to update build JVM criteria via CLI](https:\/\/github.com\/vmadalin\/gradle\/issues\/11)\r\n - [Implement toolchain auto-detection for Gradle Daemon via CLI](https:\/\/github.com\/vmadalin\/gradle\/issues\/6)\r\n - [Validate toolchain resolution still applies the rules of precedence](https:\/\/github.com\/vmadalin\/gradle\/issues\/7)\r\n - [Validate different flows when \u201corg.gradle.java.home\u201d is defined](https:\/\/github.com\/vmadalin\/gradle\/issues\/19)\r\n - [Allow to disable Gradle daemon for builds](https:\/\/github.com\/vmadalin\/gradle\/issues\/10)\r\n - [Define a default Daemon JVM given a Gradle version](https:\/\/github.com\/vmadalin\/gradle\/issues\/20)\r\n\r\n#### Testing\r\nUnit tests:\r\n- [UpdateDaemonJvmTaskTest.groovy](https:\/\/github.com\/gradle\/gradle\/pull\/27898\/files#diff-f3c712050aa9f8a217e795bca933388851edcc8d3149651b1e521c03368bb751)\r\n- [PropertiesToDaemonJvmToolchainCriteriaConverterTest.groovy](https:\/\/github.com\/gradle\/gradle\/pull\/27898\/files#diff-f6130a479a27d4910ec575cab13c158a23a9ea67cfb0efbf89d963468ffd34e9)\r\n- [DaemonJavaToolchainQueryServiceTest.groovy](https:\/\/github.com\/gradle\/gradle\/pull\/27898\/files#diff-d5d33d0dde660ded2aa1c7fbe7b3fe0f569a1d9b5bf5f481a2bf592e01f48f34)\r\n- [DaemonProviderFactoryTest.groovy](https:\/\/github.com\/gradle\/gradle\/pull\/27898\/files#diff-47da314fcff22386af1b58c9a1e8695776c5fb1f5b8288d64e40f0768147d80a)\r\n\r\nIntegration tests\r\n- [UpdateDaemonJvmTaskIntegrationTest.groovy](https:\/\/github.com\/gradle\/gradle\/pull\/27898\/files#diff-36f2a3533944c972b512765734322a2ce360b76e8862bca628cd33ac5168db91)\r\n- [DaemonToolchainCoexistWithCurrentOptionsIntegrationTest.groovy](https:\/\/github.com\/gradle\/gradle\/pull\/27898\/files#diff-0648cf59677527625346262804055af164edbc6a66813c4e1157c1d39c378322)\r\n- [DaemonToolchainIntegrationTest.groovy](https:\/\/github.com\/gradle\/gradle\/pull\/27898\/files#diff-5fa2369a230dc8cf0eccd8bed69a095a9150ad2dcf6fc54379e8ec8c0440924c)\r\n- [DaemonToolchainInvalidCriteriaIntegrationTest.groovy](https:\/\/github.com\/gradle\/gradle\/pull\/27898\/files#diff-8aadfa142e6d865abb214e0c7cce581f46a2ea0020165cd13f815c4b76f92226)\r\n- [SingleUseDaemonIntegrationTest.groovy](https:\/\/github.com\/gradle\/gradle\/pull\/27898\/files#diff-904d2081f9b4794fba72b1a0ff0d2b85de1507d8754c2ac0e2a12415f0586f11)\r\n\r\n#### Demo\r\nSimple demo exposing how `updateDaemonJvm` and `daemon auto-detection mechanism` works:\r\n\r\nhttps:\/\/github.com\/gradle\/gradle\/assets\/18151158\/810aa62a-e05a-47c6-a257-bf86840b4cf4\r\n\r\n### Contributor Checklist\r\n- [x] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md)\r\n- [x] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [x] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [x] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team\r\n- [x] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective\r\n- [x] Provide unit tests (under `<subproject>\/src\/test`) to verify logic\r\n- [x] Update User Guide, DSL Reference, and Javadoc for public-facing changes\r\n- [x] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`\r\n- [x] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`\r\n","comments":["<h3>Change Summary<\/h3> This PR is 92.66% new code. <table> <tr> <td>Platform<\/td> <td>Added Lines<\/td> <td>% of Total Line Changes<\/td> <td>Deleted Lines<\/td> <td>% of Total Line Changes<\/td> <td>Files Changed<\/td> <td>% of Total Files Changed<\/td> <\/tr>\n<tr> <td>bt_ge_build_cache<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>build_infrastructure<\/td> <td>185<\/td> <td>6.17%<\/td> <td>38<\/td> <td>1.27%<\/td> <td>5<\/td> <td>4.67%<\/td> <\/tr>\n<tr> <td>core_configuration<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_execution<\/td> <td>2415<\/td> <td>80.53%<\/td> <td>132<\/td> <td>4.4%<\/td> <td>53<\/td> <td>49.53%<\/td> <\/tr>\n<tr> <td>core_runtime<\/td> <td>2415<\/td> <td>80.53%<\/td> <td>132<\/td> <td>4.4%<\/td> <td>53<\/td> <td>49.53%<\/td> <\/tr>\n<tr> <td>documentation<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>extensibility<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>gradle_enterprise<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>ide<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>jvm<\/td> <td>141<\/td> <td>4.7%<\/td> <td>24<\/td> <td>0.8%<\/td> <td>40<\/td> <td>37.38%<\/td> <\/tr>\n<tr> <td>kotlin_dsl<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>release_coordination<\/td> <td>1<\/td> <td>0.03%<\/td> <td>0<\/td> <td>0%<\/td> <td>1<\/td> <td>0.93%<\/td> <\/tr>\n<tr> <td>software<\/td> <td>1<\/td> <td>0.03%<\/td> <td>1<\/td> <td>0.03%<\/td> <td>1<\/td> <td>0.93%<\/td> <\/tr>\n<\/table>\n<automation id=\"summary_table\/summary_table\"\/>"],"labels":["in:daemon","in:toolchains","from:contributor"]},{"title":"`LoggingManager` is not thread-safe","body":"### Current Behavior\n\nGradle supports capturing a task's standard output or standard error with `LoggingManager`, which can be acquired by [`Task.getLogging()`](https:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/api\/Task.html#getLogging--) within a task.\r\n\r\nHowever, the structures backing `LogManager` are not thread-safe. If multiple tasks try to capture or redirect output at once (due to using `--parallel`), then standard output may be permanently redirected, causing it to no longer be printed to the console for the remainder of the build.\r\n\r\nThere is a related issue about using `getLogging()` in parallel (#6068). However, while that describes a possible enhancement, this definitely feels like a bug.\n\n### Expected Behavior\n\nWhen multiple tasks redirect or capture standard output, standard output on subsequent tasks should be printed to the console.\n\n### Context (optional)\n\nOne of the Gradle plugins I was using was using `captureStandardOutput` for several of its tasks. This caused later tasks (such as test runs) to not print their output to the console - particularly a pain in CI!\n\n### Steps to Reproduce\n\nThis can be reproduced by creating a multi-project build where tasks in both projects capture standard output.\r\n\r\nFor instance:\r\n\r\n<details><summary><code>settings.gradle.kts<\/code><\/summary>\r\n\r\n```kotlin\r\ninclude(\":subproject-1\")\r\ninclude(\":subproject-2\")\r\n```\r\n\r\n<\/details>\r\n\r\n<details><summary><code>build.gradle.kts<\/code><\/summary>\r\n\r\n```kotlin\r\nsubprojects {\r\n  val all by tasks.registering {\r\n    doFirst { println(\"Ran everything\") }\r\n  }\r\n\r\n  for (i in 0..100) {\r\n    val task = tasks.register(\"task_$i\") {\r\n      getLogging().captureStandardOutput(LogLevel.INFO)\r\n      doFirst { }\r\n    }\r\n    all { dependsOn(task) }\r\n  }\r\n}\r\n```\r\n\r\n<\/details>\r\n\r\nRunning `.\/gradlew all --no-parallel` will display:\r\n\r\n```\r\n> Task :subproject-1:all\r\nRan everything\r\n\r\n> Task :subproject-2:all\r\nRan everything\r\n\r\nBUILD SUCCESSFUL in 551ms\r\n204 actionable tasks: 204 executed\r\n```\r\n\r\nMeanwhile, using `.\/gradlew all --parallel` will not display any output:\r\n\r\n```\r\n\u1405 ..\/gradlew all --parallel\r\n\r\nBUILD SUCCESSFUL in 526ms\r\n204 actionable tasks: 204 executed\r\n```\r\n\r\nI've also attached this project [as a zip](https:\/\/github.com\/gradle\/gradle\/files\/14115688\/out.zip)\r\n\n\n### Gradle version\n\n8.5\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["in:logging","a:bug","has:reproducer"]},{"title":"Add support for FileContents#getAsText() with a charset\/encoding argument","body":"Closes #15802 . As @Vampire asked a while ago, adding support for specifying encoding of files when loading them as parameters:\r\n\r\n```kotlin\r\n  abstract class Consumer : DefaultTask() {\r\n      @get:Input\r\n      abstract val text: Property<String>\r\n      @TaskAction\r\n      fun consume() {\r\n          project.logger.lifecycle(\"Got message: \" + text.get())\r\n      }\r\n  }\r\n\r\n  tasks.register<Consumer>(\"consumer\") {\r\n      text = providers.fileContents(layout.projectDirectory.file(\"foo.txt\"))\r\n          .getAsText(\"ISO-8859-9\")\r\n  }\r\n```\r\n\r\n### Context\r\n<!--- Why do you believe many users will benefit from this change? -->\r\n<!--- Link to relevant issues or forum discussions here -->\r\n\r\n### Contributor Checklist\r\n- [x] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md)\r\n- [x] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [x] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [x] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team\r\n- [x] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective\r\n- [x] Provide unit tests (under `<subproject>\/src\/test`) to verify logic\r\n- [ ] Update User Guide, DSL Reference, and Javadoc for public-facing changes\r\n- [x] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`\r\n- [x] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["It might be good to also add a similar overload to [ExecOutput.StandardStreamContent](https:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/process\/ExecOutput.StandardStreamContent.html#getAsText--).","@mlopatkin \r\n\r\n> It might be good to also add a similar overload to [ExecOutput.StandardStreamContent](https:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/process\/ExecOutput.StandardStreamContent.html#getAsText--).\r\n\r\nDo you expect it to be a separate PR or to be inside this one?","> > It might be good to also add a similar overload to [ExecOutput.StandardStreamContent](https:\/\/docs.gradle.org\/current\/javadoc\/org\/gradle\/process\/ExecOutput.StandardStreamContent.html#getAsText--).\r\n> \r\n> Do you expect it to be a separate PR or to be inside this one?\r\n\r\nI don't mind having it here, but a separate PR can also work if it suits you better.","> I don't mind having it here, but a separate PR can also work if it suits you better.\r\n\r\nI will add a (real) good first issue as a follow-up @mlopatkin ","Thanks for finally implementing this. :-)\r\nWould it make sense to also improve the CC docs in the course of this PR regarding what I wrote in the first comment of that issue?","> Would it make sense to also improve the CC docs\r\n\r\n@Vampire Yes, I think so. I would wait for a consensus on the code implementation, and then I will patch the docs too","This pull request has been automatically marked as stale because it has not had recent activity. It will be closed in 14 days if no further activity occurs. If you don't want the stale bot to close it, then set a milestone for it."],"labels":["stale"]},{"title":"Support HTTP\/2 in build cache","body":"### Expected Behavior\n\nHTTP build cache should support HTTP\/2 calls for increased efficiency:\r\n- headers can be compressed\r\n- allows multiplexing of connections over one TCP connection\n\n### Current Behavior (optional)\n\nHTTP build cache only supports HTTP\/1.x currently due to the usage of Apache HttpClient 4.4.14.\n\n### Context\n\nBy upgrading Apache HttpClient to 5.3 (or higher), Gradle could unlock more efficient usage of HTTP connections across the board, including the build cache.","comments":["Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team and is prioritized by them.\r\n","The upgrade of `HttpClient` is complicated, I tried it once. We should do it, though."],"labels":["a:feature","in:build-cache","in:core-utilities"]},{"title":"Clarify how failOnNonReproducibleResolution() should work if constraints with ranges are published","body":"### Issue type\n\nMissing information\n\n### Problem description\n\nCreating this as _documentation issue_ as I am not sure what the expected behavior of `failOnNonReproducibleResolution()` is in this case.\r\n\r\nThe problem came up when using latest versions of **Spotbugs**. In its [metadata](https:\/\/repo1.maven.org\/maven2\/com\/github\/spotbugs\/spotbugs\/4.8.2\/spotbugs-4.8.2.module), it publishes a dependency with a clear `requiredVersion`:\r\n\r\nInside **dependencies** blocks:\r\n```\r\n        {\r\n          \"group\": \"org.apache.logging.log4j\",\r\n          \"module\": \"log4j-core\",\r\n          \"version\": {\r\n            \"requires\": \"2.22.0\"\r\n          }\r\n        },\r\n```\r\n\r\nIn addition it publishes constraints with ranges. In **dependencyConstraints** block:\r\n```\r\n        {\r\n          \"group\": \"org.apache.logging.log4j\",\r\n          \"module\": \"log4j-core\",\r\n          \"version\": {\r\n            \"strictly\": \"[2.17.1, 3[\",\r\n            \"requires\": \"[2.17.1, 3[\"\r\n          },\r\n          \"reason\": \"CVE-2021-44228, CVE-2021-45046, CVE-2021-45105, CVE-2021-44832: Log4j vulnerable to remote code execution and other critical security vulnerabilities\"\r\n        }\r\n```\r\n\r\n\r\nI would think that this publishing of ranges is okay, because there is a clear version defined and thus the resolution result is reproducible. However when turning on `failOnNonReproducibleResolution` the resolution fails with:\r\n\r\n```\r\nCould not resolve org.apache.logging.log4j:log4j-core:2.22.0: Resolution strategy disallows usage of dynamic versions\r\n```\r\n\r\nReproducer: https:\/\/github.com\/boris-petrov\/gradle-spotbugs-bug\r\n\r\nBuild Scan: https:\/\/scans.gradle.com\/s\/yowv7hwhqd7sm\/dependencies?focusedDependency=WzAsMiwzLFswLDIsWzIsM11dXQ&toggled=W1swXSxbMCwyXSxbMCwyLFsyXV1d\r\n\r\nRight now `failOnNonReproducibleResolution` is unusable as soon as you get any external library with such constraints into your build. We wonder, what the right solution for this is:\r\n- Is this a bug in `failOnNonReproducibleResolution`? To me it looks like that. Then this issue should be turned into a bug.\r\n- Should libraries not publish such constraints? What would be the argument for not doing so? (If there is a clear answer, we can open an issue at Spotbugs.)\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/current\/userguide\/resolution_strategy_tuning.html#reproducible-resolution","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n","I think this makes sense.  The devil's in the details about how we can detect the scenario where:\n- There's a range that makes the request dynamic\n- There are other constraints that make the request always resolve to a specific version\n\nIn that scenario, I don't think we should fail because there are no dynamic versions that can change the result.\n\nThis isn't something we're going to get to soon, do you have some ideas where this could be done?","I agree with what you say about how this feature _should_ work.\r\n\r\nI have no urgent need for this. There are much more severe bugs in dependency management that I think need to be addressed (like #22326).\r\n\r\nI created this issue also on behalf of @boris-petrov who discovered this (see https:\/\/github.com\/gradlex-org\/java-ecosystem-capabilities\/issues\/62#issuecomment-1915805718).\r\n\r\nI think leaving this feature in its current state is more hurting than helping. As I see it, the benefit of using this feature right now is very small.  You can only use it if you are \"lucky\". As soon as you have any dependency that adds constraints with ranges, it is useless. Which is somehow paradoxic: on the one hand we advertise for libraries to publish more and better metadata for years, but now if they do that, we run into these kinds of problems which leave users puzzled.\r\n\r\nSo why would you want this feature? To get reproducible builds. So it is \"nice\" to use it to get an early warning, but this feature alone won't make sure that your build is reproducible. And if you setup other solutions to check your build for reproducibility, those will most likely catch such problems as well. Also the configuration cache lets you know if it is out of date because of dynamic versions.\r\n\r\nIn my opinion, if there are no resources to fix this feature, I would rather think about discouraging\/deprecating it instead of just leaving things as they are. At least I would add a big note about this to the documentation."],"labels":["a:bug","in:gradle-module-metadata","in:dependency-resolution"]},{"title":"`SourceDirectorySet.srcDir(configurableFileTree)` doesn't support `ConfigurableFileTree` as argument","body":"### Current Behavior\r\n\r\nPassing ConfigurableFileTree of some Directory to `SourceDirectorySet.srcDir` makes the latter iterate through all files of the passed FileTree. And thus failing with following error:\r\n\r\n`> Source directory '<first file from the passed FileTree>' is not a directory.`\r\n\r\nThe current workaround is to create a lazy FileCollection that returns `fileTree.dir` and keeps its task dependencies.\r\nlike this: \r\n\r\n```kotlin\r\nval srcDirToAdd = project.files({ fileTree.dir }).buildBy(fileTree)\r\nsourceDirectorySet.srcDir(srcDirToAdd)\r\n```\r\n\r\nIt is important that getting `fileTree.dir` should be wrapped in lazy provider because accessing dir cant unexpectedly \r\nmaterialize underlying provider.\r\n\r\n### Expected Behavior\r\n\r\nFrom a [documentation](https:\/\/docs.gradle.org\/8.5\/userguide\/working_with_files.html#sec:file_trees) point of view a FileTree can represent a directory of some files. In this context, I'd expect that passing a FileTree as an argument to `SourceDirectorySet.srcDir` would be treated as a Directory + all filtering logic applied in the passed FilleTree.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\nHere is the sample `gradle.build.kts` that reproduces the problem:\r\n\r\n```kotlin\r\n\r\nabstract class MyTask : DefaultTask() {\r\n    @get:Inject\r\n    abstract val objects: ObjectFactory\r\n\r\n    @Suppress(\"LeakingThis\")\r\n    @get:InputFiles\r\n    val sources: SourceDirectorySet = objects.sourceDirectorySet(\"mysources\", \"MySources\")\r\n\r\n    @TaskAction\r\n    fun action() {\r\n        println(\"Sources:\")\r\n        println(sources.files.joinToString(\"\\n\"))\r\n    }\r\n}\r\n\r\nabstract class GeneratorTask : DefaultTask() {\r\n    @get:OutputDirectory\r\n    abstract val outputDirectory: DirectoryProperty\r\n\r\n    @TaskAction\r\n    fun action() {\r\n        outputDirectory.get().asFile.mkdirs()\r\n        outputDirectory.file(\"MyFile.kt\").get().asFile.writeText(\"\"\"fun myFunction() {}\"\"\")\r\n    }\r\n}\r\n\r\nval generatorTask = tasks.register<GeneratorTask>(\"generator\") {\r\n    outputDirectory.set(layout.buildDirectory.dir(\"generated\"))\r\n}\r\n\r\n\/\/ Some custom build logic that maps generatorTask output into ConfigurableFileTree\r\nval fileTree = objects.fileTree()\r\n    .from(generatorTask.map { it.outputDirectory.get() })\r\n    .builtBy(generatorTask) \/\/ is required because of #27881\r\n\r\nval wrappedFileTree = objects.fileCollection()\r\n    .from({ fileTree.dir })\r\n    .builtBy(fileTree)\r\n\r\nval myTask = tasks.register<MyTask>(\"myTask\") {\r\n    sources.srcDir(fileTree) \/\/ doesn't work\r\n\/\/    sources.srcDirs(wrappedFileTree) \/\/ works\r\n}\r\n```\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n***\r\n\r\n`FileTree` is indeed not a directory and cannot be passed to methods accepting a single file-like object like`srcDir`. \r\n@gradle\/bt-configuration Should we leave this as a documentation issue, improve something, or close it as \"works as intended\"?","@gradle\/bt-jvm, this seems to be a software model concept. Do you have an opinion on the topic?","I agree that this is weird. The problem is that a FileTree is a FileCollection, so `srcDir(FileCollection)` seems to mean \"add all of these directories\". My expectation is that this should have meant \"add one directory\" and failed when there are multiple directories provided. I think this is unintentional. \r\n\r\nI think I would avoid using `SourceDirectorySet` directly on a task. There are some other bits of its API that don't quite make sense (`compiledBy`, `classesDirectory` and `destinationDirectory`) on a task.  You could make this a part of an extension and use a `ConfigurableFileCollection` on the task. \r\n\r\nAs a workaround, I think:\r\n```\r\nsrcDir(generatorTask.flatMap { it.outputDirectory })\r\n```\r\nor even\r\n```\r\nsrcDir(generatorTask)\r\n```\r\nworks."],"labels":["a:bug","in:configuration-model",":wave: team-triage"]},{"title":"`ConfigurableFileTree.from(directoryProvider)` API doesn't preserve Task Dependencies of `directoryProvider`","body":"### Current Behavior\n\n`from` method of `ConfigurableFileTree` accepts any object that represents a Directory, including providers. However ConfigurableFileTree by itself implements Buildable and is capable in carrying task dependencies.  It has API to add task dependencies explicitly via `builtBy()` method.\r\n\r\nCurrent workaround is to provide task dependencies explicitly like this:\r\n\r\n```\r\nfileTree.from(provider).builtBy(provider)\r\n```\r\n\n\n### Expected Behavior\n\nI expect that calling `ConfigurableFileTree.from(directoryProvider)` will preserve task dependencies from `directoryProvider`.\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\nSample `build.gradle.kts` to reproduce\r\n\r\n```kotlin\r\nabstract class GeneratorTask : DefaultTask() {\r\n    @get:OutputDirectory\r\n    abstract val outputDirectory: DirectoryProperty\r\n\r\n    @TaskAction\r\n    fun action() {\r\n        outputDirectory.get().asFile.mkdirs()\r\n        outputDirectory.file(\"MyFile.kt\").get().asFile.writeText(\"\"\"fun myFunction() {}\"\"\")\r\n    }\r\n}\r\n\r\nabstract class ConsumerTask : DefaultTask() {\r\n    @get:InputDirectory\r\n    abstract val fileTree: ConfigurableFileTree\r\n\r\n    @TaskAction\r\n    fun action() {\r\n        println(\"Files:\")\r\n        println(fileTree.files.joinToString())\r\n    }\r\n}\r\n\r\nval generatorTask = tasks.register<GeneratorTask>(\"generator\") {\r\n    outputDirectory.set(layout.buildDirectory.dir(\"generated\"))\r\n}\r\n\r\nval provider: Provider<File> = generatorTask.map { it.outputDirectory }.flatMap { it.asFile }\r\n\r\nval consumerTask = tasks.register<ConsumerTask>(\"consumer\") {\r\n    fileTree.from(generatorTask.map { it.outputDirectory.get() }) \/\/ doesn't work\r\n\/\/    fileTree.from(generatorTask.flatMap { it.outputDirectory })    \/\/ doesn't work\r\n\r\n\/\/ works\r\n\/\/    val provider = generatorTask.map { it.outputDirectory.get() }\r\n\/\/    fileTree.from(provider).builtBy(provider)\r\n}\r\n```\r\n\r\nRun `.\/gradlew consumer` \r\n\r\nit is expected to see both `generator` and `consumer` executed and no failures happened. \n\n### Gradle version\n\n8.5\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n***\r\n\r\nThe team needs to decide whenever `fileTree` is expected to carry task dependency and if not, then requalify this to a documentation issue.\r\n\r\nLoosely related to:\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/25645"],"labels":["a:bug","in:configuration-model","re:comprehensibility"]},{"title":"Project artifact coordinates accessed via dependency resolution shouldn't be flagged as violations","body":"Via [IDEA-341827](https:\/\/youtrack.jetbrains.com\/issue\/IDEA-341827):\n> Artifact coordinates resolution for dependency that references another project.\n[GradleConfigurationModelBuilder.java](https:\/\/github.com\/JetBrains\/intellij-community\/blob\/685aa2e09c080b27ed07a64d0d287badf4eb2d8d\/plugins\/package-search\/gradle\/tooling\/src\/com\/jetbrains\/packagesearch\/intellij\/plugin\/gradle\/tooling\/GradleConfigurationModelBuilder.java#L29)","comments":["As suggested by @ljacomet in https:\/\/github.com\/gradle\/gradle\/issues\/28186#issuecomment-1959486065, I'm providing  another use case for this issue.\r\n\r\nIt looks like `DependencyHandler.testFixtures()` is not compatible with project isolation if a project dependency is passed to it because it uses `ProjectDerivedCapability` under the hood which is accessing project name, group and version. \r\n\r\nA stacktrace from configuration cache report when `testFixtures()` is used with project isolation enabled:\r\n```\r\norg.gradle.api.InvalidUserCodeException: Cannot access project ':a' from project ':b'\r\n\tat org.gradle.internal.component.external.model.ProjectDerivedCapability.equals(ProjectDerivedCapability.java:71)\r\n\tat com.google.common.base.Objects.equal(Objects.java:54)\r\n\tat com.google.common.collect.Lists.equalsImpl(Lists.java:1010)\r\n\tat com.google.common.collect.ImmutableList.equals(ImmutableList.java:685)\r\n\tat com.google.common.base.Objects.equal(Objects.java:54)\r\n\tat org.gradle.kotlin.dsl.TestImplementationConfigurationAccessorsKt.testImplementation(Unknown Source)\r\n\tat Build_gradle$1.invoke(build.gradle.kts:42)\r\n\tat Build_gradle$1.invoke(build.gradle.kts:7)\r\n\tat org.gradle.kotlin.dsl.ProjectExtensionsKt.dependencies(ProjectExtensions.kt:236)\r\n\tat Build_gradle.<init>(build.gradle.kts:7)\r\n\tat Program.execute(Unknown Source)\r\n\tat org.gradle.kotlin.dsl.execution.Interpreter$ProgramHost.evaluateSecondStageOf(Interpreter.kt:443)\r\n\tat Program.execute(Unknown Source)\r\n\tat org.gradle.tooling.internal.consumer.connection.NestedActionAwareBuildControllerAdapter.findModel(NestedActionAwareBuildControllerAdapter.java:31)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.DefaultBuildController.findModel(DefaultBuildController.java:69)\r\n\tat com.intellij.gradle.toolingExtension.modelProvider.GradleClassProjectModelProvider.populateProjectModels(GradleClassProjectModelProvider.java:52)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.addProjectModels(GradleModelFetchAction.java:184)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.lambda$addModels$2(GradleModelFetchAction.java:161)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.lambda$forEachModelFetchPhase$1(GradleModelFetchAction.java:153)\r\n\tat java.base\/java.util.stream.ReferencePipeline.forEachOrdered(ReferencePipeline.java:601)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.forEachModelFetchPhase(GradleModelFetchAction.java:153)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.addModels(GradleModelFetchAction.java:158)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.execute(GradleModelFetchAction.java:67)\r\n\tat org.jetbrains.plugins.gradle.model.ProjectImportAction.doExecute(ProjectImportAction.java:138)\r\n\tat org.jetbrains.plugins.gradle.model.ProjectImportAction.execute(ProjectImportAction.java:91)\r\n\tat org.jetbrains.plugins.gradle.model.ProjectImportAction.execute(ProjectImportAction.java:39)\r\n\tat java.base\/java.lang.Thread.run(Thread.java:1583)\r\n```\r\n\r\n","Thanks, @erdi.","FTR: [IDEA-341827](https:\/\/youtrack.jetbrains.com\/issue\/IDEA-341827) is no longer blocked on this as we agreed IDEA [should make model requests for the project coordinates](https:\/\/youtrack.jetbrains.com\/issue\/IDEA-341827\/Gradle-project-isolation-issues-in-Idea-Gradle-Sync#focus=Comments-27-9325043.0-0)."],"labels":["a:chore","in:configuration-model","in:isolated-projects"]},{"title":"Up-to-date checks and the build cache key are inconsistent for short values","body":"### Current Behavior\n\nGradle treats the same number that is added as an input to a task inconsistently between up-to-date checks and the build cache key whether it is added as a short or an integer:\r\n- up-to-date checks: integers and shorts are treated as a change\r\n- build cache key: the build cache key is the same if the input changes from integer to short.\n\n### Expected Behavior\n\nUp-to-date checks and the build cache key are consistent.\n\n### Context (optional)\n\nThis test exhibits the behavior: https:\/\/github.com\/gradle\/gradle\/blob\/1a5f5e3ebe9a1ce9602b37698ee3d9bc935255bd\/subprojects\/core\/src\/integTest\/groovy\/org\/gradle\/api\/tasks\/TaskParametersIntegrationTest.groovy#L341-L394\r\n\r\nIn particularly the line `\"123\"                | \"123 as short\"`.\r\n\r\nI attempted to fix the behaviour in https:\/\/github.com\/gradle\/gradle\/pull\/27865, though the execution team wants a different fix.\n\n### Steps to Reproduce\n\nSee the above test case.\n\n### Gradle version\n\n8.7\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["I think the solution here is to always treat `short` as `int` and `float` as `double`. "],"labels":["a:bug","in:build-cache"]},{"title":"Indicate safe varargs properly","body":"We have a few methods in the public API that use varargs and the compiler warns about potential heap pollution. We currently have these warnings suppressed using `@SuppressWarnings(\"unchecked\")`.\r\n\r\nThe proper way to fix them would be to use `@SafeVarargs`. However, using `@SafeVarargs` requires making the methods `final`, which is a breaking change, hence postponing them to the next major release.\r\n\r\nThe methods in question:\r\n\r\n- [ ] `GenerateBuildDashboard.aggregate()`\r\n- [ ] `AndSpec.and()`\r\n- [ ] `CollectionUtils.addAll()`\r\n","comments":[],"labels":["a:chore","in:core-utilities"]},{"title":"libs.versions.toml: improve error message when the TOML is invalid","body":"### Expected Behavior\n\nEvaluating support for version catalogs + `libs.versions.toml`, I did a rookie mistake and forgot to wrap the version number in quotes. Gradle should provide a helpful message, such as: \"The version definition for 'dynatest' is invalid: it must be a String yet it was float\".\n\n### Current Behavior (optional)\n\nDeclaring this TOML in your project:\r\n```toml\r\n[versions]\r\ndynatest = 0.24\r\n\r\n[libraries]\r\ndynatest = { module = \"com.github.mvysny.dynatest:dynatest\", version.ref = \"dynatest\" }\r\n```\r\nleads to:\r\n```\r\norg.gradle.api.InvalidUserDataException: Invalid TOML catalog definition:\r\n  - Alias definition 'dynatest' is invalid\r\n```\r\nI'm not sure in what way the alias definition is invalid; I don't see any alias in my file so the word 'alias' itself feels misleading.\n\n### Context\n\nThe correct TOML file:\r\n```toml\r\n[versions]\r\ndynatest = \"0.24\"\r\n\r\n[libraries]\r\ndynatest = { module = \"com.github.mvysny.dynatest:dynatest\", version.ref = \"dynatest\" }\r\n```\r\n","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:bug","in:dependency-version-catalog","re:comprehensibility"]},{"title":"distributionUrl not work correctly","body":"### Current Behavior\n\nI reset distributionUrl ,but it  not work correctly in IDEA, but it will build successfully in terminal\r\n\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/37319319\/20c775d9-0172-42a9-a00b-7d8bbd355c74)\r\n\n\n### Expected Behavior\n\nall to  donwload gradle-x.zip will use my set up distributionUrl  in IDEA \n\n### Context (optional)\n\nhttps:\/\/youtrack.jetbrains.com\/issue\/IDEA-344183\/Ive-set-up-a-proxy-image-for-gradle-but-IDEA-doesnt-actually-use-proxies-everywhere.\n\n### Steps to Reproduce\n\nhttps:\/\/github.com\/aohanhongzhi\/JavalinDemo-Kotlin\n\n### Gradle version\n\n8.0 and 8.5\n\n### Build scan URL (optional)\n\nhttps:\/\/gradle.com\/s\/eqdlih3yq5elk\n\n### Your Environment (optional)\n\nubuntu , window , macos","comments":["in gradle source code  , the gradle download url is hardcode\r\n\r\n```kotlin\r\nprivate fun createSourceRepository() = ivy {\r\n    val repoName = repositoryNameFor(gradleVersion)\r\n    name = \"Gradle $repoName\"\r\n    setUrl(\"https:\/\/services.gradle.org\/$repoName\")\r\n    metadataSources {\r\n        artifact()\r\n    }\r\n    patternLayout {\r\n        if (isSnapshot(gradleVersion)) {\r\n            ivy(\"\/dummy\") \/\/ avoids a lookup that interferes with version listing\r\n        }\r\n        artifact(\"[module]-[revision](-[classifier])(.[ext])\")\r\n    }\r\n}\r\n\r\n```\r\n\r\nand I dont have valid proxy to download it , \r\nI only have distributionUrl in my area","Can you please provide the full stack trace as text and not a screenshot so that we can differentiate between an IntelliJ issue and an issue in the code you provided us with.","> Can you please provide the full stack trace as text and not a screenshot so that we can differentiate between an IntelliJ issue and an issue in the code you provided us with.\r\n\r\n```java\r\nStarting Gradle Daemon...\r\nGradle Daemon started in 964 ms\r\n\r\n> Configure project :app\r\nhxy.dragon.MainKt\r\n\r\n> Task :prepareKotlinBuildScriptModel UP-TO-DATE\r\nUnexpected exception while resolving Gradle distribution sources: Could not resolve all files for configuration ':detachedConfiguration1'.\r\norg.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration$ArtifactResolveException: Could not resolve all files for configuration ':detachedConfiguration1'.\r\n\tat org.gradle.api.internal.artifacts.ResolveExceptionContextualizer.mapFailure(ResolveExceptionContextualizer.java:81)\r\n\tat org.gradle.api.internal.artifacts.ResolveExceptionContextualizer.mapFailures(ResolveExceptionContextualizer.java:60)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration$DefaultResolutionHost.mapFailure(DefaultConfiguration.java:2310)\r\n\tat org.gradle.api.internal.artifacts.configurations.ResolutionHost.rethrowFailure(ResolutionHost.java:30)\r\n\tat org.gradle.api.internal.artifacts.configurations.ResolutionBackedFileCollection.maybeThrowResolutionFailures(ResolutionBackedFileCollection.java:84)\r\n\tat org.gradle.api.internal.artifacts.configurations.ResolutionBackedFileCollection.visitContents(ResolutionBackedFileCollection.java:74)\r\n\tat org.gradle.api.internal.file.AbstractFileCollection.visitStructure(AbstractFileCollection.java:359)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration.visitContents(DefaultConfiguration.java:557)\r\n\tat org.gradle.api.internal.file.AbstractFileCollection.getFiles(AbstractFileCollection.java:123)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultUnlockedConfiguration_Decorated.getFiles(Unknown Source)\r\n\tat org.gradle.kotlin.dsl.resolver.SourceDistributionResolver$sourceDirs$2.invoke(SourceDistributionProvider.kt:59)\r\n\tat org.gradle.kotlin.dsl.resolver.SourceDistributionResolver$sourceDirs$2.invoke(SourceDistributionProvider.kt:56)\r\n\tat kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74)\r\n\tat org.gradle.kotlin.dsl.resolver.SourceDistributionResolver.getSourceDirs(SourceDistributionProvider.kt:56)\r\n\tat org.gradle.kotlin.dsl.resolver.SourceDistributionResolver.sourceDirs(SourceDistributionProvider.kt:49)\r\n\tat org.gradle.kotlin.dsl.resolver.SourcePathProvider.downloadedSources(SourcePathProvider.kt:84)\r\n\tat org.gradle.kotlin.dsl.resolver.SourcePathProvider.sourceRootsOf(SourcePathProvider.kt:76)\r\n\tat org.gradle.kotlin.dsl.resolver.SourcePathProvider.sourcePathFor(SourcePathProvider.kt:43)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinScriptTargetModelBuilder.gradleSource(KotlinBuildScriptModelBuilder.kt:436)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinScriptTargetModelBuilder.buildModel(KotlinBuildScriptModelBuilder.kt:417)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinBuildScriptModelBuilder.kotlinBuildScriptModelFor$kotlin_dsl_tooling_builders(KotlinBuildScriptModelBuilder.kt:119)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder.buildFor(KotlinDslScriptsModelBuilder.kt:144)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder.access$buildFor(KotlinDslScriptsModelBuilder.kt:109)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder$buildAll$1.create(KotlinDslScriptsModelBuilder.kt:121)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder$buildAll$1.create(KotlinDslScriptsModelBuilder.kt:120)\r\n\tat org.gradle.internal.resources.AbstractResourceLockRegistry.allowUncontrolledAccessToAnyResource(AbstractResourceLockRegistry.java:61)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.allowUncontrolledAccessToAnyProject(DefaultWorkerLeaseService.java:241)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder.buildAll(KotlinDslScriptsModelBuilder.kt:120)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder.buildAll(KotlinDslScriptsModelBuilder.kt:109)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$BuilderWithNoParameter.build(DefaultToolingModelBuilderRegistry.java:264)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$LockSingleProjectBuilder.lambda$build$0(DefaultToolingModelBuilderRegistry.java:304)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.lambda$fromMutableState$2(DefaultProjectStateRegistry.java:429)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.withReplacedLocks(DefaultWorkerLeaseService.java:360)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.fromMutableState(DefaultProjectStateRegistry.java:429)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$LockSingleProjectBuilder.build(DefaultToolingModelBuilderRegistry.java:304)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$BuildOperationWrappingBuilder$1.call(DefaultToolingModelBuilderRegistry.java:337)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$BuildOperationWrappingBuilder.build(DefaultToolingModelBuilderRegistry.java:334)\r\n\tat org.gradle.internal.build.DefaultBuildToolingModelController$AbstractToolingScope.getModel(DefaultBuildToolingModelController.java:82)\r\n\tat org.gradle.tooling.internal.provider.runner.DefaultBuildController.getModel(DefaultBuildController.java:106)\r\n\tat org.gradle.tooling.internal.consumer.connection.ParameterAwareBuildControllerAdapter.getModel(ParameterAwareBuildControllerAdapter.java:39)\r\n\tat org.gradle.tooling.internal.consumer.connection.UnparameterizedBuildController.getModel(UnparameterizedBuildController.java:113)\r\n\tat org.gradle.tooling.internal.consumer.connection.NestedActionAwareBuildControllerAdapter.getModel(NestedActionAwareBuildControllerAdapter.java:31)\r\n\tat org.gradle.tooling.internal.consumer.connection.UnparameterizedBuildController.findModel(UnparameterizedBuildController.java:97)\r\n\tat org.gradle.tooling.internal.consumer.connection.NestedActionAwareBuildControllerAdapter.findModel(NestedActionAwareBuildControllerAdapter.java:31)\r\n\tat org.gradle.tooling.internal.consumer.connection.UnparameterizedBuildController.findModel(UnparameterizedBuildController.java:81)\r\n\tat org.gradle.tooling.internal.consumer.connection.NestedActionAwareBuildControllerAdapter.findModel(NestedActionAwareBuildControllerAdapter.java:31)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.DefaultBuildController.findModel(DefaultBuildController.java:69)\r\n\tat org.jetbrains.kotlin.idea.gradleTooling.KotlinDslScriptModelProvider.populateBuildModels(KotlinDslScriptModelProvider.kt:22)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.addBuildModels(GradleModelFetchAction.java:207)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.lambda$addModels$2(GradleModelFetchAction.java:165)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.lambda$forEachModelFetchPhase$1(GradleModelFetchAction.java:153)\r\n\tat java.base@21\/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\r\n\tat java.base@21\/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)\r\n\tat java.base@21\/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)\r\n\tat java.base@21\/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\r\n\tat java.base@21\/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\r\n\tat java.base@21\/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\r\n\tat java.base@21\/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.base@21\/java.util.stream.ReferencePipeline.forEachOrdered(ReferencePipeline.java:601)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.forEachModelFetchPhase(GradleModelFetchAction.java:153)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.addModels(GradleModelFetchAction.java:158)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.execute(GradleModelFetchAction.java:67)\r\n\tat org.jetbrains.plugins.gradle.model.ProjectImportAction.doExecute(ProjectImportAction.java:138)\r\n\tat org.jetbrains.plugins.gradle.model.ProjectImportAction.execute(ProjectImportAction.java:91)\r\n\tat org.jetbrains.plugins.gradle.model.ProjectImportAction.execute(ProjectImportAction.java:39)\r\n\tat org.gradle.tooling.internal.consumer.connection.InternalBuildActionAdapter.execute(InternalBuildActionAdapter.java:64)\r\n\tat org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner$ActionAdapter.runAction(AbstractClientProvidedBuildActionRunner.java:131)\r\n\tat org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner$ActionAdapter.fromBuildModel(AbstractClientProvidedBuildActionRunner.java:104)\r\n\tat org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner$ActionAdapter.fromBuildModel(AbstractClientProvidedBuildActionRunner.java:84)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeModelCreator.fromBuildModel(DefaultBuildTreeModelCreator.java:57)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.lambda$fromBuildModel$2(DefaultBuildTreeLifecycleController.java:89)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.lambda$runBuild$4(DefaultBuildTreeLifecycleController.java:119)\r\n\tat org.gradle.internal.model.StateTransitionController.lambda$transition$6(StateTransitionController.java:169)\r\n\tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:266)\r\n\tat org.gradle.internal.model.StateTransitionController.lambda$transition$7(StateTransitionController.java:169)\r\n\tat org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:44)\r\n\tat org.gradle.internal.model.StateTransitionController.transition(StateTransitionController.java:169)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.runBuild(DefaultBuildTreeLifecycleController.java:116)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.fromBuildModel(DefaultBuildTreeLifecycleController.java:81)\r\n\tat org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner.runClientAction(AbstractClientProvidedBuildActionRunner.java:43)\r\n\tat org.gradle.tooling.internal.provider.runner.ClientProvidedPhasedActionRunner.run(ClientProvidedPhasedActionRunner.java:53)\r\n\tat org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)\r\n\tat org.gradle.internal.buildtree.ProblemReportingBuildActionRunner.run(ProblemReportingBuildActionRunner.java:49)\r\n\tat org.gradle.launcher.exec.BuildOutcomeReportingBuildActionRunner.run(BuildOutcomeReportingBuildActionRunner.java:65)\r\n\tat org.gradle.tooling.internal.provider.FileSystemWatchingBuildActionRunner.run(FileSystemWatchingBuildActionRunner.java:140)\r\n\tat org.gradle.launcher.exec.BuildCompletionNotifyingBuildActionRunner.run(BuildCompletionNotifyingBuildActionRunner.java:41)\r\n\tat org.gradle.launcher.exec.RootBuildLifecycleBuildActionExecutor.lambda$execute$0(RootBuildLifecycleBuildActionExecutor.java:40)\r\n\tat org.gradle.composite.internal.DefaultRootBuildState.run(DefaultRootBuildState.java:123)\r\n\tat org.gradle.launcher.exec.RootBuildLifecycleBuildActionExecutor.execute(RootBuildLifecycleBuildActionExecutor.java:40)\r\n\tat org.gradle.internal.buildtree.InitDeprecationLoggingActionExecutor.execute(InitDeprecationLoggingActionExecutor.java:62)\r\n\tat org.gradle.internal.buildtree.InitProblems.execute(InitProblems.java:38)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeContext.execute(DefaultBuildTreeContext.java:40)\r\n\tat org.gradle.launcher.exec.BuildTreeLifecycleBuildActionExecutor.lambda$execute$0(BuildTreeLifecycleBuildActionExecutor.java:58)\r\n\tat org.gradle.internal.buildtree.BuildTreeState.run(BuildTreeState.java:58)\r\n\tat org.gradle.launcher.exec.BuildTreeLifecycleBuildActionExecutor.execute(BuildTreeLifecycleBuildActionExecutor.java:58)\r\n\tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor$3.call(RunAsBuildOperationBuildActionExecutor.java:61)\r\n\tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor$3.call(RunAsBuildOperationBuildActionExecutor.java:57)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n\tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor.execute(RunAsBuildOperationBuildActionExecutor.java:57)\r\n\tat org.gradle.launcher.exec.RunAsWorkerThreadBuildActionExecutor.lambda$execute$0(RunAsWorkerThreadBuildActionExecutor.java:36)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:264)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:128)\r\n\tat org.gradle.launcher.exec.RunAsWorkerThreadBuildActionExecutor.execute(RunAsWorkerThreadBuildActionExecutor.java:36)\r\n\tat org.gradle.tooling.internal.provider.continuous.ContinuousBuildActionExecutor.execute(ContinuousBuildActionExecutor.java:110)\r\n\tat org.gradle.tooling.internal.provider.SubscribableBuildActionExecutor.execute(SubscribableBuildActionExecutor.java:64)\r\n\tat org.gradle.internal.session.DefaultBuildSessionContext.execute(DefaultBuildSessionContext.java:46)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter$ActionImpl.apply(BuildSessionLifecycleBuildActionExecuter.java:92)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter$ActionImpl.apply(BuildSessionLifecycleBuildActionExecuter.java:80)\r\n\tat org.gradle.internal.session.BuildSessionState.run(BuildSessionState.java:69)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter.execute(BuildSessionLifecycleBuildActionExecuter.java:62)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter.execute(BuildSessionLifecycleBuildActionExecuter.java:41)\r\n\tat org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:64)\r\n\tat org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:32)\r\n\tat org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:51)\r\n\tat org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:39)\r\n\tat org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:47)\r\n\tat org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:31)\r\n\tat org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:65)\r\n\tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:39)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:29)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:35)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.create(ForwardClientInput.java:78)\r\n\tat org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.create(ForwardClientInput.java:75)\r\n\tat org.gradle.util.internal.Swapper.swap(Swapper.java:38)\r\n\tat org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:75)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:64)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:63)\r\n\tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:84)\r\n\tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:52)\r\n\tat org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:297)\r\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n\tat org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)\r\n\tat java.base@21\/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)\r\n\tat java.base@21\/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)\r\n\tat java.base@21\/java.lang.Thread.run(Thread.java:1583)\r\nCaused by: org.gradle.internal.resolve.ModuleVersionResolveException: Could not resolve gradle:gradle:8.5.\r\nRequired by:\r\n    project :\r\nCaused by: org.gradle.internal.resolve.ModuleVersionResolveException: Could not resolve gradle:gradle:8.5.\r\nCaused by: org.gradle.api.resources.ResourceException: Could not get resource 'https:\/\/services.gradle.org\/distributions\/gradle-8.5-src.zip'.\r\n\tat org.gradle.internal.resource.ResourceExceptions.failure(ResourceExceptions.java:74)\r\n\tat org.gradle.internal.resource.ResourceExceptions.getFailed(ResourceExceptions.java:57)\r\n\tat org.gradle.api.internal.artifacts.repositories.resolver.DefaultExternalResourceArtifactResolver.staticResourceExists(DefaultExternalResourceArtifactResolver.java:83)\r\n\tat org.gradle.api.internal.artifacts.repositories.resolver.DefaultExternalResourceArtifactResolver.artifactExists(DefaultExternalResourceArtifactResolver.java:67)\r\n\tat org.gradle.api.internal.artifacts.repositories.metadata.DefaultArtifactMetadataSource.create(DefaultArtifactMetadataSource.java:57)\r\n\tat org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver.resolveStaticDependency(ExternalResourceResolver.java:232)\r\n\tat org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver.doResolveComponentMetaData(ExternalResourceResolver.java:227)\r\n\tat org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver$RemoteRepositoryAccess.resolveComponentMetaData(ExternalResourceResolver.java:413)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.CachingModuleComponentRepository$ResolveAndCacheRepositoryAccess.resolveComponentMetaDataAndCache(CachingModuleComponentRepository.java:405)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.CachingModuleComponentRepository$ResolveAndCacheRepositoryAccess.lambda$resolveComponentMetaData$1(CachingModuleComponentRepository.java:397)\r\n\tat org.gradle.cache.internal.ProducerGuard$AdaptiveProducerGuard.guardByKey(ProducerGuard.java:97)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.CachingModuleComponentRepository$ResolveAndCacheRepositoryAccess.resolveComponentMetaData(CachingModuleComponentRepository.java:396)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ErrorHandlingModuleComponentRepository$ErrorHandlingModuleComponentRepositoryAccess.lambda$resolveComponentMetaData$5(ErrorHandlingModuleComponentRepository.java:153)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ErrorHandlingModuleComponentRepository$ErrorHandlingModuleComponentRepositoryAccess.lambda$tryResolveAndMaybeBlacklist$15(ErrorHandlingModuleComponentRepository.java:213)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ErrorHandlingModuleComponentRepository$ErrorHandlingModuleComponentRepositoryAccess.tryResolveAndMaybeBlacklist(ErrorHandlingModuleComponentRepository.java:227)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ErrorHandlingModuleComponentRepository$ErrorHandlingModuleComponentRepositoryAccess.tryResolveAndMaybeBlacklist(ErrorHandlingModuleComponentRepository.java:212)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ErrorHandlingModuleComponentRepository$ErrorHandlingModuleComponentRepositoryAccess.performOperationWithRetries(ErrorHandlingModuleComponentRepository.java:206)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ErrorHandlingModuleComponentRepository$ErrorHandlingModuleComponentRepositoryAccess.resolveComponentMetaData(ErrorHandlingModuleComponentRepository.java:152)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ComponentMetaDataResolveState.process(ComponentMetaDataResolveState.java:70)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ComponentMetaDataResolveState.resolve(ComponentMetaDataResolveState.java:62)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainComponentMetaDataResolver.findBestMatch(RepositoryChainComponentMetaDataResolver.java:139)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainComponentMetaDataResolver.findBestMatch(RepositoryChainComponentMetaDataResolver.java:119)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainComponentMetaDataResolver.resolveModule(RepositoryChainComponentMetaDataResolver.java:91)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainComponentMetaDataResolver.resolve(RepositoryChainComponentMetaDataResolver.java:62)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.resolveengine.ComponentResolversChain$ComponentMetaDataResolverChain.resolve(ComponentResolversChain.java:90)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.clientmodule.ClientModuleResolver.resolve(ClientModuleResolver.java:70)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState.resolve(ComponentState.java:225)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState.getResolveStateOrNull(ComponentState.java:169)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState.calculateTargetConfigurations(EdgeState.java:218)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState.attachToTargetConfigurations(EdgeState.java:147)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder.attachToTargetRevisionsSerially(DependencyGraphBuilder.java:364)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder.resolveEdges(DependencyGraphBuilder.java:256)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder.traverseGraph(DependencyGraphBuilder.java:193)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder.resolve(DependencyGraphBuilder.java:166)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.resolveengine.DependencyGraphResolver.resolveGraph(DependencyGraphResolver.java:170)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.DefaultConfigurationResolver.resolveGraph(DefaultConfigurationResolver.java:251)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ShortCircuitEmptyConfigurationResolver.resolveGraph(ShortCircuitEmptyConfigurationResolver.java:88)\r\n\tat org.gradle.api.internal.artifacts.ivyservice.ErrorHandlingConfigurationResolver.resolveGraph(ErrorHandlingConfigurationResolver.java:77)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration$1.call(DefaultConfiguration.java:711)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration$1.call(DefaultConfiguration.java:703)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration.resolveGraphInBuildOperation(DefaultConfiguration.java:703)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration.lambda$resolveExclusivelyIfRequired$3(DefaultConfiguration.java:695)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$CalculatedModelValueImpl.update(DefaultProjectStateRegistry.java:504)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration.resolveExclusivelyIfRequired(DefaultConfiguration.java:687)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration.resolveGraphIfRequired(DefaultConfiguration.java:680)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration.access$1800(DefaultConfiguration.java:167)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration$VisitedArtifactsSetProvider.getValue(DefaultConfiguration.java:1622)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration$VisitedArtifactsSetProvider.getValue(DefaultConfiguration.java:1613)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration$SelectedArtifactsProvider.getValue(DefaultConfiguration.java:1659)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration$SelectedArtifactsProvider.getValue(DefaultConfiguration.java:1626)\r\n\tat org.gradle.api.internal.artifacts.configurations.ResolutionBackedFileCollection.getSelectedArtifacts(ResolutionBackedFileCollection.java:95)\r\n\tat org.gradle.api.internal.artifacts.configurations.ResolutionBackedFileCollection.visitContents(ResolutionBackedFileCollection.java:73)\r\n\tat org.gradle.api.internal.file.AbstractFileCollection.visitStructure(AbstractFileCollection.java:359)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration.visitContents(DefaultConfiguration.java:557)\r\n\tat org.gradle.api.internal.file.AbstractFileCollection.getFiles(AbstractFileCollection.java:123)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultUnlockedConfiguration_Decorated.getFiles(Unknown Source)\r\n\tat org.gradle.kotlin.dsl.resolver.SourceDistributionResolver$sourceDirs$2.invoke(SourceDistributionProvider.kt:59)\r\n\tat org.gradle.kotlin.dsl.resolver.SourceDistributionResolver$sourceDirs$2.invoke(SourceDistributionProvider.kt:56)\r\n\tat kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74)\r\n\tat org.gradle.kotlin.dsl.resolver.SourceDistributionResolver.getSourceDirs(SourceDistributionProvider.kt:56)\r\n\tat org.gradle.kotlin.dsl.resolver.SourceDistributionResolver.sourceDirs(SourceDistributionProvider.kt:49)\r\n\tat org.gradle.kotlin.dsl.resolver.SourcePathProvider.downloadedSources(SourcePathProvider.kt:84)\r\n\tat org.gradle.kotlin.dsl.resolver.SourcePathProvider.sourceRootsOf(SourcePathProvider.kt:76)\r\n\tat org.gradle.kotlin.dsl.resolver.SourcePathProvider.sourcePathFor(SourcePathProvider.kt:43)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinScriptTargetModelBuilder.gradleSource(KotlinBuildScriptModelBuilder.kt:436)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinScriptTargetModelBuilder.buildModel(KotlinBuildScriptModelBuilder.kt:417)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinBuildScriptModelBuilder.kotlinBuildScriptModelFor$kotlin_dsl_tooling_builders(KotlinBuildScriptModelBuilder.kt:119)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder.buildFor(KotlinDslScriptsModelBuilder.kt:144)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder.access$buildFor(KotlinDslScriptsModelBuilder.kt:109)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder$buildAll$1.create(KotlinDslScriptsModelBuilder.kt:121)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder$buildAll$1.create(KotlinDslScriptsModelBuilder.kt:120)\r\n\tat org.gradle.internal.resources.AbstractResourceLockRegistry.allowUncontrolledAccessToAnyResource(AbstractResourceLockRegistry.java:61)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.allowUncontrolledAccessToAnyProject(DefaultWorkerLeaseService.java:241)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder.buildAll(KotlinDslScriptsModelBuilder.kt:120)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder.buildAll(KotlinDslScriptsModelBuilder.kt:109)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$BuilderWithNoParameter.build(DefaultToolingModelBuilderRegistry.java:264)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$LockSingleProjectBuilder.lambda$build$0(DefaultToolingModelBuilderRegistry.java:304)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.lambda$fromMutableState$2(DefaultProjectStateRegistry.java:429)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.withReplacedLocks(DefaultWorkerLeaseService.java:360)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.fromMutableState(DefaultProjectStateRegistry.java:429)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$LockSingleProjectBuilder.build(DefaultToolingModelBuilderRegistry.java:304)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$BuildOperationWrappingBuilder$1.call(DefaultToolingModelBuilderRegistry.java:337)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$BuildOperationWrappingBuilder.build(DefaultToolingModelBuilderRegistry.java:334)\r\n\tat org.gradle.internal.build.DefaultBuildToolingModelController$AbstractToolingScope.getModel(DefaultBuildToolingModelController.java:82)\r\n\tat org.gradle.tooling.internal.provider.runner.DefaultBuildController.getModel(DefaultBuildController.java:106)\r\n\tat org.gradle.tooling.internal.consumer.connection.ParameterAwareBuildControllerAdapter.getModel(ParameterAwareBuildControllerAdapter.java:39)\r\n\tat org.gradle.tooling.internal.consumer.connection.UnparameterizedBuildController.getModel(UnparameterizedBuildController.java:113)\r\n\tat org.gradle.tooling.internal.consumer.connection.NestedActionAwareBuildControllerAdapter.getModel(NestedActionAwareBuildControllerAdapter.java:31)\r\n\tat org.gradle.tooling.internal.consumer.connection.UnparameterizedBuildController.findModel(UnparameterizedBuildController.java:97)\r\n\tat org.gradle.tooling.internal.consumer.connection.NestedActionAwareBuildControllerAdapter.findModel(NestedActionAwareBuildControllerAdapter.java:31)\r\n\tat org.gradle.tooling.internal.consumer.connection.UnparameterizedBuildController.findModel(UnparameterizedBuildController.java:81)\r\n\tat org.gradle.tooling.internal.consumer.connection.NestedActionAwareBuildControllerAdapter.findModel(NestedActionAwareBuildControllerAdapter.java:31)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.DefaultBuildController.findModel(DefaultBuildController.java:69)\r\n\tat org.jetbrains.kotlin.idea.gradleTooling.KotlinDslScriptModelProvider.populateBuildModels(KotlinDslScriptModelProvider.kt:22)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.addBuildModels(GradleModelFetchAction.java:207)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.lambda$addModels$2(GradleModelFetchAction.java:165)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.lambda$forEachModelFetchPhase$1(GradleModelFetchAction.java:153)\r\n\tat java.base\/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\r\n\tat java.base\/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)\r\n\tat java.base\/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)\r\n\tat java.base\/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\r\n\tat java.base\/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\r\n\tat java.base\/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\r\n\tat java.base\/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.base\/java.util.stream.ReferencePipeline.forEachOrdered(ReferencePipeline.java:601)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.forEachModelFetchPhase(GradleModelFetchAction.java:153)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.addModels(GradleModelFetchAction.java:158)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.execute(GradleModelFetchAction.java:67)\r\n\tat org.jetbrains.plugins.gradle.model.ProjectImportAction.doExecute(ProjectImportAction.java:138)\r\n\tat org.jetbrains.plugins.gradle.model.ProjectImportAction.execute(ProjectImportAction.java:91)\r\n\tat org.jetbrains.plugins.gradle.model.ProjectImportAction.execute(ProjectImportAction.java:39)\r\n\tat org.gradle.tooling.internal.consumer.connection.InternalBuildActionAdapter.execute(InternalBuildActionAdapter.java:64)\r\n\tat org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner$ActionAdapter.runAction(AbstractClientProvidedBuildActionRunner.java:131)\r\n\tat org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner$ActionAdapter.fromBuildModel(AbstractClientProvidedBuildActionRunner.java:104)\r\n\tat org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner$ActionAdapter.fromBuildModel(AbstractClientProvidedBuildActionRunner.java:84)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeModelCreator.fromBuildModel(DefaultBuildTreeModelCreator.java:57)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.lambda$fromBuildModel$2(DefaultBuildTreeLifecycleController.java:89)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.lambda$runBuild$4(DefaultBuildTreeLifecycleController.java:119)\r\n\tat org.gradle.internal.model.StateTransitionController.lambda$transition$6(StateTransitionController.java:169)\r\n\tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:266)\r\n\tat org.gradle.internal.model.StateTransitionController.lambda$transition$7(StateTransitionController.java:169)\r\n\tat org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:44)\r\n\tat org.gradle.internal.model.StateTransitionController.transition(StateTransitionController.java:169)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.runBuild(DefaultBuildTreeLifecycleController.java:116)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.fromBuildModel(DefaultBuildTreeLifecycleController.java:81)\r\n\tat org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner.runClientAction(AbstractClientProvidedBuildActionRunner.java:43)\r\n\tat org.gradle.tooling.internal.provider.runner.ClientProvidedPhasedActionRunner.run(ClientProvidedPhasedActionRunner.java:53)\r\n\tat org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)\r\n\tat org.gradle.internal.buildtree.ProblemReportingBuildActionRunner.run(ProblemReportingBuildActionRunner.java:49)\r\n\tat org.gradle.launcher.exec.BuildOutcomeReportingBuildActionRunner.run(BuildOutcomeReportingBuildActionRunner.java:65)\r\n\tat org.gradle.tooling.internal.provider.FileSystemWatchingBuildActionRunner.run(FileSystemWatchingBuildActionRunner.java:140)\r\n\tat org.gradle.launcher.exec.BuildCompletionNotifyingBuildActionRunner.run(BuildCompletionNotifyingBuildActionRunner.java:41)\r\n\tat org.gradle.launcher.exec.RootBuildLifecycleBuildActionExecutor.lambda$execute$0(RootBuildLifecycleBuildActionExecutor.java:40)\r\n\tat org.gradle.composite.internal.DefaultRootBuildState.run(DefaultRootBuildState.java:123)\r\n\tat org.gradle.launcher.exec.RootBuildLifecycleBuildActionExecutor.execute(RootBuildLifecycleBuildActionExecutor.java:40)\r\n\tat org.gradle.internal.buildtree.InitDeprecationLoggingActionExecutor.execute(InitDeprecationLoggingActionExecutor.java:62)\r\n\tat org.gradle.internal.buildtree.InitProblems.execute(InitProblems.java:38)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeContext.execute(DefaultBuildTreeContext.java:40)\r\n\tat org.gradle.launcher.exec.BuildTreeLifecycleBuildActionExecutor.lambda$execute$0(BuildTreeLifecycleBuildActionExecutor.java:58)\r\n\tat org.gradle.internal.buildtree.BuildTreeState.run(BuildTreeState.java:58)\r\n\tat org.gradle.launcher.exec.BuildTreeLifecycleBuildActionExecutor.execute(BuildTreeLifecycleBuildActionExecutor.java:58)\r\n\tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor$3.call(RunAsBuildOperationBuildActionExecutor.java:61)\r\n\tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor$3.call(RunAsBuildOperationBuildActionExecutor.java:57)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n\tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor.execute(RunAsBuildOperationBuildActionExecutor.java:57)\r\n\tat org.gradle.launcher.exec.RunAsWorkerThreadBuildActionExecutor.lambda$execute$0(RunAsWorkerThreadBuildActionExecutor.java:36)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:264)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:128)\r\n\tat org.gradle.launcher.exec.RunAsWorkerThreadBuildActionExecutor.execute(RunAsWorkerThreadBuildActionExecutor.java:36)\r\n\tat org.gradle.tooling.internal.provider.continuous.ContinuousBuildActionExecutor.execute(ContinuousBuildActionExecutor.java:110)\r\n\tat org.gradle.tooling.internal.provider.SubscribableBuildActionExecutor.execute(SubscribableBuildActionExecutor.java:64)\r\n\tat org.gradle.internal.session.DefaultBuildSessionContext.execute(DefaultBuildSessionContext.java:46)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter$ActionImpl.apply(BuildSessionLifecycleBuildActionExecuter.java:92)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter$ActionImpl.apply(BuildSessionLifecycleBuildActionExecuter.java:80)\r\n\tat org.gradle.internal.session.BuildSessionState.run(BuildSessionState.java:69)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter.execute(BuildSessionLifecycleBuildActionExecuter.java:62)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter.execute(BuildSessionLifecycleBuildActionExecuter.java:41)\r\n\tat org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:64)\r\n\tat org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:32)\r\n\tat org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:51)\r\n\tat org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:39)\r\n\tat org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:47)\r\n\tat org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:31)\r\n\tat org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:65)\r\n\tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:39)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:29)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:35)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.create(ForwardClientInput.java:78)\r\n\tat org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.create(ForwardClientInput.java:75)\r\n\tat org.gradle.util.internal.Swapper.swap(Swapper.java:38)\r\n\tat org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:75)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:64)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:63)\r\n\tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:84)\r\n\tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:52)\r\n\tat org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:297)\r\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n\tat org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)\r\n\tat java.base\/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)\r\n\tat java.base\/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)\r\n\tat java.base\/java.lang.Thread.run(Thread.java:1583)\r\nCaused by: org.gradle.internal.resource.transport.http.HttpRequestException: Could not HEAD 'https:\/\/github.com\/gradle\/gradle-distributions\/releases\/download\/v8.5.0\/gradle-8.5-src.zip'.\r\n\tat org.gradle.internal.resource.transport.http.HttpClientHelper.createHttpRequestException(HttpClientHelper.java:122)\r\n\tat org.gradle.internal.resource.transport.http.HttpClientHelper.performRequest(HttpClientHelper.java:114)\r\n\tat org.gradle.internal.resource.transport.http.HttpClientHelper.performRawHead(HttpClientHelper.java:90)\r\n\tat org.gradle.internal.resource.transport.http.HttpClientHelper.performHead(HttpClientHelper.java:94)\r\n\tat org.gradle.internal.resource.transport.http.HttpResourceAccessor.getMetaData(HttpResourceAccessor.java:64)\r\n\tat org.gradle.internal.resource.transfer.DefaultExternalResourceConnector.getMetaData(DefaultExternalResourceConnector.java:66)\r\n\tat org.gradle.internal.resource.transfer.ProgressLoggingExternalResourceAccessor$MetadataOperation.call(ProgressLoggingExternalResourceAccessor.java:155)\r\n\tat org.gradle.internal.resource.transfer.ProgressLoggingExternalResourceAccessor$MetadataOperation.call(ProgressLoggingExternalResourceAccessor.java:143)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n\tat org.gradle.internal.resource.transfer.ProgressLoggingExternalResourceAccessor.getMetaData(ProgressLoggingExternalResourceAccessor.java:52)\r\n\tat org.gradle.internal.resource.transfer.AccessorBackedExternalResource.getMetaData(AccessorBackedExternalResource.java:156)\r\n\tat org.gradle.api.internal.artifacts.repositories.resolver.DefaultExternalResourceArtifactResolver.staticResourceExists(DefaultExternalResourceArtifactResolver.java:79)\r\n\t... 212 more\r\nCaused by: org.apache.http.conn.ConnectTimeoutException: Connect to github.com:443 [github.com\/20.205.243.166] failed: Read timed out\r\n\tat org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:151)\r\n\tat org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:376)\r\n\tat org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:393)\r\n\tat org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236)\r\n\tat org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:186)\r\n\tat org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89)\r\n\tat org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)\r\n\tat org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)\r\n\tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\r\n\tat org.gradle.internal.resource.transport.http.HttpClientHelper.performHttpRequest(HttpClientHelper.java:199)\r\n\tat org.gradle.internal.resource.transport.http.HttpClientHelper.performHttpRequest(HttpClientHelper.java:175)\r\n\tat org.gradle.internal.resource.transport.http.HttpClientHelper.executeGetOrHead(HttpClientHelper.java:164)\r\n\tat org.gradle.internal.resource.transport.http.HttpClientHelper.performRequest(HttpClientHelper.java:112)\r\n\t... 229 more\r\nCaused by: java.net.SocketTimeoutException: Read timed out\r\n\tat java.base\/sun.nio.ch.NioSocketImpl.timedRead(NioSocketImpl.java:278)\r\n\tat java.base\/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:304)\r\n\tat java.base\/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:346)\r\n\tat java.base\/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:796)\r\n\tat java.base\/java.net.Socket$SocketInputStream.read(Socket.java:1099)\r\n\tat java.base\/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:489)\r\n\tat java.base\/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:483)\r\n\tat java.base\/sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:160)\r\n\tat java.base\/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)\r\n\tat java.base\/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1506)\r\n\tat java.base\/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1421)\r\n\tat java.base\/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:455)\r\n\tat java.base\/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:426)\r\n\tat org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:436)\r\n\tat org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:384)\r\n\tat org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:142)\r\n\t... 241 more\r\nUnexpected exception while resolving Gradle distribution sources: Could not resolve all files for configuration ':app:detachedConfiguration1'.\r\norg.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration$ArtifactResolveException: Could not resolve all files for configuration ':app:detachedConfiguration1'.\r\n\tat org.gradle.api.internal.artifacts.ResolveExceptionContextualizer.mapFailure(ResolveExceptionContextualizer.java:81)\r\n\tat org.gradle.api.internal.artifacts.ResolveExceptionContextualizer.mapFailures(ResolveExceptionContextualizer.java:60)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration$DefaultResolutionHost.mapFailure(DefaultConfiguration.java:2310)\r\n\tat org.gradle.api.internal.artifacts.configurations.ResolutionHost.rethrowFailure(ResolutionHost.java:30)\r\n\tat org.gradle.api.internal.artifacts.configurations.ResolutionBackedFileCollection.maybeThrowResolutionFailures(ResolutionBackedFileCollection.java:84)\r\n\tat org.gradle.api.internal.artifacts.configurations.ResolutionBackedFileCollection.visitContents(ResolutionBackedFileCollection.java:74)\r\n\tat org.gradle.api.internal.file.AbstractFileCollection.visitStructure(AbstractFileCollection.java:359)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultConfiguration.visitContents(DefaultConfiguration.java:557)\r\n\tat org.gradle.api.internal.file.AbstractFileCollection.getFiles(AbstractFileCollection.java:123)\r\n\tat org.gradle.api.internal.artifacts.configurations.DefaultUnlockedConfiguration_Decorated.getFiles(Unknown Source)\r\n\tat org.gradle.kotlin.dsl.resolver.SourceDistributionResolver$sourceDirs$2.invoke(SourceDistributionProvider.kt:59)\r\n\tat org.gradle.kotlin.dsl.resolver.SourceDistributionResolver$sourceDirs$2.invoke(SourceDistributionProvider.kt:56)\r\n\tat kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74)\r\n\tat org.gradle.kotlin.dsl.resolver.SourceDistributionResolver.getSourceDirs(SourceDistributionProvider.kt:56)\r\n\tat org.gradle.kotlin.dsl.resolver.SourceDistributionResolver.sourceDirs(SourceDistributionProvider.kt:49)\r\n\tat org.gradle.kotlin.dsl.resolver.SourcePathProvider.downloadedSources(SourcePathProvider.kt:84)\r\n\tat org.gradle.kotlin.dsl.resolver.SourcePathProvider.sourceRootsOf(SourcePathProvider.kt:76)\r\n\tat org.gradle.kotlin.dsl.resolver.SourcePathProvider.sourcePathFor(SourcePathProvider.kt:43)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinScriptTargetModelBuilder.gradleSource(KotlinBuildScriptModelBuilder.kt:436)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinScriptTargetModelBuilder.buildModel(KotlinBuildScriptModelBuilder.kt:417)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinBuildScriptModelBuilder.kotlinBuildScriptModelFor$kotlin_dsl_tooling_builders(KotlinBuildScriptModelBuilder.kt:119)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder.buildFor(KotlinDslScriptsModelBuilder.kt:144)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder.access$buildFor(KotlinDslScriptsModelBuilder.kt:109)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder$buildAll$1.create(KotlinDslScriptsModelBuilder.kt:121)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder$buildAll$1.create(KotlinDslScriptsModelBuilder.kt:120)\r\n\tat org.gradle.internal.resources.AbstractResourceLockRegistry.allowUncontrolledAccessToAnyResource(AbstractResourceLockRegistry.java:61)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.allowUncontrolledAccessToAnyProject(DefaultWorkerLeaseService.java:241)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder.buildAll(KotlinDslScriptsModelBuilder.kt:120)\r\n\tat org.gradle.kotlin.dsl.tooling.builders.KotlinDslScriptsModelBuilder.buildAll(KotlinDslScriptsModelBuilder.kt:109)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$BuilderWithNoParameter.build(DefaultToolingModelBuilderRegistry.java:264)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$LockSingleProjectBuilder.lambda$build$0(DefaultToolingModelBuilderRegistry.java:304)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.lambda$fromMutableState$2(DefaultProjectStateRegistry.java:429)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.withReplacedLocks(DefaultWorkerLeaseService.java:360)\r\n\tat org.gradle.api.internal.project.DefaultProjectStateRegistry$ProjectStateImpl.fromMutableState(DefaultProjectStateRegistry.java:429)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$LockSingleProjectBuilder.build(DefaultToolingModelBuilderRegistry.java:304)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$BuildOperationWrappingBuilder$1.call(DefaultToolingModelBuilderRegistry.java:337)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n\tat org.gradle.tooling.provider.model.internal.DefaultToolingModelBuilderRegistry$BuildOperationWrappingBuilder.build(DefaultToolingModelBuilderRegistry.java:334)\r\n\tat org.gradle.internal.build.DefaultBuildToolingModelController$AbstractToolingScope.getModel(DefaultBuildToolingModelController.java:82)\r\n\tat org.gradle.tooling.internal.provider.runner.DefaultBuildController.getModel(DefaultBuildController.java:106)\r\n\tat org.gradle.tooling.internal.consumer.connection.ParameterAwareBuildControllerAdapter.getModel(ParameterAwareBuildControllerAdapter.java:39)\r\n\tat org.gradle.tooling.internal.consumer.connection.UnparameterizedBuildController.getModel(UnparameterizedBuildController.java:113)\r\n\tat org.gradle.tooling.internal.consumer.connection.NestedActionAwareBuildControllerAdapter.getModel(NestedActionAwareBuildControllerAdapter.java:31)\r\n\tat org.gradle.tooling.internal.consumer.connection.UnparameterizedBuildController.findModel(UnparameterizedBuildController.java:97)\r\n\tat org.gradle.tooling.internal.consumer.connection.NestedActionAwareBuildControllerAdapter.findModel(NestedActionAwareBuildControllerAdapter.java:31)\r\n\tat org.gradle.tooling.internal.consumer.connection.UnparameterizedBuildController.findModel(UnparameterizedBuildController.java:81)\r\n\tat org.gradle.tooling.internal.consumer.connection.NestedActionAwareBuildControllerAdapter.findModel(NestedActionAwareBuildControllerAdapter.java:31)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.DefaultBuildController.findModel(DefaultBuildController.java:69)\r\n\tat org.jetbrains.kotlin.idea.gradleTooling.KotlinDslScriptModelProvider.populateBuildModels(KotlinDslScriptModelProvider.kt:22)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.addBuildModels(GradleModelFetchAction.java:207)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.lambda$addModels$2(GradleModelFetchAction.java:165)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.lambda$forEachModelFetchPhase$1(GradleModelFetchAction.java:153)\r\n\tat java.base@21\/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\r\n\tat java.base@21\/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)\r\n\tat java.base@21\/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)\r\n\tat java.base@21\/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\r\n\tat java.base@21\/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\r\n\tat java.base@21\/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\r\n\tat java.base@21\/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.base@21\/java.util.stream.ReferencePipeline.forEachOrdered(ReferencePipeline.java:601)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.forEachModelFetchPhase(GradleModelFetchAction.java:153)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.addModels(GradleModelFetchAction.java:158)\r\n\tat com.intellij.gradle.toolingExtension.modelAction.GradleModelFetchAction.execute(GradleModelFetchAction.java:67)\r\n\tat org.jetbrains.plugins.gradle.model.ProjectImportAction.doExecute(ProjectImportAction.java:138)\r\n\tat org.jetbrains.plugins.gradle.model.ProjectImportAction.execute(ProjectImportAction.java:91)\r\n\tat org.jetbrains.plugins.gradle.model.ProjectImportAction.execute(ProjectImportAction.java:39)\r\n\tat org.gradle.tooling.internal.consumer.connection.InternalBuildActionAdapter.execute(InternalBuildActionAdapter.java:64)\r\n\tat org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner$ActionAdapter.runAction(AbstractClientProvidedBuildActionRunner.java:131)\r\n\tat org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner$ActionAdapter.fromBuildModel(AbstractClientProvidedBuildActionRunner.java:104)\r\n\tat org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner$ActionAdapter.fromBuildModel(AbstractClientProvidedBuildActionRunner.java:84)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeModelCreator.fromBuildModel(DefaultBuildTreeModelCreator.java:57)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.lambda$fromBuildModel$2(DefaultBuildTreeLifecycleController.java:89)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.lambda$runBuild$4(DefaultBuildTreeLifecycleController.java:119)\r\n\tat org.gradle.internal.model.StateTransitionController.lambda$transition$6(StateTransitionController.java:169)\r\n\tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:266)\r\n\tat org.gradle.internal.model.StateTransitionController.lambda$transition$7(StateTransitionController.java:169)\r\n\tat org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:44)\r\n\tat org.gradle.internal.model.StateTransitionController.transition(StateTransitionController.java:169)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.runBuild(DefaultBuildTreeLifecycleController.java:116)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.fromBuildModel(DefaultBuildTreeLifecycleController.java:81)\r\n\tat org.gradle.tooling.internal.provider.runner.AbstractClientProvidedBuildActionRunner.runClientAction(AbstractClientProvidedBuildActionRunner.java:43)\r\n\tat org.gradle.tooling.internal.provider.runner.ClientProvidedPhasedActionRunner.run(ClientProvidedPhasedActionRunner.java:53)\r\n\tat org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)\r\n\tat org.gradle.internal.buildtree.ProblemReportingBuildActionRunner.run(ProblemReportingBuildActionRunner.java:49)\r\n\tat org.gradle.launcher.exec.BuildOutcomeReportingBuildActionRunner.run(BuildOutcomeReportingBuildActionRunner.java:65)\r\n\tat org.gradle.tooling.internal.provider.FileSystemWatchingBuildActionRunner.run(FileSystemWatchingBuildActionRunner.java:140)\r\n\tat org.gradle.launcher.exec.BuildCompletionNotifyingBuildActionRunner.run(BuildCompletionNotifyingBuildActionRunner.java:41)\r\n\tat org.gradle.launcher.exec.RootBuildLifecycleBuildActionExecutor.lambda$execute$0(RootBuildLifecycleBuildActionExecutor.java:40)\r\n\tat org.gradle.composite.internal.DefaultRootBuildState.run(DefaultRootBuildState.java:123)\r\n\tat org.gradle.launcher.exec.RootBuildLifecycleBuildActionExecutor.execute(RootBuildLifecycleBuildActionExecutor.java:40)\r\n\tat org.gradle.internal.buildtree.InitDeprecationLoggingActionExecutor.execute(InitDeprecationLoggingActionExecutor.java:62)\r\n\tat org.gradle.internal.buildtree.InitProblems.execute(InitProblems.java:38)\r\n\tat org.gradle.internal.buildtree.DefaultBuildTreeContext.execute(DefaultBuildTreeContext.java:40)\r\n\tat org.gradle.launcher.exec.BuildTreeLifecycleBuildActionExecutor.lambda$execute$0(BuildTreeLifecycleBuildActionExecutor.java:58)\r\n\tat org.gradle.internal.buildtree.BuildTreeState.run(BuildTreeState.java:58)\r\n\tat org.gradle.launcher.exec.BuildTreeLifecycleBuildActionExecutor.execute(BuildTreeLifecycleBuildActionExecutor.java:58)\r\n\tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor$3.call(RunAsBuildOperationBuildActionExecutor.java:61)\r\n\tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor$3.call(RunAsBuildOperationBuildActionExecutor.java:57)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n\tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor.execute(RunAsBuildOperationBuildActionExecutor.java:57)\r\n\tat org.gradle.launcher.exec.RunAsWorkerThreadBuildActionExecutor.lambda$execute$0(RunAsWorkerThreadBuildActionExecutor.java:36)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:264)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:128)\r\n\tat org.gradle.launcher.exec.RunAsWorkerThreadBuildActionExecutor.execute(RunAsWorkerThreadBuildActionExecutor.java:36)\r\n\tat org.gradle.tooling.internal.provider.continuous.ContinuousBuildActionExecutor.execute(ContinuousBuildActionExecutor.java:110)\r\n\tat org.gradle.tooling.internal.provider.SubscribableBuildActionExecutor.execute(SubscribableBuildActionExecutor.java:64)\r\n\tat org.gradle.internal.session.DefaultBuildSessionContext.execute(DefaultBuildSessionContext.java:46)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter$ActionImpl.apply(BuildSessionLifecycleBuildActionExecuter.java:92)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter$ActionImpl.apply(BuildSessionLifecycleBuildActionExecuter.java:80)\r\n\tat org.gradle.internal.session.BuildSessionState.run(BuildSessionState.java:69)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter.execute(BuildSessionLifecycleBuildActionExecuter.java:62)\r\n\tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter.execute(BuildSessionLifecycleBuildActionExecuter.java:41)\r\n\tat org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:64)\r\n\tat org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:32)\r\n\tat org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:51)\r\n\tat org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:39)\r\n\tat org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:47)\r\n\tat org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:31)\r\n\tat org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:65)\r\n\tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:39)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:29)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:35)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.create(ForwardClientInput.java:78)\r\n\tat org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.create(ForwardClientInput.java:75)\r\n\tat org.gradle.util.internal.Swapper.swap(Swapper.java:38)\r\n\tat org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:75)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:64)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:63)\r\n\tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:84)\r\n\tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n\tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n\tat org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:52)\r\n\tat org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:297)\r\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n\tat org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)\r\n\tat java.base@21\/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)\r\n\tat java.base@21\/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)\r\n\tat java.base@21\/java.lang.Thread.run(Thread.java:1583)\r\nCaused by: org.gradle.internal.resolve.ModuleVersionResolveException: Could not resolve gradle:gradle:8.5.\r\nRequired by:\r\n    project :app\r\nCaused by: org.gradle.internal.resolve.ModuleVersionResolveException: Skipped due to earlier error\r\n\r\nBUILD SUCCESSFUL in 1m 48s\r\n\r\n```\r\n\r\n\r\nI hope it can download by `distributionUrl`\r\n","Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n","I hope this problem can be resolved soon\u3002","Download src.zip from services.gradle.org over and over again, but it doesn't work\r\n\r\nSelecting a local Gradle must also download src.zip","src.zip undownloading, IDEA will report an error and the project will not be compiled","> src.zip undownloading, IDEA will report an error and the project will not be compiled\r\n\r\nyes , it is a serious problem."],"labels":["a:bug","in:kotlin-dsl","in:ide"]},{"title":"Certain combinations of `jacoco` plugin, `withDebug(true)`, test suite dependencies, and `pluginClasspath` cause the testee Gradle scripts to fail compiling","body":"### Current Behavior\r\n\r\nIf you\r\n- either\r\n  - have `implementation(project())`\r\n  - and putting the actual code jar in its default location to the `pluginClasspath`\r\n- or\r\n  - have the classes directories on the test dependencies like with the default `test` task\r\n  - and having the classes directories in the `pluginClasspath`\r\n- and have `withDebug(true)`\r\n- and are applying the `jacoco` plugin\r\n\r\n**then** it fails to find the classes as the code is filtered out from the compile classpath before compiling the script in this line: [https:\/\/github.com\/gradle\/gradle\/blob\/master\/platforms\/core-configuration\/kotlin-d[\u2026]org\/gradle\/kotlin\/dsl\/provider\/KotlinScriptClassPathProvider.kt](https:\/\/github.com\/gradle\/gradle\/blob\/master\/platforms\/core-configuration\/kotlin-dsl\/src\/main\/kotlin\/org\/gradle\/kotlin\/dsl\/provider\/KotlinScriptClassPathProvider.kt#L127)\r\n\r\nThe effect is, that with the given reproducer and steps, `test2`, `test4`, and `test5` work fine, as the classes are in different locations of the filtering line and for `test` and `test3` the `with debug true` test fails with \"Unresolved reference: test\" as the plugin class cannot be found on the compile classpath.\r\n\r\n### Expected Behavior\r\n\r\nAll 10 tests should succeed.\r\n\r\n### Context (optional)\r\n\r\n`.\/build.gradle.kts`\r\n```kts\r\nplugins {\r\n    `kotlin-dsl`\r\n    groovy\r\n    jacoco\r\n}\r\n\r\nval copyJar by tasks.registering {\r\n    inputs.files(tasks.jar)\r\n    outputs.files(layout.buildDirectory.file(\"code.jar\"))\r\n    doLast {\r\n        copy {\r\n            from(tasks.jar)\r\n            into(layout.buildDirectory)\r\n            rename { \"code.jar\" }\r\n        }\r\n    }\r\n}\r\n\r\ntesting {\r\n    suites {\r\n        val test by existing(JvmTestSuite::class) {\r\n            useSpock(\"2.3-groovy-3.0\")\r\n        }\r\n        val test2 by registering(JvmTestSuite::class) {\r\n            useSpock(\"2.3-groovy-3.0\")\r\n            dependencies {\r\n                implementation(project())\r\n            }\r\n        }\r\n        val test3 by registering(JvmTestSuite::class) {\r\n            useSpock(\"2.3-groovy-3.0\")\r\n            dependencies {\r\n                implementation(project())\r\n            }\r\n            targets.configureEach {\r\n                testTask {\r\n                    dependsOn(tasks.jar)\r\n                    systemProperty(\"codeJar\", tasks.jar.get().archiveFile.get().asFile.absolutePath)\r\n                }\r\n            }\r\n        }\r\n        val test4 by registering(JvmTestSuite::class) {\r\n            useSpock(\"2.3-groovy-3.0\")\r\n            dependencies {\r\n                implementation(project())\r\n            }\r\n            targets.configureEach {\r\n                testTask {\r\n                    dependsOn(copyJar)\r\n                    systemProperty(\"codeJar\", copyJar.get().outputs.files.singleFile.absolutePath)\r\n                }\r\n            }\r\n        }\r\n        val test5 by registering(JvmTestSuite::class) {\r\n            useSpock(\"2.3-groovy-3.0\")\r\n            val testSourceSet = sources\r\n            val testCompileClasspathConfiguration = configurations[testSourceSet.compileClasspathConfigurationName]\r\n            val testRuntimeClasspathConfiguration = configurations[testSourceSet.runtimeClasspathConfigurationName]\r\n            val mainSourceSet = sourceSets[\"main\"]\r\n            val mainSourceSetOutput = mainSourceSet.output\r\n            val testSourceSetOutput = testSourceSet.output\r\n            testSourceSet.compileClasspath = objects.fileCollection().from(listOf(mainSourceSetOutput, testCompileClasspathConfiguration))\r\n            testSourceSet.runtimeClasspath = objects.fileCollection().from(listOf(testSourceSetOutput, mainSourceSetOutput, testRuntimeClasspathConfiguration))\r\n            targets.configureEach {\r\n                testTask {\r\n                    dependsOn(tasks.jar)\r\n                    systemProperty(\"codeJar\", tasks.jar.get().archiveFile.get().asFile.absolutePath)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ngradlePlugin {\r\n    plugins {\r\n        val test by registering {\r\n            id = \"test.plugin\"\r\n            implementationClass = \"test.Plugin\"\r\n        }\r\n        testSourceSet(sourceSets[\"test2\"])\r\n        testSourceSet(sourceSets[\"test3\"])\r\n        testSourceSet(sourceSets[\"test4\"])\r\n        testSourceSet(sourceSets[\"test5\"])\r\n    }\r\n}\r\n```\r\n`.\/gradle\/wrapper\/gradle-wrapper.properties`\r\n```properties\r\ndistributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper\/dists\r\ndistributionUrl=https\\:\/\/services.gradle.org\/distributions\/gradle-8.5-bin.zip\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper\/dists\r\n```\r\n`.\/settings.gradle.kts`\r\n```kts\r\ndependencyResolutionManagement {\r\n    repositories {\r\n        mavenCentral()\r\n    }\r\n}\r\n\r\nrootProject.name = \"showcase\"\r\n```\r\n`.\/src\/main\/kotlin\/test\/Plugin.kt`\r\n```kt\r\npackage test\r\n\r\nimport org.gradle.api.Plugin\r\nimport org.gradle.api.initialization.Settings\r\n\r\nabstract class Plugin : Plugin<Settings> {\r\n    override fun apply(target: Settings) = Unit\r\n}\r\n```\r\n`.\/src\/test\/groovy\/Test.groovy`\r\n```groovy\r\nimport org.gradle.testkit.runner.GradleRunner\r\n\r\nimport spock.lang.Specification\r\nimport spock.lang.TempDir\r\nimport spock.util.io.FileSystemFixture\r\n\r\nclass Test extends Specification {\r\n   @TempDir\r\n   FileSystemFixture rootDir\r\n\r\n   def 'with debug #debug'() {\r\n      given:\r\n         rootDir.file('settings.gradle.kts') << '''\r\n            import test.Plugin\r\n            plugins {\r\n                id(\"test.plugin\")\r\n            }\r\n            println(Plugin::class)\r\n            rootProject.name = \"testee\"\r\n         '''.stripIndent(true)\r\n\r\n      when:\r\n         GradleRunner\r\n               .create()\r\n               .forwardOutput()\r\n               .withPluginClasspath()\r\n               .withProjectDir(rootDir.currentPath.toFile())\r\n               .withArguments('--dry-run')\r\n               .withDebug(debug)\r\n               .build()\r\n\r\n      then:\r\n         noExceptionThrown()\r\n\r\n      where:\r\n         debug << [true, false]\r\n   }\r\n}\r\n```\r\n`.\/src\/test2\/groovy\/Test.groovy`\r\n```groovy\r\nimport org.gradle.testkit.runner.GradleRunner\r\n\r\nimport spock.lang.Specification\r\nimport spock.lang.TempDir\r\nimport spock.util.io.FileSystemFixture\r\n\r\nclass Test extends Specification {\r\n   @TempDir\r\n   FileSystemFixture rootDir\r\n\r\n   def 'with debug #debug'() {\r\n      given:\r\n         rootDir.file('settings.gradle.kts') << '''\r\n            import test.Plugin\r\n            plugins {\r\n                id(\"test.plugin\")\r\n            }\r\n            println(Plugin::class)\r\n            rootProject.name = \"testee\"\r\n         '''.stripIndent(true)\r\n\r\n      when:\r\n         GradleRunner\r\n               .create()\r\n               .forwardOutput()\r\n               .withPluginClasspath()\r\n               .withProjectDir(rootDir.currentPath.toFile())\r\n               .withArguments('--dry-run')\r\n               .withDebug(debug)\r\n               .build()\r\n\r\n      then:\r\n         noExceptionThrown()\r\n\r\n      where:\r\n         debug << [true, false]\r\n   }\r\n}\r\n```\r\n`.\/src\/test3\/groovy\/Test.groovy`\r\n```groovy\r\nimport org.gradle.testkit.runner.GradleRunner\r\n\r\nimport spock.lang.Specification\r\nimport spock.lang.TempDir\r\nimport spock.util.io.FileSystemFixture\r\n\r\nclass Test extends Specification {\r\n   @TempDir\r\n   FileSystemFixture rootDir\r\n\r\n   def 'with debug #debug'() {\r\n      given:\r\n         rootDir.file('settings.gradle.kts') << '''\r\n            import test.Plugin\r\n            plugins {\r\n                id(\"test.plugin\")\r\n            }\r\n            println(Plugin::class)\r\n            rootProject.name = \"testee\"\r\n         '''.stripIndent(true)\r\n\r\n      when:\r\n         GradleRunner\r\n               .create()\r\n               .forwardOutput()\r\n               .withPluginClasspath()\r\n               .with { it.withPluginClasspath(it.pluginClasspath.findAll { it.file } + new File(System.getProperty(\"codeJar\"))) }\r\n               .withProjectDir(rootDir.currentPath.toFile())\r\n               .withArguments('--dry-run')\r\n               .withDebug(debug)\r\n               .build()\r\n\r\n      then:\r\n         noExceptionThrown()\r\n\r\n      where:\r\n         debug << [true, false]\r\n   }\r\n}\r\n```\r\n`.\/src\/test4\/groovy\/Test.groovy`\r\n```groovy\r\nimport org.gradle.testkit.runner.GradleRunner\r\n\r\nimport spock.lang.Specification\r\nimport spock.lang.TempDir\r\nimport spock.util.io.FileSystemFixture\r\n\r\nclass Test extends Specification {\r\n   @TempDir\r\n   FileSystemFixture rootDir\r\n\r\n   def 'with debug #debug'() {\r\n      given:\r\n         rootDir.file('settings.gradle.kts') << '''\r\n            import test.Plugin\r\n            plugins {\r\n                id(\"test.plugin\")\r\n            }\r\n            println(Plugin::class)\r\n            rootProject.name = \"testee\"\r\n         '''.stripIndent(true)\r\n\r\n      when:\r\n         GradleRunner\r\n               .create()\r\n               .forwardOutput()\r\n               .withPluginClasspath()\r\n               .with { it.withPluginClasspath(it.pluginClasspath.findAll { it.file } + new File(System.getProperty(\"codeJar\"))) }\r\n               .withProjectDir(rootDir.currentPath.toFile())\r\n               .withArguments('--dry-run')\r\n               .withDebug(debug)\r\n               .build()\r\n\r\n      then:\r\n         noExceptionThrown()\r\n\r\n      where:\r\n         debug << [true, false]\r\n   }\r\n}\r\n```\r\n`.\/src\/test5\/groovy\/Test.groovy`\r\n```groovy\r\nimport org.gradle.testkit.runner.GradleRunner\r\n\r\nimport spock.lang.Specification\r\nimport spock.lang.TempDir\r\nimport spock.util.io.FileSystemFixture\r\n\r\nclass Test extends Specification {\r\n   @TempDir\r\n   FileSystemFixture rootDir\r\n\r\n   def 'with debug #debug'() {\r\n      given:\r\n         rootDir.file('settings.gradle.kts') << '''\r\n            import test.Plugin\r\n            plugins {\r\n                id(\"test.plugin\")\r\n            }\r\n            println(Plugin::class)\r\n            rootProject.name = \"testee\"\r\n         '''.stripIndent(true)\r\n\r\n      when:\r\n         GradleRunner\r\n               .create()\r\n               .forwardOutput()\r\n               .withPluginClasspath()\r\n               .with { it.withPluginClasspath(it.pluginClasspath.findAll { it.file } + new File(System.getProperty(\"codeJar\"))) }\r\n               .withProjectDir(rootDir.currentPath.toFile())\r\n               .withArguments('--dry-run')\r\n               .withDebug(debug)\r\n               .build()\r\n\r\n      then:\r\n         noExceptionThrown()\r\n\r\n      where:\r\n         debug << [true, false]\r\n   }\r\n}\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\n`.\/gradlew test test2 test3 test4 test5 -i --continue`\r\n\r\n### Gradle version\r\n\r\nTested and reproduced with 7.6.3 and 8.5\r\n","comments":["As a work-around when not wanting to use variants 2, 4, or 5, one can also re-add the code jar to the compile classpath using a buildscript block in the testee like\r\n```kts\r\nbuildscript {\r\n    dependencies {\r\n        classpath(files(\"$codeJar\"))\r\n    }\r\n}\r\n```","Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:bug","in:jacoco-plugin","in:plugin-development","has:reproducer","has:workaround"]},{"title":"File permissions are ignored for incremental build","body":"### Current Behavior\r\n\r\nIf file permissions are changed, the task is up-to-date.\r\n\r\n### Expected Behavior\r\n\r\nThe task is not up-to-date.\r\n\r\n### Context (optional)\r\n\r\nThis can be safely ignored for most of the tasks. However, this is incorrect for copy tasks.\r\n\r\n### Steps to Reproduce\r\n\r\n```\r\n def \"is out-of-date when permissions are changed\"() {\r\n        given:\r\n        def original = file(\"files\/sub\/a.txt\").createFile()\r\n        file(\"files\/sub\/dir\/b.txt\").createFile()\r\n        file(\"files\/c.txt\").createFile()\r\n        buildScript '''\r\n            task (copy, type:Copy) {\r\n               from 'files'\r\n               into 'dest'\r\n            }\r\n        '''\r\n\r\n        when:\r\n        run 'copy'\r\n        then:\r\n        executedAndNotSkipped(\":copy\")\r\n\r\n        when:\r\n        original.permissions = \"rwxrwxrwx\"\r\n        run 'copy'\r\n        then:\r\n        executedAndNotSkipped(\":copy\") \/\/ fails\r\n        file(\"dest\/sub\/a.txt\").permissions == \"rwxrwxrwx\" \/\/ fails\r\n    }\r\n```    \r\n\r\n### Gradle version\r\n\r\n8.6\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["This is one more example of why we should rethink how copy works."],"labels":["a:bug","in:file-tasks"]},{"title":"Improve the error message when DirectoryProperty has OutputFile annotation","body":"### Current Behavior\n\nType 'MyTask' property 'destinationDir' is not writable because '[...]\/build\/tmp\/myTask' is not a file.\n\n### Expected Behavior\n\nNo error\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\n1.  ```kotlin\r\n    \/\/ build.gradle.kts\r\n    \r\n    abstract class MyTask : DefaultTask() {\r\n    \r\n      @get:OutputFile\r\n      abstract val destinationDir: DirectoryProperty\r\n    \r\n      @get:InputDirectory\r\n      @get:PathSensitive(PathSensitivity.NONE)\r\n      abstract val inputDir: DirectoryProperty\r\n    \r\n      @TaskAction\r\n      fun action() {\r\n        logger.lifecycle(\"got destinationDir: ${destinationDir.get().asFile.invariantSeparatorsPath}\")\r\n        logger.lifecycle(\"got inputDir: ${inputDir.get().asFile.invariantSeparatorsPath}\")\r\n      }\r\n    }\r\n    \r\n    val dummySync by tasks.registering(Sync::class) {\r\n      group = project.name\r\n    \r\n      from(resources.text.fromString(\"asd\"))\r\n      into(temporaryDir)\r\n    }\r\n    \r\n    val myTask by tasks.registering(MyTask::class) {\r\n      group = project.name\r\n    \r\n      destinationDir = temporaryDir\r\n      inputDir = dummySync.map { it.destinationDir }\r\n    }\r\n    ```\r\n2. run `.\/gradlew myTask`\r\n3. Get a weird error\r\n    ```\r\n    A problem was found with the configuration of task ':myTask' (type 'Build_gradle.MyTask').\r\n      - Type 'Build_gradle.MyTask' property 'destinationDir' is not writable because '[...]\/build\/tmp\/myTask' is not a file.\r\n    ```\r\n   The error doesn't make sense and it's not clear how to solve it. \r\n\r\n\n\n### Gradle version\n\n8.5\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["So I guess the problem is, that you use `@get:OutputFile` for a directory. Can you confirm that changing annotation to `@get:OutputDirectory` fixes the issue?\r\n\r\nWe could do a better job here and have a better message when `DirectoryProperty` is used with an incorrect annotation indeed. I believe it should be easy to detect and report that.\r\n ","Thanks, yes `@get:OutputDirectory` works. I would appreciate it if the docs and error message was more clear.","Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n\r\n***\r\n\r\nIndeed, the error should be improved.","> Indeed, the error should be improved.\r\n\r\nAnd the `@OutputFile` Javadoc? It makes no reference to the requirement that it can only be used on a DirectoryProperty.\r\n\r\n"],"labels":["a:bug","in:work-validation","re:comprehensibility"]},{"title":"Gradle forgets task dependency when task output is mapped","body":"### Current Behavior\r\n\r\nGradle forgets task dependencies when task output is mapped\r\n\r\n### Expected Behavior\r\n\r\nGradle remembers task dependencies when task output is mapped\r\n\r\n### Context (optional)\r\n\r\n\r\n\r\n```kotlin\r\nval downloadGradleSource by tasks.registering(Sync::class) {\r\n  \/\/ downloads some source code\r\n}\r\n\r\nval gradleDistributionUrl: Provider<String> = downloadGradleSource.map { task ->\r\n  \/\/ extracts data from the task output\r\n}\r\n\r\n\/\/ create a map of constants\r\nval buildConstants = objects.mapProperty<String, String>()\r\nbuildConstants.put(\"PROJECT_VERSION\", provider { project.version.toString() })\r\nbuildConstants.put(\"gradleDistributionUrl\", gradleDistributionUrl)\r\n\r\n\/\/ create a file from the constants\r\nval buildConfigFileContents: Provider<TextResource> =\r\n  buildConstants.map { constants ->\r\n    resources.text.fromString(\"...\")\r\n  }\r\n\r\n\/\/ the task dependency should be inferred by Gradle, but it is not\r\nval generateBuildConstants by tasks.registering(Sync::class) {\r\n  from(buildConfigFileContents) {\r\n    rename { \"BuildConstants.kt\" }\r\n  }\r\n  into(layout.buildDirectory.dir(\"generated-source\/main\/kotlin\/\"))\r\n}\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\n[project.zip](https:\/\/github.com\/gradle\/gradle\/files\/14072930\/project.zip)\r\n\r\n\r\n1. Run `.\/gradlew generateBuildConstants`\r\n2. The task fails because Gradle forgot it needs to run `downloadGradleSource`\r\n3. Manually run `.\/gradlew downloadGradleSource`\r\n4. Run `.\/gradlew generateBuildConstants`\r\n5. The task succeeds.\r\n\r\n\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n","Related:\r\n* #25645 ","After looking a bit deeper we realized the issue is coming from the `buildConstants` declaration which is a `MapProperty` in which the `gradleDistributionUrl` provider is put as a value, that step breaks the provenance tracking.\r\n\r\nThus we are reclassifying this as a documentation issue because this should be explained in the following sections of  the documentation:\r\n* https:\/\/docs.gradle.org\/current\/userguide\/lazy_configuration.html#working_with_collections\r\n* https:\/\/docs.gradle.org\/current\/userguide\/lazy_configuration.html#working_with_maps","@gradle\/bt-support could you please elaborate why do you think it is a documentation issue? Expecting the dependency to propagate through `put` and `from` seems natural to me.\r\n\r\nGiven that `ConfigurableFileCollection.from` is involved, this could be a duplicate of #27881.","Actually, the reproducer seem to work when the configuration cache is disabled. What I'm getting when running the sample, is\r\n```\r\n* What went wrong:\r\nConfiguration cache state could not be cached: field `provider` of `org.gradle.configurationcache.serialization.codecs.ProviderBackedFileCollectionSpec` bean found in field `mainSpec` of task `:generateBuildConstants` of type `org.gradle.api.tasks.Sync`: error writing value of type 'org.gradle.api.internal.provider.TransformBackedProvider'\r\n> Gradle didn't download gradle-wrapper.properties\r\n```\r\n\r\nBuild succeeds when I run it with `--no-configuration-cache`."],"labels":["a:bug","in:configuration-cache","in:provider-api","re:comprehensibility"]},{"title":"Re-implement replacement for null diagnosticlistener","body":"This is sort of a feature and a regression at the same time.\r\nAs we introduced problem reporting in the [Java compile task](https:\/\/github.com\/gradle\/gradle\/blob\/f796b166368355a4c62fbbfb3157bd29c3f2a25c\/platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/JdkJavaCompiler.java), we needed to [supply a value](https:\/\/github.com\/gradle\/gradle\/blob\/19b71ed5796b79d96fe209240c259259762f98d7\/platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/JdkJavaCompiler.java#L79) to the diagnostic listener parameter.\r\n\r\nThis caused an effect not accounted for: _the classic error message printed to `stderr` no longer appears_.\r\nThis is a feature that we need to keep until at least 9.0, as this is a major change in how we would represent problems in the console.\r\n\r\nWe probably have two feasible solutions:\r\n  1. Figure out what is the behavior for the JDK when the value is `null`, and figure out a way to re-enable it\r\n  2. Reimplement the feature by ourselves.\r\n\r\n(Personally, I'm not that hopeful of 1., but I will still attempt to discover the pieces to learn about some blockers)\r\n","comments":["@hegyibalint ffr: I browsed the JDK sources and and found a couple of classes involved in the compiler message rendering:\r\n- com.sun.tools.javac.util.AbstractDiagnosticFormatter (and subclasses)\r\n- com.sun.tools.javac.util.JCDiagnostic\r\n- com.sun.tools.javac.util.Log","Also dropping here [`FormattedDiagnostic`](https:\/\/github.com\/bazelbuild\/bazel\/blob\/5ab21e057775909c746249078705d7e7f4cbfe0a\/src\/java_tools\/buildjar\/java\/com\/google\/devtools\/build\/buildjar\/javac\/FormattedDiagnostic.java#L36) from Bazel","The most painful part probably will be the probable adoption away from [`JavaCompiler#getTask`](https:\/\/github.com\/openjdk\/jdk\/blob\/729ae1d78716a3830837e49376b5340eb60f9449\/src\/java.compiler\/share\/classes\/javax\/tools\/JavaCompiler.java#L276), and use [`JavacTool#getTask`](https:\/\/github.com\/openjdk\/jdk\/blob\/729ae1d78716a3830837e49376b5340eb60f9449\/src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTool.java#L125-L131) directly[^1].\r\n\r\nThis is (probably) going to be necessary to register a logger and a diagnostic listener at the same time; as stated in the topmost comment, when using `JavaCompile.CompileTask` and supplying a non-null `diagnosticListener`, we lose the console output, as the default logging is turned off.\r\n\r\n[^1]: the `JavacTool` class looks to me like the primary implementor of the `JavaCompile.CompileTask` interface."],"labels":["a:regression","in:java-plugins","in:problems"]},{"title":"Gradle 8.5 breaks includeBuild functionality with bom packages (only?)","body":"### Current Behavior\r\n\r\nAfter upgrading to Gradle 8.5 to switch to Java 21, our multi-module Gradle project encounters an issue where dependencies cannot be resolved when using includeBuild. The error message is:\r\n\r\n```\r\n\"Could not determine the dependencies of task ':main-main:compileJava'.\r\n> Could not resolve all dependencies for configuration ':main-main:detachedConfiguration1'.\r\n   > Could not find sub-bom.pom (project :sub:sub-bom).\"\r\n```\r\n\r\nThe project works without includeBuild and the pom is available, but fails with includeBuild. Downgrading to Gradle 8.4 resolves the issue.\r\n\r\n### Expected Behavior\r\n\r\nThe expected behavior is that Gradle 8.5 should be able to resolve dependencies with includeBuild as it did in version 8.4, without any errors, allowing the use of Java 21 with our existing project setup.\r\n\r\n\r\n### Context (optional)\r\n\r\nWe are trying to update our Gradle version to 8.5 to enable Java 21 support for our project. This issue is blocking the upgrade as it breaks our build which relies on includeBuild for composing builds locally and using a dependency root project's bom package for version definition.\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1. Clone the minimal reproducible version from https:\/\/github.com\/aurimasniekis\/gradle-85-issue\r\n2. Navigate to the `main` folder and run `.\/gradlew build` using Gradle 8.5 to reproduce the issue.\r\n3. Navigate to the `main-84` folder and run `.\/gradlew build` using Gradle 8.4 to see the expected behavior without the issue.\r\n\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\nhttps:\/\/gradle.com\/s\/eypdpd7z3t56w\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n","@aurimasniekis With Gradle 8.4, are you sure the build is doing what you expect?\r\n\r\nFrom what I can follow with the reproducer, Gradle silently fails to resolve the POM and Spring's dependency management plugin ignores the missing POM when running with Gradle 8.4. I think this means that when using an included build and the dependency management plugin, the BOM does not have an effect. \r\n\r\nThe change in behavior in 8.5 was a bugfix for a problem introduced in 7.6.1 where we unintentionally made the resolution more lenient. Before that version, this would have failed in the same way. \r\n\r\nThis is a very related issue: https:\/\/github.com\/spring-gradle-plugins\/dependency-management-plugin\/issues\/164\r\n\r\nYou can think of an included build as similar to a multi-project build when it comes to dependency resolution. Gradle uses the coordinates to locate a project in the included build and replace the external dependency with a project dependency. Spring's dependency management plugin doesn't support consuming a BOM from another project. \r\n\r\n","@big-guy Thank you for the response and the explanation of the changes in Gradle 8.5's dependency resolution behavior.\r\n\r\nYour explanation has helped clarify the situation considerably. We understand that the stricter checks in the latest version of Gradle are causing issues with how the Spring dependency management plugin handles the BOM when using `includeBuild`.\r\n\r\nGiven this, I'm wondering if there might be a way to configure our setup so that the BOM is excluded when using `includeBuild`, or otherwise handled in a manner that would allow the Spring plugin to not fail the resolution. Our primary goal is to include another project from which dependencies are included into the current project, without the need for those dependencies to be published or the entire build to be run for every local change.\r\n\r\nCould you advise on a possible configuration or setup that would avoid the stricter dependency checks for the BOM, or any alternative approaches that would achieve a similar result with Gradle 8.5 and the Spring dependency management plugin?","At the moment the only working fix I could imagine is something like this:\r\n\r\n```groovy\r\nif (!gradle.includedBuilds.name.contains(\"sub\")) {\r\n    mavenBom \"org.sub:sub-bom:1.0-SNAPSHOT\"\r\n}\r\n```\r\n\r\nBut this is really feels hacky \ud83d\ude2b","In general the core issue here is that Gradle does not know about a POM until publishing has happened. When you include another build, you get the \"pre-publishing\" view of that build. So, without significant changes to Gradle, there is no way an included build will be able to expose its POM to other projects. \r\n\r\nThe solution I see here is for the bom projects to use the [java-platform](https:\/\/docs.gradle.org\/current\/userguide\/java_platform_plugin.html) plugin, which will produce a POM (\"bom\") during publication, but will also expose the dependency constraints in the \"pre-publishing\" view. \r\n\r\nGranted, I am not sure how the `java-platform` plugin integrates with spring dependency management -- so I'm not sure if this is feasible with the way the plugin works. \r\n\r\nAn example of depending on a BOM using the platform mechanism is here: https:\/\/docs.gradle.org\/current\/userguide\/platforms.html#sub:bom_import\r\n"],"labels":["in:composite-builds","a:regression","in:dependency-resolution","affects-version:8.5"]},{"title":"Please document what the advantage is of having interfaces that implement `Named` for attributes","body":"### Issue type\r\n\r\nMissing information\r\n\r\n### Problem description\r\n\r\nWhat is the advantage of having interfaces that implement `Named` for attributes like `public interface Usage extends Named`?\r\nI mean opposed to just having the attributes with type `String`.\r\nIn the module metadata they are just strings.\r\nTo set them you use the `String` constants in the interface.\r\nYou can also use any arbitrary other string.\r\n\r\nSo the only effect I can realize right now is, that it is more cumbersome to set the attributes by needing to use `objects.named` to create  the value instead of just setting a `String` as value.\r\n\r\n### Page with the problem\r\n\r\nhttps:\/\/docs.gradle.org\/current\/userguide\/variant_attributes.html#sec:declaring_attributes","comments":["Thank you for your interest in Gradle!\r\n\r\nThis is a valid documentation issue.\r\n"],"labels":["in:dependency-declarations","a:documentation"]},{"title":"Track LICENSE changes properly in gradle code base","body":"### Issue type\n\nPolishing\n\n### Problem description\n\nWhen a new dependency is added, the LICENSE should be updated automatically.\r\nAlternatively, the sanity check task should check if the library is \"known\". \r\nProbably with the help of [this file,](https:\/\/github.com\/gradle\/gradle\/blob\/0408a82075e2288a69c507b489d6c13a062fdb17\/build-logic\/dependency-modules\/src\/main\/kotlin\/gradlebuild\/modules\/extension\/ExternalModulesExtension.kt#L197) where licenses are tracked already.\r\n\r\n\r\n\n\n### Context (optional)\n\n_No response_","comments":[],"labels":["a:chore","in:building-gradle","in:gradle-distribution"]},{"title":"mavenContent snapshotsOnly() has no effect for repositories in pluginManagement","body":"### Current Behavior\r\n\r\nIt seems that for repositories defined in pluginManagement mavenContent snapshotsOnly has no effect. Related question on Slack: https:\/\/www.linen.dev\/s\/gradle-community\/t\/16335756\/any-particular-reason-this-allows-me-to-find-dependencies-wi#5e73bc85-9902-4b1e-bc30-39b3809a8b32\r\n\r\n### Expected Behavior\r\n\r\nI expect it to fail with\r\nPlugin [id: 'com.gradle.common-custom-user-data-gradle-plugin', version: '1.12.1'] was not found in any of the following sources:\r\n\r\nas can be seen by either using mavenLocal or the maven repo in settings.gradle.kts\r\n\r\n### Context (optional)\r\n\r\nI assume it is because DefaultMavenRepositoryContentDescriptor.asMutableCopy() does not copy over the private variables snapshots and releases hence the settings being forgotten.\r\n\r\n### Steps to Reproduce\r\n\r\nIn settings.gradle.kts flip between the two repositories defined. The example plugin should not be found in either.\r\n\r\nReproducer here https:\/\/github.com\/spand\/snapshotsonlybug\r\n\r\n### Gradle version\r\n\r\n8.4\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:bug","in:plugin-management","in:repository-declarations","has:reproducer"]},{"title":"Document how to set attribute precedence","body":"### Issue type\r\n\r\nMissing information\r\n\r\n### Problem description\r\n\r\nThe mentioned page contains a very brief half-sentence telling that you can somehow configure attribute precedence.\r\nBut it misses to describe how this can be done.\r\nIt would be nice to have a short section like for compatibility rules and disambiguation rules, that describes how to properly configure attribute precedence.\r\n\r\n### Page with the problem\r\n\r\nhttps:\/\/docs.gradle.org\/current\/userguide\/variant_attributes.html#sec:abm_algorithm","comments":["Thank you for your interest in Gradle!\r\n\r\nThis is a valid documentation issue.\r\n"],"labels":["in:dependency-resolution","a:documentation"]},{"title":"Please clarify when an attribute needs to be added to the attributes schema and when not","body":"### Issue type\r\n\r\nWrong or misleading information\r\n\r\n### Problem description\r\n\r\nThe page mentioned below says \r\n> Attributes must be declared in the attribute schema found on the dependencies handler\r\n\r\nThis for me implies, that it is always necessary to register a new attribute in the attributes schema.\r\nThis is not true though.\r\nI have a component metadata rule that adds a new attribute to some library variants.\r\nAnd I can resolve those variants using the attribute just fine wihtout ever adding the attribute to the attributes schema.\r\n\r\nSo I'd like to know when it is necessary to register an attribute in the attributes schema and when not.\r\nMaybe it can also be clarified here in a comment right away. :-)\r\n\r\n### Page with the problem\r\n\r\nhttps:\/\/docs.gradle.org\/current\/userguide\/variant_attributes.html#creating_attributes_in_a_build_script_or_plugin","comments":["They should always be declared. The fact that it _can_ work without is, as far as I remember, only a side effect that there is no ambiguity when selecting.","What do you mean by \"no ambiguity\" @melix?\r\nGiven this example:\r\n```kts\r\nclass MonocleAttribute {\r\n    companion object {\r\n        val MONOCLE_ATTRIBUTE = Attribute.of(\"org.openjfx.monocle\", Boolean::class.javaObjectType)\r\n    }\r\n}\r\n@CacheableRule\r\nabstract class JavaFxComponentMetadataRule : ComponentMetadataRule {\r\n    @get:Inject\r\n    abstract val objects: ObjectFactory\r\n\r\n    override fun execute(context: ComponentMetadataContext) {\r\n        val details = context.details\r\n        details.withVariant(\"compile\") {\r\n            attributes {\r\n                attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(\"none\"))\r\n                attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, objects.named(\"none\"))\r\n            }\r\n        }\r\n        details.withVariant(\"runtime\") {\r\n            attributes {\r\n                attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(\"none\"))\r\n                attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, objects.named(\"none\"))\r\n            }\r\n        }\r\n        details.maybeAddVariant(\"windowsX86-64Runtime\", \"runtime\") {\r\n            attributes {\r\n                attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily.WINDOWS))\r\n                attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, objects.named(MachineArchitecture.X86_64))\r\n                attribute(MonocleAttribute.MONOCLE_ATTRIBUTE, false)\r\n            }\r\n            withFiles {\r\n                removeAllFiles()\r\n                addFile(\"${details.id.name}-${details.id.version}-win.jar\")\r\n            }\r\n        }\r\n        details.maybeAddVariant(\"windowsX86-64MonocleRuntime\", \"runtime\") {\r\n            attributes {\r\n                attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily.WINDOWS))\r\n                attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, objects.named(MachineArchitecture.X86_64))\r\n                attribute(MonocleAttribute.MONOCLE_ATTRIBUTE, true)\r\n            }\r\n            withFiles {\r\n                removeAllFiles()\r\n                addFile(\"${details.id.name}-${details.id.version}-win-monocle.jar\")\r\n            }\r\n        }\r\n    }\r\n}\r\ndependencies {\r\n\/\/    attributesSchema.attribute(MonocleAttribute.MONOCLE_ATTRIBUTE)\r\n    components.withModule<JavaFxComponentMetadataRule>(\"org.openjfx:javafx-base\")\r\n    implementation(\"org.openjfx:javafx-base:20.0.2\")\r\n}\r\nconfigurations.runtimeClasspath {\r\n    attributes {\r\n        attribute(MonocleAttribute.MONOCLE_ATTRIBUTE, false)\r\n    }\r\n}\r\nconfigurations.runtimeClasspath.get().forEach { println(\"FOO: $it\") }\r\nconfigurations.runtimeClasspath.get().incoming.artifactView {\r\n    withVariantReselection()\r\n    attributes {\r\n        attribute(Category.CATEGORY_ATTRIBUTE, project.objects.named(Category.LIBRARY))\r\n        attribute(Usage.USAGE_ATTRIBUTE, project.objects.named(Usage.JAVA_RUNTIME))\r\n        attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, project.objects.named(LibraryElements.JAR))\r\n        attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, project.objects.named(OperatingSystemFamily.WINDOWS))\r\n        attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, project.objects.named(MachineArchitecture.X86_64))\r\n        attribute(MonocleAttribute.MONOCLE_ATTRIBUTE, true)\r\n    }\r\n}.files.forEach { println(\"BAR: $it\") }\r\nconfigurations.resolvable(\"runtimeClasspath2\") {\r\n    extendsFrom(configurations.runtimeClasspath.get())\r\n    attributes {\r\n        attribute(Category.CATEGORY_ATTRIBUTE, project.objects.named(Category.LIBRARY))\r\n        attribute(Usage.USAGE_ATTRIBUTE, project.objects.named(Usage.JAVA_RUNTIME))\r\n        attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, project.objects.named(LibraryElements.JAR))\r\n        attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, project.objects.named(OperatingSystemFamily.WINDOWS))\r\n        attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, project.objects.named(MachineArchitecture.X86_64))\r\n    }\r\n}.get().forEach { println(\"BAZ: $it\") }\r\n```\r\nFOO resolves to non-monocle variant\r\nBAR resolves to monocle variant\r\nBAZ cannot be resolved as it is ambiguous\r\n\r\nCommenting in the `attributesSchema` does not change anything and results in identical output.","Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n***\r\n@gradle\/bt-jvm please clarify the expected behavior and decide if this is a bug or a documentation issue."],"labels":["in:dependency-resolution","a:documentation"]},{"title":"Add support for repository mirrors","body":"### Expected Behavior\n\nCurrently, Gradle doesn't provide any out-of-the-box support for [repository mirrors](https:\/\/maven.apache.org\/guides\/mini\/guide-mirror-settings.html) like in Maven. There are reasons avoid repository mirrors, e.g for reproducible builds, but it makes things extremely difficult for corporate or mixed environments.\r\n\r\nI would suggest to start with a simple implementation, where repository mirrors can be declared in the `~\/.gradle` directory, with a simple configuration file, e.g `mirrors.toml`\r\n\r\n```toml\r\n[my-mirror]\r\nsource-repository-urls = [\"https:\/\/repo1.maven.org\/\", \"https:\/\/repo.maven.apache.org\/maven2\/\"]\r\nmirror-url = \"https:\/\/artifactory.my-corp.com\/libs-release\"\r\n```\r\nSo basically map source URLs to target URLs. I'm open to other suggestions, but that would help a lot with our use cases.\r\n\n\n### Current Behavior (optional)\n\n_No response_\n\n### Context\n\nRepository mirrors provide an easy way to say \"instead of using that repository, use this other one\". For example, one would substitute Maven Central with a corporate repository mirror. Currently, Gradle provides no support whatsoever for this, which is problematic for different use cases:\r\n\r\n1. for building OSS libraries in a closed environment, all builds have to be updated to substitute repositories with mirrors. Unfortunately, this is far from an easy task, since there are many places where repositories can be defined (setttings.gradle, plugin repositories, central repository declaration, build plugins, ...). For example in Micronaut, repository declarations are handled by a convention plugin which is published as a separate artifact. Updating all projects is extremely complicated, and not possible globally.\r\n2. for trusted sources : external repositories are more likely to be compromised than corporate mirrors. As such, it is common to have a corporate repository for in-house artifacts, coupled with a repository mirror for external artifacts. Tools like Artifactory provide a way to \"route\" requests similarly to the repository content filtering feature, but without having to configure all builds for this.\r\n3. for half-closed environments : with the development of remote work, it's not unusual to have \"mixed\" environements, where depending on whether you are using the VPN or not, repositories are accessible or not. Therefore, having a simple switch to use mirrors or not would greatly help.\r\n\r\n","comments":["Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:feature","in:repository-declarations","in:dependency-remoting"]},{"title":"Socket connections from non-gradle applications crash gradle executors","body":"### Current Behavior\r\n\r\nA Gradle executor experiences this exception:\r\n```\r\nUnexpected exception thrown.\r\norg.gradle.internal.remote.internal.MessageIOException: Could not read message from '\/127.0.0.1:49184'.\r\n        at org.gradle.internal.remote.internal.inet.SocketConnection.receive(SocketConnection.java:94)\r\n        at org.gradle.internal.remote.internal.hub.MessageHub$ConnectionReceive.run(MessageHub.java:270)\r\n        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n        at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n        at java.lang.Thread.run(Thread.java:750)\r\nCaused by: java.lang.IllegalArgumentException: \r\n        at org.gradle.internal.remote.internal.hub.InterHubMessageSerializer$MessageReader.read(InterHubMessageSerializer.java:72)\r\n        at org.gradle.internal.remote.internal.hub.InterHubMessageSerializer$MessageReader.read(InterHubMessageSerializer.java:52)\r\n        at org.gradle.internal.remote.internal.inet.SocketConnection.receive(SocketConnection.java:81)\r\n        at org.gradle.internal.remote.internal.hub.MessageHub$ConnectionReceive.run(MessageHub.java:270)\r\n        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n        at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n        at java.lang.Thread.run(Thread.java:750)\r\norg.gradle.internal.remote.internal.ConnectException: Could not connect to server [4f40fbf1-8d30-4c4a-9ba1-aaa9b723f4ea port:39287, addresses:[\/127.0.0.1]]. Tried addresses: [\/127.0.0.1].\r\n\tat org.gradle.internal.remote.internal.inet.TcpOutgoingConnector.connect(TcpOutgoingConnector.java:67)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedClient.getConnection(MessageHubBackedClient.java:36)\r\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:103)\r\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)\r\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\r\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\r\nCaused by: java.net.ConnectException: Connection refused\r\n\tat sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\r\n\tat sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:716)\r\n\tat sun.nio.ch.SocketAdaptor.connect(SocketAdaptor.java:122)\r\n\tat org.gradle.internal.remote.internal.inet.TcpOutgoingConnector.tryConnect(TcpOutgoingConnector.java:81)\r\n\tat org.gradle.internal.remote.internal.inet.TcpOutgoingConnector.connect(TcpOutgoingConnector.java:54)\r\n\t... 5 more\r\n```\r\nAnd the build fails due to this error:\r\n```\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nExecution failed for task ':storage:test'.\r\n> Process 'Gradle Test Executor 102' finished with non-zero exit value 1\r\n  This problem might be caused by incorrect test process configuration.\r\n  For more on test execution, please refer to https:\/\/docs.gradle.org\/8.5\/userguide\/java_testing.html#sec:test_execution in the Gradle documentation.\r\n\r\n* Try:\r\n> Run with --stacktrace option to get the stack trace.\r\n> Run with --info or --debug option to get more log output.\r\n> Get more help at https:\/\/help.gradle.org.\r\n```\r\n\r\n### Expected Behavior\r\n\r\nThe connection should be accepted, and then disconnected once the received data is shown to be invalid. The Gradle executor should continue running and accepting connections until a valid connection has been made. The Gradle executor could keep running indefinitely without a connection, or given a moderate (1min) timeout before the connection is abandoned completely.\r\n\r\n### Context (optional)\r\n\r\nWe use Gradle to build the [Apache Kafka](https:\/\/github.com\/apache\/kafka) project, and received this [bug report](https:\/\/issues.apache.org\/jira\/browse\/KAFKA-15343) from one of our contributors.\r\n\r\nWe have numerous tests which appear to leak clients in this way, and it appears that the particulars of the Gradle protocol and the Kafka protocol happen to cause the Gradle end of the connection to exit ungracefully.\r\n\r\nWe are also working to reduce the number of leaked clients and network connections in our project to mitigate this failure, but it is very likely that there are downstream users of Kafka clients which could experience the same style of defect in their tests, and have similar build failures. And more generally, any sort of client could happen to connect to the Gradle executor and trigger this failure with a crafted response. This could be happening without Kafka in use at all, theoretically.\r\n\r\nThis appears similar to the descriptions of #27512, #23602, and #12566 but I thought to open this issue separately with my reproduction case if it turns out to be distinct.\r\n\r\n### Steps to Reproduce\r\n\r\n1. A test opens a server socket with port 0, and gets assigned a random port N\r\n2. The test starts a client which will continue to reconnect to port N indefinitely if the connection with the server is lost\r\n3. The test stops the server, and port N is released to the OS and allowed to be reassigned\r\n4. The client beings retrying connections to port N\r\n5. A Gradle executor daemon port is eventually assigned port N by the OS\r\n6. The client connects to port N, and reaches the Gradle daemon unintentionally\r\n7. The Gradle daemon abandons that connection with an error and closes the listening socket\r\n8. The Gradle executor is killed with an exception when it tries to reach the closed socket\r\n\r\nHere is a reproducer: https:\/\/github.com\/gharris1727\/gradle-crash-reproducer . For a specific failed build, see https:\/\/github.com\/gharris1727\/gradle-crash-reproducer\/actions\/runs\/7632481625\/job\/20792782276 .\r\n\r\nThe reproducer has 4 modules, structured such that the tests for `app-2` start after the tests for `app-1` are already running. `app-1` is continuously searching for ports which it can't bind() the address for, and connecting to them and then immediately closing the connection. This specific reproducer relies on MacOS for sequential port allocation in order to make it more reliable, but I think the same failure is possible on any platform.\r\n\r\nHere's the logs from the reproducer, in case the action becomes inaccessible:\r\n```\r\n2024-01-23T22:13:08.059+0000 [DEBUG] [TestEventLogger] Gradle Test Run :app-2:test STARTED\r\n...\r\n2024-01-23T22:13:08.069+0000 [DEBUG] [org.gradle.internal.remote.internal.inet.TcpIncomingConnector] Listening on [77f73e7b-bbe9-4630-8033-0a25e66a99f3 port:58112, addresses:[localhost\/127.0.0.1]].\r\n...\r\n2024-01-23T22:13:08.393+0000 [DEBUG] [TestEventLogger] TestWithLeakedClient > test() STANDARD_OUT\r\n2024-01-23T22:13:08.393+0000 [DEBUG] [TestEventLogger]     [58112, 58113, 54322, 54323, 55555, 54324, 55556]\r\n...\r\nError: -23T22:13:08.406+0000 [ERROR] [org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection] Unexpected exception thrown.\r\norg.gradle.internal.remote.internal.MessageIOException: Could not write '\/127.0.0.1:54325'.\r\n\tat org.gradle.internal.remote.internal.inet.SocketConnection.flush(SocketConnection.java:140)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHub$ConnectionDispatch.run(MessageHub.java:333)\r\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n\tat org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)\r\n\tat java.base\/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base\/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base\/java.lang.Thread.run(Thread.java:829)\r\nCaused by: java.io.IOException: Broken pipe\r\n\tat java.base\/sun.nio.ch.FileDispatcherImpl.write0(Native Method)\r\n\tat java.base\/sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47)\r\n\tat java.base\/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:113)\r\n\tat java.base\/sun.nio.ch.IOUtil.write(IOUtil.java:58)\r\n\tat java.base\/sun.nio.ch.IOUtil.write(IOUtil.java:50)\r\n\tat java.base\/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:462)\r\n\tat org.gradle.internal.remote.internal.inet.SocketConnection$SocketOutputStream.writeWithNonBlockingRetry(SocketConnection.java:279)\r\n\tat org.gradle.internal.remote.internal.inet.SocketConnection$SocketOutputStream.writeBufferToChannel(SocketConnection.java:267)\r\n\tat org.gradle.internal.remote.internal.inet.SocketConnection$SocketOutputStream.flush(SocketConnection.java:261)\r\n\tat org.gradle.internal.remote.internal.inet.SocketConnection.flush(SocketConnection.java:138)\r\n\t... 6 more\r\nError: -23T22:13:08.609+0000 [ERROR] [system.err] org.gradle.internal.remote.internal.ConnectException: Could not connect to server [77f73e7b-bbe9-4630-8033-0a25e66a99f3 port:58112, addresses:[\/127.0.0.1]]. Tried addresses: [\/127.0.0.1].\r\nError: -23T22:13:08.610+0000 [ERROR] [system.err] \tat org.gradle.internal.remote.internal.inet.TcpOutgoingConnector.connect(TcpOutgoingConnector.java:67)\r\nError: -23T22:13:08.610+0000 [ERROR] [system.err] \tat org.gradle.internal.remote.internal.hub.MessageHubBackedClient.getConnection(MessageHubBackedClient.java:36)\r\nError: -23T22:13:08.610+0000 [ERROR] [system.err] \tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:103)\r\nError: -23T22:13:08.610+0000 [ERROR] [system.err] \tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)\r\nError: -23T22:13:08.610+0000 [ERROR] [system.err] \tat worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\r\nError: -23T22:13:08.610+0000 [ERROR] [system.err] \tat worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\r\nError: -23T22:13:08.611+0000 [ERROR] [system.err] Caused by: java.net.ConnectException: Connection refused\r\nError: -23T22:13:08.611+0000 [ERROR] [system.err] \tat java.base\/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\r\nError: -23T22:13:08.611+0000 [ERROR] [system.err] \tat java.base\/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:774)\r\nError: -23T22:13:08.611+0000 [ERROR] [system.err] \tat java.base\/sun.nio.ch.SocketAdaptor.connect(SocketAdaptor.java:120)\r\nError: -23T22:13:08.612+0000 [ERROR] [system.err] \tat org.gradle.internal.remote.internal.inet.TcpOutgoingConnector.tryConnect(TcpOutgoingConnector.java:81)\r\nError: -23T22:13:08.612+0000 [ERROR] [system.err] \tat org.gradle.internal.remote.internal.inet.TcpOutgoingConnector.connect(TcpOutgoingConnector.java:54)\r\nError: -23T22:13:08.612+0000 [ERROR] [system.err] \t... 5 more\r\n```\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n***\r\nCommunication between the Gradle Daemon and a test executor may also avoid using a channel discoverable from outside the Gradle daemon entirely."],"labels":["a:bug","in:workers","re:reliability"]},{"title":"add SPDX license to metadata","body":"### Expected Behavior\r\n\r\nGradle appears to have no concept of license in it's metadata. This is uncommon amongst many language build tools now. NPM even requires it and that it be valid.\r\n\r\nI believe this should be a list of licenses, possibly even categorized in some way (such as if documentation is separate).\r\n\r\nHowever, it's defined the API should be exposed to plugins.\r\n\r\nhttps:\/\/spdx.org\/licenses\/\r\n\r\n### Current Behavior (optional)\r\n\r\n_No response_\r\n\r\n### Context\r\n\r\nnot being able to easily identify licenses. See various SPDX (iso standard) use cases.","comments":["Sorry that you're having trouble with Gradle!\r\n\r\nWe appreciate the effort that went into filing this issue, but we must ask for more information. \r\n\r\nAn explanation of what you are trying to solve with this feature request is a must for us to be able to reason about the use cases. Our available resources are severely limited, and we must be sure we are looking at the exact problem you are facing.\r\n\r\nIf we have a valid use case, we may be able also to suggest workarounds or ways to avoid the problem.\r\n\r\nThis issue will be closed after 7 days unless you provide more information.\r\n\r\n***\r\nAre you talking about a license field in the gradle module metadata similar to a license field in a maven POM? Or something else and in the latter case please describe where is the information stored, where is it authored and who consumes the information.","Yes, I'm talking about a field similar to the maven pom or more correctly the field in `package.json` which is not arbitrary and must be SPDX compatible. If pom isn't published, determining what the license is used \"reflectively\" would be difficult.\r\n\r\nDue to the ability and popularity of licensing portions of the code, such as documentation, separately good would have different categories. At the very least I would probably support a field for documentation that is separate from code.\r\n\r\nI also think if the API was appropriately typed plugins could also use this data to generate additional information.","This feature request is in the backlog of the relevant team and is prioritized by them.\r\n***\r\nThere are no plans to stop publishing Maven POMs, and there is no way today to skip that.\r\n\r\nOur understanding of your request is:\r\n* have an SPDX-compatible license field somewhere in the Gradle Module Metadata\r\n* have an API on the resolution result to retrieve that information\r\n\r\nIf there is something missing, please clarify by describing a usecase."],"labels":["a:feature","in:gradle-module-metadata"]},{"title":"Figure out why we use the SSHD dependencies as a platform in test classpaths","body":"### Issue type\r\n\r\nOther\r\n\r\n### Problem description\r\n\r\nAs shown in PR #27777, upgrading SSHD caused some dependency management issue that are finding their cause in our usage of SSHD for internal integration testing:\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/273f52234fe1959e6174688aa8b1c21019c9c163\/subprojects\/internal-integ-testing\/build.gradle.kts#L80-L86\r\n\r\nThis caused a TODO to be added as we end up having to explicitly depend on `ant-junit` in `:core`.\r\n\r\nWe should investigate:\r\n* Why we need to use SSHD as a platform\r\n* Why internal-integ-testing leaks into unit test classpaths\r\n* Impact on other libraries, like [testcontainers](https:\/\/github.com\/gradle\/gradle\/pull\/27777#discussion_r1463182076)\r\n\r\n### Context (optional)\r\n\r\n_No response_","comments":[],"labels":["a:chore","in:building-gradle"]},{"title":"Failed build never finishes","body":"### Current Behavior\n\nFailed build never finishes.\n\n### Expected Behavior\n\nFailed build should finish.\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\nUsing the attached project\r\n[deadlock.zip](https:\/\/github.com\/gradle\/gradle\/files\/14024331\/deadlock.zip) run `.\/gradlew :mylib2:help`. The build shows that configuration phase failed (it is red), but it never finishes.\r\n\n\n### Gradle version\n\n8.5 and 8.6-RC-1\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n\r\n***\r\n\r\nNote that I can reproduce the issue with Gradle 8.4 as well. I cannot test earlier versions as 8.4 is the minimum supported version.","Note: added to the 8.6 RC4 milestone to make sure a decision is made before releasing 8.6. It does not mean this will be fixed for sure in 8.6","Given this is reproducible with 8.4 and we do not have a root cause, we are not considering this a blocker for the 8.6 release."],"labels":["a:bug","in:configuration-model","in:scheduler"]},{"title":"Nested dirPermissions don't work properly","body":"### Current Behavior\r\n\r\nIt's hard to set dirPermissions for individual folders correctly\r\n\r\n### Expected Behavior\r\n\r\nUser can granularly set dir permissions with copy-like tasks\r\n\r\n### Context (optional)\r\n\r\nRelated:\r\n* https:\/\/github.com\/gradle\/gradle\/pull\/27011\r\n* https:\/\/github.com\/gradle\/gradle\/pull\/27776\r\n* https:\/\/discuss.gradle.org\/t\/dirmode-not-working\/20063\r\n\r\nAnd, generally\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/27220\r\n\r\nLoosely related:\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/2940\r\n\r\n### Steps to Reproduce\r\n\r\n```\r\ndef \"dirPermissions can be modified for subpaths\"() {\r\n        given:\r\n        withSourceFiles(\"rwxrwxrwx\")\r\n\r\n        def mainDirPermissions = \"rwxrwx---\"\r\n        def subfolderPermissions = \"rwxrw----\"\r\n        def subsubfolderPermissions = \"rwx------\"\r\n\r\n        and:\r\n        buildFile << \"\"\"\r\n            task copy(type: Copy) {\r\n                into(\"dest\")\r\n                from(\"files\"){\r\n                    exclude(\"sub\")\r\n                    dirPermissions {\r\n                        unix(\"${mainDirPermissions}\") \/\/ ignored\r\n                    }\r\n                }\r\n                from(\"files\/sub\"){\r\n                    exclude(\"dir\")\r\n                    into(\"sub\")\r\n                    dirPermissions {\r\n                        unix(\"${subfolderPermissions}\")\r\n                    }\r\n                }\r\n                from(\"files\/sub\/dir\"){\r\n                    into(\"sub\/dir\")\r\n                    dirPermissions {\r\n                        unix(\"${subsubfolderPermissions}\")\r\n                    }\r\n                }\r\n                dirPermissions {\r\n                  unix(\"${mainDirPermissions}\") \/\/ ignored for dest\r\n                }\r\n            }\r\n            \"\"\"\r\n        when:\r\n        run \"copy\"\r\n        then:\r\n        assertDescendants()\r\n        file(\"dest\").permissions == \"rwxr-xr-x\" \/\/ default, but I'd expect mainDirPermissions\r\n        file(\"dest\/sub\").permissions == subfolderPermissions \/\/fails: it's 755\r\n        file(\"dest\/sub\/dir\").permissions == subsubfolderPermissions \/\/fails: it's 755\r\n    }\r\n```    \r\n\r\n### Gradle version\r\n\r\n8.6\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["There are two possible solutions:\r\n\r\n## Permissions only affect children\r\n\r\n`dirPermissions` affect only children of the destination.\r\nIn the example below, this means `topLevelPermissions` would affect \"prefix\", and `permissions` would affect everything from \"files\". \"dest\" would have default permissions since there is nothing \"above\" it.\r\n```\r\ntask copy(type:Copy) {\r\n  destinationDir = file(\"dest\")\r\n  into(\"prefix\") {\r\n    from(\"files\")\r\n    dirPermissions { unix(\"${permissions}\") }\r\n  }\r\n  dirPermissions { unix(\"${topLevelPermissions}\") }\r\n}\r\n```\r\nThis means that in the example below, `topLevelPermissions` won't affect anything: \"dest\" would have default permissions, and \"files\" would have `permissions`.\r\n```\r\ntask copy(type:Copy) {\r\n  destinationDir = file(\"dest\")\r\n  from(\"files\"){\r\n    dirPermissions { unix(\"${permissions}\") }\r\n  }\r\n  dirPermissions { unix(\"${topLevelPermissions}\") }\r\n}\r\n```\r\nIt's unclear how to set different permissions for directories with the same parent:\r\n```\r\ntask copy(type: Copy) {\r\n    into(\"dest\")\r\n    from(\"files\"){\r\n        dirPermissions {\r\n            unix(\"${subfolderPermissions}\")\r\n        }\r\n        into(\"subfolder1\")\r\n    }\r\n    from(\"files\"){\r\n        dirPermissions {\r\n            unix(\"${subfolder2Permissions}\")\r\n        }\r\n        into(\"subfolder2\")\r\n    }\r\n    dirPermissions {\r\n      unix(\"${mainDirPermissions}\")\r\n    }\r\n}\r\n```\r\nIn the example above \"subfolder1\" and \"subfolder2\" would have \"mainDirPermissions\" because `into(\"subfolder2\")` is the same as `destinationDir = file(\"subfolder2\")` and does not create a child spec. Changing it to `into(\"subfolder2\"){...}` or to \r\n```\r\ninto(\"subfolder2\")\r\ninto(\".\"){...}\r\n```\r\nwouldn't help as it's a childSpec that is ignored during walking (see also #27220).\r\n\r\nA possible solution to this: \r\n`destPermissions`, affecting the destination directory. It does not make sense for it to affect children paths, as there would be plenty of ways to do that.\r\n\r\n## Permissions affect both current spec and its children\r\n\r\nFirst of all, this will be a breaking change, because in the current version of gradle, all intermediate directories have default 0755 permissions.\r\n\r\n```\r\ntask copy(type:Copy) {\r\n  destinationDir = file(\"dest\")\r\n  into(\"prefix\") {\r\n    from(\"files\"){\r\n        dirPermissions { unix(\"${filesPermissions}\") }\r\n    }\r\n    dirPermissions { unix(\"${prefixPermissions}\") }\r\n  }\r\n  dirPermissions { unix(\"${topLevelPermissions}\") }\r\n}\r\n```\r\nIn the example above, \"dest\" would have `topLevelPermissions`, \"prefix\" - `prefixPermissions`, and everything inside files -`filesPermissions`.\r\n\r\nThis would allow to set different permissions for directories having the same parent:\r\n```\r\ntask copy(type: Copy) {\r\n    into(\"dest\")\r\n    into(\"subfolder1\"){\r\n        dirPermissions {\r\n            unix(\"${subfolderPermissions}\")\r\n        }\r\n        from(\"files\"){\r\n            dirPermissions {\r\n                unix(\"${subsubfolderPermissions}\")\r\n            }\r\n        }\r\n    }\r\n    into(\"subfolder2\"){\r\n        dirPermissions {\r\n            unix(\"${subfolder2Permissions}\")\r\n        }\r\n        from(\"files\"){\r\n            dirPermissions {\r\n                unix(\"${subsubfolderPermissions}\")\r\n            }\r\n        }\r\n    }\r\n    dirPermissions {\r\n      unix(\"${mainDirPermissions}\")\r\n    }\r\n}\r\n``` \r\nIn the example above:\r\n `dest` would have `mainDirPermissions`, \r\n `dest\/subfolder1` - `subfolderPermissions`, \r\n `dest\/subfolder1\/**` - `subsubfolderPermissions`, \r\n `dest\/subfolder2` - `subfolder2Permissions`, \r\n `dest\/subfolder2\/**` - `subsubfolderPermissions`","Spec \r\nhttps:\/\/docs.google.com\/document\/d\/1jEUEkS1qSXQyIINFsUYyxqfDfBemrIXMZEQVMGzXUBI\/edit#heading=h.610fausqnpu6"],"labels":["a:bug","in:file-tasks"]},{"title":"Calling System.out.println in build logic may lead to a deadlock with virtual threads enabled","body":"### Current Behavior\n\nI can't reproduce it in a small demo, but it is real.\r\n\r\nJDK 21.0.2 + Virtual Threads (more than 100) + System.out.println(inside VT) + Gradle test runner (org.gradle.internal.io.LinePerThreadBufferingOutputStream)\r\nand \u2026 from time to time it hangs up.\r\n\r\nIf you change any part: IDEA runner instead of Gradle or System.out.write instead of println or platform threads instead of virtual threads - everything works without problems.\r\n\r\nIt is blocked so hard: I can't make dump (Visual VM and command line tools hangs up in process).\r\nSo does Thread.getStackTrace()\r\n\r\nThe only thing I could capture is: Thread's toString\r\n\r\nThey all are in this state:\r\n```\r\nVirtualThread[#64,VT-3]\/blocked@ForkJoinPool-1-worker-21\r\nVirtualThread[#65,VT-4]\/blocked@ForkJoinPool-1-worker-31\r\nVirtualThread[#66,VT-5]\/blocked@ForkJoinPool-1-worker-41\r\n```\r\n\r\n`-Djdk.tracePinnedThreads=full` doesn't show anything\r\n\n\n### Expected Behavior\n\nIt must not hang up\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\nJDK 21.0.2 + Virtual Threads (more than 100) + System.out.println(inside VT) + Gradle test runner \r\n+ \r\n`-XX:ActiveProcessorCount=64` or more\r\n\n\n### Gradle version\n\n8.5\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\nJDK 21.0.2, Windows 10","comments":["`Logback ConsoleAppender` works: it uses `System.out.write()`:\r\nI have changed `println` to `write` and: no more blocking\/deadlocking!\r\nSo the problem is somewhere in the depths of your `LinePerThreadBufferingOutputStream.println()` implementation.","Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n***\r\n@gradle\/bt-core-runtime-maintainers would we do something about this without a reproducer?\r\n***\r\nIf you find a way to provide a reproducer it would help a lot!\r\n\r\nThe ideal way to provide a reproducer is to leverage our [reproducer template](https:\/\/github.com\/gradle\/gradle-issue-reproducer). You can also use [Gradle Project Replicator](https:\/\/github.com\/android\/project-replicator) to reproduce the structure of your project.\r\n\r\nAlso adding more details on what the build is supposed to do and how may also help us.\r\nHow do VirtualThreads come into play here?","> How do VirtualThreads come into play here?\r\n\r\nIf I use VirtualThreads thread pool, then `println` blocks (sometime)\r\nIf I use normal (platform) thread pool, then `println` works\r\n\r\nI have solved my problem by using slf4j.info() and\/or System.out.write instead of System.out.println",">@gradle\/bt-core-runtime-maintainers would we do something about this without a reproducer?\r\n\r\nIt is a bit tricky to proceed without a thread dump, but probably possible. Most likely, the situation is similar to what is described in [this article](https:\/\/blog.ydb.tech\/how-we-switched-to-java-21-virtual-threads-and-got-deadlock-in-tpc-c-for-postgresql-cca2fe08d70b) - all carrier threads wait for synchronized and output connection, while a virtual thread holding the connection lock is unmounted and has no free carrier thread to mount on.\r\n\r\nIt is probably solvable (e.g. we can start with replacing `synchronized` blocks with `ReentrantLock` in the `LinePerThreadBufferingOutputStream`), but I cannot estimate how deep this rabbit hole is. Gradle doesn't use virtual threads and most plugins likely don't either, so I don't see this issue as a high priority.","I couldn't make thread dump: tools have been blocked too \ud83e\udd37\u200d\u2640\ufe0f in middle of the connection-process","Hi, I have the impression of being affected by a similar issue (Gradle stuck on LinePerThreadBufferingOutputStream\r\n println), but this is with Java 17. Let me know if I should open a separate issue.\r\n\r\nJVM: OpenJDK 64-Bit Server VM (17.0.9+9-Ubuntu-122.04)\r\nGradle: 8.3\r\n\r\nI cannot reproduce with Gradle 8.6, but maybe I am just lucky.\r\n\r\nI managed to collect a thread dump:\r\n\r\n```\r\n\"Test worker\" #1 prio=5 os_prio=0 cpu=10497,63ms elapsed=396,93s tid=0x00007f21b401c090 nid=0x5a260 waiting on condition  [0x00007f21bbdfe000]\r\n   java.lang.Thread.State: TIMED_WAITING (parking)\r\n        at jdk.internal.misc.Unsafe.park(java.base@17.0.9\/Native Method)\r\n        - parking to wait for  <0x00000000e0b6ab40> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\r\n        at java.util.concurrent.locks.LockSupport.parkNanos(java.base@17.0.9\/LockSupport.java:252)\r\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(java.base@17.0.9\/AbstractQueuedSynchronizer.java:1672)\r\n        at java.util.concurrent.ThreadPoolExecutor.awaitTermination(java.base@17.0.9\/ThreadPoolExecutor.java:1464)\r\n        at org.gradle.internal.concurrent.AbstractManagedExecutor.stop(AbstractManagedExecutor.java:86)\r\n        at org.gradle.internal.concurrent.DefaultExecutorFactory$TrackedManagedExecutor.stop(DefaultExecutorFactory.java:116)\r\n        at org.gradle.internal.concurrent.AbstractManagedExecutor.stop(AbstractManagedExecutor.java:76)\r\n        at org.gradle.internal.remote.internal.hub.MessageHub.stop(MessageHub.java:225)\r\n        at org.gradle.internal.concurrent.CompositeStoppable.stop(CompositeStoppable.java:106)\r\n        - locked <0x00000000ff751208> (a org.gradle.internal.concurrent.CompositeStoppable)\r\n        at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection.stop(MessageHubBackedObjectConnection.java:150)\r\n        at org.gradle.internal.concurrent.CompositeStoppable.stop(CompositeStoppable.java:106)\r\n        - locked <0x00000000ff750c60> (a org.gradle.internal.concurrent.CompositeStoppable)\r\n        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:117)\r\n        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)\r\n        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\r\n        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\r\n\r\n   Locked ownable synchronizers:\r\n        - None\r\n\r\n\"\/127.0.0.1:59742 to \/127.0.0.1:35013 workers\" #24 prio=5 os_prio=0 cpu=8,52ms elapsed=393,66s tid=0x00007f21b4b0d670 nid=0x5a36f waiting on condition  [0x00007f218d4f5000]\r\n   java.lang.Thread.State: WAITING (parking)\r\n        at jdk.internal.misc.Unsafe.park(java.base@17.0.9\/Native Method)\r\n        - parking to wait for  <0x00000000e03fd460> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\r\n        at java.util.concurrent.locks.LockSupport.park(java.base@17.0.9\/LockSupport.java:341)\r\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(java.base@17.0.9\/AbstractQueuedSynchronizer.java:506)\r\n        at java.util.concurrent.ForkJoinPool.unmanagedBlock(java.base@17.0.9\/ForkJoinPool.java:3465)\r\n        at java.util.concurrent.ForkJoinPool.managedBlock(java.base@17.0.9\/ForkJoinPool.java:3436)\r\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(java.base@17.0.9\/AbstractQueuedSynchronizer.java:1623)\r\n        at org.gradle.internal.remote.internal.hub.queue.EndPointQueue.take(EndPointQueue.java:49)\r\n        at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:403)\r\n        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n        at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@17.0.9\/ThreadPoolExecutor.java:1136)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@17.0.9\/ThreadPoolExecutor.java:635)\r\n        at java.lang.Thread.run(java.base@17.0.9\/Thread.java:840)\r\n\r\n   Locked ownable synchronizers:\r\n        - <0x00000000e03fd848> (a java.util.concurrent.ThreadPoolExecutor$Worker)\r\n\r\n\"\/127.0.0.1:59742 to \/127.0.0.1:35013 workers Thread 2\" #25 prio=5 os_prio=0 cpu=1787,88ms elapsed=393,51s tid=0x00007f21b4b3a6f0 nid=0x5a372 runnable  [0x00007f218d3f5000]\r\n   java.lang.Thread.State: RUNNABLE\r\n        at sun.nio.ch.EPoll.wait(java.base@17.0.9\/Native Method)\r\n        at sun.nio.ch.EPollSelectorImpl.doSelect(java.base@17.0.9\/EPollSelectorImpl.java:118)\r\n        at sun.nio.ch.SelectorImpl.lockAndDoSelect(java.base@17.0.9\/SelectorImpl.java:129)\r\n        - locked <0x00000000e0faec78> (a sun.nio.ch.Util$2)\r\n        - locked <0x00000000e0faec28> (a sun.nio.ch.EPollSelectorImpl)\r\n        at sun.nio.ch.SelectorImpl.select(java.base@17.0.9\/SelectorImpl.java:146)\r\n        at org.gradle.internal.remote.internal.inet.SocketConnection$SocketOutputStream.waitForWriteBufferToDrain(SocketConnection.java:296)\r\n        at org.gradle.internal.remote.internal.inet.SocketConnection$SocketOutputStream.writeBufferToChannel(SocketConnection.java:270)\r\n        at org.gradle.internal.remote.internal.inet.SocketConnection$SocketOutputStream.write(SocketConnection.java:253)\r\n        at com.esotericsoftware.kryo.io.Output.flush(Output.java:163)\r\n        at com.esotericsoftware.kryo.io.Output.require(Output.java:142)\r\n        at com.esotericsoftware.kryo.io.Output.writeLong(Output.java:501)\r\n        at org.gradle.internal.serialize.kryo.KryoBackedEncoder.writeLong(KryoBackedEncoder.java:53)\r\n        at org.gradle.api.internal.tasks.testing.worker.TestEventSerializer$IdSerializer.write(TestEventSerializer.java:100)\r\n        at org.gradle.api.internal.tasks.testing.worker.TestEventSerializer$IdSerializer.write(TestEventSerializer.java:91)\r\n        at org.gradle.internal.serialize.DefaultSerializerRegistry$TaggedTypeSerializer.write(DefaultSerializerRegistry.java:171)\r\n        at org.gradle.internal.remote.internal.hub.DefaultMethodArgsSerializer$ArraySerializer.write(DefaultMethodArgsSerializer.java:80)\r\n        at org.gradle.internal.remote.internal.hub.DefaultMethodArgsSerializer$ArraySerializer.write(DefaultMethodArgsSerializer.java:61)\r\n        at org.gradle.internal.remote.internal.hub.MethodInvocationSerializer$MethodInvocationWriter.writeArgs(MethodInvocationSerializer.java:78)\r\n        at org.gradle.internal.remote.internal.hub.MethodInvocationSerializer$MethodInvocationWriter.write(MethodInvocationSerializer.java:74)\r\n        at org.gradle.internal.remote.internal.hub.MethodInvocationSerializer$MethodInvocationWriter.write(MethodInvocationSerializer.java:58)\r\n        at org.gradle.internal.serialize.kryo.TypeSafeSerializer$2.write(TypeSafeSerializer.java:47)\r\n        at org.gradle.internal.remote.internal.hub.InterHubMessageSerializer$MessageWriter.write(InterHubMessageSerializer.java:104)\r\n        at org.gradle.internal.remote.internal.hub.InterHubMessageSerializer$MessageWriter.write(InterHubMessageSerializer.java:88)\r\n        at org.gradle.internal.remote.internal.inet.SocketConnection.dispatch(SocketConnection.java:122)\r\n        at org.gradle.internal.remote.internal.hub.MessageHub$ConnectionDispatch.run(MessageHub.java:328)\r\n        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n        at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@17.0.9\/ThreadPoolExecutor.java:1136)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@17.0.9\/ThreadPoolExecutor.java:635)\r\n        at java.lang.Thread.run(java.base@17.0.9\/Thread.java:840)\r\n\r\n   Locked ownable synchronizers:\r\n        - <0x00000000e03fdb88> (a java.util.concurrent.ThreadPoolExecutor$Worker)\r\n\r\n\"\/127.0.0.1:59742 to \/127.0.0.1:35013 workers Thread 3\" #26 prio=5 os_prio=0 cpu=12,24ms elapsed=393,50s tid=0x00007f21b4b3b4e0 nid=0x5a373 runnable  [0x00007f218d2f5000]\r\n   java.lang.Thread.State: RUNNABLE\r\n        at sun.nio.ch.EPoll.wait(java.base@17.0.9\/Native Method)\r\n        at sun.nio.ch.EPollSelectorImpl.doSelect(java.base@17.0.9\/EPollSelectorImpl.java:118)\r\n        at sun.nio.ch.SelectorImpl.lockAndDoSelect(java.base@17.0.9\/SelectorImpl.java:129)\r\n        - locked <0x00000000e03fe8b0> (a sun.nio.ch.Util$2)\r\n        - locked <0x00000000e03fe860> (a sun.nio.ch.EPollSelectorImpl)\r\n        at sun.nio.ch.SelectorImpl.select(java.base@17.0.9\/SelectorImpl.java:146)\r\n        at org.gradle.internal.remote.internal.inet.SocketConnection$SocketInputStream.read(SocketConnection.java:185)\r\n        at com.esotericsoftware.kryo.io.Input.fill(Input.java:146)\r\n        at com.esotericsoftware.kryo.io.Input.require(Input.java:178)\r\n        at com.esotericsoftware.kryo.io.Input.readByte(Input.java:295)\r\n        at org.gradle.internal.serialize.kryo.KryoBackedDecoder.readByte(KryoBackedDecoder.java:88)\r\n        at org.gradle.internal.remote.internal.hub.InterHubMessageSerializer$MessageReader.read(InterHubMessageSerializer.java:64)\r\n        at org.gradle.internal.remote.internal.hub.InterHubMessageSerializer$MessageReader.read(InterHubMessageSerializer.java:52)\r\n        at org.gradle.internal.remote.internal.inet.SocketConnection.receive(SocketConnection.java:81)\r\n        at org.gradle.internal.remote.internal.hub.MessageHub$ConnectionReceive.run(MessageHub.java:270)\r\n        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n        at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@17.0.9\/ThreadPoolExecutor.java:1136)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@17.0.9\/ThreadPoolExecutor.java:635)\r\n        at java.lang.Thread.run(java.base@17.0.9\/Thread.java:840)\r\n\r\n   Locked ownable synchronizers:\r\n        - <0x00000000e0906e08> (a java.util.concurrent.ThreadPoolExecutor$Worker)\r\n\r\n\"pool-12-thread-1\" #108 prio=5 os_prio=0 cpu=15915,67ms elapsed=367,58s tid=0x00007f2078006510 nid=0x5abef runnable  [0x00007f218c1f1000]\r\n   java.lang.Thread.State: RUNNABLE\r\n        at java.nio.charset.CharsetEncoder.encode(java.base@17.0.9\/CharsetEncoder.java:585)\r\n        at sun.nio.cs.StreamEncoder.implWrite(java.base@17.0.9\/StreamEncoder.java:293)\r\n        at sun.nio.cs.StreamEncoder.implWrite(java.base@17.0.9\/StreamEncoder.java:282)\r\n        at sun.nio.cs.StreamEncoder.write(java.base@17.0.9\/StreamEncoder.java:132)\r\n        - locked <0x00000000ff748290> (a java.io.OutputStreamWriter)\r\n        at java.io.OutputStreamWriter.write(java.base@17.0.9\/OutputStreamWriter.java:205)\r\n        at java.io.BufferedWriter.flushBuffer(java.base@17.0.9\/BufferedWriter.java:120)\r\n        - locked <0x00000000ff748290> (a java.io.OutputStreamWriter)\r\n        at java.io.PrintStream.write(java.base@17.0.9\/PrintStream.java:698)\r\n        - locked <0x00000000ff746188> (a java.io.PrintStream)\r\n        at java.io.PrintStream.print(java.base@17.0.9\/PrintStream.java:863)\r\n        at org.gradle.internal.io.LinePerThreadBufferingOutputStream.println(LinePerThreadBufferingOutputStream.java:239)\r\n        - locked <0x00000000e0b53340> (a org.gradle.internal.io.LinePerThreadBufferingOutputStream)\r\n        at io.mycompny.myproject.worker.shared.QueueSubscriberTest$LongWorker.execute(QueueSubscriberTest.java:664)\r\n        at io.mycompny.myproject.worker.shared.QueueSubscriber.lambda$processMessage$0(QueueSubscriber.java:158)\r\n        at io.mycompny.myproject.worker.shared.QueueSubscriber$$Lambda$662\/0x00007f214040b4a0.call(Unknown Source)\r\n        at java.util.concurrent.FutureTask.run(java.base@17.0.9\/FutureTask.java:264)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@17.0.9\/ThreadPoolExecutor.java:1136)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@17.0.9\/ThreadPoolExecutor.java:635)\r\n        at java.lang.Thread.run(java.base@17.0.9\/Thread.java:840)\r\n\r\n   Locked ownable synchronizers:\r\n        - <0x00000000e0d74610> (a java.util.concurrent.ThreadPoolExecutor$Worker)\r\n\r\n\"pool-45-thread-1\" #269 prio=5 os_prio=0 cpu=14834,31ms elapsed=364,20s tid=0x00007f206c001f30 nid=0x5acf4 waiting for monitor entry  [0x00007f213edfd000]\r\n   java.lang.Thread.State: BLOCKED (on object monitor)\r\n        at org.gradle.internal.io.LinePerThreadBufferingOutputStream.println(LinePerThreadBufferingOutputStream.java:238)\r\n        - waiting to lock <0x00000000e0b53340> (a org.gradle.internal.io.LinePerThreadBufferingOutputStream)\r\n        at io.mycompny.myproject.worker.shared.QueueSubscriberTest$LongWorker.execute(QueueSubscriberTest.java:664)\r\n        at io.mycompny.myproject.worker.shared.QueueSubscriber.lambda$processMessage$0(QueueSubscriber.java:158)\r\n        at io.mycompny.myproject.worker.shared.QueueSubscriber$$Lambda$662\/0x00007f214040b4a0.call(Unknown Source)\r\n        at java.util.concurrent.FutureTask.run(java.base@17.0.9\/FutureTask.java:264)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@17.0.9\/ThreadPoolExecutor.java:1136)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@17.0.9\/ThreadPoolExecutor.java:635)\r\n        at java.lang.Thread.run(java.base@17.0.9\/Thread.java:840)\r\n\r\n   Locked ownable synchronizers:\r\n        - <0x00000000f1f0fdc8> (a java.util.concurrent.ThreadPoolExecutor$Worker)\r\n\r\n```","> Hi, I have the impression of being affected by a similar issue (Gradle stuck on LinePerThreadBufferingOutputStream println), but this is with Java 17. Let me know if I should open a separate issue.\r\n\r\nFrom the thread dump itself it isn't obvious where the deadlock is. Do you see the code stuck in this state for several thread dumps in a row?\r\n\r\n","I was affected by the issue multiple times in a row, yes. I forgot to mention we are using `org.gradle.parallel=true`"],"labels":["in:logging","a:bug"]},{"title":"Improve warning about output files of unknown origin","body":"Before task execution Gradle shows a warning when it sees files in the task's outputs that are not in sync with the task's recorded execution state (stored in the `ExecutionHistoryStore`). The message we show looks like this:\r\n\r\n    Overlapping outputs: Gradle does not know how file '...' was created (output property '...'). Task output caching requires exclusive access to output paths to guarantee correctness (i.e. multiple tasks are not allowed to produce output in the same location).\r\n\r\nIt is produced here:\r\n\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/2e53b7469af3111f40e89519027d45166b64bb58\/subprojects\/core\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/execution\/DefaultTaskCacheabilityResolver.java#L73-L77\r\n\r\nThere are multiple problems with this:\r\n\r\n- \"Task output caching\" has long been renamed to \"build cache,\" but we never updated it here. Indeed, the reported problem can happen with any incremental work (most importantly incremental artifact transforms). So the message should reflect that.\r\n- With the above said, we only actually check for and report this problem for tasks now. We should check it for incremental transforms, too.\r\n- While overlapping outputs (two tasks writing to the same location) is a prime cause of the problem, there are others. We should change the message to indicate this, and list the potential causes. One other cause could be if the same subproject is included in multiple Gradle builds that are both used to run tasks in the subproject.","comments":[],"labels":["a:chore","in:work-validation"]},{"title":"Use AWS Java SDK v2","body":"### Expected Behavior\n\nWe should be able to use S3 Object Lambda access points for our S3 repositories.\n\n### Current Behavior (optional)\n\nWe are using gradle 7.4.0 and gradle throws an exception (not implemented) when trying to access these. I tried and 8.x version and it had the same problem.\n\n### Context\n\nI've implemented this in my fork and I would like to contribute my changes back to gradle.\r\n\r\nWe are using this as sort of a pull through cache. We build in multiple AWS regions and most artifacts are generated and used in the same region. There are some artifacts that are published to our \"primary\" region that are needed in the \"secondary\" region. This scheme allows us to transparently fetch the needed resources in the \"secondary\" regions.\r\n","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n***\r\n\r\nRelated:\r\n* #4162","@pkania could you share the fork with us?","I've shared with big-guy. My changes are based off v7.4.0 on a branch named pkania\/740\/aws-sdk-java-v2."],"labels":["a:feature","in:dependency-remoting"]},{"title":"Attributes on an artifact view are always treated leniently","body":"### Current Behavior\r\n\r\nIf you specify attributes on an artifact view to select a specific artifact,\r\nor even to select a different variant using `withVariantReselection()`,\r\nyou cannot make the artifact view fail if there is a resolution error, but it is always treated leninently.\r\n\r\n\r\n### Expected Behavior\r\n\r\nThe `lenient` property on the artifact view should control whehter an artifact view behaves lenient or strict.\r\n\r\n### Steps to Reproduce\r\n\r\nHere a reproducer with three variants to comment in \/ out.\r\n\r\nIf you execute some task with \"(1)\", it fails as expected as the attribute cannot be satisfied.\r\nIf you execute some task with \"(2)\", it works, producing no output as the artifact view is lenient.\r\n\r\nNow the unexpected, if you execute some task with \"(3)\", it works producing no output,\r\nbut I would have exepcted it to fail.\r\nI did not switch the artifact view to lenient - even for the sake of the example set it to false explicitly - so it should fail when trying to resolve and not finding a matching variant.\r\n\r\nEven when not using `withVariantReselection()` but just using attributes to select an artifact in the view, it should not behave lenient always.\r\n\r\nEven if `lenient` would stay the default, it should at least be possible to switch to strict mode.\r\n\r\n```kts\r\nrepositories {\r\n    gradlePluginPortal()\r\n}\r\nval foo by configurations.dependencyScope(\"foo\")\r\ndependencies {\r\n    components.all { allVariants { attributes.attribute(TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE, objects.named(\"foo\")) } }\r\n    foo(\"com.gradle.enterprise:com.gradle.enterprise.gradle.plugin:3.16.1\")\r\n}\r\nval bar by configurations.resolvable(\"bar\") {\r\n    extendsFrom(foo)\r\n    attributes {\r\n        attribute(TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE, objects.named(TargetJvmEnvironment.ANDROID))\r\n    }\r\n}\r\nval baz by configurations.resolvable(\"baz\") {\r\n    extendsFrom(foo)\r\n}\r\n\/\/ (1) failed\r\n\/\/bar.forEach { println(\"FOO: $it\") }\r\n\/\/ (2) geht\r\n\/\/bar.incoming.artifactView { isLenient = true }.files.forEach { println(\"FOO: $it\") }\r\n\/\/ (3) geht, sollte aber nicht\r\nbaz.incoming.artifactView {\r\n    isLenient = false\r\n    withVariantReselection()\r\n    attributes {\r\n        attribute(TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE, objects.named(TargetJvmEnvironment.ANDROID))\r\n    }\r\n}.files.forEach { println(\"FOO: $it\") }\r\n```\r\n\r\n### Gradle version\r\n\r\n8.5\r\n","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:bug","in:dependency-resolution"]},{"title":"More possible scopes for build services","body":"### Expected Behavior\r\n\r\nCurrently a build service is always build scoped.\r\nIt would be nice if there were also more narrow scopes, like for example a project scope.\r\nOr maybe anything that is `ExtensionAware` could be a valid scope for a build service.\r\nFor my use-case maybe even task-scoped would be helpful.\r\n\r\n### Context\r\n\r\nOne of the use-cases for example is mentioned at https:\/\/www.linen.dev\/s\/gradle-community\/t\/16113218\/if-i-register-a-build-service-in-multiple-subprojects-is-the.\r\n\r\nAnother use-case I recently had was reporting executed tests to TeamCity for test tasks that were UP-TO-DATE or FROM-CACHE, as TeamCity only auto-recognizes tests that are actually executed by using a test execution listener. I currently solved this using\r\n```kotlin\r\nprivate fun Project.reportReusedTestResults() {\r\n    if (project.hasProperty(\"teamcity\")) {\r\n        val reportReusedTestResults = gradle\r\n            .sharedServices\r\n            .registerIfAbsent(\"reportReusedTestResults for $path\", ReportReusedTestResultsService::class) {\r\n                parameters {\r\n                    tasks.withType<Test>().configureEach {\r\n                        testReportEntryPoints.put(path, provider { reports.junitXml.entryPoint.absolutePath })\r\n                    }\r\n                }\r\n            }\r\n        buildEventsListenerRegistry.onTaskCompletion(reportReusedTestResults)\r\n    }\r\n}\r\n```\r\nwith\r\n```kotlin\r\nabstract class ReportReusedTestResultsService : BuildService<Parameters>, OperationCompletionListener {\r\n    override fun onFinish(event: FinishEvent) {\r\n        check(event is TaskFinishEvent) { \"Expected to only receive TaskFinishEvent instances\" }\r\n\r\n        if (event.result.let { (it !is TaskSuccessResult) || !it.isUpToDate }) {\r\n            \/\/ task was actually executed, so tests were already reported\r\n            return\r\n        }\r\n\r\n        val testReportEntryPoint = parameters.testReportEntryPoints.getting(event.descriptor.taskPath)\r\n        if (testReportEntryPoint.isPresent) {\r\n            println(\"##teamcity[importData type='junit' path='${testReportEntryPoint.get()}\/*.xml']\")\r\n        }\r\n    }\r\n\r\n    interface Parameters : BuildServiceParameters {\r\n        val testReportEntryPoints: MapProperty<String, String>\r\n    }\r\n}\r\n```","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n***\r\nLoosely related to:\r\n* #27602","Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team and is prioritized by them.\r\n\n***\n\nThis is an interesting feature to consider. We'd love to hear about more potential use cases to shape the design better, though."],"labels":["a:feature","in:build-services"]},{"title":"Check that finalizer task does not depend on the tasks it finalizes","body":"### Expected Behavior\r\n\r\n```kotlin\r\nval cleanup = tasks.register(\"cleanup\") {\r\n    doLast {\r\n        throw GradleException(\"cleanup should fail too!\")\r\n    }\r\n    dependsOn(\"failing\") \/\/wrong\r\n}\r\n\r\nval failing = tasks.register(\"failing\") {\r\n    doFirst {\r\n        throw GradleException(\"OH no! I Failed! I need cleanup!\")\r\n    }\r\n    finalizedBy(cleanup)\r\n}\r\n```\r\nfails with validation error.\r\n\r\n### Current Behavior (optional)\r\n\r\nIt does not fail, resulting in confusing behavior\r\n\r\n### Context\r\n\r\nSee:\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/27707","comments":["I wonder if there is a use case when someone wants that kind of relation when there is no failure (since that is possible I am sure there is :)). So I think this is something we will not implement.\r\n\r\nNote that we technically support a case described in the original issue https:\/\/github.com\/gradle\/gradle\/issues\/27707 atm, when depending on a task that throws [VerificationException](https:\/\/github.com\/gradle\/gradle\/blob\/c8522c2815525ebd152375c3fd56d9fbad7f2093\/subprojects\/core\/src\/main\/java\/org\/gradle\/api\/tasks\/VerificationException.java#L22-L39) by consuming task outputs and not via `dependsOn` (that is not a bug but it was a decision).\r\nThis exception is thrown by verification tasks (Test etc.) and aggregation tasks can then consume outputs. \r\n\r\nA modified example from the original issue:\r\n```\r\nval failing = tasks.register(\"failing\") {\r\n    outputs.file(file(\"build\/failing\/failing.txt\"))\r\n    doFirst {\r\n        file(\"build\/failing\/failing.txt\").writeText(\"Some test report\")\r\n        throw VerificationException(\"OH no! I Failed! I need cleanup!\")\r\n    }\r\n    finalizedBy(\"cleanup\")\r\n}\r\n\r\nval cleanup = tasks.register(\"cleanup\") {\r\n    inputs.files(failing) \/\/ depend on failing via outputs not via dependsOn\r\n    doLast {\r\n        throw GradleException(\"cleanup should fail too!\")\r\n    }\r\n}\r\n```\r\n\r\nIn that case second task is run always, e.g.:\r\n```\r\n\u276f .\/gradlew failing\r\n> Task :failing FAILED\r\n> Task :cleanup FAILED\r\n```\r\n\r\n```\r\n\u276f .\/gradlew cleanup\r\n> Task :failing FAILED\r\n> Task :cleanup FAILED\r\n```","Can we close this based on what @asodja says?","@lptr I think at least the docs should be improved. \r\n\r\nHowever, It's hard for me to imagine a use case when the described behavior is good. I think it's better to have restricted, but comprehensible API compared to supporting wild use cases."],"labels":["a:feature","in:work-validation","re:comprehensibility"]},{"title":"TaskExecutionGraph.hasTask(String) a bit slow","body":"### Current Behavior\r\n\r\nI'm finding that [TaskExecutionGraph.hasTask(String)](https:\/\/github.com\/gradle\/gradle\/blob\/19db0f499fd22a228355c1a6594b9159176a466e\/subprojects\/core\/src\/main\/java\/org\/gradle\/execution\/taskgraph\/DefaultTaskExecutionGraph.java#L260) is a bit slow (due to [findTask(String)](https:\/\/github.com\/gradle\/gradle\/blob\/19db0f499fd22a228355c1a6594b9159176a466e\/subprojects\/core\/src\/main\/java\/org\/gradle\/execution\/taskgraph\/DefaultTaskExecutionGraph.java#L250))\r\n\r\n### Expected Behavior\r\n\r\nIt would be nice if it could be a little bit faster\r\n\r\n### Context (optional)\r\n\r\nWhen I prototype saving all of the tasks [into a HashMap](https:\/\/github.com\/gradle\/gradle\/commit\/3d70628eaae15ee6994cb699cdf903aa8e53e4a8), it seems to shorten configuration time for our AndroidX build by about 3-5 seconds (down from about 5m6s)\r\n\r\nIn practice, the call to TaskExecutionGraph.hasTask(String) seems to be coming from [here](https:\/\/android.googlesource.com\/platform\/tools\/base\/+\/44bde68030a42053097b2dd6435087602cae0cab\/build-system\/gradle-core\/src\/main\/java\/com\/android\/build\/gradle\/internal\/lint\/LintTaskManager.kt#287)\r\n\r\n### Steps to Reproduce\r\n\r\nI made a somewhat similar reproduction case at https:\/\/github.com\/mathjeff\/gradle-samples-2\/tree\/main\/hasTask-slow that creates lots of tasks and calls TaskExecutionGraph.hasTask(String) a bunch of times\r\n\r\n### Gradle version\r\n\r\n8.6-rc-1\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Some things that I'm not sure about, which prevented me from just submitting a pull request:\r\n\r\n* Whether this (slow calls to TaskExecutionGraph.hasTask(String) caused by having lots of tasks) is common enough to warrant spending some extra memory saving more metadata about which task has which path\r\n* Whether this metadata already exists somewhere else where we can just use it - can we get the task from the project and then use the faster TaskExecutionGraph.hasTask(Task)?","Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n"],"labels":["a:bug","to-triage","in:scheduler",":wave: team-triage"]},{"title":"Parallel dependency resolution for configuration cache","body":"### Expected Behavior\n\nDependencies could be resolved in parallel when using [configuration cache](https:\/\/docs.gradle.org\/current\/userguide\/configuration_cache.html).\n\n### Current Behavior (optional)\n\nWhen using [configuration cache](https:\/\/docs.gradle.org\/current\/userguide\/configuration_cache.html), dependencies which would normally be resolved at execution time are instead resolved during configuration, and aren't resolved in parallel. This means that using configuration cache could be more expensive than anticipated if resolving dependencies of affected configurations is nontrivial, and users don't get the performance benefits of parallel dependency resolution.\r\n\r\nThe underlying issue appears to be that the serialization of the configuration cache is done during task graph calculation. Ideally, resolving dependencies for the configuration cache could be done independently and in parallel.\n\n### Context\n\nDevelopers who switch branches and rebase, etc frequently are not able to make effective use of configuration cache. This is not a problem in and of itself, but not having parallel dependency resolution means that it may actually be a detriment to have configuration cache enabled at all.","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n"],"labels":["a:feature","in:configuration-cache"]},{"title":"Task (probably) fails due to the usage of context receivers with configuration cache enabled","body":"### Current Behavior\n\nInside plugin (P) apply function I register a task (A). In A's `doLast {}` action block I call a function on an extension of a plugin P.\r\nWhen I apply the plugin P to any project and call task A I get next error message: \r\n```\r\nExecution failed for task ':project:A'.\r\n> Cannot invoke \"***.***.DependencyContext.of(java.lang.Class, org.gradle.api.Action)\" because \"_context_receiver_0\" is null\r\n```\r\n\r\nIt also says:\r\n```\r\n* What went wrong:\r\nConfiguration cache problems found in this build.\r\n\r\n1 problem was found storing the configuration cache.\r\n- Task `:project:A` of type `org.gradle.api.DefaultTask`: value 'org.gradle.api.internal.provider.DefaultProviderFactory_Decorated@4f41b96d' is not assignable to '***.***.FactoryContext'\r\n```\r\n\r\nHere is the definition for the DependencyContext and FactoryContext:\r\n```\r\ninterface DependencyContext : ProviderFactory, ObjectFactory\r\n\r\nclass FactoryContext(\r\n    objectFactory: ObjectFactory,\r\n    providerFactory: ProviderFactory,\r\n) : DependencyContext, ObjectFactory by objectFactory, ProviderFactory by providerFactory\r\n```\r\n\r\nThis is just a small wrapper for easier provision of contexts to functions that require several of the them as only other option at this time is nesting `with` calls.\r\n\r\nProviderFactory and ObjectFactory are provided into Plugin P extension via constructor as parameters where they are used to initialize a FactoryContext property:\r\n\r\n`private val context = FactoryContext(objectFactory, providerFactory)`\r\n\r\nFrom the looks of it, it seems like Gradle fails to deserialize this property correctly as the issue can be mitigated by disabling configuration cache\/by moving extension function call from task's `doLast {}` block to its body thus not requiring Gradle to serialize and subsequently deserialize it for execution or by giving up on context receivers and passing the values manually.\r\nNot sure the mechanism yet but the issue is definitely about usage of context receivers in the scope of runtime class decoration by Gradle.\n\n### Expected Behavior\n\nSupport for context receivers + configuration cache or valid error logs explaining the issue at hand\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\nUse context receivers + configuration cache.\r\nProviding an repo in this case is time consuming but I will happily do it after the initial assessment from the team in case it's required\n\n### Gradle version\n\n8.2.0\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n","In general, you should not implement Gradle-provided service interfaces yourself unless explicitly mentioned. In this particular case we should emit a clearer error message, but serializing custom implementations of Gradle service interfaces is not going to be supported.\n","@mlopatkin thanks for the reply.\r\nI wonder if this decision is final. The snippet above highlights an extremely powerful pattern that will be used much more extensively once context receivers are stable. This will feel like a bug. "],"labels":["a:bug","in:configuration-cache","has:workaround","re:comprehensibility"]},{"title":"Domain Object Set withType does not work with addAllLater","body":"### Current Behavior\r\n\r\nConsider these two example tests, for some `DomainObjectContainer<CharSequence>`\r\n\r\n```\r\n\/\/ DefaultDomainObjectSetTest.groovy\r\n\r\n    @NotYetImplemented\r\n    def \"withType works with addAllLater for list\"() {\r\n        given:\r\n        def value = Mock(Subtype)\r\n\r\n        when:\r\n        container.addAllLater(TestUtil.providerFactory().provider { [value] })\r\n        def result = collect(container.withType(Subtype))\r\n\r\n        then:\r\n        result == [value]\r\n    }\r\n\r\n    @NotYetImplemented\r\n    def \"withType works for addAllLater and set property\"() {\r\n        def value = Mock(Subtype)\r\n        def property = TestUtil.objectFactory().setProperty(CharSequence)\r\n        property.add(value)\r\n\r\n        when:\r\n        container.addAllLater(property)\r\n        def result = collect(container.withType(Subtype))\r\n\r\n        then:\r\n        result == [value]\r\n    }\r\n\r\n    interface Subtype extends CharSequence {}\r\n\r\n    static <T> Collection<T> collect(Iterable<T> iterable) {\r\n        def result = []\r\n        Iterator it = iterable.iterator()\r\n        while (it.hasNext()) {\r\n            result.add(it.next())\r\n        }\r\n        result\r\n    }\r\n```\r\n\r\nBoth of these tests fail even though the iterator should be realizing the lazy containers, as they provide instances of the filtered type. \r\n\r\nThese tests have been (will be) committed in https:\/\/github.com\/gradle\/gradle\/pull\/27716\r\n\r\n### Expected Behavior\r\n\r\nThe tests pass\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\nRun the above tests in `DefaultDomainObjectSetTest.groovy`\r\n\r\n### Gradle version\r\n\r\n8.6\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:bug","in:configuration-model"]},{"title":"Add support for java agents in test tasks\/suites","body":"### Expected Behavior\r\n\r\nTests run without warnings from the jvm.\r\n\r\nPerhaps the expectation would be to add test agent dependencies to a new testAgent configuration (that would map to `-javaagent:\/path\/to\/agent.jar`). Maybe in the new test-suites plugin?\r\n\r\nFor example, something like\r\n\r\n```kotlin\r\ntesting {\r\n    suites {\r\n        val test by getting(JvmTestSuite::class) {\r\n            useJUnitJupiter(\"5.10.1\")\r\n            dependencies {\r\n                implementation(\"io.mockk:mockk:1.13.9\")\r\n                testAgent(\"net.bytebuddy:byte-buddy-agent:1.14.6\")\r\n            }\r\n\/\/ ...\r\n```\r\n\r\n\r\n### Current Behavior (optional)\r\n\r\nIn java 21, agents warn when loaded dynamically.\r\n```\r\nWARNING: A Java agent has been loaded dynamically (\/Users\/cwalker\/.gradle\/caches\/modules-2\/files-2.1\/net.bytebuddy\/byte-buddy-agent\/1.14.6\/46e2545d7a97b6ccb195621650c5957279eb4812\/byte-buddy-agent-1.14.6.jar)\r\nWARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning\r\nWARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information\r\nWARNING: Dynamic loading of agents will be disallowed by default in a future release\r\n```\r\n\r\n### Context\r\n\r\nUsing mockk, which loads the bytebuddy agent dynamically.\r\n\r\nSee https:\/\/github.com\/mockk\/mockk\/issues\/1171 for upstream mockk issue, and https:\/\/github.com\/mockito\/mockito\/issues\/3037 for upstream mockito issue.\r\n\r\n### Current workaround\r\n\r\n```kotlin\r\nval testAgent by configurations.creating\r\n\r\ndependencies {\r\n    testAgent(\"net.bytebuddy:byte-buddy-agent:1.14.6\")\r\n}\r\n\r\ntesting {\r\n    suites {\r\n        val test by getting(JvmTestSuite::class) {\r\n            useJUnitJupiter(\"5.10.1\")\r\n            dependencies {\r\n                implementation(\"io.mockk:mockk:1.13.9\")\r\n            }\r\n            targets.configureEach {\r\n                testTask.configure {\r\n                    jvmArgs(testAgent.files.map { \"-javaagent:${it.absolutePath}\" }) \/\/ comment this out to see warning\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```","comments":["Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team and is prioritized by them.\r\n***\r\nThis feature is about having a higher level API for java agents in tests, it is not about Gradle hiding the warning."],"labels":["in:testing","a:feature","in:test-suites"]},{"title":"API for disabling remote caching of work units (tasks and transform executions)","body":"### Expected Behavior\n\nA user should be able to configure whether or not a work unit is stored\/retrieved to\/from the remote build cache.\r\n\r\nThe exact API should be discussed but there should be a way to configure a task class as well as to configure arbitrary tasks using the ad-hoc API.\r\nA `@LocalCachingOnly` annotation would be one possiblity.\r\n\n\n### Current Behavior (optional)\n\n_No response_\n\n### Context\n\nThere are many cases where tasks get negative savings from the remote build cache.\r\n1. Very large artifacts which are quicker to re-execute locally or retrieve from the local build cache.\r\n2. Very small artifacts where the roundtrip time to the remote build cache dominates the download time.","comments":["What would you lose if you disabled the build cache completely using the existing functionality in these cases? Note that you'd still have up-to-date checks as a first-level cache to rely on.","It's a good point. Unfortunately, for the transforms where this is currently happening very often there is no way to test what would happen because there is no API to change the caching behavior: https:\/\/github.com\/gradle\/gradle\/issues\/27706\r\n\r\nI suspect that the behavior might improve in some cases and get worse in other cases depending on whether 1 or 2 was happening.","Another use case here that I just wanted to add is that if we have a transform which is too large to be stored in the remote build cache and it doesn't make sense to increase the max artifact size, it would be nice to be able to disable caching of that artifact.","> Another use case here that I just wanted to add is that if we have a transform which is too large to be stored in the remote build cache and it doesn't make sense to increase the max artifact size, it would be nice to be able to disable caching of that artifact.\r\n\r\nHere as well the question is: what would you lose if you disabled caching completely for such an artifact?\r\n\r\nFor context: local caching without remote cache is only useful when you are traversing (already built) history; i.e. you are switching between branches, reverting commits or doing `git bisect`. In all other cases the local cache will only add overhead. This is because the local cache only stores work already done locally. The remote cache can actually bring you results built elsewhere.\r\n\r\nTherefore I'd argue that if something is not worth caching remotely, it is likely not worth caching locally either."],"labels":["a:feature","in:build-cache"]},{"title":"API for configuration of Artifact Transform properties and caching","body":"### Artifact Transform Configuration API\r\n\r\nThis issue is about an API to offer some control of execution properties and caching for Artifact Transforms.\r\n\r\nOne example is when user wants to control if some artifact transform will use build cache when artifact transform is implemented in a third party plugin.\r\n\r\nIn a more general sense, what we want here is to allow users to specify some criteria to select some transform executions, and change some of their properties. The above example uses a criterion to filter transforms by type, and sets their cacheability. But this could be extended to support other criteria (based on input artifact, or output size etc.), and maybe even other properties\u2026\r\n\r\n\r\n### Why would user want to control that?\r\n\r\nExample: when an artifact transform is really fast remote caching can have negative savings but plugin is marked as `CacheableTransform`.  If artifact transform is implemented in a third party plugin, e.g. ClasspathEntrySnapshotTransform in KGP, user cannot disable remote caching. \r\n\r\nWith this new API a user could potentially do something like:\r\n```\r\ntransforms.withType(ClasspathEntrySnapshotTransform::class).outputs.cacheIf{ false }\r\n```\r\n\r\n\r\n","comments":[],"labels":["a:feature","in:artifact-transforms"]},{"title":"Gradle 8.5, Kotlin DSL `.first()` collides with JDK21 `.getFirst()`","body":"### Current Behavior\r\n\r\nKotlin DSL `.first()` collides with JDK21 `.getFirst()` when used in a `tasks` blocks. Maybe elsewhere.\r\n\r\nCode like this, fails to compiled when Gradle is ran on JDK 21, earlier code works\r\n\r\n```\r\ntasks {\r\n  val myFirst: String = listOf(\"a\", \"b\", \"c\").first() \r\n}\r\n```\r\n\r\nThe issue is that `.first()` gets resolved to a `.getFirst()` that returns a `TaskProvider<Task>` !!\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/803621\/d896e2db-6247-447b-a01b-8344dea3e214)\r\n\r\nI'm not sure from where the method gets resolved, as it needs to be a collection that extends a [`SequencedCollection`](https:\/\/docs.oracle.com\/en\/java\/javase\/21\/docs\/api\/java.base\/java\/util\/class-use\/SequencedCollection.html). The `tasks` is of type `TaskContainerScope`, but it doesn't seem to be in its type hierarchy. But maybe at some point the task container scope inherits a Sequenced Set, which might have visible methods.\r\n\r\nThat said it doesn't explains why the `.first()` applies to another object that the left hand side of this statement !\r\n\r\n### Expected Behavior\r\n\r\nI think I expect `.first()` to be applied on the list on the left hand side of the _dot_. And of course to return the element type of this list, e.g. `String` in the reproducer.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\nSuppose the following Gradle build script\r\n\r\n```kotlin\r\n@file:Suppress(\"NAME_SHADOWING\", \"UNUSED_VARIABLE\")\r\n\r\nval first: String = listOf(\"a\", \"b\", \"c\").first()\r\n\r\ntasks {\r\n  val myFirst: String = listOf(\"a\", \"b\", \"c\").first()\r\n  val myGetFirst: String = listOf(\"a\", \"b\", \"c\").getFirst()\r\n\r\n  val reproducer by registering {\r\n    val l = listOf(\"a\", \"b\", \"c\")\r\n    val myFirst: String = l.first()\r\n    val myGetFirst: String = l.getFirst()\r\n  }\r\n}\r\n```\r\n\r\n```\r\n\u276f .\/gradlew --version\r\n\r\n------------------------------------------------------------\r\nGradle 8.5\r\n------------------------------------------------------------\r\n\r\nBuild time:   2023-11-29 14:08:57 UTC\r\nRevision:     28aca86a7180baa17117e0e5ba01d8ea9feca598\r\n\r\nKotlin:       1.9.20\r\nGroovy:       3.0.17\r\nAnt:          Apache Ant(TM) version 1.10.13 compiled on January 4 2023\r\nJVM:          21.0.1 (Amazon.com Inc. 21.0.1+12-LTS)\r\nOS:           Mac OS X 14.2.1 aarch64\r\n```\r\n\r\nJust compile it in a terminal set to **use JDK 21** and see the compilation failure.\r\n\r\n```\r\n\u276f .\/gradlew\r\n\r\n> Configure project :\r\ne: file:\/\/\/Users\/brice.dutheil\/tmp\/JDK21getFirst\/build.gradle.kts:6:25: Type mismatch: inferred type is TaskProvider<Task> but String was expected\r\nw: file:\/\/\/Users\/brice.dutheil\/tmp\/JDK21getFirst\/build.gradle.kts:6:47: 'getter for first: E!' is deprecated. 'getFirst()' member of List is redundant in Kotlin and might be removed soon. Please use 'first()' stdlib extension instead\r\ne: file:\/\/\/Users\/brice.dutheil\/tmp\/JDK21getFirst\/build.gradle.kts:6:47: Type mismatch: inferred type is TaskProvider<Task> but String was expected\r\nw: file:\/\/\/Users\/brice.dutheil\/tmp\/JDK21getFirst\/build.gradle.kts:7:50: 'getFirst(): E!' is deprecated. 'getFirst()' member of List is redundant in Kotlin and might be removed soon. Please use 'first()' stdlib extension instead\r\ne: file:\/\/\/Users\/brice.dutheil\/tmp\/JDK21getFirst\/build.gradle.kts:11:27: Type mismatch: inferred type is TaskProvider<Task> but String was expected\r\nw: file:\/\/\/Users\/brice.dutheil\/tmp\/JDK21getFirst\/build.gradle.kts:11:29: 'getter for first: E!' is deprecated. 'getFirst()' member of List is redundant in Kotlin and might be removed soon. Please use 'first()' stdlib extension instead\r\ne: file:\/\/\/Users\/brice.dutheil\/tmp\/JDK21getFirst\/build.gradle.kts:11:29: Type mismatch: inferred type is TaskProvider<Task> but String was expected\r\nw: file:\/\/\/Users\/brice.dutheil\/tmp\/JDK21getFirst\/build.gradle.kts:12:32: 'getFirst(): E!' is deprecated. 'getFirst()' member of List is redundant in Kotlin and might be removed soon. Please use 'first()' stdlib extension instead\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* Where:\r\nBuild file '\/Users\/brice.dutheil\/tmp\/JDK21getFirst\/build.gradle.kts' line: 6\r\n\r\n* What went wrong:\r\nScript compilation errors:\r\n\r\n  Line 06:   val myFirst: String = listOf(\"a\", \"b\", \"c\").first()                                             \r\n                                   ^ Type mismatch: inferred type is TaskProvider<Task> but String was expected\r\n\r\n  Line 06:   val myFirst: String = listOf(\"a\", \"b\", \"c\").first()                                             \r\n                                                         ^ Type mismatch: inferred type is TaskProvider<Task> but String was expected\r\n\r\n  Line 11:     val myFirst: String = l.first()                                             \r\n                                     ^ Type mismatch: inferred type is TaskProvider<Task> but String was expected\r\n\r\n  Line 11:     val myFirst: String = l.first()                                             \r\n                                       ^ Type mismatch: inferred type is TaskProvider<Task> but String was expected\r\n\r\n4 errors\r\n\r\n* Try:\r\n> Run with --stacktrace option to get the stack trace.\r\n> Run with --info or --debug option to get more log output.\r\n> Run with --scan to get full insights.\r\n> Get more help at https:\/\/help.gradle.org.\r\n\r\nBUILD FAILED in 447ms\r\n```\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\nJDK 21","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n","This also happens for `last()`\/`getLast()`.","As a workaround, you could use `firstOrNull()!!`.  I think something is going on with method resolution where JDK's `getFirst` method is found before the `first()` Kotlin extension on List is found when inside the `TaskContainerScope`. ","I think I see the problem.\r\n\r\nThere's a `String.invoke(): TaskProvider<Task>` extension available in the `TaskContainerScope`, so when you use `first()` inside that block with Java 21...\r\n\r\n```\r\nval myFirst: String = listOf(\"a\", \"b\", \"c\").first()\r\n```\r\nThis actually resolves to:\r\n```\r\nval myFirst: String = listOf(\"a\", \"b\", \"c\").getFirst().invoke()\r\n```\r\nAnd the `invoke()` method is equivalent to something like:\r\n```\r\nval myFirst: String = named(listOf(\"a\", \"b\", \"c\").getFirst())\r\n```\r\nThat's where the `TaskProvider` type comes from. \r\n\r\nI think this happens because `first()` is implemented as an extension and Kotlin searches for extensions last and not eagerly. Kotlin finds the `getFirst()` from the JDK and Gradle's `String.invoke()` before it gets a chance to look for Kotlin's `List.first()`.\r\n\r\nThis looks like an unfortunate collision between Kotlin, the JDK and a Gradle extension. \r\n\r\nSome workarounds:\r\n- `firstOrNull()!!`\r\n- `first` and ignore the warning\r\n- `getFirst()` and ignore the warning\r\n- `[0]`\r\n- `asIterable().first()`\r\n\r\nA deeper change here would be to get rid of `String.invoke()`, but that would impact the DSL in other ways.","Thank you for reaching back. And thank you for the explanation @big-guy.\r\n\r\nI tried to reproduce this in pure kotlin but no luck. In the hope IJ could provide a better warning.\r\n\r\n```kotlin\r\nclass A\r\nclass B\r\nclass Scope {\r\n    operator fun String.invoke() = B()\r\n}\r\n\r\ninline operator fun A.invoke(block: Scope.() -> Unit) = Unit\r\n\r\nfun somewhere() {\r\n    val a = A()\r\n    a {\r\n        val myFirst: String = listOf(\"a\", \"b\", \"c\").first()\r\n    }\r\n}\r\n```","Are you sure you're using Java 21? \r\n\r\nIf I put that example in `script.kts` and run `kotlin script.kts` with Kotlin 1.9.21 and Java 21, I get:\r\n```\r\nscript.kts:12:31: error: type mismatch: inferred type is Script.B but String was expected\r\n        val myFirst: String = listOf(\"a\", \"b\", \"c\").first()\r\n                              ^\r\nscript.kts:12:53: error: type mismatch: inferred type is Script.B but String was expected\r\n        val myFirst: String = listOf(\"a\", \"b\", \"c\").first()\r\n```\r\n\r\nThe IDE is what clued me in on what was happening.  The two `first()` calls were different colors. \r\n\r\nIn your Gradle example:\r\n![image](https:\/\/github.com\/gradle\/gradle\/assets\/5387972\/c72b77ea-3f74-4007-8395-92600989bae3)\r\n","The deprecation warnings for `first`\/`getFirst()` are wrong, as the JDK methods are certainly not deprecated. This seems to be some kotlin bug.","@leonard84 I think Kotlin had `getLast()` \/ `getFirst()` way before JDK 21, and those kotlin methods were deprecated a long time ago to their preferred alternative `last` \/ `first`. Since the file is written in Kotlin I suppose that's what happens.","Yes, that would be fine if the intelli-sense would also show those kotlin methods, but for whatever reason that resolves the JDK ones, and only the deprecations come from the kotlin extension methods. It was highly confusing when I encountered the issue, and they make the obvious fix ugly, because you have to add a big `@Suppress(\"DEPRECATION\")` above it.","[The issue](https:\/\/youtrack.jetbrains.com\/issue\/KT-65235) to track on the Kotlin side."],"labels":["a:bug","in:kotlin-dsl","in:buildscript-compilation"]},{"title":"Add support for build caching of in-place processed files","body":"### Expected Behavior\r\n\r\nCertain plugins edit files in-place: for example file formatters formatting java files in-place, or newline character plugins, converting CRLF to just CR or just LF. Gradle should allow a task parameter to be both input and output, to add support for build-caching plugins employing this kind of in-place editing. The cache key can be calculated before the plugin runs; the task outputs can be cached after the task runs.\r\n\r\n### Current Behavior (optional)\r\n\r\n_No response_\r\n\r\n### Context\r\n\r\nThe Gradle build caching mechanism supports for caching outputs for given inputs; if the input files hashes match the cache then the outputs are reused from the build cache and the task is skipped and marked as `FROM-CACHE`.\r\n\r\nMy use-case calls for an in-place processing of a file. I'm writing a Vaadin Gradle plugin which reads the `package.json` file and fills in particular missing keys+values and writes the changes back to the `package.json` file. If those missing keys+values are already present in the json file then nothing gets updated. That means that the output eventually reaches a stable state where the file is not changed - namely, second and all subsequent runs of the plugin no longer needs to modify the file.\r\n\r\nThis means that the `package.json` file is both an `@InputFile` and an `@OutputFile` at the same time. Unfortunately, Gradle doesn't allow a parameter to be marked with both `@InputFile` and `@OutputFile` at the same time. We tried to only use `@OutputFile` annotation but quickly reached the problem of \"overlapping outputs\" as described at https:\/\/mvysny.github.io\/gradle-overlapping-outputs\/ .\r\n\r\nThe problem is described in more detail as this StackOverflow question: https:\/\/stackoverflow.com\/questions\/77807234\/gradle-cache-task-which-processes-a-file-in-place . A solution is suggested, however the solution relies on writing 'synthetic' tasks that do nothing other than copy the file into a subdirectory and then back again, to 'simulate' a parameter that's both input and output. Such solution would be hard to understand and maintain, and therefore I believe it would be great to have a proper support for input+output properties directly by Gradle.","comments":["This problem has been a blocker for us for a few months now. We invested quite a lot of time to debug and reproduce it. I don't know if this is an \"expected\" behavior, but it is certainly an undesired behavior that is very hard to track.\r\n\r\nI hope there is a reasonable way to implement this feature instead of relying on synthetic tasks.","Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.","@cobexer Thank you for looking into this. This is a problem for my team.","Any news on this? :) ","@cobexer It has been a month since this ticket was opened. Can we get some update? This problem is causing a lot of wasted build time for us (https:\/\/github.com\/vaadin\/flow\/issues\/17941).","Adding support for lint-like tasks that modify their own inputs has been on our radar for some time, but there is no plan to implement this feature in the foreseeable future. I'll keep the issue open because it's a good description of the problem (thanks for that).\r\n\r\nAs an alternative, consider generating the output `package.json` in a separate location from the input file, and use it from there. That setup would be more in line with how Gradle thinks about builds, where tasks are supposed to be like pure functions. Doing so allows us to employ a number of modifications safely. Allowing in-place modification as part of a CI build can also result in weird situations like leaving the VCS state dirty.\r\n\r\nWe might still support in-place input modification, but if we do that, it is likely going to be targeted at the linting use case, to be used by developers in the IDE, not as part of the build. Not sure how the mechanics of this would work yet, though."],"labels":["a:feature","in:execution-engine"]},{"title":"The 'wrapper' task removes user-defined settings in the 'gradle-wrapper.properties' file.","body":"### Issue type\n\nOther\n\n### Problem description\n\nHow to reproduce:\r\n1) Open any Gradle project\r\n2) Add a custom value to the `gradle-wrapper.properties` file, for example `myProperty=test` or change any predefined value, such as `zipStorePath` or `distributionPath`\r\n3) Run `gradle wrapper --gradle-version 8.2` (the version must be different from the current one)\r\n\r\nAs a result, the `gradle-wrapper.properties` will be updated, but all user defined data will be lost. The [WrapperGenerator implementation](https:\/\/github.com\/gradle\/gradle\/blob\/322c7dedcafea4c1302994f9ad012e9bb358bf83\/platforms\/software\/build-init\/src\/main\/java\/org\/gradle\/api\/tasks\/wrapper\/internal\/WrapperGenerator.java#L89) ignores all user-defined values and simply regenerates the file content.\r\n\r\nThis behavior was not mentioned [in the current documentation](https:\/\/docs.gradle.org\/current\/userguide\/gradle_wrapper.html#sec:upgrading_wrapper). \n\n### Context (optional)\n\n_No response_","comments":["Thank you for your interest in Gradle!\r\n\r\nThis is a valid documentation issue.\r\n***\r\nThe `gradle-wrapper.properties` is not supposed to be used for anything outside of the wrapper task properties.\r\nThe documentation should also clarify that modifications to the file for supported properties will not be preserved unless they are configured on the `wrapper` task of the root project."],"labels":["in:wrapper","a:documentation"]},{"title":"Continuous build feature is not working when the root project folder is in parallel with a sub project folder.","body":"### Current Behavior\r\n\r\nSee to be a bug when loading projects from \"..\/some-folder\" path, so the root gradle project is not in the same folder with all the sub-projects, then continuous build feature is not working anymore.\r\n\r\nThis shows the folder structure:\r\n\r\n<img width=\"226\" alt=\"image\" src=\"https:\/\/github.com\/gradle\/gradle\/assets\/161689\/8506ae07-7009-44b6-af8d-1c3b65fb785d\">\r\n\r\n\r\nSee demo project here:\r\nhttps:\/\/github.com\/liufuyang\/gradle-8.5-continuous-build-issue\r\n\r\nSo the project is loaded like this:\r\n\r\n```kts\r\nfile(\"..\/java\").listFiles()\r\n        .forEach {\r\n            include(\":${it.name}\")\r\n            project(\":${it.name}\").projectDir = file(\"..\/java\/${it.name}\")\r\n        }\r\n```\r\n\r\n### Expected Behavior\r\n\r\nThe P1.class can be updated when the related P1.java file is updated.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\nCheckout this repo https:\/\/github.com\/liufuyang\/gradle-8.5-continuous-build-issue\r\n\r\n```\r\ncd workspace\r\n.\/gradlew classes -t\r\n```\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n\r\n"],"labels":["a:bug","in:continuous-build","in:virtual-file-system","has:reproducer"]},{"title":"Confusing double entries when navigating to some Gradle classes in IDE","body":"### Current Behavior\r\n\r\nIf you open a Gradle 8.6-rc-1 project in IntelliJ IDEA\r\nand then try to navigate to the class `ProjectDescriptor` using \"Go to Class...\" action (`Ctrl+n` by default),\r\nyou get two entries to choose from, `gradle-core-api-8.6.jar` and `gradle-api-8.6-rc-1.jar`.\r\n\r\nNo matter which you select, you land in the `ProjectDescriptor.java` file from the unzipped distribution.\r\nBut it is confusing, that you have multiple entries to select from.\r\nIt would be really nice if the class would only be found in one jar.\r\n\r\nThis does not happen for all classes.\r\nNavigating to `BasePlugin` for example only brings up the one from `gradle-api-8.6-rc-1.jar`.\r\n\r\n### Expected Behavior\r\n\r\nClasses are only found in one jar.\r\n\r\n### Gradle version\r\n\r\n8.6-rc-1\r\n","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n***\r\n@gradle\/bt-ide-experience could this be a regression?","Here are my findings:\r\n- This is not a regression; I was able to reproduce the problem with Gradle 8.5 too, using a sample plugin project generated by the `init` task.\r\n- The problem seems to manifest only for projects using the Kotlin DSL. When searching for the `ProjectDescriptor` class, It seems that I get an extra entry from the classpath of the build script that depends on `gradle-core-api`. "],"labels":["a:bug","in:ide"]},{"title":"Migrate `DirectoryReport#getEntryPoint` to `Provider`","body":"### Expected Behavior\r\n\r\nThis is hopefully done in the scope of gradle\/build-tool-roadmap#28.\r\nI'm just creating an issue for it, as it might maybe easily be overlooked and I just stumbled upon it and comments are not possible on the roadmap issues.\r\n\r\nI tried to do\r\n```kts\r\ntasks.withType<Test>().configureEach {\r\n    testReportEntryPoints.put(path, reports.junitXml.entryPoint.absolutePath)\r\n}\r\n```\r\nwhich worked \"fine\" if the `java` plugin was applied before but failed if not due to the `outputLocation` not being set.\r\n`getEntryPoint()` eagerly evaluates the `outputLocation` so should instead be some provider that can be handled lazily.\r\n","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:feature","in:reporting-tasks","p:lazy-migration"]},{"title":"Support for modular annotation processors","body":"### Expected Behavior\r\n\r\nAnnotation processors that use `module-info` need to be specified via `--processor-module-path` but as it stands Gradle places all configured annotation processors in the legacy `-processorpath` argument. This means annotation processors exposed via `module-info` are not detected\/executed. The argument is currently hardcoded here: https:\/\/github.com\/gradle\/gradle\/blob\/45d830666efe92b35f750422d57f202e52ee3cac\/platforms\/jvm\/language-java\/src\/main\/java\/org\/gradle\/api\/internal\/tasks\/compile\/JavaCompilerArgumentsBuilder.java#L214\r\n\r\n### Current Behavior (optional)\r\n\r\n_No response_\r\n\r\n### Context\r\n\r\nA project I'm working on is fully modular, including annotation processors, however I could not get the processors to execute using Gradle thus discovered this problem\/missing feature. The current workaround is specifying the annotation processors using the legacy `META-INF\/services` folder but this means they aren't bootstrapped in the module path and I need access to module info during the execution of the processors.\r\n\r\nThis issue has been raised before but didn't get anywhere: #9519","comments":["Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:feature","in:modular-java"]},{"title":"Investigate necessity of Dependencies#module","body":"I don't recall why we had to add this over just allowing the syntax in `DependencyCollector#add`. We should investigate if this is still necessary to include as part of the API, or if we can inline it to `DependencyCollector#add`.","comments":["Initial thoughts after taking a look is that we can remove `Dependencies#module`. There does not appear to be any ambiguities or implementation complexity associated with removing it.","Looking at the history on this method again, I think we should keep it as is.\r\n\r\nThe singular module(String) is kind of weird because I think it's probably not necessary.\r\n`implementation(\"org:foo:1.0\")` and `implementation(module(\"org:foo:1.0\"))` are identical. I think this was only added for documentation purposes.\r\n\r\nThe `module(String, String, String)` method is a bit different.\r\n\r\nIn the docs we say:\r\n> You cannot declare dependencies with the Map notation from Kotlin and Java. Use multi-argument methods instead in Kotlin and Java.\r\n> Kotlin: compileOnly(mapOf(\"group\" to \"foo\", \"name\" to \"bar\")) becomes compileOnly(module(group = \"foo\", name = \"bar\"))\r\n> Java: compileOnly(Map.of(\"group\", \"foo\", \"name\", \"bar\")) becomes getCompileOnly().add(module(\"foo\", \"bar\", null))\r\n> \r\n\r\nIn the top-level dependencies block, we supported:\r\n- Groovy DSL: implementation group: \"org\", name: \"foo\", \"1.0\"\r\n- Kotlin DSL: implementation(mapOf(\"group\" to \"org\", \"name\" to \"foo\", \"version\" to \"1.0\")) and implementation(group = \"org\", name=\"foo\", version=\"1.0\")\r\n- Java: add(\"implementation\", Map.of(\"group\", \"org\", \"name\", \"foo\", \"version\", \"1.0\"))\r\n\r\nIn addition, between Groovy and Kotlin DSL, we treated implementation(\"org\", \"foo\", \"1.0\") differently. In Groovy, this is 3 dependencies and in Kotlin, this is group\/name\/version. Java might follow the Groovy behavior, but I didn't test that.\r\n\r\nThere are several considerations:\r\n- Do we want to support named parameters?\r\n- Do we add Map-taking methods in the public API for everything to use?\r\n- How many places do we have to add this as another notation?\r\n\r\nThe decision was that we wanted to support named parameters in the DSL in the best way for the underlying language. In Groovy, this uses a Map. In Kotlin, this uses named parameters in an extension function.\r\nThis notation is only supported through module(...) method to isolate the rest of the DSL. module(...) is better for static languages\/Java, so the Map-taking methods aren't necessary for the general API.\r\nWe avoid having to add another notation (we have only String, Dependency, Provider<Dependency>, ProviderConvertible) that has to be supported by DependencyCollector and DependencyModifier.\r\n\r\nThe biggest thing we give up is that you have to write an extra module(...):\r\n- Groovy DSL: implementation module(group: \"org\", name: \"foo\", \"1.0\")\r\n- Kotlin DSL: implementation(module(group = \"org\", name=\"foo\", version=\"1.0\"))\r\n- Java: getImplementation().add(module(\"org\", \"foo\", \"1.0\"))\r\n\r\nBut we avoid weirdness. If we supported 3 separate strings, I think things go a little side ways because you can then write:\r\n```\r\nimplementation(\"org\", \"foo\")\r\nimplementation(testFixtures(\"org\", \"foo\")) \r\nimplementation(\"org:foo:1.0\", \"org:bar:1.0\", \"org:baz:1.0\") \/\/ compiles, but surprising\r\n```\r\nThis is OK-ish, but I think the first two are more ugly than what we have now and there's some room for confusion. I don't think people would try:\r\n```\r\nimplementation(module(\"org:foo:1.0\", \"org:bar:1.0\", \"org:baz:1.0\"))\r\n```\r\n\r\n I think there was an ambiguity with the existing notation.\r\n\r\nIf you have implementation(\"foo\"), is that the name of the module or the full coordinates? We'd have to check for :'s\r\nWhat about implementation(name=\"foo\")? I don't know if Kotlin is smart enough to call the 3-string version of the method.\r\nWhat about implementation(name=\"org:foo:1.0\")?\r\n\r\nMy expectation is that most people are going to...\r\n1. Use the single string notation\r\n2. Use version catalog\r\n3. Use module(...) in plugins\r\n\r\nSince it's useful in plugins, simplifies the number of notations we need to support and doesn't introduce ugliness in the DSL, we should leave it.\r\n\r\nMaybe we can ditch `module(CharSequence)` because it provides no benefit outside documentation and introduces some ambiguity.  `implementation(module(\"foo\"))` isn't clear how it should be interpreted. \r\n","Of note for should-we-support-named-args:\r\n[`implementation(\"` Gradle code](https:\/\/github.com\/search?q=%22implementation%28%5C%22%22+%28path%3A*.gradle+OR+path%3A*.gradle.kts%29&type=code): 366k\r\n[`implementation('` Gradle code](https:\/\/github.com\/search?q=%22implementation%28%27%22+%28path%3A*.gradle+OR+path%3A*.gradle.kts%29&type=code): 58.4k\r\n[`implementation(group` Gradle code](https:\/\/github.com\/search?q=%22implementation%28group%22+%28path%3A*.gradle+OR+path%3A*.gradle.kts%29&type=code): 3.5k\r\n[`implementation group:` Gradle code](https:\/\/github.com\/search?q=%22implementation+group%3A%22+%28path%3A*.gradle+OR+path%3A*.gradle.kts%29&type=code): 47.4k\r\n\r\nIt's a relatively popular notation.","More likely Groovy DSL notation:\r\n[implementation ' Gradle code](https:\/\/github.com\/search?q=%22implementation+%27%22+%28path%3A*.gradle+OR+path%3A*.gradle.kts%29&type=code): 598k"],"labels":["a:investigation","in:dependency-declarations"]},{"title":"Configurable strategy for handling remote build cache errors","body":"### Expected Behavior\n\nIf a build cache error is thrown, and the `--continue` parameter is not given, the build should be stopped immediately and report the build cache error as the cause of the build failing.\n\n### Current Behavior (optional)\n\nIf a build cache error is thrown, the cache is disabled and the build continues without any cache hits from that source, which can make builds slower\n\n### Context\n\nOur build cache requires auth via our corporate SSO, which expires every 12h. There is also a bug in the auth system that can cause failures even when properly logged in, though this seems relatively infrequent. Any of these errors means cache gets disabled for a build and it can take a lot longer than usual without the user noticing if they aren't paying attention to the build messages.\r\n\r\nPreferred solution would be to turn this into a hard build failure if `--continue` is not passed, but I understand that may be too big of a behavioral change. Any method of turning silent build cache errors into build failures would be acceptable.","comments":["I think being able to make remote cache failures a hard failure is a good addition. We\u2019ve been going back and forth on this for a long time now. There are teams who have problematic network connections plagued with transient errors on one end of the spectrum, and folks who suffer from hidden cache disablement due to permanent problems on the other. It\u2019s hard to find a good default for everyone, and perhaps the current behavior is not even a good compromise. But making the behavior configurable makes sense.\r\n\r\nI wouldn\u2019t tie this to `--continue`, though. That feature is about _functional_ failures, i.e. tests and whatnot breaking. This on the other hand is about build infra failing.\r\n\r\nThe way I can imagine this to work is to pass a system property like `org.gradle.caching.remote.errors=[FAIL|SKIP|RETRY|IGNORE]` or something. The options meaning:\r\n\r\n- `FAIL` is the hard failure you are asking for here\r\n- `SKIP` would be the current behavior where the remote cache would be skipped for the remainder of the build (\ud83e\udd14 maybe we could also have an option to disable the remote cache for a set amount of time, even if it spans multiple builds? but I digress)\r\n- `RETRY` I'm not so sure about; we had that in the past, but it can easily backfire. Say, you have a laggy connection while working from a bus on the way to work, or on a plane, and instead of helping you, the remote cache ends up wasting even more of your time than if it just switched off after the first problem.\r\n- `IGNORE` could be an option to just skip the failed cache operation, but keep using the remote cache for later cache operations in the same build.\r\n\r\nThis is just a quick brainstorm of what options we could support, they don't necessarily all make sense.\r\n\r\nAnd there's also the question about how much it is worth investing in supporting caching over bad quality or problematic network architecture, which is bound to degrade cache performance anyway, making it questionable if caching over such infrastructure is even worth it... \ud83e\udd14 ","I like your suggestions, and we would probably use the `FAIL` option for local builds. We occasionally have failures in CI due to S3 ratelimits so the `RETRY` option could be useful, but it can also be implemented by the cache plugin without much difficulty."],"labels":["a:feature","in:build-cache"]},{"title":"'org.gradle.parallel=true' causes false deprecation messages in a multi-project build","body":"### Current Behavior\r\n\r\nSimilar to https:\/\/github.com\/gradle\/gradle\/issues\/21492, but with a slightly different setup (see below).\r\n\r\nSynch the project. The following warnings show:\r\n```\r\nResolution of the configuration :zzgradle2:runtimeClasspath was attempted from a context different than the project context. Have a look at the documentation to understand why this is a problem and how it can be resolved. This behavior has been deprecated. This will fail with an error in Gradle 9.0. For more information, please refer to https:\/\/docs.gradle.org\/8.5\/userguide\/viewing_debugging_dependencies.html#sub:resolving-unsafe-configuration-resolution-errors in the Gradle documentation.\r\nResolution of the configuration :zzgradle2:testRuntimeClasspath was attempted from a context different than the project context. Have a look at the documentation to understand why this is a problem and how it can be resolved. This behavior has been deprecated. This will fail with an error in Gradle 9.0. For more information, please refer to https:\/\/docs.gradle.org\/8.5\/userguide\/viewing_debugging_dependencies.html#sub:resolving-unsafe-configuration-resolution-errors in the Gradle documentation.\r\nResolution of the configuration :zzgradle2:compileClasspath was attempted from a context different than the project context. Have a look at the documentation to understand why this is a problem and how it can be resolved. This behavior has been deprecated. This will fail with an error in Gradle 9.0. For more information, please refer to https:\/\/docs.gradle.org\/8.5\/userguide\/viewing_debugging_dependencies.html#sub:resolving-unsafe-configuration-resolution-errors in the Gradle documentation.\r\nResolution of the configuration :zzgradle2:testCompileClasspath was attempted from a context different than the project context. Have a look at the documentation to understand why this is a problem and how it can be resolved. This behavior has been deprecated. This will fail with an error in Gradle 9.0. For more information, please refer to https:\/\/docs.gradle.org\/8.5\/userguide\/viewing_debugging_dependencies.html#sub:resolving-unsafe-configuration-resolution-errors in the Gradle documentation.\r\n```\r\n\r\n### Expected Behavior\r\n\r\nNo deprecation warnings.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\nProject 1 (name doesn't matter):\r\n\r\n`settings.gradle`:\r\n```groovy\r\ndependencyResolutionManagement {\r\n\trepositories {\r\n\t\tmavenCentral()\r\n    }\r\n}\r\n\r\ninclude \"zzgradle2\"\r\nproject(\":zzgradle2\").projectDir = file(\"..\/zzgradle2\")\r\n```\r\n\r\n`gradle.properties`:\r\n```\r\norg.gradle.warning.mode=all\r\norg.gradle.caching=true\r\norg.gradle.parallel=true \/\/ settings this to false removes the warnings\r\n```\r\n\r\nCreate another project next to it (not nested) named `zzgradle2` with `build.gradle`:\r\n```groovy\r\nplugins {\r\n\tid(\"java-library\")\r\n}\r\n\r\ndependencies {\r\n\timplementation(\"com.fasterxml.jackson.core:jackson-core:2.16.0\")\r\n\r\n\tapi(\"com.fasterxml.jackson.core:jackson-databind:2.16.0\")\r\n}\r\n```\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\nEclipse 4.30 with Buildship 3.1.8.","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n","Reproducible in 8.6 too."],"labels":["a:bug","in:ide","has:reproducer"]},{"title":"Migrate convention mapping usage to new `SupportsConvention` API  as a way of dogfooding","body":"### Issue type\n\nRefactoring\n\n### Problem description\n\nMigrate convention mapping usage to new `SupportsConvention` API introduced in 8.7 as way of validating the API introduced.\r\n\r\n\n\n### Context (optional)\n\n_No response_","comments":[],"labels":["a:chore","platform:core_configuration"]},{"title":"Multiple ArtifactViews on a single configuration can overwrite each others view properties","body":"### Current Behavior\n\nIf I create 2 different ArtifactViews that point to the same Configuration, and set one to lenient and one to not be lenient, the lenient one is still treated as non lenient, and throws an exception.\n\n### Expected Behavior\n\nThe lenient ArtifactView should not throw an exception, but just skip over artifacts that are not properly found\n\n### Context (optional)\n\nI'm trying to build a plugin that will grab all dependencies and artifacts used by a project and build an offline cache. And one dependency has this issue. `org.junit:junit-bom:5.10.1`\n\n### Steps to Reproduce\n\n```\r\nclass DirectMetadataAccessVariantRule implements ComponentMetadataRule {\r\n    @javax.inject.Inject\r\n    ObjectFactory getObjects() { }\r\n    void execute(ComponentMetadataContext context) {\r\n        def id = context.details.id\r\n        context.details.addVariant(\"moduleMetadata\") {\r\n            attributes {\r\n                attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))\r\n                attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.REGULAR_PLATFORM))\r\n                attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, \"platform-metadata\"))\r\n            }\r\n            withFiles {\r\n                removeAllFiles()\r\n                addFile(\"${id.name}-${id.version}.module\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    components {\r\n        all(DirectMetadataAccessVariantRule)\r\n    }\r\n}\r\n\r\ntask runThing {\r\n    doLast {\r\n        def dep = project.dependencies.create('org.junit:junit-bom:5.10.1')\r\n        def detached = project.configurations.detachedConfiguration(dep)\r\n\r\n        def view = detached.getIncoming().artifactView(viewConfiguration -> {\r\n            viewConfiguration.withVariantReselection()\r\n            viewConfiguration.lenient = true\r\n            viewConfiguration.attributes(attributeContainer -> {\r\n                attributeContainer.attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, \"platform-metadata\"));\r\n            });\r\n        });\r\n        \/\/ Actually fails here\r\n        view.files.each {\r\n            println it\r\n        }\r\n\r\n        view = detached.getIncoming().artifactView(viewConfiguration -> {\r\n            viewConfiguration.withVariantReselection()\r\n            viewConfiguration.attributes(attributeContainer -> {\r\n                attributeContainer.attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, \"platform-metadata\"));\r\n            });\r\n        });\r\n        \/\/ Would expect failure here\r\n        view.files.each {\r\n            println it\r\n        }\r\n    }\r\n}\r\n```\n\n### Gradle version\n\n8.5\n\n### Build scan URL (optional)\n\nhttps:\/\/gradle.com\/s\/acymvopyjuc34\n\n### Your Environment (optional)\n\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team, but this area of Gradle is currently not a focus one, so it might take a while before a fix is made.\r\n"],"labels":["a:bug","in:dependency-resolution","re:comprehensibility"]},{"title":"Console output code boxes have Java\/Kotlin keywords highlighted","body":"### Issue type\n\nWrong or misleading information\n\n### Problem description\n\nSome code boxes with console output have Java\/Kotlin keywords highlighted.\r\n\r\n<img width=\"615\" alt=\"image\" src=\"https:\/\/github.com\/gradle\/gradle\/assets\/897017\/efa68025-1ef7-4c8f-8f79-cba5caa08dea\">\r\n\r\nI'd expect to see all the text rendered without colours.\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/nightly\/userguide\/part1_gradle_init.html#step_1_initializing_the_project","comments":["Thank you for your interest in Gradle!\r\n\r\nThis is a valid documentation issue that we will address.\r\n"],"labels":["in:documentation-infrastructure","a:bug"]},{"title":"Task with private Ktor client causes Configuration Cache error `Unable to make field private long java.lang.ref.SoftReference.timestamp accessible`","body":"### Current Behavior\r\n\r\nTask with private Ktor client causes Configuration Cache error.\r\n\r\n### Expected Behavior\r\n\r\nTask with private Ktor client should not cause Configuration Cache error.\r\n\r\n### Context (optional)\r\n\r\nI am making a new issue after seeing this related issue https:\/\/github.com\/gradle\/gradle\/issues\/23092#issuecomment-1725005162\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create `build.gradle.kts`\r\n    ```kotlin\r\n    \/\/ build.gradle.kts\r\n    import io.ktor.client.*\r\n    import io.ktor.client.engine.cio.*\r\n    import io.ktor.client.plugins.*\r\n    import io.ktor.client.plugins.contentnegotiation.*\r\n    import io.ktor.client.request.*\r\n    import io.ktor.client.statement.*\r\n    import io.ktor.serialization.kotlinx.json.*\r\n    import kotlinx.coroutines.runBlocking\r\n    \r\n    buildscript {\r\n      repositories {\r\n        mavenCentral()\r\n        gradlePluginPortal()\r\n      }\r\n      dependencies {\r\n        classpath(\"io.ktor:ktor-client-core:2.3.7\")\r\n        classpath(\"io.ktor:ktor-client-auth:2.3.7\")\r\n        classpath(\"io.ktor:ktor-client-cio:2.3.7\")\r\n        classpath(\"io.ktor:ktor-client-content-negotiation:2.3.7\")\r\n        classpath(\"io.ktor:ktor-serialization-kotlinx-json:2.3.7\")\r\n      }\r\n    }\r\n    \r\n    abstract class HttpFetchTask : DefaultTask() {\r\n      @get:Input\r\n      abstract val url: Property<String>\r\n    \r\n      private val client = HttpClient(CIO) {\r\n        install(HttpRequestRetry) {\r\n          retryOnServerErrors(maxRetries = 5)\r\n          exponentialDelay()\r\n        }\r\n        install(ContentNegotiation) {\r\n          json()\r\n        }\r\n      }\r\n    \r\n      @TaskAction\r\n      private fun fetch(): Unit = runBlocking {\r\n        val url = url.get()\r\n    \r\n        val body = client.get(url).bodyAsText()\r\n    \r\n        println(\"got $body\")\r\n      }\r\n    }\r\n    \r\n    val httpFetchTask by tasks.registering(HttpFetchTask::class) {\r\n      url.set(\"https:\/\/gradle.com\/\")\r\n    }\r\n    ```\r\n\r\n2. Run `gradle httpFetchTask --configuration-cache`\r\n\r\n3. Observe error\r\n    \r\n    ```text\r\n    FAILURE: Build failed with an exception.\r\n    \r\n    * What went wrong:\r\n    Configuration cache state could not be cached: field `value` of `kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal` bean found in field `descriptor$delegate` of `kotlin.reflect.jvm.internal.KClassImpl$Data` bean found in field `value` of `kotlin.InitializedLazyImpl` bean found in field `data` of `kotlin.reflect.jvm.internal.KClassImpl` bean found in field `ignoredTypes` of `io.ktor.client.plugins.contentnegotiation.ContentNegotiation` bean found in field `map` of `io.ktor.util.ConcurrentSafeAttributes` bean found in field `map` of `io.ktor.util.ConcurrentSafeAttributes` bean found in field `attributes` of `io.ktor.client.HttpClient` bean found in field `client` of task `:httpFetchTask` of type `Build_gradle$HttpFetchTask`: error writing value of type 'java.lang.ref.SoftReference'\r\n    > Unable to make field private long java.lang.ref.SoftReference.timestamp accessible: module java.base does not \"opens java.lang.ref\" to unnamed module @440bc22a\r\n    \r\n    * Try:\r\n    > Run with --stacktrace option to get the stack trace.\r\n    > Run with --info or --debug option to get more log output.\r\n    > Run with --scan to get full insights.\r\n    > Get more help at https:\/\/help.gradle.org.\r\n    \r\n    BUILD FAILED in 729ms\r\n    ```\r\n\r\n4. Run without Configuration Cache `gradle httpFetchTask`\r\n\r\n5. The task runs successfully:\r\n    \r\n    ```text\r\n    > Task :httpFetchTask\r\n    got <!DOCTYPE html><html class=\"__variable_a5851f\" lang=\"en\">\r\n    ...\r\n    <\/html>\r\n    \r\n    BUILD SUCCESSFUL in 1s\r\n    1 actionable task: 1 executed\r\n    ```\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["The workaround (and recommended way) would be to instantiate the `HttpClient` at task execution time instead of making it part of the serialized state of the task.","Thanks for the suggestion @bamboo. \r\n\r\nIt's a surprise to hear that private fields are serialised, I expected Gradle only considered annotated task inputs and would ignore other fields. Perhaps there's some docs improvements to be made?\r\n\r\nThe [configuration cache docs](https:\/\/docs.gradle.org\/8.5\/userguide\/configuration_cache.html) only mention 'configuration' of the tasks (which to me reads like task inputs) and task outputs as cacheable. Private fields aren't configurable, so they can't be configured during the configuration phase.\r\n\r\n> The configuration cache is conceptually similar to the [build cache](https:\/\/docs.gradle.org\/current\/userguide\/build_cache.html#build_cache), but caches different information. The build cache takes care of caching the outputs and intermediate files of the build, such as task outputs or artifact transform outputs. The configuration cache takes care of caching the build configuration for a particular set of tasks. In other words, the configuration cache saves the output of the configuration phase, and the build cache saves the outputs of the execution phase.\r\n","Thank you for your interest in Gradle!\r\n\r\nThis is a valid documentation issue that we will address.\r\n***\r\nThe documentation should be improved to clearly state what is serialized."],"labels":["in:configuration-cache","a:documentation","re:comprehensibility"]},{"title":"Improve Java compiler output rendering","body":"## Goal\r\n\r\nThe java compiler outputs compilation problems directly to the standard output. The problem with that is the information is buried in the build output and users must need to scroll up in the build log to figure out what made the build fail. If the compilation problems are reported via the Problems API, we can suppress writing problems to the standard output and create a comprehensive report at the end of the build.\r\n\r\n## Business case\r\n\r\nIf the compiler warnings are exposed via Problems API reports then IDEs will receive problem events with structural (file location, line number, etc). This will allow users outside of IntelliJ to consume provide contextual help on what went wrong during compilation when running the `compileJava` task. Besides, build scans can render compilation problems separately from the console output.  Finally, the integration should be used for custom output rendering for Java compilation.\r\n\r\n## Resources\r\n\r\n- [Exploration of compilation problems caused by the change](https:\/\/docs.google.com\/document\/d\/1OCNc-7gwu0vEylls5YXhTLwpOxiihsEN81oX3XBELDw)\r\n\r\n## Communication plan\r\n\r\n- JB + MS: notify them about the new events being added to the TAPI\r\n\r\n## Deliverables\r\n- Custom `DiagnosticListener` for the Java compiler task emitting Problem events and delegate to default rendering\r\n- Summary rendering at the end of the build with a summary of compilation errors\r\n- Integration\r\n  - One IDE integration (maybe Buildship) displaying compiler problems as error markers with details (label, location, severity).\r\n    - integration should be optional to avoid duplication with existing tooling.\r\n- Documentation \r\n  - Section in release notes\r\n  - Section in Gradle Newsletter\r\n\r\n## Acceptance criteria\r\n\r\nThe IDE experience team should decide on its own if the integration is good enough.\r\n\r\n## Stakeholders\r\n\r\n- Piotr\r\n- Adam\r\n- JetBrains\r\n- Google\r\n-  Microsoft VSCode\r\n\r\n## Questions\r\n\r\n- Should we deal with compiler invocation issues? e.g invalid compiler flag.\r\n\r\n```[tasklist]\r\n### Tasks and issues\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/25707\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/26529\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/27770\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/27823\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/27829\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/28086\r\n- [ ] https:\/\/github.com\/gradle\/gradle-private\/issues\/4121\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/27998\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/27693\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/issues\/27948\r\n- [ ] https:\/\/github.com\/gradle\/gradle\/pull\/27960\r\n```\r\n\r\n## Won't do\r\n\r\n- The console output should not change as part of this project. That will be tackled separately in [#4074](https:\/\/github.com\/gradle\/gradle-private\/issues\/4074).","comments":["It would be great if that new API is also exposed to Gradle-Plugins not only Tooling API (like. IDEs).\r\n\r\n**Usecase:**\r\nI would like to implement a GradlePlugin which tracks the Java compile warnings and let the build fail if new warnings are added, but existing warnings are \"accepted\" for the time being. This would allow projects to gradually migrate to the `-Werror` without enforcing to fix all warnings at once. The Plugin would then update the accepted warnings during build, when old warnings are fixed. If the warning count drops to zero the `-Werror` flag will be enforced.\r\n\r\nThe API would allow me to implement such a thing, because it would be able to track the occurred warnings reliably.","Might be a moonshot but it could be a good idea to define a \"standard\" API for diagnostics to allow passing fix suggestions to the Problems API, so that IDEs could provide a \"quick fix\" action for example.\r\n\r\nError Prone for instance produces such suggestions, and having them surfaced somehow down to the Problems API through the compiler diagnostics could allow IDEs to propose them as \"quick fixes\" directly.\r\nI made some research and a POC last year that was Error Prone specific but could likely be turned into some \"standard\" API: the idea was putting those fixes into an object passed as first argument to the diagnostic message; without a specific diagnostic listener, the object's `toString()` is called when the message is formatted and you get an standard message, but with a specific diagnostic listener it can cast the argument to that \"standard\" API and extract structured information out of it. The POC relied on the very few message-bundle keys used by Error Prone to detect when such a structured-information would be known to be available.\r\nThis would of course require tools like Error Prone to collaborate and use your \"standard API\" though.\r\n\r\nThe feature request for the Gradle GitHub Action to surface problems reported through the Problems API as comments on pull request (https:\/\/github.com\/gradle\/actions\/issues\/30) could take advantage of such structured information to add GitHub suggestions to the comments as equivalent to IDE \"quick fixes\" too."],"labels":["a:epic","@ide-experience"]},{"title":"Subproject tasks don't run when Configuration Cache is enabled","body":"### Current Behavior\r\n\r\nSubproject tasks don't run when Configuration Cache is enabled\r\n\r\n### Expected Behavior\r\n\r\nSubproject tasks ~don't~ run when Configuration Cache is enabled\r\n\r\n### Context (optional)\r\n\r\nI have a multimodule project\r\n\r\n```\r\nRoot project 'cmr-tests'\r\n+--- Project ':sp-with-html'\r\n+--- Project ':sp-with-html-and-markdown'\r\n+--- Project ':sp-with-markdown'\r\n\\--- Project ':sp-without-plugin'\r\n```\r\n\r\nI've set up a custom plugin in buildSrc that should aggregate the subprojects into the root project using a nightmarish amalgamation of Configurations\/Attributes\/Outgoing variants\/artifact views\/etc, AKA 'Gradle best practices'.\r\n\r\nAggregating works unless configuration cache is enabled.\r\n\r\nSometimes if I run the aggregating task repeatedly it will eventually make the tasks in the subprojects run!\r\n\r\n### Steps to Reproduce\r\n\r\n1. download [project.zip](https:\/\/github.com\/gradle\/gradle\/files\/13836584\/project.zip)\r\n2. Run `.\/gradlew :aggregateHtmlModules`\r\n3. observe subproject tasks don't run, resulting in an error\r\n    ```shell\r\n    $ .\/gradlew :aggregateHtmlModules --console=plain\r\n    Reusing configuration cache.\r\n    > Task :aggregateHtmlModules FAILED\r\n    \r\n    FAILURE: Build failed with an exception.\r\n    \r\n    * What went wrong:\r\n    Execution failed for task ':aggregateHtmlModules'.\r\n    > \/\/\/\/tmp\/gradle-not-adding-dependency\/sp-with-html\/build\/tmp\/generatedHtmlRenderedFiles doesn't exist!\r\n    \r\n    * Try:\r\n    > Run with --stacktrace option to get the stack trace.\r\n    > Run with --info or --debug option to get more log output.\r\n    > Run with --scan to get full insights.\r\n    > Get more help at https:\/\/help.gradle.org.\r\n    \r\n    BUILD FAILED in 323ms\r\n    1 actionable task: 1 executed\r\n    Configuration cache entry reused.\r\n    ```\r\n4. Disable config cache `.\/gradlew :aggregateHtmlModules --no-configuration-cache`\r\n5. Observe no error\r\n    ```shell\r\n    $ .\/gradlew :aggregateHtmlModules --no-configuration-cache --console=plain --rerun \r\n    Type-safe project accessors is an incubating feature.\r\n    > Task :buildSrc:checkKotlinGradlePluginConfigurationErrors\r\n    > Task :buildSrc:generateExternalPluginSpecBuilders UP-TO-DATE\r\n    > Task :buildSrc:extractPrecompiledScriptPluginPlugins UP-TO-DATE\r\n    > Task :buildSrc:compilePluginsBlocks UP-TO-DATE\r\n    > Task :buildSrc:generatePrecompiledScriptPluginAccessors UP-TO-DATE\r\n    > Task :buildSrc:generateScriptPluginAdapters UP-TO-DATE\r\n    > Task :buildSrc:compileKotlin UP-TO-DATE\r\n    > Task :buildSrc:compileJava NO-SOURCE\r\n    > Task :buildSrc:compileGroovy NO-SOURCE\r\n    > Task :buildSrc:pluginDescriptors UP-TO-DATE\r\n    > Task :buildSrc:processResources UP-TO-DATE\r\n    > Task :buildSrc:classes UP-TO-DATE\r\n    > Task :buildSrc:jar UP-TO-DATE\r\n    > Task :aggregateHtmlModules\r\n    \r\n    Deprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.\r\n    \r\n    You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\r\n    \r\n    For more on this, please refer to https:\/\/docs.gradle.org\/8.6-rc-1\/userguide\/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.\r\n    \r\n    BUILD SUCCESSFUL in 381ms\r\n    11 actionable tasks: 2 executed, 9 up-to-date\r\n    ```\r\n\r\n   And observe files correctly generated in the build dir\r\n    \r\n    ```shell\r\n    $ tree build\r\n    build\r\n    \u2514\u2500\u2500 tmp\r\n      \u2514\u2500\u2500 aggregateHtmlModules\r\n          \u251c\u2500\u2500 _sp_with_html\r\n          \u2514\u2500\u2500 _sp_with_html_and_markdown\r\n    ```\r\n\r\n### Gradle version\r\n\r\n8.6-rc-1\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Sorry that you're having trouble with Gradle!\r\n\r\nWe appreciate the effort that went into filing this issue, but we must ask for more information. \r\n\r\nAs stated in our issue template, a [minimal reproducible example](https:\/\/en.wikipedia.org\/wiki\/Minimal_reproducible_example) is a must for us to be able to track down and fix your problem efficiently. Our available resources are severely limited, and we must be sure we are looking at the exact problem you are facing.\r\n\r\nIf we have a reproducer, we may be able also to suggest workarounds or ways to avoid the problem.\r\n\r\nThe ideal way to provide a reproducer is to leverage our [reproducer template](https:\/\/github.com\/gradle\/gradle-issue-reproducer). You can also use [Gradle Project Replicator](https:\/\/github.com\/android\/project-replicator) to reproduce the structure of your project. \r\n\r\nThis issue will be closed after 7 days unless you provide more information.\r\n***\r\nYour provided reproducer does not reproduce 8.3, 8.4, 8.5 or 8.6-RC1","Thanks for checking @cobexer. I've tried again and for some reason the error didn't trigger. Something weird with Config Cache.\r\n\r\nTry running `.\/gradlew :aggregateHtmlModules` with the attached project\r\n\r\n[project.zip](https:\/\/github.com\/gradle\/gradle\/files\/13956723\/project.zip)\r\n\r\nEven though the task `aggregateHtmlModules` depends on the output from some subprojects, the subproject tasks don't run.\r\n\r\n\r\n```\r\n.\/gradlew :aggregateHtmlModules --console=plain\r\nCalculating task graph as configuration cache cannot be reused because file 'settings.gradle.kts' has changed.\r\nType-safe project accessors is an incubating feature.\r\n> Task :buildSrc:checkKotlinGradlePluginConfigurationErrors\r\n> Task :buildSrc:generateExternalPluginSpecBuilders UP-TO-DATE\r\n> Task :buildSrc:extractPrecompiledScriptPluginPlugins UP-TO-DATE\r\n> Task :buildSrc:compilePluginsBlocks UP-TO-DATE\r\n> Task :buildSrc:generatePrecompiledScriptPluginAccessors UP-TO-DATE\r\n> Task :buildSrc:generateScriptPluginAdapters UP-TO-DATE\r\n> Task :buildSrc:compileKotlin UP-TO-DATE\r\n> Task :buildSrc:compileJava NO-SOURCE\r\n> Task :buildSrc:compileGroovy NO-SOURCE\r\n> Task :buildSrc:pluginDescriptors UP-TO-DATE\r\n> Task :buildSrc:processResources UP-TO-DATE\r\n> Task :buildSrc:classes UP-TO-DATE\r\n> Task :buildSrc:jar UP-TO-DATE\r\n> Task :aggregateHtmlModules\r\n\r\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.\r\n\r\nYou can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\r\n\r\nFor more on this, please refer to https:\/\/docs.gradle.org\/8.6-rc-1\/userguide\/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.\r\n\r\nBUILD SUCCESSFUL in 454ms\r\n11 actionable tasks: 2 executed, 9 up-to-date\r\nConfiguration cache entry stored.\r\n```\r\n\r\nIf you uncomment the manual task dependencies in the root project, then the subproject tasks runs correctly.\r\n\r\n\r\n```\r\n  \/\/ uncomment these lines\r\n  dependsOn(\":sp-with-html:generatedHtmlRenderedFiles\")\r\n  dependsOn(\":sp-with-html-and-markdown:generatedHtmlRenderedFiles\")\r\n```\r\n\r\n\r\n\r\n```text\r\n.\/gradlew :aggregateHtmlModules --console=plain\r\nCalculating task graph as configuration cache cannot be reused because file 'build.gradle.kts' has changed.\r\nType-safe project accessors is an incubating feature.\r\n> Task :buildSrc:checkKotlinGradlePluginConfigurationErrors\r\n> Task :buildSrc:generateExternalPluginSpecBuilders UP-TO-DATE\r\n> Task :buildSrc:extractPrecompiledScriptPluginPlugins UP-TO-DATE\r\n> Task :buildSrc:compilePluginsBlocks UP-TO-DATE\r\n> Task :buildSrc:generatePrecompiledScriptPluginAccessors UP-TO-DATE\r\n> Task :buildSrc:generateScriptPluginAdapters UP-TO-DATE\r\n> Task :buildSrc:compileKotlin UP-TO-DATE\r\n> Task :buildSrc:compileJava NO-SOURCE\r\n> Task :buildSrc:compileGroovy NO-SOURCE\r\n> Task :buildSrc:pluginDescriptors UP-TO-DATE\r\n> Task :buildSrc:processResources UP-TO-DATE\r\n> Task :buildSrc:classes UP-TO-DATE\r\n> Task :buildSrc:jar UP-TO-DATE\r\n\r\n> Task :aggregateHtmlModules\r\n[:aggregateHtmlModules] got module modules.CoolModuleSpec_Decorated@28e476a4\r\n[:aggregateHtmlModules] got module modules.CoolModuleSpec_Decorated@6de6fddc\r\n\r\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.\r\n\r\nYou can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\r\n\r\nFor more on this, please refer to https:\/\/docs.gradle.org\/8.6-rc-1\/userguide\/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.\r\n\r\nBUILD SUCCESSFUL in 748ms\r\n11 actionable tasks: 2 executed, 9 up-to-date\r\nConfiguration cache entry stored.\r\n```\r\n\r\n","> Even though the task aggregateHtmlModules depends on the output from some subprojects, the subproject tasks don't run.\r\n\r\nCan you point us to how you set up that relation?\r\nPlease check the documentation for [sharing outputs](https:\/\/docs.gradle.org\/current\/userguide\/cross_project_publications.html#header)\r\nAlso please help us help you by providing minimal reproducers so there is no unrelated code in the reproducer!\r\nCurrently your project contains dead code, commented out code, ...","> Can you point us to how you set up that relation? \r\n\r\nThe subprojects add outputs to the configurations, for example\r\n\r\n```kotlin\r\n\/\/ sp-with-html\/build.gradle.kts\r\n\r\n\/\/ ...\r\n\r\ncoolDependenciesHtml\r\n  .variantRenderedFiles\r\n  .outgoing\r\n  .artifact(generatedHtmlRenderedFiles) {\r\n    type = \"directory\"\r\n  }\r\n```\r\n\r\nI can try adding `builtBy()` explicitly, but it doesn't make a difference.\r\n\r\n```diff\r\n coolDependenciesHtml\r\n   .variantRenderedFiles\r\n   .outgoing\r\n   .artifact(generatedHtmlRenderedFiles) {\r\n+    builtBy(generatedHtmlRenderedFiles)\r\n     type = \"directory\"\r\n   }\r\n```\r\n\r\n\r\n> Please check the documentation for [sharing outputs](https:\/\/docs.gradle.org\/current\/userguide\/cross_project_publications.html#header)\r\n\r\nThanks for the suggestion but unfortunately I don't find that documentation page very helpful https:\/\/github.com\/gradle\/gradle\/issues\/18846.\r\n\r\nWhile it is technically possible to share files between subprojects, the limitations are surprising and it's a minefield of bugs and undocumented\/flaky behaviour. The point of the reproducer is to try and discover ways to workaround these problems. \r\n\r\nI did remove as much of the unrelated code as possible, but usually when I remove more code then while it may fix the problem at hand, but it uncovers or causes other problems, or it ends up too simple and I'm not able to achieve the behaviour that Gradle is supposed to support (sharing files between subprojects)."],"labels":["a:bug","to-triage"]},{"title":"Race conditions when multiple Gradle processes run the same build concurrently","body":"### Current Behavior\r\n\r\nWhen multiple nested included builds used in a multiple parallel GradleRunner tests, there are intermittent test flakes. \r\n\r\n`build-logic` is an included build that has GradleRunner tests, and those tests use `build-logic\/meta\/gradle-test-kit\/` and `build-logic\/settings\/my-precompiled-script` as separate included builds.\r\n\r\nAND `build-logic` itself relies on `build-logic\/meta\/gradle-test-kit\/` and `build-logic\/settings\/my-precompiled-script` as separate included builds.\r\n\r\nThis only happens on CI and is very intermittent (works fine 98% of the time).\r\n\r\nit fails with a message like this: \r\n```\r\n  > Task :detekt:test\r\n  \r\n  FileExistsValueSourceTest > when detekt config file is deleted, then config cache is invalidated$detekt_test() FAILED\r\n      org.gradle.testkit.runner.UnexpectedBuildFailure: Unexpected build execution failure in \/tmp\/junit1260234987234987234 with arguments [detekt, --stacktrace, --configuration-cache, -Dorg.gradle.kotlin.dsl.precompiled.accessors.strict=true]\r\n  \r\n      Output:\r\n      Calculating task graph as configuration cache cannot be reused because the file system entry 'detekt-config.yml' has been removed.\r\n      Caught exception: Already watching path: \/tmp\/junit1260234987234987234\r\n      Type-safe project accessors is an incubating feature.\r\n      > Task :settings:my-precompiled-script:checkKotlinGradlePluginConfigurationErrors\r\n      > Task :settings:my-precompiled-script:generateExternalPluginSpecBuilders UP-TO-DATE\r\n      > Task :settings:my-precompiled-script:extractPrecompiledScriptPluginPlugins UP-TO-DATE\r\n      > Task :settings:my-precompiled-script:compilePluginsBlocks UP-TO-DATE\r\n      > Task :settings:my-precompiled-script:generatePrecompiledScriptPluginAccessors UP-TO-DATE\r\n      > Task :settings:my-precompiled-script:generateScriptPluginAdapters UP-TO-DATE\r\n      > Task :settings:my-precompiled-script:compileKotlin UP-TO-DATE\r\n      > Task :settings:my-precompiled-script:compileJava NO-SOURCE\r\n      > Task :settings:my-precompiled-script:pluginDescriptors UP-TO-DATE\r\n      > Task :settings:my-precompiled-script:processResources UP-TO-DATE\r\n      > Task :settings:my-precompiled-script:classes UP-TO-DATE\r\n      > Task :settings:my-precompiled-script:jar UP-TO-DATE\r\n  \r\n      FAILURE: Build failed with an exception.\r\n  \r\n      * Where:\r\n      Settings file '\/home\/runner\/work\/android\/android\/build-logic\/meta\/gradle-test-kit\/settings.gradle.kts' line: 12\r\n  \r\n      * What went wrong:\r\n      An exception occurred applying plugin request [id: 'mycorp.my-precompiled-script']\r\n      > Could not find implementation class 'mycorp.MyPrecompiledScriptPlugin' for plugin 'mycorp.my-precompiled-script' specified in jar:file:\/home\/runner\/work\/android\/android\/build-logic\/detekt\/build\/tmp\/test\/work\/.gradle-test-kit\/caches\/jars-9\/o_f2c2c512c2c512c2c512c2c512c2c512c\/mycorp-android-build-logic-settings-my-precompiled-script.jar!\/META-INF\/gradle-plugins\/mycorp.my-precompiled-script.properties.\r\n  \r\n      * Try:\r\n      > Run with --info or --debug option to get more log output.\r\n      > Run with --scan to get full insights.\r\n      > Get more help at https:\/\/help.gradle.org.\r\n  \r\n      * Exception is:\r\n      org.gradle.api.plugins.InvalidPluginException: An exception occurred applying plugin request [id: 'mycorp.my-precompiled-script']\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.exceptionOccurred(DefaultPluginRequestApplicator.java:260)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugin(DefaultPluginRequestApplicator.java:238)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyLegacyPlugin(DefaultPluginRequestApplicator.java:190)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.access$300(DefaultPluginRequestApplicator.java:63)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator$1$1.lambda$addLegacy$0(DefaultPluginRequestApplicator.java:150)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.lambda$applyPlugins$0(DefaultPluginRequestApplicator.java:108)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugins(DefaultPluginRequestApplicator.java:108)\r\n      \tat org.gradle.kotlin.dsl.provider.PluginRequestsHandler.handle(PluginRequestsHandler.kt:44)\r\n      \tat org.gradle.kotlin.dsl.provider.StandardKotlinScriptEvaluator$InterpreterHost.applyPluginsTo(KotlinScriptEvaluator.kt:216)\r\n      \tat org.gradle.kotlin.dsl.execution.Interpreter$ProgramHost.applyPluginsTo(Interpreter.kt:385)\r\n      \tat Program.execute(Unknown Source)\r\n      \tat org.gradle.kotlin.dsl.execution.Interpreter$ProgramHost.eval(Interpreter.kt:514)\r\n      \tat org.gradle.kotlin.dsl.execution.Interpreter.eval(Interpreter.kt:193)\r\n      \tat org.gradle.kotlin.dsl.provider.StandardKotlinScriptEvaluator.evaluate(KotlinScriptEvaluator.kt:122)\r\n      \tat org.gradle.kotlin.dsl.provider.KotlinScriptPluginFactory$create$1.invoke(KotlinScriptPluginFactory.kt:51)\r\n      \tat org.gradle.kotlin.dsl.provider.KotlinScriptPluginFactory$create$1.invoke(KotlinScriptPluginFactory.kt:48)\r\n      \tat org.gradle.kotlin.dsl.provider.KotlinScriptPlugin.apply(KotlinScriptPlugin.kt:35)\r\n      \tat org.gradle.configuration.BuildOperationScriptPlugin$1.run(BuildOperationScriptPlugin.java:68)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n      \tat org.gradle.configuration.BuildOperationScriptPlugin.lambda$apply$0(BuildOperationScriptPlugin.java:65)\r\n      \tat org.gradle.internal.code.DefaultUserCodeApplicationContext.apply(DefaultUserCodeApplicationContext.java:43)\r\n      \tat org.gradle.configuration.BuildOperationScriptPlugin.apply(BuildOperationScriptPlugin.java:65)\r\n      \tat org.gradle.initialization.ScriptEvaluatingSettingsProcessor.applySettingsScript(ScriptEvaluatingSettingsProcessor.java:75)\r\n      \tat org.gradle.initialization.ScriptEvaluatingSettingsProcessor.process(ScriptEvaluatingSettingsProcessor.java:68)\r\n      \tat org.gradle.initialization.SettingsEvaluatedCallbackFiringSettingsProcessor.process(SettingsEvaluatedCallbackFiringSettingsProcessor.java:34)\r\n      \tat org.gradle.initialization.RootBuildCacheControllerSettingsProcessor.process(RootBuildCacheControllerSettingsProcessor.java:46)\r\n      \tat org.gradle.initialization.BuildOperationSettingsProcessor$2.call(BuildOperationSettingsProcessor.java:49)\r\n      \tat org.gradle.initialization.BuildOperationSettingsProcessor$2.call(BuildOperationSettingsProcessor.java:46)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n      \tat org.gradle.initialization.BuildOperationSettingsProcessor.process(BuildOperationSettingsProcessor.java:46)\r\n      \tat org.gradle.initialization.DefaultSettingsLoader.findSettingsAndLoadIfAppropriate(DefaultSettingsLoader.java:143)\r\n      \tat org.gradle.initialization.DefaultSettingsLoader.findAndLoadSettings(DefaultSettingsLoader.java:63)\r\n      \tat org.gradle.initialization.SettingsAttachingSettingsLoader.findAndLoadSettings(SettingsAttachingSettingsLoader.java:33)\r\n      \tat org.gradle.internal.composite.ChildBuildRegisteringSettingsLoader.findAndLoadSettings(ChildBuildRegisteringSettingsLoader.java:44)\r\n      \tat org.gradle.initialization.InitScriptHandlingSettingsLoader.findAndLoadSettings(InitScriptHandlingSettingsLoader.java:33)\r\n      \tat org.gradle.initialization.GradlePropertiesHandlingSettingsLoader.findAndLoadSettings(GradlePropertiesHandlingSettingsLoader.java:38)\r\n      \tat org.gradle.initialization.DefaultSettingsPreparer.prepareSettings(DefaultSettingsPreparer.java:31)\r\n      \tat org.gradle.initialization.BuildOperationFiringSettingsPreparer$LoadBuild.doLoadBuild(BuildOperationFiringSettingsPreparer.java:71)\r\n      \tat org.gradle.initialization.BuildOperationFiringSettingsPreparer$LoadBuild.run(BuildOperationFiringSettingsPreparer.java:66)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n      \tat org.gradle.initialization.BuildOperationFiringSettingsPreparer.prepareSettings(BuildOperationFiringSettingsPreparer.java:54)\r\n      \tat org.gradle.initialization.VintageBuildModelController.lambda$prepareSettings$1(VintageBuildModelController.java:80)\r\n      \tat org.gradle.internal.model.StateTransitionController.lambda$doTransition$14(StateTransitionController.java:255)\r\n      \tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:266)\r\n      \tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:254)\r\n      \tat org.gradle.internal.model.StateTransitionController.lambda$transitionIfNotPreviously$11(StateTransitionController.java:213)\r\n      \tat org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:34)\r\n      \tat org.gradle.internal.model.StateTransitionController.transitionIfNotPreviously(StateTransitionController.java:209)\r\n      \tat org.gradle.initialization.VintageBuildModelController.prepareSettings(VintageBuildModelController.java:80)\r\n      \tat org.gradle.initialization.VintageBuildModelController.getLoadedSettings(VintageBuildModelController.java:57)\r\n      \tat org.gradle.configurationcache.ConfigurationCacheAwareBuildModelController.getLoadedSettings(ConfigurationCacheAwareBuildModelController.kt:35)\r\n      \tat org.gradle.internal.model.StateTransitionController.lambda$notInState$3(StateTransitionController.java:132)\r\n      \tat org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:44)\r\n      \tat org.gradle.internal.model.StateTransitionController.notInState(StateTransitionController.java:128)\r\n      \tat org.gradle.internal.build.DefaultBuildLifecycleController.loadSettings(DefaultBuildLifecycleController.java:118)\r\n      \tat org.gradle.internal.build.AbstractBuildState.ensureProjectsLoaded(AbstractBuildState.java:115)\r\n      \tat org.gradle.internal.buildtree.BuildInclusionCoordinator.prepareForInclusion(BuildInclusionCoordinator.java:52)\r\n      \tat org.gradle.internal.composite.DefaultBuildIncluder.lambda$getRegisteredPluginBuilds$0(DefaultBuildIncluder.java:77)\r\n      \tat org.gradle.internal.composite.DefaultBuildIncluder.getRegisteredPluginBuilds(DefaultBuildIncluder.java:79)\r\n      \tat org.gradle.composite.internal.plugins.CompositeBuildPluginResolverContributor$CompositeBuildPluginResolver.resolveFromIncludedPluginBuilds(CompositeBuildPluginResolverContributor.java:110)\r\n      \tat org.gradle.composite.internal.plugins.CompositeBuildPluginResolverContributor$CompositeBuildPluginResolver.doResolve(CompositeBuildPluginResolverContributor.java:88)\r\n      \tat org.gradle.composite.internal.plugins.CompositeBuildPluginResolverContributor$CompositeBuildPluginResolver.resolve(CompositeBuildPluginResolverContributor.java:79)\r\n      \tat org.gradle.plugin.use.resolve.internal.CompositePluginResolver.resolve(CompositePluginResolver.java:34)\r\n      \tat org.gradle.plugin.use.resolve.internal.AlreadyOnClasspathPluginResolver.resolve(AlreadyOnClasspathPluginResolver.java:57)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.resolveToFoundResult(DefaultPluginRequestApplicator.java:266)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.lambda$resolvePluginRequests$3(DefaultPluginRequestApplicator.java:200)\r\n      \tat org.gradle.util.internal.CollectionUtils.collect(CollectionUtils.java:212)\r\n      \tat org.gradle.util.internal.CollectionUtils.collect(CollectionUtils.java:206)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.resolvePluginRequests(DefaultPluginRequestApplicator.java:198)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.resolvePluginRequests(DefaultPluginRequestApplicator.java:114)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugins(DefaultPluginRequestApplicator.java:103)\r\n      \tat org.gradle.kotlin.dsl.provider.PluginRequestsHandler.handle(PluginRequestsHandler.kt:44)\r\n      \tat org.gradle.kotlin.dsl.provider.StandardKotlinScriptEvaluator$InterpreterHost.applyPluginsTo(KotlinScriptEvaluator.kt:216)\r\n      \tat org.gradle.kotlin.dsl.execution.Interpreter$ProgramHost.applyPluginsTo(Interpreter.kt:385)\r\n      \tat Program.execute(Unknown Source)\r\n      \tat org.gradle.kotlin.dsl.execution.Interpreter$ProgramHost.eval(Interpreter.kt:514)\r\n      \tat org.gradle.kotlin.dsl.execution.Interpreter.eval(Interpreter.kt:193)\r\n      \tat org.gradle.kotlin.dsl.provider.StandardKotlinScriptEvaluator.evaluate(KotlinScriptEvaluator.kt:122)\r\n      \tat org.gradle.kotlin.dsl.provider.KotlinScriptPluginFactory$create$1.invoke(KotlinScriptPluginFactory.kt:51)\r\n      \tat org.gradle.kotlin.dsl.provider.KotlinScriptPluginFactory$create$1.invoke(KotlinScriptPluginFactory.kt:48)\r\n      \tat org.gradle.kotlin.dsl.provider.KotlinScriptPlugin.apply(KotlinScriptPlugin.kt:35)\r\n      \tat org.gradle.configuration.BuildOperationScriptPlugin$1.run(BuildOperationScriptPlugin.java:68)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n      \tat org.gradle.configuration.BuildOperationScriptPlugin.lambda$apply$0(BuildOperationScriptPlugin.java:65)\r\n      \tat org.gradle.internal.code.DefaultUserCodeApplicationContext.apply(DefaultUserCodeApplicationContext.java:43)\r\n      \tat org.gradle.configuration.BuildOperationScriptPlugin.apply(BuildOperationScriptPlugin.java:65)\r\n      \tat org.gradle.initialization.ScriptEvaluatingSettingsProcessor.applySettingsScript(ScriptEvaluatingSettingsProcessor.java:75)\r\n      \tat org.gradle.initialization.ScriptEvaluatingSettingsProcessor.process(ScriptEvaluatingSettingsProcessor.java:68)\r\n      \tat org.gradle.initialization.SettingsEvaluatedCallbackFiringSettingsProcessor.process(SettingsEvaluatedCallbackFiringSettingsProcessor.java:34)\r\n      \tat org.gradle.initialization.RootBuildCacheControllerSettingsProcessor.process(RootBuildCacheControllerSettingsProcessor.java:46)\r\n      \tat org.gradle.initialization.BuildOperationSettingsProcessor$2.call(BuildOperationSettingsProcessor.java:49)\r\n      \tat org.gradle.initialization.BuildOperationSettingsProcessor$2.call(BuildOperationSettingsProcessor.java:46)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n      \tat org.gradle.initialization.BuildOperationSettingsProcessor.process(BuildOperationSettingsProcessor.java:46)\r\n      \tat org.gradle.initialization.DefaultSettingsLoader.findSettingsAndLoadIfAppropriate(DefaultSettingsLoader.java:143)\r\n      \tat org.gradle.initialization.DefaultSettingsLoader.findAndLoadSettings(DefaultSettingsLoader.java:63)\r\n      \tat org.gradle.initialization.SettingsAttachingSettingsLoader.findAndLoadSettings(SettingsAttachingSettingsLoader.java:33)\r\n      \tat org.gradle.internal.composite.ChildBuildRegisteringSettingsLoader.findAndLoadSettings(ChildBuildRegisteringSettingsLoader.java:44)\r\n      \tat org.gradle.initialization.InitScriptHandlingSettingsLoader.findAndLoadSettings(InitScriptHandlingSettingsLoader.java:33)\r\n      \tat org.gradle.initialization.GradlePropertiesHandlingSettingsLoader.findAndLoadSettings(GradlePropertiesHandlingSettingsLoader.java:38)\r\n      \tat org.gradle.initialization.DefaultSettingsPreparer.prepareSettings(DefaultSettingsPreparer.java:31)\r\n      \tat org.gradle.initialization.BuildOperationFiringSettingsPreparer$LoadBuild.doLoadBuild(BuildOperationFiringSettingsPreparer.java:71)\r\n      \tat org.gradle.initialization.BuildOperationFiringSettingsPreparer$LoadBuild.run(BuildOperationFiringSettingsPreparer.java:66)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n      \tat org.gradle.initialization.BuildOperationFiringSettingsPreparer.prepareSettings(BuildOperationFiringSettingsPreparer.java:54)\r\n      \tat org.gradle.initialization.VintageBuildModelController.lambda$prepareSettings$1(VintageBuildModelController.java:80)\r\n      \tat org.gradle.internal.model.StateTransitionController.lambda$doTransition$14(StateTransitionController.java:255)\r\n      \tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:266)\r\n      \tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:254)\r\n      \tat org.gradle.internal.model.StateTransitionController.lambda$transitionIfNotPreviously$11(StateTransitionController.java:213)\r\n      \tat org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:34)\r\n      \tat org.gradle.internal.model.StateTransitionController.transitionIfNotPreviously(StateTransitionController.java:209)\r\n      \tat org.gradle.initialization.VintageBuildModelController.prepareSettings(VintageBuildModelController.java:80)\r\n      \tat org.gradle.initialization.VintageBuildModelController.getLoadedSettings(VintageBuildModelController.java:57)\r\n      \tat org.gradle.configurationcache.ConfigurationCacheAwareBuildModelController.getLoadedSettings(ConfigurationCacheAwareBuildModelController.kt:35)\r\n      \tat org.gradle.internal.model.StateTransitionController.lambda$notInState$3(StateTransitionController.java:132)\r\n      \tat org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:44)\r\n      \tat org.gradle.internal.model.StateTransitionController.notInState(StateTransitionController.java:128)\r\n      \tat org.gradle.internal.build.DefaultBuildLifecycleController.loadSettings(DefaultBuildLifecycleController.java:118)\r\n      \tat org.gradle.internal.build.AbstractBuildState.ensureProjectsLoaded(AbstractBuildState.java:115)\r\n      \tat org.gradle.internal.buildtree.BuildInclusionCoordinator.prepareForInclusion(BuildInclusionCoordinator.java:52)\r\n      \tat org.gradle.internal.composite.DefaultBuildIncluder.lambda$getRegisteredPluginBuilds$0(DefaultBuildIncluder.java:77)\r\n      \tat org.gradle.internal.composite.DefaultBuildIncluder.getRegisteredPluginBuilds(DefaultBuildIncluder.java:79)\r\n      \tat org.gradle.composite.internal.plugins.CompositeBuildPluginResolverContributor$CompositeBuildPluginResolver.resolveFromIncludedPluginBuilds(CompositeBuildPluginResolverContributor.java:110)\r\n      \tat org.gradle.composite.internal.plugins.CompositeBuildPluginResolverContributor$CompositeBuildPluginResolver.doResolve(CompositeBuildPluginResolverContributor.java:88)\r\n      \tat org.gradle.composite.internal.plugins.CompositeBuildPluginResolverContributor$CompositeBuildPluginResolver.resolve(CompositeBuildPluginResolverContributor.java:79)\r\n      \tat org.gradle.plugin.use.resolve.internal.CompositePluginResolver.resolve(CompositePluginResolver.java:34)\r\n      \tat org.gradle.plugin.use.resolve.internal.AlreadyOnClasspathPluginResolver.resolve(AlreadyOnClasspathPluginResolver.java:57)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.resolveToFoundResult(DefaultPluginRequestApplicator.java:266)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.lambda$resolvePluginRequests$3(DefaultPluginRequestApplicator.java:200)\r\n      \tat org.gradle.util.internal.CollectionUtils.collect(CollectionUtils.java:212)\r\n      \tat org.gradle.util.internal.CollectionUtils.collect(CollectionUtils.java:206)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.resolvePluginRequests(DefaultPluginRequestApplicator.java:198)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.resolvePluginRequests(DefaultPluginRequestApplicator.java:114)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugins(DefaultPluginRequestApplicator.java:103)\r\n      \tat org.gradle.kotlin.dsl.provider.PluginRequestsHandler.handle(PluginRequestsHandler.kt:44)\r\n      \tat org.gradle.kotlin.dsl.provider.StandardKotlinScriptEvaluator$InterpreterHost.applyPluginsTo(KotlinScriptEvaluator.kt:216)\r\n      \tat org.gradle.kotlin.dsl.execution.Interpreter$ProgramHost.applyPluginsTo(Interpreter.kt:385)\r\n      \tat Program.execute(Unknown Source)\r\n      \tat org.gradle.kotlin.dsl.execution.Interpreter$ProgramHost.eval(Interpreter.kt:514)\r\n      \tat org.gradle.kotlin.dsl.execution.Interpreter.eval(Interpreter.kt:193)\r\n      \tat org.gradle.kotlin.dsl.provider.StandardKotlinScriptEvaluator.evaluate(KotlinScriptEvaluator.kt:122)\r\n      \tat org.gradle.kotlin.dsl.provider.KotlinScriptPluginFactory$create$1.invoke(KotlinScriptPluginFactory.kt:51)\r\n      \tat org.gradle.kotlin.dsl.provider.KotlinScriptPluginFactory$create$1.invoke(KotlinScriptPluginFactory.kt:48)\r\n      \tat org.gradle.kotlin.dsl.provider.KotlinScriptPlugin.apply(KotlinScriptPlugin.kt:35)\r\n      \tat org.gradle.configuration.BuildOperationScriptPlugin$1.run(BuildOperationScriptPlugin.java:68)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n      \tat org.gradle.configuration.BuildOperationScriptPlugin.lambda$apply$0(BuildOperationScriptPlugin.java:65)\r\n      \tat org.gradle.internal.code.DefaultUserCodeApplicationContext.apply(DefaultUserCodeApplicationContext.java:43)\r\n      \tat org.gradle.configuration.BuildOperationScriptPlugin.apply(BuildOperationScriptPlugin.java:65)\r\n      \tat org.gradle.initialization.ScriptEvaluatingSettingsProcessor.applySettingsScript(ScriptEvaluatingSettingsProcessor.java:75)\r\n      \tat org.gradle.initialization.ScriptEvaluatingSettingsProcessor.process(ScriptEvaluatingSettingsProcessor.java:68)\r\n      \tat org.gradle.initialization.SettingsEvaluatedCallbackFiringSettingsProcessor.process(SettingsEvaluatedCallbackFiringSettingsProcessor.java:34)\r\n      \tat org.gradle.initialization.RootBuildCacheControllerSettingsProcessor.process(RootBuildCacheControllerSettingsProcessor.java:46)\r\n      \tat org.gradle.initialization.BuildOperationSettingsProcessor$2.call(BuildOperationSettingsProcessor.java:49)\r\n      \tat org.gradle.initialization.BuildOperationSettingsProcessor$2.call(BuildOperationSettingsProcessor.java:46)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n      \tat org.gradle.initialization.BuildOperationSettingsProcessor.process(BuildOperationSettingsProcessor.java:46)\r\n      \tat org.gradle.initialization.DefaultSettingsLoader.findSettingsAndLoadIfAppropriate(DefaultSettingsLoader.java:143)\r\n      \tat org.gradle.initialization.DefaultSettingsLoader.findAndLoadSettings(DefaultSettingsLoader.java:63)\r\n      \tat org.gradle.initialization.SettingsAttachingSettingsLoader.findAndLoadSettings(SettingsAttachingSettingsLoader.java:33)\r\n      \tat org.gradle.internal.composite.CommandLineIncludedBuildSettingsLoader.findAndLoadSettings(CommandLineIncludedBuildSettingsLoader.java:35)\r\n      \tat org.gradle.internal.composite.ChildBuildRegisteringSettingsLoader.findAndLoadSettings(ChildBuildRegisteringSettingsLoader.java:44)\r\n      \tat org.gradle.internal.composite.CompositeBuildSettingsLoader.findAndLoadSettings(CompositeBuildSettingsLoader.java:35)\r\n      \tat org.gradle.initialization.InitScriptHandlingSettingsLoader.findAndLoadSettings(InitScriptHandlingSettingsLoader.java:33)\r\n      \tat org.gradle.api.internal.initialization.CacheConfigurationsHandlingSettingsLoader.findAndLoadSettings(CacheConfigurationsHandlingSettingsLoader.java:36)\r\n      \tat org.gradle.initialization.GradlePropertiesHandlingSettingsLoader.findAndLoadSettings(GradlePropertiesHandlingSettingsLoader.java:38)\r\n      \tat org.gradle.initialization.DefaultSettingsPreparer.prepareSettings(DefaultSettingsPreparer.java:31)\r\n      \tat org.gradle.initialization.BuildOperationFiringSettingsPreparer$LoadBuild.doLoadBuild(BuildOperationFiringSettingsPreparer.java:71)\r\n      \tat org.gradle.initialization.BuildOperationFiringSettingsPreparer$LoadBuild.run(BuildOperationFiringSettingsPreparer.java:66)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)\r\n      \tat org.gradle.initialization.BuildOperationFiringSettingsPreparer.prepareSettings(BuildOperationFiringSettingsPreparer.java:54)\r\n      \tat org.gradle.initialization.VintageBuildModelController.lambda$prepareSettings$1(VintageBuildModelController.java:80)\r\n      \tat org.gradle.internal.model.StateTransitionController.lambda$doTransition$14(StateTransitionController.java:255)\r\n      \tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:266)\r\n      \tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:254)\r\n      \tat org.gradle.internal.model.StateTransitionController.lambda$transitionIfNotPreviously$11(StateTransitionController.java:213)\r\n      \tat org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:34)\r\n      \tat org.gradle.internal.model.StateTransitionController.transitionIfNotPreviously(StateTransitionController.java:209)\r\n      \tat org.gradle.initialization.VintageBuildModelController.prepareSettings(VintageBuildModelController.java:80)\r\n      \tat org.gradle.initialization.VintageBuildModelController.prepareToScheduleTasks(VintageBuildModelController.java:70)\r\n      \tat org.gradle.configurationcache.ConfigurationCacheAwareBuildModelController.prepareToScheduleTasks(ConfigurationCacheAwareBuildModelController.kt:49)\r\n      \tat org.gradle.internal.build.DefaultBuildLifecycleController.lambda$prepareToScheduleTasks$6(DefaultBuildLifecycleController.java:175)\r\n      \tat org.gradle.internal.model.StateTransitionController.lambda$doTransition$14(StateTransitionController.java:255)\r\n      \tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:266)\r\n      \tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:254)\r\n      \tat org.gradle.internal.model.StateTransitionController.lambda$maybeTransition$9(StateTransitionController.java:190)\r\n      \tat org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:34)\r\n      \tat org.gradle.internal.model.StateTransitionController.maybeTransition(StateTransitionController.java:186)\r\n      \tat org.gradle.internal.build.DefaultBuildLifecycleController.prepareToScheduleTasks(DefaultBuildLifecycleController.java:173)\r\n      \tat org.gradle.internal.buildtree.DefaultBuildTreeWorkPreparer.scheduleRequestedTasks(DefaultBuildTreeWorkPreparer.java:36)\r\n      \tat org.gradle.configurationcache.ConfigurationCacheAwareBuildTreeWorkController$scheduleAndRunRequestedTasks$executionResult$1$result$1.invoke(ConfigurationCacheAwareBuildTreeWorkController.kt:47)\r\n      \tat org.gradle.configurationcache.ConfigurationCacheAwareBuildTreeWorkController$scheduleAndRunRequestedTasks$executionResult$1$result$1.invoke(ConfigurationCacheAwareBuildTreeWorkController.kt:45)\r\n      \tat org.gradle.configurationcache.DefaultConfigurationCache$loadOrScheduleRequestedTasks$1.invoke(DefaultConfigurationCache.kt:143)\r\n      \tat org.gradle.configurationcache.DefaultConfigurationCache$loadOrScheduleRequestedTasks$1.invoke(DefaultConfigurationCache.kt:142)\r\n      \tat org.gradle.configurationcache.DefaultConfigurationCache.runWorkThatContributesToCacheEntry(DefaultConfigurationCache.kt:309)\r\n      \tat org.gradle.configurationcache.DefaultConfigurationCache.loadOrScheduleRequestedTasks(DefaultConfigurationCache.kt:142)\r\n      \tat org.gradle.configurationcache.ConfigurationCacheAwareBuildTreeWorkController$scheduleAndRunRequestedTasks$executionResult$1.apply(ConfigurationCacheAwareBuildTreeWorkController.kt:45)\r\n      \tat org.gradle.configurationcache.ConfigurationCacheAwareBuildTreeWorkController$scheduleAndRunRequestedTasks$executionResult$1.apply(ConfigurationCacheAwareBuildTreeWorkController.kt:44)\r\n      \tat org.gradle.composite.internal.DefaultIncludedBuildTaskGraph.withNewWorkGraph(DefaultIncludedBuildTaskGraph.java:112)\r\n      \tat org.gradle.configurationcache.ConfigurationCacheAwareBuildTreeWorkController.scheduleAndRunRequestedTasks(ConfigurationCacheAwareBuildTreeWorkController.kt:44)\r\n      \tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.lambda$scheduleAndRunTasks$1(DefaultBuildTreeLifecycleController.java:76)\r\n      \tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.lambda$runBuild$4(DefaultBuildTreeLifecycleController.java:119)\r\n      \tat org.gradle.internal.model.StateTransitionController.lambda$transition$6(StateTransitionController.java:169)\r\n      \tat org.gradle.internal.model.StateTransitionController.doTransition(StateTransitionController.java:266)\r\n      \tat org.gradle.internal.model.StateTransitionController.lambda$transition$7(StateTransitionController.java:169)\r\n      \tat org.gradle.internal.work.DefaultSynchronizer.withLock(DefaultSynchronizer.java:44)\r\n      \tat org.gradle.internal.model.StateTransitionController.transition(StateTransitionController.java:169)\r\n      \tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.runBuild(DefaultBuildTreeLifecycleController.java:116)\r\n      \tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.scheduleAndRunTasks(DefaultBuildTreeLifecycleController.java:76)\r\n      \tat org.gradle.internal.buildtree.DefaultBuildTreeLifecycleController.scheduleAndRunTasks(DefaultBuildTreeLifecycleController.java:71)\r\n      \tat org.gradle.tooling.internal.provider.runner.BuildModelActionRunner.run(BuildModelActionRunner.java:53)\r\n      \tat org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)\r\n      \tat org.gradle.internal.buildtree.ProblemReportingBuildActionRunner.run(ProblemReportingBuildActionRunner.java:49)\r\n      \tat org.gradle.launcher.exec.BuildOutcomeReportingBuildActionRunner.run(BuildOutcomeReportingBuildActionRunner.java:65)\r\n      \tat org.gradle.tooling.internal.provider.FileSystemWatchingBuildActionRunner.run(FileSystemWatchingBuildActionRunner.java:140)\r\n      \tat org.gradle.launcher.exec.BuildCompletionNotifyingBuildActionRunner.run(BuildCompletionNotifyingBuildActionRunner.java:41)\r\n      \tat org.gradle.launcher.exec.RootBuildLifecycleBuildActionExecutor.lambda$execute$0(RootBuildLifecycleBuildActionExecutor.java:40)\r\n      \tat org.gradle.composite.internal.DefaultRootBuildState.run(DefaultRootBuildState.java:123)\r\n      \tat org.gradle.launcher.exec.RootBuildLifecycleBuildActionExecutor.execute(RootBuildLifecycleBuildActionExecutor.java:40)\r\n      \tat org.gradle.internal.buildtree.InitDeprecationLoggingActionExecutor.execute(InitDeprecationLoggingActionExecutor.java:62)\r\n      \tat org.gradle.internal.buildtree.InitProblems.execute(InitProblems.java:38)\r\n      \tat org.gradle.internal.buildtree.DefaultBuildTreeContext.execute(DefaultBuildTreeContext.java:40)\r\n      \tat org.gradle.launcher.exec.BuildTreeLifecycleBuildActionExecutor.lambda$execute$0(BuildTreeLifecycleBuildActionExecutor.java:58)\r\n      \tat org.gradle.internal.buildtree.BuildTreeState.run(BuildTreeState.java:58)\r\n      \tat org.gradle.launcher.exec.BuildTreeLifecycleBuildActionExecutor.execute(BuildTreeLifecycleBuildActionExecutor.java:58)\r\n      \tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor$3.call(RunAsBuildOperationBuildActionExecutor.java:61)\r\n      \tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor$3.call(RunAsBuildOperationBuildActionExecutor.java:57)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n      \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n      \tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionExecutor.execute(RunAsBuildOperationBuildActionExecutor.java:57)\r\n      \tat org.gradle.launcher.exec.RunAsWorkerThreadBuildActionExecutor.lambda$execute$0(RunAsWorkerThreadBuildActionExecutor.java:36)\r\n      \tat org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:264)\r\n      \tat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:128)\r\n      \tat org.gradle.launcher.exec.RunAsWorkerThreadBuildActionExecutor.execute(RunAsWorkerThreadBuildActionExecutor.java:36)\r\n      \tat org.gradle.tooling.internal.provider.continuous.ContinuousBuildActionExecutor.execute(ContinuousBuildActionExecutor.java:110)\r\n      \tat org.gradle.tooling.internal.provider.SubscribableBuildActionExecutor.execute(SubscribableBuildActionExecutor.java:64)\r\n      \tat org.gradle.internal.session.DefaultBuildSessionContext.execute(DefaultBuildSessionContext.java:46)\r\n      \tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter$ActionImpl.apply(BuildSessionLifecycleBuildActionExecuter.java:92)\r\n      \tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter$ActionImpl.apply(BuildSessionLifecycleBuildActionExecuter.java:80)\r\n      \tat org.gradle.internal.session.BuildSessionState.run(BuildSessionState.java:69)\r\n      \tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter.execute(BuildSessionLifecycleBuildActionExecuter.java:62)\r\n      \tat org.gradle.tooling.internal.provider.BuildSessionLifecycleBuildActionExecuter.execute(BuildSessionLifecycleBuildActionExecuter.java:41)\r\n      \tat org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:64)\r\n      \tat org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:32)\r\n      \tat org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:51)\r\n      \tat org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:39)\r\n      \tat org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:47)\r\n      \tat org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:31)\r\n      \tat org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:65)\r\n      \tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n      \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n      \tat org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:39)\r\n      \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n      \tat org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:29)\r\n      \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n      \tat org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:35)\r\n      \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n      \tat org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.create(ForwardClientInput.java:78)\r\n      \tat org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.create(ForwardClientInput.java:75)\r\n      \tat org.gradle.util.internal.Swapper.swap(Swapper.java:38)\r\n      \tat org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:75)\r\n      \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n      \tat org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:64)\r\n      \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n      \tat org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:63)\r\n      \tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n      \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n      \tat org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:84)\r\n      \tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)\r\n      \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\r\n      \tat org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:52)\r\n      \tat org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:297)\r\n      \tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n      \tat org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)\r\n      Caused by: org.gradle.api.plugins.InvalidPluginException: Could not find implementation class 'mycorp.MyPrecompiledScriptPlugin' for plugin 'mycorp.my-precompiled-script' specified in jar:file:\/home\/runner\/work\/android\/android\/build-logic\/detekt\/build\/tmp\/test\/work\/.gradle-test-kit\/caches\/jars-9\/o_f2c2c512c2c512c2c512c2c512c2c512c\/mycorp-android-build-logic-settings-my-precompiled-script.jar!\/META-INF\/gradle-plugins\/mycorp.my-precompiled-script.properties.\r\n      \tat org.gradle.api.internal.plugins.DefaultPluginRegistry$1.load(DefaultPluginRegistry.java:77)\r\n      \tat org.gradle.api.internal.plugins.DefaultPluginRegistry$1.load(DefaultPluginRegistry.java:55)\r\n      \tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3571)\r\n      \tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2313)\r\n      \tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2190)\r\n      \tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2080)\r\n      \tat com.google.common.cache.LocalCache.get(LocalCache.java:4012)\r\n      \tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:4035)\r\n      \tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:5013)\r\n      \tat org.gradle.api.internal.plugins.DefaultPluginRegistry.uncheckedGet(DefaultPluginRegistry.java:188)\r\n      \tat org.gradle.api.internal.plugins.DefaultPluginRegistry.lookup(DefaultPluginRegistry.java:183)\r\n      \tat org.gradle.api.internal.plugins.DefaultPluginRegistry.lookup(DefaultPluginRegistry.java:167)\r\n      \tat org.gradle.api.internal.plugins.DefaultPluginManager.apply(DefaultPluginManager.java:144)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.lambda$applyLegacyPlugin$2(DefaultPluginRequestApplicator.java:192)\r\n      \tat org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugin(DefaultPluginRequestApplicator.java:233)\r\n      \t... 342 more\r\n      Caused by: java.lang.ClassNotFoundException: mycorp.MyPrecompiledScriptPlugin\r\n      \tat org.gradle.internal.classloader.VisitableURLClassLoader$InstrumentingVisitableURLClassLoader.findClass(VisitableURLClassLoader.java:186)\r\n      \tat org.gradle.api.internal.plugins.DefaultPluginRegistry$1.load(DefaultPluginRegistry.java:75)\r\n      \t... 356 more\r\n  \r\n  \r\n      Deprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.\r\n  \r\n      You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\r\n  \r\n      For more on this, please refer to https:\/\/docs.gradle.org\/8.5\/userguide\/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.\r\n  \r\n      BUILD FAILED in 431ms\r\n      10 actionable tasks: 1 executed, 9 up-to-date\r\n      Configuration cache entry stored.\r\n          at app\/\/org.gradle.testkit.runner.internal.DefaultGradleRunner.lambda$build$2(DefaultGradleRunner.java:269)\r\n          at app\/\/org.gradle.testkit.runner.internal.DefaultGradleRunner.run(DefaultGradleRunner.java:362)\r\n          at app\/\/org.gradle.testkit.runner.internal.DefaultGradleRunner.build(DefaultGradleRunner.java:267)\r\n          at app\/\/mycorp.FileExistsValueSourceTest.when detekt config file is deleted, then config cache is invalidated$detekt_test(FileExistsValueSourceTest.kt:45)\r\n  \r\n  Finished generating test XML results (0.001 secs) into: \/home\/runner\/work\/android\/android\/build-logic\/detekt\/build\/test-results\/test\r\n  Generating HTML test report...\r\n  Finished generating test html results (0.002 secs) into: \/home\/runner\/work\/android\/android\/build-logic\/detekt\/build\/reports\/tests\/test\r\n  1 test completed, 1 failed\r\n  \r\n  FAILURE: Build completed with 4 failures.\r\n```\r\n\r\n\r\n\r\n### Expected Behavior\r\n\r\nwork 100% of the time. \r\n\r\n### Context (optional)\r\n\r\n\r\npossibly related to: \r\n- #27591\r\n- #25204\r\n\r\n### Steps to Reproduce\r\n\r\nNot reproducible, it is a race condition with the creation of precompiled script plugins in included builds. \r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\nLinux runners on Github Actions","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n***\r\nHey folks, is there enough information to start an investigation?","Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n***\r\nThis is similar to #20830 but the workaround from there doesn't help when multiple including builds run simultaneously. We'll have to think further about ways to approach this use case.","Another related exception. \r\nThis happens with the same `build-logic\/` tests that use `GradleRunnner` and multiple included builds that have included builds. \r\n\r\n```\r\nFailed to compile with Kotlin daemon: java.lang.Exception\r\n\tat org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:69)\r\n\tat org.jetbrains.kotlin.daemon.common.CompileService$CallResult$Error.get(CompileService.kt:65)\r\n\tat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:244)\r\n\tat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:175)\r\n\tat org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:135)\r\n\tat org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:73)\r\n\tat org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)\r\n\tat org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)\r\n\tat org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)\r\n\tat org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)\r\n\tat org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)\r\n\tat org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)\r\n\tat org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)\r\n\tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)\r\n\tat org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)\r\n\tat org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)\r\n\tat org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:170)\r\n\tat java.base\/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:187)\r\n\tat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:120)\r\n\tat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:162)\r\n\tat org.gradle.internal.Factories$1.create(Factories.java:31)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:264)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:128)\r\n\tat org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:133)\r\n\tat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:157)\r\n\tat org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:126)\r\n\tat java.base\/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\r\n\tat java.base\/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n\tat org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)\r\n\tat java.base\/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\r\n\tat java.base\/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\r\n\tat java.base\/java.lang.Thread.run(Thread.java:840)\r\nCaused by: java.io.IOException: Could not delete '\/Users\/me\/build-logic\/settings\/repositories\/build\/kotlin\/compileKotlin\/cacheable\/caches-jvm'\r\n\tat org.jetbrains.kotlin.incremental.FileUtilsKt.deleteRecursivelyOrThrow(fileUtils.kt:47)\r\n\tat org.jetbrains.kotlin.incremental.FileUtilsKt.deleteDirectoryContents(fileUtils.kt:38)\r\n\tat org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.cleanOrCreateDirectories(IncrementalCompilerRunner.kt:301)\r\n\tat org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:270)\r\n\tat org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:125)\r\n\tat org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:657)\r\n\tat org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:105)\r\n\tat org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1624)\r\n\tat java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\n\tat java.base\/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base\/java.lang.reflect.Method.invoke(Method.java:568)\r\n\tat java.rmi\/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)\r\n\tat java.rmi\/sun.rmi.transport.Transport$1.run(Transport.java:200)\r\n\tat java.rmi\/sun.rmi.transport.Transport$1.run(Transport.java:197)\r\n\tat java.base\/java.security.AccessController.doPrivileged(AccessController.java:712)\r\n\tat java.rmi\/sun.rmi.transport.Transport.serviceCall(Transport.java:196)\r\n\tat java.rmi\/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:587)\r\n\tat java.rmi\/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)\r\n\tat java.rmi\/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:705)\r\n\tat java.base\/java.security.AccessController.doPrivileged(AccessController.java:399)\r\n\tat java.rmi\/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:704)\r\n\t... 3 more\r\nUsing fallback strategy: Compile without Kotlin daemon\r\nTry .\/gradlew --stop if this issue persists.\r\nw: Detected multiple Kotlin daemon sessions at kotlin\/sessions\r\nw: Detected multiple Kotlin daemon sessions at kotlin\/sessions\r\nw: Detected multiple Kotlin daemon sessions at kotlin\/sessions\r\n```"],"labels":["a:bug","in:composite-builds"]},{"title":"Adding artifacts with the same name to a configuration","body":"### Issue type\n\nMissing information\n\n### Problem description\n\nIt's not clear what happens when multiple artifacts with the same name [are added](https:\/\/docs.gradle.org\/current\/kotlin-dsl\/gradle\/org.gradle.api.artifacts.dsl\/-artifact-handler\/add.html) into a single configuration. For example, let's say I have a couple of Jar tasks which outputs have **the exact same name**:\r\n\r\n```kotlin\r\nval task2 = tasks.register(\"task2\", Jar::class.java) \/\/ output is: build\/libs\/someLib.jar\r\nval task1 = tasks.register(\"task1\", Jar::class.java) \/\/ output is: build\/libs\/someLib.jar\r\n```\r\n\r\nIf I added both tasks' artifacts into the `runtimeElements` config like so:\r\n\r\n```kotlin\r\nartifacts {\r\n  add(\"runtimeElements\", task2)\r\n  add(\"runtimeElements\", task1)\r\n}\r\n```\r\n\r\nWhat seems to happen when publishing it is that the artifact produced by the last task to run is the \"winner\" (the one that ends up making it to the published files). Also, the order in which the tasks run seems to be provided by their names, the last one alphabetically ordered is the last one to run, so for my previous example, `task2`'s output will be the one published.\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/current\/userguide\/publishing_customization.html","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n***\r\n@gradle\/bt-execution this looks like it should be detected as an overlapping output and fail the build.\r\n***\r\nThe fact that you use a file that has the same name and the same path should cause the above if you are concerned about duplicate file names but not file paths see:\r\n* #21028","@cobexer the task execution part of this works as designed, though I see how the exhibited behavior can be surprising and undesirable.\r\n\r\nGradle detects overlapping outputs for the purpose of making sure that the tasks producing the outputs are not executed at the same time, and only outputs that are fully produced by the task are stored in the build cache. Gradle does NOT warn or fail in the presence of overlapping outputs, though, and this is a choice we made consciously for backwards compatibility.\r\n\r\nFor a bit of context: there is a valid use case where a task's inputs are produced by multiple other tasks. Historically, this use case has often been solved by having the producer tasks write their outputs in the same directory. Gradle has been recommending against this pattern for a long time, as it is a proper foot-gun, and it makes certain optimizations impossible. However, we never made the decision to forbid it completely, as it would have broken existing builds.\r\n\r\nAs a result, we have quite a bit of complexity to detect overlapping outputs and disable optimizations (parallel execution and storing in the cache specifically) to prevent overlapping outputs from causing invalid outputs from being generated by a task.\r\n\r\nUnfortunately, the case in the issue is seen as perfectly valid by our overlapping output detection. We prevent running the tasks in parallel even when `--parallel` is enabled, because of the overlapping outputs. (This is BTW why their declaration order matters I think, but I digress.) And when caching is enabled, we disable it for the task that runs second. However, we do not prevent the tasks from finishing successfully.\r\n\r\nAll that said, we _should_ stop supporting overlapping outputs entirely. We've talked about doing this several years ago: https:\/\/github.com\/gradle\/gradle\/issues\/9090. Since then the situation has changed significantly, though. In the past few years we have gradually increased the pressure on build logic relying on overlapping outputs by disabling more optimizations. We now also have `@UntrackedTask` for tasks that, for whatever reason, must still write to the same output locations. So this might be a good time to start thinking about phasing out overlapping outputs entirely.\r\n\r\nI expect, though, that if we make this change, we'll see a number of plugins that have been accidentally reusing certain locations to start to fail. That is a good thing in the grand scheme of things, but it is likely to cause some turmoil.\r\n\r\nAnd there's another direction that we could rely on here. An idea we are exploring currently is to automatically assign output locations for tasks (similar to how it works with artifact transforms). Doing so would obsolete the need for users or plugins to configure output locations explicitly, having to invent unique paths for each task (which if they mess up, they can end up with unintended overlapping outputs). Indeed, auto-assigned output locations would prevent overlapping outputs entirely.\r\n\r\n----\r\n\r\nI'm not sure what to do with the artifact handling part. I don't see an easy\/general way to improve the behavior here. I think we should fix this by preventing overlapping outputs entirely.","Note to self: I'll write up an issue about moving forward with forbidding overlapping outputs in general."],"labels":["a:chore","in:work-validation","re:reliability"]},{"title":"Clarify if ResolvedArtifactResult is serializable","body":"### Issue type\n\nWrong or misleading information\n\n### Problem description\n\nThe configuration cache documentation suggests that `ArtifactResult` may be referenced as long as a lazy provider is used but that doesn't seem to be the case:\r\n```\r\n1 problem was found storing the configuration cache.\r\n- Task `:test:demo` of type `DemoTask`: cannot serialize object of type 'org.gradle.api.internal.artifacts.result.DefaultResolvedArtifactResult', a subtype of 'org.gradle.api.artifacts.result.ArtifactResult', as these are not supported with the configuration cache.\r\n```\r\n\r\nEven more confusing, when the configuration contains a dependency to a local project, serialization does *not* fail anymore.\n\n### Context (optional)\n\n```groovy\r\nplugins {\r\n    id 'java'\r\n}\r\n\r\ndependencies {\r\n    implementation \"commons-cli:commons-cli:1.6.0\"\r\n    \/\/ removing the following dependency makes the serialization fail\r\n    implementation project(\":some-other-project\")\r\n}\r\n\r\n\r\ntasks.register(\"demo\", DemoTask) {\r\n    artifacts = configurations.runtimeClasspath.incoming.artifacts.resolvedArtifacts\r\n}\r\n\r\nabstract class DemoTask extends DefaultTask {\r\n    @Internal\r\n    abstract SetProperty<ResolvedArtifactResult> getArtifacts()\r\n\r\n    @TaskAction\r\n    void print() {\r\n        artifacts.get().each {\r\n            println it.file\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/8.5\/userguide\/configuration_cache.html#config_cache:requirements:disallowed_types","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n***\r\n@gradle\/bt-configuration should we also update the implementation to not have corner cases appear supported while they should not be?","Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:bug","in:configuration-cache"]},{"title":"`mainSourceElements` artifacts miss task dependencies","body":"### Current Behavior\r\n\r\nIf you depend on `mainSourceElements` of a different project which has a task that generates sources configured, the necessary task dependency is missing.\r\n\r\nI would highly assume that for example JaCoCo report aggregation plugin is affected by this just the same.\r\nUnless I made something wrong in `alpha` I just don't see right now.\r\n\r\n### Expected Behavior\r\n\r\nTask dependency should be there.\r\r\n\r\n### Steps to Reproduce\r\n\r\n- Extract [alpha-beta.zip](https:\/\/github.com\/gradle\/gradle\/files\/13820874\/alpha-beta.zip)\r\n- Execute `gw :gamma:copyAllSources`\r\n\r\n- See that all tasks are `NO-SOURCE` and nothing is in `gamma\/build\/tmp\/`\r\n\r\n- Open `alpha\/ee\/build.gradle.kts`\r\n- Comment in the commented lines\r\n- Do the Gradle invocation again\r\n\r\n- Now the `:alpha:ee:transformSources` task is executed and the transformed sources are copied over properly\r\n\r\n### Gradle version\r\n\r\n8.5\r\n","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n***\r\nThis lack of dependency detection might cause Gradle 8 to report an error when the task ordering changes and an implicit dependency is detected.\r\n\r\nRelated:\r\n* #19555\r\n* #25885\r\n* #27576","Verified to to be a valid bug with:\r\n```\r\ndef \"source directories carry task dependencies\"() {\r\n    given:\r\n    settingsFile << \"\"\"\r\n        include 'other'\r\n    \"\"\"\r\n    file(\"other\/build.gradle\") << \"\"\"\r\n        plugins {\r\n            id(\"java-library\")\r\n        }\r\n        task generateSources {\r\n            outputs.dir(\"src\/generated\/java\")\r\n        }\r\n        sourceSets {\r\n            main {\r\n                java.srcDirs(generateSources.outputs)\r\n            }\r\n        }\r\n    \"\"\"\r\n    buildFile << \"\"\"\r\n        plugins {\r\n            id(\"java-library\")\r\n        }\r\n\r\n        configurations {\r\n            resolvable(\"sourcesResolver\") {\r\n                extendsFrom(implementation)\r\n                attributes {\r\n                    \/\/ Should select mainSourceElements\r\n                    attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.VERIFICATION))\r\n                    attribute(VerificationType.VERIFICATION_TYPE_ATTRIBUTE, objects.named(VerificationType, VerificationType.MAIN_SOURCES))\r\n                    attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))\r\n                }\r\n            }\r\n        }\r\n\r\n        dependencies {\r\n            implementation project(\":other\")\r\n        }\r\n\r\n        task resolve {\r\n            def files = configurations.sourcesResolver.incoming.files\r\n            dependsOn(files)\r\n        }\r\n    \"\"\"\r\n\r\n    expect:\r\n    succeeds(\"resolve\")\r\n}\r\n```\r\n\r\nThis minimal reproducer shows that `generateSources` does not run before `resolve`","Bug is caused here:\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/2d88165300f126c054de4fbca54811279df066d6\/platforms\/jvm\/plugins-java-base\/src\/main\/java\/org\/gradle\/api\/plugins\/jvm\/internal\/DefaultJvmFeature.java#L348-L351\r\n\r\nThe offending code being `flatMap(e -> project.provider(() -> e))`, which strips away task dependencies from the provider. \r\n\r\nAs a quick fix, the following code fixes this issue: \r\n```\r\n        variant.getOutgoing().artifacts(\r\n            getSourceSet().getAllSource().getSourceDirectories().getElements().flatMap(e -> project.provider(() -> e)),\r\n            artifact -> {\r\n                artifact.builtBy(sourceSet.getAllSource().getSourceDirectories());\r\n                artifact.setType(ArtifactTypeDefinition.DIRECTORY_TYPE);\r\n            }\r\n        );\r\n```\r\n\r\nHowever I see this as a larger issue, as a `PublishArtifact` carries task dependencies, and by definition requires us to query `getElements` value before the task dependencies are executed. \r\n\r\nWe almost want a way to get a provider with its value and its task dependencies separately, as long as we promise to carry along those task dependencies ourself on the type that we map to.\r\n\r\nSomething like \r\n```\r\ngetElements().mapWithDependencies((files, taskDependencies) -> \r\n    files.stream().map(file -> \r\n        newPublishArtifact(file, taskDependencies)\r\n    ).toList()\r\n)\r\n```"],"labels":["a:bug","in:java-plugins","in:provider-api"]},{"title":"Validation problem \"Implicit dependencies between tasks\" is not consistently reported","body":"### Current Behavior\r\n\r\nSometimes on CI I get this error:\r\n\r\n```\r\nA problem was found with the configuration of task ':gradle-plugin:sourcesJar' (type 'Jar').\r\n  - Gradle detected a problem with the following location: '\/home\/runner\/work\/dagger-lightsaber\/dagger-lightsaber\/gradle-plugin\/build\/generated'.\r\n    \r\n    Reason: Task ':gradle-plugin:sourcesJar' uses this output of task ':gradle-plugin:compileJava' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed.\r\n```\r\n\r\nOnly sometimes and only on CI. I was never able to reproduce it locally so it is really difficult to know if I fixed the issue or not.\r\n\r\n@Vampire found the exect way to reproduce it:\r\n\r\n> The `compileJava` task has to execute before the `sourcesJar` task to trigger the error (of course without having an ordering constraint or the error would not happen).\r\n\r\nSo you just get this error \"if you are lucky\".\r\n\r\n### Expected Behavior\r\n\r\nIf there is an issue in the project [(and there was)](https:\/\/github.com\/SchwarzIT\/dagger-lightsaber\/commit\/f7476d5a53c3a0cc30a54dd94690b5b48cb72ba3) I expect to be able to get the error message every single time. Or, if the check is expensive, at least I expect to have a flag `--strict` or `--check-all` to force those messages to pop-up.\r\n\r\nThe first step to fix an issue is to be able to reproduce it.\r\n\r\n### Context (optional)\r\n\r\nI was getting this issue on my CI: https:\/\/github.com\/SchwarzIT\/dagger-lightsaber\/actions\/runs\/7396302350\/job\/20121164294?pr=141#step:4:33\r\n\r\n(I paste the relevant text here because some times the logs are lost on github actions):\r\n```\r\n> Task :lightsaber:checkKotlinGradlePluginConfigurationErrors\r\n> Task :lightsaber:kaptGenerateStubsKotlin FROM-CACHE\r\n> Task :gradle-plugin:generatePomFileForLightsaberPluginPluginMarkerMavenPublication\r\n> Task :gradle-plugin:publishLightsaberPluginPluginMarkerMavenPublicationToMavenLocal\r\n> Task :gradle-plugin:checkKotlinGradlePluginConfigurationErrors\r\n> Task :lightsaber:kaptKotlin FROM-CACHE\r\n> Task :gradle-plugin:createVersionsKtFile\r\n> Task :lightsaber:compileKotlin FROM-CACHE\r\n> Task :lightsaber:compileJava NO-SOURCE\r\n> Task :lightsaber:processResources NO-SOURCE\r\n> Task :lightsaber:classes UP-TO-DATE\r\n> Task :gradle-plugin:compileKotlin FROM-CACHE\r\n> Task :gradle-plugin:compileJava NO-SOURCE\r\n> Task :gradle-plugin:pluginDescriptors\r\n> Task :gradle-plugin:processResources\r\n> Task :gradle-plugin:classes\r\n> Task :lightsaber:jar\r\n> Task :gradle-plugin:jar\r\n> Task :gradle-plugin:sourcesJar FAILED\r\n> Task :lightsaber:generateMetadataFileForMavenPublication\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nA problem was found with the configuration of task ':gradle-plugin:sourcesJar' (type 'Jar').\r\n  - Gradle detected a problem with the following location: '\/home\/runner\/work\/dagger-lightsaber\/dagger-lightsaber\/gradle-plugin\/build\/generated'.\r\n    \r\n    Reason: Task ':gradle-plugin:sourcesJar' uses this output of task ':gradle-plugin:compileJava' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed.\r\n    \r\n    Possible solutions:\r\n      1. Declare task ':gradle-plugin:compileJava' as an input of ':gradle-plugin:sourcesJar'.\r\n      2. Declare an explicit dependency on ':gradle-plugin:compileJava' from ':gradle-plugin:sourcesJar' using Task#dependsOn.\r\n      3. Declare an explicit dependency on ':gradle-plugin:compileJava' from ':gradle-plugin:sourcesJar' using Task#mustRunAfter.\r\n    \r\n    For more information, please refer to https:\/\/docs.gradle.org\/8.5\/userguide\/validation_problems.html#implicit_dependency in the Gradle documentation.\r\n```\r\n\r\nThis is my conversation with @Vampire on slack: https:\/\/gradle-community.slack.com\/archives\/CAHSN3LDN\/p1704280008748779\r\n\r\nAs you can see `:lightsaber:compileJava` was \"executed\" (`NO-SOURCE`) before `:gradle-plugin:sourcesJar`.\r\n\r\n### Steps to Reproduce\r\n\r\nTo reproduce this issue you can clone https:\/\/github.com\/SchwarzIT\/dagger-lightsaber and checkout the commit `d36ccba8b12bc12acabbf3f2f8b634b76c642c3b`\r\n\r\nAs I said, this is difficult to reproduce but @Vampire gave some hints:\r\n\r\n> If you run `gw :gradle-plugin:compileJava :gradle-plugin:sourcesJar` with the `compileKotlin` task up-to-date, the `compileJava` should be done before `sourcesJar` and then the error also locally reproduces properly. But if the `compileKotlin` task is run, it probably uses the worker API and thus the `sourcesJar` task can run in parallel and finish before the `compileJava` task is executed which hides the error.\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["@BraisGabin forgot to mention, that with configuration cache enabled it is even worse.\r\nProbably because then all tasks are run in parallel, the error never reproduced for me while of course still present.","Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n","I think I'm seeing this as well. As part of big (~4000 repos) migration some builds are passing CI then merging into main, only to fail later with the task dependency validation.","This is absolutely wrecking me \ud83d\ude22 I think it's especially bad as if you run `.\/gradlew build` (pre merge on PR branch) vs `.\/gradlew publish` (post merge on main branch) different sets of tasks will be run, so the tasks that hit this check may be scheduled in different orders. This means you can easily get to the situation where Gradle 8 upgrade PRs pass this check, merge, then they fail this check when publishing post-merge. That said, even instances of the same `.\/gradlew build` being run at different times cause different task execution orders so this check giving different results.\r\n\r\nIs there some way to disable this check? Either that or I really think this needs to work in all cases where both tasks are run, regardless of their relative order.","This is completely untenable in it's current state. I think it needs to be reworked or deleted. Now we have a significant chunk of repos onto Gradle 8, we are having this issue with the check being non-deterministic pop up all the time.\r\n\r\nA common situation (one specific example - we have _many_ similar ones built up over 10 years of plugin\/repo Gradle code):\r\n\r\n1. Someone adds a task to a gradle plugin which involves reading a file `foo` on disk as input which may or may not exist.\r\n2. In most repos using this plugin, this file `foo` is just static on disk.\r\n1. However, in some repos using the plugin, people have written tasks that generate `foo` as they need some templating.\r\n1. The plugin is updated on a repo with templating.\r\n2. The CI build for the PR passes, as the the generation task happens to run _after_ the new task, and this check **does not catch the issue**.\r\n3. On the main branch, we do a release which calls `.\/gradlew publish`. This has different task scheduling, causing the generation task to run _before_ the the new task. This check **catches the issue**.\r\n4. The release fails, the main branch is broken, other CI builds sporadically non-deterministically fail depending on task ordering.\r\n5. My day as full time Gradle plugin maintainer is ruined.\r\n\r\nThere is definitely a bug in a Gradle plugin\/repo Gradle interactions here - we have bugs in Gradle plugin\/repo Gradle logic _all the time_, but they very rarely manage to break entire repos - we just end up with failing PRs. The real problem is the _validation does not work in every situation_ so the rather than just getting failing plugin upgrade PRs, we end up with broken releases\/main branches as PR CI builds pass. ","Thinking about it deeper, this check does not even prevent the problem it tries to detect.\r\n\r\nFor two tasks `A` and `B`, where `B` has an input which is an output of `A`, but does not declare a task dependency, there are two cases in a build:\r\n\r\n* Case 1: A runs before B:\r\n  * Gradle detects that B has used an output of A without declaring the task dep\r\n  * The tasks ran in the correct order, the artifacts produced by the build are correct, but _Gradle fails the build_.\r\n* Case 2: B runs before A:\r\n  * Gradle does not detect that B would have used an output of A.\r\n  * The tasks ran in the wrong order, the artifacts produced by the build are incorrect, but _Gradle does not fail the build_ and allows the bad artifacts to be published."],"labels":["a:bug","in:work-validation","re:reliability"]},{"title":"When a FileTree is filtered to only include directories, _all_ files are excluded","body":"### Current Behavior\r\n\r\nWhen a FileTree is filtered to only include directories, all files are excluded.\r\n\r\n### Expected Behavior\r\n\r\nEither\r\n\r\n* When a `FileTree` is filtered to only include directories, only non-directory files are excluded.\r\n* `include { it.isDirectory }` is deprecated, and the FileTree documentation is updated to specify that it can only contain non-directory files.\r\n\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\n```kotlin\r\n\/\/ build.gradle.kts \r\n\r\nval buildDir = layout.buildDirectory.asFile.get()\r\n\r\nval buildDirDirectoriesTree: FileTree = fileTree(buildDir)\r\n    .matching { include { it.isDirectory } }\r\n\r\nprintln(\"buildDirDirectoriesTree.isEmpty: ${buildDirDirectoriesTree.isEmpty}\")\r\nprintln(\"buildDirDirectoriesTree file names: ${buildDirDirectoriesTree.files.joinToString { it.name }}\")\r\n\r\nval buildDirDirectoriesList = buildDir.walk().filter { it.isDirectory }.toList()\r\n\r\nprintln(\"buildDirDirectoriesList.isEmpty: ${buildDirDirectoriesList.isEmpty()}\")\r\nprintln(\"buildDirDirectoriesList file names: ${buildDirDirectoriesList.joinToString { it.name }}\")\r\n\r\nrequire(buildDirDirectoriesTree.files.size == buildDirDirectoriesList.size) {\r\n    \"buildDirDirectoriesTree.files.size ${buildDirDirectoriesTree.files.size} should equal buildDirDirectoriesList.size ${buildDirDirectoriesList.size}\"\r\n}\r\n```\r\n\r\n### Gradle version\r\n\r\n8.4\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for your interest in Gradle!\r\n\r\nThis is a valid documentation issue that we will address.\r\n***\r\nSee the caution note below the [unpacking archives](https:\/\/docs.gradle.org\/current\/userguide\/working_with_files.html#sec:unpacking_archives_example) section, which should be generalized to explain that `FileTree`s do not work with empty directory structures.\r\n\r\nRelated:\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/2940"],"labels":["in:file-tasks","a:documentation"]},{"title":"Consider shared gradle.properties not available for every project","body":"### Expected Behavior\n\nIt should be possible to provide project configuration within a `gradle.properties` file that could be configured within the `settings.gradle`. Alternatively it should be possible to include a common `gradle.properties` that is not shared between all projects using the same gradle home.\r\n\r\n## Use-cases\r\n\r\n 1. Share configuration between related projects without exposing secrets to unrelated projects\r\n 2. Share configuration between composed builds without the need of duplicating the configuration\r\n\r\n## Implementation\r\n\r\nIn `settings.gradle` provide `includeProperties` \r\n\r\n    includeProperties files('..\/gradle.properties')\r\n\r\nor a simple `gradleProperties` property\r\n\r\n    gradleProperties = file('..\/gradle.properties')\r\n\r\n## Considerations\r\n\r\n * Use order of definition when more than one file is used\r\n * Ignore missing files\r\n\r\n## Alternative\r\n\r\nConsider accepting `rootDir\/..\/gradle.properties` as a default\n\n### Current Behavior (optional)\n\n_No response_\n\n### Context\n\nIt's common to provide shared configuration within the gradle user home and project specific configuration in the `gradle.properties` of the `project.rootDir`. Most projects also provide secrets with `gradle.properties` that should not be available to any remote repository. Therefore the configuration of the user home would be available to any other project and the configuration of the `rootProject` is already shared and couldn't be ignored.\r\n\r\n---\r\n\r\nThe final configuration taken into account by Gradle is a combination of all Gradle properties set on the command line and your [`gradle.properties`](https:\/\/docs.gradle.org\/current\/userguide\/build_environment.html#sec:gradle_configuration_properties) files.\r\n\r\nIf an option is configured in multiple locations, the first one found in any of these locations wins:\r\n\r\n 1.   command line, set using -D.\r\n 2.   gradle.properties in [GRADLE_USER_HOME](https:\/\/docs.gradle.org\/current\/userguide\/directory_layout.html#dir:gradle_user_home) directory.\r\n 3.   gradle.properties in the project\u2019s directory, then its parent project\u2019s directory up to the build\u2019s root directory.\r\n 4.   gradle.properties in the Gradle installation directory.\r\n\r\n","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n***\r\nRelated:\r\n* #1534","Thank you for providing a valid report.\n\nThis feature request is in the backlog of the relevant team, but this area of Gradle is currently not a focus one, so it might take a while before it gets implemented.\n\n","@mlopatkin I'd like to provide an implementation for it if possible. Could you tell me what's the requirement for getting a PR accepted for this feature?"],"labels":["a:feature","in:configuration-model","in:build-environment"]},{"title":"Add 12 factor property provider support","body":"### Expected Behavior\r\n\r\nhttps:\/\/12factor.net\r\nHere's a brief in how spring boot does it (they have the last wins order) https:\/\/docs.spring.io\/spring-boot\/docs\/current\/reference\/html\/features.html#features.external-config\r\n```kts\r\nproviders.getProperty(\"foo.bar\")\r\n```\r\nshould look for this property the highest priority on my list wins\r\n\r\n1. A command line argument `-Pfoo.bar=`\r\n1. an environment variable `FOO_BAR`\r\n1. a gradle property `gradle.properties` `foo.bar=`\r\n1. a secrets directory `\/run\/secrets\/foo\/bar`\r\n\r\n### Current Behavior (optional)\r\n\r\n_No response_\r\n\r\n### Context\r\n\r\nit's frustrating to have to write a lot of logic to figure out where a property might have come from in the face of security issues even. Where it should live on my local machine isn't necessarily the same as where it should live in CI, and where it should live in CI will depend on the vendor.\r\n\r\nThis is partially spring out of this\r\n\r\nhttps:\/\/github.com\/gradle\/gradle-build-action\/security\/advisories\/GHSA-h3qr-39j9-4r5v\r\n","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n***\r\n@gradle\/bt-configuration A system like this might be a good way to resolve the confusion between environment variables, system properties, gradle- and project properties.\r\n\r\nRelated:\r\n* #26107","Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team, but this area of Gradle is currently not a focus one, so it might take a while before it gets implemented.\r\n***\nThis is an interesting feature to consider. It seems that [build parameters plugin](https:\/\/gradlex.org\/build-parameters) from GradleX already covers some aspects of these. One missing piece is the first-class secret support, though.","Does this functionality really have to be a part of the Gradle core though?\r\nI am still learning the internals, but IIUC there are many plugins like https:\/\/github.com\/google\/secrets-gradle-plugin implementing it as external solution","> Does this functionality really have to be a part of the Gradle core though? I am still learning the internals, but IIUC there are many plugins like https:\/\/github.com\/google\/secrets-gradle-plugin implementing it as external solution\r\n\r\nThere are certain guarantees we want to provide for secrets in the Gradle core too, like avoiding accidentally spilling them to disk because of caching. We have configuration cache encryption to mitigate that to some extent now, but this feature has its costs. ","> We have configuration cache encryption to mitigate that to some extent now, but this feature has its costs.\r\n\r\nis this something always on? is it something that is easily enabled by the github task?\r\n\r\n> There are certain guarantees we want to provide for secrets in the Gradle core too\r\n\r\nI would absolutely say that secrets is a required and somewhat urgent need. Even plugin creators should have a reasonable safe way to say get property as secret. So it's not added to the cache, it's far too easy to make a mistake here, the providers don't make the usage obvious. I'm not sure if, e.g, `System.getProperty` will be stuck in the configuration cache either. Like, what can one be certain is safe, and how can we get github to stop reporting the configuration cache enablement as a vulnerability.","> > We have configuration cache encryption to mitigate that to some extent now, but this feature has its costs.\r\n> \r\n> is this something always on? is it something that is easily enabled by the github task?\r\n> \r\n\r\nIt is always on. By default, Gradle generates a machine-specific encryption key for CC data and stores it in `~\/.gradle` (which is typically not cached as a whole or published as a build artifact on CI). Starting with Gradle 8.6 (going through RC phase ATM), it is also possible to provide the encryption key as an environment variable, mostly to allow utilizing CC on ephemeral CI. You can read more about it at [the documenation page](https:\/\/docs.gradle.org\/nightly\/userguide\/configuration_cache.html#config_cache:secrets). I believe, Gradle GitHub Action is going to support this soon if not already.","I mean hopefully that resolves the issue that GitHub was complaining about... Still I think it's very unclear for plug-in providers how to do anything with secure\/ secrets. I've written plugins and I was recently messing with the Maven plug in to get stuff out of the properties and I have no idea what the right way to do it is. Especially when I was trying to preserve the same name as what was already in those properties. You try to retrieve them via credentials and the credentials can't actually just be passed to the Maven plugin."],"labels":["a:feature","in:configuration-model","in:build-environment"]},{"title":"Show better diagnostics for circular evaluations of FileTrees and FileCollections","body":"### Expected Behavior\n\nSpecific error message as to what's wrong.\n\n### Current Behavior (optional)\n\n```\r\n$ gradlew detekt\r\n\r\n...\r\n\r\n* What went wrong:\r\njava.lang.StackOverflowError (no error message)\r\n```\n\n### Context\n\nAs described in https:\/\/docs.gradle.org\/8.6-rc-1\/release-notes.html#better-error-reporting-of-circular-references-in-providers, there are new and better error reporting instead of StackOverflowError.\r\n\r\nRepro:\r\n * Clone https:\/\/github.com\/TWiStErRob\/repros\/tree\/main\/gradle\/lazyConfiguration-gradle86_recursive_fileTree\r\n * `gradlew detekt`","comments":["Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team and is prioritized by them.\r\n\r\n***\r\n\r\n8.6 release focused only on Providers, but the plan is indeed to have all lazy types covered with better diagnostics eventually."],"labels":["a:feature","in:configuration-model","in:provider-api"]},{"title":"IDEA provisioning plugin for smoke ide tests","body":"Plugin should provide IDEA in build dir","comments":[],"labels":["a:feature","in:isolated-projects"]},{"title":"Allow exclude rules to be defined lazily","body":"### Expected Behavior\r\n\r\nExclude rules on a Configuration can be defined lazily. \r\n\r\n### Current Behavior (optional)\r\n\r\nMust use `afterEvaluate` to lazily add excludes\r\n\r\n### Context\r\n\r\nThe [nebula plugins](https:\/\/github.com\/nebula-plugins\/gradle-resolution-rules-plugin\/blob\/main\/src\/main\/kotlin\/nebula\/plugin\/resolutionrules\/plugin.kt#L109-L126) use `afterEvaluate` to add exclusions to configurations lazily. \r\nSince configurations cannot be mutated after resolution (or observation by another project), they are forced to use internal APIs to detect if a configuration has been observed. \r\n\r\nInstead, there should be a way to add exclusions lazily without afterEvaluate so that they do not need to check if a configuration is mutable before adding their exclusions","comments":[],"labels":["a:feature","in:dependency-declarations"]},{"title":"Collection property elements are not coherced from GString to String when configuration cache enabled","body":"### Current Behavior\r\n\r\n`GString`-type elements of collection\/map properties (such as `ListProperty<String>`) are not coherced into `String` when configuration cache enabled, as it is the case without the configuration cache.\r\n\r\n### Expected Behavior\r\n\r\nWe should either always coherce or never coherce `GString` elements of collection\/map properties to `String`. Probably the former, for backwards compatibility reasons.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\n#### Simple build.gradle \r\n\r\n```\r\nListProperty<String> prop = project.objects.listProperty(String)\r\n\r\ntasks.register(\"hello\") {\r\n    def person = \"World\"\r\n    def greeting = \"Hello, ${person}!\"\r\n    prop.set([greeting])\r\n    String expected = \"Hello, World!\"\r\n    doFirst {\r\n        assert prop.get()[0] == expected\r\n        assert prop.get()[0] instanceof String\r\n    }\r\n}\r\n```\r\n\r\n#### Running without Configuration Cache passes\r\n\r\n```\r\n$ gradle hello                      \r\n\r\nBUILD SUCCESSFUL in 334ms\r\n1 actionable task: 1 executed\r\n```\r\n\r\n\r\n\r\n#### Running with Configuration Cache fails\r\n\r\n```\r\n$ gradle hello --configuration-cache   \r\nCalculating task graph as configuration cache cannot be reused because file 'build.gradle' has changed.\r\n> Task :hello FAILED\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* Where:\r\nBuild file '\/Users\/rafael\/sources\/repros\/gstring-cohercion\/build.gradle' line: 10\r\n\r\n* What went wrong:\r\nExecution failed for task ':hello'.\r\n> assert prop.get()[0] instanceof String\r\n         |    |    |   |\r\n         |    |    |   false\r\n         |    |    Hello, World!\r\n         |    [Hello, World!]\r\n         list(class java.lang.String, org.gradle.api.internal.provider.AbstractCollectionProperty$FixedSupplier@78f87cd3)\r\n\r\n* Try:\r\n> Run with --stacktrace option to get the stack trace.\r\n> Run with --info or --debug option to get more log output.\r\n> Run with --scan to get full insights.\r\n> Get more help at https:\/\/help.gradle.org.\r\n\r\nBUILD FAILED in 369ms\r\n1 actionable task: 1 executed\r\nConfiguration cache entry stored.\r\n\r\n```\r\n\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":[],"labels":["a:bug","in:configuration-cache","@configuration-cache"]},{"title":"JUnit 3 test suite run with JUnit Vintage engine is not included in Gradle test report","body":"### Current Behavior\r\n\r\nA JUnit 3 test annotated to be run with the AllTests runner using JUnit 5 is not included in the Gradle test report.\r\n\r\n### Expected Behavior\r\n\r\nI'd expect all run tests to be included in the test report.\r\n\r\n### Context (optional)\r\n\r\nIn our project, we have quite a few JUnit 3 tests. Currently, we use JUnit 4 for running tests, but would like to upgrade to JUnit 5. However, we'll then miss the JUnit 3 tests in the test report.\r\n\r\nFirst reported to JUnit at https:\/\/github.com\/junit-team\/junit5\/issues\/2904\r\n\r\n### Steps to Reproduce\r\n\r\nThe JUnit 3 tests look like:\r\n\r\n```java\r\n@RunWith(AllTests.class)\r\npublic class JUnit3Test extends TestCase {\r\n\r\n    public static TestSuite suite()\r\n    {\r\n        var suite = new TestSuite(\"JUnit 3 style test suite\");\r\n        suite.addTest(new JUnit3Test(\"JUnit 3 style test\") {\r\n            @Override\r\n            protected void runTest() {\r\n                testSomething();\r\n            }\r\n        });\r\n        return suite;\r\n    }\r\n\r\n    public void testSomething() {\r\n        ...\r\n    }\r\n\r\n    ...\r\n}\r\n```\r\n\r\nThere's a full working example in https:\/\/github.com\/ulrikls\/junit-vintage-alltests\r\n\r\nAny of these changes will successfully include the JUnit 3 test in the report:\r\n* Switching to JUnit 4 - i.e. `useJUnit()`  instead of `useJUnitPlatform()`.\r\n* Changing the name of the test from `JUnit 3 style test` to `testSomeLibraryMethodReturnsTrue`.\r\n* Removing the `@RunWith(AllTests.class)` annotation and the `suite()` method.\r\n\r\nAdding a `System.out.println(\"Test running\");` to `testSomething()` (or making the test fail) will reveal that the test is in fact being run, but the test result is not included in the test report.\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\nhttps:\/\/scans.gradle.com\/s\/pyqoejrwre2im\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team, but this area of Gradle is currently not a focus one, so it might take a while before a fix is made.\r\n"],"labels":["a:bug","in:testing-junit5","has:reproducer"]},{"title":"Tell user when configuration cache entry cannot be reused due invalid\/missing encryption key","body":"### Expected Behavior\r\n\r\nif the config-cache cannot be decrypted for any reason, then the user is presented with:\r\n\r\n```\r\nCalculating task graph as no cached configuration is available for tasks: ...\r\n```\r\n\r\nThis can happen for deleted CC keystore, no encryption key, invalid encryption key, etc.\r\n\r\nIt would be great if the message was something like:\r\n\r\n```Calculating task graph as cached configuration cannot be decrypted```","comments":["The reason for the current behavior is that the encryption key is part of the cache key. That would have to change in order for what is being requested here to be possible."],"labels":["a:feature","in:configuration-cache"]},{"title":"Short-circuit task dependencies","body":"### Expected Behavior\r\n\r\nConsidering I have a build like this:\r\n```kts\r\n\/\/ Writes \"Gradle\" to greeting.txt\r\nval prepare = tasks.register<PrepareTask>(\"prepareGreeting\") {\r\n    message = \"Gradle\"\r\n\r\n    outputFile = layout.buildDirectory.file(\"greeting.txt\")\r\n}\r\n\r\n\/\/ Reads the greeting from greeting.txt and then writes \"Hello, $greeting\" to output.txt\r\nval output = tasks.register<OutputGreetingTask>(\"outputGreeting\") {\r\n    dependsOn(prepare)\r\n\r\n    greetingFile = layout.buildDirectory.file(\"greeting.txt\")\r\n\r\n    outputFile = layout.buildDirectory.file(\"output.txt\")\r\n}\r\n```\r\n\r\nIt would be really useful if I could somehow tell Gradle that `:prepareGreeting` does not produce any output that is useful outside of the `:outputGreeting` task. The idea would then be that, even if I delete `greeting.txt`, the `:prepareGreeting` task could be skipped as long as:\r\n- the inputs on `:prepareGreeting` have not changed\r\n- `:outputGreeting` is otherwise up to date\r\n\r\nThis could also be very powerful in combination with (remote) build caches, as this mechanism would also allow Gradle to skip downloading any results for `:prepareGreeting` as long as the conditions (which could be verified locally without the cache, see below) hold true.\r\n\r\nMy specific use case for this is that I have a bunch of tasks (about 10) that process a rather large jar file. Since task outputs are not supposed to overlap, this means that I also have 10 jar files, of which 9 exist purely for caching purposes, and the final one is actually used as an output. The tasks do make sense as individual tasks, so merging them into one is not really an option for me, as this would also mean that the intermediate results are no longer cached.\r\n\r\nSince task dependencies could also produce files that are not (only) meant for other tasks, there would probably have to be some way to differentiate between the cases. Perhaps `:outputGreeting` could have something similar to this (with better naming):\r\n```kts\r\ndependsOn(prepare, outputsAreOnlyRelevantForThisTask = true)\r\n```\r\n\r\nThat way, gradle could only apply the logic above for task dependencies that have `outputsAreOnlyRelevantForThisTask` along the dependency chain, and invoking the task explicitly from the command line or through a regular \u00b4dependsOn` would still always provide the output.\r\n\r\n### Current Behavior (optional)\r\n\r\nCurrently, Gradle does not skip `:prepareGreeting` when I delete `greeting.txt`.\r\n\r\n### Context\r\n\r\nThis is a bit of a chicken-egg-problem, but I think in theory it should be solvable, even if it might be somewhat complex \u2013 but it's not like caching isn't complex anyways ;)\r\n\r\nThe solution could be to do kind of \"backwards\" `UP-TO-DATE` check.\r\n\r\nWe start at leaf nodes of the task graph and check all their inputs. If an input is a regular property, we immediately check whether it is up too date using the usual logic. If the input is a file, we attempt to traverse the task dependencies to find the task which produces that file. We repeat this process for the task that provides the file, and then we consider the file input to be up to date if the producing task is up to date.\r\n\r\nIn the above example:\r\n1. We start at `:outputGreeting`, and look at the `greetingFile` input.\r\n2. Since `greetingFile` is a file, we look for the task producing it, and find `:prepareGreeting`.\r\n3. We look at `:prepareGreeting`, and since the only input is a regular property, we can do a normal up-to-date check.\r\n4. `:prepareGreeting` is `UP-TO-DATE`, so we consider the `greetingFile` property of `:outputGreeting` to be up to date.\r\n5. Since all it's inputs are up to date, and the outputs are there, `:outputGreeting` is also `UP-TO-DATE`.\r\n\r\nThis would mean we successfully checked whether the tasks are up to date without having to run them, and we know `:outputGreeting` will not run so we can skip `:prepareGreeting`.","comments":["Some similar things have already been suggested in the forums here:\r\n- https:\/\/discuss.gradle.org\/t\/short-circuit-dependency-chain-if-task-outputs-exist\/35101\r\n- https:\/\/discuss.gradle.org\/t\/ability-to-short-circuit-dependencies-with-build-cache\/27050","Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n***\r\n\r\nThis seems related to coarse-grained execution. @gradle\/bt-execution do you track that somewhere?","As @ov7a mentioned, we indeed have a plan to address your use case via a feature called \"coarse-grained execution.\" The idea there is to skip executing _intermediate_ tasks (or indeed load their outputs from the local or remote caches) when we can prove that their _transitive_ inputs haven't changed.\r\n\r\nWe haven't planned this work yet, though, so I can't say when it will be shipped."],"labels":["a:feature","in:execution-engine"]},{"title":"Increasing versions.txt to 8.7 causes `NoClassDefFoundError`","body":"### Current Behavior\n\nUsing `org.gradle.api.problems.ReportingScript#getProblemReportingScript` in `ProblemProgressEventCrossVersionTest` causes `NoClassDefFoundError`.\r\nWhen versions.txt is set back to 8.6 it doesn't do that.\n\n### Expected Behavior\n\nNo `NoClassDefFoundError` depending on the current version.\n\n### Context (optional)\n\nthe testFixtures are imported in tooling-api `build.gradle.kts`\r\nusing\r\n`crossVersionTestImplementation(testFixtures(project(\":problems-api\")))`\n\n### Steps to Reproduce\n\nInstead of the string use the commented code in `ProblemProgressEventCrossVersionTest`\n\n### Gradle version\n\n8.6-20231208002054+0000\n\n### Build scan URL (optional)\n\nhttps:\/\/ge.gradle.org\/s\/khyq24smzsajw\n\n### Your Environment (optional)\n\n_No response_","comments":[],"labels":["a:bug","in:tooling-api"]},{"title":"When BuildAction fails with Isolated Projects the output reports CC entry was stored","body":"This happens because the post-build output produced by CC in this case does not take into account whether the underlying build action has failed or not:\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/b08b7722c1e9262ddf36316f3a838aa8cb50d8eb\/subprojects\/composite-builds\/src\/main\/java\/org\/gradle\/composite\/internal\/DefaultRootBuildState.java#L124-L126\r\n\r\n```\r\nIsolated projects is an incubating feature.\r\nCreating tooling model as no cached configuration is available for the requested model\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nBuild action expectedly failed\r\n\r\nCONFIGURE FAILED in 3s\r\nConfiguration cache entry stored.\r\n```\r\n\r\n","comments":[],"labels":["a:chore","in:configuration-cache","@configuration-cache","in:isolated-projects"]},{"title":"Automatic output path allocation","body":"### Expected Behavior\r\n\r\nMake it possible to have Gradle determine the location of outputs automatically:\r\n\r\n\r\n```kotlin\r\nclass MyTask: DefaultTask() {\r\n  @get:OutputFile\r\n  @get:AutoSet \/\/ Automatically set this property\r\n  abstract val outputFile: RegularFileProperty\r\n\r\n  @TaskAction\r\n  fun doStuff() { ... }\r\n}\r\n```\r\n\r\nThe location could be set using the task name for an example.\r\n\r\nThis has 2 major benefits: \r\n\r\n* No need for the task author to think about where to put the task outputs.\r\n* No risk of overlapping outputs.\r\n\r\n\r\n\r\n### Current Behavior (optional)\r\n\r\n_No response_\r\n\r\n### Context\r\n\r\nFollow up from https:\/\/github.com\/gradle\/gradle\/issues\/26132 and https:\/\/github.com\/gradle\/gradle\/issues\/26091\r\n[Related slack discussion](https:\/\/www.linen.dev\/s\/gradle-community\/t\/16179523\/somewhat-philosophical-question-what-value-is-there-in-tasks#0b92fa89-46a0-46ff-809d-88ab29c361ee)","comments":["Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team, but this area of Gradle is currently not in focus. It might take a while before it gets implemented.\r\n","This is something we'd like to do as part of running tasks in a sandboxed workspace, similar to how we do with (non-incremental) artifact transforms."],"labels":["a:feature","in:execution-engine","in:writing-tasks"]},{"title":"Make it possible to override POM name and description","body":"<!--- The issue this PR addresses -->\r\nFixes #12259\r\n\r\n### Context\r\n<!--- Why do you believe many users will benefit from this change? -->\r\n<!--- Link to relevant issues or forum discussions here -->\r\nThis fixed the problem that a \"custom pom declaration\" via the `publishing.publication` configuration will be ignored for the `name` and `description` property in the POM file.\r\n\r\nThe problem right now is, that the `java-gradle-plugin` sets the `name` and `description` (of the POM) to the value of the `gradlePlugin.displayName` and `gradlePlugin.description` respectively.\r\nIf the latter properties are *not*  set, your custom POM declaration will be overriden by `null`. So basically the `name` and `description` will be removed from the POM.\r\n\r\nThis is confusing in my opinion.\r\n\r\nThe fix is the straight forward.\r\nIt will only set (or override) the POM `name` and `description` in case the `gradlePlugin.displayName` or `gradlePlugin.description` are *set*. In case they are not set (and are not empty) it will don't do anything. \r\nIn case you don't have a custom POM declaration this is the default behaviour anyways.\r\n\r\nSo what would work now that wasn't the case before?\r\nThis didn't worked:\r\n```kotlin\r\ngradlePlugin {\r\n    plugins {\r\n        register(\"some.thing\") {\r\n            id = \"some.thing\"\r\n            implementationClass = \"some.thing.Klass\"\r\n        }\r\n    }\r\n}\r\n\r\npublishing {\r\n    publications.withType<MavenPublication> {\r\n        pom {\r\n            name = \"Something\"\r\n            description = \"SomeDesc\"\r\n        }\r\n    }\r\n}\r\n```\r\nThe POM `name` and `description` where empty!\r\nNow it works and will be respected.\r\n\r\n### Contributor Checklist\r\n- [x] [Review Contribution Guidelines](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md)\r\n- [x] Make sure that all commits are [signed off](https:\/\/git-scm.com\/docs\/git-commit#Documentation\/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https:\/\/developercertificate.org\/).\r\n- [x] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https:\/\/github.com\/gradle\/gradle\/blob\/master\/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https:\/\/apache.org\/legal\/resolved.html).\r\n- [x] Check [\"Allow edit from maintainers\" option](https:\/\/help.github.com\/articles\/allowing-changes-to-a-pull-request-branch-created-from-a-fork\/) in pull request so that additional changes can be pushed by Gradle team\r\n- [x] Provide integration tests (under `<subproject>\/src\/integTest`) to verify changes from a user perspective\r\n- [ ] Provide unit tests (under `<subproject>\/src\/test`) to verify logic\r\n- [ ] Update User Guide, DSL Reference, and Javadoc for public-facing changes\r\n- [ ] Ensure that tests pass sanity check: `.\/gradlew sanityCheck`\r\n- [x] Ensure that tests pass locally: `.\/gradlew <changed-subproject>:quickTest`\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["<h3>Change Summary<\/h3> This PR is 97.22% new code. <table> <tr> <td>Platform<\/td> <td>Added Lines<\/td> <td>% of Total Line Changes<\/td> <td>Deleted Lines<\/td> <td>% of Total Line Changes<\/td> <td>Files Changed<\/td> <td>% of Total Files Changed<\/td> <\/tr>\n<tr> <td>bt_ge_build_cache<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>build_infrastructure<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_configuration<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_execution<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_runtime<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>documentation<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>extensibility<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>gradle_enterprise<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>ide<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>jvm<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>kotlin_dsl<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>release_coordination<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>software<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<\/table>\n<automation id=\"summary_table\/summary_table\"\/>","<h3>Change Summary<\/h3> This PR is 97.22% new code. <table> <tr> <td>Platform<\/td> <td>Added Lines<\/td> <td>% of Total Line Changes<\/td> <td>Deleted Lines<\/td> <td>% of Total Line Changes<\/td> <td>Files Changed<\/td> <td>% of Total Files Changed<\/td> <\/tr>\n<tr> <td>bt_ge_build_cache<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>build_infrastructure<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_configuration<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_execution<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_runtime<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>documentation<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>extensibility<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>gradle_enterprise<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>ide<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>jvm<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>kotlin_dsl<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>release_coordination<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>software<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<\/table>\n<automation id=\"summary_table\/summary_table\"\/>","<h3>Change Summary<\/h3> This PR is 97.22% new code. <table> <tr> <td>Platform<\/td> <td>Added Lines<\/td> <td>% of Total Line Changes<\/td> <td>Deleted Lines<\/td> <td>% of Total Line Changes<\/td> <td>Files Changed<\/td> <td>% of Total Files Changed<\/td> <\/tr>\n<tr> <td>bt_ge_build_cache<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>build_infrastructure<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_configuration<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_execution<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>core_runtime<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>documentation<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>extensibility<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>gradle_enterprise<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>ide<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>jvm<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>kotlin_dsl<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>release_coordination<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<tr> <td>software<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <td>0<\/td> <td>0%<\/td> <\/tr>\n<\/table>\n<automation id=\"summary_table\/summary_table\"\/>","Thank you for your contribution!\r\n\r\nThis PR has a valid DCO and tests. The relevant team for this area will confirm the design of the implementation choices.\r\n"],"labels":["in:publishing-plugins","in:plugin-development","from:contributor"]},{"title":"WIP","body":null,"comments":["@bot-gradle test","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"21c4fe7052737a80039c31e76ab3f6693d91b59e\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=21c4fe7052737a80039c31e76ab3f6693d91b59e) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=76014813)","This pull request has been automatically marked as stale because it has not had recent activity. It will be closed in 14 days if no further activity occurs. If you don't want the stale bot to close it, then set a milestone for it."],"labels":["stale"]},{"title":"Create custom ArtifactRepository type","body":"### Expected Behavior\n\n```kotlin\r\nrepositories {\r\n  add(MyCustomArtifactRepository())\r\n}\r\n```\n\n### Current Behavior (optional)\n\n_No response_\n\n### Context\n\nWe have an internal http service acting as a repository. Unfortunately, it does not following the maven standard regarding the file hierarchy, but we still want to fetch dependencies\/jar\/files from it using http.\r\n\r\nLooking into the code, I need to implement a custom `ResourceConnectorFactory`, but this api is internal. Also there is no public api to register the custom connector, all possibilities are hardcoded in `BaseRepositoryFactory`.\r\n\r\nIt is also protected by client cert auth, see #27446 ","comments":["Thank you for your interest in Gradle!\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n"],"labels":["a:feature","in:repository-declarations"]},{"title":"Tutorials should cover multiple programming languages","body":"### Issue type\n\nWrong or misleading information\n\n### Problem description\n\n\u5728 *Developing Custom Gradle Types* [7.0](https:\/\/docs.gradle.org\/7.0\/userguide\/custom_gradle_types.html)\u3001[8.0](https:\/\/docs.gradle.org\/8.0\/userguide\/custom_gradle_types.html)\r\n * Gradle at (7.0,8.5] not support kotlin demo\uff0chowerver\uff0cwhen the managed properties was an incubating feature\uff0cit supported Java\u3001Kotlin\u3001Groovy demo\u3002\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/7.0\/userguide\/custom_gradle_types.html","comments":["Thank you for your interest in Gradle!\r\n\r\nThis is a valid documentation issue that we will address.\r\n"],"labels":["in:documentation-infrastructure","a:feature"]},{"title":"Create custom credential type","body":"### Expected Behavior\r\n\r\n```kotlin\r\n\/\/ build.gradle.kts\r\nrepositories {\r\n  maven(url = \"myUrl\") {\r\n    credentials(MyCustomCredentials::class) {\r\n      userCert.set(file(\"myCert.cert\"))\r\n      userKey.set(file(\"myKey.pem\"))\r\n    }\r\n  }\r\n}\r\n```\r\n```kotlin\r\n\/\/ MyCustomCredentials defined in myCustomPlugin\r\nclass MyCustomCredentials: Credentials {\r\n}\r\n```\r\n### Current Behavior (optional)\r\n\r\n_No response_\r\n\r\n### Context\r\n\r\nWe have an internal repository protected by our IDP and we want to switch from Basic Auth to Client Cert authentication. Gradle does not support client cert auth and all supported credential types are hardcoded in AuthenticationSupporter. Ideally, there is an api for plugin authors to implement a custom authentication logic.","comments":["Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team, but this area of Gradle is currently not in focus. It might take a while before it gets implemented.\r\n\r\n***\r\n\r\nRelated:\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/16432"],"labels":["a:feature","in:repository-declarations"]},{"title":"Configuration cache causes \"Querying the mapped value of provider(java.util.Set) before task has completed is not supported\" error when adding artifact to outgoing variant","body":"### Current Behavior\r\n\r\nConfiguration cache causes \"Querying the mapped value of provider(java.util.Set) before task has completed is not supported\" error when adding artifact to outgoing variant.\r\n\r\n### Expected Behavior\r\n\r\nEither:\r\n\r\n* Configuration cache does not cause error when adding artifact to outgoing variant.\r\n* Error message is updated to be more helpful and explain how to resolve the problem.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a convention plugin \r\n    ```kotlin\r\n    \/\/ buildSrc\/src\/main\/kotlin\/my-plugin.gradle.kts\r\n\r\n    import org.gradle.api.attributes.Usage.USAGE_ATTRIBUTE\r\n    \r\n    interface MyCustomTypeAttribute : Named {\r\n      companion object {\r\n        val myCustomTypeAttribute = Attribute.of(MyCustomTypeAttribute::class.java)\r\n      }\r\n    }\r\n    \r\n    interface MyCustomVariantAttribute : Named {\r\n      companion object {\r\n        val myCustomVariantAttribute = Attribute.of(MyCustomVariantAttribute::class.java)\r\n      }\r\n    }\r\n    \r\n    val myDependency = configurations.dependencyScope(\"myDependency\") {\r\n      attributes {\r\n        attribute(USAGE_ATTRIBUTE, objects.named(\"my-plugin\"))\r\n      }\r\n    }\r\n    \r\n    \r\n    val myDependencyHtml = configurations.dependencyScope(\"myDependencyHtml\") {\r\n      extendsFrom(myDependency.get())\r\n      attributes {\r\n        attribute(USAGE_ATTRIBUTE, objects.named(\"my-plugin\"))\r\n        attribute(MyCustomTypeAttribute.myCustomTypeAttribute, objects.named(\"html\"))\r\n      }\r\n    }\r\n    \r\n    val myDependencyHtmlResolvable: NamedDomainObjectProvider<ResolvableConfiguration> =\r\n      project.configurations.resolvable(\"${myDependencyHtml.name}Resolvable\") {\r\n        extendsFrom(myDependencyHtml.get())\r\n        attributes {\r\n          attribute(USAGE_ATTRIBUTE, objects.named(\"my-plugin\"))\r\n          attribute(MyCustomTypeAttribute.myCustomTypeAttribute, objects.named(\"html\"))\r\n        }\r\n      }\r\n    \r\n    val myDependencyHtmlConsumable: NamedDomainObjectProvider<ConsumableConfiguration> =\r\n      project.configurations.consumable(\"${myDependencyHtml.name}Consumable\") {\r\n        attributes {\r\n          attribute(USAGE_ATTRIBUTE, objects.named(\"my-plugin\"))\r\n          attribute(MyCustomTypeAttribute.myCustomTypeAttribute, objects.named(\"html\"))\r\n        }\r\n      }\r\n    \r\n    val myDependencyHtmlConsumableVariantRenderedFiles: ConfigurationVariant =\r\n      myDependencyHtmlConsumable.get().outgoing.variants\r\n        .create(\"${myDependencyHtmlConsumable.name}RenderedFiles\") {\r\n          attributes {\r\n            attribute(USAGE_ATTRIBUTE, objects.named(\"my-plugin\"))\r\n            attribute(MyCustomTypeAttribute.myCustomTypeAttribute, objects.named(\"html\"))\r\n            attribute(MyCustomVariantAttribute.myCustomVariantAttribute, objects.named(\"RenderedFiles\"))\r\n          }\r\n        }\r\n    \r\n    \r\n    extensions.add(\r\n      ConfigurationVariant::class,\r\n      \"myDependencyHtmlConsumableVariantRenderedFiles\",\r\n      myDependencyHtmlConsumableVariantRenderedFiles\r\n    )\r\n    ```\r\n\r\n2. Apply convention plugin to a subproject, and add an outgoing artifact using a task\r\n    \r\n    ```kotlin\r\n    \/\/ .\/some-subproject\/build.gradle.kts\r\n    \r\n    plugins {\r\n      `my-plugin`\r\n    }\r\n    \r\n    val generatedHtmlRenderedFiles by tasks.registering(Sync::class) {\r\n      from(resources.text.fromString(\"\"\"<html \/>\"\"\")) {\r\n        rename { \"argh.html\" }\r\n      }\r\n      into(temporaryDir)\r\n    }\r\n    \r\n    myDependencyHtmlConsumableVariantRenderedFiles.artifact(generatedHtmlRenderedFiles)\r\n    ```\r\n\r\n3. Apply convention plugin to the root project, and depend on the subproject. Create a task that will consume the dependencies.\r\n\r\n    ```kotlin\r\n    \/\/ build.gradle.kts\r\n    \r\n    plugins {\r\n      `my-plugin`\r\n    }\r\n    \r\n    dependencies {\r\n      myDependency(project(\":some-subproject\"))\r\n    }\r\n    \r\n    val printHtmlRenderedFiles by tasks.registering {\r\n      val files  =\r\n        configurations.myDependencyHtmlResolvable.flatMap { incomingResolver ->\r\n          incomingResolver.incoming\r\n            .artifactView {\r\n              attributes {\r\n                attribute(Usage.USAGE_ATTRIBUTE, objects.named(\"my-plugin\"))\r\n                attribute(My_plugin_gradle.MyCustomTypeAttribute.myCustomTypeAttribute, objects.named(\"html\"))\r\n                attribute(My_plugin_gradle.MyCustomVariantAttribute.myCustomVariantAttribute, objects.named(\"RenderedFiles\"))\r\n              }\r\n            }\r\n            .artifacts\r\n            .resolvedArtifacts\r\n            .map { artifacts -> artifacts.map { it.file } }\r\n        }\r\n      inputs.files(files)\r\n    \r\n      doLast {\r\n            println(\"got files \" + files.orNull?.joinToString { it.name })\r\n      }\r\n    }\r\n    ```\r\n\r\n5. Run `.\/gradlew printHtmlRenderedFiles` - the task works\r\n5. Run `.\/gradlew printHtmlRenderedFiles --configuration-cache` - the task fails\r\n    ```\r\n    FAILURE: Build failed with an exception.\r\n    \r\n    * What went wrong:\r\n    Querying the mapped value of provider(java.util.Set) before task ':some-subproject:generatedHtmlRenderedFiles' has completed is not supported\r\n    \r\n    * Try:\r\n    > Run with --stacktrace option to get the stack trace.\r\n    > Run with --debug option to get more log output.\r\n    > Run with --scan to get full insights.\r\n    > Get more help at https:\/\/help.gradle.org.\r\n    \r\n    BUILD FAILED in 340ms\r\n    ```\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n\r\n***\r\n1. The error should be improved to provide more context and information about where and why it occurs.\r\n2. The `flatMap` method on `Provider<Configuration>` should properly track task dependencies and should not fail with this error.\r\n\r\n***\r\n\r\n@aSemy can you please provide an isolated reproducer using our template?\r\n\r\nProbable workaround: instead of `.flatMap` use `configurations.myDependencyHtmlResolvable.get().incoming...`. That should start the tracking of task dependencies properly.\r\n\r\n\r\n","Using `get()` instead of `flatMap {}` didn't change anything.\r\n\r\nIt's another bug with the artifact view: if I don't use it, then it works:\r\n\r\n```kotlin\r\nval printHtmlRenderedFiles2 by tasks.registering {\r\n  group = project.name\r\n\r\n  val files =\r\n    configurations.myDependencyHtmlResolvable.map {\r\n      it.incoming.files\r\n    }\r\n  inputs.files(files)\r\n\r\n  doLast {\r\n    println(\"got files \" + files.orNull?.joinToString { it.name })\r\n  }\r\n}\r\n```\r\n\r\nBut then because dependency resolution is bugged\/flaky\/undocumented then in real-life projects I get random files from other subprojects in the incoming files that are unrelated to the requested and provided files."],"labels":["a:bug","in:configuration-cache","in:dependency-declarations","in:provider-api","re:comprehensibility"]},{"title":"Adding a ConfigurationVariant as an extension generates a DSL accessor with an internal Gradle type","body":"### Current Behavior\r\n\r\nAdding a ConfigurationVariant as an extension generates a DSL accessor with an internal Gradle type.\r\n\r\n### Expected Behavior\r\n\r\nAdding a ConfigurationVariant as an extension does not generate a DSL accessor with an internal Gradle type.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\nCreate a convention plugin that creates an outgoing variant and adds to to `Project.extensions`\r\n\r\n```kotlin\r\n\/\/ buildSrc\/src\/main\/kotlin\/some-convention.gradle.kts\r\n\r\nval myDependencyHtmlConsumable: NamedDomainObjectProvider<ConsumableConfiguration> =\r\n  project.configurations.consumable(\"myDependencyHtmlConsumable\") {\r\n    attributes {\r\n      attribute(Usage.USAGE_ATTRIBUTE, objects.named(\"my-plugin\"))\r\n      attribute(Category.CATEGORY_ATTRIBUTE, objects.named(\"html\"))\r\n    }\r\n  }\r\n\r\nval myDependencyHtmlConsumableVariantRenderedFiles: ConfigurationVariant =\r\n  myDependencyHtmlConsumable.get().outgoing.variants\r\n    .create(\"myDependencyHtmlConsumableVariantRenderedFiles\") {\r\n      attributes {\r\n        attribute(Usage.USAGE_ATTRIBUTE, objects.named(\"my-plugin\"))\r\n        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(\"html\"))\r\n      }\r\n    }\r\n\r\nextensions.add(\"myDependencyHtmlConsumableVariantRenderedFiles\", myDependencyHtmlConsumableVariantRenderedFiles)\r\n```\r\n\r\nApply to a subproject. The generated accessor for `myDependencyHtmlConsumableVariantRenderedFiles` uses an internal type, `org.gradle.api.internal.artifacts.configurations.DefaultVariant`.\r\n\r\n```kotlin\r\n\/\/ some-subproject\/build.gradle.kts\r\n\r\nplugins {\r\n  `some-convention`\r\n}\r\n\r\nval x: org.gradle.api.internal.artifacts.configurations.DefaultVariant = myDependencyHtmlConsumableVariantRenderedFiles\r\n```\r\n\r\nGenerated accessor:\r\n\r\n```kotlin\r\n\/**\r\n * Retrieves the [myDependencyHtmlConsumableVariantRenderedFiles][org.gradle.api.internal.artifacts.configurations.DefaultVariant] extension.\r\n *\/\r\nval org.gradle.api.Project.`myDependencyHtmlConsumableVariantRenderedFiles`: org.gradle.api.internal.artifacts.configurations.DefaultVariant get() =\r\n    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName(\"myDependencyHtmlConsumableVariantRenderedFiles\") as org.gradle.api.internal.artifacts.configurations.DefaultVariant\r\n```\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team, but this area of Gradle is currently not a focus one, so it might take a while before a fix is made.\r\n\r\n***\r\n\r\nGenerated accessors should not use internal types."],"labels":["a:bug","in:kotlin-dsl","in:dependency-declarations","has:reproducer"]},{"title":"Registering an outgoing variant fails with \"Cannot create variant after dependency configuration has been resolved\", while creating an outgoing variant works","body":"### Current Behavior\r\n\r\nRegistering an outgoing variant fails with \"Cannot create variant after dependency configuration has been resolved\", while creating an outgoing variant works\r\n\r\n### Expected Behavior\r\n\r\nEither:\r\n\r\n* Registering an outgoing variant works\r\n* The 'register' option is disabled, removed, or documented as broken. The error message is improved.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create Configurations in a convention plugin:\r\n    \r\n    ```kotlin\r\n    \/\/ buildSrc\/src\/main\/kotlin\/foo.gradle.kts\r\n    \r\n    val requestedDependencies: NamedDomainObjectProvider<DependencyScopeConfiguration> =\r\n      configurations.dependencyScope(\"foo\") {\r\n        attributes {\r\n          attribute(Usage.USAGE_ATTRIBUTE, objects.named(\"foo\"))\r\n        }\r\n      }\r\n    \r\n    \r\n    val incomingResolver: NamedDomainObjectProvider<ResolvableConfiguration> =\r\n      configurations.resolvable(\"${requestedDependencies.name}Incoming\") {\r\n        extendsFrom(requestedDependencies.get())\r\n        attributes {\r\n          attribute(Usage.USAGE_ATTRIBUTE, objects.named(\"foo\"))\r\n        }\r\n      }\r\n    \r\n    \r\n    val outgoingProvider: NamedDomainObjectProvider<ConsumableConfiguration> =\r\n      configurations.consumable(\"${requestedDependencies.name}Outgoing\") {\r\n        extendsFrom(requestedDependencies.get())\r\n        attributes {\r\n          attribute(Usage.USAGE_ATTRIBUTE, objects.named(\"foo\"))\r\n        }\r\n      }\r\n    \r\n    private fun createOutgoingVariant(variant: String) =\r\n      outgoingProvider.get().outgoing.variants.register(\"${outgoingProvider.name}$variant\") {\r\n        attributes {\r\n          attribute(Usage.USAGE_ATTRIBUTE, objects.named(\"foo\"))\r\n          attribute(Category.CATEGORY_ATTRIBUTE, objects.named(variant))\r\n        }\r\n      }\r\n    \r\n    val outgoingVariantRenderedFiles =\r\n      createOutgoingVariant(\"RenderedFiles\")\r\n    \r\n    val outgoingVariantJars =\r\n      createOutgoingVariant(\"Jars\")\r\n    ```\r\n\r\n2. In the root project apply the convention plugin, with a task that resolves the incoming files:\r\n    ```kotlin\r\n    \/\/ build.gradle.kts\r\n    \r\n    plugins {\r\n      foo\r\n    }\r\n    \r\n    dependencies {\r\n      foo(\"org.apache.commons:commons-math3:3.6.1\")\r\n    }\r\n    \r\n    val fooIncomingResolverTask by tasks.registering {\r\n      val files =\r\n        configurations.fooIncoming.get().incoming.artifactView { }.artifacts.resolvedArtifacts.map { it.map { it.file } }\r\n      inputs.files(files)\r\n      doLast {\r\n        println(\"got files \" + files.orNull?.joinToString { it.name })\r\n      }\r\n    }\r\n    ```\r\n3. Run `.\/gradlew fooIncomingResolverTask`\r\n4. Error message:\r\n    ```\r\n    Could not determine the dependencies of task ':fooIncomingResolverTask'.\r\n    > Could not determine the dependencies of null.\r\n       > Could not resolve all dependencies for configuration ':fooIncoming'.\r\n          > Cannot create variant 'fooOutgoingRenderedFiles' after dependency configuration ':fooOutgoing' has been resolved\r\n    ```\r\n5. In `buildSrc\/src\/main\/kotlin\/foo.gradle.kts` Replace 'register' with 'create':\r\n    \r\n    ```diff\r\n      private fun createOutgoingVariant(variant: String) =\r\n    -   outgoingProvider.get().outgoing.variants.register(\"${outgoingProvider.name}$variant\") {\r\n    +   outgoingProvider.get().outgoing.variants.create(\"${outgoingProvider.name}$variant\") {\r\n          attributes {\r\n            attribute(Usage.USAGE_ATTRIBUTE, objects.named(\"foo\"))\r\n            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(variant))\r\n          }\r\n        }\r\n    ```\r\n\r\n6. Run `.\/gradlew fooIncomingResolverTask` - no error message\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team, but this area of Gradle is currently not a focus one, so it might take a while before a fix is made.\r\n\r\n***\r\n\r\nThis issue needs to be investigated to decide whether to improve the error message is enough or if there is a bug in that area."],"labels":["a:bug","in:dependency-declarations","re:comprehensibility"]},{"title":"Public types for generated managed object instances are not properly reported","body":"### Current Behavior\n\nSee the conversations below:\r\n\r\nhttps:\/\/github.com\/gradle\/gradle\/pull\/27376#discussion_r1427387083\r\nhttps:\/\/github.com\/gradle\/gradle\/pull\/27376#discussion_r1427388064\r\n\r\nWhen generating error messages for missing methods, we get errors like:\r\n`Could not find method iDontExist() for arguments [foo-bar] on property 'dependencies' of type java.lang.Object.`\r\nAnd\r\n`Could not find method getAt() for arguments [[org.apache.commons:commons-lang3:3.11, com.google.guava:guava:30.1.1-jre]] on property 'dependencies.implementation' of type org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyCollector_Decorated.`\n\n### Expected Behavior\n\nThese two errors should instead resolve to:\r\n`Could not find method iDontExist() for arguments [foo-bar] on property 'dependencies' of type JvmComponentDependencies`\r\nAnd\r\n`Could not find method getAt() for arguments [[org.apache.commons:commons-lang3:3.11, com.google.guava:guava:30.1.1-jre]] on property 'dependencies.implementation' of type DependencyCollector.`\n\n### Context (optional)\n\nThe fix relates to the way we implement `getAsDynamicObject` [here](https:\/\/github.com\/gradle\/gradle\/blob\/b0bde4fd33e97bd774f909b5ab79403313827deb\/platforms\/core-configuration\/model-core\/src\/main\/java\/org\/gradle\/internal\/instantiation\/generator\/AsmBackedClassGenerator.java#L857C28-L888). We need to update both the extensible and non-extensible branch to properly track the public type. \r\n\r\nThis was partially done for the extensible case in a now-superseded PR:\r\nhttps:\/\/github.com\/gradle\/gradle\/pull\/25242\/files#diff-a135921792daf52c5d8258172d93c9c675260977ce57409ff39fba4513f1a975\r\nhttps:\/\/github.com\/gradle\/gradle\/pull\/25242\/files#diff-398ca316cacbd672db5f04e1f337a540ffe88f36c38176e02ac4f57ef85dc20b\r\n\n\n### Steps to Reproduce\n\nRun these integ tests:\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/e5909667cf96212f78c86bc9967b00df4c4cec7d\/subprojects\/core\/src\/integTest\/groovy\/org\/gradle\/api\/BuildScriptErrorIntegrationTest.groovy#L150-L169\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/e5909667cf96212f78c86bc9967b00df4c4cec7d\/platforms\/jvm\/testing-jvm\/src\/integTest\/groovy\/org\/gradle\/testing\/testsuites\/dependencies\/TestSuitesGroovyDSLDependenciesIntegrationTest.groovy#L992-L1022\n\n### Gradle version\n\n8.5\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":[],"labels":["a:bug","in:dependency-declarations"]},{"title":"Add Deprecation nagging for DefaultFileCollectionDependency#resolve","body":"### Issue type\n\nDeprecation\n\n### Problem description\n\nSelfResolvingDependency was deprecated here: https:\/\/github.com\/gradle\/gradle\/pull\/27420\r\nHowever, AGP uses FileCollectionDependency#resolve, and deprecation nagging was removed from the PR. \r\nThe issue that will remove AGP's usage of this deprecated API is here: https:\/\/issuetracker.google.com\/issues\/316294717\r\n\r\nWe should re-evaluate this issue once AGP releases a stable version that does not use this API\n\n### Context (optional)\n\n_No response_","comments":[],"labels":["a:chore","in:repository-declarations","a:documentation"]},{"title":"ComponentMetadataRule with virtual platform fails when resolving Configuration with isTransitive = false","body":"### Current Behavior\r\n\r\nComponentMetadataRule with virtual platform fails when resolving Configuration with isTransitive = false\r\n\r\n### Expected Behavior\r\n\r\nEither:\r\n\r\n* ComponentMetadataRule with virtual platform succeeds when resolving Configuration with isTransitive = false.\r\n* The behaviour is documented and explained, and the error message is updated to suggest constructive solutions.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\n1.  ```kotlin\r\n    \/\/ build.gradle.kts\r\n    \r\n    repositories {\r\n      mavenCentral()\r\n    }\r\n    \r\n    val dokkaPluginsClasspath: Configuration by project.configurations.creating {\r\n      isCanBeResolved = true\r\n      isCanBeConsumed = false\r\n      isVisible = false\r\n    \r\n      isTransitive = false\r\n    }\r\n    \r\n    @CacheableRule\r\n    abstract class DokkaVersionAlignmentRule : ComponentMetadataRule {\r\n      override fun execute(context: ComponentMetadataContext): Unit = with(context) {\r\n        if (details.id.group == \"org.jetbrains.dokka\") {\r\n          println(\"updating '${details.id}' to belong to virtual platform\")\r\n          details.belongsTo(\"org.jetbrains.dokka:dokka-virtual-platform:${details.id.version}\")\r\n        }\r\n      }\r\n    }\r\n    \r\n    dependencies {\r\n      components.all<DokkaVersionAlignmentRule>()\r\n    \r\n      dokkaPluginsClasspath(\"org.jetbrains.dokka:all-modules-page-plugin:+\")\r\n    \r\n      dokkaPluginsClasspath(enforcedPlatform(\"org.jetbrains.dokka:dokka-virtual-platform:1.9.0\"))\r\n    }\r\n    \r\n    val dokkaPluginsClasspathResolverTask by tasks.registering {\r\n      group = \"dokkaPlugins\"\r\n      val files= dokkaPluginsClasspath.incoming.artifactView { }.artifacts.resolvedArtifacts.map { it.map { it.file } }\r\n      inputs.files(files)\r\n      doLast {\r\n        println(\"got files \" + files.orNull?.joinToString { it.name })\r\n      }\r\n    }\r\n    ```\r\n\r\n2. Run `.\/gradlew dokkaPluginsClasspathResolverTask`\r\n\r\n3. Get an error:\r\n    ```\r\n    Execution failed for task ':dokkaPluginsClasspathResolverTask'.\r\n    > Could not resolve all artifacts for configuration ':dokkaPluginsClasspath'.\r\n       > Could not resolve org.jetbrains.dokka:dokka-virtual-platform:{strictly 1.9.0}.\r\n         Required by:\r\n             project :\r\n          > Cannot find a version of 'org.jetbrains.dokka:dokka-virtual-platform' that satisfies the version constraints:\r\n               Dependency path ':cmr-tests:unspecified' --> 'org.jetbrains.dokka:dokka-virtual-platform:{strictly 1.9.0}'\r\n               Constraint path ':cmr-tests:unspecified' --> 'org.jetbrains.dokka:all-modules-page-plugin:1.9.10' (runtimeElements) --> 'org.jetbrains.dokka:dokka-virtual-platform:1.9.10' because of the following reason: belongs to platform org.jetbrains.dokka:dokka-virtual-platform:1.9.10\r\n               Constraint path ':cmr-tests:unspecified' --> 'org.jetbrains.dokka:all-modules-page-plugin:1.9.10' (runtimeElements) --> 'org.jetbrains.dokka:dokka-virtual-platform:1.9.10' because of the following reason: belongs to platform org.jetbrains.dokka:dokka-virtual-platform:1.9.10\r\n    \r\n    * Try:\r\n    > Run with --stacktrace option to get the stack trace.\r\n    > Run with --info or --debug option to get more log output.\r\n    > Run with --scan to get full insights.\r\n    > Get more help at https:\/\/help.gradle.org.\r\n    BUILD FAILED in 239ms\r\n    1 actionable task: 1 executed\r\n    ```\r\n\r\n5. Comment out `isTransitive = false`\r\n\r\n6. Run `.\/gradlew dokkaPluginsClasspathResolverTask`\r\n\r\n7. The task succeeds but transitive dependencies are included.\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team, but this area of Gradle is currently not a focus one, so it might take a while before a fix is made.\r\n\r\n***\r\n\r\nThe error message should be improved to indicate that what you are trying to achieve is currently impossible and to provide some solutions. If you cut transitivity from a platform, you are not benefitting from it. The same can be applied to BOMs."],"labels":["a:bug","in:dependency-resolution","in:component-metadata-rules","re:comprehensibility"]},{"title":"In a ComponentMetadataRule `allVariants {}` does not run for all variants.","body":"### Current Behavior\r\n\r\nIn a ComponentMetadataRule `allVariants {}` does not run for all variants.\r\n\r\n### Expected Behavior\r\n\r\nEither:\r\n\r\n* In a ComponentMetadataRule `allVariants {}` runs for all variants.\r\n* The Javadoc, documentation, and function name is updated to explain why `allVariants {}` doesn't run for all variants.\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\n```kotlin\r\nplugins {\r\n  kotlin(\"multiplatform\") version \"1.9.21\"\r\n}\r\n\r\nrepositories {\r\n  mavenCentral()\r\n}\r\n\r\nkotlin {\r\n  jvm()\r\n  js()\r\n}\r\n\r\n\r\n@CacheableRule\r\nabstract class FooRule : ComponentMetadataRule {\r\n  override fun execute(context: ComponentMetadataContext): Unit = with(context) {\r\n    println(\"considering ${details.id} (attributes: ${context.details.attributes.joinToString()})\")\r\n\r\n    details.allVariants {\r\n\r\n      println(\"${details.id} has variant (attributes: ${attributes.joinToString()})\")\r\n    }\r\n  }\r\n\r\n  companion object {\r\n    internal fun AttributeContainer.joinToString(): String =\r\n      attributes.keySet().joinToString { \"$it=${attributes.getAttribute(it)}\" }\r\n  }\r\n}\r\n\r\ndependencies {\r\n  components {\r\n    withModule<FooRule>(\"org.jetbrains.kotlin:kotlin-stdlib\")\r\n  }\r\n}\r\n```\r\n\r\nrun `.\/gradlew dependencies`\r\n\r\nThe lines `considering org.jetbrains.kotlin:kotlin-stdlib:1.9.21` and `org.jetbrains.kotlin:kotlin-stdlib:1.9.21 has variant (attributes: )` are only printed once.\r\n\r\nHowever, kotlin-stdlib has 18 variants https:\/\/repo1.maven.org\/maven2\/org\/jetbrains\/kotlin\/kotlin-stdlib\/1.9.21\/kotlin-stdlib-1.9.21.module\r\n\r\nIt doesn't make sense that all 18 variants aren't considered.\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team, but this area of Gradle is currently not a focus one, so it might take a while before a fix is made.\r\n"],"labels":["a:bug","in:component-metadata-rules","has:reproducer"]},{"title":"Please document which things can get injected where automatically","body":"### Issue type\r\n\r\nMissing information\r\n\r\n### Problem description\r\n\r\nI needed the `Project` instance in a custom extension.\r\nI intended to give it to the `extensions.create` call as constructor parameter.\r\n\r\nFortunately I forgot to change the `create` call to learn that I neither need to supply it manually, nor need any `@Inject` anywhere.\r\n\r\nIt just worked.\r\n\r\nWould be nice to have in the docs somewhere the information which things can get injected where automagically.\r\n\r\n### Page with the problem\r\n\r\nhttps:\/\/docs.gradle.org\/current\/userguide\/custom_gradle_types.html","comments":["Sorry that you're having trouble with Gradle!\r\n\r\nCan you provide a sample script with a more detailed explanation of what happens and what you expect?","I'm not sure what you are asking for @ov7a.\r\nWhat I expect is some added documentation about what you do not need to inject manually where, but get automatically as described.\r\nBut as a short example, I accidentally had something like this working:\r\n```kts\r\nabstract class Foo(val project: Project) : ExtensionAware\r\nprintln(extensions.create<Foo>(\"foo\").project)\r\n```\r\nwhile I thought I need to do it like\r\n```kts\r\nabstract class Bar @Inject constructor(val project: Project) : ExtensionAware\r\nprintln(extensions.create<Bar>(\"bar\", project).project)\r\n```\r\nWith `objects.newInstance` indeed only the second version works, probably as in the extension case it can be determined which project the context is.\r\n\r\nBut maybe there is more that works automagically, and it should be documented. (Even if not more, the `project` for extensions case should be). Unless of course, it is a bug that it works in the first place, then that should probably be deprecated.","@Vampire Thanks for the samples! This is exactly what we wanted to confirm.\r\n\r\n***\r\n\r\nThis issue needs a decision from the team responsible for that area. They have been informed. Response time may vary.\r\n\r\n***\r\n\r\n@gradle\/bt-configuration Is it a documentation-only issue or is it a bug?","Thank you for your interest in Gradle!\r\n\r\nThis is a valid documentation issue that we will address.\r\n"],"labels":["in:configuration-model","a:documentation"]},{"title":"Cache expiry: should be able to specify a size limit.","body":"### Expected Behavior\n\nIt should be possible to expire the caches in GRADLE_USER_HOME until they're collectively below - say - 60G\r\n\r\nI can write a shell script that tweaks the 'expire after x days' parameters and re-runs the cache expiry until it's below a certain size threshold, but that's slow and incremental.\r\n\r\nI know there's a balance between expiring the remote and local caches - we'd probably want the ages to have a simple cap applied, as if it were running 'min(cap, configured-value)' because it's easy enough to retrieve remote data. Others might want local caches expired first, if remote retrieval is more expensive for them.\r\n\r\nIt would also be good if Gradle could mention somewhere what its cache hit\/miss rate is, so we could monitor that and look at increasing per-agent disk on the build servers.\n\n### Current Behavior (optional)\n\nI can only set 'expire after x days inactive' here: https:\/\/docs.gradle.org\/current\/userguide\/directory_layout.html\n\n### Context\n\nWe have several build agents on our build servers. The recent upgrade from 8.1.1 to 8.2.1 abruptly increased disk usage, and brought the cache directories (~100G) under scrutiny.\r\n\r\nAs mentioned, we can reduce the expiry after x days unaccessed, but that still potentially allows the caches to grow too large. It takes a while to source hard drives for all the servers and have them fitted.\r\n\r\nIt also highlighted that the old 8.1.1 cache was left behind - it would be nice to have a warning printed in the logs to that effect.","comments":["Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team, but this area of Gradle is currently not in focus. It might take a while before it gets implemented.\r\n","We could do this when we rework the local cache based on H2."],"labels":["in:wrapper","in:daemon","in:logging","a:feature","in:build-cache","in:dependency-cache"]},{"title":"Sync task with Provider as source reports NO-SOURCE when using configuration cache","body":"### Current Behavior\n\nOn Gradle 8.4 when configuring the source of a Sync task with a `Provider<String>`, the task reports `NO-SOURCE` when run with `--configuration-cache` and no files are copied. Without the configuration cache enabled, the task runs as expected.\n\n### Expected Behavior\n\nConfiguring the source of a Sync task with a `Provider<String>` ([as documented](https:\/\/docs.gradle.org\/8.4\/dsl\/org.gradle.api.Project.html#org.gradle.api.Project:files(java.lang.Object[]))) should work with the configuration cache enabled.\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\nI distilled the problem down to this simple project:\r\n\r\n[gradle-cfg-cache-test.zip](https:\/\/github.com\/gradle\/gradle\/files\/13666622\/gradle-cfg-cache-test.zip)\r\n\r\nReproduce with\r\n```shell\r\n.\/gradlew --configuration-cache some-project:copyFiles\r\n```\r\n\r\nI upgraded that project to Gradle 8.5 (latest version as of 12\/13) and reproduced there as well.\n\n### Gradle version\n\n8.4\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:bug","in:configuration-cache","in:file-tasks","has:reproducer","re:reliability"]},{"title":"Conflict resolution preferring external 1.1.0-beta02 over project 1.1.0-beta03","body":"### Current Behavior\r\n\r\nWe have a project (`:viewpager2:viewpager2`) with version `1.1.0-beta03` that depends on an external module dependency (`androidx.recyclerview:recyclerview`) which declares a constraint on the `androidx.viewpager2:viewpager2` external module dependency, requesting that it have version `1.1.0-beta02`, and I'm finding in this case that conflict resolution prefers `androidx.viewpager2:viewpager2:1.1.0-beta02` over the project (`:viewpager2:viewpager2`), resulting in the project depending on an older artifact that it previously published\r\n\r\n### Expected Behavior\r\n\r\nI think it would be nice if the project (`:viewpager2:viewpager2`) having version `1.1.0-beta03` could be used as the result of the conflict resolution rather than the external module having lower version of `1.1.0-beta02`.\r\n\r\nI notice that if I change the project version to `1.1.2-beta03`, the project is used as the conflict resolution result\r\n\r\n### Context (optional)\r\n\r\nThis caused some confusion when updating AndroidX to Kotlin 2.0.0-beta01 ( https:\/\/r.android.com\/2833535 ) because it resulted in some files files being missing, see https:\/\/youtrack.jetbrains.com\/issue\/KT-63634\/Test-compilation-is-not-up-to-date-on-the-2nd-run#focus=Comments-27-8566967.0-0\r\n\r\n### Steps to Reproduce\r\n\r\nSee https:\/\/github.com\/mathjeff\/gradle-samples-2\/tree\/main\/conflict-resolution-preferring-prebuilt\r\n\r\n### Gradle version\r\n\r\n8.5\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n_No response_","comments":["The symptoms looks similar to https:\/\/github.com\/gradle\/gradle\/issues\/19882 although that one is resolved so this one probably has a different cause","Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team, but this area of Gradle is currently not a focus one, so it might take a while before a fix is made.\r\n","I found some simplifications to the repro case. Most notably, I've found that it isn't necessary for there to be a dependency constraint; a dependency also works too: https:\/\/github.com\/mathjeff\/gradle-samples-2\/commit\/78a7c3f53539b9e3855f13c4200daf5213e8f0be","I'm starting to look into this and I've found that:\r\n\r\n  If the external module has version `1.1.0-beta02` and the project has version `1.1.0-beta03`, the problem reproduces\r\n  If the external module has version `1.1.0.beta.02` and the project has version `1.1.0.beta.03`, the problem doesn't reproduce.\r\n\r\n  This seems to be because separators other than \".\" are considered to [terminate baseVersion]( https:\/\/github.com\/gradle\/gradle\/blob\/v8.5.0\/platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/ivyservice\/ivyresolve\/strategy\/VersionParser.java#L51) which [affects the conflict resolution](https:\/\/github.com\/gradle\/gradle\/blob\/v8.5.0\/platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/ivyservice\/resolveengine\/LatestModuleConflictResolver.java#L43).\r\n\r\nThen when I add some logging [here](https:\/\/github.com\/gradle\/gradle\/blob\/v8.5.0\/platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/ivyservice\/resolveengine\/LatestModuleConflictResolver.java#L80) , I find that for the project dependency, hasReleaseStatus(metaData) returns false but for external module dependency, hasReleaseStatus(metaData) returns true.\r\n\r\nI think this might mean:\r\n* One possible solution could be to make hasReleaseStatus(metaData) return true for this project too\r\n* Another possible solution could be to change the way that baseVersion is computed\r\n\r\nIf anybody has any ideas that would be great!\r\n","As a workaround in the meanwhile, we might do `project.configurations.configureEach { configuration -> configuration.resolutionStrategy.preferProjectModules() }`: https:\/\/r.android.com\/2914302"],"labels":["a:bug","in:dependency-resolution","has:reproducer"]},{"title":"Make is clear that adding a dependency to the checkstyle configuration causes the default com.puppycrawl.tools:checkstyle dependency to back off","body":"### Issue type\n\nMissing information\n\n### Problem description\n\nThe [documentation for the `checkstyle` configuration](https:\/\/docs.gradle.org\/current\/userguide\/checkstyle_plugin.html#sec:checkstyle_dependency_management) says that it contains \"the Checkstyle libraries to use\". By default, it contains a dependency on `com.puppycrawl.tools:checkstyle` with a version derived from the Checkstyle extension's tool version. If another dependency is added to this configuration, the `com.puppycrawl.tools:checkstyle` dependency is lost. The documentation does not make this clear and does not explain how to add a dependency to the `checkstyle` configuration while also retaining a dependency on `com.puppycrawl.tools:checkstyle`.\n\n### Context (optional)\n\nI was trying to add some extensions to the classpath that's used to run Checkstyle. These extensions are an addition to rather than a replacement for `com.puppycrawl.tools:checkstyle`. \n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/current\/userguide\/checkstyle_plugin.html","comments":["Thank you for your interest in Gradle!\r\n\r\nThis is a valid documentation issue that we will address.\r\n\r\n***\r\n\r\nThe more advanced solution might be to have a way to refer to the default checkstyle dependency without the need to figure out the coordinates.","Yes, that would be nice. Even nicer if configuring the tool version continued to have an effect."],"labels":["in:checkstyle-plugin","a:documentation"]},{"title":"Option-annotation should support providing a description for an autogenerated opposite flag for Boolean options","body":"Currently, if you introduce a boolean option on a task like `--some-name`, Gradle automatically generated an opposite option `--no-some-name` to provide users more control while reducing boilerplate for task authors.\r\n\r\nHowever, when an opposite option is generated, it gets an automatic description, and looks like this in the help output:\r\n```\r\n--no-some-name     Opposite option of --some-name.\r\n```\r\n\r\nThis might be confusing for users, and in some cases it is better to provide a custom description for the opposite option as well.\r\n\r\nNote that if a task originally has a `--no-another` option, then an opposite option would be `--another`, and this case should also be supported.","comments":["Relates to:\r\n* https:\/\/github.com\/gradle\/gradle\/pull\/25665","Would you be interested in providing a PR?"],"labels":["a:chore","in:console","in:writing-tasks"]},{"title":"Capture scripts classpath as Configuration Cache fingerprint","body":"Currently, we only capture the script file itself:\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/adf5d7faec2470b72b8ca6b51cc49b261607e322\/platforms\/core-configuration\/configuration-cache\/src\/main\/kotlin\/org\/gradle\/configurationcache\/fingerprint\/ConfigurationCacheFingerprintWriter.kt#L479-L483\r\n\r\nHowever, scripts implicitly depend on (at least) the script classpath of the parent projects.\r\n\r\nThis means that currently if only the classpath of the parent project changes, intermediate models for the project are still considered valid, potentially resulting in a false cache hit.","comments":[],"labels":["a:chore","@configuration-cache","in:isolated-projects"]},{"title":"Add a `--verbose` option to `gradle --status`","body":"### Expected Behavior\n\nI'd like a variant of `gradle --status` that provides more verbose output, including things like `JAVA_HOME`, `daemonOpts`, Gradle installation location, and anything else that importantly characterizes a running Gradle instance. For example, here's some output I manually formatted from `gradle build --info` that would be nice to have in `gradle --status`:\r\n\r\n```\r\nActual: DefaultDaemonContext[\r\n    uid=3d3862b4-b9d2-44d6-ba1c-8a5d1cc9ea56,\r\n    javaHome=\/Library\/Java\/JavaVirtualMachines\/amazon-corretto-11.jdk\/Contents\/Home,\r\n    daemonRegistryDir=\/Users\/ryansch\/.gradle\/daemon,\r\n    pid=54274,\r\n    idleTimeout=1080000000,\r\n    priority=NORMAL,\r\n    applyInstrumentationAgent=true,\r\n    daemonOpts=--add-opens=java.base\/java.util=ALL-UNNAMED,\r\n               --add-opens=java.base\/java.lang=ALL-UNNAMED,\r\n               --add-opens=java.base\/java.lang.invoke=ALL-UNNAMED,\r\n               --add-opens=java.prefs\/java.util.prefs=ALL-UNNAMED,\r\n               --add-opens=java.base\/java.nio.charset=ALL-UNNAMED,\r\n               --add-opens=java.base\/java.net=ALL-UNNAMED,\r\n               --add-opens=java.base\/java.util.concurrent.atomic=ALL-UNNAMED,\r\n               -XX:MaxMetaspaceSize=384m,\r\n               -XX:+HeapDumpOnOutOfMemoryError,\r\n               -Xms256m,\r\n               -Xmx512m,\r\n               -Dfile.encoding=UTF-8,\r\n               -Duser.country=US,\r\n               -Duser.language=en,\r\n               -Duser.variant\r\n]\r\n```\n\n### Current Behavior (optional)\n\nThe current output just includes pid, status, and info (typically a version number, which I believe is redundant, since only the daemons for the current version are displayed):\r\n\r\n```\r\n   PID STATUS   INFO\r\n 54274 IDLE     8.5\r\n 54947 IDLE     8.5\r\n 11509 STOPPED  (stop command received)\r\n 12332 STOPPED  (stop command received)\r\n 18520 STOPPED  (stop command received)\r\n 47539 STOPPED  (stop command received)\r\n 52175 STOPPED  (stop command received)\r\n 52864 STOPPED  (stop command received)\r\n 53124 STOPPED  (stop command received)\r\n 53774 STOPPED  (stop command received)\r\n 54009 STOPPED  (stop command received)\r\n\r\nOnly Daemons for the current Gradle version are displayed. For more on this, please refer to\r\nhttps:\/\/docs.gradle.org\/8.5\/userguide\/gradle_daemon.html#sec:status in the Gradle\r\ndocumentation.\r\n```\n\n### Context\n\nI've been investigating a bug involving the various ways Gradle instances are launched and Gradle daemons are reused. I've had to awkwardly combine a number of different commands and flags to try to get better visibility into what is running and why daemon reuse does or does not occur. The Gradle [documentation](https:\/\/docs.gradle.org\/8.5\/userguide\/gradle_daemon.html#find_all_daemons) actually suggests using the `jps` command from the JDK, which is sort of neat (I'd never heard of it) but doesn't highlight Gradle-specific information or even the `JAVA_HOME`:\r\n\r\n\r\n```\r\n54947 GradleDaemon --add-opens=java.base\/java.util=ALL-UNNAMED\r\n--add-opens=java.base\/java.lang=ALL-UNNAMED\r\n--add-opens=java.base\/java.lang.invoke=ALL-UNNAMED\r\n--add-opens=java.prefs\/java.util.prefs=ALL-UNNAMED\r\n--add-opens=java.base\/java.nio.charset=ALL-UNNAMED\r\n--add-opens=java.base\/java.net=ALL-UNNAMED\r\n--add-opens=java.base\/java.util.concurrent.atomic=ALL-UNNAMED -Xmx4g\r\n-Dfile.encoding=UTF-8 -Duser.country=US -Duser.language=en -Duser.variant\r\n-javaagent:\/Users\/ryansch\/.gradle\/wrapper\/dists\/gradle-8.5-bin\/5t9huq95ubn472n8rpzujfbqh\/gradle-8.5\/lib\/agents\/gradle-instrumentation-agent-8.5.jar\r\n```","comments":["Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team, but this area of Gradle is currently not in focus. It might take a while before it gets implemented.\r\n"],"labels":["in:daemon","a:feature","re:comprehensibility"]},{"title":"It's not possible to set '-Dline.separator=\\n' via 'forkOptions.jvmArgs' ","body":"### Current Behavior\n\nSetting `-Dline.separator=\\n` for a forked compiler sets `line.separator` to an empty value leading to an `IndexOutOfBounds` exception in Gradle's internals.\r\n\r\n```\r\ntasks.withType<JavaCompile>().configureEach {\r\n    options.isFork = true\r\n    options.compilerArgs = listOf(\"-verbose\") \/\/ let the compiler log something\r\n    options.forkOptions.jvmArgs = listOf(\"-Dline.separator=\\n\")\r\n}\r\n```\r\n\r\nThe problem is the `trim()` here that removes newlines or whitespaces that might be valid values for a system property:\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/master\/platforms\/jvm\/language-jvm\/src\/main\/java\/org\/gradle\/api\/tasks\/compile\/BaseForkOptions.java#L94\r\n\r\nI think the `trim()` should be removed.\n\n### Expected Behavior\n\nThe above configuration sets `line.separator` in the compiler daemon process to `\\n`.\n\n### Context (optional)\n\nI would like to set the default line ending for the compiler, and the _annotation processors_ it runs, to a reproducible (platform independent) value. To circumvent issues like this one: https:\/\/github.com\/google\/auto\/issues\/1656\n\n### Steps to Reproduce\n\n- Create a Gradle project with `plugins { id(\"java-library\") }` and  the above configuration code\r\n- Add one `.java` source file\r\n- run: `gradle compileJava`\n\n### Gradle version\n\n8.5\n\n### Build scan URL (optional)\n\nhttps:\/\/scans.gradle.com\/s\/mb7daw3qcbmuw\n\n### Your Environment (optional)\n\n_No response_","comments":["Sorry that you having trouble with Gradle!\r\n\r\nCan you please try escaping the `\\n` part?\r\n```\r\nlistOf(\"-Dline.separator=\\\\n\") \r\n```","Escaping is not working here. The characters are passed as they are to the new JVM process. Using `\\\\n` will lead to the two characters `\\` and `n` being used as line separator.","Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team, but this area of Gradle is currently not a focus one, so it might take a while before a fix is made.\r\n"],"labels":["a:bug","in:java-plugins"]},{"title":"Playback model stream on isolated projects build action cache hit","body":"#27095 introduces model streaming. Currently, any streamed models from a previous run would be lost on build action cache hits.","comments":[],"labels":["a:chore","in:isolated-projects"]},{"title":"Gradle TestLauncher doesn't provide --tests options into Gradle start parameters.","body":"### Current Behavior\n\nResult for the project from `steps to reproduce`.\r\n```\r\n!!! isSingletest = false\r\n!!! taskRequests = [[:test]]\r\n```\n\n### Expected Behavior\n\nResult for the project from `steps to reproduce`.\r\n```\r\n!!! isSingletest = true\r\n!!! taskRequests = [[:test, --tests, MainKtTest.myTest]]\r\n```\n\n### Context (optional)\n\nIntelliJ Idea 2023.3 provides integration with Gradle tests by TestLauncher. Our user found this issue during their development routine.\r\nhttps:\/\/youtrack.jetbrains.com\/issue\/IDEA-340445\/missing-gradle-tests-arguments\n\n### Steps to Reproduce\n\n1. you can use this sample repo <https:\/\/github.com\/guai\/missing-gradle-args>\r\n2. there are following lines in the gradle build script:\r\n\r\n```kotlin\r\nval isSingleTest =\r\n    project.gradle.startParameter.taskRequests.any { it.args.any { arg -> arg == \"--tests\" || arg.startsWith(\"--tests=\") } }\r\n\r\nlogger.lifecycle(\"!!! isSingletest = $isSingleTest\")\r\nlogger.lifecycle(\"!!! taskRequests = ${project.gradle.startParameter.taskRequests.map { it.args }}\")\r\n```\r\n\r\n3. goto MainKtTest#myTest and run it via clicking on green triangle on the gutter\n\n### Gradle version\n\n8.4\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team and is prioritized by them.\r\n"],"labels":["a:bug","in:tooling-api"]},{"title":"Deprecate case sensitive project path matching","body":"### Expected Behavior\r\n\r\nA warning similar to\r\n> Configuring project ':module2' without an existing directory is deprecated. The configured projectDirectory '\/home\/runner\/work\/repro-gradle\/repro-gradle\/module2' does not exist, can't be written to or is not a directory. This behavior has been deprecated.\r\n\r\nbut for case-insensitive included subprojects.\r\n\r\n**On all operating systems!**\r\n\r\n### Current Behavior (optional)\r\n\r\n`gradlew build` ignores modules which have mismatching case on Linux.\r\n\r\nDisk:\r\n * rootProject\r\n   * `module1`\r\n   * `Module2`\r\n\r\nSettings:\r\n```\r\ninclude(\":module1\")\r\ninclude(\":module2\")\r\n```\r\n\r\nRepro:\r\n * https:\/\/github.com\/TWiStErRob\/repros\/tree\/main\/gradle\/settings-case_sensitive_project_path\r\n * Build it on different OSs with `gradlew build`  \r\n   Alternatively: push up the folder into a GitHub repo and the CI.yml workflow will do this. (That's where the scans below came from.)\r\n\r\n`gradlew build`:\r\n * Mac: executes `module1` and `module2`: https:\/\/gradle.com\/s\/h4zbt4bn7qbyo\r\n * Windows: executes `module1` and `module2`: https:\/\/gradle.com\/s\/xgyfujck6xpyy\r\n * Linux: executes `module1` and \ud83d\ude2e: https:\/\/gradle.com\/s\/3iygws2bvlfqm (specifically note [projects](https:\/\/scans.gradle.com\/s\/3iygws2bvlfqm\/projects) and [executed tasks](https:\/\/scans.gradle.com\/s\/3iygws2bvlfqm\/timeline))\r\n\r\n(As an aside, the project I discovered this in had Gradle 8.2, which means I did not get this deprecation warning in Linux, and was totally baffled.)\r\n\r\n### Context\r\n\r\nBuilding on @liutikas' feature request: https:\/\/github.com\/gradle\/gradle\/issues\/25531\r\n\r\n---\r\n\r\nTrigger: I was developing on Windows\/Mac and the project worked and built perfectly. I pushed it up to CI on GHA and many modules were not building because they were located in a submodule where the include\/file system case differed, this took me a few days to figure out.","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team, but this area of Gradle is currently not a focus one, so it might take a while before a fix is made.\r\n","Mainly playing devil's advocate, as I don't think it is a too good idea to do so, but I think such a deprecation is questionable.\r\n\r\nIf people are used to case-sensitive file systems and everyone working with the build is working with case-sensitive file system anyway,\r\nthey might want to have `:foo` in `\/foo` and `:Foo` in `\/Foo` which would not be possible anymore with this proposal, except if it is supported in a way to manually configure this still.\r\n\r\nI don't think it is a good idea to have such a situation, but this is a typical religious war of whether it is a good idea to have things on filesystem just differing in case. :slightly_smiling_face:","Gradle could match the project name with the name on disk case-sensitively and warn if the case does not match.\r\nThereby still supporting `:foo` in `\/foo` and `:Foo` in `\/Foo` without warning if your filesystem is case-sensitive.\r\nWhile also issuing a deprecation warning if the situation were encountered in a case-insensitive filesystem where both paths would end up pointing to the same on disk directory and cause issues. "],"labels":["a:chore","in:multi-projects","in:settings-script","re:comprehensibility"]},{"title":"Configuration.getElements() eagerly triggers artifact transforms","body":"### Current Behavior\n\nUsing `Configuration.getElements()` to define lazy mapping functions on to-be-produced artifacts should not trigger artifact transforms. Such transforms run too early for locally built artifacts and can produce a wrong result or an error. \n\n### Expected Behavior\n\n`Configuration.getElements()` does not trigger artifact transforms.\n\n### Context (optional)\n\n_No response_\n\n### Steps to Reproduce\n\n\r\n### Reproducer project\r\n\r\n**settings.gradle.kts**\r\n```\r\ninclude(\"app\", \"lib\")\r\n```\r\n\r\n**lib\/build.gradle.kts**\r\n```\r\nplugins { id(\"java-library\") }\r\n```\r\n\r\n**app\/build.gradle.kts**\r\n```\r\nplugins { id(\"java-library\") }\r\n\r\nabstract class IdTransform : TransformAction<TransformParameters.None> {\r\n    @get:InputArtifact\r\n    abstract val inputArtifact : Provider<FileSystemLocation>\r\n    override fun transform(outputs: TransformOutputs) { outputs.file(inputArtifact) }\r\n}\r\nval transformed = Attribute.of(\"transformed\", Boolean::class.javaObjectType)\r\nconfigurations.runtimeClasspath { attributes.attribute(transformed, true) }\r\ndependencies.artifactTypes.maybeCreate(\"jar\").attributes.attribute(transformed, false)\r\ndependencies.registerTransform(IdTransform::class) {\r\n    from.attributes.attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, \"jar\").attribute(transformed, false)\r\n    to.attributes.attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, \"jar\").attribute(transformed, true)\r\n}\r\n\r\ndependencies { implementation(project(\":lib\")) }\r\n\r\ntasks.register<Sync>(\"copyRT\") {\r\n    from(configurations.runtimeClasspath.get().elements)\r\n    destinationDir = layout.buildDirectory.dir(\"out\").get().asFile\r\n}\r\n```\r\n\r\nRun: `gradle clean :app:copyRT`\r\n\r\nTransform triggers for non existing `lib\/build\/libs\/lib.jar`\n\n### Gradle version\n\n8.5 (reproducible with other 8.x versions and 7.6)\n\n### Build scan URL (optional)\n\nhttps:\/\/scans.gradle.com\/s\/ktwgohxcen6zq\n\n### Your Environment (optional)\n\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team, but this area of Gradle is currently not a focus one, so it might take a while before a fix is made."],"labels":["a:bug","in:dependency-declarations","in:scheduler","has:reproducer"]},{"title":"Artifact transform node execution build operations should not be fired for classpath instrumentation","body":"## Context:\r\n\r\nAfter https:\/\/github.com\/gradle\/gradle\/pull\/26045, Gradle now fires transform node execution build operations when instrumenting build logic JARs. Those operations should only be fired when the node is part of the execution graph, so we can obtain information about its dependencies and the project dependencies will have been scheduled and executed as well.\r\nThe way Gradle now uses these transform nodes for build operations make sure that the project dependencies have been built. So running the artifact transform is not a problem.\r\n\r\n## Current behavior:\r\n\r\nGradle fires the build operation [here](https:\/\/github.com\/gradle\/gradle\/blob\/f10ab277618d00307763d63491b419d3b99a2fca\/platforms\/software\/dependency-management\/src\/main\/java\/org\/gradle\/api\/internal\/artifacts\/transform\/TransformStepNode.java#L357-L364) since it doesn't use the execution graph to schedule it in an ad-hoc way, as if a task would resolve such an artifact view without declaring it as a dependency. As a consequence, the executions show up in the build scan, though without having a parent node since we hide the unscheduled planned transform step in the timeline:\r\n<img width=\"1609\" alt=\"image\" src=\"https:\/\/github.com\/gradle\/gradle\/assets\/423186\/d7deeaf3-4e3d-44e7-9fa4-77461b81dd40\">\r\n\r\n## Expected behavior:\r\n\r\nGradle does not fire the planned transform step node operation, only the execution operation. It should declare that in this case it is safe to run project transforms unscheduled.","comments":[],"labels":["in:build-scan","in:artifact-transforms"]},{"title":"Introduce smoke test fixing the amount of IP violations observed from Sync with IDEA","body":"- [x] Extract AS provisioning machinery to separate `studio-provisioning-plugin`, and use it `performance-test-plugin` #27499\n- [x] Create dedicated `smoke-ide-test` subproject project #27515 \n- [x] Add `smokeIdeTests` run on CI #27515 \n- [ ] Migrate `studio-provisioning-plugin` to [intellij-ide-starter](https:\/\/github.com\/JetBrains\/intellij-ide-starter\/tree\/master)\n- [ ] Add provisioning of IDEA to `studio-provisioning-plugin` #27553 ","comments":[],"labels":["a:chore","in:isolated-projects"]},{"title":"Support fetching Idea models for Scala projects with Isolated Projects","body":"Examples of current violations are mostly related to the `IdeaScalaConfigurer`\r\n\r\n(1) https:\/\/github.com\/gradle\/gradle\/blob\/6ca2a07a039037459da0f7c738729cf844d39d51\/platforms\/ide\/ide-plugins\/src\/main\/java\/org\/gradle\/plugins\/ide\/idea\/IdeaPlugin.java#L515\r\n\r\n(2) https:\/\/github.com\/gradle\/gradle\/blob\/96280d6058595297a7042bd72b15614fb8b56542\/platforms\/ide\/ide-plugins\/src\/main\/java\/org\/gradle\/plugins\/ide\/idea\/internal\/IdeaScalaConfigurer.java#L73\r\n\r\n\r\nSee an aspirational test in the `IsolatedProjectsToolingApiIdeaProjectIntegrationTest`","comments":[],"labels":["@configuration-cache","in:isolated-projects"]},{"title":"Make AndroidStudio init script compatible with Isolated Projects","body":null,"comments":["Blocked on #22514 "],"labels":["a:feature","in:ide","in:isolated-projects"]},{"title":"Support file system watching on CentOS Stream 8 and 9","body":"Gradle 8.5 [supports file system watching for CentOS 8](https:\/\/docs.gradle.org\/8.5\/userguide\/file_system_watching.html#supported_operating_systems) and is tested with it.\r\n\r\nHowever, according to https:\/\/www.centos.org\/download\/, CentOS 8 has been discontinued December 31, 2022. CentOS 7 is still supported until Jun 30th, 2024, though it lacks the functionality for file system watching, so we can't support it. So essentially there's no officially supported version of CentOS that Gradle also supports.\r\n\r\nThere's also CentOS _Stream_ 8, that is officially supported until May 31st, 2024, another six months at the time of writing.\r\n\r\nAnd then there's CentOS _Stream_ 9 that will be officially supported for the foreseeable future.\r\n\r\nWe should do a few things:\r\n\r\n* Instead of CentOS 8 we should test with CentOS Stream 8 on CI.\r\n* We should also run tests on CI with CentOS Stream 9.\r\n* We should update the documentation to say that CentOS Stream 8 & 9 are supported, and remove CentOS 8.\r\n* After May 31st, 2024, decommission our testing with CentOS Stream 8.\r\n* When CentOS Stream 10 comes out, start running our tests with that, too.\r\n\r\n---\r\ncc: @gradle\/bt-execution","comments":["First of all, we've already been testing on CentOS stream 8: https:\/\/github.com\/gradle\/dev-infrastructure\/commit\/b8dfeff99fd765f15790312703d8d0593bf3e399\r\n\r\nThe planned timeline LGTM, I don't see anything blocking us upgrading to CentOS stream 9 now.","Related: \r\n\r\n- https:\/\/github.com\/gradle\/gradle\/pull\/28246","Related:\r\n\r\n- https:\/\/github.com\/gradle\/gradle-private\/issues\/4133"],"labels":["a:chore","in:virtual-file-system"]},{"title":"Subprocesses of Gradle daemon spawned through ProcessBuilder on macOS inherit empty environment variables from previous daemon calls","body":"### Current Behavior\r\n\r\nGradle daemon passes empty values for environment variables from previous invocations when using ProcessBuilder API to spawn a subprocess. For example, given a `build.gradle.kts` file:\r\n```Kotlin\r\ntasks.register(\"printenv\") {\r\n    doLast {\r\n        val builder = ProcessBuilder(listOf(\"env\")).redirectErrorStream(true)\r\n        val process = builder.start()\r\n        process.inputStream.transferTo(System.out)\r\n        process.waitFor()\r\n    }\r\n}\r\n```\r\n\r\nGradle produces the following behavior:\r\n```bash\r\n$ A_FOO=1 gradle --daemon printenv | grep FOO\r\nA_FOO=1\r\n\r\n$ B_FOO=1 gradle --daemon printenv | grep FOO\r\nA_FOO=\r\nB_FOO=1\r\n```\r\n\r\n### Expected Behavior\r\n\r\nGradle daemon unsets environment variables from previous invocations.\r\n\r\n### Context (optional)\r\n\r\nI encountered this issue running `xcodebuild` through Gradle. \r\nOne of the steps `xcodebuild` executes is a `tapi` tool which checks for the presence of `_DEPLOYMENT_TARGET` environment variables. For example, on macOS with Xcode installed the issue could be reproduced with:\r\n```bash\r\nIPHONEOS_DEPLOYMENT_TARGET='' MACOSX_DEPLOYMENT_TARGET='' xcrun tapi stubify\r\nerror: conflicting deployment targets, both 'MACOSX_DEPLOYMENT_TARGET' and 'IPHONEOS_DEPLOYMENT_TARGET' are present in environment\r\n```\r\n\r\nI ran `xcodebuild` through Gradle first to build for macOS and a subsequent build for iOS failed with the error.\r\n\r\nThe root cause seems to be [this call](https:\/\/github.com\/gradle\/native-platform\/blob\/015924cd57d19370b062bd3e957b6721f4b5a8a6\/native-platform\/src\/main\/cpp\/posix.cpp#L335). I tried rebuilding Gradle with `unsetenv` call and ProcessBuilder started behaving as expected.\r\n\r\n### Steps to Reproduce\r\n\r\nPlease see the template with the reproduction: https:\/\/github.com\/abdulowork\/process-builder-environment\r\n\r\nThe issue is visible in this run: https:\/\/github.com\/abdulowork\/process-builder-environment\/actions\/runs\/7158192072\/job\/19489970036\r\n1. In the first Gradle step the `A_FOO` environment variable is passed and can be seen in the `env` output\r\n2. This environment variable remains empty in the second step\r\n3. Fortunately this issue has an easy, but not so obvious workaround: calling `ProcessBuilder.environment()`. This is illustrated in the third step.\r\n\r\n### Gradle version\r\n\r\nv8.6.0-M1\r\n\r\n### Build scan URL (optional)\r\n\r\n_No response_\r\n\r\n### Your Environment (optional)\r\n\r\n* macOS 13.5.2\r\n* Xcode 15.0","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team, but the existence of a workaround makes it non-critical, so it might take a while before a fix is made.\r\n"],"labels":["in:daemon","a:bug","has:reproducer","has:workaround"]},{"title":"Help flag should show task help when task is specified","body":"### Expected behavior\r\n\r\nThe following invocation should produce help for the `init` task (or any specified task)\r\n```\r\n$ gradle init --help\r\n```\r\n\r\nThis is a common pattern in almost all command line tools.\r\n\r\n### Current behavior\r\n\r\nThe task is ignored, and general \"Gradle help\" is shown. Additionally, no actionable guidence is provided as to actually how to get the help for the specified task.\r\n\r\nThe \"correct\" way current is to use a \"help\" task and specify the task for which help is needed:\r\n```\r\n$ gradle help --task init\r\n```\r\n\r\nThis is virtually non-discoverable, unless the user already knows about this. And even then, it is awkward, because it contradicts help-requesting practices of almost all CLI tools.\r\n\r\n### Suggestion\r\n\r\nWe could make the global `--help` flag aware of the presense of the task selectors and automatically traslate the command into the one requesting help for the specified task.\r\n","comments":[],"labels":["in:build-init-plugin","a:feature","in:invoking-gradle"]},{"title":"Let `GenerateKotlinExtensionsForGradleApi` properly handle nested classes","body":"By adjusting `FunctionsSinceRepository` to also look for `@since` annotations in nested classes and adding nested class methods to the parameter name index.\r\n\r\n### Context\r\n\r\nI discovered this limitation while spiking a new API that involved a nested public interface.\r\n\r\n### Reviewing cheatsheet\r\n\r\nBefore merging the PR, comments starting with \r\n- \u274c \u2753**must** be fixed\r\n- \ud83e\udd14 \ud83d\udc85 **should** be fixed\r\n- \ud83d\udcad **may** be fixed\r\n- \ud83c\udf89 celebrate happy things\r\n","comments":["@bot-gradle test","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"7a4e9c829dc8750bc6acdaf6ccb8384fdb78ae18\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=7a4e9c829dc8750bc6acdaf6ccb8384fdb78ae18) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=75700458)","@gradle\/bt-kotlin-dsl-maintainers any feedback?","@bamboo this is looking good. Please rebase on `master`, the binary compatibility check should show what this adds to the generated extensions.","@bot-gradle test","<!-- {\"replyTargetCommentId\":null,\"teamCityBuildId\":null,\"teamCityBuildHeadRef\":\"1cda75e0e2365c7a10f9c49dc64f94151f94938b\",\"teamCityBuildStatus\":\"PENDING\",\"replyApproveReviewId\":null} -->\nI've triggered the following builds for you. Click [here](https:\/\/ge.gradle.org\/scans?search.buildOutcome=failure&amp;search.names=gitCommitId&amp;search.tags=CI&amp;search.values=1cda75e0e2365c7a10f9c49dc64f94151f94938b) to see all build failures.\n- [PullRequestFeedback build](https:\/\/builds.gradle.org\/viewQueued.html?itemId=76083579)","@eskatos I guess this change by itself wouldn't change the binary compatibility report since AFAIK Gradle doesn't expose nested types in APIs yet. I noticed this problem while spiking an API that did."],"labels":["a:feature","in:building-gradle","1 min review"]},{"title":"Warn when symlinks are present in a continous build","body":"We don't support symlinks with continuous build, meaning the build will not re-trigger if an input referenced via a symlinked directory changes. This is mentioned in the documentation briefly (see https:\/\/docs.gradle.org\/current\/userguide\/command_line_interface.html#sec:changes_to_symbolic_links), but it's unlikely that all users of continuous build would be aware of this, or that they would necessarily understand if their build contains symlinks.\r\n\r\nWe should print a warning at the end of the build in a continuous build session if we detected a symlinked input during the build, like so:\r\n\r\n```text\r\nBUILD SUCCESSFUL in 417ms\r\n2 actionable tasks: 1 executed, 1 up-to-date\r\n\r\nWaiting for changes to input files of tasks... (ctrl-d to exit)\r\nWarning: inputs are referenced via symlinks; some changes might not be detected.\r\n<-------------> 0% WAITING\r\n> IDLE\r\n```\r\n\r\n\r\n---\r\ncc: @gradle\/bt-execution","comments":["We already traverse the VFS at the end of the build to see if there were any symlinked files stored in it during the build (and then we discard them to avoid retaining stale data). We could use the result of this process to decide if we need to print the warning."],"labels":["a:chore","in:continuous-build","in:virtual-file-system"]},{"title":"Better document and enforce contract for the parameter type of parametrized model builders","body":"When running a build action, users have an ability to request models built by parameterized model builders.\r\nThese provided by the `BuildController` methods like:\r\nhttps:\/\/github.com\/gradle\/gradle\/blob\/1d110f2ab92a44a92b36f2cfcbb4dea68c17e0a5\/platforms\/ide\/tooling-api\/src\/main\/java\/org\/gradle\/tooling\/BuildController.java#L131\r\n\r\nThe current javadoc does not specify any restrictions on the parameter type, and also does not explain how it is related to the type that the parameterized model builder has actually declared.\r\n\r\nIn a recent attempt to document something, we've put the contract on the `ParameterizedToolingModelBuilder`'s `getParameterType` method. While it's better than nothing, it is not strictly accurate.\r\n\r\nThe facts about the current implementation:\r\n- Enforcement of the contract only happens at the request time, when calling `getModel(..., paramType, paramAction)` or a similar method\r\n- The contract checks for the parameter to be an interface, but [only validates its declared methods](https:\/\/github.com\/gradle\/gradle\/blob\/4d23945b2e10d2d79769c6a8ad841951206fb499\/platforms\/ide\/tooling-api\/src\/main\/java\/org\/gradle\/tooling\/internal\/consumer\/connection\/ToolingParameterProxy.java#L55) to be getters\/setters, and **not the methods of any super-interfaces**\r\n- There is **no enforcement or any checks** on the [parameter type](https:\/\/github.com\/gradle\/gradle\/blob\/5485e1447313e10f5c9f44d3b8f4c747f7044490\/subprojects\/core-api\/src\/main\/java\/org\/gradle\/tooling\/provider\/model\/ParameterizedToolingModelBuilder.java#L84) provided by the model builder\r\n- The model builder parameter type and the parameter type in the request are connected only structurally via proxying methods with the same name\r\n\r\nThe current implementation seems to suffer from a potential loophole, escaping the contract.\r\nThe request parameter interface can extend other interfaces with arbitrary methods (not checked by validation).\r\nThe model builder parameter type can have the same-named methods on its interfaces (not checked by validation).\r\nThe builder then can access these arbitrary methods [as long as they look like getter and setters](https:\/\/github.com\/gradle\/gradle\/blob\/4d23945b2e10d2d79769c6a8ad841951206fb499\/platforms\/ide\/tooling-api\/src\/main\/java\/org\/gradle\/tooling\/internal\/consumer\/connection\/ToolingParameterProxy.java#L33-L40).\r\n\r\nOverall, the current contract and the implementation seem fragile and unsound.\r\nThough, fixing this properly may require a technically-breaking change.\r\nHowever, the chance that there are users of this is very small.\r\n\r\nEven if we keep the enforcement of getter\/setter methods, I think the following approach should be idiomatic:\r\n```java\r\ninterface MyBuilderParameter {\r\n    String getMyValue()\r\n}\r\n\r\nclass MyBuilder implements ParameterizedToolingModelBuilder<MyBuilderParameter> {\r\n\/\/ ...\r\n}\r\n\r\n\/\/ At registration time we enforce the parameter interface to only have getters\r\ntoolingModelBuilderRegistry.register(new MyBuilder())\r\n\r\ninterface MutableMyBuilderParameter extends MyBuilderParameter {\r\n    void setMyValue(String value);\r\n}\r\n\r\n\/\/ At request time we enforce the parameter interface (and its super interfaces) to only have getters\/setters\r\nbuildController.getModel(modelType, MutableMyBuilderParameter.class, parameterInitializerAction) \r\n\r\n```\r\n\r\nWhich ever option we go with, it should be properly documented in the javadocs of the relevant methods.\r\n","comments":["I would consider simplify the contract instead of adding more validation, possibly after first documenting it a little better.\r\n\r\nSpecifically, I would use the same contract for a client passing a value to the builder as the builder uses to pass a value to the client. That is, allow the client to just create a parameter object and pass it directly to the `getModel()` method instead of the client providing a class literal and a configuration function."],"labels":["in:tooling-api","@ide-experience"]},{"title":"Improve developer experience when using incremental compilation and build cache","body":"### Expected Behavior\n\n_This issue is not a direct feature request, but a request for discussing how to improve developer experience for the scenario described. the outcome could be a combination of ideas for a plugin or certain Gradle configuration patterns and (but not necessarily) improvements to Gradle's Build Cache feature._ (creating this after a short exchange on the topic with @lptr) \r\n\r\nThis issue is about using `JavaCompile` or  a subtype of `AbstractNativeCompileTask` in combination with the Build Cache. These tasks support incremental compilation by implementing a task action with `InputChanges` argument.\r\n\r\nImagine the following scenario:\r\n- We have a build where such a task runs for a significant amount of time, because a large amount of code is compiled at once. Here, incremental compilation sometimes is the more important performance feature on developer machines than `UP-TO-DATE` or `FROM-CACHE`.\r\n- If a developer starts working on the code and makes changes before running any build, with the local build folder empty or outdated, they will have a full compilation run the first time they build.\r\n- The above happens even if there would have been a complete `FROM-CACHE` result in the (remote) build cache for the code state the developer was in before doing their change.\r\n\r\nTo improve the developer experience, you could advice all developers to do the following when starting or continuing a task they had put aside:\r\n\r\n1. Switch to the branch on which the work should take place\r\n2. Stash all local changes and pull latest remote changes \u2013 you are now in a state where a CI build likely filled the cache.\r\n3. Run a **full build** \r\n4. Start developing on this _incremental compilation friendly_ initial state \ud83d\ude80 \r\n\n\n### Current Behavior (optional)\n\n_No response_\n\n### Context\n\nIt would be great if the above could be automated in some form. Or if Gradle could be smart enough to do something similar in a different way. With the current feature set of Gradle, I can think of doing something like the following in a plugin or an individual build setup:\r\n\r\n1. By some heuristic, detect if the build folder is outdated (e.g. by storing when the last built was run on which commit)\r\n2. If the build folder is outdated **and** if the local git clone is dirty: warn **or** fail **or** reconfigure the build to automatically do \"stash + full build + stash pop\" in this Gradle run.\r\n3. User has to start Gradle again for the \"real\" first build","comments":[],"labels":["a:feature","in:execution-engine"]},{"title":"Inspection of userguide.pdf documentation hyperlinks","body":"### Issue type\r\n\r\nWrong or misleading information\r\n\r\n### Problem description\r\n\r\nThe gradle userguide.pdf documentation (version 8.5, as of now) is unfortunately riddled of 404 urls, missing self-references and other small errors.\r\n\r\nRelevant conversation: https:\/\/gradle-community.slack.com\/archives\/CJWG8VDM0\/p1701944564895969?thread_ts=1701626337.350649&cid=CJWG8VDM0\r\n\r\nFor this reason I created a small kotlin script which finds these invalid self-references and urls with the hope of providing some help to the gradle team: https:\/\/gist.github.com\/npgx\/a1e29839502ad8e273e290a29156b8d9\r\n\r\nExample output of this script, analyzing https:\/\/docs.gradle.org\/current\/userguide\/userguide.pdf (version 8.5, using `--never-print-valid`) -> [8.5-userguide-output.txt](https:\/\/github.com\/gradle\/gradle\/files\/13603811\/output.txt)\r\n\r\nIt's my first time working with PDFs so be gentle :)\r\n\r\n### Notes on kotlin scripts\r\n\r\nTo run .main.kts scripts, you have to follow the instructions in https:\/\/kotlinlang.org\/docs\/command-line.html\r\nThen, if you have added the bin\/ directory to the path, you can just do `kotlin the-script-name.main.kts`\r\notherwise you have to specify the path to the kotlin(.bat) file in the bin\/ directory\r\nIn the particular case of the gist above you can do `kotlin gradle-validator.main.kts --help` to print out an help message (thanks clikt)\r\n**Note that you should always inspect whatever script you run on your personal computer**\r\n\r\n![--help](https:\/\/github.com\/gradle\/gradle\/assets\/9007942\/f9ded68c-ecbd-4cbf-a56e-a83469b2f9dd)\r\n\r\n\r\n### Context (optional)\r\n\r\n_No response_\r\n\r\n### Page with the problem\r\n\r\nhttps:\/\/docs.gradle.org\/current\/userguide\/userguide.pdf","comments":["Thank you for your interest in Gradle!\r\n\r\nThis is a valid documentation issue that we will address.\r\n\r\n***\r\n\r\nThis can be solved in a more general way by creating an automatic check for that."],"labels":["in:documentation-infrastructure","a:bug"]},{"title":"kotlin-dsl accessors are ambiguious when non-public extension type is used","body":"### Current Behavior\n\nAccessors are generated with an `Any` type, allowing for what looks like proper code in some cases (similar to Groovy) but that does not actually work.\n\n### Expected Behavior\n\nAccessors should not be generated if the type used for the accessor is `Any`.\r\n\r\nOptionally, emit a warning?\n\n### Context (optional)\n\nThis came up in the context of developing extensions with `dependencies` blocks, and getting different **successful** results between Kotlin and Groovy due to an accidental missing `public` modifier.\n\n### Steps to Reproduce\n\nRun https:\/\/github.com\/octylFractal\/gradle-kotlin-dsl-accessor-type-not-public with `.\/gradlew help`, or `.\/gradlew help -Dgroovy` to see how the Groovy behavior differs despite nearly identical-looking code.\n\n### Gradle version\n\n8.5\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":[],"labels":["a:bug","in:kotlin-dsl"]},{"title":"Provide a test fixture to inspect Build cache content in tests","body":"It would be nice that with Build Cache NG we also provide a nice test fixture, to easily inspect build cache content in tests. This should not depend on the implementation details of the cache.\r\n\r\nFor example we check content of cache in [OverlappingOutputsIntegrationTest](https:\/\/github.com\/gradle\/gradle\/blob\/master\/subprojects\/core\/src\/integTest\/groovy\/org\/gradle\/api\/internal\/changedetection\/rules\/OverlappingOutputsIntegrationTest.groovy) and [CacheTaskOutputIntegrationTest](https:\/\/github.com\/gradle\/gradle\/blob\/master\/subprojects\/core\/src\/integTest\/groovy\/org\/gradle\/api\/tasks\/CacheTaskOutputIntegrationTest.groovy) and [CachedTaskExecutionIntegrationTest](https:\/\/github.com\/gradle\/gradle\/blob\/master\/subprojects\/core\/src\/integTest\/groovy\/org\/gradle\/api\/tasks\/CachedTaskExecutionIntegrationTest.groovy).","comments":["We introduced `BuildCacheOperationFixtures` to inspect operations with https:\/\/github.com\/gradle\/gradle\/pull\/27271, but we don't provide option to inspect content there.\r\n\r\nSo I think we needs some more work here, maybe when we introduce build cache NG."],"labels":["a:feature","in:build-cache"]},{"title":"Introduce a better solution to inspect Artifact transform cache in tests ","body":"Right now our tests rely on parsing cache folders and checking the content of cache folders or even parsing console output, e.g. in [BuildScriptClasspathIntegrationSpec](https:\/\/github.com\/gradle\/gradle\/blob\/a957c537b7ef051b1c1aa5f1ab1d650ecd7ccec9\/subprojects\/core\/src\/integTest\/groovy\/org\/gradle\/internal\/classpath\/BuildScriptClasspathIntegrationSpec.groovy).\r\n\r\nThat is a bit brittle, especially when we change cache base name. So we should think how we could replace that or even have some API to query cache information.\r\n\r\nSee also: https:\/\/github.com\/gradle\/gradle\/pull\/26045#discussion_r1412334102","comments":[],"labels":["a:feature","in:artifact-transforms"]},{"title":"Support evolving lazy property semantics","body":"There is a use case for plugin authors that is harder to handle with lazy properties than it was with JavaBean properties: evolving the semantics of the property, like changing its type.\r\n\r\nLet's look at an example. Say, there's a task with an input like this:\r\n\r\n```groovy\r\nclass MyTask extends DefaultTask {\r\n    @Input\r\n    String targetVersion\r\n}\r\n```\r\n\r\nAnd let's say the plugin author wants to change this to an enum type by introducing a new property and deprecating the old one, like so:\r\n\r\n```groovy\r\nenum TargetVersion { \/* ... *\/ }\r\n\r\nclass MyTask extends DefaultTask {\r\n    @Input\r\n    TargetVersion target\r\n\r\n    @Deprecated\r\n    @Internal\r\n    String getTargetVersion() {\r\n        return target.name()\r\n    }\r\n\r\n    @Deprecated\r\n    void setTargetVersion(String targetVersion) {\r\n        target = TargetVersion.valueOf(targetVersion)\r\n    }\r\n}\r\n```\r\n\r\nDoing the same sort of change with lazy properties is not trivial:\r\n\r\n```groovy\r\nabstract class MyTask extends DefaultTask {\r\n    @Input\r\n    abstract Property<String> getTargetVersion()\r\n}\r\n```\r\n\r\nBut we can't just introduce a `Property<TargetVersion> getTarget()` add deprecate the current `getTargetVersion()` method, because we can't currently wire properties like this.\r\n\r\n---\r\ncc: @gradle\/bt-execution","comments":["One option would be to add that functionality:\r\n\r\n```groovy\r\nabstract class MyTask extends DefaultTask {\r\n    @Input\r\n    abstract Property<TargetVersion> getTarget()\r\n\r\n    @Deprecated @Internal\r\n    Property<String> getTargetVersion() {\r\n        return getTarget().convertTo<String>(\r\n            TargetVersion::name,\r\n            TargetVersion::valueOf\r\n        );\r\n    }\r\n}\r\n```\r\n","Building on `Property.convertTo()` we could also add bytecode upgrade support for changes like this to change behaviors and property types in-place, similar to `@UpgradedProperty`."],"labels":["in:provider-api","p:lazy-migration"]},{"title":"Add artifact transform documentation","body":"### Issue type\n\nWrong or misleading information\n\n### Problem description\n\nCurrently, there is [documentation](https:\/\/docs.gradle.org\/current\/userguide\/artifact_transforms.html) for transforms but it doesn\u2019t explain how Gradle executes them.\r\n\r\nThis issue is to add some Gradle documentation that explains what artifact transforms are and how they are different from planned transform steps and tasks. \r\n\r\nAdd sections of @wolfs spec on artifact transforms, with illustrations and screenshots from Build Scans. \r\nAdd something about artifact transform executions to [Caching Android projects](https:\/\/docs.gradle.org\/current\/userguide\/caching_android_projects.html).\n\n### Context (optional)\n\n_No response_\n\n### Page with the problem\n\nhttps:\/\/docs.gradle.org\/current\/userguide\/artifact_transforms.html","comments":[],"labels":["a:documentation"]},{"title":"verify distributionUrl gets a valid artifact on download","body":"### Current Behavior\n\nusing a bad link can corrupt `gradle-wrapper.properties` and completely break your local gradlew.\n\n### Expected Behavior\n\ngradle should verify that the file it has downloaded is correct before updating anything\n\n### Context (optional)\n\nFortunately I have git to revert my changes but my gradlew installation was completely broken.\r\n\r\nMy suggested fix, add security checks after download to make sure gradle hasn't been tampered with.\r\n\r\nfirst, when gradle is released, push a signed sha512sum checksum file to the mirror. When gradlew uses said file verify the signature and then the checksum's of any files. Note: if signing is too painful to do or verify sha512sum is enough to ensure correctness (just not tampering). If gradle is already there you should be able to make that happen with java.\r\n\r\nThere are probably other ways you could do this, but this is my suggestion.\n\n### Steps to Reproduce\n\nimagine of course that we are using an internal server, but this works for demo\r\n```sh\r\n.\/gradlew wrapper --gradle-distribution-url https\\:\/\/services.gradle.org\/distributions\r\n.\/gradlew\r\n```\r\n\r\n```\r\nDownloading https:\/\/services.gradle.org\/distributions\r\n\r\nCould not unzip \/Users\/ccushing\/.gradle\/wrapper\/dists\/distributions\/2bm1pvlv224ddu1tyvpxgyb6v\/distributions to \/Users\/ccushing\/.gradle\/wrapper\/dists\/distributions\/2bm1pvlv224ddu1tyvpxgyb6v.\r\nReason: zip END header not found\r\nDownloading https:\/\/services.gradle.org\/distributions.sha256\r\n\r\nCould not fetch hash for https:\/\/services.gradle.org\/distributions.\r\nReason: https:\/\/services.gradle.org\/distributions.sha256\r\nDownloading https:\/\/services.gradle.org\/distributions\r\n\r\nCould not unzip \/Users\/ccushing\/.gradle\/wrapper\/dists\/distributions\/2bm1pvlv224ddu1tyvpxgyb6v\/distributions to \/Users\/ccushing\/.gradle\/wrapper\/dists\/distributions\/2bm1pvlv224ddu1tyvpxgyb6v.\r\nReason: zip END header not found\r\nDownloading https:\/\/services.gradle.org\/distributions\r\n\r\nCould not unzip \/Users\/ccushing\/.gradle\/wrapper\/dists\/distributions\/2bm1pvlv224ddu1tyvpxgyb6v\/distributions to \/Users\/ccushing\/.gradle\/wrapper\/dists\/distributions\/2bm1pvlv224ddu1tyvpxgyb6v.\r\nReason: zip END header not found\r\nException in thread \"main\" java.lang.RuntimeException: Downloaded distribution file \/Users\/ccushing\/.gradle\/wrapper\/dists\/distributions\/2bm1pvlv224ddu1tyvpxgyb6v\/distributions is no valid zip file.\r\n\tat org.gradle.wrapper.Install$1.call(SourceFile:26)\r\n\tat org.gradle.wrapper.GradleWrapperMain.main(SourceFile:67)\r\n```\n\n### Gradle version\n\n8.5\n\n### Build scan URL (optional)\n\n_No response_\n\n### Your Environment (optional)\n\n_No response_","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team, but this area of Gradle is currently not a focus one, so it might take a while before a fix is made.\r\n\r\n***\r\n\r\nFor anyone who also is affected by that: one of the ways to deal with this error is to fix the URL and remove the broken download which is pointed out in the error message.\r\n\r\n***\r\n\r\nRelated:\r\n* https:\/\/github.com\/gradle\/gradle\/issues\/27295\r\n"],"labels":["in:wrapper","a:bug","re:comprehensibility"]},{"title":"Scala plugin uses detached configurations","body":"### Current Behavior\r\n\r\nThe `scala` plugin internally uses a `detachedConfiguration` to resolve the default value of `scalaClasspath`, meaning that there is no way for users to customize the behavior of that resolution. Other plugins such as Checkstyle, JaCoCo, or Spotbugs use regular, named configurations for their resolution needs, which allows us to see them, customize them, react to them.\r\n\r\nIn our case, we have 2 repositories in our projects, and each configuration gets resolved using one or the other, but never both. We're using the `onlyForConfigurations` Gradle API to achieve this. Let's say we add a standard `mavenCentral()` repository to the build, and set it up so that it only gets used for resolving a specific set of configurations: the ones we know are created by plugins, and as such, need access to Maven Central. Everything else (e.g. `compileClasspath`) uses our custom repository. But for the Scala plugin, we can't currently use `onlyForConfigurations`, since we can't predict the name of detached configurations (technically we don't even know whether they exist). The result is that during the resolution of `scalaClasspath`, Gradle tries to use our custom repository, where it can't find the Maven Central dependencies.\r\n\r\nUnfortunately we can't just switch the logic around, and say that all detached configurations should use the standard Maven Central repo instead of ours, because we rely on `DependencyHandler.createArtifactResolutionQuery` to read from our custom repository.\r\n\r\n### Expected Behavior\r\n\r\nGradle's built-in Scala plugin should work the same way as others like JaCoCo do, i.e. create regular, meaningfully named `Configuration` objects that are visible in the `configurations` collection.\r\n\r\nIf that is not possible, please provide some different solution that allows the `scala` plugin to be used in builds where access to the Maven Central repository is limited to specific configurations, i.e. detached configurations can't access it. For example, with a bit of refactoring, the `ScalaRuntime` class could provide a method that configures any `Configuration` object the same way as `inferScalaClasspath` sets up the detached configuration internally; if there was such a public API, we could create a named configuration manually, set it up using this new method, then set the `Configuration` as the value of `scalaClasspath`.\r\n\r\n### Context (optional)\r\n\r\nThe reproduction (`kotlin-dsl-reproduction` branch) applies some `onlyForConfigurations` limitations to the standard Maven Central repository, but for simplicity, and to make the problem very clear, it actually adds the name of _all_ configurations to the allow-list. Basically this demonstrates that if you ever call `onlyForConfigurations` on your Maven Central repo, then there is no way anymore to allow detached configurations to use it, and this breaks the Scala plugin.\r\n\r\nI also found a dirty, hacky workaround (`kotlin-dsl-workaround` branch), that allows us to proceed for the time being, but it's accessing Gradle internals, and thus there is risk that it could break in newer versions of Gradle.\r\n\r\n### Steps to Reproduce\r\n\r\n1. https:\/\/github.com\/pantherdd\/gradle-issue-scala-classpath-resolve\/tree\/kotlin-dsl \u2013 Basic Scala project that works\r\n2. https:\/\/github.com\/pantherdd\/gradle-issue-scala-classpath-resolve\/tree\/kotlin-dsl-reproduction ([diff](https:\/\/github.com\/pantherdd\/gradle-issue-scala-classpath-resolve\/compare\/kotlin-dsl...kotlin-dsl-reproduction)) \u2013 Bug reproduction\r\n3. https:\/\/github.com\/pantherdd\/gradle-issue-scala-classpath-resolve\/tree\/kotlin-dsl-workaround ([diff](https:\/\/github.com\/pantherdd\/gradle-issue-scala-classpath-resolve\/compare\/kotlin-dsl-reproduction...kotlin-dsl-workaround))  \u2013 Partial workaround\r\n\r\n### Gradle version\r\n\r\n8.4\r\n\r\n### Links\r\n\r\nThis issue is tightly related to #27226 (Scala plugin infers an incorrect Scala version) and should probably be solved at the same time as that one.\r\n\r\n### Notes\r\n\r\nGiven that the \"[Scala Plugin is out of the team's focus for now and it's unlikely that the related issues will be addressed in the near future](https:\/\/github.com\/gradle\/gradle\/issues\/27226#issuecomment-1838829207)\", would it be possible for us to contribute a fix to both this issue and #27226?","comments":["Thank you for providing a valid report.\r\n\r\nThe issue is in the backlog of the relevant team, but the existence of a workaround makes it non-critical, so it might take a while before a fix is made.\r\n\r\n***\r\n\r\nIf you are interested in contributing to Gradle, this issue is actionable and ready for contribution but might be challenging for first-time contributors.\r\n\r\nSee [CONTRIBUTING.md](https:\/\/github.com\/gradle\/gradle\/blob\/master\/CONTRIBUTING.md) for more information.\r\n\r\n","@ov7a I have looked into this issue (as well as https:\/\/github.com\/gradle\/gradle\/issues\/27226), and submitted a PR containing the fix, please review: https:\/\/github.com\/gradle\/gradle\/pull\/28198"],"labels":["a:bug","in:scala-plugin","\ud83c\udf33 help wanted"]},{"title":"add distributionBaseUrl","body":"### Expected Behavior\r\n\r\n### Expected Behavior\r\n\r\n```properties\r\ndistributionProtocol=https # default, removes `\\:` issue when setting\r\ndistributionBaseUrl=myorg.jfrog.io\/artifactory\/gradle-distributions\r\n```\r\n\r\nthen run\r\n\r\n```sh\r\n.\/gradlew wrapper --gradle-version 8.5\r\n```\r\n\r\nand it will work as today but with the appropriate corporate url. note: a trailing \/ should be detected and added if missing.\r\n\r\nDo Uri's work? like can this point to a local directory using `file:\/\/` or even `ftp:\/\/`, if so then change from `distributionBaseUrl` to `distributionBaseUri`\r\n\r\nappropriate task and `--gradle-distribution-base-url` are also fine. In fact I would probably use task if this was available.\r\n\r\n\r\n\r\n### Current Behavior (optional)\r\n\r\n_No response_\r\n\r\n### Context\r\n\r\nIn a corporate environment I've noticed a couple of behaviors.\r\n\r\n1. require an internal url for all dependency fetching on CI including gradlew\r\n2. require an internal url for all dependency fetching on a developer's workstation including gradlew\r\n\r\ndevelopers will forget this url on their workstation\r\n\r\n```sh\r\n.\/gradlew wrapper --gradle-version 8.5\r\n```\r\n\r\nwill update the url to the wrong url and break CI\r\n\r\n```sh\r\n.\/gradlew wrapper --gradle-distribution-url https:\/\/myorg.jfrog.io\/artifactory\/gradle-distributions\/gradl-8.5-bin.zip\r\n```\r\n\r\nwill work and then completely hose your local gradle installation with a zip. It's also unacceptable to need to modify my build tasks with a gradle version thus having to update the task every time I want to upgrade gradle.","comments":["Thank you for your interest in Gradle!\r\n\r\nThis feature request is in the backlog of the relevant team, but this area of Gradle is currently not in focus. It might take a while before it gets implemented.\r\n\r\n***\r\n\r\nThere are definitely some improvements that can be made in that area:\r\n1. The wrapper should check that the distribution is a zip, not a random content, and produce a proper error.\r\n2. The wrapper task does an analysis of a version. Based on that, it generates the name of the file and the location, so the prefix can be anything, but the part `distributions\/gradle-8.5-bin.zip` should remain the same across all configurations if the wrapper task will compute the value.","See also [this comment](https:\/\/github.com\/gradle\/gradle\/issues\/28209#issuecomment-1971110595).\r\n\r\nWe should support `distributionUrl` being templatable as it is more flexible.\r\nThe [current documentation](https:\/\/docs.gradle.org\/current\/dsl\/org.gradle.api.tasks.wrapper.Wrapper.html#org.gradle.api.tasks.wrapper.Wrapper:distributionUrl) is written in a way that someone can assume it already works that way.","I looked a bit deeper into supporting some form of templating for computing the `distributionUrl`.\r\n\r\nIn the end, that does not feel like the right direction.\r\n\r\nIf `distributionUrl`, `gradleVersion`, `distributionType` and other such fields were to be migrated to the `Property` API, you would be able to do what is requested here, without the need to have a distribution layout that matches what Gradle expects.\r\nAssuming the above happens, one could write:\r\n`distributionUrl = gradleVersion.zip(distributionType) { version, type -> \"[https:\/\/example.com\/distributions\/gradle-${version}-${type}.zip](https:\/\/example.com\/distributions\/gradle-${version}-${type}.zip)\"}`\r\n\r\nThere is however already a solution for doing something similar, even if it means using a callback on the task graph:\r\n\r\n```kotlin\r\ngradle.taskGraph.whenReady {\r\n    tasks.wrapper {\r\n        distributionUrl = \"https:\/\/example.com\/distributions\/gradle-${gradleVersion}-bin.zip\"\r\n    }\r\n}\r\n```\r\n\r\nWith the above code, if you invoke the wrapper task with `.\/gradlew wrapper --gradle-version 8.5`, then the generated distribution URL written to the properties file will be `https:\/\/example.com\/distributions\/gradle-8.5-bin.zip`\r\n"],"labels":["in:wrapper","a:feature","has:workaround"]}]