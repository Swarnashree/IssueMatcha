[{"title":"Xcode 14.3 has `pod lib lint` fail","body":"* [X] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nHello,\r\n\r\nI ran `pod lib lint GRDB.swift.podspec --allow-warnings --verbose` from a fresh clone of https:\/\/github.com\/groue\/GRDB.swift\/tree\/v6.10.1, with Xcode 14.3 (14E222b)\r\n\r\n## What did you expect to happen?\r\n\r\nA success, as with Xcode 14.2. And if `pod lib lint` succeeds, I can expect `pod trunk push` to succeed as well.\r\n\r\n## What happened instead?\r\n\r\nAn error, unlike Xcode 14.2.  And since `pod lib lint` fails, I'm pretty sure `pod trunk push` will fail as well: I can't publish new GRDB podspecs with Xcode 14.3.\r\n\r\nRelevant lines from the output of the command:\r\n\r\n```\r\n...\r\n    ld: file not found: \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/lib\/arc\/libarclite_macosx.a\r\n    clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n    \r\n    \/var\/folders\/dp\/2xq7_lgj7k5fdnl5xm0s126r0000gn\/T\/CocoaPods-Lint-20230401-1982-y8jwp9-GRDB.swift\/Pods\/Pods.xcodeproj: warning: The macOS deployment target 'MACOSX_DEPLOYMENT_TARGET' is set to 10.9, but the range of supported deployment target versions is 10.13 to 13.3.99. (in target 'SQLCipher' from project 'Pods')\r\n    ** BUILD FAILED **\r\n...\r\n   Testing with `xcodebuild`. \r\n -> GRDB.swift (6.10.1)\r\n    - NOTE  | [GRDB.swift\/standard,GRDB.swift\/SQLCipher] xcodebuild:  note: Using codesigning identity override: -\r\n    - NOTE  | [GRDB.swift\/standard,GRDB.swift\/SQLCipher] xcodebuild:  note: Building targets in dependency order\r\n    - NOTE  | [GRDB.swift\/standard,GRDB.swift\/SQLCipher] xcodebuild:  note: Metadata extraction skipped. No AppIntents.framework dependency found. (in target 'GRDB.swift' from project 'Pods')\r\n    - NOTE  | [GRDB.swift\/standard,GRDB.swift\/SQLCipher] xcodebuild:  note: Metadata extraction skipped. No AppIntents.framework dependency found. (in target 'App' from project 'App')\r\n    - NOTE  | [GRDB.swift\/standard,GRDB.swift\/SQLCipher] xcodebuild:  note: Using codesigning identity override: \r\n    - ERROR | [GRDB.swift\/SQLCipher] xcodebuild: Returned an unsuccessful exit code.\r\n    - NOTE  | [GRDB.swift\/SQLCipher] xcodebuild:  clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n    - NOTE  | [iOS] [GRDB.swift\/SQLCipher] xcodebuild:  Pods.xcodeproj: warning: The iOS Simulator deployment target 'IPHONEOS_DEPLOYMENT_TARGET' is set to 8.0, but the range of supported deployment target versions is 11.0 to 16.4.99. (in target 'SQLCipher' from project 'Pods')\r\n    - NOTE  | [OSX] [GRDB.swift\/SQLCipher] xcodebuild:  Pods.xcodeproj: warning: The macOS deployment target 'MACOSX_DEPLOYMENT_TARGET' is set to 10.9, but the range of supported deployment target versions is 10.13 to 13.3.99. (in target 'SQLCipher' from project 'Pods')\r\n    - NOTE  | [watchOS] [GRDB.swift\/SQLCipher] xcodebuild:  Pods.xcodeproj: warning: The watchOS Simulator deployment target 'WATCHOS_DEPLOYMENT_TARGET' is set to 2.0, but the range of supported deployment target versions is 4.0 to 9.4.99. (in target 'SQLCipher' from project 'Pods')\r\n    - NOTE  | [tvOS] [GRDB.swift\/SQLCipher] xcodebuild:  Pods.xcodeproj: warning: The tvOS Simulator deployment target 'TVOS_DEPLOYMENT_TARGET' is set to 9.0, but the range of supported deployment target versions is 11.0 to 16.4.99. (in target 'SQLCipher' from project 'Pods')\r\n\r\n[!] GRDB.swift did not pass validation, due to 1 error.\r\nYou can use the `--no-clean` option to inspect any issue.\r\n```\r\n\r\nA Google search for linker error with Xcode 14.3 and `libarclite_macosx.a` found [this page](https:\/\/developer.apple.com\/forums\/thread\/725300). It looks like the problem is a wrong deployment target.\r\n\r\nThe log indeed warns:\r\n\r\n```\r\nThe macOS deployment target 'MACOSX_DEPLOYMENT_TARGET' is set to 10.9, but the range of supported deployment target versions is 10.13 to 13.3.99. (in target 'SQLCipher' from project 'Pods')\r\n```\r\n\r\nBut the [podspec](https:\/\/github.com\/groue\/GRDB.swift\/blob\/v6.10.1\/GRDB.swift.podspec) mentions '10.13' as the macOS deployment target:\r\n\r\n```ruby\r\n  s.ios.deployment_target = '11.0'\r\n  s.osx.deployment_target = '10.13'\r\n  s.watchos.deployment_target = '4.0'\r\n  s.tvos.deployment_target = '11.0'\r\n```\r\n\r\nI don't know how to fix this error.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.12.0\r\n        Ruby : ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]\r\n    RubyGems : 3.4.5\r\n        Host : macOS 13.3 (22E252)\r\n       Xcode : 14.3 (14E222b)\r\n         Git : git version 2.39.2 (Apple Git-143)\r\nRuby lib dir : \/opt\/homebrew\/Cellar\/ruby\/3.2.2\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/opt\/homebrew\/lib\/ruby\/gems\/3.2.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.5\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.1\r\ncocoapods-trunk       : 1.6.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/groue\/GRDB.swift\/tree\/v6.10.1\r\n","comments":["I\u2019m having the same issue, would be very glad if we had a fix. Thank you.","At a glance, this looks like it's the same problem as #11828, though I'm not sure. If it is the same, I recommend you subscribe to that issue for further updates.","> At a glance, this looks like it's the same problem as #11828, though I'm not sure. If it is the same, I recommend you subscribe to that issue for further updates.\r\n\r\nThanks @Coedice,\r\n\r\nAccording to [this answer](https:\/\/developer.apple.com\/forums\/thread\/725300?answerId=745550022#745550022), it's not quite a problem of path resolution, but rather a problem that the CocoaPods build looks for `libarclite_macosx.a` in the first place.\r\n\r\nMaybe fixing #11828 would fix this issue as a side-effect. But the root problem remains: minimum targets in the podspec are not honored, and `libarclite_macosx.a` is not supposed to be necessary.","This particular issue could be addressed by the GRDB dependency, https:\/\/github.com\/CocoaPods\/Specs\/blob\/master\/Specs\/1\/2\/7\/SQLCipher\/4.5.3\/SQLCipher.podspec.json#L9, updating its minimum platform versions to at least iOS 9, etc.","Well, it's not possible to modify a podspec that has been published. Also, I'm not going to ask the SQLCipher team to publish a new release just to test this hypothesis. And even if they would, bumping the minimum SQLCipher version supported by GRDB would be an important breaking change that I'd prefer to avoid.","@groue I would say that it's more arguable to be an Xcode bug since Xcode is trying to link for a target without providing the library.\r\n\r\nOn the other hand, it's arguable that CocoaPods' podspecs should still be claiming support for iOS versions that Xcode hasn't supported for years. \r\n\r\nWe've addressed this issue for our CocoaPods clients by publishing patch updates of our podspecs without changing the library.  For example, see https:\/\/github.com\/firebase\/leveldb-library-podspec\/pull\/12 which addresses this issue for a Firebase dependency.\r\n\r\nWhile it's a breaking change in theory, it's not in practice, since the app store does not accept apps from Xcode versions that support those platform versions.\r\n\r\nIn the meantime, CocoaPods clients can work around with a `post_install` script like https:\/\/stackoverflow.com\/a\/75729977\/556617\r\n\r\n","@paulb777 I don't understand what you are trying to tell, and why it looks like you are trying to minimize this issue. Are your telling I should close the issue and report the problem to Apple?\r\n\r\nThis won't work, because Apple won't do anything. This issue is a CocoaPods problem, because it [does not honor the specified minimum target](https:\/\/developer.apple.com\/forums\/thread\/725300?answerId=745550022#745550022). I'm doing my part of the job by providing correct minimum targets in the podspec given to `pod lib lint` (and `pod trunk push`). Cocoapods does not. It just happens that Xcode 14.3 no longer supports a behavior that was wrong in the first place.\r\n\r\nBesides, CocoaPods clients are out of the frame of this issue. No one can \"fix\" one's Podfile if a library could not be published with `pod trunk push` in the first place (and *that's* in the frame of this issue).\r\n\r\nI understand that you are happy with your workaround. And I'm happy for you. But it would be much better if CocoaPods itself would address the issue globally, instead of forcing each individual library maintainers to perform duplicated workarounds. And in my particular case, [there's nothing I can do](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/11839#issuecomment-1500786527). That's why this issue remains open, until a proper answer acknowledges that there's a problem. I'll then help figuring out a solution if I can.\r\n","I'll try another framing:\r\n\r\nThe GRDB.podspec is choosing to use a dependency that claims support for macOS 10.9. CocoaPods follows the wishes of the GRDB podspec and builds a project targeting macOS 10.9. Xcode 14.3 fails to build the resulting project because it doesn't support macOS 10.9 targets.\r\n\r\nI agree with you that it would be nice for CocoaPods to do as much as possible to help libraries evolve as Apple evolves its tools and deprecates old platforms.  While I continue to be impressed with how much CocoaPods does with only volunteers, there are limits.\r\n\r\nXcode has been warning for a few years now about macOS 10.9 not being supported and podspecs have had plenty of time to update to address the Xcode platform requirements.\r\n\r\n![Screenshot 2023-04-08 at 9 03 41 AM](https:\/\/user-images.githubusercontent.com\/73870\/230731233-70b9fc28-efe4-48d5-9def-ec3dc87a2e7d.png)\r\n","> I'll try another framing:\r\n>\r\n> The GRDB.podspec is choosing to use a dependency that claims support for macOS 10.9.\r\n\r\nYes.\r\n\r\n> CocoaPods follows the wishes of the GRDB podspec and builds a project targeting macOS 10.9.\r\n\r\nI disagree: GRDB restricts the minimum target to more recent OSes in its own podspec. There is no point building for macOS 10.9 when GRDB requires 10.13+ (the same of other platforms). Not only there is no point building for macOS 10.9, but:\r\n\r\n> Xcode 14.3 fails to build the resulting project because it doesn't support macOS 10.9 targets.\r\n\r\nWe are in full agreement there.","It wouldn't be correct for CocoaPods to build dependencies for newer versions than the dependency itself specifies since they could be using APIs that have been deprecated, deleted or changed after that specified version.","You put a \"maximum\" in your interpretation of \"minimum target\", and this interpretation creates this issue, for no good reason.\r\n\r\nWith this interpretation, CocoaPods automatically and unavoidably breaks perfectly fine libraries, as time goes by.\r\n\r\nThis interpretation ignores that libraries can use availability checks in order to avoid the api changes you describes. It's not because a library claims support iOS N that it can't build on iOS N+1. Heck, we do this every day.\r\n\r\nIt's not because a library **could** be using removed APIs that CocoaPods **is allowed** to break the build. This is just artificial churn that no one is asking for.\r\n\r\nThat's why, once again, this issue is still not closed. \ud83d\ude42","Same issue here. Thanks for posting. ","Hi, new version is out, but it doesn't fix problem with Xcode 14.3. Does someone know any workaround we can do to temporarily bypass this issue? \nIs there plan to fix linting on Xcode 14.3?","In my case, `libarclite_iphoneos.a` was missing. I have a dependency in my pod spec on a framework that will likely not be updated.\r\nWorkaround solution: https:\/\/stackoverflow.com\/a\/75920796\/4124265","> In my case, `libarclite_iphoneos.a` was missing. I have a dependency in my pod spec on a framework that will likely not be updated.\n> \n> Workaround solution: https:\/\/stackoverflow.com\/a\/75920796\/4124265\n\nThis is not good solution, since using any cloud based CI will require doing it for every build. Also copying some files from external repo can be malicious.","> This is not good solution, since using any cloud based CI will require doing it for every build. Also copying some files from external repo can be malicious.\r\n\r\nI agree, just had to publish my spec with minimum time spent. Another possibility is to revert Xcode to 14.2 I guess.\r\n","A workaround for some of our other Xcode 14.3 `pod spec lint` failures is to add `unit_tests.requires_app_host = true` to test_specs that didn't need that option with Xcode 14.2.","we are facing the same issue. Any workaround for the same to work for xcode 14.3?","Related: https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/11895 Publication of Pods that have dependencies targeting iOS < 11 is also broken.\r\n\r\nSo far all workarounds discussed here are applicable for apps, not for Pod authors, so **pod linting and pod publication** are still blocked.","Same issue here. Thanks for posting.","> It wouldn't be correct for CocoaPods to build dependencies for newer versions than the dependency itself specifies since they could be using APIs that have been deprecated, deleted or changed after that specified version.\r\n\r\nCan you expand on this? My understanding is that the offending `deployment_target` property sets `{PLATFORM}_DEPLOYMENT_TARGET`, but `SDKROOT` is always the latest SDK version.  Building for latest will already cause failures if APIs have been changed or deleted, since the compiler does its validation based on that Apple uses the SDK version _at the app level_ to special case behavior for old apps.  I think all that deployment target gets you is silencing deprecation warnings and specifying what versions you support for the App Store, again _at the app level_.\r\n\r\nIs there something I'm missing?","@bnickel, I don't understand your question. Everything is said in the [issue description](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/11839#issue-1650552295).\r\n\r\nTo sum up: a podspec specifies some minimum deployment targets. Those are not honored by `pod lib lint` and `pod trunk push`, that use a lower deployment target. This lower deployment target triggers build errors with Xcode 14.3, and it is 99% expected that those errors would be fixed if the minimum deployment target specified in the podspec were honored.\r\n\r\nI just wish that a contributor of CocoaPods would 1. acknowledge that this is an accurate description of an actual issue, 2. clearly marks the issue as unsolvable for [reasons], or 3. clearly marks the issue as solvable with [technique].\r\n\r\nA (maybe naive) technique would be to have `pod lib lint` and `pod trunk push` use as the deployment target the aggregate (maximum) of the deployment targets specified by the podspec and its dependencies. So it libA specifies iOS 11.0+ and depends on libB that specifies iOS 12.0+, we'd use 12.0 as the `IPHONEOS_DEPLOYMENT_TARGET` when linting libA. Of course, things become much more complicated as we start to consider subspecs, plus technical challenges I don't foresee because I'm far from being a build expert. And this is exactly why this issue exists: as a call for contributions from CocoaPods contributors towards a solution.\r\n\r\nAt some point in the future, Xcode 14.2 will no longer be usable. What will we do then, if we can't `pod lib lint` and `pod trunk push`? \ud83e\udd37 ","To be pedantic, this is really an issue with the dependency podspecs, not with CocoaPods itself. The podspecs are specifying they should be built for an iOS version that is not supported by the building Xcode.\r\n\r\nFrom the numerous Podfiles that do `post_install` script updates to dependent pod `IPHONEOS_DEPLOYMENT_TARGET` settings, it seems to be the case that the only impact of building for a newer platform version than specified by the podspec is extra deprecation warnings. It would be nice to know definitively that there also isn't the risk of breakages beyond that.\r\n\r\nI can't speak for other CocoaPods contributors, but I would be fine with a PR providing an option for `pod lib lint` and `pod trunk push` to specify higher platform minimum deployment versions.\r\n\r\nIn the meantime, I would encourage podspec providers to work with their dependencies to update their podspecs to be accurate for modern Xcode versions.  Worse case workaround is forking the dependent podspec's and updating the versions.\r\n","> I can't speak for other CocoaPods contributors, but I would be fine with a PR providing an option for `pod lib lint` and `pod trunk push` to specify higher platform minimum deployment versions.\r\n\r\nYes, that's an idea that allows everybody to move on, without having to wait for dependencies to update their podspecs (a slow an uncertain process).\r\n\r\nIn real life, podspec authors, when they use this new feature, would specify the exact same versions as in their podspec, though. So maybe this extra configuration could be just replaced by using the values that are *already provided* in the podspec. This sounds much simpler, easier to understand than the current behavior, and just as effective as the extra configuration you suggest.\r\n\r\nLet's also take care that asking dependencies to update their podspec has serious drawbacks. Not only this is slow and uncertain. But the library mentioned in the [initial comment](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/11839#issue-1650552295) _**does not need** to upgrade its dependencies_. GRBD + SQLCipher 3.4.2+ is a perfectly valid combination (if only CocoaPods would stop failing `pod lib lint` and `pod trunk push` on Xcode 14.3 only). Forcing GRDB to depend on the latest version of SQLCipher (with the future \"fixed\" podspec), just to accommodate this CocoaPods issue, would be a very unwelcome breaking change for GRDB users.\r\n","> @bnickel, I don't understand your question. Everything is said in the [issue description](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/11839#issue-1650552295).\r\n\r\nSorry, @groue, my comment was directed to @paulb777's quote and I should have tagged him. The comment suggested a lot of potential negative consequences for increasing the deployment version from what the dependency asked for and I'm just unclear on what that would be beyond an uptick in deprecation warnings.\r\n\r\nTo throw in a couple thoughts about the solution, I do feel like just patching `lint` will be enough.  There are tools like Expo where React Native projects are built on the server without the developer ever seeing a Podfile.  At some point, they're going to update their Xcode servers and builds are going to break.  It also makes it incumbent on every Podspec distributor to either A) reach out to the their dependencies to update their repos or B) inform their users of hacks they need to inject in their Podfiles that do what we're suggesting here.  Even if I never release another version of my project, my users are going to start seeing failures when they try building.","cc @dnkoutso\r\n\r\nNo pressure of course, but I wonder what is the point of view of main CocoaPods contributors on this issue.\r\n\r\nTo sum up, the algorithm that picks the minimum target for `pod lib lint` and `pod trunk push` no longer works with Xcode 14.3, even for perfectly valid podspecs.\r\n\r\nThe only suggested fix so far was not on CocoaPods side, but on the shoulders of podspec authors. It is to bump their dependencies. Unfortunately, it is 1) maybe not possible, because not all dependencies have been updated for Xcode 14.3. And it is 2) prone to undesired breaking changes, if some major version bump in dependencies is necessary in order to support Xcode 14.3. Such breaking changes would be undesired, because they'd only be done in order to support CocoaPods itself (nor the libs, nor Xcode 14.3 require this change - only CocoaPods, as described in this issue).\r\n\r\nIt has also been argued above that the fix can be performed right from CocoaPods itself, freeing podspec authors from any undesired churn. This would be a welcomed move.\r\n\r\nAlso, when podspec authors stop supporting Swift 5.7, and require Xcode 14.3+, they'll have to take difficult decisions if `pod lib lint` and `pod trunk push` have not been repaired. In my particular case, I have no good solution for the SQLCipher subspec of the GRDB pod I maintain.\r\n\r\nIt would be interesting to have some feedback.\r\n\r\n(EDIT: clarified some ambiguous pod\/podspec wordings)","As I said above, it would be unbreaking and should be uncontroversial to add an option to `pod lib lint` and `pod trunk push` to override the minimum platform versions of dependent podspecs.","Probably it should be added so we can override it, is someone actively\r\nworking to add this option?\r\n\r\nW dniu wt., 11.07.2023 o 15:41 Paul Beusterien ***@***.***>\r\nnapisa\u0142(a):\r\n\r\n> As I said above, it would be unbreaking and should be uncontroversial to\r\n> add an option to pod lib lint and pod trunk push to override the minimum\r\n> platform versions of dependent podspecs.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/11839#issuecomment-1630858390>,\r\n> or unsubscribe\r\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/ABLQNXOLH5AKIHT2W7LW6LLXPVJZ3ANCNFSM6AAAAAAWPXICKA>\r\n> .\r\n> You are receiving this because you commented.Message ID:\r\n> ***@***.***>\r\n>\r\n","> As I said above, it would be unbreaking and should be uncontroversial to add an option to `pod lib lint` and `pod trunk push` to override the minimum platform versions of dependent podspecs.\r\n\r\nWith all due respect for your interesting contribution, I wouldn't call it uncontroversial due to the reactions to [your comment](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/11839#issuecomment-1564493924), and [my follow-up answer](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/11839#issuecomment-1564518844).\r\n\r\nI don't want to appear more conflictual than I really am. You and I agree there is something to do \ud83d\udc4d And we both have expressed our positions with full clarity already. I'm sorry there is a debate! I wish there weren't any, and the issue was solved already!\r\n\r\nI don't know how the CocoaPods maintainers solve this kind of open question. As long as there is no clear direction, I don't know who will contribute a fix. Hence my request for help from the main contributor of the last months, dnkoutso.","We're good for a flag for this \ud83d\udc4d\ud83c\udffb as it's all a bit out of everyone's control, and both versions of correct behavior here are reasonable from an ecosystem and individual pod level\r\n\r\nA PR adding that flag is good to be merged","I'm having the same issue, even though I set my pod's spec to:\r\n`s.ios.deployment_target = '13.0'`\r\n\r\nWhen inspecting the generated linting project after using `pod lib lint --no-clean`, the dependent pods have their own minimum deploy targets set to 8.0.\r\n\r\nMaybe it would work if there was a way within the podspec to define a deployment_target per sub-pod. I tried this for my project but it didn't work:\r\n```\r\n  s.ios.deployment_target = '13.0'\r\n  s.dependency 'jetfire', '~>0.1.5'\r\n\r\n  s.subspec 'jetfire' do |sub|\r\n    sub.ios.deployment_target = '13.0'\r\n  end\r\n```","> > I can't speak for other CocoaPods contributors, but I would be fine with a PR providing an option for `pod lib lint` and `pod trunk push` to specify higher platform minimum deployment versions.\r\n> \r\n> Yes, that's an idea that allows everybody to move on, without having to wait for dependencies to update their podspecs (a slow an uncertain process).\r\n> \r\n> In real life, podspec authors, when they use this new feature, would specify the exact same versions as in their podspec, though. So maybe this extra configuration could be just replaced by using the values that are _already provided_ in the podspec. This sounds much simpler, easier to understand than the current behavior, and just as effective as the extra configuration you suggest.\r\n> \r\n> Let's also take care that asking dependencies to update their podspec has serious drawbacks. Not only this is slow and uncertain. But the library mentioned in the [initial comment](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/11839#issue-1650552295) _**does not need** to upgrade its dependencies_. GRBD + SQLCipher 3.4.2+ is a perfectly valid combination (if only CocoaPods would stop failing `pod lib lint` and `pod trunk push` on Xcode 14.3 only). Forcing GRDB to depend on the latest version of SQLCipher (with the future \"fixed\" podspec), just to accommodate this CocoaPods issue, would be a very unwelcome breaking change for GRDB users.\r\n\r\nI am facing this issue as well. The workarounds work fine on the app side with the `pod install` but `pod lib lint` is a blocker for our CI pipeline. Was there any progress made towards a solution like suggested by here ?","I'm not sure I understand what is the suggested course of action so that this issue is fixed. Xcode 15.1 will soon ship and we're still stuck on Xcode 14.2 to run `pod trunk push`.","Man,\r\nYou push podspec into your own spec repo, you ca run pod trunk push with\r\nsources of external sped repos\r\n\r\nW dniu niedz., 15.10.2023 o 09:34 Gwendal Rou\u00e9 ***@***.***>\r\nnapisa\u0142(a):\r\n\r\n> I'm not sure I understand what is the suggested course of action so that\r\n> this issue is fixed. Xcode 15.1 will soon ship and we're still stuck on\r\n> Xcode 14.2 to run pod trunk push.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/11839#issuecomment-1763306515>,\r\n> or unsubscribe\r\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/ABLQNXK2TVQHVXGFRZ7RF5TX7OGXTAVCNFSM6AAAAAAWPXICKCVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTONRTGMYDMNJRGU>\r\n> .\r\n> You are receiving this because you commented.Message ID:\r\n> ***@***.***>\r\n>\r\n","Contact me on twitter.","This issue looks related to https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/12033","In the hope of receiving some feedback in this thread. i am now posting my question from https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/12033#issuecomment-1781201495 also here.\r\n\r\nI am particularly interested in the question of whether this is actually an Xcode or Cocoapods problem.\r\n\r\n---\r\n\r\nAre there any updates? We can still not use Xcode 15 because we can't release our project, because `pod lib lint` fails with the \r\n\r\n    SDK does not contain 'libarclite' at the path ...\r\n\r\nerror.\r\n\r\n1. `pod install` \u2611\ufe0f\r\nConsuming dependencies with a lower deployment target than `12.0 is not a problem, since we can workaround the issue by setting \r\n\r\n    config.build_settings['IPHONEOS_DEPLOYMENT_TARGET']\r\n    \r\nin our `Podfile` (see https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/12033#issuecomment-1737269286).\r\n\r\n2. `pod lib lint` \u274c\r\nBut for the same (the `\"libarclite\"`) issue when running `pod lib lint` we don't have a solution yet.\r\n\r\nIn that case the Xcode Sample Project all the Pods have their original Deployment Target which might be lower than 12.0 and therefor the build resp. the `pod lib lint` command fails with the `SDK does not contain 'libarclite' at the path ...` error.\r\n\r\nForking Cocoapods and use a custom version with a \"hotfix\" as described in https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/12033#issuecomment-1690384747 is not an option for me.\r\n\r\nQuestions:\r\n- Is this actually an Xcode or a Cocoapods issue?\r\n- If it's a Cocoapods issue: are there any plans for a fix?\r\n- Does anyone knows another workaround than the mentioned above?\r\n\r\nAny help is very much appreciated!","@orta Today, trying to `pod trunk push` the new GRDB version with Xcode 14.2, in order to avoid this issue, I got the following error:\r\n\r\n```\r\n% xcode-select -p\r\n\/Applications\/Xcode.app\/Contents\/Developer\r\n\r\n% xcodebuild -version\r\nXcode 14.2\r\nBuild version 14C18\r\n\r\n% pod --version\r\n1.14.3\r\n\r\n% pod trunk push --allow-warnings\r\n[!] Found podspec `GRDB.swift.podspec`\r\nUpdating spec repo `trunk`\r\nValidating podspec\r\n -> GRDB.swift (6.24.2)\r\n    - ERROR | [iOS] unknown: Encountered an unknown error (unexpected token at 'objc[78819]: Class XROS1_0SimRuntime is implemented in both \/Library\/Developer\/CoreSimulator\/Volumes\/xrOS_21N5259j\/Library\/Developer\/CoreSimulator\/Profiles\/Runtimes\/xrOS 1.0.simruntime\/Contents\/MacOS\/xrOS 1.0 (0x102cf40e0) and \/Library\/Developer\/CoreSimulator\/Volumes\/xrOS_21N305\/Library\/Developer\/CoreSimulator\/Profiles\/Runtimes\/xrOS 1.0.simruntime\/Contents\/MacOS\/xrOS 1.0 (0x102d080e0). One of the two will be used. Which one is undefined.\r\n') during validation.\r\n\r\n[!] The spec did not pass validation, due to 1 error.\r\n```\r\n\r\nI don't know the source of the error, but the presence of `xrOS` (aka visionOS) in the error message makes me think that the mere presence of Xcode 15.2 on the drive is enough to have Xcode 14.2 fail.\r\n\r\nThis issue has turned into a total blocker.\r\n\r\nToday, GRDB 6.24.2 is the first version that is only available with SPM, and not available with CocoaPods. CocoaPods users are no longer able to upgrade their copy of GRDB. This is concerning, but users have a workaround: they can switch to SPM (more or less easily). What's the real bummer is that GRDB+SQLCipher is *only* available through CocoaPods, due to the [incompatibility of SPM with SQLCipher](https:\/\/github.com\/sqlcipher\/sqlcipher\/issues\/371). I have no solution to suggest to GRDB+SQLCipher users as long as this issue exists.\n\n---\n\nEDIT: GRDB+SQLCipher users can visit this discussion for more information: https:\/\/github.com\/groue\/GRDB.swift\/discussions\/1495","To work around the `xrOS` issue, open `\/Library\/Developer\/CoreSimulator\/Volumes` in the Finder, and delete any extra copies of xrOS simulators.  You'll need to repeat after restarting the Mac.","I just upgraded to Sonoma, which has invalidated my copy of Xcode 14.2. Thank you for all those years of services, Cocoapods! Time for a farewell \ud83d\ude4f\u2764\ufe0f "],"labels":["t1:enhancement","d1:easy","s2:confirmed","help wanted"]},{"title":"[question] Get dynamically search path from my generated framework","body":"Hi,\r\n\r\nHow i can get dynamically the search path in my Podfile in this case:\r\n\r\n```\r\npost_integrate do |installer|\r\n  project =  installer.aggregate_targets[0].user_project\r\n  project.targets.each do |target|\r\n    target.build_configurations.each do |config|\r\n      if NATIVIUM_LIBRARY_LOCAL_PATH\r\n        config.build_settings[\"USER_HEADER_SEARCH_PATHS\"] = \"$(inherited) \"\r\n        config.build_settings[\"USER_HEADER_SEARCH_PATHS\"] << \"${PROJECT_DIR}\/..\/..\/..\/dist\/ios\/Release\/nativium.xcframework\/ios-x86_64-simulator\/nativium.framework\/Headers\"\r\n      else\r\n        config.build_settings.delete \"USER_HEADER_SEARCH_PATHS\"\r\n      end\r\n    end\r\n  end\r\n\r\n  project.save\r\nend\r\n```\r\n\r\nThis is part of my project called Nativium:\r\nhttps:\/\/github.com\/nativium\/nativium\/blob\/main\/apps\/ios\/runner\/Podfile#L52-L63\r\n\r\nObjective:\r\n\r\n1. Get the first folder here: `${PROJECT_DIR}\/..\/..\/..\/dist\/ios\/` (generally debug\/release)\r\n2. Plus \"nativium.xcframework\"\r\n3. Plus first folder on step 2\r\n4. Plus \"\/nativium.framework\"\r\n5. Plus \"\/Headers\"\r\n\r\nCan anyone help me? \r\n\r\nThanks.","comments":[],"labels":["t4:question"]},{"title":"[DOC] list of all PODXXXX variables","body":"Where can i find a list of all POD... variables like\r\nPODS_CONFIGURATION_BUILD_DIR\r\nPOD_ROOT \r\netc \r\n","comments":["Good idea, from a quick look in the codebase there's not a single central place listing them all - it'd be a good community contribution to document these \ud83d\udc4d\ud83c\udffb "],"labels":["t1:enhancement"]},{"title":"Can't build a old quasar X xcode project on M1 mac","body":"### Command\r\n\r\n```\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/bin\/pod install\r\n```\r\n\r\n### Report\r\n\r\n* What did you do?\r\n\r\n* What did you expect to happen?\r\n\r\n* What happened instead?\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.11.3\r\n        Ruby : ruby 3.1.1p18 (2022-02-18 revision 53f5fc4236) [arm64-darwin21]\r\n    RubyGems : 3.3.7\r\n        Host : macOS 12.0 (21A344)\r\n       Xcode : 13.3 (13E113)\r\n         Git : git version 2.32.0 (Apple Git-132)\r\nRuby lib dir : \/opt\/homebrew\/Cellar\/ruby\/3.1.1\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.5\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.1\r\ncocoapods-trunk       : 1.6.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '11.0'\r\nuse_frameworks!\r\n\r\n# workaround to avoid Xcode caching of Pods that requires\r\n# Product -> Clean Build Folder after new Cordova plugins installed\r\n# Requires CocoaPods 1.6 or newer\r\ninstall! 'cocoapods', :disable_input_output_paths => true\r\n\r\ndef capacitor_pods\r\n  # Automatic Capacitor Pod dependencies, do not delete\r\n  pod 'Capacitor', :path => '..\/..\/node_modules\/@capacitor\/ios'\r\n  pod 'CapacitorCordova', :path => '..\/..\/node_modules\/@capacitor\/ios'\r\n  \r\n  #\u00a0Do not delete\r\nend\r\n\r\ntarget 'App' do\r\n  capacitor_pods\r\n  # Add your Pods here\r\nend\r\n```\r\n\r\n### Error\r\n\r\n```\r\nErrno::EISDIR - Is a directory @ io_fread - \/Users\/lewis\/Desktop\/MAIA\/maia_app\/frontend\/src-capacitor\/ios\/App\/App.xcodeproj\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/xcodeproj-1.21.0\/lib\/xcodeproj\/config.rb:269:in `read'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/xcodeproj-1.21.0\/lib\/xcodeproj\/config.rb:269:in `read'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/xcodeproj-1.21.0\/lib\/xcodeproj\/config.rb:269:in `extract_hash'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/xcodeproj-1.21.0\/lib\/xcodeproj\/config.rb:65:in `initialize'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/xcodeproj-1.21.0\/lib\/xcodeproj\/project\/object\/build_configuration.rb:241:in `new'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/xcodeproj-1.21.0\/lib\/xcodeproj\/project\/object\/build_configuration.rb:241:in `config'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/xcodeproj-1.21.0\/lib\/xcodeproj\/project\/object\/build_configuration.rb:97:in `resolve_build_setting'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/xcodeproj-1.21.0\/lib\/xcodeproj\/project\/object\/configuration_list.rb:78:in `block in get_setting'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/xcodeproj-1.21.0\/lib\/xcodeproj\/project\/object\/configuration_list.rb:77:in `each'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/xcodeproj-1.21.0\/lib\/xcodeproj\/project\/object\/configuration_list.rb:77:in `get_setting'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/xcodeproj-1.21.0\/lib\/xcodeproj\/project\/object\/native_target.rb:55:in `resolved_build_setting'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer\/analyzer\/target_inspector.rb:226:in `block in compute_swift_version_from_targets'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer\/analyzer\/target_inspector.rb:220:in `each'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer\/analyzer\/target_inspector.rb:220:in `inject'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer\/analyzer\/target_inspector.rb:220:in `compute_swift_version_from_targets'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer\/analyzer\/target_inspector.rb:45:in `compute_results'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer\/analyzer.rb:1193:in `block (3 levels) in inspect_targets_to_integrate'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer\/analyzer.rb:1191:in `each'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer\/analyzer.rb:1191:in `block (2 levels) in inspect_targets_to_integrate'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer\/analyzer.rb:1189:in `each'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer\/analyzer.rb:1189:in `block in inspect_targets_to_integrate'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/user_interface.rb:64:in `section'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer\/analyzer.rb:1184:in `inspect_targets_to_integrate'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer\/analyzer.rb:106:in `analyze'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer.rb:416:in `analyze'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer.rb:241:in `block in resolve_dependencies'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/user_interface.rb:64:in `section'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer.rb:240:in `resolve_dependencies'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/installer.rb:161:in `install!'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/command\/install.rb:52:in `run'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/claide-1.1.0\/lib\/claide\/command.rb:334:in `run'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/command.rb:52:in `run'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/gems\/cocoapods-1.11.3\/bin\/pod:55:in `<top (required)>'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/bin\/pod:25:in `load'\r\n\/opt\/homebrew\/Cellar\/cocoapods\/1.11.3\/libexec\/bin\/pod:25:in `<main>'\r\n```","comments":["Please upload sample app if possible"],"labels":["s1:awaiting input","s6:need sample"]},{"title":"Unable to register `pre_integrate` and `post_integrate` hooks from plugins","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI tried to create CocoaPods plugin with `pre_integrate` and `post_integrate` hooks.\r\n\r\n## What did you expect to happen?\r\n\r\nI expected these hooks to be run just like it runs for `pre_integrate` and `post_integrate` hooks in `Podfile`.\r\n\r\n## What happened instead?\r\n\r\nNone of the hooks was executed.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.11.3\r\n        Ruby : ruby 2.6.8p205 (2021-07-07 revision 67951) [universal.arm64e-darwin21]\r\n    RubyGems : 3.0.3.1\r\n        Host : macOS 12.3 (21E230)\r\n       Xcode : 13.3 (13E113)\r\n         Git : git version 2.32.0 (Apple Git-132)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : cocoapods - git - https:\/\/github.com\/CocoaPods\/Specs.git @ 12ede23c2ffaf6899c92c0063954ff040625ade5\r\n\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-archive                  : 0.0.2\r\ncocoapods-deintegrate              : 1.0.5\r\ncocoapods-packager                 : 1.5.0\r\ncocoapods-plugins                  : 1.0.0\r\ncocoapods-rome                     : 1.0.1\r\ncocoapods-search                   : 1.0.1\r\ncocoapods-stats                    : 1.1.0\r\ncocoapods-trunk                    : 1.6.0\r\ncocoapods-try                      : 1.2.0\r\ncocoapods-user-defined-build-types : 0.0.7\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\nplatform :ios, '14.0'\r\nplugin 'cocoapods-embed-flutter'\r\n\r\ntarget 'ios_app' do\r\n  # Comment the next line if you don't want to use dynamic frameworks\r\n  use_frameworks!\r\n\r\n  # Pods for ios_app\r\n  pub 'flutter_module', :path => '..\/'\r\nend\r\n\r\npre_integrate do |installer|\r\n  puts \"podfile pre integrate\"\r\nend\r\n```\r\n\r\n## Additional observations\r\n\r\nI noticed the following functions are defined to call `pre_integrate` and `post_integrate` hooks for plugins respectively. But I couldn't find these functions called from any where. Are these hooks intentionally disabled for plugins? I couldn't find any info in docs regarding this.\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/3eb1bd365b97af2677e80531f77310c4bb69d9bd\/lib\/cocoapods\/installer.rb#L703\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/3eb1bd365b97af2677e80531f77310c4bb69d9bd\/lib\/cocoapods\/installer.rb#L726\r\n\r\n","comments":["Interesting, they are documented as being available in the podfile: https:\/\/guides.cocoapods.org\/syntax\/podfile.html#pre_integrate - looks like a bug, open to PRs","> Interesting, they are documented as being available in the podfile: https:\/\/guides.cocoapods.org\/syntax\/podfile.html#pre_integrate - looks like a bug, open to PRs\r\n\r\n@orta I will be happy to help out, but I need some guidance:\r\n1. Should I add plugin `pre_integrate` after this line?\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/3eb1bd365b97af2677e80531f77310c4bb69d9bd\/lib\/cocoapods\/installer.rb#L182\r\n2. and plugin `post_integrate` after this line?\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/3eb1bd365b97af2677e80531f77310c4bb69d9bd\/lib\/cocoapods\/installer.rb#L930\r\n","Oh, you want plugins to have extra hooks - sorry, I read this the other way. I guess I still don't see a problem with adding this, I feel like there might be other hooks which handle the same point ( for example cocoapods-keys happens pre-integrate I thought) but your implementation kinda sounds alright. \r\n\r\nI'd recommend first writing some tests and then just giving it a stab","> Oh, you want plugins to have extra hooks - sorry, I read this the other way. I guess I still don't see a problem with adding this, I feel like there might be other hooks which handle the same point ( for example cocoapods-keys happens pre-integrate I thought) but your implementation kinda sounds alright.\r\n> \r\n> I'd recommend first writing some tests and then just giving it a stab\r\n\r\n@orta is there any reason for these hooks not being available for plugins? I wasn't even aware that these hooks aren't available for plugins, since I couldn't find anything on docs regarding this and I can see the unit test cases for all the plugin hooks including `pre_integrate` and `post_integrate`:\r\n\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/7577294cd5e6594bd7d6e84f2048fd792a7c520d\/spec\/unit\/installer_spec.rb#L1033\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/7577294cd5e6594bd7d6e84f2048fd792a7c520d\/spec\/unit\/installer_spec.rb#L1040\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/7577294cd5e6594bd7d6e84f2048fd792a7c520d\/spec\/unit\/installer_spec.rb#L1048\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/7577294cd5e6594bd7d6e84f2048fd792a7c520d\/spec\/unit\/installer_spec.rb#L1056\r\n\r\nAlso, can  you point me how you are using `pre_integrate` hooks in `cocoapods-keys` I only found [`pre_install`](https:\/\/github.com\/orta\/cocoapods-keys\/blob\/4153cfc7621a89c7ae3f96bb0285d9602f41e267\/lib\/plugin.rb#L10) and [`post_install`](https:\/\/github.com\/orta\/cocoapods-keys\/blob\/4153cfc7621a89c7ae3f96bb0285d9602f41e267\/lib\/plugin.rb#L50) hooks.\r\n","I think those were missed and not invoked for plugins.","> I think those were missed and not invoked for plugins.\n\n@dnkoutso thanks for clarifying, is there any existing work on resolving this or should I create a PR?"],"labels":["t2:defect"]},{"title":"XCFramework with third party dependency dyld: Symbol not found version 1.10+","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [ ] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n- I have a build of a XCFramework that is test and working as expected. It has multiple dependency which are the following and this is the setup for the framework:\r\n\r\n```\r\n# If any errors please use pod deintegrate and pod install again.\r\nplatform :ios, '14.5'\r\n\r\ntarget 'TestSDK' do\r\n  # Comment the next line if you don't want to use dynamic frameworks\r\n  use_frameworks!\r\n\r\n  # Pods for TestSDK\r\n  pod 'SQLite.swift', '~> 0.13.0'\r\n  pod 'SwiftCBOR', :git => 'https:\/\/github.com\/myfreeweb\/SwiftCBOR'\r\n  pod 'SwiftProtobuf', '~> 1.0'\r\n\r\n  target 'TestSDKTests' do\r\n    # Pods for testing\r\n  end\r\n\r\n  target 'InstrumentedApp' do\r\n  \tpod 'SQLite.swift', '~> 0.13.0'\r\n  pod 'SwiftCBOR', :git => 'https:\/\/github.com\/myfreeweb\/SwiftCBOR'\r\n  pod 'SwiftProtobuf', '~> 1.0'\r\n  end\r\n\r\n  target 'InstrumentedAppUITests' do\r\n  \t# Pods for testing\r\n  end\r\n\r\nend\r\n```\r\nI have created the XCFramework and have an application that should use it with the dependency added in that project. And the current one should only use them. \r\n\r\n## What did you expect to happen?\r\n\r\nI expect the other project to work normally. I currently used cocoapods 1.8.4 for the development but the pod lint have issues so i have upgraded to 1.10+ and all don't really work for me. Otherwise the build 1.8.4 works perfectly fine pulling all the dependency in the dummy project that adds my XCFramework.\r\n\r\n## What happened instead?\r\n\r\nThis are the issues i am facing with all version above 1.8.4: \r\n\r\n```\r\ndyld: Symbol not found: _$s6SQLite10ConnectionC8LocationO8inMemoryyA2EmFWC\r\n  Referenced from: \/private\/var\/containers\/Bundle\/Application\/4A52E5A2-2A12-457C-A0AC-BADD4A3F6BFB\/NikiApp.app\/Frameworks\/TestSDK.framework\/TestSDK\r\n  Expected in: \/private\/var\/containers\/Bundle\/Application\/4A52E5A2-2A12-457C-A0AC-BADD4A3F6BFB\/NikiApp.app\/Frameworks\/SQLite.framework\/SQLite\r\n in \/private\/var\/containers\/Bundle\/Application\/4A52E5A2-2A12-457C-A0AC-BADD4A3F6BFB\/NikiApp.app\/Frameworks\/TestSDK.framework\/TestSDK\r\ndyld: launch, loading dependent libraries\r\nDYLD_LIBRARY_PATH=\/usr\/lib\/system\/introspection\r\nDYLD_INSERT_LIBRARIES=\/Developer\/usr\/lib\/libBacktraceRecording.dylib:\/Developer\/usr\/lib\/libMainThreadChecker.dylib:\/Developer\/Library\/PrivateFrameworks\/DTDDISupport.framework\/libViewDebuggerSupport.dylib\r\n\r\n```\r\n\r\n## CocoaPods Environment\r\n\r\n\u2139 Please replace these two lines with the output of `pod env`.\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.0\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.2.1 (20D75)\r\n       Xcode : 12.5.1 (12E507)\r\n         Git : git version 2.15.1\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : cocoapods - git - https:\/\/github.com\/CocoaPods\/Specs.git @ 92e49e46043b3564d6d9ac5cb4b1f278c5bebefc\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-clean       : 0.0.1\r\ncocoapods-deintegrate : 1.0.5\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.1\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.6.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\nHere are some other settings i have for the project:\r\n\r\n- Build Library for Distribution\r\n- Validate Workspace\r\n- Enable Bitcode\r\n\r\nBut with all these settings it seems to work straight away on 1.8.4 and not in the version above. I have read and people suggested that there is some workaround that can be done with FRAMEWORK_SEARCH_PATHS but i have limited knowledge and would like to get some help on that. \r\n\r\n\r\n## Project that demonstrates the issue\r\n\r\nCurrently i don't have one that i can share but it's quite simple to reproduce i believe if it's a must i will provide the project. I really appreciate the help and would be amazing if i could solve it. \r\n\r\n","comments":["did you try cocoapods 1.11.x?","without a sample app it will be hard to debug\/diagnose this.","Yes i have tried all the 1.11 and have the same issue. I have upgraded as you suggested last time to the latest version. Which solves the linting and both project compiles but when it runs it have this issue on the app project when adding the XCFramework manually to the project and usually should find dependency automatically like with 1.8.4 but with the new versions it doesn't ","OK, well without a sample app this is hard to diagnose and provide assistance.","Absolutely will try to provide that first thing tomorrow since i am in GMT+2. Thank you for the quick response i will try to replicate it in a sample project. Do you need the application or the framework or both? ","I have tried having the following which works and i am using version 1.10.0 right now. It's used in both projects framework and app\r\n```\r\nuse_frameworks! :linkage => :static \r\n```\r\nWhat i get as output is the following\r\n```\r\nobjc[367]: Class PodsDummy_SQLite_swift is implemented in both \/private\/var\/containers\/Bundle\/Application\/7ACF543F-7E06-4FE7-95AD-6DC441A5A1A4\/NikiApp.app\/Frameworks\/TestSDK.framework\/TestSDK (0x101c9e408) and \/private\/var\/containers\/Bundle\/Application\/7ACF543F-7E06-4FE7-95AD-6DC441A5A1A4\/NikiApp.app\/NikiApp (0x101125770). One of the two will be used. Which one is undefined.\r\nobjc[367]: Class _TtC6SQLiteP33_AC67620244ED67AEDED85ABF4E1A194813SQLiteEncoder is implemented in both \/private\/var\/containers\/Bundle\/Application\/7ACF543F-7E06-4FE7-95AD-6DC441A5A1A4\/NikiApp.app\/Frameworks\/TestSDK.framework\/TestSDK (0x101ca5de0) and \/private\/var\/containers\/Bundle\/Application\/7ACF543F-7E06-4FE7-95AD-6DC441A5A1A4\/NikiApp.app\/NikiApp (0x101125a70). One of the two will be used. Which one is undefined.\r\n\r\n```\r\n\r\nWhat i use and i think i need more than the static is dynamic which doesn't seem to find the dependency\r\n\r\n```\r\nuse_frameworks! :linkage => :dynamic \r\n```\r\nWhat i get as output is the following\r\n```\r\ndyld: Symbol not found: _$s6SQLite10ConnectionC8LocationO8inMemoryyA2EmFWC\r\n  Referenced from: \/private\/var\/containers\/Bundle\/Application\/4A52E5A2-2A12-457C-A0AC-BADD4A3F6BFB\/NikiApp.app\/Frameworks\/TestSDK.framework\/TestSDK\r\n  Expected in: \/private\/var\/containers\/Bundle\/Application\/4A52E5A2-2A12-457C-A0AC-BADD4A3F6BFB\/NikiApp.app\/Frameworks\/SQLite.framework\/SQLite\r\n in \/private\/var\/containers\/Bundle\/Application\/4A52E5A2-2A12-457C-A0AC-BADD4A3F6BFB\/NikiApp.app\/Frameworks\/TestSDK.framework\/TestSDK\r\ndyld: launch, loading dependent libraries\r\nDYLD_LIBRARY_PATH=\/usr\/lib\/system\/introspection\r\nDYLD_INSERT_LIBRARIES=\/Developer\/usr\/lib\/libBacktraceRecording.dylib:\/Developer\/usr\/lib\/libMainThreadChecker.dylib:\/Developer\/Library\/PrivateFrameworks\/DTDDISupport.framework\/libViewDebuggerSupport.dylib\r\n\r\n```\r\n\r\n```\r\nuse_frameworks! :linkage => :dynamic on the pod and use_frameworks! :linkage => :static on the app i get the following \r\n```\r\nWhat i get as output is the following\r\n```\r\ndyld: Library not loaded: @rpath\/SQLite.framework\/SQLite\r\n  Referenced from: \/private\/var\/containers\/Bundle\/Application\/2F9208DE-8D40-4D2B-830B-DC589BDCDB81\/NikiApp.app\/Frameworks\/TestSDK.framework\/TestSDK\r\n  Reason: image not found\r\ndyld: launch, loading dependent libraries\r\nDYLD_LIBRARY_PATH=\/usr\/lib\/system\/introspection\r\nDYLD_INSERT_LIBRARIES=\/Developer\/usr\/lib\/libBacktraceRecording.dylib:\/Developer\/usr\/lib\/libMainThreadChecker.dylib:\/Developer\/Library\/PrivateFrameworks\/DTDDISupport.framework\/libViewDebuggerSupport.dylib\r\n\r\n```\r\n\r\nIf i don't put anything i get Framework not found error on app project.\r\n\r\nFrom this i should be able to get some suggestions right? Once again it's highly appreciated. I believe with the old version it was linked dynamically because i never got duplicate symbols on 1.8.4","This is my XCFramework spec and what i noticed is that the Pods_TestFramework stay in red. And then inside the XCFramework they are grayout and in the other project that i have for testing they seem to be build. \r\n\r\n```\r\n# If any errors please use pod deintegrate and pod install again.\r\nplatform :ios, '14.5'\r\n\r\n# use_modular_headers!\r\n\r\nworkspace 'TestSDK'\r\n\r\ntarget 'TestSDK' do\r\n  # Comment the next line if you don't want to use dynamic frameworks\r\n  use_frameworks! \r\n\r\n  # Pods for TestSDK\r\n  pod 'SQLite.swift', :git => 'https:\/\/github.com\/stephencelis\/SQLite.swift', :tag => '0.13.1'\r\n  pod 'SwiftCBOR', :git => 'https:\/\/github.com\/myfreeweb\/SwiftCBOR'\r\n  pod 'SwiftProtobuf', '~> 1.0'\r\n\r\n  target 'TestSDKTests' do\r\n    # Pods for testing\r\n    inherit! :search_paths\r\n  end\r\n\r\n  target 'InstrumentedApp' do\r\n    inherit! :search_paths\r\n  end\r\n\r\n  target 'InstrumentedAppUITests' do\r\n  \t# Pods for testing\r\n    inherit! :search_paths\r\n  end\r\n\r\nend\r\n```\r\n\r\nWhat i do is pod install they are do not embed and then required on link. I don't really understand what the issue can be...","Just to give you what solved the problem for me and i would still request a solution that could fix this potential issue with the cocoapods new versions. \r\n\r\nHere is what solved the problem for me just using use_frameworks and adding this to the client app:\r\n\r\n```\r\npost_install do |installer|\r\n        installer.pods_project.targets.each do |target|\r\n          target.build_configurations.each do |config|\r\n            config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\r\n          end\r\n        end\r\n      end\r\n\r\n```\r\n\r\nAfter the 20h of debugging finally managed to get to the bottom of the problem. ","I have similar issue under Rosetta with these settings in a client's app Podfile where integrated XCframework with 3rd party dependencies:\r\n```\r\nconfig.build_settings.delete 'IPHONEOS_DEPLOYMENT_TARGET'\r\nconfig.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'\r\n```\r\n\r\ndescribed here https:\/\/github.com\/socketio\/socket.io-client-swift\/issues\/1426","> Just to give you what solved the problem for me and i would still request a solution that could fix this potential issue with the cocoapods new versions.\r\n> \r\n> Here is what solved the problem for me just using use_frameworks and adding this to the client app:\r\n> \r\n> ```\r\n> post_install do |installer|\r\n>         installer.pods_project.targets.each do |target|\r\n>           target.build_configurations.each do |config|\r\n>             config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\r\n>           end\r\n>         end\r\n>       end\r\n> ```\r\n> \r\n> After the 20h of debugging finally managed to get to the bottom of the problem.\r\n\r\nI've been stuck in this problem for a long time, you saved my life, RESPECT ! \ud83d\ude80","Happened with pod version `1.12.0` and spent almost a month getting to this solution!! Thanks, @nikiizvorski! \r\nIt seems this issue happens when any dependency of my custom lib is \"static framework\". \ud83e\udd14 \r\n\r\n\r\n> Just to give you what solved the problem for me and i would still request a solution that could fix this potential issue with the cocoapods new versions.\r\n> \r\n> Here is what solved the problem for me just using use_frameworks and adding this to the client app:\r\n> \r\n> ```\r\n> post_install do |installer|\r\n>         installer.pods_project.targets.each do |target|\r\n>           target.build_configurations.each do |config|\r\n>             config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\r\n>           end\r\n>         end\r\n>       end\r\n> ```\r\n> \r\n> After the 20h of debugging finally managed to get to the bottom of the problem.\r\n\r\n"],"labels":["s6:need sample"]},{"title":"Swift pod dependency Objective-C Pod,Pod lint error!","body":"I make a pod by Swift which is dependency a OC Pod(QuickMediator),I install  in Example Workspace work well.\r\n\r\npodspec:\r\n\r\n```\r\n  s.pod_target_xcconfig = {'DEFINES_MODULE' => 'YES' }\r\n  s.ios.deployment_target = '13.0'\r\n  s.swift_versions = ['5.0']\r\n  s.source_files = 'QuickMediator\/Classes\/**\/*'\r\n  s.dependency 'CTMediator'\r\n```\r\n\r\n\r\nWhen I pod lint, it return error by follow, Is there anything I  miss to config in podspec.\r\n\r\npod lib lint QuickMediator.podspec --allow-warnings --verbose --use-libraries --no-clean\r\n\r\n  CDN: trunk Relative path: CocoaPods-version.yml exists! Returning local\r\n  because checking is only perfomed in repo update\r\n    QuickMediator (1.0.0) - Analyzing on iOS 13.0 platform.\r\n  Preparing\r\n\r\nAnalyzing dependencies\r\n\r\nInspecting targets to integrate\r\n  Using `ARCHS` setting to build architectures of target `Pods-App`: (``)\r\n\r\nFetching external sources\r\n-> Fetching podspec for `QuickMediator` from `\/Users\/corotata\/Documents\/Project\/QuickMediator`\r\n\r\nComparing resolved specification to the sandbox manifest\r\n  A CTMediator\r\n  A QuickMediator\r\n\r\nDownloading dependencies\r\n\r\n-> Installing CTMediator (46)\r\n  > Copying CTMediator from\r\n  `\/Users\/corotata\/Library\/Caches\/CocoaPods\/Pods\/Release\/CTMediator\/46-f1cf5` to\r\n  `..\/..\/..\/..\/..\/private\/var\/folders\/v8\/dlns73gj68b7lkv8bc2xbrl40000gn\/T\/CocoaPods-Lint-20211111-3111-z3lfc4-QuickMediator\/Pods\/CTMediator`\r\n\r\n-> Installing QuickMediator (1.0.0)\r\n  - Running pre install hooks\r\n  - Writing Lockfile in\r\n  `..\/..\/..\/..\/..\/var\/folders\/v8\/dlns73gj68b7lkv8bc2xbrl40000gn\/T\/CocoaPods-Lint-20211111-3111-z3lfc4-QuickMediator\/Podfile.lock`\r\n  - Writing Manifest in\r\n  `..\/..\/..\/..\/..\/private\/var\/folders\/v8\/dlns73gj68b7lkv8bc2xbrl40000gn\/T\/CocoaPods-Lint-20211111-3111-z3lfc4-QuickMediator\/Pods\/Manifest.lock`\r\n -> QuickMediator (1.0.0)\r\n    - ERROR | [iOS] unknown: Encountered an unknown error (The following Swift pods cannot yet be integrated as static libraries:\r\n\r\nThe Swift pod `QuickMediator` depends upon `CTMediator`, which does not define modules. To opt into those targets generating module maps (which is necessary to import them from Swift when building as static libraries), you may set `use_modular_headers!` globally in your Podfile, or specify `:modular_headers => true` for particular dependencies.\r\n","comments":["Did you pass `--use-modular-headers` during lint invocation?"],"labels":["s1:awaiting input"]},{"title":"Pod with XCFramework (BUILD_LIBRARY_FOR_DISTRIBUTION) needs run 'pod install' twice","body":"# Report\r\n\r\nNeed to run `pod install` twice to configure dependency pods correctly when containing pod is binary.  \r\n\r\n## What did you do?\r\n\r\nI have repo with only 2 files: `LibA.podspec` and `LibA.xcframework`.  `LibA` is dependent on other 3rd party libs.\r\nPodspec for `LibA`:\r\n```\r\nPod::Spec.new do |spec|\r\n\r\n  spec.name         = \"LibA\"\r\n  spec.version      = \"0.0.1\"\r\n\r\n  spec.platform     = :ios, \"11.0\"\r\n  spec.swift_version = \"5.3\"\r\n  spec.cocoapods_version = '>= 1.10.0'\r\n\r\n  spec.source       = { :git => \"path\/to\/lib\", :tag => spec.version }\r\n  spec.vendored_frameworks = 'LibA.xcframework'\r\n\r\n  spec.framework  = \"UIKit\"\r\n\r\n  spec.pod_target_xcconfig = { 'BUILD_LIBRARY_FOR_DISTRIBUTION' => 'YES' }\r\n\r\n  spec.dependency \"Kingfisher\", \"~> 5.15.7\"\r\n  spec.dependency \"lottie-ios\", \"~> 3.1.9\"\r\n\r\nend\r\n```\r\n\r\n`BUILD_LIBRARY_FOR_DISTRIBUTION` is set  in Podspec.\r\n\r\n\r\n1. Create example app\r\n2. Add `LibA` dependency to podfile\r\n3. Run `pod install`\r\n\r\n\r\n## What did you expect to happen?\r\n\r\nPods are configured correctly and app runs without errors.\r\n\r\n## What happened instead?\r\n\r\nOnly `LibA` is configured with option `BUILD_LIBRARY_FOR_DISTRIBUTION` and app runs with `Symbol not found` error.\r\n\r\nI have to run `pod install` second time to configure rest of libs with option  `BUILD_LIBRARY_FOR_DISTRIBUTION`\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.11.2\r\n        Ruby : ruby 3.0.0p0 (2020-12-25 revision 95aff21468) [x86_64-darwin19]\r\n    RubyGems : 3.2.3\r\n        Host : macOS 11.6 (20G165)\r\n       Xcode : 13.0 (13A233)\r\n         Git : git version 2.30.1\r\nRuby lib dir : \/Users\/p\/.rbenv\/versions\/3.0.0\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/p\/.rbenv\/versions\/3.0.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-acknowledgements : 1.3.0\r\ncocoapods-deintegrate      : 1.0.4\r\ncocoapods-plugins          : 1.0.0\r\ncocoapods-search           : 1.0.0\r\ncocoapods-trunk            : 1.5.0\r\ncocoapods-try              : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\ntarget 'TestApp' do\r\n  use_frameworks!\r\n\r\n  pod 'LibA', :path => '..\/LibA'\r\n\r\nend","comments":["Can you upload a sample app\/repo? thanks!","I am facing a similar issue. Can you please help what is the issue here? For me it is not working even if I do pod install multiple times.\r\n\r\nHere is the example project.\r\n\r\n[XCFrameworkTest.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/8495746\/XCFrameworkTest.zip)\r\n\r\n"],"labels":["s6:need sample"]},{"title":"pod spec lint error with `fetchRequest()`","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n\u2139 Please replace these two lines with what you did.  \r\n`pod spec lint`\r\n\r\n## What did you expect to happen?\r\n\r\n\u2139 Please replace these two lines with what you expected to happen.  \r\nlint to suceed\r\n\r\n## What happened instead?\r\n\r\n\u2139 Please replace these two lines with of what happened instead.  \r\nLint always fails\r\n\r\n## CocoaPods Environment\r\n\r\n\u2139 Please replace these two lines with the output of `pod env`.\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.11.2\r\n        Ruby : ruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-darwin20]\r\n    RubyGems : 3.1.4\r\n        Host : macOS 11.6 (20G165)\r\n       Xcode : 13.0 (13A233)\r\n         Git : git version 2.30.1 (Apple Git-130)\r\nRuby lib dir : \/Users\/***\/.rvm\/rubies\/ruby-2.7.2\/lib\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/***\/.rvm\/gems\/ruby-2.7.2\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.5\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.1\r\ncocoapods-trunk       : 1.6.0\r\ncocoapods-try         : 1.2.0\r\nslather               : 2.7.2\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\nsource 'https:\/\/cdn.cocoapods.org\/'\r\nplatform :ios, '10.0'\r\nuse_frameworks!\r\n\r\n\r\ndef shared_pods\r\n    pod 'ReachabilitySwift'\r\n    pod 'XCGLogger'\r\n    pod 'KeychainAccess'\r\n    pod 'SSZipArchive', '2.2.3'\r\n    pod 'AWSCore', :inhibit_warnings => true\r\n    pod 'AWSS3', :inhibit_warnings => true\r\n    pod 'AWSSQS', :inhibit_warnings => true\r\nend\r\n\r\ntarget :TestApp do\r\n    shared_pods\r\n    pod 'Firebase\/Analytics'\r\nend\r\n\r\ntarget :MyLibrary do\r\n  shared_pods\r\nend\r\n```\r\n\r\nThe error is this and out of sudden as this did not happen in the past:\r\n`error: type 'My_NSManagedObject' has no member 'fetchRequest'`\r\nXCode does not give this build error, the project runs as expected and also xcodebuild runs successfully if I build the project from command line. The only issue with pod spec lint.","comments":["Please upload a sample repo with the podspec that fails.","@dnkoutso Unfortunately I can't because it is a private repo. Is there any other way to reproduce this?","@dnkoutso Any news on this? I recreated the NSManagedObject subclasses from the Editor menu in XCode without any customisation from my side and still `pod spec lint` fails whenever using the default implementation of `fetchRequest()` for an entity. The fail log is:\r\n\r\n`- ERROR | [iOS] xcodebuild:  ***.swift:161:50: error: type 'My_Class' has no member 'fetchRequest'\r\n    - ERROR | [iOS] xcodebuild:  ***.swift:386:50: error: type 'My_Class' has no member 'fetchRequest'\r\n    - ERROR | [iOS] xcodebuild:  ***.swift:404:39: error: type 'My_Class' has no member 'fetchRequest'\r\n    - ERROR | [iOS] xcodebuild:  ***.swift:422:39: error: type 'My_Class' has no member 'fetchRequest'\r\n    - ERROR | [iOS] xcodebuild:  ***.swift:441:39: error: type 'My_Class' has no member 'fetchRequest'\r\n    - ERROR | [iOS] xcodebuild:  ***.swift:473:35: error: type 'My_Class' has no member 'fetchRequest'\r\n    - ERROR | [iOS] xcodebuild:  ***.swift:562:43: error: type 'My_Class' has no member 'fetchRequest'\r\n    - ERROR | [iOS] xcodebuild:  ***.swift:131:50: error: type 'My_Class' has no member 'fetchRequest'\r\n    - ERROR | [iOS] xcodebuild:  ***.swift:324:39: error: type 'My_Class' has no member 'fetchRequest'`\r\n\r\nJust a hint here: This happens since XCode 13 release. I am using my framework as a pod for many years now and I didn;t face such a problem in the past...","@dnkoutso I am happy to report that the issue was resolved after a refactor I did in the code. However, it is very strange to me that both compilations from XCode and `xcodebuild` were successful before the code change whereas from `pod spec` it was not. FYI the refactor I made is in the last answer in this [thread](https:\/\/stackoverflow.com\/a\/69737586\/5211065). Please update this issue as you see fit."],"labels":["s6:need sample"]},{"title":"Feature Request: Allow pod authors to vend both dynamic and static XCFrameworks","body":"\ud83c\udf08\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## Background\r\n\r\nCurrently when building from source pod users have the choice of how they want the pod linked (using `use_frameworks!, :linkage`). This doesn't work when pod authors are vending XCFrameworks, they need to choose between dynamic and static frameworks (I suppose this applies to frameworks as well as XCFrameworks).\r\n\r\n## Idea\r\n\r\n- Introduce schema to allow authors to specify a XCFramework with both static and dynamic variants.\r\n- Introduce something in Podfiles to allow users to choose which linkage they prefer (Could be separate or keep using the `:linkage` field on use_frameworks or the `:linkage` field on the `pod` line).\r\n- Ideally the source field would also allow for specifying the static vs dynamic links, so that you wouldn't have to download both, but this could be a future optimization. And maybe it isn't worth the complexity. Complexity could be reduced if the source area was where the static and dynamic variants, but that might make it less clear. This might complicate things for podspec that vend multiple frameworks where they aren't all dynamic or all static. Not entirely sure, would need more thought put into the exact api.\r\n\r\n## Workaround\r\n\r\nPod authors create a separate podspec for dynamic vs static linking. Then pod users can include PodStatic or PodDynamic. This works, but isn't ideal because it complicates the release pipeline for a pod. Pod authors need to manage 2 podspec and keep them in lockstep.\r\n\r\n## Project that demonstrates the issue\r\n\r\nDiscussion was started from: https:\/\/github.com\/facebook\/facebook-ios-sdk\/issues\/1910\r\n","comments":["Hi there thanks for filing this! is this related\/duplicated by https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/10262?","Maybe semi related. That looks like cocoapods doesn't support pods that vend both dynamic and static frameworks.\r\n\r\nThis request is to allow pod users to have the choice of linkage, similar to `use_frameworks! :linkage => :static` (Also for pod authors to be able to specify links to both to accompany this feature).","@cltnschlosser ah I see. There is this plugin https:\/\/github.com\/segiddins\/cocoapods-packing-cubes.\r\n\r\nWe have toyed with the idea of giving full power to consumers to choose how to pack and link pods in their projects however it was never fleshed out and some folks have been against it as it might over-complicate scenarios in cocoapods for integration.\r\n\r\nThe plugin gives you that power. I hope it works for 1.11.x but if it doesnt we can fix it. \r\n\r\n","That looks neat, but would it work for pods that are vended XCFrameworks?","@cltnschlosser good question, most likely not and works only when consuming pods via sources. Could be extended? I am still keeping this issue open if we decide to build it here.","> @cltnschlosser good question, most likely not and works only when consuming pods via sources. Could be extended? I am still keeping this issue open if we decide to build it here.\r\n\r\nI'm guessing this would require a change to the 'core' CocoaPods library since it would require changes to the Podspec but I'm also unsure since I haven't worked with these extensions and don't have a good sense of their limitations. Would this be possible to implement as an extension? This seems like a feature more maintainers than us would want but I'm not really sure how to judge that."],"labels":["t1:enhancement","d2:moderate"]},{"title":"Multiple Class is implemented in both warnings.","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n```bundle exec pod install```\r\n\r\n## What did you expect to happen?\r\n\r\nInstall all pod dependencies correctly.\r\n\r\n## What happened instead?\r\nThis issue exists only in Xcode 13. When using Xcode 12, everything works as expected.\r\nWhen using Xcode 13, I receive multiple warnings stating that various classes are implemented in two places. For example:\r\n\r\n```\r\nobjc[4956]: Class BUZipArchive is implemented in both \/System\/Library\/PrivateFrameworks\/BookUtility.framework\/BookUtility (0x1dd407148) and \/private\/var\/containers\/Bundle\/Application\/BEA3B9C7-0E59-442D-B1D7-B4F7950A490A\/JenkinsiOSTest.app\/JenkinsiOSTest (0x10532d0b0). One of the two will be used. Which one is undefined.\r\n```\r\nIt also causes a significant increase in build size. \r\nI've noticed that pods modify Pods-Unity-iPhone.*.xcconfig files by adding an entry with OTHER_LDFLAGS and a few others. \r\n\r\nThis issue doesn't happen when I add ```use_frameworks! :linkage => :static``` to Podfile or when I remove duplicate frameworks from OTHER_LDFLAGS section in  Pods-Unity-iPhone.*.xcconfig files.\r\n\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.11.0\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.5.2 (20G95)\r\n       Xcode : 13.0 (13A233)\r\n         Git : git version 2.30.1 (Apple Git-130)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : my-company-podspecs - git - git@bitbucket.orgMyCompany\/podspecs.git @ 6edd82a813d9baf4f04ab480d6eda5876d3e596f\r\n\r\n               my-company-podspecs-1 - git - My\/company\/podspecs.git @ 3da0a61867f5df4a8477e763b407cb8f0d0d7902\r\n\r\n               cocoapods - git - https:\/\/github.com\/CocoaPods\/Specs.git @ 9131956dadd510f863b18b0f5ec18fea5ca65b64\r\n\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/developer\/Projekty\/TestProjects\/JenkinsTest\/Build\/vendor\/bundle\/ruby\/2.6.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.5\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.1\r\ncocoapods-trunk       : 1.6.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# File is automatically generated by PodFileGenerator. Any manual changes will be overwritten.\r\ninstall! 'cocoapods', :warn_for_unused_master_specs_repo => false\r\nsource 'our\/Specs\/Repo.git'\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\n\r\nplatform :ios, '10.0'\r\nuse_frameworks!\r\n\r\ntarget 'UnityFramework' do\r\n   # Pods for UnityFramework\r\n    pod 'IdfaConsentView', '3.0.9'\r\n    pod 'CORApplicationMetadata', '1.0.0'\r\n    pod 'IronSourceSDK', '7.1.10.0'\r\n    pod 'IronSourceChartboostAdapter', '4.3.8.0'\r\n    pod 'IronSourceFyberAdapter', '4.3.19.0'\r\n    pod 'IronSourceInMobiAdapter', '4.3.12.0'\r\n    pod 'IronSourcePangleAdapter', '4.3.8.0'\r\n    pod 'IronSourceTapjoyAdapter', '4.1.18.0'\r\n    pod 'IronSourceUnityAdsAdapter', '4.3.13.0'\r\n    pod 'IronSourceVungleAdapter', '4.3.13.0'\r\n\t\r\n\ttarget 'Unity-iPhone Tests' do\r\n\t\tinherit! :search_paths\r\n\t\t# Pods for testing\r\n\tend\r\n\r\nend\r\ntarget 'Unity-iPhone' do\r\n\r\nend\r\n```\r\n\r\n","comments":["Not sure if its entirely cocoapods related but it might be. Would need help to diagnose this ","Possibly related to linking a static pod into the dynamic `'UnityFramework'`.  `use_frameworks! :linkage => :static ` might be a good solution.","We have a similar issue. Our project contains several frameworks with dependencies in them that are shared. After updating from cocoapods 1.10.1 to 1.11.2 we got the same issue. The problem is not only that we have now duplicates, but also that the dependencies do not work as expected. For example, our Firebase Remote Config does not work since there are multiple instances of same classes.\r\n\r\n```\r\nClass FIRAValue is implemented in both \/Users\/agarcia\/Library\/Developer\/Xcode\/DerivedData\/playtomic-fnwaopoktlebirdkizvfkwueafsh\/Build\/Products\/Debug (Integration)-iphonesimulator\/SocialCommunity.framework\/SocialCommunity (0x115db62e0) and \/Users\/agarcia\/Library\/Developer\/Xcode\/DerivedData\/playtomic-fnwaopoktlebirdkizvfkwueafsh\/Build\/Products\/Debug (Integration)-iphonesimulator\/Paywall.framework\/Paywall (0x1112193b0). One of the two will be used. Which one is undefined.\r\n```\r\n\r\nNote that this does not happen with 1.10.1\r\n\r\nOur setup is pretty long because we have several micro frameworks and multiple example apps, but let me put the important pieces. The main app is the Playtomic target, we also have some shared frameworks like foundation, sdk, playtomic_ui or mozart, and then we have multiple features in modules like Paywall or SocialCommunity. Here the setup for some of them with the parts related to Firebase:\r\n\r\n```\r\ndef sdk_pods\r\n    google_utilites\r\n    pod 'Firebase\/Core', $firebase_version\r\n    pod 'Firebase\/Database', $firebase_version\r\n    pod 'Firebase\/Storage', $firebase_version\r\n    pod 'Firebase\/Auth', $firebase_version\r\n   ....\r\nend\r\n\r\ndef playtomic_ui_pods\r\n....\r\nend\r\n\r\ndef mozart_pods\r\n  google_utilites\r\n  pod 'Firebase\/Messaging', $firebase_version\r\nend\r\n\r\ndef module_pods\r\n  sdk_pods\r\n  mozart_pods\r\n  playtomic_ui_pods\r\nend\r\n\r\ndef app_pods\r\n    google_utilites\r\n    pod 'Firebase\/Analytics', $firebase_version\r\n    pod 'Firebase\/Crashlytics', $firebase_version\r\n    pod 'Firebase\/RemoteConfig', $firebase_version\r\n    ....\r\nend\r\n\r\ntarget 'Playtomic' do\r\n  use_frameworks!\r\n  project 'App\/App.xcodeproj', 'Debug (Integration)' => :debug, 'Release (Integration)' => :release\r\n\r\n  module_pods\r\n  app_pods\r\n  \r\n  target 'Unit Tests' do\r\n    inherit! :search_paths\r\n  end\r\nend\r\n\r\ntarget 'PlaytomicFoundation' do\r\n  use_frameworks! :linkage => :static\r\n  project 'PlaytomicFoundation\/PlaytomicFoundation.xcodeproj', 'Debug (Integration)' => :debug, 'Release (Integration)' => :release\r\n  foundation_pods\r\n\r\n  target 'PlaytomicFoundationTests'\r\nend\r\n\r\ntarget 'SocialCommunity' do\r\n  use_frameworks!\r\n  project 'Modules\/Social\/SocialCommunity.xcodeproj', 'Debug (Integration)' => :debug, 'Release (Integration)' => :release\r\n  module_pods\r\n  chart_pod\r\n  target 'SocialCommunityExample'\r\n  target 'SocialCommunityTests'\r\nend\r\n\r\ntarget 'Paywall' do\r\n  use_frameworks!\r\n  project 'Modules\/Paywall\/Paywall.xcodeproj', 'Debug (Integration)' => :debug, 'Release (Integration)' => :release\r\n  module_pods\r\n\r\n  target 'PaywallExample'\r\n  target 'PaywallTests'\r\nend\r\n\r\n```\r\n\r\nEDIT: The issue seems to come from the `-objc` linker flag added. If I get rid of them in my frameworks the error and duplicates are gone. Any idea why that was added? I can not see much info, just a ticket here: https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/10234 (BTW, I am building with an M1 and Xcode13)","@angelolloqui It is problematic to link static frameworks into dynamic frameworks. See a detailed explanation at https:\/\/github.com\/firebase\/firebase-ios-sdk\/blob\/master\/docs\/firebase_in_libraries.md. \r\n\r\nTo link static frameworks into other frameworks with CocoaPods, `use_frameworks! :linkage => :static` is a good option so that all the frameworks become static, everything gets linked a build time, and duplicates at runtime are prevented.\r\n\r\nRegarding #10234, the `-ObjC` option is required for properly linking Objective C libraries. Otherwise C style linking done and features like Objective C categories may not link.","@zemos my setup is pretty much similar to yours.\r\nI have a unity project with ironsource adapters and I get tons of warnings like this:\r\n```\r\nClass _TtC10Foundation13__JSONEncoder is implemented in both \r\n\/usr\/lib\/swift\/libswiftFoundation.dylib (0x1fa136730) \r\nand \/private\/var\/containers\/Bundle\/Application\/75DC394B-7F31-41A5-82E4-B3F439E78131\/xxx.app\/Frameworks\/libswiftFoundation.dylib (0x1047cdbc8). \r\nOne of the two will be used. Which one is undefined.\r\n```\r\nI't try use_frameworks with static linkage to see if it changes anything","Nope, `:linkage => :static` didn't work at all.\r\nI had the following error:\r\n```\r\nError loading \/var\/containers\/Bundle\/Application\/CB100BC2-1DC8-4C2A-A83F-4618E48F2222\/MelodiesRun.app\/Frameworks\/UnityFramework.framework\/UnityFramework:  dlopen(\/var\/containers\/Bundle\/Application\/CB100BC2-1DC8-4C2A-A83F-4618E48F2222\/MelodiesRun.app\/Frameworks\/UnityFramework.framework\/UnityFramework, 0x0109): Library not loaded: @rpath\/libswiftCore.dylib\r\n  Referenced from: \/private\/var\/containers\/Bundle\/Application\/CB100BC2-1DC8-4C2A-A83F-4618E48F2222\/MelodiesRun.app\/Frameworks\/UnityFramework.framework\/UnityFramework\r\n  Reason: tried: '\/private\/var\/containers\/Bundle\/Application\/CB100BC2-1DC8-4C2A-A83F-4618E48F2222\/MelodiesRun.app\/Frameworks\/libswiftCore.dylib' (no such file), '\/private\/var\/containers\/Bundle\/Application\/CB100BC2-1DC8-4C2A-A83F-4618E48F2222\/MelodiesRun.app\/Frameworks\/libswiftCore.dylib' (no such file), '\/private\/var\/containers\/Bundle\/Application\/CB100BC2-1DC8-4C2A-A83F-4618E48F2222\/MelodiesRun.app\/Frameworks\/libswiftCore.dylib' (no such file), '\/private\/var\/containers\/Bundle\/Application\/CB100BC2-1DC8-4C2A-A83F-4618E48F2222\/MelodiesRun.app\/Frameworks\/libswiftCore.dylib' (no such file), '\/private\/var\/containers\/Bundle\/Application\/CB100BC2-1DC8-4C2A-A83F-4618E48F2222\/MelodiesRun.app\/Frameworks\/libswiftCore.dylib' (no such file)\r\n```","I have the same error, this happens because both the framework and the application use firebase sdk and generate these conflicts","@angelolloqui I'm having the same issue, did you by any chance suceed to fix it ? :D\r\nThe issue is not closed and no more answer :\/"],"labels":["help wanted"]},{"title":"Xcode 13 issue random targets cycle in dependencies.","body":"# Report\r\n\r\n## What did you do?\r\n\r\nWe have have big project with a lot of dependancies and trying to migrate on Xcode 13.\r\nProblems is what we can't build project warmly but only after removing Pods.build artefacts and then build from scratch.\r\nThe problem occurs with Xcode 12.5.1 as well but less frequently.\r\nEach time a different pair of cycle dependencies is being reported in the error message.\r\n\r\n## What did you expect to happen?\r\n\r\nWe expect to build project without errors and cleaning pods build folders\r\n\r\n## What happened instead?\r\n\r\nXcode error\r\n\r\n`\r\nCycle in dependencies between targets 'Macaw' and 'VNPerformance'; building could produce unreliable results.\r\nCycle path: Macaw \u2192 VNLogInterfaces \u2192 VNTUGC \u2192 VNAttributionConsentInterfaces \u2192 VNGrymKit \u2192 VNCommonCore \u2192 VNPerformance \u2192 Macaw\r\nCycle details:\r\n\u2192 Target 'Macaw': Libtool \/Users\/vlkonon\/repos\/v4ios\/Build\/Debug-iphonesimulator\/Macaw\/libMacaw.a normal\r\n\u25cb Target 'Macaw' has compile command with input '\/Users\/vlkonon\/repos\/v4ios\/Pods\/Target Support Files\/Macaw\/Macaw-dummy.m'\r\n\u25cb Target 'Macaw' has compile command for Swift source files\r\n\u25cb That command depends on command in Target 'VNLogInterfaces': script phase \u201cCopy generated compatibility header\u201d\r\n\u2192 Target 'VNLogInterfaces' has copy command from '\/Users\/vlkonon\/repos\/v4ios\/Build\/Pods.build\/Debug-iphonesimulator\/VNLogInterfaces.build\/Objects-normal\/x86_64\/VNLogInterfaces-Swift.h' to '\/Users\/vlkonon\/repos\/v4ios\/Build\/Pods.build\/Debug-iphonesimulator\/VNLogInterfaces.build\/DerivedSources\/VNLogInterfaces-Swift.h'\r\n\u25cb Target 'VNLogInterfaces' has compile command for Swift source files\r\n\u25cb That command depends on command in Target 'VNTUGC': script phase \u201cCopy generated compatibility header\u201d\r\n\u2192 Target 'VNTUGC' has copy command from '\/Users\/vlkonon\/repos\/v4ios\/Build\/Pods.build\/Debug-iphonesimulator\/VNTUGC.build\/Objects-normal\/x86_64\/VNTUGC-Swift.h' to '\/Users\/vlkonon\/repos\/v4ios\/Build\/Pods.build\/Debug-iphonesimulator\/VNTUGC.build\/DerivedSources\/VNTUGC-Swift.h'\r\n\u25cb Target 'VNTUGC' has compile command for Swift source files\r\n\u25cb Target 'VNTUGC' has target dependency on Target 'VNAttributionConsentInterfaces'\r\n\u2192 Target 'VNAttributionConsentInterfaces' has compile command for Swift source files\r\n\u25cb Target 'VNAttributionConsentInterfaces' has target dependency on Target 'VNGrymKit'\r\n\u2192 Target 'VNGrymKit' has compile command for Swift source files\r\n\u25cb Target 'VNGrymKit' has target dependency on Target 'VNCommonCore'\r\n\u2192 Target 'VNCommonCore' has compile command for Swift source files\r\n\u25cb Target 'VNCommonCore' has target dependency on Target 'VNPerformance'\r\n\u2192 Target 'VNPerformance' has compile command for Swift source files`\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.11.0\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.arm64e-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.6 (20G165)\r\n       Xcode : 13.0 (13A233)\r\n         Git : git version 2.30.1 (Apple Git-130)\r\n","comments":["This one is hard to pinpoint and hard to derive that it's actually a cocoapods issue. For the most part cocoapods is a dependency resolver but it does do the _wiring_ (integration) of the user project so issues like yours could arise if there is a bug.\r\n\r\nHowever, these are very hard to diagnose without a sample app so I recommend uploading a small app that reproduces the issue.\r\n\r\nThis might be a configuration issue with your project so its hard to derive that without a sample app."],"labels":["s1:awaiting input","s6:need sample"]},{"title":"Multiple commands produce [...].framework in \"[CP] Copy XCFrameworks\" phase on CocoaPods 1.11.2","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI installed YandexMobileMetrica and YandexMobileMetricaPush like that:\r\n```ruby\r\nplatform :ios, '9.0'\r\n\r\ntarget 'YandexMobileMetricaPushSampleObjC' do\r\n\r\n    pod 'YandexMobileMetrica', '~> 4.0'\r\n    pod 'YandexMobileMetricaPush'\r\n\r\nend\r\n\r\ntarget 'YandexMobileMetricaPushNotificationServiceExtenstionSampleObjC' do\r\n\r\n    pod 'YandexMobileMetricaPush'\r\n\r\nend\r\n```\r\nBut if I remove explicit `YandexMobileMetrica` dependency from Podfile, problem seems to resolve. But everything worked properly prior to XCFramework\r\n## What did you expect to happen?\r\n\r\nSample project to be compiled\r\n\r\n## What happened instead?\r\n\r\nXcode produces error:\r\n```\r\nnote: Using new build system\r\nnote: Planning\r\nnote: Build preparation complete\r\nnote: Building targets in parallel\r\nerror: Multiple commands produce '\/Users\/glinnik\/Developer\/Xcode\/DerivedData\/YandexMobileMetricaPushSampleObjC-hefzjzhvgjgvttdzdivwxnuyphbd\/Build\/Products\/Debug-iphonesimulator\/XCFrameworkIntermediates\/YandexMobileMetrica\/Static\/Core\/YandexMobileMetrica.framework':\r\n1) That command depends on command in Target 'YandexMobileMetrica-Static_Core' (project 'Pods'): script phase \u201c[CP] Copy XCFrameworks\u201d\r\n2) That command depends on command in Target 'YandexMobileMetrica.default-Static_Core-Static_Crashes' (project 'Pods'): script phase \u201c[CP] Copy XCFrameworks\u201d\r\n```\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.11.2\r\n        Ruby : ruby 2.6.5p114 (2019-10-01 revision 67812) [-darwin20]\r\n    RubyGems : 3.0.9\r\n        Host : macOS 11.5.2 (20G95)\r\n       Xcode : 13.0 (13A233)\r\n         Git : git version 2.30.1 (Apple Git-130)\r\nRuby lib dir : \/Users\/glinnik\/.rvm\/rubies\/ruby-2.6.5\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n               private repository\r\n\r\n               private repository\r\n\r\n               private repository\r\n\r\n               private repository\r\n\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/glinnik\/.rvm\/gems\/ruby-2.6.5\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\nslather               : 2.7.1\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '9.0'\r\n\r\ntarget 'YandexMobileMetricaPushSampleObjC' do\r\n\r\n    pod 'YandexMobileMetrica', '~> 4.0'\r\n    pod 'YandexMobileMetricaPush'\r\n\r\nend\r\n\r\ntarget 'YandexMobileMetricaPushNotificationServiceExtenstionSampleObjC' do\r\n\r\n    pod 'YandexMobileMetricaPush'\r\n\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\n[Sample.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/7266714\/Sample.zip)\r\n\r\n","comments":["Yes this is a known subspec issue. Does it work with 1.10.x?","Yes, the same behavior on 1.10","@dnkoutso help me\uff0cI also encountered the same problem. The strange thing is that I am building is ok, but my direct archive is indeed wrong","@dnkoutso You mentioned that this is a know issue with subspecs; is there a more detailed discussion about it somewhere (hopefully with workarounds)? ","@dnkoutso shouldn't this be fixed by https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/10826? I'm having the same issue","Any plan? [https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/10673](url) this example target2 can reproduct this problem","> @dnkoutso shouldn't this be fixed by #10826? I'm having the same issue\r\n\r\nNo, partly fixed.","I tried to fork this repo to try to fix the issue, but I can't seem to install my local cocoapods...\r\nany tips?","Just to contribute with the issue, here's my (a little modified to make it simpler) podfile:\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\nplatform :ios, '12.0'\r\n\r\n\r\n# Workaround duplicate Assets.car issue https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8122\r\n# This impacts the new Xcode build system\r\ninstall! 'cocoapods', :deterministic_uuids => false, :disable_input_output_paths => true\r\n#use_modular_headers!\r\nuse_frameworks! :linkage => :static\r\nsource 'git@github.com:MyOrgMyApp\/iOSMyAppSpecs.git'\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\n\r\n\r\npod 'Firebase\/Crashlytics', '~> 8.8.0'\r\npod 'Firebase\/Analytics', '~> 8.8.0'\r\npod 'SwiftLint', '0.39.2'\r\n\r\n\r\ntarget 'MyApp' do\r\n  # Pods for MyApp\r\n  pod 'iOS-MyAppSDK\/Full', :path => 'ios-sdk\/iOS-MyAppSDK'\r\n  pod 'Firebase\/RemoteConfig', '~> 8.8.0'\r\n  pod 'Firebase\/Storage', '~> 8.8.0'\r\n  pod 'Firebase\/InAppMessaging', '~> 8.8.0'\r\n  pod 'Firebase\/Messaging', '~> 8.8.0'\r\n  pod 'Firebase\/Performance', '~> 8.8.0'\r\n  # [RETRACTED] other pods\r\n\r\n\r\n  target 'MyAppTests' do\r\n    inherit! :search_paths\r\n    # Pods for testing\r\n  end\r\n\r\n\r\nend\r\n\r\n\r\ntarget 'CommandIntents' do\r\n  # Pods for Siri Shortcuts Intents\r\n  pod 'iOS-MyAppSDK\/Backend', :path => 'ios-sdk\/iOS-MyAppSDK'\r\n  pod 'iOS-MyAppSDK\/Database', :path => 'ios-sdk\/iOS-MyAppSDK'\r\nend\r\n\r\n\r\ntarget 'TodayExtension' do\r\n  # Pods for Today Widget\r\n  pod 'iOS-MyAppSDK\/Backend', :path => 'ios-sdk\/iOS-MyAppSDK'\r\n  pod 'iOS-MyAppSDK\/Database', :path => 'ios-sdk\/iOS-MyAppSDK'\r\n  # [RETRACTED] other pods\r\nend\r\n\r\n\r\npost_install do |installer|\r\n  installer.generated_projects.each do |project|\r\n    project.build_configurations.each do |config|\r\n        if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'].to_f < 12.0\r\n          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'\r\n        end\r\n    end\r\n    project.targets.each do |target|\r\n      target.build_configurations.each do |config|\r\n        if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'].to_f < 12.0\r\n          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nI have 3 targets, My App, a Siri Shortcut and a Today Widget.\r\nI can run my app in debug mode fine, but when I try to Archive I get:\r\n\r\n```\r\n\r\n\r\nShowing All Messages\r\nUsing new build system\r\n\r\n\r\nBuilding targets in parallel\r\n\r\n\r\nPlanning build\r\n\r\n\r\nAnalyzing workspace\r\n\r\n\r\nConstructing build description\r\n\r\n\r\nBuild preparation complete\r\n\r\n\r\nMultiple targets match implicit dependency for linker flags '-framework GoogleUtilities'. Consider adding an explicit dependency on the intended target to resolve this ambiguity. (in target 'MyApp' from project 'MyApp')\r\n\r\n\r\nMultiple targets match implicit dependency for linker flags '-framework iOS_MyAppSDK'. Consider adding an explicit dependency on the intended target to resolve this ambiguity. (in target 'MyApp' from project 'MyApp')\r\n\r\n\r\nMultiple targets match implicit dependency for linker flags '-framework GoogleUtilities'. Consider adding an explicit dependency on the intended target to resolve this ambiguity. (in target 'CommandIntents' from project 'MyApp')\r\n\r\n\r\nMultiple targets match implicit dependency for linker flags '-framework GoogleUtilities'. Consider adding an explicit dependency on the intended target to resolve this ambiguity. (in target 'TodayExtension' from project 'MyApp')\r\n\r\n\r\nMultiple targets match implicit dependency for linker flags '-framework iOS_MyAppSDK'. Consider adding an explicit dependency on the intended target to resolve this ambiguity. (in target 'CommandIntents' from project 'MyApp')\r\n\r\n\r\nMultiple targets match implicit dependency for linker flags '-framework iOS_MyAppSDK'. Consider adding an explicit dependency on the intended target to resolve this ambiguity. (in target 'TodayExtension' from project 'MyApp')\r\n\r\n\r\nMultiple commands produce '\/Users\/marciorodrigues\/Library\/Developer\/Xcode\/DerivedData\/MyApp-gycbveszmrpohmagjmikqmiupyoh\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyApp\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GoogleUtilities.framework':\r\n1) Target 'GoogleUtilities-00567490' has create directory command with output '\/Users\/marciorodrigues\/Library\/Developer\/Xcode\/DerivedData\/MyApp-gycbveszmrpohmagjmikqmiupyoh\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyApp\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GoogleUtilities.framework'\r\n2) Target 'GoogleUtilities-ac14cd06' has create directory command with output '\/Users\/marciorodrigues\/Library\/Developer\/Xcode\/DerivedData\/MyApp-gycbveszmrpohmagjmikqmiupyoh\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyApp\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GoogleUtilities.framework'\r\n\r\n\r\n\r\nMultiple commands produce '\/Users\/marciorodrigues\/Library\/Developer\/Xcode\/DerivedData\/MyApp-gycbveszmrpohmagjmikqmiupyoh\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyApp\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/iOS_MyAppSDK.framework':\r\n1) Target 'iOS-MyAppSDK-6627e3e4' has create directory command with output '\/Users\/marciorodrigues\/Library\/Developer\/Xcode\/DerivedData\/MyApp-gycbveszmrpohmagjmikqmiupyoh\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyApp\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/iOS_MyAppSDK.framework'\r\n2) Target 'iOS-MyAppSDK-Backend-Core-Database' has create directory command with output '\/Users\/marciorodrigues\/Library\/Developer\/Xcode\/DerivedData\/MyApp-gycbveszmrpohmagjmikqmiupyoh\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyApp\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/iOS_MyAppSDK.framework'\r\n```","And here's my local SDK dev pod for good measure:\r\n\r\n```ruby\r\nPod::Spec.new do |s|\r\n\r\n\r\n  s.name         = \"iOS-MyAppSDK\"\r\n  s.version      = \"0.9.4\"\r\n  s.summary      = \"iOS Framework to communicate with the MyApp API v2\"\r\n  s.description  = \"iOS Framework to communicate with the MyApp API v2\"\r\n  s.homepage     = \"https:\/\/github.com\/MyOrgMyApp\/ios-sdk\/\"\r\n  s.license      = \"MIT\"\r\n  s.author       = { \"Marcio\" => \"marcio@olibra.io\" }\r\n  s.platform     = :ios,\"12.0\"\r\n  s.swift_version = \"5.3\"\r\n  s.source       = { :git => \"git@github.com:MyOrgMyApp\/ios-sdk.git\", :tag => \"#{s.version}\" }\r\n\r\n\r\n  s.subspec 'Core' do |core|\r\n    core.source_files  = \"iOS-MyAppSDK\/{Commons,Communication}\/**\/*.{swift}\"\r\n    core.ios.frameworks = \"RxCocoa\",\"RxSwift\"\r\n    core.ios.vendored_frameworks = \"Carthage\/Build\/RxCocoa.xcframework\",\r\n                                   \"Carthage\/Build\/RxRelay.xcframework\",\r\n                                   \"Carthage\/Build\/RxSwift.xcframework\"\r\n  end\r\n\r\n\r\n  s.subspec 'Backend' do |backend|\r\n    backend.dependency 'iOS-MyAppSDK\/Core'\r\n    backend.dependency \"Alamofire\", \"~> 5.4.3\"\r\n    backend.ios.frameworks =\r\n        \"AWSCore\",\r\n        \"AWSCognitoIdentityProvider\",\r\n        \"AWSCognitoIdentityProviderASF\"\r\n    backend.ios.vendored_frameworks =\r\n                \"Carthage\/Build\/AWSCore.xcframework\",\r\n                \"Carthage\/Build\/AWSCognitoIdentityProvider.xcframework\",\r\n                \"Carthage\/Build\/AWSCognitoIdentityProviderASF.xcframework\"\r\n    backend.source_files  = \"iOS-MyAppSDK\/Backend\/**\/*.{swift}\",\r\n                \"iOS-MyAppSDK\/{NetworkLogger}\/**\/*.{swift}\"\r\n  end\r\n\r\n\r\n  s.subspec 'Database' do |db|\r\n    db.dependency 'iOS-MyAppSDK\/Core'\r\n    db.ios.frameworks = \"Realm\",\r\n        \"RealmSwift\"\r\n    db.ios.vendored_frameworks = \"Libraries\/Realm\/Realm.xcframework\",\r\n                \"Libraries\/Realm\/RealmSwift.xcframework\"\r\n    db.source_files = \"iOS-MyAppSDK\/Database\/**\/*.{swift}\"\r\n  end\r\n\r\n\r\n  s.subspec 'TransportMQTT' do |mqtt|\r\n    mqtt.dependency 'iOS-MyAppSDK\/Core'\r\n    mqtt.ios.frameworks = \"MQTTClient\"\r\n    mqtt.ios.vendored_frameworks = \"Carthage\/Build\/MQTTClient.xcframework\"\r\n    mqtt.source_files = \"iOS-MyAppSDK\/Transports\/MQTT\/**\/*.{swift}\"\r\n  end\r\n\r\n\r\n  s.subspec 'TransportHTTP' do |http|\r\n    http.dependency 'iOS-MyAppSDK\/Core'\r\n    http.dependency \"Alamofire\", \"~> 5.4.3\"\r\n    http.source_files = \"iOS-MyAppSDK\/Transports\/HTTP\/**\/*.{swift}\"\r\n  end\r\n\r\n\r\n  s.subspec 'LocalServer' do |localserver|\r\n    localserver.dependency 'iOS-MyAppSDK\/Core'\r\n    localserver.resources = 'iOS-MyAppSDK\/LocalServer\/**\/*.{p12}'\r\n    localserver.ios.frameworks = \"CocoaAsyncSocket\",\r\n        \"HTTPParserC\",\r\n        \"Telegraph\"\r\n    localserver.ios.vendored_frameworks = \"Carthage\/Build\/CocoaAsyncSocket.xcframework\",\r\n                \"Carthage\/Build\/HTTPParserC.xcframework\",\r\n                \"Carthage\/Build\/Telegraph.xcframework\"\r\n    localserver.source_files = \"iOS-MyAppSDK\/LocalServer\/**\/*.{swift}\"\r\n  end\r\n\r\n\r\n  s.subspec 'LegacySDK' do |legacy|\r\n    legacy.dependency 'iOS-MyAppSDK\/Core'\r\n    legacy.dependency \"Alamofire\", \"~> 5.4.3\"\r\n    legacy.source_files = \"iOS-MyAppSDK\/Legacy\/**\/*.{swift}\"\r\n  end\r\n  \r\n  s.subspec 'Full' do |full|\r\n    full.dependency 'iOS-MyAppSDK\/Backend'\r\n    full.dependency 'iOS-MyAppSDK\/Database'\r\n    full.dependency 'iOS-MyAppSDK\/TransportMQTT'\r\n    full.dependency 'iOS-MyAppSDK\/TransportHTTP'\r\n    full.dependency 'iOS-MyAppSDK\/LocalServer'\r\n    full.dependency 'iOS-MyAppSDK\/LegacySDK'\r\n  end\r\n\r\n\r\n\r\nend\r\n```","some good news, I tried to use `use_modular_headers!` instead of `use_frameworks! :linkage => :static` and the archive worked!\r\nhowever, it would be great if I could use frameworks instead, since it significantly reduces my build times","> I tried to fork this repo to try to fix the issue, but I can't seem to install my local cocoapods... any tips?\r\n\r\nUse gem bundler to use local code","@dnkoutso   New found,  #10673 Demo  project will build Alamofire-iOS10 with only  Other_Link_flag  has  \"-framework Alamofire\"\r\nthis make Target MyApp2 build both Alamofire-iOS10 And Alamofire-iOS11\r\nKeep working on it.\r\n\r\nupdate: manual remove -framework Alamofire fix this issue.   But maybe not a good idea?\r\n              Is really we need OTHER_LDFLAGS setting?  we already has framework setting in project.\r\n\r\nupdate: At the same time, I have a new issue: transitive dependency of different subpod gen two target.\r\nexample:\r\n[TestSubSpec.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/8139634\/TestSubSpec.zip)\r\n "],"labels":["t2:defect","s2:confirmed"]},{"title":"CocoaPods 1.11.x changed the path where xcframework was copied","body":"* [X] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n\r\nI had a scenario as drawn below:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/8527149\/134691260-824aa8dd-806c-4c7f-9f5c-76e749b60705.png)\r\n\r\n- One pod depends on the other's xcframework\r\n- The Pod that adds these xcframeworks has the dynamic name\r\n- In version 1.10.x the xcframeworks were copied to the folder XCFrameworkIntermediates\/${FrameworkName}, it was possible to use the configuration ```s.pod_target_xcconfig    = { \"FRAMEWORK_SEARCH_PATHS\" => \" \\\"${PODS_XCFRAMEWORKS_BUILD_DIR}\/FrameworkA\\\" \\\"${PODS_XCFRAMEWORKS_BUILD_DIR}\/FrameworkB\\\"\" }```, everything works fine.\r\n- In version 1.11.x xcframeworks are copied to XCFrameworkIntermediates\/${PodName} folder, making it impossible to use the previous configuration.\r\n\r\n\r\nThis change was probably made by the PR #10884 \r\n\r\nIs this type of change considered breaking? \r\n\r\nMaybe I'm using this configuration in the wrong way and I have some other way to meet this scenario\r\n\r\n\r\n## What did you do?\r\n\r\nPod install and build project for both versions.\r\n\r\n## What did you expect to happen?\r\n\r\nThe project should build for both version.\r\n\r\n## What happened instead?\r\n\r\nIn 1.10.x -> Project builds just fine.\r\nIn 1.11.x -> FrameworkA\/FrameworkA.h not found.\r\n\r\n### Stack\r\n\r\n#### 1.10.1\r\n\r\n```\r\n   CocoaPods : 1.10.1\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.4 (20F71)\r\n       Xcode : 12.5 (12E262)\r\n         Git : git version 2.30.1 (Apple Git-130)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n#### 1.11.2\r\n\r\n```\r\n   CocoaPods : 1.11.2\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.4 (20F71)\r\n       Xcode : 12.5 (12E262)\r\n         Git : git version 2.30.1 (Apple Git-130)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n### Project that demonstrates the issue\r\n\r\nPing me if you need this test project","comments":["Probably not considered breaking as these are implementation details of how cocoapods works with respect to integrating xcframeworks.\r\n\r\nI do not think relying on this mechanism is safe to do so as it can change as it did on 1.11.x.\r\n\r\nThe reason the paths changed was due to fix another bug as you pointed out. If you rely on `pod_target_xcconfig` you could update it to be recursive perhaps.\r\n\r\nI am curious why you need that setting to begin with?","I need this scenario because PodA will become an open-source library, so who will be responsible for adding the frameworks will be the owner of the project that is using PodA. And since who will add is the project owner, PodB can differentiate the name from project to project. \r\n\r\nIs there a better way to do this?\r\n\r\nAlso, can you demonstrate how it would be the recursive way?  Appreciate!","I think you can do ```\"FRAMEWORK_SEARCH_PATHS\" => \"\\\"${PODS_XCFRAMEWORKS_BUILD_DIR}\/FrameworkA\/**\\\"\"```\r\n\r\nI am sorry but I do not quite understand the use case you are trying to accomplish entirely","> I think you can do `\"FRAMEWORK_SEARCH_PATHS\" => \"\\\"${PODS_XCFRAMEWORKS_BUILD_DIR}\/FrameworkA\/**\\\"\"`\r\n> \r\n> I am sorry but I do not quite understand the use case you are trying to accomplish entirely\r\n\r\nThis way you showed is how it works in version 1.10.X but not in 1.11.x \r\n\r\nBecause now in 1.11.x the PODS_XCFRAMEWORKS_BUILD_DIR looks like this:\r\n\r\nXCFrameworkFolder\/\r\n---PodA\/\r\n---PodB\/\r\n\r\nIn 1.10.x it was like:\r\n\r\nXCFrameworkFolder\/\r\n---FrameworkA\/\r\n---FrameworkB\/\r\n\r\n\r\n\r\n","@rooque maybe I dont quite understand it fully. Either way, I honestly do not think relying on this mechanism is right thing to do.\r\n\r\nWould love to hear more about how your use case can be accomplished in a different more appropriate way by cocoapods."],"labels":["t3:discussion","s1:awaiting input"]},{"title":"Local SDK via pods is not linking the local SDK with react native project via podspec","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n\u2139 Tried adding SDK via local pods \r\n\r\n## What did you expect to happen?\r\n\r\n\u2139 In native iOS project linking of the SDK via pods happen successfully .In React Native project as well it should bind and work .\r\n\r\n## What happened instead?\r\n\r\n\u2139 But in React native project the binding does not happen and it crashes saying that library is not available in the path.\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n\u2139 Sample pod file \r\nrequire_relative '..\/node_modules\/react-native\/scripts\/react_native_pods'\r\nrequire_relative '..\/node_modules\/@react-native-community\/cli-platform-ios\/native_modules'\r\n\r\nplatform :ios, '14.1'\r\n\r\nproject 'MyProject', {\r\n    'Debug' => :debug,\r\n    'Release' => :release,\r\n}\r\n\r\ndef applibs\r\n  pod 'MySDK-Debug', :configuration => ['Debug'], :path  => 'MySDK\/Debug\/MYSDK-Debug.podspec'\r\n  pod 'MySDK-Release', :configuration => ['Release'], :path  => 'MySDK\/Release\/MySDK-Release.podspec'\r\n \r\nend\r\n\r\ntarget 'MyProject' do\r\n  config = use_native_modules!\r\n  applibs\r\n  use_react_native!(\r\n    :path => config[:reactNativePath],\r\n    # to enable hermes on iOS, change `false` to `true` and then install pods\r\n    :hermes_enabled => false\r\n  )\r\n \r\n  target 'MyProjectTests' do\r\n    inherit! :complete\r\n    # Pods for testing\r\n  end\r\n  use_flipper!()\r\n  post_install do |installer|\r\n    react_native_post_install(installer)\r\n  end\r\nend\r\n\r\n\r\n\r\n\r\n","comments":["Try this:\r\n```ruby\r\ndef applibs\r\n  pod 'MySDK-Debug', :configurations => ['Debug'], :podspec => 'MySDK\/Debug\/MYSDK-Debug.podspec'\r\n  pod 'MySDK-Release', :configurations => ['Release'], :podspec => 'MySDK\/Release\/MySDK-Release.podspec'\r\nend\r\n```\r\nI replaced `:path` with `:podspec`, because you are referring to podspecs here; \r\nI also replaced `:configuration` with `:configurations` since you are using arrays.\r\n\r\n\r\n","Thanks for the report. I am sorry but you would need to provide a sample project _without_ ReactNative for us to be able to assist you.\r\n"],"labels":["s1:awaiting input","s6:need sample"]},{"title":"Question \/ feature request: support Xcode 13 multi-platform frameworks","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\nI was in the process of replacing CocoaPods with SPM so I can finally get rid of all my duplicated iOS\/watchOS\/tvOS frameworks. Unfortunately that's still [riddled with issues](https:\/\/twitter.com\/nachosoto\/status\/1441077174962835457?s=21). Ideally I'd continue using CocoaPods, but it would be great if it could support [multi-platform frameworks](https:\/\/twitter.com\/weichsel\/status\/1433449620882006016?s=21).\r\n","comments":["nice! marked it for 1.12.0. ","@NachoSoto have you thought about it what it is that cocoapods should provide to enable this? I think the build settings can be changed by `pod_target_xcconfig` but I am uncertain about the remaining part, is it new DSL?","AFAIK the targets need to have `Any` `supported platforms`, and `Allow Multi-Platform Builds`.\r\nI suppose I could do this manually by modifying build settings, but probably ideally we get a new option in the DSL for this?","its interesting in terms of providing a DSL because a pod author might not know which case will be used by what. Could be a Podfile DSL option though to customize which platform to build a pod for. This will give you control to do it.\r\n\r\ne.g.\r\n\r\n```ruby\r\ntarget 'MyApp' do\r\n  pod 'MyPod', :supported_platforms => [:ios]\r\nend\r\n```\r\n\r\nWe would have to ensure the pod also supports or sets `Allow Multi-Platform Builds` or we do that if the consumer has explicitly set it.","Would this apply to only pre-built\/vendored pods?","+1 for the same feature. Looking to build a multi-platform framework that uses pods.","+1 for this, I'd love to use multi-platform frameworks with CocoaPods. Is there any ETA on when will this be implemented?"],"labels":["t1:enhancement","d2:moderate"]},{"title":"cocoapods cannot find dependency in secondary source","body":"Hello,\r\n\r\nI'm using v1.11.2.\r\n\r\nI have the following `Podfile`, the `Tanker` pod depends on `POSInputStreamLibrary` which is available on the Cocoapods CDN:\r\n\r\n```ruby\r\nsource 'https:\/\/cdn.cocoapods.org\/'\r\n\r\nplatform :ios, '9.0'\r\n\r\ntarget 'CompatTests' do\r\n  use_frameworks!\r\n  pod 'Tanker', '2.21.0', :source => 'https:\/\/github.com\/TankerHQ\/PodSpecs.git'\r\nend\r\n```\r\n\r\n`Tanker` is on a secondary source. Running `pod install --repo-update` fails with the following output:\r\n\r\n```\r\nUpdating local specs repositories\r\nAnalyzing dependencies\r\n[!] Unable to find a specification for `POSInputStreamLibrary` depended upon by `Tanker`\r\n\r\nYou have either:\r\n * mistyped the name or version.\r\n * not added the source repo that hosts the Podspec to your Podfile.\r\n``` \r\n\r\nIf I add `pod 'PromiseKit', '~> 1.7'` just before the `pod 'Tanker'` it works!\r\n\r\nI suspect this issue arises when having a single dependency in the `Podfile`.\r\n","comments":["I can reproduce yes, seems like a bug. Would need more help to diagnose it.",">Would need more help to diagnose it.\r\n\r\nSure, what do you need?","Sorry I meant, someone to dive in the sources in cocoapods gem, cocoapods-core gem or molinillo in order to determine the issue. Its most likely in cocoapods gem (this repo right here)"],"labels":["t2:defect","s2:confirmed","help wanted"]},{"title":"Question about the order of HEADER_SEARCH_PATHS","body":"I noticed that when `pod install` is finished, the order of `HEADER_SEARCH_PATHS` in `XXXPod.xcconfig`, **Private** has a higher priority than **Public**.\r\n\r\n> XXXPod.xcconfig\r\n\r\n```\r\nHEADER_SEARCH_PATHS = $(inherited) \"${PODS_ROOT}\/Headers\/Private\" \"${PODS_ROOT}\/Headers\/Private\/XXXPod\" \"${PODS_ROOT}\/Headers\/Public\"\r\n````\r\n\r\nWhen importing headers from other pods, it actually get the header from the **Private** directory, is that by design?\r\n```\r\n\/\/ XXXPod\r\n#import <AnotherPod\/SomeHeader.h>\r\n```\r\n\r\nWhy not \r\n```\r\nHEADER_SEARCH_PATHS = $(inherited) \"${PODS_ROOT}\/Headers\/Public\" \"${PODS_ROOT}\/Headers\/Private\" \"${PODS_ROOT}\/Headers\/Private\/XXXPod\" \r\n````\r\n","comments":["Do you have a header that is both present in private and public? I do not remember the order, it possibly changed or was always like this but I am trying to understand your issue at hand?","> Do you have a header that is both present in private and public? I do not remember the order, it possibly changed or was always like this but I am trying to understand your issue at hand?\r\n\r\n@dnkoutso Actually the headers in the **Private** directory behaves like a superset of **Public**.\r\n\r\nAnd it's possible to include a private header with`#import <AnotherPod\/SomeHeaderPrivate.h>`.\r\n\r\nI'm wondering what is **Public**\/**Private**  for. And when some pod provides a **modulemap**, why is the **modulemap** in the **Private** directory?","@PhilCai1993 sorry, a lot of header search path related values pre-date me. We generally have not changed them to avoid breakages across new versions of cocoapods.","> @PhilCai1993 sorry, a lot of header search path related values pre-date me. We generally have not changed them to avoid breakages across new versions of cocoapods.\r\n\r\n@dnkoutso so what are these two dirs for?"],"labels":["t4:question"]},{"title":"Code completion of symlink headers failed on Xcode 12.5","body":"Hi, I got a similar problem on Xcode 12.5, the pod name can be completed correctly:\r\n![image](https:\/\/user-images.githubusercontent.com\/87849426\/132694907-9d30bd9a-989b-4da8-bad7-91b1ab6cade2.png)\r\n\r\nbut it couldn't find the header files under the pod\r\n![image](https:\/\/user-images.githubusercontent.com\/87849426\/132695169-8d9dd446-e4ef-4dd5-a413-de554211e7f4.png)\r\n\r\nonly when the file undler the \/Header is not a symlink can it be recognized (by the way, on Xcode 12.3 symlinks could be found in this way)\r\n![image](https:\/\/user-images.githubusercontent.com\/87849426\/132696064-3d7655a1-3caa-4ecd-a367-32a6d0802b5c.png)\r\n\r\nOne more strange phenomenon, when I delete the right  angle bracket '>' and press Esc, the completion works again\r\n![image](https:\/\/user-images.githubusercontent.com\/87849426\/132696673-ddb6146b-1819-4013-8147-891c7f3bbfce.png)\r\n\r\nIs this a bug of Xcode 12.5? or is this a known problem?\r\ncouldn't found much info on google, appreciate for any tips\r\n\r\n_Originally posted by @prideyao in https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/10852#issuecomment-916112907_","comments":["This seems like an issue with Xcode perhaps. Please also see similar issue https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8716.\r\n\r\nI am not sure how to diagnose\/debug this.","Thanks for your reply! \r\nIt's a demo project created by `pod lib create`, with `generate_multiple_pod_projects: true`\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/87849426\/133233987-d38fc473-3f1e-435a-a781-b1a92063de3d.png)\r\n\r\nI have read that issue, but there is still no solution for this. I wonder if it's possible to copy headers to `Pods\/Headers\/Public` or `Pods\/Headers\/Private` instead of creating a symlink? Can you give me some advice about the influence of this? \r\nI am not quite familiar with the header search path design of Cocoapods.","Its quite a legacy architecture, I do not recall entirely why it was initially constructed in such way. Perhaps because this structure made it easy to write the header search paths as cocoapods could organize them in a single folder.\r\n\r\nIts possible Xcode doesnt handle it that well or a build is required before auto-complete starts working.\r\n\r\nChanging the mechanism to copy headers at this time is a rather hard task and might possible mean a 2.0 version of cocoapods if its a breaking change.","When I said copying headers I mean doing it by hooking the link_headers method or creating a shadow folder of hard links with the same directory hierarchies(not asking cocoapods to change the mechanism). Just try to figure out a temporary walk around to make the auto-complete work before Xcode fixes its problem.\r\nBut I am not sure whether the symlink is necessary in other places. Really appreciate for your reply, it's pretty helpful! \ud83d\udc4d \r\n\r\nBy the way I have tried building but the auto-complete still acted in the same way.\r\n\r\nI am going to take a try on the walk around, should I close this issue or just leave it here? (It's the first time I open an issue, not sure how the procedure goes : P)\r\n\r\n\r\n"],"labels":["t3:discussion"]},{"title":"Use git reference repository when checking out a dependency on git","body":"I looked at the documentation and the issues and didn't find any mention to this.\r\n\r\nOn our CI we checkout our internal dependencies from an specific branch.\r\nOur git server is on-premise and has poor performance for checkout, leading to lengthy `pod install` execution.\r\n\r\nTo improve our checkout performance for other applications we use a [git reference repository](https:\/\/git-scm.com\/docs\/git-clone#Documentation\/git-clone.txt---bare) as an solution for our performance. (Basically it is an extra parameter --reference pointing to a local folder)\r\n\r\nIs it possible to do that with cocoapods, or add as a feature ? ","comments":["nice! Probably yes? I do not think CocoaPods passes this option but we can possibly add it? What does it take to do that, is it an option when the sources are added?","I have little knowledge in ruby, but after some digging I found the lib `cocoapods-downloader` and probably there is a good place to start.\r\n\r\nSince I don't want this informartion on the `Podfile` because the path can be different on each machine, probably the best place to set this configuration would be on the CLI, doing something like `pod install --git-reference=\/path\/to\/reference\/repo`\r\n\r\nIf it makes sense I can try to implement this and send a PR, what do you think ?","This seems related to setting up a podspec repo right? We can do it in `pod repo add`?","I don't think so.\r\n\r\nThe goal is to use a [reference repository](https:\/\/support.cloudbees.com\/hc\/en-us\/articles\/115001728812-Using-a-Git-reference-repository#whatisareferencerepository) to speed up the clone process (Which is slow because of our on-prem git server).\r\n\r\nCorrect me if I'm wrong, but  the `pod repo add` will create the `Podfile` and  I don't want this information to be saved in there because the reference folder can be different for each developer\r\n\r\n\r\n","`pod repo add` will not create a `Podfile`. It will create the podspec `git` repo inside `~\/.cocoapods\/repos`","`pod repo add` is the one that ultimately does `git clone` which seems `--reference-repository` is a parameter to.","Hmm, I see. It does make sense to use reference on `pod repo add`\r\n\r\nBut for us the slowest moment is when we do `pod update` or `pod install --repo-update`\r\n\r\nWhen it shows the output below its also performing a git clone.\r\n\r\n```\r\n-> Pre-downloading: `InternalModule` from `https:\/\/our-git.company\/ios\/internal-module`, branch\r\n  $ \/usr\/bin\/git ls-remote\r\n  https:\/\/our-git.company\/ios\/internal-module master\r\n  warning: redirecting to https:\/\/our-git.company\/ios\/internal-module.git\/\r\n  437d3607e07da82a75cf3dab2b746a6ebd130c29\trefs\/heads\/master\r\n > Git download\r\n > Git download\r\n     $ \/usr\/bin\/git clone\r\n     https:\/\/our-git.company\/ios\/internal-module\r\n     \/var\/folders\/4x\/x_677gxd4h5b37kktfjmdn8rlqn8rw\/T\/d20210910-85671-16ct7ao\r\n     --template=\r\n     Cloning into '\/var\/folders\/4x\/x_677gxd4h5b37kktfjmdn8rlqn8rw\/T\/d20210910-85671-16ct7ao'...\r\n```","hmm this seems a bit different which has to do with the cloning of the sources of a pod references in your `Podfile`. I seem to understand more, I initially thought you wanted this option to `~\/.cocoapods\/repos`.\r\n\r\nSo what you actually want is to be able to pass this when a pods sources are installed via git, is that right?","Sorry btw you probably said this since the beginning and I am just coming around to understand what you want...","> So what you actually want is to be able to pass this when a pods sources are installed via git, is that right?\r\n\r\nYes, thats it !\r\n\r\n\r\n\r\n> Sorry btw you probably said this since the beginning and I am just coming around to understand what you want...\r\n\r\nNo problem ! I'm really thankful for your quick replies \ud83e\udd29 ","We did some testing today and got a massive improvement on our CI (from a few minutes for each module to a few seconds with [this change](https:\/\/github.com\/andreroggeri\/cocoapods-downloader\/commit\/25cbe522a40a8633e54a0b23adc51edf72b81a53))\r\n\r\n**Before**\r\n![image](https:\/\/user-images.githubusercontent.com\/6232673\/133111251-2eea1320-7913-4140-9fae-3fa2ad6dae58.png)\r\n\r\n**After**\r\n![image](https:\/\/user-images.githubusercontent.com\/6232673\/133111798-676fcc3f-a827-48fd-9c72-f362a3ce5c12.png)\r\n\r\n","The only way I can see this happening is by providing a flag in `Podfile` both at global level or per-pod level. There are flags like `use_modular_headers!` and such that you can copy paste from in https:\/\/github.com\/CocoaPods\/Core project. We would have to add this there first, then edit this repo to read the flag and we would probably need to update https:\/\/github.com\/CocoaPods\/cocoapods-downloader to support this new flag and pass that flag.\r\n\r\nIt sounds a lot but its doable.\r\n\r\nI wouldnt want to enable this by default as I do not know what other implications it can cause for folks."],"labels":["t1:enhancement","d2:moderate"]},{"title":"`beta` versions are fetched instead of `RC`","body":"* [X ] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nAt StreamChat, we've published version 4.0.0-RC\r\nUsers trying to install this via\r\n```\r\npod 'StreamChatUI', '~> 4.0.0-RC'\r\n```\r\nget `StreamChatUI 4.0.0-beta.11`, which was the last release before RC.\r\n`Podfile.lock` output is\r\n```\r\nPODS:\r\n  - Nuke (9.5.0)\r\n  - Starscream (4.0.4)\r\n  - StreamChat (4.0.0-beta.11):\r\n    - Starscream (~> 4.0)\r\n  - StreamChatUI (4.0.0-beta.11):\r\n    - Nuke (~> 9.0)\r\n    - StreamChat (= 4.0.0-beta.11)\r\n    - SwiftyGif (~> 5.0)\r\n  - SwiftyGif (5.4.0)\r\n\r\nDEPENDENCIES:\r\n  - StreamChatUI (~> 4.0.0-RC)\r\n\r\nSPEC REPOS:\r\n  trunk:\r\n    - Nuke\r\n    - Starscream\r\n    - StreamChat\r\n    - StreamChatUI\r\n    - SwiftyGif\r\n\r\nSPEC CHECKSUMS:\r\n  Nuke: 6f400a4ea957e09149ec335a3c6acdcc814d89e4\r\n  Starscream: 5178aed56b316f13fa3bc55694e583d35dd414d9\r\n  StreamChat: 8116920af37ced92bd0ecc38e1891548bfffcfe3\r\n  StreamChatUI: ba6bf9e28b224b8a58f1fa5daa68fa1324b670cd\r\n  SwiftyGif: 5d4af95df24caf1c570dbbcb32a3b8a0763bc6d7\r\n\r\nPODFILE CHECKSUM: cb8e8f12179d3f7a283262fb19e631ff4a01f90c\r\n\r\nCOCOAPODS: 1.10.0\r\n```\r\n\r\n4.0.0-RC version can be installed if we specify it as:\r\n```\r\npod 'StreamChatUI', :git => 'https:\/\/github.com\/GetStream\/stream-chat-swift\/', :tag => '4.0.0-RC'\r\n```\r\n\r\nI think cocoapods thinks `beta.11` comes later than `RC` since `b > R`\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.0\r\n        Ruby : ruby 2.6.5p114 (2019-10-01 revision 67812) [x86_64-darwin19]\r\n    RubyGems : 3.0.8\r\n        Host : macOS 11.3.1 (20E241)\r\n       Xcode : 12.5.1 (12E507)\r\n         Git : git version 2.30.1 (Apple Git-130)\r\nRuby lib dir : \/Users\/bahadir\/.rvm\/rubies\/ruby-2.6.5\/lib\r\nRepositories : cocoapods - git - https:\/\/github.com\/CocoaPods\/Specs.git @ 92d124edb64cacb8c021c0fc195dfbaa7b63ece0\r\n\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/bahadir\/.rvm\/gems\/ruby-2.6.5\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\nclaide-plugins        : 0.9.2\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\ntarget 'CocoaPods' do\r\n    pod 'StreamChatUI', '~> 4.0.0-RC'\r\nend\r\n```","comments":["Probably a bug yes. Would need some help to diagnose this as it might be inside https:\/\/github.com\/CocoaPods\/Molinillo","Same issue here https:\/\/cocoapods.org\/pods\/PostHog\r\n`3.0.0-beta.3` is listed as the last version but it should be `3.0.0-RC.1`","[semver](https:\/\/semver.org\/) is clear about RC being higher than betas\r\n\r\n> Example: 1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-alpha.beta < 1.0.0-beta < 1.0.0-beta.2 < 1.0.0-beta.11 < 1.0.0-rc.1 < 1.0.0.\r\n\r\nhttps:\/\/guides.cocoapods.org\/making\/making-a-cocoapod.html#cocoapods-versioning-specifics\r\n"],"labels":["help wanted"]},{"title":"[suggestion\/new feature] avoid generate project\/target for precompiled pods","body":"# Report\r\n\r\n## What did you do?\r\nMy project has too many pods, most of them are precompiled \uff08not source code\uff09,   and after run `pod install` it generates one project for each binary pod,  that makes Xcode opens too slow. \r\n\r\n## What did you expect to happen?\r\nput all precompiled pods to a single directory, and other pods\/user project depend with them via `framework_search_path`\/`library_search_path`, and reduce the number of projects in workspace.\r\n\r\n## What happened instead?\r\neach pod has its own project\/target\r\n\r\n","comments":["I assume you are using `generate_multiple_pod_projects` option? \r\n\r\nif so, you may use `project_name` on a per pod to group pods together into a single .xcodeproj.\r\n\r\n```ruby\r\npod 'PonyDebugger', :project_name => 'BinaryPods'\r\npod 'Alamofire', :project_name => 'BinaryPods'\r\npod 'Moya', :project_name => 'BinaryPods'\r\n...\r\n```\r\n\r\n\r\n","We cannot avoid generating an actual target as we need to add script phases for xcframework targets and for non-xcframework targets it helps show dependencies in the UI that were previously much harder to see.","@dnkoutso it seems the target type of precompiled pod is aggregate target,  not build phase in this project.  \r\nor , even if there are script phases in it, how about run this script in the Pods.project?","we wouldnt want to do that as multiple user projects might be integrated with different set of dependencies. It will also be a much bigger change in cocoapods itself to do that.\r\n\r\nI think the best is to group these pods using `projecf_name`."],"labels":["s1:awaiting input"]},{"title":"Get the installed version of a pod","body":"CocoaPods version: 1.10.2\r\n\r\nFeature Request:\r\n - Add CLI command to CocoaPods to display the version of an installed pod\r\n\r\nProposed command structure:\r\n`pod <new_command_to_get_version_of_installed_pod> <pod_name: SwiftLint>`\r\n\r\nExpected output:\r\n - Writes the currently installed version of pod_name to stdout\r\n\r\nAssumption:\r\n - Currently developers need to write logic to extract the version number for the pod of interest from the Podfile.lock.\r\n\r\nUse case:\r\n - To be able to easily retrieve version number of a pod for use in shell build scripts\r\n - Save the multiple developers some time by providing them with an API out of the box","comments":["yeah I am not sure if such command exists already but we can potentially introduce `pod version` or something! Happy to review PRs!","how about show the version in Xcode project window? such like this:\r\n![show pods version in Xcode](https:\/\/user-images.githubusercontent.com\/576164\/130891510-9b1d7b12-f534-4786-bfbd-2218ea4ab436.png)\r\n\r\nwhat you need to do is just update the display name of the pod's project.\r\n","@alexlee002 this looks good, is the version part of of the `.xcodeproj` name or something extra perhaps that Xcode 13 supports?","@alexlee002 also it seems the original author wanted something CLI based to support what they want for other purposes. I like your suggestion though too if we can utilize it for the CocoaPods generated projects.","@dnkoutso we can supports the CLI tool,  the pods version can be read from the Podfile.lock;\r\n\r\nand the UI in Xcode,  we can do it like this:\r\n\r\n```ruby\r\n# cocoapods\/project.rb\r\ndef add_pod_subproject(project, development = false)\r\n  parent_group = group_for_subproject_reference_hook(project.project_name, development)\r\n  ref = add_subproject_reference(project, parent_group)\r\n  update_ref_name(project.project_name, ref)\r\n  ref\r\nend\r\n\r\ndef add_cached_pod_subproject(sandbox, metadata, development = false)\r\n  parent_group = group_for_subproject_reference_hook(metadata.target_label, development)\r\n  ref = add_cached_subproject_reference(sandbox, metadata, parent_group)\r\n  update_ref_name(project.project_name, ref)\r\n  ref\r\nend\r\n\r\ndef update_ref_name(pod_name, project_ref)\r\n  pod_target = Config.instance.installer_pod_targets.select{|pt|pt.pod_name == pod_name}.shift\r\n  unless pod_target.nil?\r\n      ref_name = \"#{pod_target.project_name} #{pod_target.should_build? ? \"\ud83d\udd10\" : \"\ud83d\udd12\"}(#{pod_target.version})\"\r\n      project_ref.name = ref_name\r\n   end\r\nend\r\n```\r\n\r\nit's a bit not perfect:  we can't get the pod_target in `project.rb`,  so I suppose `project.project_name` is the pod_name, and use it to search the pod_target from Config.","@alexlee002 I was thinking about it a bit more and I have seen emojis been used in the past for cocoapods stuff however they were causing some issues. \r\n\r\nI also think the xcodeproj name might get a bit long and hard to copy paste or parse for folks if we add the version number, spaces and emojis.\r\n\r\nWhat we could do though is make cocoapods add a \"file\" reference with the emoji _inside_ the project so when you open it you get to see it, something that does not exist today. I think that would be a very good compromise.","@dnkoutso I did this in my private plugin and use it in my project nearly 2 years,  it seems no issue be found yet.\r\n\r\n> I also think the xcodeproj name might get a bit long and hard to copy paste or parse for folks if we add the version number, spaces and emojis.\r\n\r\nthe name before the space is the real project name, and we can copy it,  the emojis is not necessary,  I just use it to  marks whether  the pod  is source code or precompiled.","@alexlee002 you could re-write or update your plugin to just override\r\n```ruby\r\n    # @return [String] the project name derived from the target definitions that integrate this pod. If none is\r\n    #         specified then the name of the pod is used by default.\r\n    #\r\n    # @note   The name is guaranteed to be the same across all target definitions and is validated by the target\r\n    #         validator during installation.\r\n    #\r\n    def project_name\r\n      target_definitions.map { |td| td.project_name_for_pod(pod_name) }.compact.first || \"#{pod_name} (#{version})\"\r\n    end\r\n```\r\n\r\nwithin `pod_target.rb` ","@dnkoutso  \ud83d\udc4d great! I try it tomorrow.  Thanks! ","@dnkoutso it seems we can not just rewrite the pod_target's project_name method.  This not only changes the UI in Xcode, but the directory name in the disk.","@alexlee002 A couple of clarifications:\r\n\r\n - Is it that XCode just shows the directory name on disk, on its pods panel?\r\n - How is XCode UI change coupled with introducing a CLI command adverb?\r\n","@EarthyOrange \r\nthe pod's project name that is displayed in Xcode UI is just the PBXFileReference's name in project.pbxproj,  not the pod's project file name on disk\uff08that's mean,  the PBXFileReference's name can be difference with the *.xcodeproj\uff09","@alexlee002 @dnkoutso Any luck on this? :)","this can show pod version @dnkoutso\uff0cuse private method`pod_versions`\r\n```\r\n  post_integrate do |installer|\r\n    podfile_lock = installer.config.lockfile #  Pod::Lockfile\r\n\r\n    pods_info = podfile_lock.send(:pod_versions)\r\n    project = installer.pods_project\r\n    pods_group = project.root_object.main_group.children.find do |ele|\r\n      ele.name == \"Pods\"\r\n    end\r\n    pods_group.children.each do |a_pod_group|\r\n      found_item = pods_info.find do |key, value|\r\n        key == a_pod_group.path\r\n      end\r\n      a_pod_group.name = \"#{a_pod_group.path}\ud83d\udd12(#{found_item.last.version})\"\r\n      puts a_pod_group.name\r\n    end\r\n    project.save()\r\n  end\r\n```\r\n\r\n@EarthyOrange This should achieve your goal."],"labels":["t1:enhancement","d1:easy"]},{"title":"Multiple packages (core+optionals) in a single repository","body":"Hi,\r\nI'm making a third party library which is composed by:\r\n\r\n```\r\n---> CoreLibrary (core classes shared along each packages)\r\n---> Packages (optional)\r\n        ----> Package A\r\n        ----> Package B\r\n```\r\n\r\nMy podspec is set to:\r\n\r\n```ruby\r\n  s.default_subspec = 'CoreLibrary'\r\n\r\n  s.subspec 'CoreLibrary' do |ss|\r\n    ss.source_files = 'CoreLibrary\/Sources\/**\/*'\r\n  end\r\n\r\n  s.subspec 'PackageA' do |ss|\r\n    ss.source_files = 'Packages\/PackageA\/Sources\/**\/*'\r\n  end\r\n\r\n   s.subspec 'PackageB' do |ss|\r\n    ss.source_files = 'Packages\/PackageB\/Sources\/**\/*'\r\n  end\r\n```\r\n\r\nWhere CoreLibrary is mandatory for each optional package while packageA\/B is not mandatory.\r\n\r\nHowever it seems does not work correctly because I got the following errors:\r\n\r\n- `warning: file '<FileIn_PackageA.swift' is part of module 'CoreLibrary'; ignoring import`\r\n- `error: cannot find type 'ClassInCoreLibrary' in scope (in a file of PackageA)`\r\n\r\nAny idea? Am I using subspecs in a wrong way?\r\n\r\nThis is the current implementation.\r\n- Glider is the core library\r\n- GliderHTTP is the optional package\r\n\r\n```ruby\r\n  s.default_subspec = 'Glider'\r\n\r\n  s.subspec 'Glider' do |ss|\r\n    ss.source_files = 'Glider\/Sources\/**\/*'\r\n  end\r\n\r\n  s.subspec 'GliderHTTP' do |ss|\r\n    ss.source_files = 'Transports\/GliderHTTP\/Sources\/**\/*'\r\n  end\r\n```\r\n\r\n<img width=\"2002\" alt=\"Screen Shot 2021-08-24 at 15 58 02\" src=\"https:\/\/user-images.githubusercontent.com\/235645\/130629954-aff5b08b-0ba0-48b3-8593-e4c9275e1c3b.png\">\r\n\r\n<img width=\"318\" alt=\"Screen Shot 2021-08-24 at 15 59 27\" src=\"https:\/\/user-images.githubusercontent.com\/235645\/130630184-dc5e4186-a1d5-4392-beaa-54c50b64dbb6.png\">\r\n","comments":["Looking [here](https:\/\/stackoverflow.com\/questions\/51899124\/cocoapods-how-to-build-each-subspec-as-its-own-framework-target) I read:\r\n\r\n> one of the main purposes of subspecs is to enable configuration of a single framework. If you want separate frameworks, you should use a separate podspec for each one.\r\n\r\nwhile [here](https:\/\/stackoverflow.com\/questions\/67894280\/how-to-import-a-cocoapods-subspec-module-instead-of-the-entire-pod-in-swift):\r\n\r\n> WORKAROUND: Create multiple Podspec files (clang modules). You can put them in the same directory. For example, Github: mapbox\/mapbox-navigation-ios has 2 podspecs in the root directory, which refer to other Podspecs elsewhere.\r\n\r\nSo I suppose I'm using subspecs wrong. In order to have two different frameworks I should create two different podspecs into the root.","> In order to have two different frameworks I should create two different podspecs into the root.\r\n\r\nthat's correct.","@malcommac any action you are seeking from this issue like a bug or enhancement? I am inclined to close if not. "],"labels":["s1:awaiting input","t4:question"]},{"title":"Can I run the script before building resource_bundles?","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [\u221a] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI'd like to run a script and generate a .metallib file, which is presevered in resource_bundles, in order to render sth in my metal app when the project is builded.\r\n\r\n## What did you expect to happen?\r\n\r\nWhen I click the build button, I can generate a .metallib file by my script before building resource_bundles target.\r\n\r\n## What happened instead?\r\n\r\nXCode run resource_bundles target first, and then run my script, which means I can't get a new .metallib file before building the bundle.\r\n\r\nI would like to ask if I can determine the order when to run script? Or can I run the script in the resource_bundles target? That seems to be the only way I can solve my problem\r\n\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n","comments":["You cannot at this time. Support must be added. Should be fairly easy! See recent PRs that added before_headers and after_headers in 1.11","> You cannot at this time. Support must be added. Should be fairly easy! See recent PRs that added before_headers and after_headers in 1.11\r\n\r\nThanks a lot! I think 'before_headers' will solve my problem. Hope 1.11 will be released soon!","awesome, will keep this open for now as it can be useful enhancement.","![image](https:\/\/user-images.githubusercontent.com\/30124163\/141402330-f5be0f2c-651b-4496-8b26-af4af53cf8b6.png)\r\n\r\nHi, I update 1.11 and use 'before_headers' in my .podspec. However, I found that the script still runs after bundle building. It seems that my problem is not solved.","Please provide a sample app demonstrating the issue. This issue here is not solved as before resource bundles support has not been added.","Hello. Is there any news about this? When resources are generated during script execution this forces us to build very ugly and fragile workarounds \ud83d\ude14","\u60a8\u7684\u6765\u4fe1\u6211\u5df2\u6536\u5230\uff0c\u795d\u597d\uff01"],"labels":["t1:enhancement","d1:easy"]},{"title":"Create a pod from static framework without source code. Getting error 'No such module 'MySDK' ","body":"We have to create a pod from static framework without source code. This static framework created using Objective C language. Lipo command shows `armv7 arm64 i386 x86_64` architectures. \r\nUsing above pod as dependency we wanted to create a new pod with additional functionalities.\r\n\r\nThis framework shared by our vendors time to time. We thinking to create a pod and maintain all versions in a repo and use it this way.\r\n\r\n**1. Initially we are not able to create a pod from static objective c framework.\r\nWe are facing below error from `pod spec lint` command. We are not able to push due to error.**\r\n\r\nPOD validation was failing with below error- \r\n```\r\n** BUILD FAILED **\r\n    \r\n   \r\n    The following build commands failed:\r\n    \tLd \/Users\/username\/Library\/Developer\/Xcode\/DerivedData\/App-fsaogzopfrnvnddcwfdtbzzcizpv\/Build\/Intermediates.noindex\/App.build\/Release-iphonesimulator\/App.build\/Objects-normal\/x86_64\/Binary\/App normal x86_64\r\n    (1 failure)\r\n   Testing with `xcodebuild`. \r\n -> MySDKPod (0.0.9)\r\n    - ERROR | [iOS] xcodebuild: Returned an unsuccessful exit code.\r\n    - NOTE  | xcodebuild:  note: Using new build system\r\n    - NOTE  | [iOS] xcodebuild:  note: Planning build\r\n    - NOTE  | [iOS] xcodebuild:  note: Constructing build description\r\n    - NOTE  | [iOS] xcodebuild:  warning: Skipping code signing because the target does not have an Info.plist file and one is not being generated automatically. (in target 'App' from project 'App')\r\n    - NOTE  | [iOS] xcodebuild:  note: Execution policy exception registration failed and was skipped: Error Domain=NSPOSIXErrorDomain Code=1 \"Operation not permitted\" (in target 'Pods-App' from project 'Pods')\r\n    - NOTE  | [iOS] xcodebuild:  clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n\r\nAnalyzed 1 podspec.\r\n\r\n[!] The spec did not pass validation, due to 1 error.\r\n\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.1\/lib\/cocoapods\/command\/spec\/lint.rb:104:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/claide-1.0.3\/lib\/claide\/command.rb:334:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.1\/lib\/cocoapods\/command.rb:52:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.1\/bin\/pod:55:in `<top (required)>'\r\n\/usr\/local\/bin\/pod:23:in `load'\r\n\/usr\/local\/bin\/pod:23:in `<main>'\r\nusername@Usernames-iMac MySDKPod % \r\n\r\n\r\n```\r\n**1.1 Workaround to create pod from static framework.**\r\n\r\nWe created a repository for pod in remote git and uploaded framework file with readme.md, podspec and module.map.\r\n\r\n1.1.1 Podspec has below content-\r\n```\r\n#\r\n# Be sure to run `pod lib lint MySDK.podspec' to ensure this is a\r\n# valid spec before submitting.\r\n#\r\n# Any lines starting with a # are optional, but their use is encouraged\r\n# To learn more about a Podspec see https:\/\/guides.cocoapods.org\/syntax\/podspec.html\r\n#\r\n\r\nPod::Spec.new do |s|\r\n  s.name             = 'MySDK'\r\n  s.version          = \u20180.1.0\u2019\r\n  s.summary          = 'A short description of MySDK.'\r\n  s.description      = <<-DESC\r\nDescription of the MySDK here.\r\n                       DESC\r\n\r\n  s.homepage         = 'https:\/\/git.private_url\/groupName\/mysdk'\r\n  s.license          = { :type => 'LicenseType\u2019, :file => 'LICENSE' }\r\n  s.author           = { \u2018FirstName LastName\u2019 => \u2018email@domain.com\u2019 }\r\n  s.source           = { :git => \"git@git.domainName.net:groupName\/mysdk.git\" }\r\n  s.ios.deployment_target = '9.0'\r\n  s.vendored_frameworks = 'MySDK.framework'\r\n\r\n  s.source_files = 'MySDK.framework\/Headers\/*.h'\r\n  s.public_header_files = 'MySDK.framework\/Headers\/*.h'\r\n  s.frameworks = 'MediaPlayer', 'SystemConfiguration', 'AudioToolbox', 'AVfoundation','CoreLocation'\r\n  s.library = 'sqlite3'\r\n  s.module_map = 'module.map'\r\n  s.preserve_path = 'module.map'\r\n\r\n\r\n  s.pod_target_xcconfig = {\r\n    'SWIFT_INCLUDE_PATHS' => '\\$(PODS_ROOT)\/MySDK\/MySDK.framework \\$(PODS_ROOT)\/module.map',\r\n    'OTHER_LDFLAGS' => '-framework \"MySDK\"'\r\n  }\r\n\r\n  s.user_target_xcconfig = {\r\n    'SWIFT_INCLUDE_PATHS' => '\\$(PODS_ROOT)\/MySDK\/MySDK.framework \\$(PODS_ROOT)\/module.map',\r\n    'OTHER_LDFLAGS' => '-framework \"MySDK\"'\r\n  }\r\nend\r\n\r\n```\r\n\r\n\r\n1.1.2 module.map file has below content-\r\n```\r\n\r\nmodule MySDK {\r\nheader \"MySDK.framework\/Headers\/MySDKFramework.h\"\r\nexport *\r\nlink framework \"CoreLocation\"\r\nlink framework \"AVFoundation\"\r\nlink framework \"AudioToolbox\"\r\nlink framework \"SystemConfiguration\"\r\nlink framework \"MediaPlayer\"\r\nlink \"sqlite3\"\r\n}\r\n\r\n\r\n```\r\n2. We have to create another pod by adding more features using above MySDK pod as dependency.\r\nIt is failing with module not found error from pod repo push command in podspec validation.\r\n\r\n`pod repo push repo_name AnotherSDK.podspec --verbose`\r\nAbove command is failing with below error-\r\n\r\n```\r\n\r\n\u00a0Command CompileSwift failed with a nonzero exit code\r\n\u00a0\u00a0 \u00a0\u00a0 \u00a0 ** BUILD FAILED **\r\n\u00a0\u00a0 \u00a0\u00a0 \u00a0 The following build commands failed:\r\n\u00a0 \u00a0 CompileSwift normal x86_64\r\n\u00a0 \u00a0 CompileSwiftSources normal x86_64 com.apple.xcode.tools.swift.compiler\r\n\u00a0 \u00a0 CompileSwift normal i386\r\n\u00a0 \u00a0 (3 failures)\r\n\u00a0\u00a0 Testing with `xcodebuild`.\u00a0\r\n\u00a0-> AnotherSDK (0.0.5)\r\n\t\u2022\tERROR | [iOS] xcodebuild: Returned an unsuccessful exit code.\r\n\t\u2022\tNOTE\u00a0 | xcodebuild:\u00a0 note: Using new build system\r\n\t\u2022\tNOTE\u00a0 | [iOS] xcodebuild:\u00a0 note: Planning build\r\n\t\u2022\tNOTE\u00a0 | [iOS] xcodebuild:\u00a0 note: Constructing build description\r\n\t\u2022\tERROR | [iOS] xcodebuild:\u00a0 AnotherSDK\/AnotherSDK\/Classes\/ClassName.swift:11:8: error: no such module 'MySDK'\r\n\t\u2022\t\r\n[!] The `AnotherSDK.podspec` specification does not validate.\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.2\/lib\/cocoapods\/command\/repo\/push.rb:150:in `block in validate_podspec_files'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.2\/lib\/cocoapods\/command\/repo\/push.rb:135:in `each'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.2\/lib\/cocoapods\/command\/repo\/push.rb:135:in `validate_podspec_files'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.2\/lib\/cocoapods\/command\/repo\/push.rb:76:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/claide-1.0.3\/lib\/claide\/command.rb:334:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.2\/lib\/cocoapods\/command.rb:52:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.2\/bin\/pod:55:in `<top (required)>'\r\n\/usr\/local\/bin\/pod:23:in `load'\r\n\/usr\/local\/bin\/pod:23:in `<main>'\r\n\r\n```\r\n\r\n**3. We created a module.map file from above step 1.1.2 is not getting downloaded from `pod update` or `pod install` command.\r\nWe are getting no such module 'MySDK' error**\r\n\r\nTo run the application we did below changes.\r\n3.1 Mention pod repo link with tag name.\r\n\r\n  ```\r\npod \u2018MyAnotherSDK\u2019, :git => 'git@git.domainName.net:groupName\/myanothersdk.git\u2019, :tag => '0.0.5'\r\n  pod \u2018MySDK\u2019, :git => 'git@git.domainName.net:groupName\/mysdk.git', :tag => \u20180.1.0\u2019\r\n```\r\n\r\nWhen we manually add pod link of MyAnotherSDK, MySDK pod with tag or branch name in podfile in example application, remove -Objc and $(inherited) from other linker flag. Application runs successfully.\r\n\r\nIPA fails to compile when we mention only pod name in podfile with error **no such module \u2018MySDK\u2019**\r\n\r\n","comments":["If possible, please upload a sample app or repo demonstrating the issue. It will make it much easier to diagnose and follow."],"labels":["s1:awaiting input","s6:need sample"]},{"title":"Refer Pods framework within a Framework repo for testing","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\nI have added a new target sample_app to my my xcode xcworkspace which also builds the framework. This new target is created to test the framework using pods. But when I try to run the new target it always refers to my local framework code and not to the pods version. Is there a way to make sure this new target always refers to remote pods and not local code ? \r\n\r\n## What did you do?\r\ncreate a new target in existing xcworkspace project\r\nconfigured the new target to use the pods \r\ndid pod install -> runs successfully. \r\n\r\n## What did you expect to happen?\r\n\r\n\u2139 Please replace these two lines with what you expected to happen.  \r\nWhen running new target sample_app, It should be referring to remote pods and not local as the target sample_app is configured to use remote pods\r\n\r\n## What happened instead?\r\n when I try to run the new target sample_app it always refers to my local framework code and not to the remote pods version. \r\n\r\n## CocoaPods Environment\r\n1.10.0 \r\n\r\n","comments":["have you tried cleaning your derived data? if xcode finds the framework is already built it will re-use it.\r\n\r\ncan you please attach a sample app demonstrating the issue ?","Thanks @dnkoutso If i clean the derived data running the app will recreate the files back. Is that what you are referring to ?\r\n\r\n I dont have a sample project yet but will try to see if i can create one. \r\n\r\n","yes a sample app would definitely help here.","@dnkoutso attached is the sample project where I have managed to replicate the issue. \r\n\r\nSteps \r\n1. Download the project and unzip the file\r\n2. Do pod install\r\n3. open the PlayKit.xcworkspace in xcode 12.5.1 \r\n4. the target `pod-test-example-app` is referring to a pod version of PlayKit which is specified in the pod file. \r\n5. Running the target `pod-test-example-app` in simulator you can see it refers to local SDK code and also debuggable. \r\n6. Also tried to clean the derived data as you said earlier but not of much use. \r\n\r\nPlease let me know if this helps. \r\n\r\n[PlayKit.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/7046589\/PlayKit.zip)\r\n\r\n","Hi @dnkoutso did you get a chance to look at the example project I shared ?. Any suggestions. "],"labels":["help wanted"]},{"title":"depend another Pod which has vendored_frameworks in my Pod: Library not loaded: @loader_path\/..\/Frameworks","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n`spec.dependency VLCKit` in my podspec, where VLCKit ships a `vendored_frameworks`\r\n\r\n## What did you expect to happen?\r\n\r\nLink `my_plugin` to `VLCKit.framework\/VLCKit`\r\n\r\n## What happened instead?\r\n\r\nthe *library install name* in `my_plugin` is `@loader_path\/..\/Frameworks\/VLCKit.framework\/Versions\/A\/VLCKit` which is resolved to wrong location.\r\n\r\n```\r\ndyld: Library not loaded: @loader_path\/..\/Frameworks\/VLCKit.framework\/Versions\/A\/VLCKit\r\n  Referenced from: \/private\/tmp\/my_plugin\/example\/build\/macos\/Build\/Products\/Debug\/my_plugin_example.app\/Contents\/Frameworks\/my_plugin.framework\/Versions\/A\/my_plugin\r\n  Reason: image not found\r\n```\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.1\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.arm64e-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.5.1 (20G80)\r\n       Xcode : 12.5.1 (12E507)\r\n         Git : git version 2.32.0\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nThis issue is from https:\/\/github.com\/flutter\/flutter\/issues\/87995, you can find minimal reproducible steps there.\r\n\r\nOr you can use [this reproducible project provided by jmagman](https:\/\/github.com\/flutter\/flutter\/issues\/87995#issuecomment-897286821) which doesn't require Flutter.\r\n","comments":["I find that making the plugin statically linked can avoid this issue:\r\n```\r\ns.static_framework = true\r\n```\r\nand `otool -L my_plugin_example` gives\r\n```\r\n@loader_path\/..\/Frameworks\/VLCKit.framework\/Versions\/A\/VLCKit\r\n```\r\n, this is correct because in this case `@loader_path` is resolved to the path to executable binary, rather than the path to `my_plugin` dynamic library while dynamically linked.\r\n\r\nIt seems that when the plugin is dynamically linked, it's dependencies are still linked as if they are linked to the executable binary.","thanks, will have to investigate. The sample app should help a lot.\r\n\r\nif this is easy we can land it for 1.11.0.","might be related https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/10183"],"labels":["help wanted"]},{"title":"xcdatamodeld is not compiling","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [ ] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n\u2139 Please replace these two lines with what you did.  \r\nCreated a pod with a Core Data xcdatamodeld\r\n\r\n## What did you expect to happen?\r\nxcdatamodeld would compile as per https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/6560\r\n\r\n## What happened instead?\r\nxcdatamodeld is not compiling \r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.2\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.3 (20E232)\r\n       Xcode : 12.5.1 (12E507)\r\n         Git : git version 2.30.1 (Apple Git-130)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : bitmovin - git - https:\/\/github.com\/bitmovin\/cocoapod-specs.git @ 33495b519ae674cd73c2113847e9cd1e3868e98b\r\n\r\n               cocoapods - git - https:\/\/github.com\/CocoaPods\/Specs.git @ cf19b9cac0cd03c9fa91c06bfddfc3785a9f0cbe\r\n\r\n               siden-cocoa-specs - git - https:\/\/gitlab.com\/sidenio\/client\/siden-cocoa-specs.git @ 4659840530ae7737b8f4abb89a4ddd53ea2e6b7f\r\n\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate                 : 1.0.4\r\ncocoapods-disable-podfile-validations : 0.1.1\r\ncocoapods-generate                    : 2.2.2\r\ncocoapods-plugins                     : 1.0.0\r\ncocoapods-search                      : 1.0.0\r\ncocoapods-trunk                       : 1.5.0\r\ncocoapods-try                         : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\ntarget 'SDTestAnalytics' do\r\n    pod 'SDAnalytics', :path => '..\/..\/Libraries\/Networking\/SDAnalytics'\r\n    pod 'CNIOLinux', :modular_headers => true\r\n    pod 'CNIODarwin', :modular_headers => true\r\n    pod 'CNIOWindows', :modular_headers => true\r\n    pod 'CNIOAtomics', :modular_headers => true\r\n    pod 'CNIOHTTPParser', :modular_headers => true\r\n    pod 'CNIOBoringSSL', :modular_headers => true\r\n    pod 'CNIOBoringSSLShims', :modular_headers => true\r\n    pod 'CGRPCZlib', :modular_headers => true\r\nend\r\n```\r\n\r\n\r\n\r\n## Project that demonstrates the issue\r\n\r\n\u2139 Please link to a project we can download that reproduces the issue.\r\nxcdatamodeld is in Resources folder and I use following line in pod spec\r\nspec.resources = ['Resources\/**']\r\n","comments":["@sergiidankevych can you explicitly specify the resource `spec.resources = ['Resources\/path\/to\/mydata.xcdatamodeld']` instead?\r\n\r\n","I tried it - still same results","Can you please provide a sample app with the issue so we can investigate?","Sure. I ll send it this week.","@sergiidankevych friendly ping","@dnkoutso  I think I am seeing this same issue. Here is a sample app to reproduce the issue with: https:\/\/github.com\/giantramen\/CocoapodsBugExample\r\n\r\nIt seems like if I have `use_frameworks!` in my podfile, the .xcdatamodeld is correctly added to compile sources. But if switch to `use_modular_headers! ` the .xcdatamodeld no longer shows up in compile sources. ","Hi @dnkoutso,\r\n\r\nWe were facing this issue some time now, which I didn't have the time to investigate up until now, and I see that what @giantramen wrote above is what is happening for us as well. We are currently adding it manually after the pod update.\r\nI will create a post install script which I hope can be removed later on once fixed.\r\n\r\nWere you able to check this issue?\r\n\r\nThanks in advance,\r\nNilit\r\n"],"labels":["s6:need sample"]},{"title":"script_phase_constants contains bashisms but tries to use \/bin\/sh","body":"https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/42cce8842efa64c15f3510cf97b4d9e961ee85b7\/lib\/cocoapods\/generator\/script_phase_constants.rb#L5\r\n\r\nAs of now bash is used as the default shell in macOS, but it is not very strict about POSIX standards. It may be the case that, in the future, given that Apple is moving away from bash, it could be replaced by something stricter, [dash maybe?](https:\/\/scriptingosx.com\/2020\/06\/about-bash-zsh-sh-and-dash-in-macos-catalina-and-beyond\/).\r\n\r\nYou can confirm this by switching from bash to dash as the sh interpreter, I did that in order to catch bashisms within my own scripts:\r\n\r\n```\r\nsudo ln -sf \/bin\/dash \/var\/select\/sh \r\n```\r\n\r\nIn order to prevent issues in the future we should either get rid of the bashisms or change those script files to call bash explicitly but hardcode its path, like this:\r\n\r\n```\r\n#\/usr\/bin\/env bash\r\n```","comments":["I think that's fine, want to make a PR for it? we'd need to update integration specs but thats easy.","Sure, but how exactly do you see this fixed?\r\n\r\na. Make scripts POSIX compliant: requires some work and continuous attention (i.e. adding shellcheck to the CI tests in order to prevent bashisms from popping up again)\r\n\r\nb. Pick bash from env: has a chance of breaking people's workflow __today__, since it's not guaranteed to pick up the system bash (the user could've installed a more up to date bash from brew or whatever)\r\n\r\nc. Hardcode \/bin\/bash: has a chance of breaking very very very far in the future, if apple does in fact nuke bash from macOS \r\n\r\nd. Hardcode \/bin\/zsh: since it has became the default shell it shouldn't be going anywhere\r\n\r\ne. ?","isnt c) the current option?\r\n\r\nI wouldnt prefer b) as it will cause a huge rout to folks. we can do b) only if we can provide a backup.\r\n\r\nWouldnt d) also break some folks?","> isnt c) the current option?\r\n\r\nNot exactly, we're implicitly using bash in sh compatibility mode, which isn't very strict as you can see but is different from calling bash directly. So even c. has some, albeit low, risk involved.\r\n\r\n> I wouldnt prefer b) as it will cause a huge rout to folks. we can do b) only if we can provide a backup.\r\n\r\nwdym by providing a backup? \r\n\r\n> Wouldnt d) also break some folks?\r\n\r\nThere is indeed a risk of someone getting caught in some corner case. It could also be the case that, just like a. we could need to modify the scripts to make them zsh compatible, further increasing the chances of breaking.\r\n\r\n---\r\n\r\nThe very possibility of b. breaking people\u2019s workflows kind of stems from the fact bundled bash is ancient and heavily patched by Apple. I really wouldn't be surprised if it got axed the same way bundled ruby, python and perl are supposed to. \r\n\r\nSo while c. supposedly offers the lowest risk and would fix my personal issue _right now_ I think it's fair to look for a long term solution, if possible. \r\n\r\nI'm also trying to stand on the theoretical ground as much as possible because I don't know the inner workings of cocoapods nor the nature of these scripts."],"labels":["t1:enhancement","d1:easy"]},{"title":"Pods with only a license type aren't in the acknowledgements","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nAdd a pod with `s.license = \"MIT\"` but without a `LICENSE` or similar file. Run `pod install`.\r\n\r\n## What did you expect to happen?\r\n\r\nThe `Pods\/Target\\ Support\\ Files\/Pods\/Pods-acknowledgements.plist` file includes some mention of these pods. Supporting at least a couple of common licenses (e.g. MIT\/BSD\/MPL\/etc) and raising a warning otherwise (to add a file) would be ideal.\r\n\r\n## What happened instead?\r\n\r\nThese pods aren't mentioned at all in the acknowledgements, which may mean you're breaking the licensing terms. The \"default license\" is \"the author retains all copyright and nobody else can use the code\".\r\n\r\n## CocoaPods Environment\r\n\r\nSorry would rather not, let me know if this actually matters.\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/kenmaca\/react-native-apple-ads-attribution\/tree\/5a648c7165b4ff2276ca057ac480963bdeae7c1c\r\n\r\n## Cause\r\n\r\nThis is working as currently intended - i.e. the code ignores the `:type` key in the podspec license and tries to find a file: https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/generator\/acknowledgements.rb#L76-L86 . While that's probably preferable, in the absence of a file the license `:type` should be respected.","comments":["@mikekap thanks for the report! Would you like to make a contribution which I can review to improve this?"],"labels":["t1:enhancement","d1:easy"]},{"title":"resources-to-copy-${TARGETNAME}.txt sometimes left over after build","body":"# Report\r\n\r\n## What did you do?\r\n\r\nWorking on my project and making a build once in a while.\r\n\r\n## What did you expect to happen?\r\n\r\nNothing in particular.\r\n\r\n## What happened instead?\r\n\r\nA file `${PODS_ROOT}\/resources-to-copy-${TARGETNAME}.txt` popped out of nowhere and was shown as a new file by Git.\r\n\r\nMost likely the file wasn't deleted at the end of the `Pods-${TARGETNAME}-resources.sh` script for some reason.\r\n\r\nAside from ensuring that the delete call will always happen by setting an exit trap for the script that is executed even if the script is failing with an error or get canceled by signal, I don't understand why this file is placed in `${PODS_ROOT}` to begin width. A project should be buildable even from a read-only medium. The correct location for such a file should be within `${DERIVED_FILE_DIR}` or in that case, as the file is only of very temporary use, it should probably be `${TARGET_TEMP_DIR}`.\r\n\r\n## CocoaPods Environment\r\n\r\n```\r\n   CocoaPods : 1.10.1\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.4 (20F71)\r\n       Xcode : 13.0 (13A5154h)\r\n         Git : git version 2.30.1 (Apple Git-130)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\n``","comments":["That is a good idea, thanks! Recommend making a PR to change this!","Hi, we are also constantly seeing this file still today. Any updates on this ticket? \ud83e\udd7a "],"labels":["t1:enhancement","d1:easy"]},{"title":"Xcode 13: Podspec `vendored_frameworks` build setting not realizing framework path","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nSet up podspec to use vendored xcframework:\r\n\r\n```\r\n   s.subspec \"MyModule\" do |s|\r\n     s.source_files = \"Sources\/MyModule\/**\/*.{swift}\"\r\n     s.vendored_frameworks = \"Frameworks\/MyFramework.xcframework\"\r\n   end\r\n```\r\nWithin `\/Frameworks` a fat framework `MyFramework.framework` also exists (for other package managers):\r\n```\r\n> Frameworks\r\n  > MyFramework.xcframework\r\n  > MyFramework.framework\r\n```\r\n\r\nRun `pod lib lint`\r\n\r\n## What did you expect to happen?\r\nWe expect `pod lib lint` to succeed without warnings.\r\n\r\n## What happened instead?\r\nWe received a warning:\r\n``` \r\nwarning: unable to use malformed module source info '...\/Frameworks\/MyFramework.framework\/Modules\/MyFramework.swiftmodule\/Project\/x86_64-apple-ios-simulator.swiftsourceinfo'\r\n```\r\nIt appears that `MyFramwework.framework` is incorrectly being found instead of `MyFramework.xcframework` that is specified in the podspec.\r\n\r\n## CocoaPods Environment\r\n\r\n```\r\n   CocoaPods : 1.10.1\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin20]\r\n    RubyGems : 3.2.20\r\n        Host : macOS 11.4 (20F71)\r\n       Xcode : 13.0 (13A5154h)\r\n         Git : git version 2.30.1 (Apple Git-130)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\n[Braintree iOS](https:\/\/github.com\/braintree\/braintree_ios\/blob\/master\/Braintree.podspec)\r\n","comments":["Most likely a bug yes, would need some help to diagnose.","I'm also facing a similar issue related to vendored_frameworks.\r\nMine is a kotlin-multiplatform project, where I used Gradle's cocoapods plugin. When I run lint on the podspec, getting the below error:\r\n` file patterns: The vendored_frameworks pattern did not match any file.`\r\n```\r\nPod::Spec.new do |spec|\r\n    spec.name                     = 'dryrun'\r\n    spec.version                  = '1.0.2-RC'\r\n    spec.homepage                 = 'https:\/\/github.com\/abhimuktheeswarar\/DryRunKotlinMPP'\r\n    spec.source                   = { :git => \"https:\/\/github.com\/abhimuktheeswarar\/DryRunKotlinMPP.git\", :tag => \"v#{spec.version}\" }\r\n    spec.authors                  = 'Abhi'\r\n    spec.license                  = 'The Apache Software License, Version 2.0'\r\n    spec.summary                  = 'DryRunKotlinMPP Kotlin\/Native module CocoaPods'\r\n\r\n    spec.static_framework         = true\r\n    spec.vendored_frameworks      = \"build\/cocoapods\/framework\/dryrun.framework\"\r\n    spec.libraries                = \"c++\"\r\n    spec.module_name              = \"#{spec.name}_umbrella\"\r\n\r\n                \r\n\r\n                \r\n\r\n    spec.pod_target_xcconfig = {\r\n        'KOTLIN_TARGET[sdk=iphonesimulator*]' => 'ios_x64',\r\n        'KOTLIN_TARGET[sdk=iphoneos*]' => 'ios_arm',\r\n        'KOTLIN_TARGET[sdk=watchsimulator*]' => 'watchos_x64',\r\n        'KOTLIN_TARGET[sdk=watchos*]' => 'watchos_arm',\r\n        'KOTLIN_TARGET[sdk=appletvsimulator*]' => 'tvos_x64',\r\n        'KOTLIN_TARGET[sdk=appletvos*]' => 'tvos_arm64',\r\n        'KOTLIN_TARGET[sdk=macosx*]' => 'macos_x64'\r\n    }\r\n\r\n    spec.script_phases = [\r\n        {\r\n            :name => 'Build dryrun',\r\n            :execution_position => :before_compile,\r\n            :shell_path => '\/bin\/sh',\r\n            :script => <<-SCRIPT\r\n                set -ev\r\n                REPO_ROOT=\"$PODS_TARGET_SRCROOT\"\r\n                \"$REPO_ROOT\/..\/gradlew\" -p \"$REPO_ROOT\" :dryrun:syncFramework \\\r\n                    -Pkotlin.native.cocoapods.target=$KOTLIN_TARGET \\\r\n                    -Pkotlin.native.cocoapods.configuration=$CONFIGURATION \\\r\n                    -Pkotlin.native.cocoapods.cflags=\"$OTHER_CFLAGS\" \\\r\n                    -Pkotlin.native.cocoapods.paths.headers=\"$HEADER_SEARCH_PATHS\" \\\r\n                    -Pkotlin.native.cocoapods.paths.frameworks=\"$FRAMEWORK_SEARCH_PATHS\"\r\n            SCRIPT\r\n        }\r\n    ]\r\nend\r\n```\r\nI couldn't figure out what is going wrong here, even I tried keeping the podspec & framework in the same folder & tried, the same error is happening.\r\n","@sarahkoop thanks for the report. Just tried `pod lib lint` with Xcode 13 and latest master branch of cocoapods and I was able to lint the podspec successfully.\r\n\r\nDid something change on your side or is it possible things were fixed on master branch? I will try 1.10.2 to verify.\r\n\r\n```\r\nBraintree passed validation.\r\n```","hmm maybe I did not include the first step you said. Do you have a branch for me to reproduce ?","I tried your podspec and so far I cannot reproduce.","Hi @dnkoutso thanks for looking into this. The issue isn't present when we exclude arm64 in our podspec, which is being done currently. In preparation for Apple Silicon support, we tried removing that exclusion and uncovered this issue. I've pushed up a branch [`demo_cocoapods_issue`](https:\/\/github.com\/braintree\/braintree_ios\/tree\/demo_cocoapods_issue) without the arm64 exclusion to allow you to reproduce the error. \r\n\r\nTo reproduce from that branch:\r\n`pod lib lint --subspec=PayPalDataCollector`\r\n\r\nWe also have developed a workaround for this on the branch [`cocoapods_magnes_workaround`](https:\/\/github.com\/braintree\/braintree_ios\/tree\/cocoapods_magnes_workaround), where we moved the frameworks into different sub-folders within the `\/Frameworks` directory. On that branch, the above command should succeed.","Yeap confirmed, although not entirely sure why yet. If I move `PPRiskMagnes.framework` into something else then it works.","@sarahkoop I think I found the culprit. The issue is the following I think:\r\n\r\nin `Pods-App.release.xcconfig` there is:\r\n\r\n```\r\n...\r\nFRAMEWORK_SEARCH_PATHS = $(inherited) \"${PODS_CONFIGURATION_BUILD_DIR}\/Braintree\" \"${PODS_ROOT}\/..\/..\/..\/..\/..\/..\/..\/..\/Users\/dimitris\/Development\/ios\/scrap\/braintree_ios\/Frameworks\" \"${PODS_XCFRAMEWORKS_BUILD_DIR}\/PPRiskMagnes\"\r\n...\r\nOTHER_LDFLAGS = $(inherited) -framework \"Braintree\" -framework \"PPRiskMagnes\"\r\n```\r\n\r\nBefore the `FRAMEWORK_SEARCH_PATHS` includes the `\/Frameworks` folder Xcode finds your `PPRiskMagnes.framework` _first_ and it causes this issue.\r\n\r\nIf we flip the order and place `\"${PODS_XCFRAMEWORKS_BUILD_DIR}\/PPRiskMagnes\"` _before_ the other entry then all works.\r\n\r\nI need to figure out why `\"${PODS_ROOT}\/..\/..\/..\/..\/..\/..\/..\/..\/Users\/dimitris\/Development\/ios\/scrap\/braintree_ios\/Frameworks\"` is added in the first place. If there is a valid reason then I think the fix for us is to include the vendored xcframework paths first.\r\n\r\n\r\n","The workaround is to move the `PPRiskMagnes.framework` into another sub-folder perhaps. This is why renaming it makes the build pass.","I attempted to fix by sorting those differently however the fix is not so easy to implement. I recommend pursuing the workaround instead.","Ok we will pursue the workaround for now, please let us know if this gets fixed!","Gonna move this out of 1.11.0 for now as the fix is a bit more complicated than I expected and I think the workaround is sufficient. Keeping it open."],"labels":["t2:defect","s2:confirmed","s7:workaround available","r:xcframeworks"]},{"title":"Podfile.lock: Invalid installation source","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [ ] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n1. Install Pods files and create a **Podfile.lock** file using `pod install`.\r\n2. Change the version number of one of the Pod files\r\ne.g. `pod 'YandexMobileMetrica\/Dynamic','3.16.0'` -> `pod 'YandexMobileMetrica\/Dynamic','3.17.0'`\r\n3. Run `pod install`\r\n\r\n## What did you expect to happen?\r\n\r\nInstall all pod dependencies correctly from the **Podfile.lock**.\r\n\r\n## What happened instead?\r\n\r\nInstallion from wrong installation source:\r\ne.g. \r\n1. `pod 'Alamofire', git: 'https:\/\/github.com\/LimeHD\/Alamofire.git', branch: 'v4.8.2_decrease_timeout_interval'` uses \r\n`https:\/\/github.com\/Alamofire\/Alamofire.git` instead of `https:\/\/github.com\/LimeHD\/Alamofire.git`\r\n2. `pod 'Project', git: 'https:\/\/mob_sdk_partner:PARTNER_ID@gitlab.project.media\/project\/sdk_mob_ios_dist.git', tag: '4.4.2'` uses `ssh` instead of `http` \r\n\r\n## Workaround\r\n1. Delete **Podfile.lock**.\r\n2. Run `pod install`.\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.1\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.4 (20F71)\r\n       Xcode : 12.5 (12E262)\r\n         Git : git version 2.30.1 (Apple Git-130)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.4.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment this line to define a global platform for your project\r\nplatform :ios, '9.0'\r\n# Uncomment this line if you're using Swift\r\nuse_frameworks!\r\n\r\ntarget 'MyPROJECT' do\r\n  pod 'ActionSheetPicker-3.0'\r\n  pod 'Alamofire', git: 'https:\/\/github.com\/LimeHD\/Alamofire.git', branch: 'v4.8.2_decrease_timeout_interval'\r\n  pod 'Firebase\/Analytics','7.11.0'\r\n  pod 'Firebase\/Crashlytics','7.11.0'\r\n  pod 'Google-Mobile-Ads-SDK','7.69.0'\r\n  pod 'GoogleMobileAdsMediationFacebook'\r\n  pod 'GoogleMobileAdsMediationMyTarget'\r\n  pod 'GoogleMobileAdsMediationMoPub'\r\n  pod 'google-cast-sdk','4.4.7'\r\n  pod 'GoogleAds-IMA-iOS-SDK'\r\n  pod 'SwiftyStoreKit'\r\n  pod 'SwiftyJSON'\r\n  pod 'M3U8Kit', git: 'https:\/\/github.com\/LimeHD\/M3U8Parser.git', branch: 'limehd_0.2.5'\r\n  pod 'mopub-ios-sdk'\r\n  pod 'YandexMobileAds\/Dynamic','~> 4.1'\r\n  pod 'YandexMobileMetrica\/Dynamic','3.16.0'\r\n  pod 'YandexMobileMetricaPush\/Dynamic'\r\n  pod 'RealmSwift', '4.4.1'\r\n  pod 'myTargetSDK'\r\n  pod 'Project', git: 'https:\/\/mob_sdk_partner:PARTNER_ID@gitlab.project.media\/project\/sdk_mob_ios_dist.git', tag: '4.4.2'\r\nend\r\n\r\ntarget 'NotificationService' do\r\n  pod 'YandexMobileMetricaPush\/Dynamic'\r\nend\r\n\r\ndeployment_target = '9.0'\r\n\r\npost_install do |installer|\r\n    installer.generated_projects.each do |project|\r\n        project.targets.each do |target|\r\n            target.build_configurations.each do |config|\r\n                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = deployment_target\r\n            end\r\n        end\r\n        project.build_configurations.each do |config|\r\n            config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = deployment_target\r\n        end\r\n    end\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nPrivate.\r\n","comments":["Probably a bug indeed, I do not have an easy fix right now, help is welcomed!"],"labels":["help wanted","s7:workaround available"]},{"title":"pod install updates pods","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nRun `pod deintegrate`\r\nRun `pod install`\r\n\r\n## What did you expect to happen?\r\n\r\nThe pods are installed in accordance with `Podfile.lock`\r\n\r\n## What happened instead?\r\n\r\nThe pods have been updated, `git` shows a diff in `Podfile.lock`\r\n\r\n## CocoaPods Environment\r\n\r\n```\r\n   CocoaPods : 1.10.1\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.15.7 (19H15)\r\n       Xcode : 12.1 (12A7403)\r\n         Git : git version 2.24.3 (Apple Git-128)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nworkspace \"UnibankV2.xcworkspace\"\r\nproject \"UnibankV2.xcodeproj\"\r\nplatform :ios, :deployment_target => \"9.3.5\"\r\n\r\nuse_frameworks!\r\ninhibit_all_warnings!\r\n\r\ndef common_pods\r\n  pod 'GoogleUtilities', '<=6.7.0'\r\n\r\n  pod 'AlamofireImage'\r\n  pod 'CocoaLumberjack\/Swift'\r\n  pod 'PromiseKit'\r\n  pod 'PromiseKit\/CoreLocation'\r\n  pod 'PureLayout'\r\n  pod 'R.swift'\r\n  pod 'SwiftLint'\r\n  pod 'Swinject'\r\n  pod 'RealmSwift'\r\n  # pod \"RxRealm\"\r\n  pod 'SAMKeychain', '~> 1.5'\r\n  pod 'CardIO', '~> 5.4'\r\n  pod 'SSZipArchive', '~> 2'\r\n\r\n  analytics_pods\r\n  hud_pods\r\n  rxswift_pods\r\nend\r\n\r\ndef analytics_pods\r\n  pod 'Firebase\/Crashlytics'\r\n  pod 'Firebase\/Core'\r\n  pod 'Flurry-iOS-SDK\/FlurrySDK'\r\nend\r\n\r\ndef hud_pods\r\n  pod 'MBProgressHUD', '~> 1.0'\r\nend\r\n\r\ndef rxswift_pods\r\n  pod 'Action'\r\n  pod 'RxSwift'\r\n  pod 'RxCocoa'\r\nend\r\n\r\ndef main_application_pods\r\n  pod 'FBSDKLoginKit'\r\n  pod 'Firebase\/DynamicLinks'\r\n  pod 'QRCodeReader.swift', '~> 10.0.0'\r\n  pod 'youtube-ios-player-helper', :git => 'https:\/\/github.com\/vahotm\/YTPlayerView2.git'\r\n  pod 'Sica'\r\n  pod 'GoogleMaps'\r\n  pod 'RxGoogleMaps'\r\n  pod 'MessageKit'\r\n  pod 'SCrypto'\r\n  pod 'RxKeyboard'\r\nend\r\n\r\ntarget 'UnibankV2_dev' do\r\n\tcommon_pods\r\n  main_application_pods\r\nend\r\n\r\ntarget 'UnibankV2_release' do\r\n  common_pods\r\n  main_application_pods\r\nend\r\n\r\ntarget 'UNIBANK_CurrencyRates' do\r\n    common_pods\r\nend\r\n\r\ntarget 'UnibankV2UnitTests' do\r\n  common_pods\r\nend\r\n\r\n# Post install hook to prevent usage of unavailable APIs in App Extensions (see details: https:\/\/github.com\/PureLayout\/PureLayout\/wiki\/App-Extensions )\r\n\r\npost_install do |installer|\r\n  # NOTE: If you are using a CocoaPods version prior to 0.38, replace `pods_project` with `project` on the below line\r\n  installer.pods_project.targets.each do |target|\r\n    if target.name.start_with? \"PureLayout\"\r\n      target.build_configurations.each do |build_configuration|\r\n        build_configuration.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = ['$(inherited)', 'PURELAYOUT_APP_EXTENSIONS=1']\r\n      end\r\n    end\r\n    target.build_configurations.each do |config|\r\n      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '9.3.5'\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n## Files that demonstrate the issue\r\n\r\n[Podfile+lock.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/6560840\/Podfile%2Block.zip)\r\n[Podfile.lock.after.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/6560953\/Podfile.lock.after.zip)\r\n\r\n## Misc\r\n\r\nThere's also a question on [stackoverflow](https:\/\/stackoverflow.com\/questions\/64333327\/does-pod-install-command-ignore-podfile-lock#) regarding the issue\r\n","comments":["@iharandreyev do you happen to have a _smaller_ sample repo or zip file sample project for me to reproduce easier?","ping @iharandreyev ","moving out of 1.11.0 due to inactivity."],"labels":["s6:need sample"]},{"title":"Differing subspecs on multiple projects cause duplicated frameworks","body":"# Report\r\n\r\n## What did you do?\r\n1. Setup workspace with two projects MinimalExample and MinimalExampleLib.\r\n2. Add subspec dependencies to two projects that are not exactly the same.\r\n\r\nIn the example I have used 3 different projects (to ensure it's not related to specific libary): MaterialComponents, AFNetworking, PromiseKit.\r\n\r\nMaterialComponents: target names have this weird suffix\r\n\r\nAFNetworking: target names are different, but framework names are the same\r\n\r\nPromiseKit subspecs are exactly the same on both targets, and problem does not occur.\r\n\r\n## What did you expect to happen?\r\nValid Pods project is generated.\r\n\r\n## What happened instead?\r\nTargets & frameworks are duplicated:\r\n![Screenshot 2021-05-26 at 10 45 55](https:\/\/user-images.githubusercontent.com\/19707261\/119632600-40740980-be11-11eb-8771-4beb9a005ee2.png)\r\n\r\nAnd during build, I'm getting these warnings:\r\n```\r\nMultiple targets match implicit dependency for linker flags \r\n```\r\n\r\nA workaround is to use the same subspecs on both targets, even if I don't need them (as shown with PromiseKit).\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.1\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.3.1 (20E241)\r\n       Xcode : 12.4 (12D4e)\r\n         Git : git version 2.24.3 (Apple Git-128)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nworkspace 'MinimalExample'\r\nplatform :ios, '12.0'\r\n\r\nuse_frameworks!\r\n\r\ntarget 'MinimalExample' do\r\n  # Pods for MinimalExample\r\n  pod 'MaterialComponents\/TextFields'\r\n  pod 'MaterialComponents\/Snackbar'\r\n  \r\n  pod 'AFNetworking\/Reachability'\r\n  pod 'AFNetworking\/Serialization'\r\n  \r\n  pod 'PromiseKit\/UIKit'\r\n  pod 'PromiseKit\/SystemConfiguration'\r\nend\r\n\r\ntarget 'MinimalExampleLib' do\r\n  project 'MinimalExampleLib\/MinimalExampleLib.xcodeproj'\r\n  pod 'MaterialComponents\/TextFields'\r\n  # pod 'MaterialComponents\/Snackbar' # uncomment to fix\r\n  \r\n  pod 'AFNetworking\/Reachability'\r\n  \r\n  pod 'PromiseKit\/UIKit'\r\n  pod 'PromiseKit\/SystemConfiguration'\r\nend\r\n\r\n# fix for another build failure, not related to reported issue\r\npost_install do |installer|\r\n  installer.pods_project.targets.each do |target|\r\n    target.build_configurations.each do |config|\r\n      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n\r\n\r\n## Project that demonstrates the issue\r\n[MinimalExample.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/6545276\/MinimalExample.zip)\r\n\r\n","comments":["I have the same problem, but I'm using a private developer pod (which is my app's SDK) that includes xcframework libraries like Alamofire, AWS, RxSwift, Realm, etc.\r\n![image](https:\/\/user-images.githubusercontent.com\/11080704\/120202028-78f25980-c1fc-11eb-9fdc-ddd35dd8d512.png)\r\n","I was able to repro the initial report. Yes this is a bug with subspecs because they are de-duped between different targets that use them however they produce the same framework name always.","Actually @szotp this seems to be building for me on 1.11.0 (master branch). 1.11.0 has not shipped yet but it will soon.\r\n\r\nGoing to try 1.10.2 now.\r\n\r\nI think @marciogranzotto post is a different issue fixed in 1.11.x.","oh I see this is just a warning not a build failure, nevermind.","we can possibly solve this via https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8206#issuecomment-907492786"],"labels":["t2:defect","s2:confirmed"]},{"title":"Development Pods did not create `Resources` group","body":"- [ x ] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI found since cocoapods version 1.10.0,  After run `pod install`(update), my  `Development Pods` did not create `Resources` \r\ngroup as before.\r\n\r\nresource_bundles for my podsepc file\r\n\r\n```ruby\r\ns.resource_bundles = {\r\n    'TMPodDemo' => ['TMPodDemo\/Assets\/*.png']\r\n }\r\n```\r\n\r\n## What did you expect to happen?\r\n\r\npod 1.9.3\r\nafter run pod install,  `Development Pods`  should create `Resources` group like this\r\n<img width=\"333\" alt=\"pod1 9 3\" src=\"https:\/\/user-images.githubusercontent.com\/16059158\/119596124-33571a80-be11-11eb-8cea-64fef671a7a5.png\">\r\n\r\n## What happened instead?\r\n\r\npod 1.10.1\r\ncocopods did not create `Resources` group\r\n<img width=\"332\" alt=\"pod1 10 1\" src=\"https:\/\/user-images.githubusercontent.com\/16059158\/119596274-6ef1e480-be11-11eb-9138-a6e2c2dc633f.png\">\r\n\r\nI wonder whether cocoapods new feature or bug. but without `Resources` group, my `resource_bundles` image files list at `Development Pods` root dir,  it's too long, not convenient for my coding... \r\n\r\n## CocoaPods Environment\r\n\r\n```\r\n   CocoaPods : 1.10.1\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.3 (20E232)\r\n       Xcode : 12.5 (12E262)\r\n         Git : git version 2.30.1 (Apple Git-130)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : cocoapods - git - https:\/\/github.com\/CocoaPods\/Specs.git @ 00827d9ceab3fd2db7fd6c7b4fba3331e76fcf76\r\n\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n               YCBinarySpecs - git - http:\/\/xxxx \r\n               YCSpecs - git - http:\/\/xxxx.git \r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate                 : 1.0.4\r\ncocoapods-disable-podfile-validations : 0.1.1\r\ncocoapods-generate                    : 2.0.0\r\ncocoapods-imy-bin                     : 0.3.1.3\r\ncocoapods-packager                    : 1.5.0\r\ncocoapods-plugins                     : 1.0.0\r\ncocoapods-search                      : 1.0.0\r\ncocoapods-trunk                       : 1.5.0\r\ncocoapods-try                         : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# use_frameworks!\r\n\r\nplatform :ios, '9.0'\r\n\r\ntarget 'TMPodDemo_Example' do\r\n  pod 'TMPodDemo', :path => '..\/'\r\n\r\n  target 'TMPodDemo_Tests' do\r\n    inherit! :search_paths\r\n\r\n    \r\n  end\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n[TMPodDemo](https:\/\/github.com\/ticsmatic\/TMPodDemo) \r\n","comments":["+1","Have you tried `preserve_pod_file_structure` option?\r\n\r\n```ruby\r\ninstall! 'cocoapods', preserve_pod_file_structure: true\r\n```","This is an intentional optimization to flatten the groups created.","> Have you tried `preserve_pod_file_structure` option?\r\n> \r\n> ```ruby\r\n> install! 'cocoapods', preserve_pod_file_structure: true\r\n> ```\r\n\r\nI just have tried `install! `install! 'cocoapods', preserve_pod_file_structure: true`, it seems not my want. what i need is cocoapods 1.10.0 create  `Resources` group like 1.9.3 did","You can add a subfolder to work around this and force cocoapods to avoid flattening the structure.\r\n\r\nWe can maybe add an option for this.","replace file_references_installer.rb  by  [older file_references_installer.rb](https:\/\/raw.githubusercontent.com\/CocoaPods\/CocoaPods\/3eaff05798cd1ba79aa079a0226e4d5f4a593b0d\/lib\/cocoapods\/installer\/xcode\/pods_project_generator\/file_references_installer.rb)","Add to Podfile\r\n```\r\nclass Pod::Installer::Xcode::PodsProjectGenerator::FileReferencesInstaller\r\n  def add_file_accessors_paths_to_pods_group(file_accessor_key, group_key = nil, reflect_file_system_structure = false)\r\n    file_accessors.each do |file_accessor|\r\n      paths = file_accessor.send(file_accessor_key)\r\n      paths = allowable_project_paths(paths)\r\n      next if paths.empty?\r\n\r\n      pod_name = file_accessor.spec.name\r\n      preserve_pod_file_structure_flag = (sandbox.local?(pod_name) || preserve_pod_file_structure) && reflect_file_system_structure\r\n      base_path = preserve_pod_file_structure_flag ? common_path(paths) : nil\r\n      # actual_group_key = preserve_pod_file_structure_flag ? nil : group_key\r\n      # group = pods_project.group_for_spec(pod_name, actual_group_key)\r\n      group = pods_project.group_for_spec(pod_name, group_key)\r\n      paths.each do |path|\r\n        pods_project.add_file_reference(path, group, preserve_pod_file_structure_flag, base_path)\r\n      end\r\n    end\r\n  end\r\nend\r\n```","+1"],"labels":["t1:enhancement","d2:moderate","s7:workaround available"]},{"title":"Code signing issues with using a binary xcframework Pod dependency","body":"Hello CocoaPods family!\r\n\r\nSorry for not using the issue template, I had no idea to fit the issue into that.\r\n\r\nI have some code signing issue with using a binary xcframework Pod dependency.\r\n\r\nI am working with an iPad app that needs to run on Macs with Apple Catalyst integration. For that reason we created a binary CocoaPods dependency containing a xcframework having the structure you can see in the attached image. The xcframework supports currently standard iOS, iOS simulator and intel catalyst architectures. When signing it manually and integrating it manually into the Xcode project it works perfectly.\r\n\r\n<img width=\"370\" alt=\"Kernel-xcframework\" src=\"https:\/\/user-images.githubusercontent.com\/82938261\/115528265-8f6ed200-a29a-11eb-9aaf-aca1f2beccf1.png\">\r\n\r\nWhen integrating the xcframework via CocoaPod the build process stumbles finally on signing \u201eKernel.xcframework\u201c, because **kernel_deps.a** is not signed yet. I can fix this temporarily with signing kernel_deps.a manually in the DerivedData folder before starting the Xcode build, but that is not a permanent solution, of course.\r\n\r\nI can see that the code_sign_if_enabled() function of the generated Pods-xxx-framework.sh file tries to sign \u201eKernel.xcframework\u201c and fails, because it doesn\u2019t sign kernel_deps.a before. When i disable code signing via the Pods-***-framework.sh Xcode ends up with a similar problem. Is there any solution for this issue?\r\n\r\nI am aware, that CocoaPods was designed primarily for non binary dependency handling. Since our dependency has a pretty long building time we prefer here to work with a binary dependency.\r\n\r\nI am using CocoaPods version 1.10.1.\r\n\r\nBest, Martin","comments":["Perhaps we can scan and seek if there are additional `.a` files that need signing? This seems like an \"umbrella\" framework you have.","Hello Dimitris.\r\n\r\nAt the end XCFrameworks are kind of umbrella frameworks, yes, but not in the common Apple development meaning of \"umbrella frameworks\". \r\nhttps:\/\/developer.apple.com\/documentation\/swift_packages\/distributing_binary_frameworks_as_swift_packages\r\n\r\nI guess you are thinking of extending of the code_sign_if_enabled() method in the generated Pods-xxx-framework.sh file. That should work out when you do the .a file signing before the framework signing. Signing additional .a files in the \"Frameworks\" subdirectory would be probably sufficient. I am doing this currently as workaround with an own script with Swift package manager (SPM). This works with SPM, because it signs the frameworks after all custom build phases are finished, so i can hook in. With CocoaPods i would need to patch the Pods-xxx-framework.sh.\r\n\r\nBest, Martin","thanks @MaJa1980!\r\n\r\nCan you provide your script?\r\n\r\nWe can make a PR and add an example. We would just need to edit this file to perform the signing https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/generator\/embed_frameworks_script.rb","Unfortunately my script will not help much, because it signs my concrete dependency in the context of Swift package manager.\r\n\r\nIn the end you need to sign all .a  files like:\r\n`codesign -s ${EXPANDED_CODE_SIGN_IDENTITY} ${OTHER_CODE_SIGN_FLAGS:-} ${FULL_DEPS_PATH}`\r\n\r\nFULL_DEPS_PATH is here the path to the concrete .a file. \r\nThis needs to happen before you are evaluating your framework code signing call in line 148  (eval \"$code_sign_cmd\") of your ruby template.\r\n\r\nBtw:\r\nThe binary Catalyst for Intel dependencies can be found via path:\r\n**XXX.xcframework\/ios-x86_64-maccatalyst\/XXX.framework\/Versions\/Current\/Frameworks\/xxx.a**\r\n\r\nThere is a similar folder structure for binary Catalyst for ARM\/M1 dependencies (architecture folder is named differently, of course).\r\n\r\nFun fact: Running the **iOS** target of the app with the xcframework didn't need the presigning of the binary dependency. \r\nHowever, I think it is anyway a good idea also to presign the non Catalyst binary dependencies, too. ","Hello @dnkoutso!\r\n\r\nWill you take some action here? Would be highly appreciated.\r\n\r\nBest, Martin","@MaJa1980 no plans. Feel free to open a pull request by editing the script to support the use case you want! I'll be happy to review it.\r\n\r\n","@MaJa1980 can you provide a sample app with a `.a` file inside the xcframework?","@dnkoutso Will try to provide ASAP!"],"labels":["s6:need sample"]},{"title":"[Feature request] Add `pod reinstall NAME`","body":"When a pod version is replaced with a new commit (i.e., the maintainer did the taboo `pod trunk delete` then `pod trunk push` to overwrite a bugged pod version or something), the only way to get the new version is to remove the pod, run `pod install`, then add it back, and run `pod install` again. It would be nice if we could get `pod reinstall POD` at least have `pod update` check for an update somehow.","comments":["Seems like a good suggestion. "],"labels":["t1:enhancement","d2:moderate"]},{"title":"Use dependency with non-modular-headers in library where I don't need the modular headers","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI am creating a library that contains Swift, Objective-C, Objective-C++ and C++ code. Everything is working fine so far, I even managed to access Swift code from the Objective-C++ code. \r\nNow I am trying to add a C++\/Objective-C++ dependency which does not define modular headers to my project.\r\n\r\nI have simply added the dependency to the podspec:\r\n\r\n```ruby\r\nPod::Spec.new do |s|\r\n  # ...\r\n\r\n  s.pod_target_xcconfig = {\r\n    'DEFINES_MODULE' => 'YES'\r\n  }\r\n\r\n  s.source_files = [\r\n    \"ios\/**\/*.{m,mm,swift}\",\r\n    \"ios\/CameraBridge.h\",\r\n    \"cpp\/**\/*.{cpp}\"\r\n  ]\r\n\r\n  s.dependency 'ReactCommon\/turbomodule\/core' # <- doesn't have modular headers\r\n  s.dependency \"React-Core\" # <- has modular headers\r\nend\r\n```\r\n\r\nThis fails once the consumer tries to run `pod install`:\r\n\r\n```diff\r\n- [!] The following Swift pods cannot yet be integrated as static libraries:\r\n\r\n- The Swift pod `VisionCamera` depends upon `ReactCommon`, which does not define modules. To opt into those targets generating module maps (which is necessary to import them from Swift when building as static libraries), you may set `use_modular_headers!` globally in your Podfile, or specify `:modular_headers => true` for particular dependencies.\r\n```\r\n\r\nThis error message explicitly says \"... **which is necessary to import them from Swift when building as static libraries** ...\", but I don't need to import those into Swift! I only need access to the `ReactCommon\/` headers in my Objective-C++ code. Is there a way I can tell CocoaPods that I don't need modular headers for this specific dependency?\r\n\r\nI also tried to separate the Objective-C++ and C++ into subspecs, and only gave the dependency access to that subspec, but that didn't work out as I expected. (Or I'm missing something)\r\n\r\n## Project that demonstrates the issue\r\n\r\n* [react-native-vision-camera (`frame-processors` branch)](https:\/\/github.com\/cuvent\/react-native-vision-camera\/tree\/frame-processors)\r\n* [react-native-vision-camera (`try\/use-cocoapods-subspecs` branch, here I tried to use CocoaPods subspecs for this)](https:\/\/github.com\/cuvent\/react-native-vision-camera\/tree\/try\/use-cocoapods-subspecs)\r\n","comments":["we can probably improve that but yes right now cocoapods cannot differentiate which headers import which modules. I do not think we will add such support.\r\n\r\nYour best bet is to use separate podspecs or subspecs.\r\n\r\n> I also tried to separate the Objective-C++ and C++ into subspecs, and only gave the dependency access to that subspec, but that didn't work out as I expected. (Or I'm missing something)\r\n\r\nWill mark for 1.12.0 to see if we can improve that!"],"labels":["t1:enhancement","d2:moderate"]},{"title":"Consume XCFramework & *.podspec structure","body":"* [ ] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\nIm creating the *.xcframework and trying to consume it in client application using *.podspec file\r\nThe actual xcframework compiled succesfully\r\n*.podspec\r\n\r\n```\r\nPod::Spec.new do |spec|\r\n    spec.name         = \"UnitTestWithPod\"\r\n    spec.version = \"1.2.3\"\r\n    spec.summary      = \"A really short description of test_sic. Included some specific points\"\r\n    spec.description  = \"777\"\r\n    spec.homepage     = \"https:\/\/github.com\/LLTemp\/test_sic_zip\"\r\n    spec.license      = \"MIT\"\r\n    spec.author       = { \"SergeyBrazhnik\" => \"sergey.brazhnik@ll.com\" }\r\n    spec.platform     = :ios, \"14.0\"\r\n    #spec.source = { :http => \"[REPLACE_ME]\" }\r\n    spec.source = { :http => \"https:\/\/testbuildartefacts.s3.us-east-2.amazonaws.com\/sic-sdk-ios\/1.2.3\/UnitTestWithPod.xcframework.zip\", :type => \"zip\" }\r\n    spec.vendored_framework = 'UnitTestWithPod.xcframework'\r\n    spec.vendored_libraries = 'UnitTestWithPod.xcframework\/lib'\r\n    spec.header_mappings_dir = 'UnitTestWithPod.xcframework\/openssl'\r\n    spec.dependency 'KeychainSwift', '~> 19.0'\r\n    spec.dependency 'gRPC-Swift', '1.0.0'\r\nend\r\n```\r\n\r\nPodfile\r\n```\r\nplatform :ios, '14.0'\r\nsource 'https:\/\/cdn.cocoapods.org\/'\r\n\r\ntarget 'UnitTestWithPodAPP' do\r\n  # Comment the next line if you don't want to use dynamic frameworks\r\n  use_frameworks!\r\n  \r\n  # Pods for UnitTestWithPodAPP\r\n  pod 'UnitTestWithPod', :path => '..\/UnitTestWithPod\/'\r\nend\r\n```\r\n\r\n## What did you expect to happen?\r\nProject compiles successfuly\r\n\r\n## What happened instead?\r\n![2021-02-25_19-30-48](https:\/\/user-images.githubusercontent.com\/1928745\/109184383-0064a280-77a0-11eb-9de6-940acfa229f7.png)\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.1\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.arm64e-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.2 (20D64)\r\n       Xcode : 12.4 (12D4e)\r\n         Git : git version 2.24.3 (Apple Git-128)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n\r\n## Project that demonstrates the issue\r\nhttps:\/\/github.com\/LLTemp\/UnitTestRepo\r\n","comments":["Same problem","I have the same problem. I cannot find any workaround, does anybody know how to solve it?\r\n\r\nI noticed that it downloads source and unpacks it in a temporary folder.\r\n\r\n```\r\ninflating: \/var\/folders\/2z\/wsk_6jc952z7ymfrpx11fqgwbzl698\/T\/d20210311-71240-wzwdtr\/Framework\/Framework.xcframework\/ios-arm64\/dSYMs\/Framework.framework.dSYM\/Contents\/Resources\/DWARF\/Framework\r\n```\r\n\r\nAs next step it copies from cache to local folder\r\n\r\n```\r\nCopying Framework from\r\n  `\/Users\/user\/Library\/Caches\/CocoaPods\/Pods\/External\/Framework\/3f266d9858517fc0a5ce150bc81b9c4f-00de4`\r\n  to `Pods\/Framework`\r\n```\r\n\r\nBut this cache folder is always empty!","Have the same error, did you find any solutions?","In my case it turned out that I needed to make proper paths inside of zip archive, after I fixed the paths, all started just to work!","> In my case it turned out that I needed to make proper paths inside of zip archive, after I fixed the paths, all started just to work!\r\n\r\nSorry, can you please provide some more info about problem with pathes?\r\nI have the same issue here [https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/10671](url)\r\n\r\nMay be you can look through it and give me some suggestion?","@alexeybolv I did not solve this issue unfortunately and switched to Swift Package Manager. \r\n@Gray-Wind you were able to solve it, could you provide info how? ","> @alexeybolv I did not solve this issue unfortunately and switched to Swift Package Manager.\r\n> @Gray-Wind you were able to solve it, could you provide info how?\r\n\r\nI haven't got problems with SPM too.","I use the same zip archive for SPM distribution and for CocoaPods.\r\nWhen you create zip archive, make sure you archive files, not a folder containing files, you can check archive with `unzip -l` make sure, your files have no leading folder.\r\n","From the original authors post I am unable to reproduce. @6epreu maybe things have changed in the repo since the bug was filed?\r\n\r\nI am getting a different issue when building UnitTestWithPodTests target:\r\n\r\n```\r\n\r\nShowing All Issues\r\nIgnoring file \/Users\/dimitris\/Development\/ios\/scrap\/UnitTestRepo\/UnitTestWithPod\/UnitTestWithPod\/ossl\/lib\/libssl.a, building for iOS Simulator-x86_64 but attempting to link with file built for iOS-arm64\r\n\r\nIgnoring file \/Users\/dimitris\/Development\/ios\/scrap\/UnitTestRepo\/UnitTestWithPod\/UnitTestWithPod\/ossl\/lib\/libcrypto.a, building for iOS Simulator-x86_64 but attempting to link with file built for iOS-arm64\r\n\r\nUndefined symbol: _MD5\r\n```\r\n\r\nPlease provide a specific branch and\/or more details for us to diagnose further.\r\n\r\n","moving out of 1.11 due to inactivity.","That\u00b4s an issue we had during our CP to SPM migration process, we solved and documented here:\r\nhttps:\/\/medium.com\/p\/96f225a12a20"],"labels":["r:xcframeworks"]},{"title":"Request for enhancement to --skip-tests","body":"Recently, Cocoapods was enhanced with the --test-specs option to specify which test specs to run when linting. While that is great, and useful, I am in a situation where I have many test specs and want to run all but one. Can --skip-tests be enhanced to be a bool flag if no parameter, or to take a list of one or more test_specs to skip while linting?\r\n\r\nRight now I have to list about a dozen test_specs to execute so that I can avoid one. And when new test_specs are added, someone needs to remember to update the Jenkins job(s) with the new specs or they will be quietly skipped. By explicitly listing which specs to skip, all others will be run automatically.\r\n\r\n--skip-tests\r\n--skip-tests=live_api_integration_test_spec\r\n--skip-tests=live_api_integration_test_spec,another_test_spec_to_avoid_while_linting\r\n\r\n(In lieu of modifying skip-tests, can a new option be added for this?)\r\n\r\nthanks!","comments":["Probably a good suggestion and enhancement! I think we wouldnt want to give this option to `pod trunk push` though as I would hope pod authors ensure all of their tests pass in order to publish.","Hmm, so things are trickier than I thought. Specifying test_specs=spec1,spec2,spec4 works for linting a specified subspec that has those test_specs. However, trying to lint multiple subspecs (using -subspecs=subspec1,subspec2,subspec3) results in errors, as the other subspecs don't know what spec1,spec2, or spec4 are, but are told to run them all.\r\n\r\nAgain, --skip-tests=skipped_spec1,skipped_spec2 would work better because a matching test_spec would only be found and skipped for subspecs that define it. Other subspecs could ignore it.\r\n\r\nHope that makes sense.","One more thought. I make heavy use of subspecs, each of which has multiple test_specs. In practice, it looks like the test_specs flag doesn't work well as it applies to the top-level subspec with no way to specify test_specs (or skip_tests) for a specific subspec.\r\n\r\nMight it be better to add flags directly in the podspec file itself to indicate that a specific test_spec should be skipped when linting, .e.g **test_spec.skip_linting = true**. (with default being false, of course). This is targeted and specific to linting, so won't apply to pod trunk push, and does not require any additional lint time flags\/settings.\r\n\r\n"],"labels":["t1:enhancement","d1:easy","help wanted"]},{"title":"Project Not Building on Xcode 12.5 Beta","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\ud83c\udf08\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\nMy workspace is not building on Xcode 12.5 beta, while it works fine on Xcode 12.4. \r\nThe errors seem to be similar to https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/10059 but it's different.\r\n\r\n## What did you do?\r\n\r\n`bundle exec pod install`\r\n\r\n## What did you expect to happen?\r\n\r\nAfter pod install finishes, I expect my workspace to compile just fine. It works on Xcode 12.4 (12D4e).\r\n\r\n## What happened instead?\r\n\r\nOn Xcode 12.5 beta (12E5220o) the workspace won't compile. There're 35 errors in my workspace, but I guess they can be summarized as 2:\r\n\r\n1. `Application extensions and any libraries they link to must be built with the 'APPLICATION_EXTENSION_API_ONLY' build setting set to YES.`\r\n2. `Missing package product 'someframework' - Package resolution errors must be fixed before building.`\r\n\r\n<img width=\"793\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/8419048\/106969715-28755e80-672a-11eb-8d18-0946b9439587.png\">\r\n<img width=\"1135\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/8419048\/106969725-2f9c6c80-672a-11eb-92d9-2e52cddbc782.png\">\r\n\r\n## CocoaPods Environment\r\n\r\nNote: I'm fixed on v1.9.3 on purpose. I cannot upgrade due to other circumstances.\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.9.3\r\n        Ruby : ruby 2.6.5p114 (2019-10-01 revision 67812) [x86_64-darwin20]\r\n    RubyGems : 3.2.8\r\n        Host : macOS 11.2 (20D64)\r\n       Xcode : 12.4 (12D4e)\r\n         Git : git version 2.24.3 (Apple Git-128)\r\nRuby lib dir : \/Users\/rogerluan\/.rbenv\/versions\/2.6.5\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/rogerluan\/Documents\/Projects\/redacted-app-name\/.vendor\/ruby\/2.6.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-binary      : 0.4.4\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-keys        : 2.2.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n<details><summary>Click to expand and see my podfile<\/summary>\r\n<p>\r\n\r\n```ruby\r\nplatform :ios, '12.0'\r\nuse_frameworks!\r\ninhibit_all_warnings!\r\n\r\nplugin 'cocoapods-keys', {\r\n  :project => \"redacted\",\r\n  :keys => [ \"redacted-key-name\" ]\r\n}\r\n\r\nsource 'https:\/\/cdn.cocoapods.org\/'\r\n\r\ntarget 'redacted' do\r\n\r\n  #\u2026 there're a bunch of pods here that I omitted.\r\n\r\n  # Extensions\r\n  target 'redacted-share-plugin' do\r\n    inherit! :search_paths\r\n  end\r\n\r\n  target 'redacted-function-widget' do\r\n    inherit! :search_paths\r\n  end\r\n\r\n  # Build Phase Scripts\r\n  script_phase :name => 'redacted-script-1', :execution_position => :before_compile, :script =>'${SRCROOT}\/redacted-script-1.sh'\r\n  script_phase :name => 'redacted-script-2', :execution_position => :before_compile, :script =>'${SRCROOT}\/redacted-script-2.sh'\r\nend\r\n\r\npost_install do |installer|\r\n  puts \"* post_install start\"\r\n\r\n  puts \"* Customizing build settings\"\r\n  installer.pods_project.targets.each do |target|\r\n    target.build_configurations.each do |config|\r\n      # Make sure dSYM for all the frameworks are being generated as well\r\n      config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf-with-dsym'\r\n      # Improve build and compile times\r\n      if config.name == 'Debug' || config.name == 'Sandbox'\r\n        config.build_settings['OTHER_SWIFT_FLAGS'] = ['$(inherited)', '-Onone']\r\n        config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Owholemodule'\r\n      end\r\n    end\r\n  end\r\n\r\n  puts \"* Inhibit & Suppress all warnings\"\r\n  installer.pods_project.targets.each do |target|\r\n      target.build_configurations.each do |config|\r\n          config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = \"YES\"\r\n          config.build_settings['SWIFT_SUPPRESS_WARNINGS'] = \"YES\"\r\n      end\r\n  end\r\n\r\n  puts \"* Fix build on simulator issue on Xcode 12+\"\r\n  installer.pods_project.build_configurations.each do |config|\r\n    config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'\r\n  end\r\n\r\n  puts \"* Remove `IPHONEOS_DEPLOYMENT_TARGET` to fix deprecated OS warnings\"\r\n  installer.pods_project.targets.each do |target|\r\n    target.build_configurations.each do |config|\r\n      config.build_settings.delete 'IPHONEOS_DEPLOYMENT_TARGET'\r\n    end\r\n  end\r\n\r\n  puts \"* post_install end\"\r\nend\r\n```\r\n\r\n\r\n<\/p>\r\n<\/details>\r\n \r\n## Project that demonstrates the issue\r\n\r\n\u2139 Please link to a project we can download that reproduces the issue.\r\nYou can delete this section if your issue is unrelated to build problems,\r\ni.e. it's only an issue with CocoaPods the tool.\r\n","comments":["The same with v. 1.10.1","Thanks for confirming it's not an issue with my cocoapods version @Kileren \ud83d\ude4f ","I get this too....`Application extensions and any libraries they link to must be built with the 'APPLICATION_EXTENSION_API_ONLY' build setting set to YES.`","Hi. Were you guys able to solve this?","@helimarrabago Not me - but haven't tried any more - I've been using Xcode 12.4 since then","Same problem here, just upgraded to 12.5 today and my app is not building anymore. ... \r\nApplication extensions and any libraries they link to must be built with the `APPLICATION_EXTENSION_API_ONLY` build setting set to YES.\r\n\r\nEven if I change it to YES it won't work.","I search a lot\uff0c find this [article](https:\/\/swift-cast.com\/2021\/04\/38\/#more-38) \r\n```\r\n#if !ACTION_EXTENSION\r\n    \/\/codes that don't obey extension-only API requests\r\n#else\r\n    \/\/normal codes \r\n#endif \r\n```\r\nbut I think this method only solved a part problem, how about the whole file? \r\n\r\n ","> I search a lot\uff0c find this [article](https:\/\/swift-cast.com\/2021\/04\/38\/#more-38)\r\n> \r\n> ```\r\n> #if !ACTION_EXTENSION\r\n>     \/\/codes that don't obey extension-only API requests\r\n> #else\r\n>     \/\/normal codes \r\n> #endif \r\n> ```\r\n> \r\n> but I think this method only solved a part problem, how about the whole file?\r\n\r\nAlthough it is written like this, I still don\u2019t know how to solve it","Removing and readding swift packages worked for me, but that's obviously not ideal","> Removing and readding swift packages worked for me, but that's obviously not ideal\r\n\r\ncould you see through version control what acctually happened in the project file(s). Like if some other build setting changed by re adding the swift packages?","> Hi. Were you guys able to solve this?\r\n\r\nNo I wasn't, I am using 12.4","After setting the build setting `APPLICATION_EXTENSION_API_ONLY` in the targets that required it, I had to run `pod deintegrate` and `pod install` for everything to work","Not even pod deintegrate + install worked for me \ud83d\ude25 CocoaPods v1.10.1\r\n","I was able to get it to work by:\r\n\r\n- Pointing CocoaPods and Xcodeproj gems to `master` (in my Gemfile)\r\n- Adding this to my Podfile:\r\n\r\n```ruby\r\ndef pre_integrate!(args)\r\n  # We need this to fix a crash with CocoaPods @ master. Once we move away from using a custom CocoaPods version (@ master), which's declared in the Gemfile, then this can probably be removed as well.\r\nend\r\n```\r\n\r\nBecause of a bug in CocoaPods master (in my project, at least, it would crash when evaluating my Podfile, saying that it couldn't find `pre_integrate!` method, no idea why).\r\n\r\n- Deintegrating & `pod install`ing everything again (I tried multiple times to get everything to work without doing this, deintegrating & discarding changes later, but unfortunately this was necessary for some reason).\r\n- Running `cmd + shift + K` several times (sometimes in a row). Really really weird but sometimes running it only once wouldn't work (it would throw some random errors about one or more dependencies being \"outdated\", so then I run `cmd + shift + K` again and it would work).\r\n\r\nAfter all that, one of my SPM stopped working (but this is probably unrelated to CocoaPods 12.5) - https:\/\/github.com\/maxep\/MXParallaxHeader - for some reason Xcode 12.5 couldn't find the module to import. So the fix was to remove the SPM dependency and add it as a Pod \ud83d\ude05 then it worked. \r\n\r\nHope this helps.\r\n\r\nBtw, this was all done on Apple Silicon \ud83d\ude07 ","I write an article to talk about  [APPLICATION_EXTENSION_API_ONLY Problem](https:\/\/kingnight.github.io\/programming\/2021\/06\/09\/Using-Swift-API-availability-to-solve-App-Extension-Compiled-Error.html)","Does anyone have a sample app for us to reproduce? Thanks!","so how to use api inside extension ? ","happens to me in this project, when I try to run it https:\/\/github.com\/DeluxeAlonso\/UpcomingMovies"],"labels":["s6:need sample"]},{"title":"XCFramework pod fails to launch on the simulator","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI was trying to create a private repo to distribute the xcframework with the pod dependencies 'Zip' and 'CocoaLumberjack'. I have successfully pushed the podspec to a private repo and correctly downloaded it with `pod install`. The build of the project also succeeded. However, when I try to launch it on the simulator Xcode fails the installation with the next error message.\r\n\r\n```\r\nDetails\r\n\r\nUnable To Install \u201cExampleMultiplatform\u201d\r\nDomain: IXUserPresentableErrorDomain\r\nCode: 1\r\nFailure Reason: Please try again later.\r\nRecovery Suggestion: Failed to load Info.plist from bundle at path \/Users\/yura_hb\/Library\/Developer\/CoreSimulator\/Devices\/558B49A6-C207-43B3-9359-390D5033CCCA\/data\/Library\/Caches\/com.apple.mobile.installd.staging\/temp.aCBgJi\/extracted\/Payload\/ExampleMultiplatform.app\/Frameworks\/CoreUtils.framework; Extra info about Info.plist: Couldn't stat \/Users\/yura_hb\/Library\/Developer\/CoreSimulator\/Devices\/558B49A6-C207-43B3-9359-390D5033CCCA\/data\/Library\/Caches\/com.apple.mobile.installd.staging\/temp.aCBgJi\/extracted\/Payload\/ExampleMultiplatform.app\/Frameworks\/CoreUtils.framework\/Info.plist: No such file or directory\r\n--\r\nFailed to load Info.plist from bundle at path \/Users\/yura_hb\/Library\/Developer\/CoreSimulator\/Devices\/558B49A6-C207-43B3-9359-390D5033CCCA\/data\/Library\/Caches\/com.apple.mobile.installd.staging\/temp.aCBgJi\/extracted\/Payload\/ExampleMultiplatform.app\/Frameworks\/CoreUtils.framework; Extra info about Info.plist: Couldn't stat \/Users\/yura_hb\/Library\/Developer\/CoreSimulator\/Devices\/558B49A6-C207-43B3-9359-390D5033CCCA\/data\/Library\/Caches\/com.apple.mobile.installd.staging\/temp.aCBgJi\/extracted\/Payload\/ExampleMultiplatform.app\/Frameworks\/CoreUtils.framework\/Info.plist: No such file or directory\r\nDomain: MIInstallerErrorDomain\r\nCode: 35\r\nUser Info: {\r\n    FunctionName = \"-[MIBundle _validateWithError:]\";\r\n    LegacyErrorString = PackageInspectionFailed;\r\n    SourceFileLine = 131;\r\n}\r\n--\r\n\r\nSystem Information\r\n\r\nmacOS Version 11.1 (Build 20C69)\r\nXcode 12.4 (17801) (Build 12D4e)\r\nTimestamp: 2021-01-30T11:56:20+01:00\r\n```  \r\n\r\nI have tried different fixes, but still I don't have any solution to this problem. Any help?\r\n\r\n## What did you expect to happen?\r\n\r\nI expect the correct installation and work of the project.\r\n\r\n## What happened instead?\r\n\r\nInstall error\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.1\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.1 (20C69)\r\n       Xcode : 12.4 (12D4e)\r\n         Git : git version 2.29.2\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : cocoapods - git - https:\/\/github.com\/CocoaPods\/Specs.git @ b6c83c43e5c2890741bcd074fa524ee420a8bbf4\r\n\r\n               ios-cocoapods-test - git - git@github.com:contentoffice\/ios-cocoapods-test.git @ d714c969eeda7837fc8d197cca30edd436921bec\r\n\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/Cellar\/cocoapods\/1.10.1\/libexec\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\n# platform :ios, '9.0'\r\n\r\nsource 'git@github.com:contentoffice\/ios-cocoapods-test.git'\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\n\r\npost_install do |installer|\r\n  installer.pods_project.targets.each do |target|\r\n    target.build_configurations.each do |config|\r\n      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\r\n    end\r\n  end\r\nend\r\n\r\ntarget 'ExampleMultiplatform (iOS)' do\r\n  # Comment the next line if you don't want to use dynamic frameworks\r\n  use_frameworks! :linkage => :static\r\n\r\n  pod 'CoreUtils'\r\n\r\nend\r\n\r\ntarget 'ExampleMultiplatform (macOS)' do\r\n  # Comment the next line if you don't want to use dynamic frameworks\r\n  #use_frameworks!\r\n\r\n  # Pods for ExampleMultiplatform (macOS)\r\n\r\nend\r\n```\r\n\r\nZip of the project with fetched pods, which I'm trying to launch. \r\n[ExampleMultiplatform.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/5897805\/ExampleMultiplatform.zip)","comments":[],"labels":["r:xcframeworks"]},{"title":"CDN: trunk URL couldn't be downloaded","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\nI am trying to install dependencies with cocoapods but quite often I see CDN failing with timeout issue.\r\nI have tried removing cache as well as entire folder `~\/.cocoapods`.\r\n\r\nWhen I try to open problematic URL with browser or curl - it work just fine and it takes less than a second to fetch the podspec.\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n`pod install --repo-update`\r\n\r\n## What did you expect to happen?\r\n\r\nPods installed\r\n\r\n## What happened instead?\r\n\r\nAn error occurred:\r\n\r\n```\r\nAnalyzing dependencies\r\nFetching podspec for `DoubleConversion` from `..\/..\/..\/node_modules\/react-native\/third-party-podspecs\/DoubleConversion.podspec`\r\nFetching podspec for `Folly` from `..\/..\/..\/node_modules\/react-native\/third-party-podspecs\/Folly.podspec`\r\nFetching podspec for `glog` from `..\/..\/..\/node_modules\/react-native\/third-party-podspecs\/glog.podspec`\r\n[!] CDN: trunk URL couldn't be downloaded: https:\/\/cdn.jsdelivr.net\/cocoa\/Specs\/6\/8\/4\/Appboy-iOS-SDK\/3.31.2\/Appboy-iOS-SDK.podspec.json Response: Timeout was reached\r\n```\r\n\r\n\u2757 please note this is not the *only* error I'm seeing. sometimes it's a different library and sometimes it's many libraries at once.\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.0\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-darwin19]\r\n    RubyGems : 3.0.8\r\n        Host : Mac OS X 10.15.7 (19H15)\r\n       Xcode : 12.2 (12B45b)\r\n         Git : git version 2.28.0\r\nRuby lib dir : \/Users\/max\/.rvm\/rubies\/ruby-2.6.3\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/max\/.rvm\/gems\/ruby-2.6.3\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n","comments":["only \"fixed\" this by removing `~\/.cocoapods` again.\r\nis this an expected behavior?","Not sure at this time, could have been a network issue? ","I doubt. I have tried many (~10) times in 30 minutes and immediately after getting this error I was checking failing URL in browser - and it was working. The problem was consistent and wasn't fixed until I removed `~\/.cocoapods`. Since then everything works well \ud83e\udd37 ","CDN is an issue for me for a few latest days as well, it just stuck at updating it, and then gives me Time out error with link, and I can easily open those links. It's not a network issues as I can do `pod repo remove trunk` and after that it works again until it tries to update repo next time","Over these days this issue has happened to me several times\r\n\r\n- every time with different podspec being an issue\r\n- every time opening URL directly was working fine\r\n- network was stable all the time during execution\r\n- was only solved by removing `~\/.cocoapods`\r\n\r\n\r\nis there some flag I can add to run this thing in verbose mode to see what happens underneath?","> only \"fixed\" this by removing `~\/.cocoapods` again.\r\n> is this an expected behavior?\r\n\r\nFixed for me. ","We are facing this error every 2-3 days on our CI machine. To fix it we should connect by RDP on this machine and do cleanup cache.\r\n\r\n```\r\npod cache clean --all\r\npod setup\r\n```\r\n\r\nAny thought how to fix it permanently?","@SergeMaslyakov switch to SPM :D","Is someone able to explain the failure reason?\r\nI'm not able to understand why `cdn.jsdelivr.net` is used as trunk cause after removing `.cocoapods` the standard `cdn.cocoapods.org` is defaulted automatically\r\nIs there a way to avoid unwanted `cdn.jsdelivr.net` trunk?","cc @igor-makarov when is `https:\/\/cdn.jsdelivr.net` used instea of `cdn.cocoapods.org`?\r\n\r\nWorkaround here is to switch to use git based master specs repo.","We redirect to jsDelivr for the podspecs themselves. ","Try using below commands:\r\n\r\n`pod repo remove trunk`\r\n\r\nand then\r\n\r\n`pod install or pod update`\r\n\r\nOr,  cocoapods [CDN](http:\/\/net-informations.com\/jq\/intro\/cdn.htm) not working due to DNS issues, try adding directly the url that cdn.cocoapods.org redirects to, as a source in the top level of your Podfile:\r\n\r\n`source 'https:\/\/cocoapods-cdn.netlify.app\/'`\r\n\r\n","@linehammer Thanks a lot ! You saved my day \u2764","Follow these commands , This will work : \r\n\r\npod cache clean --all\r\npod setup\r\npod repo remove trunk\r\npod install or pod update\r\narch x86 64 pod update\r\n\r\n","> Try using below commands:\r\n> \r\n> `pod repo remove trunk`\r\n> \r\n> and then\r\n> \r\n> `pod install or pod update`\r\n> \r\n> Or, cocoapods [CDN](http:\/\/net-informations.com\/jq\/intro\/cdn.htm) not working due to DNS issues, try adding directly the url that cdn.cocoapods.org redirects to, as a source in the top level of your Podfile:\r\n> \r\n> `source 'https:\/\/cocoapods-cdn.netlify.app\/'`\r\n\r\nThanks it works \ud83d\udcaf ","I'm also experiencing this issue. Running `pod repo remove trunk` seems to fix it, but only if I run `pod install`. I'm unable to use `npx pod-install` (I'm using React Native), because that seems to be re-introducing the problem again. \r\n\r\nUPDATE: The error keeps coming back for me, and I haven't been able to find a long term solution for this problem.\r\n\r\n> Or, cocoapods [CDN](http:\/\/net-informations.com\/jq\/intro\/cdn.htm) not working due to DNS issues, try adding directly the > url that cdn.cocoapods.org redirects to, as a source in the top level of your Podfile:\r\n> \r\n>  `source 'https:\/\/cocoapods-cdn.netlify.app\/'`\r\n\r\nI did try this as well, but then I got other issues like:\r\n\r\n```bash\r\n[!] CocoaPods could not find compatible versions for pod \"SDWebImageWebPCoder\":\r\n  In snapshot (Podfile.lock):\r\n    SDWebImageWebPCoder (= 0.8.4, ~> 0.8.4)\r\n\r\n  In Podfile:\r\n    RNFastImage (from `..\/node_modules\/react-native-fast-image`) was resolved to 8.5.11, which depends on\r\n      SDWebImageWebPCoder (~> 0.8.4)\r\n\r\nNone of your spec sources contain a spec satisfying the dependencies: `SDWebImageWebPCoder (= 0.8.4, ~> 0.8.4), SDWebImageWebPCoder (~> 0.8.4)`.\r\n\r\nYou have either:\r\n * mistyped the name or version.\r\n * not added the source repo that hosts the Podspec to your Podfile.\r\n ```","Tried all, still facing the issue\r\n\r\n\r\n<img width=\"1148\" alt=\"Screenshot 2022-05-11 at 5 00 40 PM\" src=\"https:\/\/user-images.githubusercontent.com\/89025019\/167848613-f8e758b5-9010-45d9-b0d2-0c3ed239f8d1.png\">\r\n\r\n","I'm having the same issue\r\n<img width=\"854\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/9447097\/167849143-aa2a9ddf-cf94-4416-9af8-9ec21a028fff.png\">\r\n","Keeping information about today's downtime in one issue: https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/11355"],"labels":["s7:workaround available"]},{"title":"Development pod `Resource_bundle` miss Resources Folder in project list","body":"# Report\r\n\r\n## What did you do?\r\n\r\n\u2139 Please replace these two lines with what you did.  \r\n\r\nadd resource_bundles for podspec:\r\n```\r\ncore.resource_bundles = {\r\n      'SDWebImage' => ['SDWebImage\/Resource_Bundle\/SDWebImage.bundle\/**\/*']\r\n    }\r\n```\r\nRun `pod install`\r\n\r\n## What did you expect to happen?\r\n\r\ncocoapods 1.10.X:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/21276382\/104692497-1021ad80-5743-11eb-85f6-d6de13b2592c.png)\r\n\r\ncocoapods 1.9.X:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/21276382\/104695862-56c5d680-5748-11eb-9880-6078b7fac493.png)\r\n\r\n\r\n\u2139 Please replace these two lines with what you expected to happen.  \r\ne.g. Install all pod dependencies correctly.\r\n\r\n## CocoaPods Environment\r\n\r\n\u2139 Please replace these two lines with the output of `pod env`.\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.0\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-darwin19]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.1 (20C69)\r\n       Xcode : 12.3 (12C33)\r\n         Git : git version 2.24.3 (Apple Git-128)\r\nRuby lib dir : \/Users\/xxxx\/.rbenv\/versions\/2.6.3\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/jamy\/.rbenv\/versions\/2.6.3\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate        : 1.0.4\r\ncocoapods-dependencies       : 1.3.0\r\ncocoapods-dependencies-graph : 0.0.1\r\ncocoapods-plugins            : 1.0.0\r\ncocoapods-red-extension      : 0.5.15\r\ncocoapods-search             : 1.0.0\r\ncocoapods-stats              : 1.1.0\r\ncocoapods-trunk              : 1.5.0\r\ncocoapods-try                : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nuse_frameworks!\r\n\r\ndef all_example_pods\r\n  pod 'SDWebImage\/MapKit', :path => '.\/'\r\n  pod 'SDWebImageWebPCoder', :git => 'https:\/\/github.com\/SDWebImage\/SDWebImageWebPCoder.git', :branch => 'master'\r\nend\r\n\r\ndef watch_example_pods\r\n  pod 'SDWebImage\/Core', :path => '.\/'\r\n  pod 'SDWebImageWebPCoder', :git => 'https:\/\/github.com\/SDWebImage\/SDWebImageWebPCoder.git', :branch => 'master'\r\nend\r\n\r\ndef all_test_pods\r\n  pod 'SDWebImage\/MapKit', :path => '.\/'\r\n  pod 'Expecta'\r\n  pod 'KVOController'\r\nend\r\n\r\nexample_project_path = 'Examples\/SDWebImage Demo'\r\ntest_project_path = 'Tests\/SDWebImage Tests'\r\nworkspace 'SDWebImage.xcworkspace'\r\n\r\n# Example Project\r\ntarget 'SDWebImage iOS Demo' do\r\n  project example_project_path\r\n  platform :ios, '8.0'\r\n  all_example_pods\r\nend\r\n\r\ntarget 'SDWebImage OSX Demo' do\r\n  project example_project_path\r\n  platform :osx, '10.10'\r\n  all_example_pods\r\nend\r\n\r\ntarget 'SDWebImage TV Demo' do\r\n  project example_project_path\r\n  platform :tvos, '9.2'\r\n  all_example_pods\r\nend\r\n\r\ntarget 'SDWebImage Watch Demo Extension' do\r\n  project example_project_path\r\n  platform :watchos, '2.0'\r\n  watch_example_pods\r\nend\r\n\r\n# Test Project\r\ntarget 'Tests iOS' do\r\n  project test_project_path\r\n  platform :ios, '8.0'\r\n  all_test_pods\r\nend\r\n\r\ntarget 'Tests Mac' do\r\n  project test_project_path\r\n  platform :osx, '10.10'\r\n  all_test_pods\r\nend\r\n\r\ntarget 'Tests TV' do\r\n  project test_project_path\r\n  platform :tvos, '9.2'\r\n  all_test_pods\r\nend\r\n```\r\n\r\n","comments":["Can you upload a small sample app demonstrating the issue?","Is it resolved? I also encountered this problem","I think this change was intentional, see \r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/9483","the same problem, anyone know why and how to solve it ","Has anyone already solved this problem\uff1f","> Has anyone already solved this problem\uff1f\r\n\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/10678#issuecomment-915944895","> > Has anyone already solved this problem\uff1f\r\n> \r\n> [#10678 (comment)](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/10678#issuecomment-915944895)\r\n\r\nthx for reply. I have to replace file in cocoapods ? "],"labels":["s6:need sample"]},{"title":"[New Feature \/ Proposal] Add new required attribute in podspec to provide privacy details","body":"This PR description has been edited to take into account the feedback that was later given by comments below. You can find the original posting [here](https:\/\/gist.github.com\/prohoney\/95fd65da4ea1737c7f0f83cb7b6a9aa8)\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n- Authors: @prohoney, @AliSoftware  \r\n- Date: 1 Jan, 2021\r\n\r\n# Motivation\r\n\r\nStarting from December 8, 2020, Apple has required new apps and app updates to include [App privacy details on the App Store](https:\/\/developer.apple.com\/app-store\/app-privacy-details\/). App owners have to go through every pod and all its dependency's readmes or if nothing is revealed then reach out to pod creators to just figure out what information the pod collects. The current process is not transparent nor easy.\r\n\r\n# Proposal\r\n\r\nEach Pod should mention their privacy details, so upon `pod install` \/ `pod update` a report file is generated where the different categories along with the purposes of every pod used are mentioned for each target. To acheive this the following changes need to be made:\r\n\r\n## PodSpec changes\r\n\r\nAdd a new _array_ attribute to the the podspec named `privacy_details`\r\n\r\n<details><summary>Expected structure for this attribute (<a href=\"#fastlanepr\">Inspiration: [1]<\/a>)<\/summary>\r\n\r\n```json\r\ns.privacy_details = [\r\n  {\r\n    \"category\": \"NAME\",\r\n    \"purposes\": [\r\n      \"PRODUCT_PERSONALIZATION\",\r\n      \"APP_FUNCTIONALITY\"\r\n    ],\r\n    \"data_protections\": [\r\n      \"DATA_LINKED_TO_YOU\"\r\n    ]\r\n  },\r\n  {\r\n    \"category\": \"PURCHASE_HISTORY\",\r\n    \"purposes\": [\r\n      \"APP_FUNCTIONALITY\"\r\n    ],\r\n    \"data_protections\": [\r\n      \"DATA_LINKED_TO_YOU\",\r\n      \"DATA_USED_TO_TRACK_YOU\"\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\n<\/details>\r\n\r\n> \ud83d\udca1 Tip: Given that PodSpecs are ruby DSLs, pod owners can easily choose to provide the content of that attribute by reading it from a file (especially given that it might be more verbose than other typical PodSpec attributes).\r\n>\r\n> We might want to mention that tip in the attribute documentation (and blog post that will accompany this new feature) especially since not everybody realizes that PodSpecs are interpreted ruby and can contain ruby code like this to make the spec more readable in some cases.\r\n> \r\n> ```ruby\r\n> s.privacy_details = JSON.parse(File.read(\"privacy.json\"))\r\n> ```\r\n\r\n<\/details>\r\n\r\n### Handling Subspecs\r\n\r\nNote that the new `privacy_details` attribute will be allowed both at the root level of the podspec as well as for the definition of each subspec, if any. In such cases, the resolved privacy details for each subspec will be the result of merging the value of attribute defined at the root level (if one is defined there) with the value defined at the subspecies level.\r\n\r\n```ruby\r\nPod::Spec.new do |s|\r\n  s.name = 'CoolKit'\r\n  s.privacy_details = JSON.parse(File.read(\"common-privacy-details.json\")) # includes NAME, EMAIL\r\n  \r\n  s.subspec 'SoundKit' do |cs|\r\n    cs.dependency 'Alamofire'\r\n    cs.privacy_details = JSON.parse(File.read(\"soundkit-privacy-details.json\")) # includes AUDIO\r\n  end\r\n\r\n  s.subspec 'Model' do |ms|\r\n    ms.privacy_details = JSON.parse(File.read(\"model-privacy-details.json\")) # includes SENSITIVE_INFO \r\n  end\r\nend\r\n```\r\n\r\nThen the privacy detail you get upon installation of a pod depends on which subspecies gets included: \r\n  - The whole pod, e.g. `pod 'CoolKit'` (by default it would install all pods): `NAME`, `EMAIL`, `AUDIO`, `SENSITIVE_INFO`.\r\n  - Only `pod 'CoolKit\/SoundKit'`: `NAME`, `EMAIL`, `AUDIO`.\r\n  - Only `pod 'CoolKit\/Model'`: `NAME`, `EMAIL`, `SENSITIVE_INFO`.\r\n\r\nIf your intention is that if only `SoundKit` is installed then only `AUDIO` to be reported as your privacy detail, then you have to restructure your `PodSpec` accordingly, and remove `s.privacy_details` from the spec's root and instead only add `NAME` and `EMAIL` onto the Model's sub specs. \r\n \r\n<details><summary>Example of a Podspec when not all specs share common privacy details<\/summary>\r\n\r\n  ```ruby\r\n  Pod::Spec.new do |s|\r\n    s.name = 'CoolKit'\r\n    \r\n    s.subspec 'SoundKit' do |cs|\r\n      cs.dependency 'Alamofire'\r\n      cs.privacy_details = JSON.parse(File.read(\"soundkit-privacy-details.json\")) # includes AUDIO\r\n    end\r\n  \r\n    s.subspec 'Model' do |ms|\r\n      ms.privacy_details = JSON.parse(File.read(\"model-privacy-details.json\")) # includes NAME, EMAIL, SENSITIVE_INFO \r\n    end\r\n  end\r\n  ```\r\n\r\n<\/details>\r\n\r\n### Gradual rollout for requiring the attribute\r\n- New pods or any _update_ should include the new `privacy_details` attribute in each of their subspecs. Mention which of the 32 _data types_ (along with its _purpose_ and _data protection_) they are collecting. If `privacy_details` isn't stated, then a message will be written to ` stdout` . \r\n- It\u2019s gonna be a *warning* for now but we plan to make it an *error* in a future version of CocoaPods.\r\n  - The warning would be like this:\r\n  \r\n```\r\n  WARN | privacy_details: Pods (X,Y,Z) did not specify privacy_details. This will be a requirment in the upcomming releasees.\r\n```\r\n\r\n### Versioning Pods\r\n- We should make a recommendation to the community that if there is a change in the `privacy_details` then patches are not welcomed. At least a minor version update should happen.\r\n\r\n## Generated Report file\r\n\r\n- Upon `pod install` or `pod update`, a json is generated for each target of the `Podfile`. \r\n- The file will be located where other Support files are at: `$PROJECT_DIRECTORY\/Pods\/Target Support Files\/Pods-$target-name\/privacy_details.json`\r\n- Generation of the report file (a.k.a privacay.json \/ privacyDetails.json) is defaulted to *on*.\r\n- In order to increase awarness of the generation of this report file a messege is written to `stdout` upon `pod install`\r\n  \r\n```\r\nGenerated privacy details into\r\nINFO | \/pods\/Target Support Files\/pods-targetA\/privacyDetails.json\r\nINFO | \/pods\/Target Support Files\/pods-targetB\/privacyDetails.json\r\n```\r\n\r\n- If you don\u2019t want it then you have to opt out with a new flag e.g. `pod install --no-privacy-details`.\r\n   \r\n<details><summary>Example of a multi-target report file<\/summary>\r\n\r\n\/\/\/ $PROJECT_DIRECTORY\/Pods\/Target Support Files\/Pods-targetFoo\/privacy_details.json\r\n```json\r\n   {\r\n    \"privacy_details\": [\r\n      {\r\n        \"category\": \"NAME\",\r\n        \"purposes\": [\r\n          \"PRODUCT_PERSONALIZATION\",\r\n          \"APP_FUNCTIONALITY\"\r\n        ],\r\n        \"data_protections\": [\r\n          \"DATA_LINKED_TO_YOU\"\r\n        ],\r\n        \"collectors\": [\"pod1\", \"pod2\"]\r\n      },\r\n      {\r\n        \"category\": \"PURCHASE_HISTORY\",\r\n        \"purposes\": [\r\n          \"APP_FUNCTIONALITY\"\r\n        ],\r\n        \"data_protections\": [\r\n          \"DATA_LINKED_TO_YOU\",\r\n          \"DATA_USED_TO_TRACK_YOU\"\r\n        ],\r\n        \"collectors\": [\"pod1\", \"pod5\"]\r\n      },\r\n      {\r\n        \"data_protections\": [\r\n          \"DATA_NOT_COLLECTED\"\r\n        ],\r\n        \"collectors\": [\"pod3\", \"pod6\"] \r\n      }\r\n    ],\r\n    \"unknown_privacy_details\": [\"pod4\", \"pod7\"],\r\n  }\r\n```\r\n\/\/\/ $PROJECT_DIRECTORY\/Pods\/Target Support Files\/Pods-targetBar\/privacy_details.json\r\n```json\r\n  \"target2\": {\r\n    \"privacy_details\": [\r\n      {\r\n        \"category\": \"NAME\",\r\n        \"purposes\": [\r\n          \"PRODUCT_PERSONALIZATION\",\r\n          \"APP_FUNCTIONALITY\"\r\n        ],\r\n        \"data_protections\": [\r\n          \"DATA_LINKED_TO_YOU\"\r\n        ],\r\n        \"collectors\": [\"pod1\", \"pod2\", \"pod8\"]\r\n      }\r\n    ]\r\n  }\r\n```\r\n\r\n<\/details>\r\n\r\n**Note:** Every included permutation (of data types, purpose and data protection) should contain a key named \"collectors\". This provides app owners granularity to see what data each pod is collecting.\r\n\r\n## Podfile changes\r\n\r\n- In regards to the _app's own privacy details_ we can:\r\n  - **Do nothing**. Dev can figure out the rest in regards to how to add privacy details about what data their own app is collecting\r\n  - **Add new attribute into `Podfile`**. Name it `target_privacy_details`. App owners can then add their privacy details. Then upon `pod install\/update` do a union with what\u2019s generated from the pods.\r\n    - The `target_privacy_details` can be set either a root option or a target configuration. The value provided for the target configuration will merge with the root option value if set.\r\n- Make a recommendation for *app owners* that if there is a change in the `privacy_details` then at least a minor version update should happen (not just a patch bump).\r\n\r\n## Backwards Compatibility\r\n\r\n- Older versions published to CocoaPods would continue to work without their privacy details\r\n- New pods or updates to existing pods would require a value for their privacy details\r\n- The ultimate `PrivacyDetails.json` would mention all the values for updated pods and include a key named `unknown_privacy_details` (included in the sample [report file](#generated-report-file)) for the (old) pods that don't have it set.\r\n\r\n\r\n## Ways to bypass this\r\n\r\n- Given that CocoaPods is open source, pod owners can alter the validations that `pod trunk push` performs\r\n- Yet it's a step forward, towards transparency and privacy. It cautions app owners to think again when a pod doesn't include privacy details.\r\n- At then end a pod owner may have malicious intent or simply forget to mention something they log or keep track of. This should lead app owners to create issues with a `privacyDetails` label on repos. It will take some time from the community to get use to this process.\r\n\r\n## Other notes\r\n\r\n- We're looking for feedbacks on this and see if maybe the CocoaPods team have been working on this. If not we're keen to implement the PR for this feature and would like to know what files to look into to start development on this\r\n\r\n- Based on my mediocre Ruby knowledge, is the following a good _starting_ point:\r\n add a new `attribute` to [Pod::Specification::DSL](https:\/\/github.com\/CocoaPods\/Core\/blob\/master\/lib\/cocoapods-core\/specification\/dsl.rb#L811) like this:\r\n\r\n```ruby\r\nattribute :privacy_details,\r\n  :container   => Array,\r\n  :singularize => true,\r\n  :inherited => true\r\n ```\r\n  and then fix any error that I get through `pod ipc spec <podspec>`\r\n\r\n---\r\n<a name=\"fastlanepr\">[1]<\/a>: On Dec 3rd, 2020, fastlane added a new action [`upload_app_data_usage_to_app_store`](http:\/\/docs.fastlane.tools\/actions\/upload_app_privacy_details_to_app_store\/#parameters) ([PR link](https:\/\/github.com\/fastlane\/fastlane\/pull\/17592)). It requires a json with a similar shape, which can include a single category or multiple or none. The format\/structure of the JSON we're using in this issue\/proposal is directly inspired by the one expected by fastlane, both for consistency and so that it provides us the additional benefit of interoperability, as users could then use the JSON generated by CocoaPods via this new feature to feed it as an input for their fastlane actions directly \ud83d\udc4c","comments":["Smart idea in my opinion. Would allow aggregating all of these details from third parties using fastlane, as you mentioned, to make sure your privacy settings are update. \r\n\r\nAn even nicer idea could be warning you that installing this pod will change your App's privacy details. ","If this was a first party file format that Apple + Xcode  supported, I think I'd be onboard with the level of ecosystem changes this request has.  However, as you _have_ to use Fastlane to get any of the advantages of this scale of automation, I'm not sure it's worth _breaking the deployment of every current podspec_.\r\n\r\nThe idea is good in general, perhaps it could maybe be a trunk warning?","@orta you don't have to use Fastlane at all to get the benefit of this feature.\n\nIf you don't use Fastlane then you will still benefit from the JSON generated by CocoaPods at the end of `pod install` because you'll be able to read that generated JSON to know what to answer when you fill the privacy details form manually on the dev portal. Even if you don't automate that privacy details submission with fastlane but instead submit that form manually you'll still benefit from the feature and from the report than CocoaPods would generate from the privacy details of each pod.\n\nWe could totally decide on a completely different file format for the report (the JSON that `pod install` will generate listing the merged privacy details for all integrated pods) and also a completely different format for the podspec attribute. I'm fine with using a different format if you think something else would fit better. We happened to choose that format because (1) we had to choose something anyway (2) we didn't want to reinvent the wheel and have to think of all the possibilities and what we needed to be able to represent while another bunch of smart people (from the fastlane OSS project) already thought about the problem before us (3) and the fact that we end up incidentally use the same format than fastlane uses happens to give an extra bonus for people who have to use fastlane anyway, without removing any benefit from people who don't.\n\nIf we decide on another format for the podspec attribute and\/or the generated report (eg generate the report as a YAML to match the fact that other files generated by CocoaPods, like the lockfile, are also YAML) it would work just the same and provide the exact same benefit, ie allow the users to end up with a nice human readable report they could use to know what to answer when they fill the privacy report form in ADC. The only difference is that people who happen to also use Fastlane (witch is a lot of iOS devs in practice) would need to write an additional script to transform that YAML (or whatever we choose as a report format) into the JSON that Fastlane uses for its action.\n\nI agree that this file format is not an Apple or Xcode standard (if there were one we would have used it instead obviously), but since there's no such standard we have to pick an arbitrary format for the attribute and for the report. So why not pick this one \ud83d\ude43","I think there are a couple of things that stand out, at least for the MVP of this:\r\n\r\n1. It needs to be opt-in to output this JSON, or whatever output that tells you the privacy policy. Possibly a flag on `pod install` or even a `pod inspect privacy` (possibly other sub-commands could fall under this `inspect` subcommand). \r\n\r\n2. Filling up this section of the podspec should also be optional or everything would obviously break :) We could allow for specific settings on `pod install` to warn about pods that don't list privacy details (or even a flag that prohibits them where applicable). \r\n\r\n3. This is why I think this \"New pods or updates to existing pods would require a value for their privacy details\" - is not a great idea. It's the package manager taking a stand and getting in the way instead of helping you. A good PM (IMO) should help you achieve things, but not _force you_ to do things. ","@orta tbh when I approached @AliSoftware I didn't even know there was a fastlane action for this. My thought process was that developers shouldn't have put effort to figure out. Or more accurately, they may not have knowledge of all the internals of the pod hence can't even figure it out. So instead I though pod owners should just be clear about what they do and they do it once. Then every one can use it. I suppose also pod owners could get asked about this, so this makes it easier for them as well. \r\n\r\nI see the fastlane integration just as a very juicy and easy to deliver bonus. \r\n\r\nHaving that said I think @freak4pc makes a good point \r\n> \"package manager taking a stand and getting in the way instead of helping you\" -  - is not a great idea\r\n\r\nI just think that:\r\n \r\n 1. The level of effort is to just add a json i.e. it's easy to fix what's broken. \r\n 2. Apple is getting in the way. We're just conforming to it \ud83e\udd37\u200d\u2642\ufe0f. Reducing legal\/dev time spent by every app owner.\r\n 2. If we don't enforce it then, companies\/pods that prefer not to be transparent, would just not opt in.\r\n \r\nPerhaps we can make it optional for now then follow the approach that Apple takes and be like:\r\n\r\n_Starting from 1 May 2021, pods that don't include `privacy_details` would fail `pod lib lint`_\r\n","Yeah I would also opt for the more \"gradual rollout\" approach here. Definitely need to enforce it at some point but perhaps two versions would be a good range. ","I like the gradual rollout idea \ud83d\udc4d","So it seems to me there are two angles, for the two versions:\r\n\r\n1. **Maintainers**: Every call to `pod lib lint` or `pod trunk push` should _warn_ if you don't have your privacy set up along with a link to some docs on how to do that. (Perhaps `pod repo push` as well even though private repos might not care)\r\n\r\n2. **Consumers**: I wouldn't want to generate a huge warning, but maybe an elegant \"Some of your dependencies did not provide privacy details: X, Y, Z\"\r\n\r\nAfter the first two versions: \r\n\r\n1. **Maintainers**: Every call to `pod lib lint` or `pod trunk push` should _fail_ if you don't have your privacy details in your podspec.\r\n\r\n2. **Consumers**: Should still be able to install existing pod specs in trunk without the details, given future ones will be forced to have the details. \r\n\r\nWDYT? @prohoney  @AliSoftware ","Yeah I like that; tho I'm not sure where you're going with the \"Consumers\" aspects of this.\n\nConsumers would just run `pod install` and have a new \"report\" **file** generated alongside all other files (all the xcconfig files, the sh files etc, \u2026). In that report (the JSON output file presented in this issue description, or another format if we decide to go with something else) we would list all the privacy details gathered from integrated pods\u2026 **and** list the pods that **don't** provide privacy details info yet (see the `unknown_privacy_d\u00e9tails` example key provided in the \"Backwards Compatibility\" section of the proposal).\n\nThe consumers would then either never read the generated report and don't care about it, or read it to know that some pods still don't provide their privacy details yet.\n\nAgreed maybe we could consider _**also**_ printing a warning to stdout upon `pod install` to let people know about this even if they never open the report file, but that would be a bonus.\n\nThough I like the idea of also having that warning indeed as an additional info about that and to encourage Maintainers to add that info when Consumer will start filing issues about it on their repos when they see the warning.","> Yeah I like that; tho I'm not sure where you're going with the \"Consumers\" aspects of this.\r\n\r\nMean this:\r\n\r\n> Agreed maybe we could consider also printing a warning to stdout upon pod install to let people know about this even if they never open the report file, but that would be a bonus.\r\n\r\n> Though I like the idea of also having that warning indeed as an additional info about that and to encourage Maintainers to add that info when Consumer will start filing issues about it on their repos when they see the warning.","More specifically, if you just output a file (which IMO should be a flag and not the default) without emitting a stdout warning (no exit code of course, just a warning), people will usually not know this is even occurring or an issue. ","Yep very good point I like that.\n\nRegarding the generation of the report file, not sure why it wouldn't be the default and would need a flag? What's the harm in generating it in all cases? I fear that putting this being an opt-in flag would make this new feature very hard to discover, with little benefit, right?","I'd say that at least an opt-out flag is a must. I'm personally not a fan of a tool generating files for me unless I asked for it explicitly but I can understand the discoverability angle. I don't feel strongly about it :) ","Wouldn't it be easily discoverable given that you're generating a new file \u2014 similar to a lock file?\n\nApp owners would immediately see it and have to commit it and have to their repo\ufffc...","It's a developer tool but it doesn't mean it shouldn't have nice UI (even if that isn't a GUI).\r\n\r\nGenerating a file and expecting the end-user to understand they need to do something about this is the wrong way to go IMHO. \r\n\r\nIf it's auto opt-in I would expect a \"Generated privacy details into Pods\/Podfile.privacy.json\" message along with \"Some of your dependencies (X, Y, Z) did not specify privacy details\". These things need to be laid out to the consumer. \r\n\r\nTwo more things about the output file:\r\n\r\n1. I don't think it necessarily needs to include the dependencies that don't have privacy (that's why I prefer a warning).\r\n2. Note that many people who run `pod install` aren't App Owners. Some of them might not figure out what this file is about without a clear stdout message. ","@freak4pc Very good note that this a developer tool and right from the command line things should be apparent. Is the following something we can agree on:\r\n\r\n1. Place the report file under `\/pods\/Target Support Files\/pods-{targetName}\/privacyDetails.json`\r\n2. Generation of report file (a.k.a. privacy.json \/ privacyDetails.json) is defaulted to _on_. If you don\u2019t want it then you have to opt out with a flag e.g.`pod install --no-privacy-details`\r\n3. Increase awareness of file creation by emitting an stdout message so folks would know a new file was generated e.g. \r\n\r\n> Generated privacy details into \r\n> \/pods\/Target Support Files\/pods-targetA\/privacyDetails.json\r\n> \/pods\/Target Support Files\/pods-targetB\/privacyDetails.json\r\n\r\n4. If some pods don't have `privacy_details` mentioned in their spec then emit a message to stdout e.g. \r\n> WARN  | privacy_details: Pods (X,Y,Z) did not specify privacy_details. Starting from 1 Apr 2021. This would be a requirement\r\n5. Add warning when when doing `pod install\/update` changes the privacy details e.g. \r\n> WARN  | privacyDetails.json changed: One or more pods have updated their privacy details used in targetA\r\n\r\n\r\n","@freak4pc @orta @AliSoftware I also made a medium size edit onto the issue about how we intend to merge the privacy_details between _root_ specs and _sub_ specs. ","[This recent article](https:\/\/twitter.com\/K0nserv\/status\/1346031886846603265) by @k0nserv \n can also be useful in brainstorming our feature, providing some more insight into how the feature work in Apple's API. (Especially we can see how the format we propose for the attribute and the report are in fact inspired from Apple's API)","Hey \ud83d\udc4b\ud83c\udffc \r\n\r\nI've attached an example API response(it's for Instagram). This example contains privacy types with the identifiers `DATA_USED_TO_TRACK_YOU` and `DATA_LINKED_TO_YOU`. For `DATA_USED_TO_TRACK_YOU` the data is stored inside `dataCategories` and for `DATA_LINKED_TO_YOU`(as well as `DATA_NOT_LINKED_TO_YOU`) the data is stored in `purposes`. \r\n\r\nThis jq query extracts all data types use to track: \r\n\r\n```bash\r\njq '.privacy_details.attributes.privacyDetails.privacyTypes[0].dataCategories[].dataTypes[]'  389801252.json \r\n```\r\n\r\nThis one extracts all data types from `DATA_LINKED_TO_YOU`\r\n```bash\r\njq '.privacy_details.attributes.privacyDetails.privacyTypes[1].purposes[].dataCategories[].dataTypes[]'  389801252.json \r\n```\r\n\r\nIn total there are 32 data types in 14 data categories\r\n\r\n<details>\r\n<summary>JSON Categories and Data Types<\/summary>\r\n\r\n```json\r\n{\r\n  \"IDENTIFIERS\": [\r\n    \"Device ID\",\r\n    \"User ID\"\r\n  ],\r\n  \"USAGE_DATA\": [\r\n    \"Advertising Data\",\r\n    \"Product Interaction\",\r\n    \"Other Usage Data\"\r\n  ],\r\n  \"DIAGNOSTICS\": [\r\n    \"Other Diagnostic Data\",\r\n    \"Performance Data\",\r\n    \"Crash Data\"\r\n  ],\r\n  \"CONTACT_INFO\": [\r\n    \"Name\",\r\n    \"Physical Address\",\r\n    \"Email Address\",\r\n    \"Phone Number\",\r\n    \"Other User Contact Info\"\r\n  ],\r\n  \"PURCHASES\": [\r\n    \"Purchase History\"\r\n  ],\r\n  \"LOCATION\": [\r\n    \"Coarse Location\",\r\n    \"Precise Location\"\r\n  ],\r\n  \"USER_CONTENT\": [\r\n    \"Customer Support\",\r\n    \"Gameplay Content\",\r\n    \"Photos or Videos\",\r\n    \"Emails or Text Messages\",\r\n    \"Audio Data\",\r\n    \"Other User Content\"\r\n  ],\r\n  \"CONTACTS\": [\r\n    \"Contacts\"\r\n  ],\r\n  \"OTHER\": [\r\n    \"Other Data Types\"\r\n  ],\r\n  \"BROWSING_HISTORY\": [\r\n    \"Browsing History\"\r\n  ],\r\n  \"SEARCH_HISTORY\": [\r\n    \"Search History\"\r\n  ],\r\n  \"HEALTH_AND_FITNESS\": [\r\n    \"Fitness\",\r\n    \"Health\"\r\n  ],\r\n  \"FINANCIAL_INFO\": [\r\n    \"Payment Info\",\r\n    \"Other Financial Info\",\r\n    \"Credit Info\"\r\n  ],\r\n  \"SENSITIVE_INFO\": [\r\n    \"Sensitive Info\"\r\n  ]\r\n}\r\n```\r\n\r\n<\/details>\r\n\r\nThere are 4 privacy types(no data collected, data linked to the user, data not linked to the user, and data used to track the user) and 6 purposes(app functionatlity, analytics, developers advertising, other purposes, product personalization, and third party advertising). The exact identifiers used by Apple's API is in the blog post.\r\n\r\n[389801252.json.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/5764982\/389801252.json.zip)\r\n\r\n\r\nIf you have specific questions I can try to help answer them.\r\n\r\nEDIT: You can also see examples of the API request and response by opening e.g. [Facebook's app store listing on the web](https:\/\/apps.apple.com\/gb\/app\/facebook\/id284882215) and looking at the XHR traffic in the browser developer tools when clicking \"See Details\" in the \"App Privacy\" section\r\n\r\nEDIT2: Has Apple added support for app privacy details to the App Store Connect API? If so that seems like the best thing to align to","@joshdholtz hey man! any ideas if Apple added ASC APIs for the new App Privacy stuff? Is Fastlane already doing some work in that direction? \r\n\r\nThanks <3 ","> @joshdholtz hey man! any ideas if Apple added ASC APIs for the new App Privacy stuff? Is Fastlane already doing some work in that direction? \n\n@freak4pc note that there's a link [in the footnote](#fastlanepr) of this PR description to fastlane's own PR adding the feature which already uses the ASC API \ud83d\ude09 This is where we borrowed the inspiration for the podspec attribute actually, borrowing it from the format fastlane uses, which no doubt borrowed it from the ASC API I'm guessing (given that's what they then interact with to automate the submission)? \ud83d\ude1b\n\n_(Just to reiterate in case this was not clear though: this CocoaPods feature we're proposing here is completely independent of Fastlane and is useful in its own right whatever format we end up using for the attribute and the report file. But since we need to settle on a given format for those anyway, our reasoning was: \"why not use the one used by ASC API and by fastlane rather than reinventing a separate format on our own\"; that's where the link with fastlane's PR came in the picture)_","@AliSoftware @freak4pc The format is something I put together \u263a\ufe0f It's inspired by the data models that the unofficial ASC API uses for the privacy stuff but simplified a little bit \ud83e\udd37\u200d\u2642\ufe0f\n\nThe privacy endpoints most likely won't ever hit official ASC API \u2639\ufe0f","@joshdholtz \r\n> The privacy endpoints most likely won't ever hit official ASC API \u2639\ufe0f\r\n\r\nBy 'privacy endpoints' you mean the `upload_app_privacy_details_to_app_store`? \r\n\r\nAnd what do you mean it won't ever hit official ASC API? You mean even in future if the official ASC API accepts a json then still the privacy endpoints won't be used?\r\n\r\n\r\n\r\n","@prohoney The API endpoint that action uses require the Apple ID auth that _fastlane_ has been using for a while. It's not the official App Store Connect API.\n\nThe official App Store Connect API is the one that uses the JWT auth. This is the one that Apple has doc for \ud83d\ude42 Here - https:\/\/developer.apple.com\/documentation\/appstoreconnectapi\n\nThe upload privacy details most likely won't get official API support with the JWT auth and will require the Apple ID auth.\n\nI'm not sure if this matters to this PR or not. I've had a newborn in my arms all morning so I haven't been able to look to deeply at this \ud83e\udd37\u200d\u2642\ufe0f\n\n\n","@joshdholtz I see. That's very good to know. I actually wasn't aware that there was either an (official or unofficial) ASC API but yeah I don't think it would matter much for this issue.\r\n\r\nAs to your last paragraph, that's wonderful news. Yet I don't get it, that implies you have 2 extra hands to type with...","Just want to resurrect this thread on Privacy details within cocoapods. \r\n\r\nApple introduced Privacy manifests for this purpose and it would be nice to include support for this format rather than any custom work. https:\/\/developer.apple.com\/documentation\/bundleresources\/privacy_manifest_files\/describing_data_use_in_privacy_manifests\r\n\r\nI did a quick attempt at including the `PrivacyInfo.xcprivacy` within the current capabilities of Cocoapods, but did not get it working.\r\n\r\nWithin the podspec, I added `xcprivacy` to the the source files .\r\n`s.ios.source_files = \"*.{h,m,xcprivacy}\"`\r\n\r\nThis gives a processing warning and does not get into the app archive.\r\n`no rule to process file 'PrivacyInfo.xcprivacy' of type 'text.xml' for architecture 'arm64'`\r\n","Apple just [announced](https:\/\/developer.apple.com\/news\/?id=z6fu1dcu) the timeline for `PrivacyInfo.xcprivacy` last week (July 27, 2023):\r\n\r\n> Starting in fall 2023, when you upload a new app or app update to App Store Connect that uses an API (including from third-party SDKs) that requires a reason, you\u2019ll receive a notice if you haven\u2019t provided an approved reason in your app\u2019s privacy manifest. \r\n> And starting in spring 2024, in order to upload your new app or app update to App Store Connect, you\u2019ll be required to include an approved reason in the app\u2019s privacy manifest which accurately reflects how your app uses the API.\r\n\r\nI tried this [advice](https:\/\/developer.apple.com\/forums\/thread\/733537) (`spec.source_files = 'Source\/**\/*.{h,m,swift,xcprivacy}'`) on the Apple forum, but still not seeing `PrivacyInfo.xcprivacy` after `pod install`.","@CB-HaoxinLi \r\nexposing the xcprivacy file through `resources` instead of `source_files` worked for me\r\n`spec.resources = ['Source\/**\/*.{xcprivacy}']`","When `spec.resources = 'Privacy.xcprivacy'`), and using ar archive (not using `use_framework!`) to integrate, this `xcprivacy` files was put into the App bundle root directory, which cause the different SDKs override each other's xcprivacy files...Not the good solution\r\n\r\nSee:\r\n\r\n![image](https:\/\/github.com\/CocoaPods\/CocoaPods\/assets\/6919743\/03fc57fa-4f07-45f3-92ec-4e6b288e5ba5)\r\n","@dreampiggy maybe `resource_bundles` is useful in static framework case\r\n```ruby\r\ns.subspec 'core' do |core|\r\n  core.source_files = 'Sources\/Core\/**\/*{.h,.m,.c,.cpp,.mm}'\r\n  core.public_header_files = 'Sources\/Core\/include\/*.h'\r\n  core.resource_bundles = {'Your Framework Name' => ['Sources\/Core\/Resources\/**\/*']}\r\nend\r\n```\r\n\r\n---\r\n\r\n2024\/01\/30 EDIT:\r\n\r\nBased on @omarzl's [comment](https:\/\/github.com\/flutter\/packages\/pull\/5846#issuecomment-1881788602) in flutter\/packages [PR](https:\/\/github.com\/flutter\/packages\/pull\/5846)\uff0c`resource_bundles` names must have a prefix or suffix if you need to attach image assets or other resources in the framework bundle.\r\n\r\n```ruby\r\ns.subspec 'core' do |core|\r\n  core.source_files = 'Sources\/Core\/**\/*{.h,.m,.c,.cpp,.mm}'\r\n  core.public_header_files = 'Sources\/Core\/include\/*.h'\r\n  core.resource_bundles = {'Your Framework Name with PREFIX or SUFFIX' => ['Sources\/Core\/Resources\/**\/*']}\r\nend\r\n```\r\n\r\ncc @dreampiggy ","Apple now requires us (as SDWebImage) to provide the xcprivacy in 2024 Spring.\r\n\r\nhttps:\/\/developer.apple.com\/cn\/support\/third-party-SDK-requirements\r\n\r\nAny updates ?\r\n\r\nFor normal SPM package we already ship the xcprivacy. It's bundled in `.framework` resources folder\r\n\r\nbut for CocoaPods we don't know the syntax on Podspec to ship. Does CocoaPods need `resource_bundle` to provide that ? But I can't find anyone use that for distribution.","@YoloMao \r\n\r\nAre you still use static archive (non-framework) to ship the xcprivacy files ?\r\n\r\nCan this been recognized by Apple's ITC server, or Xcode tools detection to show the privacy details ?","@dreampiggy I'm using framework\uff0cSee: https:\/\/github.com\/growingio\/growingio-sdk-ios-autotracker\/blob\/e2f7ad82756284c86d1b6c069dce1292ff9ac935\/GrowingAnalytics.podspec#L47","@dreampiggy \r\nand \r\nhttps:\/\/github.com\/growingio\/growingio-sdk-ios-autotracker\/pull\/273#issuecomment-1722846232\r\nwish them helpful to you"],"labels":["t1:enhancement","t3:discussion","s3:detailed"]},{"title":"Unable to run pod list","body":"### Command\r\n\r\n```\r\n\/usr\/local\/bin\/pod list\r\n```\r\n\r\n### Report\r\n\r\n* What did you do?\r\n\r\nran a simple `pod list`command.\r\n\r\n* What did you expect to happen?\r\n\r\nNo error.\r\n\r\n* What happened instead?\r\n\r\nAn error.\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.0\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.2 (20D5029f)\r\n       Xcode : 12.3 (12C33)\r\n         Git : git version 2.24.3 (Apple Git-128)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.4.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Error\r\n\r\n```\r\nNoMethodError - undefined method `version' for nil:NilClass\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.0\/lib\/cocoapods\/user_interface.rb:214:in `pod'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.0\/lib\/cocoapods\/command\/list.rb:24:in `block in run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.0\/lib\/cocoapods\/command\/list.rb:24:in `each'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.0\/lib\/cocoapods\/command\/list.rb:24:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/claide-1.0.3\/lib\/claide\/command.rb:334:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.0\/lib\/cocoapods\/command.rb:52:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.0\/bin\/pod:55:in `<top (required)>'\r\n\/usr\/local\/bin\/pod:23:in `load'\r\n\/usr\/local\/bin\/pod:23:in `<main>'\r\n```","comments":["hmmm that looks weird indeed. Not sure what is going on exactly. Could appreciate some more debugging...\r\n\r\ncan you open `\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.0\/lib\/cocoapods\/user_interface.rb` and maybe add a `puts set` above line 214 perhaps?\r\n\r\nThanks!","Sure, what do you want next ? The output of `pod list` ?","Once you add this line save the file and re-run and then print out the additional debug statement that came out and hopefully will give us a clue.","Here we go\r\n\r\n```\r\n  AFNetworking_XYNet 0.1.0\r\n#<Pod::Specification::Set for `AFNetworking_bin' available at `trunk'>\r\n  AFNetworking_bin 0.1.0\r\n#<Pod::Specification::Set for `AFNullSafe' available at `trunk'>\r\n  AFNullSafe 0.1.0\r\n#<Pod::Specification::Set for `AFNutils' available at `trunk'>\r\n  AFNutils 0.1.1\r\n#<Pod::Specification::Set for `AFOAuth1' available at `trunk'>\r\n  AFOAuth1 0.0.1\r\n#<Pod::Specification::Set for `AFOAuth1Client' available at `trunk'>\r\n  AFOAuth1Client 1.0.0\r\n#<Pod::Specification::Set for `AFOAuth1_HPL_update' available at `trunk'>\r\n  AFOAuth1_HPL_update 1.2\r\n#<Pod::Specification::Set for `AFOAuth2Client' available at `trunk'>\r\n  AFOAuth2Client 1.0.0\r\n#<Pod::Specification::Set for `AFOAuth2Client@phoenixplatform' available at `trunk'>\r\n  AFOAuth2Client@phoenixplatform 0.1.1.1\r\n#<Pod::Specification::Set for `AFOAuth2Manager' available at `trunk'>\r\n  AFOAuth2Manager 3.0.0\r\n#<Pod::Specification::Set for `AFOAuthClient' available at `trunk'>\r\n  AFOAuthClient 2.0.0\r\n#<Pod::Specification::Set for `AFODelegateExtension' available at `trunk'>\r\n  AFODelegateExtension 0.0.7\r\n#<Pod::Specification::Set for `AFOFFMpeg' available at `trunk'>\r\n  AFOFFMpeg 0.1.4\r\n#<Pod::Specification::Set for `AFOFFMpegLib' available at `trunk'>\r\n  AFOFFMpegLib 0.0.22\r\n#<Pod::Specification::Set for `AFOFoundation' available at `trunk'>\r\n  AFOFoundation 1.0.9\r\n#<Pod::Specification::Set for `AFOGitHub' available at `trunk'>\r\n  AFOGitHub 0.0.13\r\n#<Pod::Specification::Set for `AFOHomePage' available at `trunk'>\r\n  AFOHomePage 0.0.21\r\n#<Pod::Specification::Set for `AFOPlaylist' available at `trunk'>\r\n  AFOPlaylist 0.0.17\r\n#<Pod::Specification::Set for `AFORouter' available at `trunk'>\r\n  AFORouter 0.0.9\r\n#<Pod::Specification::Set for `AFOSQLite' available at `trunk'>\r\n  AFOSQLite 0.0.10\r\n#<Pod::Specification::Set for `AFOSchedulerCore' available at `trunk'>\r\n  AFOSchedulerCore 0.0.2\r\n#<Pod::Specification::Set for `AFOSetting' available at `trunk'>\r\n  AFOSetting 0.0.4\r\n#<Pod::Specification::Set for `AFOUIKIT' available at `trunk'>\r\n  AFOUIKIT 0.0.8\r\n#<Pod::Specification::Set for `AFOViews' available at `trunk'>\r\n  AFOViews 0.0.2\r\n#<Pod::Specification::Set for `AFOlibyuv' available at `trunk'>\r\n  AFOlibyuv 0.0.6\r\n#<Pod::Specification::Set for `AFOnceKit' available at `trunk'>\r\n  AFOnceKit 1.0.0\r\n#<Pod::Specification::Set for `AFOnoResponseSerializer' available at `trunk'>\r\n  AFOnoResponseSerializer 1.0.0\r\n#<Pod::Specification::Set for `AFOx264' available at `trunk'>\r\n  AFOx264 0.0.1\r\n#<Pod::Specification::Set for `AFPageControl' available at `trunk'>\r\n  AFPageControl 0.0.1\r\n#<Pod::Specification::Set for `AFPageController' available at `trunk'>\r\n  AFPageController 0.1.1\r\n#<Pod::Specification::Set for `AFPaginator' available at `trunk'>\r\n  AFPaginator 1.0.2\r\n#<Pod::Specification::Set for `AFPhotoBrowser' available at `trunk'>\r\n  AFPhotoBrowser 0.0.6\r\n#<Pod::Specification::Set for `AFPopUpMenu' available at `trunk'>\r\n  AFPopUpMenu 0.1.6\r\n#<Pod::Specification::Set for `AFPopupView' available at `trunk'>\r\n  AFPopupView 1.0\r\n#<Pod::Specification::Set for `AFProgressiveImageDownload' available at `trunk'>\r\n  AFProgressiveImageDownload 0.1\r\n#<Pod::Specification::Set for `AFPromise' available at `trunk'>\r\n  AFPromise 0.1.2\r\n#<Pod::Specification::Set for `AFPushNotificationServiceSDK' available at `trunk'>\r\n  AFPushNotificationServiceSDK 0.1.1\r\n#<Pod::Specification::Set for `AFQiitaClient' available at `trunk'>\r\n  AFQiitaClient 0.1.0\r\n#<Pod::Specification::Set for `AFQiniuClient' available at `trunk'>\r\n  AFQiniuClient 0.0.1\r\n#<Pod::Specification::Set for `AFQuickLookView' available at `trunk'>\r\n  AFQuickLookView 0.3.2\r\n#<Pod::Specification::Set for `AFRESTfulCoreDataBackgroundQueue' available at `trunk'>\r\n  AFRESTfulCoreDataBackgroundQueue 1.0.1\r\n#<Pod::Specification::Set for `AFRaptureXMLRequestOperation' available at `trunk'>\r\n  AFRaptureXMLRequestOperation 1.0.3\r\n#<Pod::Specification::Set for `AFRedditAPIClient' available at `trunk'>\r\n  AFRedditAPIClient 0.0.2\r\n#<Pod::Specification::Set for `AFS3Client' available at `trunk'>\r\n  AFS3Client 0.2.3\r\n#<Pod::Specification::Set for `AFSAppDispatcherKit' available at `trunk'>\r\n  AFSAppDispatcherKit 2.0.1\r\n#<Pod::Specification::Set for `AFSDK' available at `trunk'>\r\n  AFSDK 0.1.4\r\n#<Pod::Specification::Set for `AFSQLManager' available at `trunk'>\r\n  AFSQLManager 1.0.2\r\n#<Pod::Specification::Set for `AFSReusableDisplayKit' available at `trunk'>\r\n  AFSReusableDisplayKit 1.0.1\r\n#<Pod::Specification::Set for `AFScrollView' available at `trunk'>\r\n  AFScrollView 1.0\r\n#<Pod::Specification::Set for `AFSegmentView' available at `trunk'>\r\n  AFSegmentView 0.1.2\r\n#<Pod::Specification::Set for `AFShareExtension' available at `trunk'>\r\n  AFShareExtension 0.0.1\r\n#<Pod::Specification::Set for `AFSheme' available at `trunk'>\r\n  AFSheme 0.1.6\r\n#<Pod::Specification::Set for `AFSignedHTTPRequestOperationManager' available at `trunk'>\r\n  AFSignedHTTPRequestOperationManager 4.1.0\r\n#<Pod::Specification::Set for `AFSoundManager' available at `trunk'>\r\n  AFSoundManager 2.1\r\n#<Pod::Specification::Set for `AFStatHatClient' available at `trunk'>\r\n  AFStatHatClient 0.0.1\r\n#<Pod::Specification::Set for `AFSubtitleNavigationItem' available at `trunk'>\r\n  AFSubtitleNavigationItem 0.1.0\r\n#<Pod::Specification::Set for `AFSwipeToHide' available at `trunk'>\r\n  AFSwipeToHide 0.1.0\r\n#<Pod::Specification::Set for `AFTPhotoScroller' available at `trunk'>\r\n  AFTPhotoScroller 0.1.8\r\n#<Pod::Specification::Set for `AFTestDemo' available at `trunk'>\r\n  AFTestDemo 1.1.0\r\n#<Pod::Specification::Set for `AFTextView' available at `trunk'>\r\n  AFTextView 0.0.1\r\n#<Pod::Specification::Set for `AFTransformableImageResponseSerializer' available at `trunk'>\r\n  AFTransformableImageResponseSerializer 0.0.1\r\n#<Pod::Specification::Set for `AFTumblrAPIClient' available at `trunk'>\r\n  AFTumblrAPIClient 0.0.4\r\n#<Pod::Specification::Set for `AFUIKit' available at `trunk'>\r\n  AFUIKit 1.0.2\r\n#<Pod::Specification::Set for `AFULoginSDK' available at `trunk'>\r\n  AFULoginSDK 0.1.2\r\n#<Pod::Specification::Set for `AFURLConnectionByteSpeedMeasure' available at `trunk'>\r\n  AFURLConnectionByteSpeedMeasure 1.0.1\r\n#<Pod::Specification::Set for `AFUrbanAirshipClient' available at `trunk'>\r\n  AFUrbanAirshipClient 0.0.2\r\n#<Pod::Specification::Set for `AFViewHelper' available at `trunk'>\r\n  AFViewHelper 4.1.0\r\n#<Pod::Specification::Set for `AFViewShaker' available at `trunk'>\r\n  AFViewShaker 0.0.5\r\n#<Pod::Specification::Set for `AFWeather' available at `trunk'>\r\n  AFWeather 1.0.1\r\n#<Pod::Specification::Set for `AFWebDAVManager' available at `trunk'>\r\n  AFWebDAVManager 0.0.1\r\n#<Pod::Specification::Set for `AFWebViewBrowser' available at `trunk'>\r\n  AFWebViewBrowser 0.1.0\r\n#<Pod::Specification::Set for `AFWebViewController' available at `trunk'>\r\n  AFWebViewController 1.3\r\n#<Pod::Specification::Set for `AFWokingLib' available at `trunk'>\r\n  AFWokingLib 1.0.2\r\n#<Pod::Specification::Set for `AFWunderlist' available at `trunk'>\r\n  AFWunderlist 1.1\r\n#<Pod::Specification::Set for `AFXAuthClient' available at `trunk'>\r\n  AFXAuthClient 1.1\r\n#<Pod::Specification::Set for `AFXMLDictionarySerializer' available at `trunk'>\r\n  AFXMLDictionarySerializer 0.0.1\r\n#<Pod::Specification::Set for `AFZalandoSDK' available at `trunk'>\r\n  AFZalandoSDK 0.0.1\r\n#<Pod::Specification::Set for `AFbos' available at `trunk'>\r\n  AFbos 0.0.1\r\n#<Pod::Specification::Set for `AFeedly' available at `trunk'>\r\n  AFeedly 0.0.1\r\n#<Pod::Specification::Set for `AFgzipRequestSerializer' available at `trunk'>\r\n  AFgzipRequestSerializer 0.0.2\r\n#<Pod::Specification::Set for `AFileManager' available at `trunk'>\r\n  AFileManager 0.1.0\r\n#<Pod::Specification::Set for `AGALiPaySDK' available at `trunk'>\r\n  AGALiPaySDK 1.0.0\r\n#<Pod::Specification::Set for `AGAlertView' available at `trunk'>\r\n  AGAlertView 0.1.0\r\n#<Pod::Specification::Set for `AGAssert' available at `trunk'>\r\n  AGAssert 2.0\r\n#<Pod::Specification::Set for `AGAsyncTestHelper' available at `trunk'>\r\n  AGAsyncTestHelper 1.0\r\n#<Pod::Specification::Set for `AGBadgeManager' available at `trunk'>\r\n  AGBadgeManager 0.1.2\r\n#<Pod::Specification::Set for `AGBenchmark' available at `trunk'>\r\n  AGBenchmark 1.0.1\r\n#<Pod::Specification::Set for `AGBlurTransition' available at `trunk'>\r\n  AGBlurTransition 0.0.2\r\n#<Pod::Specification::Set for `AGCache' available at `trunk'>\r\n  AGCache 0.1.3\r\n#<Pod::Specification::Set for `AGCategories' available at `trunk'>\r\n  AGCategories 0.1.9\r\n#<Pod::Specification::Set for `AGCircularPicker' available at `trunk'>\r\n  AGCircularPicker 0.1.8\r\n#<Pod::Specification::Set for `AGColor+Objc' available at `trunk'>\r\n  AGColor+Objc 0.0.1\r\n#<Pod::Specification::Set for `AGCommonCodeSwift' available at `trunk'>\r\n  AGCommonCodeSwift 0.1.0\r\n#<Pod::Specification::Set for `AGCountryCode' available at `trunk'>\r\n  AGCountryCode 0.0.8\r\n#<Pod::Specification::Set for `AGCustomControls' available at `trunk'>\r\n  AGCustomControls 0.0.8\r\n#<Pod::Specification::Set for `AGCustomTextField' available at `trunk'>\r\n  AGCustomTextField 0.1.0\r\n#<Pod::Specification::Set for `AGDefines' available at `trunk'>\r\n  AGDefines 0.1.0\r\n#<Pod::Specification::Set for `AGDemo' available at `trunk'>\r\n  AGDemo 0.0.3\r\n#<Pod::Specification::Set for `AGDropdown' available at `trunk'>\r\n  AGDropdown 1.0.0\r\n#<Pod::Specification::Set for `AGEFlagIcons' available at `trunk'>\r\n  AGEFlagIcons 1.1.0\r\n#<Pod::Specification::Set for `AGEVideoLayout' available at `trunk'>\r\n  AGEVideoLayout 1.0.3\r\n#<Pod::Specification::Set for `AGEmojiKeyboard' available at `trunk'>\r\n  AGEmojiKeyboard 0.2.1\r\n#<Pod::Specification::Set for `AGExpandingTableView' available at `trunk'>\r\n  AGExpandingTableView 0.1.1\r\n#<Pod::Specification::Set for `AGFlowRouter' available at `trunk'>\r\n  AGFlowRouter 0.5.3\r\n#<Pod::Specification::Set for `AGFramework' available at `trunk'>\r\n  AGFramework 1.0.0\r\n#<Pod::Specification::Set for `AGGameInternationalSDK' available at `trunk'>\r\n  AGGameInternationalSDK 1.0.0\r\n#<Pod::Specification::Set for `AGGeometryKit' available at `trunk'>\r\n  AGGeometryKit 1.2.9\r\n#<Pod::Specification::Set for `AGGeometryKit+POP' available at `trunk'>\r\n  AGGeometryKit+POP 0.1\r\n#<Pod::Specification::Set for `AGHUD' available at `trunk'>\r\n  AGHUD 1.2.0\r\n#<Pod::Specification::Set for `AGHandyUIKit' available at `trunk'>\r\n  AGHandyUIKit 1.0.1\r\n#<Pod::Specification::Set for `AGIPC' available at `trunk'>\r\n  AGIPC 0.0.7\r\n#<Pod::Specification::Set for `AGImageChecker' available at `trunk'>\r\n  AGImageChecker 1.0.1\r\n#<Pod::Specification::Set for `AGImageControls' available at `trunk'>\r\n  AGImageControls 0.1.7\r\n#<Pod::Specification::Set for `AGImagePickerController' available at `trunk'>\r\n  AGImagePickerController 3.0.1\r\n#<Pod::Specification::Set for `AGImagePickerControllerForSport' available at `trunk'>\r\n  AGImagePickerControllerForSport 2.0.3\r\n#<Pod::Specification::Set for `AGImagesDownloader' available at `trunk'>\r\n  AGImagesDownloader 0.0.1\r\n#<Pod::Specification::Set for `AGInterfaceInteraction' available at `trunk'>\r\n  AGInterfaceInteraction 0.3.0\r\n#<Pod::Specification::Set for `AGIntroduceViewController-Objc' available at `trunk'>\r\n  AGIntroduceViewController-Objc 0.0.1\r\n#<Pod::Specification::Set for `AGJBadgeView' available at `trunk'>\r\n  AGJBadgeView 0.0.1\r\n#<Pod::Specification::Set for `AGJDashLineView' available at `trunk'>\r\n  AGJDashLineView 0.0.1\r\n#<Pod::Specification::Set for `AGJFileManager' available at `trunk'>\r\n  AGJFileManager 0.0.1\r\n#<Pod::Specification::Set for `AGJObjcRuntime' available at `trunk'>\r\n  AGJObjcRuntime 0.0.1\r\n#<Pod::Specification::Set for `AGJPageControl' available at `trunk'>\r\n  AGJPageControl 0.0.1\r\n#<Pod::Specification::Set for `AGJPlaceholderTextView' available at `trunk'>\r\n  AGJPlaceholderTextView 0.0.4\r\n#<Pod::Specification::Set for `AGJUserDefaults' available at `trunk'>\r\n  AGJUserDefaults 0.0.1\r\n#<Pod::Specification::Set for `AGJointOperationSDK' available at `trunk'>\r\n  AGJointOperationSDK 2.0.3\r\n#<Pod::Specification::Set for `AGLightSdk' available at `trunk'>\r\n  AGLightSdk 0.1.0\r\n#<Pod::Specification::Set for `AGLocationDispatcher' available at `trunk'>\r\n  AGLocationDispatcher 0.1.0\r\n#<Pod::Specification::Set for `AGMCaptureFlowLib1' available at `trunk'>\r\n  AGMCaptureFlowLib1 0.0.3\r\n#<Pod::Specification::Set for `AGMedallionView' available at `trunk'>\r\n  AGMedallionView 1.1.0\r\n#<Pod::Specification::Set for `AGMobileGiftInterface' available at `trunk'>\r\n  AGMobileGiftInterface 0.1.3\r\n#<Pod::Specification::Set for `AGNavigationBarShape' available at `trunk'>\r\n  AGNavigationBarShape 0.3.3\r\n#<Pod::Specification::Set for `AGNetwork' available at `trunk'>\r\n  AGNetwork 0.1.1\r\n#<Pod::Specification::Set for `AGNetworking' available at `trunk'>\r\n  AGNetworking 0.0.1\r\n#<Pod::Specification::Set for `AGOPair' available at `trunk'>\r\n  AGOPair 1.2.0\r\n#<Pod::Specification::Set for `AGOTools' available at `trunk'>\r\n  AGOTools 0.4.0\r\n#<Pod::Specification::Set for `AGOTrakt' available at `trunk'>\r\n  AGOTrakt 1.1.1\r\n#<Pod::Specification::Set for `AGPhotoBrowser' available at `trunk'>\r\n  AGPhotoBrowser 1.1.1\r\n#<Pod::Specification::Set for `AGPullView' available at `trunk'>\r\n  AGPullView 0.5.0\r\n#<Pod::Specification::Set for `AGQueryString' available at `trunk'>\r\n  AGQueryString 0.1.0\r\n#<Pod::Specification::Set for `AGRateView' available at `trunk'>\r\n  AGRateView 0.2\r\n#<Pod::Specification::Set for `AGSAuth' available at `trunk'>\r\n  AGSAuth 2.0.0\r\n#<Pod::Specification::Set for `AGSCore' available at `trunk'>\r\n  AGSCore 2.0.0\r\n#<Pod::Specification::Set for `AGSPush' available at `trunk'>\r\n  AGSPush 2.0.0\r\n#<Pod::Specification::Set for `AGSSecurity' available at `trunk'>\r\n  AGSSecurity 2.0.0\r\n#<Pod::Specification::Set for `AGSTimeProfile' available at `trunk'>\r\n  AGSTimeProfile 1.0.1\r\n#<Pod::Specification::Set for `AGShareDesk' available at `trunk'>\r\n  AGShareDesk 1.0.1\r\n#<Pod::Specification::Set for `AGString' available at `trunk'>\r\n  AGString 2.0.0\r\n#<Pod::Specification::Set for `AGSwiftNotif' available at `trunk'>\r\n  AGSwiftNotif 1.0.1\r\n#<Pod::Specification::Set for `AGSwipeableTabBar' available at `trunk'>\r\n  AGSwipeableTabBar 0.1.1\r\n#<Pod::Specification::Set for `AGTencentOpenAPI' available at `trunk'>\r\n  AGTencentOpenAPI 3.2.1\r\n#<Pod::Specification::Set for `AGTextField' available at `trunk'>\r\n  AGTextField 1.0.0\r\n#<Pod::Specification::Set for `AGThemeManager' available at `trunk'>\r\n  AGThemeManager 0.1.1\r\n#<Pod::Specification::Set for `AGTimerManager' available at `trunk'>\r\n  AGTimerManager 0.5.3\r\n#<Pod::Specification::Set for `AGToggleFieldSetView' available at `trunk'>\r\n  AGToggleFieldSetView 0.1\r\n#<Pod::Specification::Set for `AGTypewriterLabel' available at `trunk'>\r\n  AGTypewriterLabel 0.1.2\r\n#<Pod::Specification::Set for `AGVerifyManager' available at `trunk'>\r\n  AGVerifyManager 0.3.7\r\n#<Pod::Specification::Set for `AGViewModel' available at `trunk'>\r\n  AGViewModel 0.6.29\r\n#<Pod::Specification::Set for `AGVolumeControlView' available at `trunk'>\r\n  AGVolumeControlView 0.1.0\r\n#<Pod::Specification::Set for `AGWaitForAsyncTestHelper' available at `trunk'>\r\n  AGWaitForAsyncTestHelper 0.1\r\n#<Pod::Specification::Set for `AGWindowView' available at `trunk'>\r\n  AGWindowView 0.1.9\r\n#<Pod::Specification::Set for `AGXToolkit' available at `trunk'>\r\n  AGXToolkit 0.7.1\r\n#<Pod::Specification::Set for `AGi18n' available at `trunk'>\r\n  AGi18n 0.0.5\r\n#<Pod::Specification::Set for `AHAlertView' available at `trunk'>\r\n  AHAlertView 0.0.2\r\n#<Pod::Specification::Set for `AHAudioPlayer' available at `trunk'>\r\n  AHAudioPlayer 0.1.71\r\n#<Pod::Specification::Set for `AHAuth0LoginViewController' available at `trunk'>\r\n  AHAuth0LoginViewController 0.0.7\r\n#<Pod::Specification::Set for `AHAutoLayout-Swift' available at `trunk'>\r\n  AHAutoLayout-Swift 1.0.0\r\n#<Pod::Specification::Set for `AHBannerView' available at `trunk'>\r\n  AHBannerView 0.3.2\r\n#<Pod::Specification::Set for `AHCarousel' available at `trunk'>\r\n  AHCarousel 0.1.1\r\n#<Pod::Specification::Set for `AHCarouselViewController' available at `trunk'>\r\n  AHCarouselViewController 0.1.1\r\n#<Pod::Specification::Set for `AHCategories' available at `trunk'>\r\n  AHCategories 1.0.1\r\n#<Pod::Specification::Set for `AHCategoryView' available at `trunk'>\r\n  AHCategoryView 1.3.01\r\n#<Pod::Specification::Set for `AHCodesignValidator' available at `trunk'>\r\n  AHCodesignValidator 0.1.1\r\n#<Pod::Specification::Set for `AHCodesignVerifier' available at `trunk'>\r\n  AHCodesignVerifier 0.1\r\n#<Pod::Specification::Set for `AHContainer' available at `trunk'>\r\n  AHContainer 0.2.2\r\n#<Pod::Specification::Set for `AHContainerViewController' available at `trunk'>\r\n  AHContainerViewController 0.1.0\r\n#<Pod::Specification::Set for `AHCoreFramework' available at `trunk'>\r\n  AHCoreFramework 1.0.1\r\n#<Pod::Specification::Set for `AHDNetworker' available at `trunk'>\r\n  AHDNetworker 1.0.0\r\n#<Pod::Specification::Set for `AHDataModel' available at `trunk'>\r\n  AHDataModel 0.5.1\r\n#<Pod::Specification::Set for `AHDispatch' available at `trunk'>\r\n  AHDispatch 0.9\r\n#<Pod::Specification::Set for `AHDownloadButton' available at `trunk'>\r\n  AHDownloadButton 1.2.0\r\n#<Pod::Specification::Set for `AHDownloadTool' available at `trunk'>\r\n  AHDownloadTool 0.1.12\r\n#<Pod::Specification::Set for `AHDownloader' available at `trunk'>\r\n  AHDownloader 0.1.81\r\n#<Pod::Specification::Set for `AHEasing' available at `trunk'>\r\n  AHEasing 1.2\r\n#<Pod::Specification::Set for `AHEasingPod' available at `trunk'>\r\n  AHEasingPod 1.1\r\n#<Pod::Specification::Set for `AHFloatingTextView' available at `trunk'>\r\n  AHFloatingTextView 0.1.31\r\n#<Pod::Specification::Set for `AHFuture' available at `trunk'>\r\n  AHFuture 0.1.8\r\n#<Pod::Specification::Set for `AHGCollection' available at `trunk'>\r\n  AHGCollection 0.2.0\r\n#<Pod::Specification::Set for `AHInsurance' available at `trunk'>\r\n  AHInsurance 0.3.0\r\n#<Pod::Specification::Set for `AHJSONSerializer' available at `trunk'>\r\n  AHJSONSerializer 0.1.1\r\n#<Pod::Specification::Set for `AHKActionSheet' available at `trunk'>\r\n  AHKActionSheet 0.5.4\r\n#<Pod::Specification::Set for `AHKBendableView' available at `trunk'>\r\n  AHKBendableView 1.1\r\n#<Pod::Specification::Set for `AHKNavigationController' available at `trunk'>\r\n  AHKNavigationController 1.3\r\n#<Pod::Specification::Set for `AHKSlider' available at `trunk'>\r\n  AHKSlider 0.1.0\r\n#<Pod::Specification::Set for `AHKSpringActionSheet' available at `trunk'>\r\n  AHKSpringActionSheet 0.5.5\r\n#<Pod::Specification::Set for `AHKeychain' available at `trunk'>\r\n  AHKeychain 0.3.0\r\n#<Pod::Specification::Set for `AHLaunchCtl' available at `trunk'>\r\n  AHLaunchCtl 0.5.4\r\n#<Pod::Specification::Set for `AHNavigationBar' available at `trunk'>\r\n  AHNavigationBar 0.1.0\r\n#<Pod::Specification::Set for `AHNetwork' available at `trunk'>\r\n  AHNetwork 0.3.2\r\n#<Pod::Specification::Set for `AHProgressSlider' available at `trunk'>\r\n  AHProgressSlider 0.2.1\r\n#<Pod::Specification::Set for `AHProvider' available at `trunk'>\r\n  AHProvider 0.0.1\r\n#<Pod::Specification::Set for `AHProxySettings' available at `trunk'>\r\n  AHProxySettings 0.1.2\r\n#<Pod::Specification::Set for `AHPullRefresh' available at `trunk'>\r\n  AHPullRefresh 1.0.2\r\n#<Pod::Specification::Set for `AHQSLibrary' available at `trunk'>\r\n  AHQSLibrary 0.1.3\r\n#<Pod::Specification::Set for `AHServiceRouter' available at `trunk'>\r\n  AHServiceRouter 0.5.4\r\n#<Pod::Specification::Set for `AHSpinnerView' available at `trunk'>\r\n  AHSpinnerView 0.0.1\r\n#<Pod::Specification::Set for `AHSuperImages' available at `trunk'>\r\n  AHSuperImages 0.1.0\r\n#<Pod::Specification::Set for `AHSuperNetwork' available at `trunk'>\r\n  AHSuperNetwork 0.1.0\r\n#<Pod::Specification::Set for `AHSwipeViewControllerContainer' available at `trunk'>\r\n  AHSwipeViewControllerContainer 0.1.7\r\n#<Pod::Specification::Set for `AHTabBarController' available at `trunk'>\r\n  AHTabBarController 1.0.3\r\n#<Pod::Specification::Set for `AHTextField' available at `trunk'>\r\n  AHTextField 0.1.0\r\n#<Pod::Specification::Set for `AI' available at `trunk'>\r\n  AI 0.0.8\r\n#<Pod::Specification::Set for `AI-KurentoToolbox' available at `trunk'>\r\n  AI-KurentoToolbox 0.5.1\r\n#<Pod::Specification::Set for `AIASwiftFramework' available at `trunk'>\r\n  AIASwiftFramework 0.0.1\r\n#<Pod::Specification::Set for `AIAlertView' available at `trunk'>\r\n  AIAlertView 1.0.6\r\n#<Pod::Specification::Set for `AIAnimation' available at `trunk'>\r\n  AIAnimation 0.0.2\r\n#<Pod::Specification::Set for `AIAttributedString' available at `trunk'>\r\n  AIAttributedString 0.0.2\r\n#<Pod::Specification::Set for `AICategory' available at `trunk'>\r\n  AICategory 0.0.2\r\n#<Pod::Specification::Set for `AICode' available at `trunk'>\r\n  AICode 0.1.0\r\n#<Pod::Specification::Set for `AIComponmentKit' available at `trunk'>\r\n  AIComponmentKit 0.3.0\r\n#<Pod::Specification::Set for `AIControls' available at `trunk'>\r\n  AIControls 0.1.4\r\n#<Pod::Specification::Set for `AICoreSDK' available at `trunk'>\r\n  AICoreSDK 0.0.1\r\n#<Pod::Specification::Set for `AICrypto' available at `trunk'>\r\n  AICrypto 1.2\r\n#<Pod::Specification::Set for `AICustomViewControllerTransition' available at `trunk'>\r\n  AICustomViewControllerTransition 1.1.2\r\n#<Pod::Specification::Set for `AIDefer' available at `trunk'>\r\n  AIDefer 1.0.2\r\n#<Pod::Specification::Set for `AIEmojica' available at `trunk'>\r\n  AIEmojica 0.9.2\r\n#<Pod::Specification::Set for `AIExternalSDK' available at `trunk'>\r\n  AIExternalSDK 1.0\r\n#<Pod::Specification::Set for `AIFNetworking' available at `trunk'>\r\n  AIFNetworking 0.1.9\r\n#<Pod::Specification::Set for `AIFlatSwitch' available at `trunk'>\r\n  AIFlatSwitch 1.0.7\r\n#<Pod::Specification::Set for `AIHotPatch' available at `trunk'>\r\n  AIHotPatch 1.2\r\n#<Pod::Specification::Set for `AIImageCompare' available at `trunk'>\r\n  AIImageCompare 0.1.2\r\n#<Pod::Specification::Set for `AIImageResize' available at `trunk'>\r\n  AIImageResize 1.3.0\r\n#<Pod::Specification::Set for `AIKit' available at `trunk'>\r\n  AIKit 0.0.4\r\n#<Pod::Specification::Set for `AIMJSONModelNetworking-iOS' available at `trunk'>\r\n  AIMJSONModelNetworking-iOS 1.0.1\r\n#<Pod::Specification::Set for `AIMLoader' available at `trunk'>\r\n  AIMLoader 0.0.5\r\n#<Pod::Specification::Set for `AIMNotificationObserver' available at `trunk'>\r\n  AIMNotificationObserver 0.3\r\n#<Pod::Specification::Set for `AIMObserver' available at `trunk'>\r\n  AIMObserver 0.3\r\n#<Pod::Specification::Set for `AIMObservers' available at `trunk'>\r\n  AIMObservers 0.3\r\n#<Pod::Specification::Set for `AIMQuestionnaire' available at `trunk'>\r\n  AIMQuestionnaire 1.0.1\r\n#<Pod::Specification::Set for `AIMRemoteConfiguration' available at `trunk'>\r\n  AIMRemoteConfiguration 0.4\r\n#<Pod::Specification::Set for `AIMTableViewIndexBar' available at `trunk'>\r\n  AIMTableViewIndexBar 0.1.1\r\n#<Pod::Specification::Set for `AIObservable' available at `trunk'>\r\n  AIObservable 0.1.1\r\n#<Pod::Specification::Set for `AIPARK' available at `trunk'>\r\n  AIPARK 0.1.7\r\n#<Pod::Specification::Set for `AIPARKSDK' available at `trunk'>\r\n  AIPARKSDK 1.1.9\r\n#<Pod::Specification::Set for `AIPayKit' available at `trunk'>\r\n  AIPayKit 1.1\r\n#<Pod::Specification::Set for `AIQAware' available at `trunk'>\r\n  AIQAware 0.2.14\r\n#<Pod::Specification::Set for `AIQAware-debug' available at `trunk'>\r\n  AIQAware-debug 0.2.14\r\n#<Pod::Specification::Set for `AIQCoreLib' available at `trunk'>\r\n  AIQCoreLib 1.5.3\r\n#<Pod::Specification::Set for `AIQJSBridge' available at `trunk'>\r\n  AIQJSBridge 1.0.4\r\n#<Pod::Specification::Set for `AIQKit' available at `trunk'>\r\n  AIQKit 1.0.1\r\n#<Pod::Specification::Set for `AIQSDK' available at `trunk'>\r\n  AIQSDK 0.2.7\r\n#<Pod::Specification::Set for `AIQUILib' available at `trunk'>\r\n  AIQUILib 1.0.5\r\n#<Pod::Specification::Set for `AIRTimer' available at `trunk'>\r\n  AIRTimer 1.0.2\r\n#<Pod::Specification::Set for `AIRValidator' available at `trunk'>\r\n  AIRValidator 1.0.1\r\n#<Pod::Specification::Set for `AIShareKit' available at `trunk'>\r\n  AIShareKit 1.1\r\n#<Pod::Specification::Set for `AISocket' available at `trunk'>\r\n  AISocket 0.1.0\r\n#<Pod::Specification::Set for `AISphereView' available at `trunk'>\r\n  AISphereView 1.3.0\r\n#<Pod::Specification::Set for `AISpring' available at `trunk'>\r\n  AISpring 1.0.4\r\n#<Pod::Specification::Set for `AISpringButton' available at `trunk'>\r\n  AISpringButton 1.0.0\r\n#<Pod::Specification::Set for `AISuperImages' available at `trunk'>\r\n  AISuperImages 0.1.0\r\n#<Pod::Specification::Set for `AITableView' available at `trunk'>\r\n  AITableView 0.1.1\r\n#<Pod::Specification::Set for `AITwitterAuth' available at `trunk'>\r\n  AITwitterAuth 0.0.6\r\n#<Pod::Specification::Set for `AIUIKit' available at `trunk'>\r\n  AIUIKit 1.3.1\r\n#<Pod::Specification::Set for `AIVerification' available at `trunk'>\r\n  AIVerification 1.0.0\r\n#<Pod::Specification::Set for `AIWebController' available at `trunk'>\r\n  AIWebController 1.1.2\r\n#<Pod::Specification::Set for `AI_Button' available at `trunk'>\r\n  AI_Button 5.0.0\r\n#<Pod::Specification::Set for `AI_CollectionView' available at `trunk'>\r\n  AI_CollectionView 5.0.0\r\n#<Pod::Specification::Set for `AI_Face' available at `trunk'>\r\n  AI_Face 1.0.0\r\n#<Pod::Specification::Set for `AI_ImagePickerController' available at `trunk'>\r\n  AI_ImagePickerController 5.0.0\r\n#<Pod::Specification::Set for `AI_Label' available at `trunk'>\r\n  AI_Label 5.0.0\r\n#<Pod::Specification::Set for `AI_RLSB' available at `trunk'>\r\n  AI_RLSB 1.0.0\r\n#<Pod::Specification::Set for `AI_TableView' available at `trunk'>\r\n  AI_TableView 5.0.0\r\n#<Pod::Specification::Set for `AI_TextField' available at `trunk'>\r\n  AI_TextField 5.0.0\r\n#<Pod::Specification::Set for `AI_TextView' available at `trunk'>\r\n  AI_TextView 5.0.0\r\n#<Pod::Specification::Set for `AIiOSVersion' available at `trunk'>\r\n  AIiOSVersion 2.0.2\r\n#<Pod::Specification::Set for `AImage' available at `trunk'>\r\n  AImage 1.0.0\r\n#<Pod::Specification::Set for `AJAppEvent' available at `trunk'>\r\n  AJAppEvent 1.1.0\r\n#<Pod::Specification::Set for `AJAppEventSwift' available at `trunk'>\r\n  AJAppEventSwift 0.2.0\r\n#<Pod::Specification::Set for `AJBottomSheet' available at `trunk'>\r\n  AJBottomSheet 1.0.2\r\n#<Pod::Specification::Set for `AJCommonUtils' available at `trunk'>\r\n  AJCommonUtils 0.1.6\r\n#<Pod::Specification::Set for `AJCountryPicker' available at `trunk'>\r\n  AJCountryPicker 1.0.0.1\r\n#<Pod::Specification::Set for `AJCountryPicker2' available at `trunk'>\r\n  AJCountryPicker2 2.0.0\r\n#<Pod::Specification::Set for `AJDownload' available at `trunk'>\r\n  AJDownload 1.0.0\r\n#<Pod::Specification::Set for `AJF_test' available at `trunk'>\r\n  AJF_test 0.0.1\r\n#<Pod::Specification::Set for `AJJTypedNotification' available at `trunk'>\r\n  AJJTypedNotification 2.0.1\r\n#<Pod::Specification::Set for `AJKLib' available at `trunk'>\r\n  AJKLib 0.1.0\r\n#<Pod::Specification::Set for `AJKYY' available at `trunk'>\r\n  AJKYY 0.0.2\r\n#<Pod::Specification::Set for `AJKit' available at `trunk'>\r\n  AJKit 0.4.2\r\n#<Pod::Specification::Set for `AJKitSwift' available at `trunk'>\r\n  AJKitSwift 0.1.0\r\n#<Pod::Specification::Set for `AJLayoutKit' available at `trunk'>\r\n  AJLayoutKit 0.0.1\r\n#<Pod::Specification::Set for `AJLog' available at `trunk'>\r\n  AJLog 1.0.0\r\n#<Pod::Specification::Set for `AJMessage' available at `trunk'>\r\n  AJMessage 1.2.2\r\n#<Pod::Specification::Set for `AJModuleService' available at `trunk'>\r\n  AJModuleService 0.1.1\r\n#<Pod::Specification::Set for `AJModuleServiceSwift' available at `trunk'>\r\n  AJModuleServiceSwift 0.2.0\r\n#<Pod::Specification::Set for `AJNetworkJurisdictionManager' available at `trunk'>\r\n  AJNetworkJurisdictionManager 0.3.4\r\n#<Pod::Specification::Set for `AJNetworkManager' available at `trunk'>\r\n  AJNetworkManager 0.1.0\r\n#<Pod::Specification::Set for `AJNetworking' available at `trunk'>\r\n  AJNetworking 3.2.0\r\n#<Pod::Specification::Set for `AJNotificationView' available at `trunk'>\r\n  AJNotificationView 0.7\r\n#<Pod::Specification::Set for `AJPageControl' available at `trunk'>\r\n  AJPageControl 1.0\r\n#<Pod::Specification::Set for `AJPickerButton' available at `trunk'>\r\n  AJPickerButton 1.0.0\r\n#<Pod::Specification::Set for `AJPickerTextField' available at `trunk'>\r\n  AJPickerTextField 1.0.1\r\n#<Pod::Specification::Set for `AJPopAlert' available at `trunk'>\r\n  AJPopAlert 0.1.0\r\n#<Pod::Specification::Set for `AJRNight' available at `trunk'>\r\n  AJRNight 1.0.0\r\n#<Pod::Specification::Set for `AJSDK' available at `trunk'>\r\n  AJSDK 2.0.0\r\n#<Pod::Specification::Set for `AJScoreView' available at `trunk'>\r\n  AJScoreView 1.0.0\r\n#<Pod::Specification::Set for `AJScrollContentView' available at `trunk'>\r\n  AJScrollContentView 0.0.1\r\n#<Pod::Specification::Set for `AJSecurityBaseUtility' available at `trunk'>\r\n  AJSecurityBaseUtility 0.1\r\n#<Pod::Specification::Set for `AJSlideCell' available at `trunk'>\r\n  AJSlideCell 1.0.3\r\n#<Pod::Specification::Set for `AJTPHProvider' available at `trunk'>\r\n  AJTPHProvider 0.4.0\r\n#<Pod::Specification::Set for `AJTestSDK' available at `trunk'>\r\n  AJTestSDK 1.0.0\r\n#<Pod::Specification::Set for `AJToastHub' available at `trunk'>\r\n  AJToastHub 1.0.0\r\n#<Pod::Specification::Set for `AJWValidator' available at `trunk'>\r\n  AJWValidator 0.0.8\r\n#<Pod::Specification::Set for `AJXiao' available at `trunk'>\r\n  AJXiao 1.0.0\r\n#<Pod::Specification::Set for `AJZoomViewController' available at `trunk'>\r\n  AJZoomViewController 0.1.0\r\n#<Pod::Specification::Set for `AJ_UIKit' available at `trunk'>\r\n  AJ_UIKit 0.1.0\r\n#<Pod::Specification::Set for `AKABadge' available at `trunk'>\r\n  AKABadge 0.1.5\r\n#<Pod::Specification::Set for `AKABeacon' available at `trunk'>\r\n  AKABeacon 0.3.1\r\n#<Pod::Specification::Set for `AKACommons' available at `trunk'>\r\n  AKACommons 0.2.1\r\n#<Pod::Specification::Set for `AKANetworkLogging' available at `trunk'>\r\n  AKANetworkLogging 0.1.0\r\n#<Pod::Specification::Set for `AKASegmentedControl' available at `trunk'>\r\n  AKASegmentedControl 1.0.5\r\n#<Pod::Specification::Set for `AKAViewLine' available at `trunk'>\r\n  AKAViewLine 0.0.2\r\n#<Pod::Specification::Set for `AKAttributeKit' available at `trunk'>\r\n  AKAttributeKit 0.3.1\r\n#<Pod::Specification::Set for `AKAttributedString' available at `trunk'>\r\n  AKAttributedString 1.0.1\r\n#<Pod::Specification::Set for `AKBasis' available at `trunk'>\r\n  AKBasis 0.3.0\r\n#<Pod::Specification::Set for `AKCalendar' available at `trunk'>\r\n  AKCalendar 0.1.1\r\n#<Pod::Specification::Set for `AKCards' available at `trunk'>\r\n  AKCards 0.2.6\r\n#<Pod::Specification::Set for `AKCommonUtility' available at `trunk'>\r\n  AKCommonUtility 0.1.3\r\n#<Pod::Specification::Set for `AKDashboardView' available at `trunk'>\r\n  AKDashboardView 1.0.1\r\n#<Pod::Specification::Set for `AKExtension528' available at `trunk'>\r\n  AKExtension528 0.0.4\r\n#<Pod::Specification::Set for `AKExtensions' available at `trunk'>\r\n  AKExtensions 1.0.3\r\n#<Pod::Specification::Set for `AKFRateView' available at `trunk'>\r\n  AKFRateView 0.1.1\r\n#<Pod::Specification::Set for `AKFRatingView' available at `trunk'>\r\n  AKFRatingView 0.1.2\r\n#<Pod::Specification::Set for `AKFloatingLabel' available at `trunk'>\r\n  AKFloatingLabel 1.0.0\r\n#<Pod::Specification::Set for `AKForm' available at `trunk'>\r\n  AKForm 0.0.6\r\n#<Pod::Specification::Set for `AKFramework' available at `trunk'>\r\n  AKFramework 0.1.0\r\n#<Pod::Specification::Set for `AKGADWrapper' available at `trunk'>\r\n  AKGADWrapper 1.0.3\r\n#<Pod::Specification::Set for `AKGPushAnimator' available at `trunk'>\r\n  AKGPushAnimator 1.0.6\r\n#<Pod::Specification::Set for `AKGitViewControllers' available at `trunk'>\r\n  AKGitViewControllers 0.1.0\r\n#<Pod::Specification::Set for `AKImageColorPicker' available at `trunk'>\r\n  AKImageColorPicker 0.2.0\r\n#<Pod::Specification::Set for `AKImageCropperView' available at `trunk'>\r\n  AKImageCropperView 2.0.0\r\n#<Pod::Specification::Set for `AKImagePickerController' available at `trunk'>\r\n  AKImagePickerController 1.1.2\r\n#<Pod::Specification::Set for `AKImageViewer' available at `trunk'>\r\n  AKImageViewer 1.0.12\r\n#<Pod::Specification::Set for `AKImageview' available at `trunk'>\r\n  AKImageview 1.0.0\r\n#<Pod::Specification::Set for `AKIndexView' available at `trunk'>\r\n  AKIndexView 0.1.1\r\n#<Pod::Specification::Set for `AKInteractiveBarProxy' available at `trunk'>\r\n  AKInteractiveBarProxy 1.0.0\r\n#<Pod::Specification::Set for `AKKeyboard' available at `trunk'>\r\n  AKKeyboard 0.0.4\r\n#<Pod::Specification::Set for `AKLabel' available at `trunk'>\r\n  AKLabel 1.0\r\n#<Pod::Specification::Set for `AKLibs' available at `trunk'>\r\n  AKLibs 0.9.0\r\n#<Pod::Specification::Set for `AKLocationManager' available at `trunk'>\r\n  AKLocationManager 1.0.3\r\n#<Pod::Specification::Set for `AKLookups' available at `trunk'>\r\n  AKLookups 1.0.0\r\n#<Pod::Specification::Set for `AKLruDictionary' available at `trunk'>\r\n  AKLruDictionary 2.0\r\n#<Pod::Specification::Set for `AKMaskField' available at `trunk'>\r\n  AKMaskField 2.0.3\r\n#<Pod::Specification::Set for `AKMatrixImage' available at `trunk'>\r\n  AKMatrixImage 1.0.0\r\n#<Pod::Specification::Set for `AKMediaViewer' available at `trunk'>\r\n  AKMediaViewer 1.0.9\r\n#<Pod::Specification::Set for `AKMediator' available at `trunk'>\r\n  AKMediator 0.0.1\r\n#<Pod::Specification::Set for `AKModel' available at `trunk'>\r\n  AKModel 1.5.4\r\n#<Pod::Specification::Set for `AKMonthYearPickerView' available at `trunk'>\r\n  AKMonthYearPickerView 1.0.5\r\n#<Pod::Specification::Set for `AKNSString+phoneFormatter' available at `trunk'>\r\n  AKNSString+phoneFormatter 0.0.1\r\n#<Pod::Specification::Set for `AKNavigation' available at `trunk'>\r\n  AKNavigation 1.0.8\r\n#<Pod::Specification::Set for `AKNumericFormatter' available at `trunk'>\r\n  AKNumericFormatter 0.0.2\r\n#<Pod::Specification::Set for `AKOFlipViewController' available at `trunk'>\r\n  AKOFlipViewController 0.1.3\r\n#<Pod::Specification::Set for `AKOtpView' available at `trunk'>\r\n  AKOtpView 0.1.0\r\n#<Pod::Specification::Set for `AKPFlowLayout' available at `trunk'>\r\n  AKPFlowLayout 0.1.2\r\n#<Pod::Specification::Set for `AKPickerView' available at `trunk'>\r\n  AKPickerView 0.2.7\r\n#<Pod::Specification::Set for `AKPickerView-Swift' available at `trunk'>\r\n  AKPickerView-Swift 1.0.1\r\n#<Pod::Specification::Set for `AKRealmUtils' available at `trunk'>\r\n  AKRealmUtils 1.0.3\r\n#<Pod::Specification::Set for `AKSamplePod' available at `trunk'>\r\n  AKSamplePod 0.1.1\r\n#<Pod::Specification::Set for `AKSegmentedControl' available at `trunk'>\r\n  AKSegmentedControl 1.0.4\r\n#<Pod::Specification::Set for `AKSemanticView' available at `trunk'>\r\n  AKSemanticView 0.0.1\r\n#<Pod::Specification::Set for `AKService' available at `trunk'>\r\n  AKService 0.5\r\n#<Pod::Specification::Set for `AKServiceWithKakaoLocal' available at `trunk'>\r\n  AKServiceWithKakaoLocal 0.2\r\n#<Pod::Specification::Set for `AKSideMenu' available at `trunk'>\r\n  AKSideMenu 1.4.5\r\n#<Pod::Specification::Set for `AKSimpleColorPicker' available at `trunk'>\r\n  AKSimpleColorPicker 0.1.0\r\n#<Pod::Specification::Set for `AKSlidecks' available at `trunk'>\r\n  AKSlidecks 1.0.0\r\n#<Pod::Specification::Set for `AKSpeech' available at `trunk'>\r\n  AKSpeech 0.0.7\r\n#<Pod::Specification::Set for `AKStompClient' available at `trunk'>\r\n  AKStompClient 0.1.0\r\n#<Pod::Specification::Set for `AKSwifty' available at `trunk'>\r\n  AKSwifty 0.1.4\r\n#<Pod::Specification::Set for `AKTLayout' available at `trunk'>\r\n  AKTLayout 1.3.0\r\n#<Pod::Specification::Set for `AKTabBarController' available at `trunk'>\r\n  AKTabBarController 1.1.0\r\n#<Pod::Specification::Set for `AKTagsInputView' available at `trunk'>\r\n  AKTagsInputView 1.0.1\r\n#<Pod::Specification::Set for `AKToast' available at `trunk'>\r\n  AKToast 0.0.1\r\n#<Pod::Specification::Set for `AKTrakt' available at `trunk'>\r\n  AKTrakt 1.0.1\r\n#<Pod::Specification::Set for `AKTransliteration' available at `trunk'>\r\n  AKTransliteration 0.0.1\r\n#<Pod::Specification::Set for `AKTransmission' available at `trunk'>\r\n  AKTransmission 0.1.1\r\n#<Pod::Specification::Set for `AKUAssetManager' available at `trunk'>\r\n  AKUAssetManager 1.0.1\r\n#<Pod::Specification::Set for `AKUIKitBase' available at `trunk'>\r\n  AKUIKitBase 0.1.2\r\n#<Pod::Specification::Set for `AKUSexagenaryCycle' available at `trunk'>\r\n  AKUSexagenaryCycle 0.2.2\r\n#<Pod::Specification::Set for `AKUStoryboardEntry' available at `trunk'>\r\n  AKUStoryboardEntry 1.0.0\r\n#<Pod::Specification::Set for `AKUTestKit' available at `trunk'>\r\n  AKUTestKit 1.1.2\r\n#<Pod::Specification::Set for `AKUtils' available at `trunk'>\r\n  AKUtils 2.0.2\r\n#<Pod::Specification::Set for `AKVerbalExpression' available at `trunk'>\r\n  AKVerbalExpression 0.4.0\r\n#<Pod::Specification::Set for `AKVideoImageView' available at `trunk'>\r\n  AKVideoImageView 1.1.2\r\n#<Pod::Specification::Set for `AKWebImage' available at `trunk'>\r\n  AKWebImage 1.0.3\r\n#<Pod::Specification::Set for `AKYoutubeParser' available at `trunk'>\r\n  AKYoutubeParser 0.1.0\r\n#<Pod::Specification::Set for `AK_PKHUD' available at `trunk'>\r\n  AK_PKHUD 6.0.1\r\n#<Pod::Specification::Set for `AK_RxSwiftUtilities' available at `trunk'>\r\n  AK_RxSwiftUtilities 2.2.0\r\n#<Pod::Specification::Set for `AKit' available at `trunk'>\r\n  AKit 0.1.1\r\n#<Pod::Specification::Set for `ALAMuDaoSDK' available at `trunk'>\r\n  ALAMuDaoSDK 0.1.2\r\n#<Pod::Specification::Set for `ALAPNSManager' available at `trunk'>\r\n  ALAPNSManager 0.1.4\r\n#<Pod::Specification::Set for `ALAboutVersion' available at `trunk'>\r\n  ALAboutVersion 1.0.0\r\n#<Pod::Specification::Set for `ALAccordion' available at `trunk'>\r\n  ALAccordion 0.4.0\r\n#<Pod::Specification::Set for `ALActionBlocks' available at `trunk'>\r\n  ALActionBlocks 1.0.3\r\n#<Pod::Specification::Set for `ALActionSheetView' available at `trunk'>\r\n  ALActionSheetView 1.3.1\r\n#<Pod::Specification::Set for `ALAlertBanner' available at `trunk'>\r\n  ALAlertBanner 0.3.1\r\n#<Pod::Specification::Set for `ALAlertView' available at `trunk'>\r\n  ALAlertView 0.1.2\r\n#<Pod::Specification::Set for `ALAlertViewController' available at `trunk'>\r\n  ALAlertViewController 0.0.3\r\n#<Pod::Specification::Set for `ALAnimatable' available at `trunk'>\r\n  ALAnimatable 0.2\r\n#<Pod::Specification::Set for `ALAnimationView' available at `trunk'>\r\n  ALAnimationView 0.1.1\r\n#<Pod::Specification::Set for `ALAssetsLibrary-CustomPhotoAlbum' available at `trunk'>\r\n  ALAssetsLibrary-CustomPhotoAlbum 1.3.4\r\n#<Pod::Specification::Set for `ALBNoSQLDB' available at `trunk'>\r\n  ALBNoSQLDB 6.0.0\r\n#<Pod::Specification::Set for `ALBPeerConnection' available at `trunk'>\r\n  ALBPeerConnection 3.0.2\r\n#<Pod::Specification::Set for `ALBridge' available at `trunk'>\r\n  ALBridge 1.2.0\r\n#<Pod::Specification::Set for `ALBusSeatView' available at `trunk'>\r\n  ALBusSeatView 0.2.5\r\n#<Pod::Specification::Set for `ALButton' available at `trunk'>\r\n  ALButton 0.0.1\r\n#<Pod::Specification::Set for `ALButtonMenu' available at `trunk'>\r\n  ALButtonMenu 1.1.0\r\n#<Pod::Specification::Set for `ALCalendar' available at `trunk'>\r\n  ALCalendar 1.0\r\n#<Pod::Specification::Set for `ALCalendarPicker' available at `trunk'>\r\n  ALCalendarPicker 1.4.1\r\n#<Pod::Specification::Set for `ALCameraViewController' available at `trunk'>\r\n  ALCameraViewController 3.1\r\n#<Pod::Specification::Set for `ALCameraViewController-Tulleb' available at `trunk'>\r\n  ALCameraViewController-Tulleb 3.1\r\n#<Pod::Specification::Set for `ALCameraViewControllerExtended' available at `trunk'>\r\n  ALCameraViewControllerExtended 2.4\r\n#<Pod::Specification::Set for `ALCameraViewControllerFork' available at `trunk'>\r\n  ALCameraViewControllerFork 3.0.8\r\n#<Pod::Specification::Set for `ALCoreDataManager' available at `trunk'>\r\n  ALCoreDataManager 0.2.3\r\n#<Pod::Specification::Set for `ALCountryPicker' available at `trunk'>\r\n  ALCountryPicker 1.0.4\r\n#<Pod::Specification::Set for `ALCountryPickerKit' available at `trunk'>\r\n  ALCountryPickerKit 0.2.2\r\n#<Pod::Specification::Set for `ALCustomButton' available at `trunk'>\r\n  ALCustomButton 1.0.3\r\n#<Pod::Specification::Set for `ALDClock' available at `trunk'>\r\n  ALDClock 2.0.1\r\n#<Pod::Specification::Set for `ALDColorBlindEffect' available at `trunk'>\r\n  ALDColorBlindEffect 1.0.4\r\n#<Pod::Specification::Set for `ALDEBugTool' available at `trunk'>\r\n  ALDEBugTool 0.3.0\r\n#<Pod::Specification::Set for `ALDMapKit' available at `trunk'>\r\n  ALDMapKit 1.0.1\r\n#<Pod::Specification::Set for `ALDMuDaoSDK' available at `trunk'>\r\n  ALDMuDaoSDK 0.0.2\r\n#<Pod::Specification::Set for `ALDTimer' available at `trunk'>\r\n  ALDTimer 0.0.1\r\n#<Pod::Specification::Set for `ALDataRequestView' available at `trunk'>\r\n  ALDataRequestView 2.3.2\r\n#<Pod::Specification::Set for `ALDataSource' available at `trunk'>\r\n  ALDataSource 0.3.1\r\n#<Pod::Specification::Set for `ALDebugView' available at `trunk'>\r\n  ALDebugView 0.4.6\r\n#<Pod::Specification::Set for `ALDoubleConversion' available at `trunk'>\r\n  ALDoubleConversion 1.1.5\r\n#<Pod::Specification::Set for `ALEArchiver' available at `trunk'>\r\n  ALEArchiver 0.1.0\r\n#<Pod::Specification::Set for `ALEither' available at `trunk'>\r\n  ALEither 0.1.8\r\n#<Pod::Specification::Set for `ALExtend' available at `trunk'>\r\n  ALExtend 0.0.3\r\n#<Pod::Specification::Set for `ALFolly' available at `trunk'>\r\n  ALFolly 2016.09.26.00\r\n#<Pod::Specification::Set for `ALFramework' available at `trunk'>\r\n  ALFramework 1.0.0\r\n#<Pod::Specification::Set for `ALGReversedFlowLayout' available at `trunk'>\r\n  ALGReversedFlowLayout 0.1.0\r\n#<Pod::Specification::Set for `ALGlog' available at `trunk'>\r\n  ALGlog 0.3.4\r\n#<Pod::Specification::Set for `ALGridView' available at `trunk'>\r\n  ALGridView 0.0.4\r\n#<Pod::Specification::Set for `ALISJSBridgeKit' available at `trunk'>\r\n  ALISJSBridgeKit 0.1.2\r\n#<Pod::Specification::Set for `ALISPluginsLibrary' available at `trunk'>\r\n  ALISPluginsLibrary 0.1.0\r\n#<Pod::Specification::Set for `ALImageStore' available at `trunk'>\r\n  ALImageStore 0.1.6\r\n#<Pod::Specification::Set for `ALJDPay' available at `trunk'>\r\n  ALJDPay 2.4.1\r\n#<Pod::Specification::Set for `ALKTest' available at `trunk'>\r\n  ALKTest 0.0.2\r\n#<Pod::Specification::Set for `ALKTest1' available at `trunk'>\r\n  ALKTest1 0.0.1\r\n#<Pod::Specification::Set for `ALKeyboradCenter' available at `trunk'>\r\n  ALKeyboradCenter 0.1.2\r\n#<Pod::Specification::Set for `ALKit' available at `trunk'>\r\n  ALKit 0.6\r\n#<Pod::Specification::Set for `ALLKit' available at `trunk'>\r\n  ALLKit 1.4\r\n#<Pod::Specification::Set for `ALLabel' available at `trunk'>\r\n  ALLabel 2.0.0\r\n#<Pod::Specification::Set for `ALLiveLogger' available at `trunk'>\r\n  ALLiveLogger 0.2.0\r\n#<Pod::Specification::Set for `ALLoadingView' available at `trunk'>\r\n  ALLoadingView 1.1.5\r\n#<Pod::Specification::Set for `ALLocalizables' available at `trunk'>\r\n  ALLocalizables 3.0.1\r\n#<Pod::Specification::Set for `ALManagedObjectFactory' available at `trunk'>\r\n  ALManagedObjectFactory 0.2.1\r\n#<Pod::Specification::Set for `ALMediaLibrary' available at `trunk'>\r\n  ALMediaLibrary 0.2\r\n#<Pod::Specification::Set for `ALMoviePlayerController' available at `trunk'>\r\n  ALMoviePlayerController 0.3.0\r\n#<Pod::Specification::Set for `ALNSLog' available at `trunk'>\r\n  ALNSLog 1.0\r\n#<Pod::Specification::Set for `ALNetWorkingSwift' available at `trunk'>\r\n  ALNetWorkingSwift 0.4.0\r\n#<Pod::Specification::Set for `ALNetworking' available at `trunk'>\r\n  ALNetworking 1.1.1\r\n#<Pod::Specification::Set for `ALO7ProgressiveMigrationManager' available at `trunk'>\r\n  ALO7ProgressiveMigrationManager 1.0.3\r\n#<Pod::Specification::Set for `ALOCenteredButton' available at `trunk'>\r\n  ALOCenteredButton 0.5\r\n#<Pod::Specification::Set for `ALOKeyboardAware' available at `trunk'>\r\n```\r\n\r\n```\r\n   CocoaPods : 1.10.0\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin20]\r\n    RubyGems : 3.0.3\r\n        Host : macOS 11.2 (20D5029f)\r\n       Xcode : 12.3 (12C33)\r\n         Git : git version 2.24.3 (Apple Git-128)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.4.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Error\r\n\r\n```\r\nNoMethodError - undefined method `version' for nil:NilClass\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.0\/lib\/cocoapods\/user_interface.rb:215:in `pod'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.0\/lib\/cocoapods\/command\/list.rb:24:in `block in run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.0\/lib\/cocoapods\/command\/list.rb:24:in `each'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.0\/lib\/cocoapods\/command\/list.rb:24:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/claide-1.0.3\/lib\/claide\/command.rb:334:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.0\/lib\/cocoapods\/command.rb:52:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.10.0\/bin\/pod:55:in `<top (required)>'\r\n\/usr\/local\/bin\/pod:23:in `load'\r\n\/usr\/local\/bin\/pod:23:in `<main>'\r\n```","Ah looks like `ALOKeyboardAware` no longer exists which causes the issue I think.\r\n\r\nThis one throws a 404 https:\/\/cocoapods.org\/pods\/ALOKeyboardAware, perhaps because the pod was deleted. We could handle that better I think.","That would be nice. "],"labels":["help wanted"]},{"title":"CocoaPods + mixed (static+dynamic for mac) XCFramework issue","body":"\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\nSet up podspec which would use mixed (details below) XCFramework instead of framework.\r\nCreate sample osx project, add pod dependency which would use this changed podspec\r\nRun `pod install`\r\n\r\n## What did you expect to happen?\r\n\r\nInstall all pod dependencies correctly - dependencies are resolved\r\n\r\n## What happened instead?\r\n\r\nDynamic framework from podspec using mixed XCFramework is not resolved and can't be imported -> error in compile time.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.0\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.15.7 (19H2)\r\n       Xcode : 11.4.1 (11E503a)\r\n         Git : git version 2.28.0\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\nplatform :osx, '10.15'\r\n\r\ntarget 'PLCR_MAC_CLI_Test' do\r\n  # Comment the next line if you don't want to use dynamic frameworks\r\n  use_frameworks!\r\n\r\n  # Pods for PLCR_MAC_CLI_Test\r\n  pod 'PLCrashReporter', :git => 'https:\/\/github.com\/microsoft\/plcrashreporter.git', :branch => 'feature\/xcframework-in-pods'\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/Jamminroot\/PLCR-XCF-Pods-test-mac-app\r\n\r\nHello. As stated in the title, we've faced a problem while migrating PCLR's podspec towards using XCFramework. The problem seem in the way our XCFramework is assebled - for iOS and tvOS we are providing regular static frameworks packed, but for the macOS - we distribute dynamic frameworks. While iOS and tvOS work as expected, macOS fails to resolve pod dependencies when such XCF is used.\r\nI've added a link to a sample project where this problem is reproduced.\r\nHere's a latest podspec we used for tests:\r\n\r\n```\r\nPod::Spec.new do |spec|\r\n  spec.name        = 'PLCrashReporter'\r\n  spec.version     = '1.8.1'\r\n  spec.summary     = 'Reliable, open-source crash reporting for iOS, macOS and tvOS.'\r\n  spec.description = 'PLCrashReporter is a reliable open source library that provides an in-process live crash reporting framework for use on iOS, macOS and tvOS. The library detects crashes and generates reports to help your investigation and troubleshooting with the information of application, system, process, thread, etc. as well as stack traces.'\r\n\r\n  spec.homepage    = 'https:\/\/github.com\/microsoft\/plcrashreporter'\r\n  spec.license     = { :type => 'MIT', :file => 'LICENSE.txt' }\r\n  spec.authors     = { 'Microsoft' => 'appcentersdk@microsoft.com' }\r\n\r\n  spec.source      = { :http     => \"https:\/\/github.com\/microsoft\/plcrashreporter\/releases\/download\/#{spec.version}\/PLCrashReporter-XCFramework-#{spec.version}.zip\",\r\n                       :flatten  => true }\r\n\r\n  spec.ios.deployment_target    = '9.0'\r\n  spec.osx.deployment_target    = '10.9'\r\n  spec.tvos.deployment_target   = '9.0'\r\n\r\n  spec.vendored_frameworks  = \"CrashReporter.xcframework\"\r\nend\r\n```","comments":["CocoaPods doesn't support xcframeworks with mixed linkages unfortunately. There's a few areas that assume all slices of the xcframework have the same linkage.\r\n\r\nIt would be possible to support it but non-trivial","Thanks for a quick reply.\r\nIs it something which can be done from our side, or is it something on yours? "],"labels":["t1:enhancement","d2:moderate","r:xcframeworks"]},{"title":"Stop Xcode from bugging users about \"Update to recommended settings\"","body":"When Xcode is used in a more recent version, then what was supported by `xcodeproj` on the time of the last `pod install|update` run, it will start to bother users about their installations with a warning that the project should be updated to \"recommended settings.\" (as seen in the screenshot) As there is little good to come out of manually messing with a generated artefact, it would be nice if the Pods installation could prevent this.\r\n\r\nIt looks like there is a [possible solution](https:\/\/twitter.com\/lapcatsoftware\/status\/1331962318507421697) to this:\r\n> edit the files to make `LastUpgradeCheck` and `LastUpgradeVersion` `9999`\r\n\r\n<img width=\"319\" alt=\"Screenshot 2020-11-26 at 18 55 20\" src=\"https:\/\/user-images.githubusercontent.com\/1389011\/100381342-1afc7380-3019-11eb-8ca4-87ec89ae524e.png\">\r\n\r\n## Advantages:\r\n\r\n* Users don't mess with modifying build settings on the Pods project manually \/ semi-automatically via Xcode.\r\n* CocoaPods stops bothering users with putting a mostly useless warning in their face, they might want to get away just for the sake of it and shoot themselves in the own foot.\r\n* It seems in line with the approach to write-lock files in the Pods directory.\r\n\r\n## Disadvantages:\r\n\r\n* This can be an indication that it would be a good idea to update CocoaPods and run `pod install|update` again.\r\n* If something changed, which does actually require to manually patch the project, a CocoaPods update isn't available yet, and the Xcode migrations are actually helpful, this would prevent Xcode from applying automatic changes. So things will just appear broken in other ways - maybe with less suggestions how that could be fixed.\r\n* ???","comments":["same question"],"labels":["t3:discussion","d2:moderate"]},{"title":"pod lib lint doesn't appear to update repos passed via --sources param","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nTried linting an internal lib using `pod lib lint`.\r\n\r\n```\r\nbundle exec pod lib lint --verbose --allow-warnings --sources='git@{private-host}:ios\/specs.git,https:\/\/cdn.cocoapods.org' --fail-fast --private\r\n```\r\n\r\n## What did you expect to happen?\r\n\r\nExpected CocoaPods to lint pulling the latest specs from the sources repo.\r\n\r\n## What happened instead?\r\n\r\n`pod lib lint` failed because it didn't update the private specs repo. Checked the [Options](https:\/\/guides.cocoapods.org\/terminal\/commands.html#pod_lib_lint) in the Guide but didn't see any option to force a refresh. For now, I'm forcing it by first _manually_ calling `pod repo update` but that's super inefficient as it updates ALL spec repos including the git-based trunk one which is slow to update.\r\n\r\nShould I expect `pod lib lint` to automatically fetch the latest for passed `--sources`?\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.9.1\r\n        Ruby : ruby 2.6.5p114 (2019-10-01 revision 67812) [x86_64-darwin19]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.15.7 (19H2)\r\n       Xcode : 11.5 (11E608c)\r\n         Git : git version 2.24.3 (Apple Git-128)\r\nRuby lib dir : \/Users\/pfeffero\/.rbenv\/versions\/2.6.5\/lib\r\nRepositories : specs - git - git@{private-host}:ios\/specs.git @ 42814a859dfdc5d23413fd45cfc0951aafee5cb2\r\n\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/pfeffero\/.rbenv\/versions\/2.6.5\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\nslather               : 2.5.0\r\n```\r\n","comments":["More or less a valid improvement and concern. We can limit updating of repos only to the ones that are passed in during `lint`.\r\n\r\nWant to try make a PR for it for 1.11.0?","@opfeffer did you know that `pod update` accepts a repo name to update?\r\n\r\n```\r\nUsage:\r\n\r\n    $ pod repo update [NAME]\r\n\r\n      Updates the local clone of the spec-repo `NAME`. If `NAME` is omitted this will\r\n      update all spec-repos in `\/Users\/dnkoutso\/.cocoapods\/repos`.\r\n```\r\n\r\nis this is a sufficient workaround? It wont update all repos...\r\n\r\nwe can still update `lint` to do an update for the sources you provided "],"labels":["t1:enhancement","d1:easy","help wanted"]},{"title":"Xcode 12 Clang: Error in PodSpec Validation due to architectures","body":"\r\n# Report\r\n\r\nHello, I recently updated to Xcode 12 and I am having errors with pushing my private podspec to my repo. It has to do with a dependency that I don't have control over, that I believe has an error with their valid Architecture definitions. \r\n\r\nI have read other posts\/issues on this git hub page about how to write Post_installs for installing a pod via a podfile, but I am trying to validate a podspec in which has a `spec.dependency` that is the issue. I am able to install the pod directly via podfile after adjusting the self-defined VALID_ARCHS setting in the build settings to include x86_64. Is there a similar Post_Install command I can add to my PodSpec?\r\n\r\nI'm not sure you can help me since I'm not even sure what the problem is exactly, but I was hoping maybe I could get some information. Let me know if you need any more information. Thanks.\r\n\r\n## What did you do?\r\nRun `pod repo push MyPodSpecs DroneKit.podspec`\r\n\r\n## What did you expect to happen?\r\nI expected `DroneKit` to be added to `MyPodSpecs ` successfully.\r\n\r\n## What happened instead?\r\n\r\nI got an error while validating spec:\r\n`ERROR | [iOS] xcodebuild: Returned an unsuccessful exit code. You can use `--verbose` for more information.`\r\n\r\nSo I ran with `--verbose`, and found mention of a clang error:\r\n\r\n`ld: building for iOS Simulator, but linking in dylib built for iOS, file '\/var\/folders\/pn\/4cgjvr1j7mzbnl55pfnzlgr00000gq\/T\/CocoaPods-Lint-20200929-48311-11st24n-DroneKit\/Pods\/DJI-SDK-iOS\/iOS_Mobile_SDK\/DJISDK.framework\/DJISDK' for architecture arm64\r\n    clang: error: linker command failed with exit code 1 (use -v to see invocation)`\r\n\r\n`The following build commands failed:\r\n    \tLd \/Users\/dylan\/Library\/Developer\/Xcode\/DerivedData\/App-ckgszeaogfkgqlddwiywgfcjzsrb\/Build\/Intermediates.noindex\/Pods.build\/Release-iphonesimulator\/DroneKit.build\/Objects-normal\/arm64\/Binary\/DroneKit normal arm64\r\n    (1 failure)`\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.0.rc.1\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.15.5 (19F101)\r\n       Xcode : 12.0.1 (12A7300)\r\n         Git : git version 2.24.3 (Apple Git-128)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : 17-scm-mypodspecs - git - http:\/\/192.155.17.3: 4444\/scm\/mypodspecs @ e6116cadf35ab4asdf33bfd134461c09dsafab3c9439c3\r\n\r\n               DMEPodSpecs - git - http:\/\/dylans@192.155.17.3:4444\/scm\/mypodspecs @ fa9234c65d8908243565353459d4223acasdfac03972c\r\n\r\n              master - git - https:\/\/github.com\/CocoaPods\/Specs.git @ a2333afbe6192da5c142612cb17e4f55e51c8a1\r\n\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.4.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\nplatform :ios, '11.0'\r\n\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\nsource 'http:\/\/192.155.17.3: 4444\/scm\/mypodspecs.git'\r\n\r\n\r\ndef pods\r\n pod 'DJI-SDK-iOS','4.13.1'\r\nend\r\n\r\ntarget 'DroneKit' do\r\n  use_frameworks!\r\n  pods\r\nend\r\n\r\ntarget 'DroneKitTests' do\r\n  inherit! :search_paths\r\n  use_frameworks!\r\n  pods\r\nend\r\n```\r\n\r\n### PodSpec\r\n```\r\nPod::Spec.new do |spec|\r\nspec.name         = \"DroneKit\"\r\nspec.version      = \"0.0.10\"\r\nspec.summary      = \"Provide interface with common Drone logic systems\"\r\nspec.description  = \"Container for Flight controller states, flight logger, and other common drone logic systems.\"\r\n\r\nspec.homepage     = \"http:\/\/192.155.17.3:4444\/scm\/dronekit.git\"\r\n\r\nspec.license      = { :type => \"MIT\", :file => \"LICENSE\" }\r\n\r\nspec.author       = { \"Dylan\" => \"dylan@myEmail.com\" }\r\n\r\nspec.platform     = :ios, \"11.0\"\r\nspec.swift_version = \"5.0\"\r\n\r\nspec.source       = { :git => \"http:\/\/192.155.17.3:4444\/scm\/dronekit.git\", :tag => \"#{spec.version}\" }\r\n\r\nspec.source_files  = \"DroneKit\/**\/*.{swift}\"\r\nspec.exclude_files = \"Classes\/Exclude\"\r\n\r\nspec.dependency \"DJI-SDK-iOS\"\r\n\r\nend\r\n```\r\n\r\n","comments":["This is probably the same or similar issue around VALID_ARCHS being deprecated in Xcode 12 and EXCLUDED_ARCHS needed.\r\n\r\nThanks for the report. ","Xcode 12 includes simulators supporting arm64 architecture (for the new apple silicon mac), so many framework need to be compiled again to include the arm64 slice for the simulator. Meanwhile, you should exclude the arm64 architecture of the simulator while compiling, otherwise it's gonna fail because it can't find the arm64 slice.\r\n\r\nUnfortunately, `pod lib lint` fails if your pod dependes on another without the arm64 support for the simulator. Adding any configuration to the `Podfile` won't fix it since `pod lib lint` internally creates a new workspace only based on the `.podspec`. In my case I was able to succesfully run `pod lib lint` by adding:\r\n```\r\ns.user_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64' }\r\ns.pod_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64' }\r\n```\r\nif the development pod has a direct dependency with the pod missing the arm64 slice. But on pods failing because of a transitive dependency I only need to add:\r\n```\r\ns.pod_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64' }\r\n```\r\n\r\n[Here is a great stackoverflow post on how to solve the issue.](https:\/\/stackoverflow.com\/a\/63955114)\r\nThe same issue was also reported in #9967 \r\n\r\nAfter trying many days, I couldn't find any better solution.\r\n","@tinchovictory makes sense. I assume your pod is a pre-built binary pod? Or does this fail with pods that have sources?","The podspec specified here btw is a private pod. I will need an easy to repro case with a source pod or a pre-built binary pod.","@dnkoutso yes I have the issue with [Google Analytics](https:\/\/github.com\/CocoaPods\/Specs\/blob\/master\/Specs\/4\/9\/c\/GoogleAnalytics\/3.17.0\/GoogleAnalytics.podspec.json) which is a pre-build pod. But I also have the same problem with Realm. They have an [open issue](https:\/\/github.com\/realm\/realm-cocoa\/issues\/6684) related to this.","Yes, this is a private podspec.\r\n\r\nI am unable to create a \"reproducible\" case for you at this time. But using @tinchovictory 's recommendation of adding excluded architectures in the podspec fixed the problem for now, and I am able to push my private podspec without any clang errors.\r\n\r\nI have let the creators of the dependent pod know of the issue and await their response\/update.\r\n\r\nThanks!","A static framework build from mars (https:\/\/github.com\/Tencent\/mars) only supports ARM64 and x86_64\r\nWhen validation is performed, an error is reported,\r\nThe following build commands (pod lib lint) failed:  \tLd \/Users\/... \/Objects-normal\/i386\/Binary\/HILog normal i386\r\nI need to add configuration in xxx.podspec : s.pod_target_xcconfig = { 'VALID_ARCHS' => 'armv7 arm64 x86_64'} and it's work.\r\nThis error occurred because mars did not contain i386 (32-bit) architecture(I think), so I removed i386 from VALID_ARCHS.\r\nHowever, Mars only supports ARM64 and X86_64 architectures, and I added ARMV7 to VALID_ARCHS to get this right.\r\nThat might be a little unreasonable .","hey, \r\n\r\nChoose the right section to resolve it on your side.\r\n\r\n> For SDK owners:\r\n\r\nThe solution is to open the podspec and add below:\r\n\r\n```ruby\r\ns.pod_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64'}\r\ns.user_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64'}\r\ns.ios.deployment_target  = '10.0' \/\/ not required\r\n```\r\n\r\n> For SDK users:\r\n\r\n1. Navigate to Build Settings of your project and add Any iOS Simulator SDK with value arm64 inside Excluded Architecture.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/3921852\/95323083-3dd69b00-08a6-11eb-9648-b69f47b10494.png)\r\n\r\n2. On Podfile add:\r\n\r\n```ruby\r\npost_install do |installer|\r\n  installer.pods_project.build_configurations.each do |config|\r\n    config.build_settings[\"EXCLUDED_ARCHS[sdk=iphonesimulator*]\"] = \"arm64\"\r\n  end\r\nend\r\n```\r\n\r\n","@ElizaSapir SDK owners should only add those lines to the `podspec` if they depend on another SDK which is missing the arm64 slice for simulators. But this is a temporary fix. Hopefully, the SDK's dependencies add the arm64 slice for simulators in the near future. When that happens, we need to remove those lines, otherwise we will be breaking compatibility for new macs.","Thanks @tinchovictory   @hibrq "],"labels":["s6:need sample"]},{"title":"xcode 12 - Pods_{MY_TARGET_NAME}.framework path not match","body":"# Report\r\n\r\n## What did you do?\r\n\r\n* (1) xcode 12 update\r\n* (2) pod re install\r\n```\r\npod deintegrate\r\npod install\r\npod update\r\n```\r\n\r\n## What did you expect to happen?\r\n\r\n* build success\r\n\r\n## What happened instead?\r\n\r\n* build error\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.0.beta.2\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.15.6 (19G2021)\r\n       Xcode : 11.7 (11E801a)\r\n         Git : git version 2.24.3 (Apple Git-128)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : cocoapods - git - https:\/\/github.com\/CocoaPods\/Specs.git @ f7151ff34aa680232516eb5bb77cd16d2a971160\r\n\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\n* **Pods_{MY_TARGET_NAME}.framework path not match**\r\n\r\n   * MyProject - Frameworks\r\n      * Build\/Products\/ ***Debug*** \/Pods_MyCocoaPodsTest_iOS.framework\r\n   * Pods - Products\r\n      * Build\/Products\/ ***Debug-iphonesimulator*** \/Pods_MyCocoaPodsTest_iOS.framework\r\n\r\n\r\n```\r\n\/\/ Pods - Products\r\n\/Users\/masteage\/Library\/Developer\/Xcode\/DerivedData\/MyCocoaPodsTest-cfdeouctznoswdgqqsebdkvotzem\/Build\/Products\/Debug-iphonesimulator\/Pods_MyCocoaPodsTest_iOS.framework\r\n\r\n\/\/ MyProject - Frameworks\r\n\/Users\/masteage\/Library\/Developer\/Xcode\/DerivedData\/MyCocoaPodsTest-cfdeouctznoswdgqqsebdkvotzem\/Build\/Products\/Debug\/Pods_MyCocoaPodsTest_iOS.framework\r\n\r\n```\r\n\r\n## Sample Code\r\n\r\n* https:\/\/github.com\/masteage\/CocoaPodsTestSample\/tree\/bug\/xcode_12","comments":["@masteage  Could you describe the build error you're getting?\r\nIt looks like you're using the cocoapods cdn. Do you think it may be related to this issue #10078?\r\n\r\n\r\n","<img width=\"1792\" alt=\"Screen Shot 2020-09-26 at 10 22 34 AM\" src=\"https:\/\/user-images.githubusercontent.com\/310370\/94346549-34198180-ffe2-11ea-8199-e22ae39d0ec8.png\">\r\n\r\ncannot build the sample app provided.\r\n\r\nPlease provide a sample app that clearly demonstrates the issue and provide step-by-step instructions on how to reproduce and what the issue is.\r\n\r\nI cannot understand from the issue report.","Same problem. macOS 10.15.6, Xcode 12, cocoapods 1.9.3","somebody help me.. i got same problem while all day.. too. xcode is shit..please give me the solution about this problem."],"labels":["s6:need sample"]},{"title":"Pod trunk push command Failed with Xcode12","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [ ] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n\u2139 Please replace these two lines with what you did.  \r\ne.g. Run `pod install`\r\nRun 'pod trunk push MyCocoaPodProject.podspec --verbose'\r\n\r\n## What did you expect to happen?\r\nupdate my pod correctly.\r\n\r\n\r\n\u2139 Please replace these two lines with what you expected to happen.  \r\ne.g. Install all pod dependencies correctly.\r\nUpdate my pod correctly.\r\n\r\n## What happened instead?\r\nUpdate failed with error message.\r\n\r\n    Ld \/Users\/jinwon\/Library\/Developer\/Xcode\/DerivedData\/App-cbmpwldthekvhagivcbaijqgcvci\/Build\/Intermediates.noindex\/App.build\/Release-iphonesimulator\/App.build\/Objects-normal\/arm64\/Binary\/App normal arm64 (in target 'App' from project 'App')\r\n        cd \/var\/folders\/fq\/g3bnj1n90pnfcd8x0w61t2rr0000gn\/T\/CocoaPods-Lint-20200917-13791-t0aisw-AdBrixRemasteredPreview\r\n        \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/clang -target arm64-apple-ios9.0-simulator -isysroot \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/iPhoneSimulator.platform\/Developer\/SDKs\/iPhoneSimulator14.0.sdk -L\/Users\/jinwon\/Library\/Developer\/Xcode\/DerivedData\/App-cbmpwldthekvhagivcbaijqgcvci\/Build\/Products\/Release-iphonesimulator -F\/Users\/jinwon\/Library\/Developer\/Xcode\/DerivedData\/App-cbmpwldthekvhagivcbaijqgcvci\/Build\/Products\/Release-iphonesimulator -F\/var\/folders\/fq\/g3bnj1n90pnfcd8x0w61t2rr0000gn\/T\/CocoaPods-Lint-20200917-13791-t0aisw-AdBrixRemasteredPreview\/Pods\/AdBrixRemasteredPreview -filelist \/Users\/jinwon\/Library\/Developer\/Xcode\/DerivedData\/App-cbmpwldthekvhagivcbaijqgcvci\/Build\/Intermediates.noindex\/App.build\/Release-iphonesimulator\/App.build\/Objects-normal\/arm64\/App.LinkFileList -Xlinker -rpath -Xlinker @executable_path\/Frameworks -Xlinker -rpath -Xlinker @loader_path\/Frameworks -Xlinker -rpath -Xlinker @executable_path\/Frameworks -dead_strip -Xlinker -object_path_lto -Xlinker \/Users\/jinwon\/Library\/Developer\/Xcode\/DerivedData\/App-cbmpwldthekvhagivcbaijqgcvci\/Build\/Intermediates.noindex\/App.build\/Release-iphonesimulator\/App.build\/Objects-normal\/arm64\/App_lto.o -Xlinker -objc_abi_version -Xlinker 2 -fobjc-arc -fobjc-link-runtime -framework AdBrixRM -Xlinker -sectcreate -Xlinker __TEXT -Xlinker __entitlements -Xlinker \/Users\/jinwon\/Library\/Developer\/Xcode\/DerivedData\/App-cbmpwldthekvhagivcbaijqgcvci\/Build\/Intermediates.noindex\/App.build\/Release-iphonesimulator\/App.build\/App.app-Simulated.xcent -framework Foundation -framework Pods_App -Xlinker -dependency_info -Xlinker \/Users\/jinwon\/Library\/Developer\/Xcode\/DerivedData\/App-cbmpwldthekvhagivcbaijqgcvci\/Build\/Intermediates.noindex\/App.build\/Release-iphonesimulator\/App.build\/Objects-normal\/arm64\/App_dependency_info.dat -o \/Users\/jinwon\/Library\/Developer\/Xcode\/DerivedData\/App-cbmpwldthekvhagivcbaijqgcvci\/Build\/Intermediates.noindex\/App.build\/Release-iphonesimulator\/App.build\/Objects-normal\/arm64\/Binary\/App\r\n    ld: building for iOS Simulator, but linking in dylib built for iOS, file '\/var\/folders\/fq\/g3bnj1n90pnfcd8x0w61t2rr0000gn\/T\/CocoaPods-Lint-20200917-13791-t0aisw-AdBrixRemasteredPreview\/Pods\/AdBrixRemasteredPreview\/AdBrixRM.framework\/AdBrixRM' for architecture arm64\r\n    clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n    \r\n    ** BUILD FAILED **\r\n    \r\n    \r\n    The following build commands failed:\r\n    \tLd \/Users\/jinwon\/Library\/Developer\/Xcode\/DerivedData\/App-cbmpwldthekvhagivcbaijqgcvci\/Build\/Intermediates.noindex\/App.build\/Release-iphonesimulator\/App.build\/Objects-normal\/arm64\/Binary\/App normal arm64\r\n    (1 failure)\r\n   Testing with `xcodebuild`. \r\n -> AdBrixRemasteredPreview (1.6.5210)\r\n    - ERROR | [iOS] xcodebuild: Returned an unsuccessful exit code.\r\n    - NOTE  | xcodebuild:  note: Using new build system\r\n    - NOTE  | xcodebuild:  note: Building targets in parallel\r\n    - NOTE  | xcodebuild:  note: Using codesigning identity override: -\r\n    - NOTE  | [iOS] xcodebuild:  note: Planning build\r\n    - NOTE  | [iOS] xcodebuild:  note: Constructing build description\r\n    - NOTE  | [iOS] xcodebuild:  warning: Skipping code signing because the target does not have an Info.plist file and one is not being generated automatically. (in target 'App' from project 'App')\r\n    - NOTE  | [iOS] xcodebuild:  clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n\r\n[!] The spec did not pass validation, due to 1 error.\r\n\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-trunk-1.5.0\/lib\/pod\/command\/trunk\/push.rb:138:in `validate_podspec'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-trunk-1.5.0\/lib\/pod\/command\/trunk\/push.rb:72:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/claide-1.0.3\/lib\/claide\/command.rb:334:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.9.3\/lib\/cocoapods\/command.rb:52:in `run'\r\n\/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.9.3\/bin\/pod:55:in `<top (required)>'\r\n\/usr\/local\/bin\/pod:23:in `load'\r\n\/usr\/local\/bin\/pod:23:in `<main>'\r\n\r\n\r\n\u2139 Please replace these two lines with of what happened instead.  \r\ne.g. Pod A is missing the subspec B for target C.\r\n\r\n## CocoaPods Environment\r\n\r\n\u2139 Please replace these two lines with the output of `pod env`.\r\ne.g. via `pod env | pbcopy`\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.9.3\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.15.6 (19G2021)\r\n       Xcode : 12.0 (12A7209)\r\n         Git : git version 2.24.3 (Apple Git-128)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\n\u2139 Please link to a project we can download that reproduces the issue.\r\nYou can delete this section if your issue is unrelated to build problems,\r\ni.e. it's only an issue with CocoaPods the tool.\r\n","comments":["I'm also experiencing the same issue. Minor difference in the error message `ld: building for iOS Simulator, but linking in object file built for iOS`, but the same problem.","A few others have experienced the same error in a different context.\r\nhttps:\/\/developer.apple.com\/forums\/thread\/657913\r\nhttps:\/\/stackoverflow.com\/questions\/63607158\/xcode-12-building-for-ios-simulator-but-linking-in-object-file-built-for-ios\r\n\r\nIt seems that adding `arm64` to the `Excluded Architectures` build setting solves this problem.\r\nI presume the reason we are seeing this issue for cocoapods validation is because the dummy app used for validation is simply building for all architectures?","Maybe we have the same issue, If you pass `--no-clean` to pod lib lint at the end of the log you have the path for the dummy app:\r\n\r\n```\r\nPods workspace available at `\/var\/folders\/_0\/01g2rzqs7_3821295d6mytk40000gp\/T\/CocoaPods-Lint-20200917-73858-1bibbaj-SDK\/App.xcworkspace` for inspection.\r\n```\r\n\r\nI tried to build `App.xcworkspace` and the build error is:\r\n\r\n```\r\nBundle identifier is missing. App doesn't have a bundle identifier. Add a value for PRODUCT_BUNDLE_IDENTIFIER in the build settings editor.\r\n```\r\n\r\n","@mike-igaw I found a solution and managed to push my pod to trunk.\r\n\r\nMy understanding of this issue is that the cocoapods validation step is trying to build a dummy Xcode project for all architecture types. In Xcode 12, Apple introduced support for Apple Silicon and it uses `arm64` for the simulator. For iOS `x86_64` is used for the simulator.\r\nMy pod does not yet support Apple Silicon and I explicitly do not bundle an `arm64` architecture slice for the simulator in my binary. Therefore when cocoapods was performing its validation and running an xcodebuild for all architectures, it failed when building for `arm64` simulator architecture.\r\n\r\nThe solution is to explicitly exclude the `arm64` architecture slice for the simulator by adding the following to the podspec.\r\n```\r\ns.pod_target_xcconfig = {\r\n    'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64'\r\n  }\r\n  s.user_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64' }\r\n```\r\n\r\nThis will modify the pod and user build settings to exclude the `arm64` architecture for the simulator. Most users will have `Build For Active Architectures Only` set to `YES`, so they won't see this. But if they don't this will prevent a build failure.\r\n\r\nThe long term solution is to use an `XCFramework` binary to distribute your pod because it will be able to bundle all architecture slices in the one binary.","> @mike-igaw I found a solution and managed to push my pod to trunk.\r\n> \r\n> My understanding of this issue is that the cocoapods validation step is trying to build a dummy Xcode project for all architecture types. In Xcode 12, Apple introduced support for Apple Silicon and it uses `arm64` for the simulator. For iOS `x86_64` is used for the simulator.\r\n> My pod does not yet support Apple Silicon and I explicitly do not bundle an `arm64` architecture slice for the simulator in my binary. Therefore when cocoapods was performing its validation and running an xcodebuild for all architectures, it failed when building for `arm64` simulator architecture.\r\n> \r\n> The solution is to explicitly exclude the `arm64` architecture slice for the simulator by adding the following to the podspec.\r\n> \r\n> ```\r\n> s.pod_target_xcconfig = {\r\n>     'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64'\r\n>   }\r\n>   s.user_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64' }\r\n> ```\r\n> \r\n> This will modify the pod and user build settings to exclude the `arm64` architecture for the simulator. Most users will have `Build For Active Architectures Only` set to `YES`, so they won't see this. But if they don't this will prevent a build failure.\r\n> \r\n> The long term solution is to use an `XCFramework` binary to distribute your pod because it will be able to bundle all architecture slices in the one binary.\r\n\r\nExcluding the simulator in the pod spec file has also allowed me to push to the trunk. Thx for the solution! ","> @mike-igaw I found a solution and managed to push my pod to trunk.\r\n> \r\n> My understanding of this issue is that the cocoapods validation step is trying to build a dummy Xcode project for all architecture types. In Xcode 12, Apple introduced support for Apple Silicon and it uses `arm64` for the simulator. For iOS `x86_64` is used for the simulator.\r\n> My pod does not yet support Apple Silicon and I explicitly do not bundle an `arm64` architecture slice for the simulator in my binary. Therefore when cocoapods was performing its validation and running an xcodebuild for all architectures, it failed when building for `arm64` simulator architecture.\r\n> \r\n> The solution is to explicitly exclude the `arm64` architecture slice for the simulator by adding the following to the podspec.\r\n> \r\n> ```\r\n> s.pod_target_xcconfig = {\r\n>     'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64'\r\n>   }\r\n>   s.user_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64' }\r\n> ```\r\n> \r\n> This will modify the pod and user build settings to exclude the `arm64` architecture for the simulator. Most users will have `Build For Active Architectures Only` set to `YES`, so they won't see this. But if they don't this will prevent a build failure.\r\n> \r\n> The long term solution is to use an `XCFramework` binary to distribute your pod because it will be able to bundle all architecture slices in the one binary.\r\n\r\nThis worked for me as well!. Thanks a lot!","> @mike-igaw I found a solution and managed to push my pod to trunk.\r\n> \r\n> My understanding of this issue is that the cocoapods validation step is trying to build a dummy Xcode project for all architecture types. In Xcode 12, Apple introduced support for Apple Silicon and it uses `arm64` for the simulator. For iOS `x86_64` is used for the simulator.\r\n> My pod does not yet support Apple Silicon and I explicitly do not bundle an `arm64` architecture slice for the simulator in my binary. Therefore when cocoapods was performing its validation and running an xcodebuild for all architectures, it failed when building for `arm64` simulator architecture.\r\n> \r\n> The solution is to explicitly exclude the `arm64` architecture slice for the simulator by adding the following to the podspec.\r\n> \r\n> ```\r\n> s.pod_target_xcconfig = {\r\n>     'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64'\r\n>   }\r\n>   s.user_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64' }\r\n> ```\r\n> \r\n> This will modify the pod and user build settings to exclude the `arm64` architecture for the simulator. Most users will have `Build For Active Architectures Only` set to `YES`, so they won't see this. But if they don't this will prevent a build failure.\r\n> \r\n> The long term solution is to use an `XCFramework` binary to distribute your pod because it will be able to bundle all architecture slices in the one binary.\r\n\r\nA lifesaver! thanks very much. The only way to get fat-frameworks pushed without reaching for --skip-import-validation ","What about deal with dependencies?  If you have them in your Podspec?","> --skip-import-validation\r\n\r\n\r\n\r\n> > @mike-igaw I found a solution and managed to push my pod to trunk.\r\n> > My understanding of this issue is that the cocoapods validation step is trying to build a dummy Xcode project for all architecture types. In Xcode 12, Apple introduced support for Apple Silicon and it uses `arm64` for the simulator. For iOS `x86_64` is used for the simulator.\r\n> > My pod does not yet support Apple Silicon and I explicitly do not bundle an `arm64` architecture slice for the simulator in my binary. Therefore when cocoapods was performing its validation and running an xcodebuild for all architectures, it failed when building for `arm64` simulator architecture.\r\n> > The solution is to explicitly exclude the `arm64` architecture slice for the simulator by adding the following to the podspec.\r\n> > ```\r\n> > s.pod_target_xcconfig = {\r\n> >     'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64'\r\n> >   }\r\n> >   s.user_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64' }\r\n> > ```\r\n> > \r\n> > \r\n> > This will modify the pod and user build settings to exclude the `arm64` architecture for the simulator. Most users will have `Build For Active Architectures Only` set to `YES`, so they won't see this. But if they don't this will prevent a build failure.\r\n> > The long term solution is to use an `XCFramework` binary to distribute your pod because it will be able to bundle all architecture slices in the one binary.\r\n> \r\n> A lifesaver! thanks very much. The only way to get fat-frameworks pushed without reaching for --skip-import-validation\r\n\r\nThanks, --skip-import-validation can also work.","Are all the reports here based on pods that are pre-built binaries or do they include sources too?","@dnkoutso My pod is a pre-built binary. ","So my feeling is that pre-built pods that do not include `arm64` architecture will not work for apps that consume them _unless_ the apps themselves add `EXCLUDED_ARCHS` to exclude arm64 for simulator.\r\n\r\nI generally strongly discourage using `s.user_target_xcconfig` and has been there for avoiding a breaking change as it changes the users project. It kinda make sense to add it though because a pod author is signaling that \"my pre-built pod does not support this architecture\".\r\n\r\n","That's my thinking on the matter too @dnkoutso. I dislike using `s.user_target_xcconfig` but it allows me to explicitly say that \"this pod does not support this architecture\". This situation should hasten the move to XCFramework.","> > @mike-igaw I found a solution and managed to push my pod to trunk.\r\n> > My understanding of this issue is that the cocoapods validation step is trying to build a dummy Xcode project for all architecture types. In Xcode 12, Apple introduced support for Apple Silicon and it uses `arm64` for the simulator. For iOS `x86_64` is used for the simulator.\r\n> > My pod does not yet support Apple Silicon and I explicitly do not bundle an `arm64` architecture slice for the simulator in my binary. Therefore when cocoapods was performing its validation and running an xcodebuild for all architectures, it failed when building for `arm64` simulator architecture.\r\n> > The solution is to explicitly exclude the `arm64` architecture slice for the simulator by adding the following to the podspec.\r\n> > ```\r\n> > s.pod_target_xcconfig = {\r\n> >     'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64'\r\n> >   }\r\n> >   s.user_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64' }\r\n> > ```\r\n> > \r\n> > \r\n> > This will modify the pod and user build settings to exclude the `arm64` architecture for the simulator. Most users will have `Build For Active Architectures Only` set to `YES`, so they won't see this. But if they don't this will prevent a build failure.\r\n> > The long term solution is to use an `XCFramework` binary to distribute your pod because it will be able to bundle all architecture slices in the one binary.\r\n> \r\n> This worked for me as well!. Thanks a lot!\r\n\r\n","> @mike-igaw I found a solution and managed to push my pod to trunk.\r\n> \r\n> My understanding of this issue is that the cocoapods validation step is trying to build a dummy Xcode project for all architecture types. In Xcode 12, Apple introduced support for Apple Silicon and it uses `arm64` for the simulator. For iOS `x86_64` is used for the simulator.\r\n> My pod does not yet support Apple Silicon and I explicitly do not bundle an `arm64` architecture slice for the simulator in my binary. Therefore when cocoapods was performing its validation and running an xcodebuild for all architectures, it failed when building for `arm64` simulator architecture.\r\n> \r\n> The solution is to explicitly exclude the `arm64` architecture slice for the simulator by adding the following to the podspec.\r\n> \r\n> ```\r\n> s.pod_target_xcconfig = {\r\n>     'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64'\r\n>   }\r\n>   s.user_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64' }\r\n> ```\r\n> \r\n> This will modify the pod and user build settings to exclude the `arm64` architecture for the simulator. Most users will have `Build For Active Architectures Only` set to `YES`, so they won't see this. But if they don't this will prevent a build failure.\r\n> \r\n> The long term solution is to use an `XCFramework` binary to distribute your pod because it will be able to bundle all architecture slices in the one binary.\r\n\r\nIt worked! I had to downgrade before and now i can upgrade again \ud83d\ude01  Thanks a lot!","Would a better solution instead of using `user_target_xcconfig` be to have a flag\/ setting that allows us to specify the architectures supported by the dummy app that is spun up on `pod trunk push`?","I've not been able to get builds to work with any of the above suggestions, we publish privately and have many dependencies both between internal pods and public. However I have resolved by modifying `validation.rb` to inject exclude architecture settings to both the App project and Pods project level build settings. I check which architecture the script is running on and exclude either 'arm64' or 'x86_64' depending on whether on x86_64 or not so should be compatible with arm based macOS hardware. Will hopefully submit a PR later today for consideration.","In my case, this works\r\n\r\n```\r\n  s.tvos.pod_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=appletvsimulator*]' => 'arm64', }\r\n  s.tvos.user_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=appletvsimulator*]' => 'arm64' }\r\n```\r\nNote the specification for *tvos* spec with *appletvsimulator* sdk.\r\n\r\nI must confess that I don't understand why I do not need to do the same with `ios` spec. My pod also supports iOS. If anyone knows? \ud83d\ude4f\ud83c\udffb","Hello!\r\nI've been having trouble linting a private spec that has `s.user_target_xcconfig = { 'EXCLUDED_ARCHS[sdk=iphonesimulator*]' => 'arm64' }` defined. I've tracked down the issue to a dependency of this spec that has a different definition of EXCLUDED_ARCHS: `\"user_target_xcconfig\": { \"EXCLUDED_ARCHS[sdk=iphonesimulator*]\": \"i386\" }.\r\n\r\nI get the the warning `Can't merge user_target_xcconfig for pod targets` and the linting fails. I ran the `pod lib lint` with the `--no-clean` option and found that when this warning appears, cocoapods ends up not settings the EXCLUDED_ARCHS configuration to any value. Is there a workaround for this?","Hi, Am new to react native expo projects, I tried to run my project in Macbook M1 chip and am facing the same issue and I don't know how to fix it. \r\n`\/ios\/Pods\/GoogleIDFASupport\/Libraries\/libAdIdAccessLibrary.a' for architecture arm64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n` i need more details about podspec how to find it in my project and how I can edit it. "],"labels":["s7:workaround available"]},{"title":"Binary Dependency issue with Xcode 12 GM","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n\u2139 Please replace these two lines with what you did.  \r\nRun `pod install`\r\n\r\n## What did you expect to happen?\r\n\r\n Install all pod dependencies correctly.\r\n\r\n## What happened instead?\r\n\r\nCocoapods installed binary dependencies but they are unusable from Xcode 12 GM\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.9.3\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-darwin19]\r\n    RubyGems : 3.0.6\r\n        Host : Mac OS X 10.15.5 (19F101)\r\n       Xcode : 12.0 (12A7209)\r\n         Git : git version 2.24.3 (Apple Git-128)\r\nRuby lib dir : \/Users\/tmpz\/.rvm\/rubies\/ruby-2.6.3\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/tmpz\/.rvm\/gems\/ruby-2.6.3\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\nplatform :ios, '13.0'\r\n\r\nworkspace 'GGTemplates.xcworkspace'\r\nproject 'GGTemplates'\r\nproject 'GGEditor\/GGEditor'\r\n\r\ndef firebase\r\n  # https:\/\/firebase.google.com\/\r\n  pod 'Firebase\/Core'\r\n  pod 'Firebase\/Crashlytics'\r\n  pod 'Firebase\/RemoteConfig'\r\n  pod 'Firebase\/Messaging'\r\nend\r\n\r\ndef facebook\r\n  # https:\/\/github.com\/facebook\/facebook-ios-sdk\r\n  pod 'FBSDKCoreKit'\r\nend\r\n\r\ndef tagged\r\n  # https:\/\/github.com\/pointfreeco\/swift-tagged\r\n  pod 'Tagged', '~> 0.5'\r\nend\r\n\r\ndef viewer\r\n  # https:\/\/github.com\/DaveWoodCom\/XCGLogger\r\n  pod 'XCGLogger', '~> 7.0.0'\r\n  pod 'XCGLogger\/UserInfoHelpers', '~> 7.0.0'\r\n  \r\n  firebase\r\n  facebook\r\n\r\n  # https:\/\/cocoapods.org\/pods\/IQKeyboardManagerSwift\r\n  pod 'IQKeyboardManagerSwift'\r\n\r\n  # https:\/\/github.com\/JonasGessner\/JGProgressHUD\r\n  pod 'JGProgressHUD'\r\n  \r\n  # https:\/\/github.com\/mac-cain13\/R.swift\r\n  pod 'R.swift'\r\n\r\n  # https:\/\/github.com\/SDWebImage\/SDWebImage\r\n  pod \"SDWebImage\"\r\n\r\n  # https:\/\/github.com\/Alamofire\/Alamofire\r\n  pod \"Alamofire\", '~> 5.0.0-rc.3'\r\n\r\n  # https:\/\/github.com\/davidstump\/SwiftPhoenixClient\r\n  pod \"SwiftPhoenixClient\"\r\n\r\n  # https:\/\/github.com\/CombineCommunity\/CombineExt\r\n  pod \"CombineExt\"\r\n\r\n  # https:\/\/developers.giphy.com\/docs\/sdk\/#ios\r\n  pod \"Giphy\"\r\n\r\n  pod 'LTMorphingLabel'\r\n\r\n  tagged\r\n\r\nend\r\n\r\ndef templates\r\nend\r\n\r\ndef shared\r\n  pod 'SwiftLint'\r\n  # https:\/\/instabug.com\/\r\n  pod 'Instabug'\r\nend\r\n\r\ndef editor\r\n  pod 'SQLite.swift', '~> 0.12.0'\r\n  tagged\r\nend\r\n\r\ntarget 'GGTemplates' do\r\n  project 'GGTemplates'\r\n  use_frameworks!\r\n  viewer\r\n  templates\r\n  editor\r\n  shared\r\nend\r\n\r\ntarget 'GGTemplatesTests' do\r\n  project 'GGTemplates'\r\n  use_frameworks!\r\n  viewer\r\n  templates\r\n  editor\r\n  shared\r\nend\r\n\r\ntarget 'GGTemplatesUITests' do\r\n  project 'GGTemplates'\r\n  inherit! :search_paths\r\nend\r\n\r\ntarget 'GGEditor' do\r\n  project 'GGEditor\/GGEditor'\r\n  use_frameworks!\r\n  editor\r\nend\r\n\r\ntarget 'GGEditorTests' do\r\n  project 'GGEditor\/GGEditor'\r\n  use_frameworks!\r\n  editor\r\nend\r\n```\r\n\r\n\r\n## Project that demonstrates the issue\r\n\r\nSee https:\/\/github.com\/Giphy\/giphy-ios-sdk-ui-example\/issues\/96","comments":["What does \"unusable\" mean?\r\n\r\nEdit:\r\n\r\nSorry, I meant to say we could use some more information about what \"unusable\" means, as in are those binary frameworks not importable?\r\n\r\nI haven't downloaded Xcode 12 GM but once I do I can check myself! Thanks for the great report and sample app.","@dnkoutso \r\n\r\nResults may vary but for us with deployment target >= 13.4 this is the outcome\r\n\r\n```\r\nUndefined symbols for architecture x86_64:\r\n  \"_swiftoverride_class_getSuperclass(swift::TargetMetadata<swift::InProcess> const*)\", referenced from:\r\n      swift::swift50override_conformsToProtocol(swift::TargetMetadata<swift::InProcess> const*, swift::TargetProtocolDescriptor<swift::InProcess> const*, swift::TargetWitnessTable<swift::InProcess> const* (*)(swift::TargetMetadata<swift::InProcess> const*, swift::TargetProtocolDescriptor<swift::InProcess> const*)) in libswiftCompatibility50.a(ProtocolConformance.cpp.o)\r\n  \"swift::swift51override_conformsToSwiftProtocol(swift::TargetMetadata<swift::InProcess> const*, swift::TargetProtocolDescriptor<swift::InProcess> const*, llvm::StringRef, swift::TargetProtocolConformanceDescriptor<swift::InProcess> const* (*)(swift::TargetMetadata<swift::InProcess> const*, swift::TargetProtocolDescriptor<swift::InProcess> const*, llvm::StringRef))\", referenced from:\r\n      _Swift50Overrides in libswiftCompatibility50.a(Overrides.cpp.o)\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\nLowering deployment target seems to work. Manually download the binaries or downloading the via Carthage and dragging and dropping them instead of using Cocoapods, also seems to work without changing the deployment target. ","Interesting, thank you. I am not on a place with fast internet today to download Xcode 12 GM so I will be able to do so tomorrow.","Can certainly reproduce with Xcode 12 GM, but so far no leads on as to why...","@dnkoutso - Do you have any solution for this?\r\n","have you tried to add an empty swift file on your project?\r\nWhen you add an empty swift file, XCode will ask you \"Create Bridging Header\".\r\n\r\nI through this method successfully\r\n\r\nIt will include to the Header Search Path on your build settings:\r\n\r\n`$(TOOLCHAIN_DIR)\/usr\/lib\/swift\/$(PLATFORM_NAME)\r\n$(TOOLCHAIN_DIR)\/usr\/lib\/swift-5.0\/$(PLATFORM_NAME)`","Any solutions for this?"],"labels":["t2:defect","s2:confirmed","help wanted"]},{"title":"Add command for validating the cache","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md). \ud83c\udf08\r\n\r\n# Feature Request\r\n\r\n## Motivation\r\n\r\nOnce #10018 is released, cache corruption should get a lot less common, but different versions of CocoaPods can still corrupt the cache if run concurrently. That could be fixed with #10035, but even then, an older version of CocoaPods not containing that fix could corrupt the cache.\r\n\r\nWe are currently trialling #10018 in our environment. We've updated all major branches in all major projects, but there are still branches and projects using old versions of CocoaPods. Since those run much less frequently, the risk of cache corruption is greatly reduced, but still present.\r\n\r\nCache corruption normally manifests itself as a missing file error in the logs, which is easy to diagnose as corrupted cache, but sometimes it causes obscure build failures that are much harder to diagnose. It would be very helpful if there was a command to validate that the cache is in a good state, so that cache corruption can be quickly ruled out or confirmed.\r\n\r\nAlso, preemptively running cache validation before the build would make the risk of using a broken cache extremely low.\r\n\r\n## Suggestion\r\n\r\nI would suggest adding the following command:\r\n\r\n    pod cache validate\r\n\r\nThe most basic use case would be to combine it with `pod cache clean --all`:\r\n\r\n    pod cache validate || pod cache clean --all\r\n\r\nAlthough, it shouldn't be too difficult to repair the cache, so having the following would be very convenient:\r\n\r\n    pod cache validate || pod cache repair\r\n\r\nIdeally that could be combined into:\r\n\r\n    pod cache validate --repair # or maybe --fix\r\n\r\nUltimately, if the cache validation is performant enough, it could be part of `pod install`, so that there is no risk of using a corrupted cache.\r\n\r\n## Questions\r\n\r\nDo we have any checksums or file lists that could be used to validate the cache? Otherwise, we could calculate checksums for validation purposes while the files are still in the temp directory and not yet copied to the cache.\r\n\r\nI suppose that this might also help in allowing multiple versions to use the same cache, as the checksums could potentially be used to validate that each version uses the same cache format. #10035 was just the easiest and safest way to do it, but not having duplicate caches for each CocoaPods version ever used on the system would be desirable.","comments":["@dnkoutso Thank you for adding labels to my issues and pull requests. :)\r\n\r\nI've been experimenting with generating checksums for directories in the cache. Next step is to integrate it in CocoaPods. I still haven't received any feedback on #10035, so I'm not sure whether to build off of that or try to make them independent changes.\r\n\r\nThe thing is that the checksums could be used to validate that different versions of CocoaPods have the same cache format. So that could completely change the cache versioning strategy and make #10035 at least partially redundant. I suppose we could keep the directory structure of #10035 and symlink (or hard link) to compatible caches, so that we don't use unnecessary space, but still maintain a logical structure that is easy to follow. We just need to make sure that all versions lock on the same files. I would need to investigate how `flock` works with links.\r\n\r\nWe are currently trialing #10018 in our environment. Not all branches and projects are using it, but all the main ones do. So there is still a risk of cache corruption and unfortunately, we still have failing builds occasionally. Being able to quickly validate the cache, would be invaluable, as we are wasting a lot of time trying to manually diagnose cache integrity. The feeling is that #10018 is helping and that cache corruption isn't much of an issue anymore. The problem now is proving that cache corruption is in fact not an issue anymore and that's what I am trying to solve.\r\n\r\nThe good thing about using the current strategy of deleting the whole cache when switching versions is that cache corruption could be automatically fixed. Unfortunately it is also the only remaining risk of cache corruption after all versions contain #10018, not to mention the inefficiency of clearing the cache every time a different version is used.\r\n\r\nAny feedback and guidance is welcome. I'll probably try to make it independent from #10035 if possible. It's a big enough change without worrying about different CocoaPods versions.","sorry @codiophile i havent had time to read and process the feedback here. I still need a few more days to catch up.","No worries @dnkoutso, I submitted a pull request (#10064) with my integrity checking logic. Planning to make some further improvements, but happy to receive early feedback."],"labels":["t1:enhancement"]},{"title":"RFC - Support for CocoaPods registries","body":"# Support for CocoaPods registries\r\n* Authors: @eyalbe4, @yahavi\r\n* Date: 20 August 2020\r\n* Related issue: #9690\r\n* Related pull requests: https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/9959, https:\/\/github.com\/CocoaPods\/Core\/pull\/644\r\n\r\n## Motivation\r\nHaving a nearby caching layer in front of a public packages repository, can greatly speed up download time. In many cases, this caching layer is implemented by a registry, which can be installed nearby the developers (the consumers of the packages). We would like to allow the CocoaPods client to support registries, such as JFrog Artifactory, which can proxy Git or other remote repositories.\r\n\r\n## GitHub vs. Registry\r\n### General \r\nCocoaPods currently clones the specs repository from GitHub. \r\nIt then reads each spec, extracts the source GitHub URL and clones the source.\r\nWhen working with a registry, all HTTP requests are sent to the registry, instead of GitHub. The initial request to the registry, downloads a tarball, which includes the spec repository. CocoaPods then extracts the tarball, and downloads each source from the registry as a tarball.\r\n\r\n### Registry layout\r\nRegistries are free to determine the layout of the specs and sources. CocoaPods should not care about the layout. All that CocoaPods cares about is that the URL of the local spec repository points to the specs tarball.\r\nAs for the source URLs inside the downloaded spec, it is the responsibility of the registry to replace inside the spec file the GitHub URLs with the registry URLs pointing to the download path in the registry itself (JFrog Artifactory already supports this). CocoaPods is completely agnostic to where the sources are downloaded from. This keeps the CocoaPods implementation simple, while allowing registry vendors to determine their prefered layout.\r\n\r\n## Design\r\nCurrently the code includes two repository types: `Git` and `File system`. We'd like to introduce an additional repository type - `Registry`.\r\nThe new repository type implementation uses a new file named `.registry-rc.yml` located in the root of the repository: `$USER_HOME\/.cocoapods\/repos\/repo-name\/.registry-rc.yml`.\r\nThe registry URL is stored inside the `.registry-rc.yml` file, as the `registry_url` key. For example:\r\n```yml\r\n---\r\nregistry_url: https:\/\/ecosysjfrog.jfrog.io\/artifactory\/api\/pods\/cocoapods-local\/index\/fetchIndex\r\n```\r\nThe URL leads to an archive file.\r\n\r\n## Backward compatibility\r\nThe new functionality is fully backward compatible and does not require any migration process.\r\n\r\n## Implementation and Usage\r\n### Creating repositories\r\nTo create a registry type repository, you should add the new `--registry` flag to the `pod repo add` command:\r\n```sh\r\n# Syntax:\r\npod repo add NAME URL --registry\r\n\r\n# Example:\r\npod repo add art-repo https:\/\/ecosysjfrog.jfrog.io\/artifactory\/api\/pods\/cocoapods-local\/index\/fetchIndex --registry\r\n```\r\nThis command downloads the repository archive and extracts it under the `repos` dir. It also creates the `.registry-rc.yml` file.\r\nThe code checks if the `--registry` flag exists and decides whether to clone a Git repository or download and extract the registry repository:\r\n```ruby\r\nif @registry\r\n# --registry flag is set\r\n    download_from_registry\r\nelse\r\n# --registry flag is not set - checkout as usual\r\n    clone_repo\r\n    checkout_branch\r\n    ...\r\nend\r\n```\r\nDownloading the repository is done using Cococpods downloader and cURL:\r\n```ruby\r\n# lib\/cocoapods\/command\/repo.rb:\r\nextend Executable\r\nexecutable :git\r\n\r\nextend Executable\r\nexecutable :curl\r\n\r\n# lib\/cocoapods\/command\/repo\/add.rb:\r\ndef download_from_registry\r\n    changes = if @progress\r\n                { :verbose => true }\r\n            else\r\n                {}\r\n            end\r\n    config.with_changes(changes) do\r\n    repo_dir = config.repos_dir.join(@name)\r\n    options = {\r\n        :http => @url,\r\n        :type => 'tgz',\r\n        :flatten => true,\r\n    }\r\n    downloader = Downloader.for_target(repo_dir, options)\r\n    downloader.download\r\n    create_registry_yml(repo_dir)\r\n    end\r\nend\r\n```\r\n\r\n### Updating repositories\r\nRegistry repositories are updatetable. Updates replaces the current repository content with the new fresh repository content:\r\n```ruby\r\ndef update_registry_repo\r\n    options = {\r\n        :http => @url,\r\n        :type => 'tgz',\r\n        :flatten => true,\r\n    }\r\n    downloader = Downloader.for_target(@repo, options)\r\n    downloader.download\r\nend\r\n```\r\n\r\n### Reading the registry URL\r\nHere's the code that reads the registry URL from the `.registry-rc.yml` file.\r\n```ruby\r\ndef url\r\n  @url ||= begin\r\n    remote = repo_git(%w(config --get remote.origin.url))\r\n    if !remote.empty?\r\n      remote\r\n    elsif (repo + '.git').exist?\r\n      \"file:\/\/#{repo}\/.git\"\r\n    elsif registry?\r\n      YAML.load(File.read(repo.join('.registry-rc.yml')))['registry_url']\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### Repository types\r\nThe repository type is determined by the content of the root of the repository:\r\n1. **Git** repository type if `.git` exists.\r\n2. **Registry** repository type if `.registry-rc.yml` file exist.\r\n3. **File system** repository type if neither of the above exist.\r\n\r\n```ruby\r\ndef git?\r\n    repo.join('.git').exist? && !repo_git(%w(rev-parse HEAD)).empty?\r\nend\r\n\r\ndef registry?\r\n    repo.join('.registry-rc.yml').exist?\r\nend\r\n```\r\n\r\n## Tests\r\nSince registries include archives, the tests don't really need a real registry. All they need is an http source for the archive. To simplify the tests, GitHub is therefore used to test the registry support functionality.\r\nThe registry tests download a registry repository from the following URL:\r\n```\r\nhttps:\/\/github.com\/CocoaPods\/cocoapods-test-specs\/archive\/master.zip\r\n```","comments":["@yahavi thanks for doing this! Now that 1.10 is wrapping up I will hopefully have time to take a look for 1.11 and this RFC.","@yahavi \r\n\r\n> This command downloads the repository archive and extracts it under the repos dir. It also creates the .registry-rc.yml file.\r\nThe code checks if the --registry flag exists and decides whether to clone a Git repository or download and extract the registry repository:\r\n\r\nDo we need a special `--registry` flag? Can we not assume all `https:\/\/` are treated as registry repos except the CDN URL?","Are you planning on having a separate class called `registry_source.rb` perhaps?","@dnkoutso I don't think we can assume that all HTTPS URLs are registry -  \r\n\r\n* CDN2 or the recent backup URLs wouldn't have been possible if that's the case\r\n* Sonatype has their registries using the HTTPS CDN protocol [via a proxy](https:\/\/help.sonatype.com\/repomanager3\/formats\/cocoapods-repositories)\r\n\r\nI think we should generalize it a bit more:\r\n\r\n1. Define an abstract superclass for `Pod::Source` with a well-defined API that external users such as JFrog can extend (e.g. `#name`, `#pods`, `#versions`, `#specification` and so on).\r\n1. Allow specifying a source class when running the Add command  \r\n(e.g. `pod repo add https:\/\/ecosysjfrog.jfrog.io\/artifactory\/api\/pods\/cocoapods-local\/index\/fetchIndex --class ArtifactorySource \r\n1. Allow adding Podfile source directives with an object instead of an URL  \r\n(e.g. `source ArtifactorySource.new('https:\/\/ecosysjfrog.jfrog.io\/artifactory\/api\/pods\/cocoapods-local\/index\/fetchIndex')`\r\n1. The registry owner will encapsulate their registry functionality in a plugin that will be guaranteed not to break because of a well-defined API.\r\n\r\nThis way the implementation details specific to any one registry such as JFrog won't need to be in the CocoaPods codebase and can be maintained by the registry owners.","Thanks for the feedback @dnkoutso and @igor-makarov.\r\n\r\nI'll let @yahavi reply to the comments about the ```--registry``` and ```registry_source.rb``` suggested changes.\r\n\r\nAs for @igor-makarov's suggestions to generalize and allow registry vendor specific implementations, I think it will be best if after installing CocoaPods, you can use it with all the registries supporting CocoaPods, without the need to install another plugin, for the registry they use. That's the reason why we proposed a very general protocol that the registry vendors can implement. Please let us know what you think. In any case, we will work on adapting the implementation according to your decision.\r\n\r\nThanks","Thanks for the review, @dnkoutso @igor-makarov!\r\n\r\n> Do we need a special `--registry` flag? Can we not assume all `https:\/\/` are treated as registry repos except the CDN URL?\r\n\r\nNo, we can't assume all `https:\/\/` as registry repos. It is not possible to conclude in 100% that the URL does not lead to a source control. Source control systems such as GitHub and others accept `https:\/\/` protocols and they don't have to contain the word `git` in the repo URL. Therefore, we introduce `--registry` flag to indicate that the URL leads to a registry repo.\r\n\r\n> Are you planning on having a separate class called registry_source.rb perhaps?\r\n\r\nI think it would be a bit odd to have `git` and `file system` repository types in `source.rb` and `registry` repository type in `registry_source.rb`. There is also a lot of shared code between `git` and `registry` repository types.","@eyalbe4 @yahavi \r\nLimiting it to zip\/tarballs seems less than ideal.\r\n\r\nAnother suggestion might be to implement your registry using the existing HTTPS protocol used for the CocoaPods CDN.  \r\nThis is how [Sonatype have done it](https:\/\/help.sonatype.com\/repomanager3\/formats\/cocoapods-repositories) and will require zero changes in CocoaPods.\r\n\r\nIn fact, I recommend that you go that route.   \r\nAs the primary developer of the HTTP spec repo protocol\/client\/service, I'll be glad to help you out.","@igor-makarov,\r\n\r\nProviding restricted access to the registry through authentication is a hard requirement, at least for the users of JFrog Artifactory, but I believe it is also very important for other registries. Is this a limitation with the existing CDN implementation?\r\n\r\nAlso, please let us know if you believe that we can enhance the existing PR, to allow supporting different registry implementations.","Access control is done using `netrc`. This is how Sonatype use it.\r\n\r\nMore info:  \r\nhttps:\/\/github.com\/CocoaPods\/Core\/pull\/580#issuecomment-535373357\r\n"],"labels":["t1:enhancement"]},{"title":"Feature Request: potential improvements to pod install times in large projects","body":"\ud83c\udf08\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report \r\n\r\n## What did you do?\r\n\r\nRan `pod install` on a big mono repository project with 100+ local pods and 100k+ files.\r\n\r\n## What did you expect to happen?\r\n\r\nPods would be installed relatively quickly.\r\n\r\n## What happened instead?\r\n\r\nPods installation would take up to 8 minutes even when all remote pods would be cached.\r\n\r\n## CocoaPods Environment\r\n\r\n<details>\r\n  <summary>pod env<\/summary>\r\n  <p>\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.9.3\r\n        Ruby : ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-darwin17]\r\n    RubyGems : 2.6.14\r\n        Host : Mac OS X 10.15.4 (19E224g)\r\n       Xcode : 11.5 (11E608c)\r\n         Git : git version 2.23.0\r\nRuby lib dir : \/Users\/user\/.rvm\/rubies\/ruby-2.4.1\/lib\r\nRepositories : master - git - https:\/\/github.com\/CocoaPods\/Specs.git @ a8823ea555ec54359b3fbdc6efe6cd3b1ae15ff9\r\n\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/user\/.rvm\/gems\/ruby-2.4.1\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\nclaide-plugins          : 0.9.2\r\ncocoapods-amimono       : 0.0.12\r\ncocoapods-deintegrate   : 1.0.4\r\ncocoapods-dependencies  : 1.0.0.beta.1\r\ncocoapods-plugins       : 1.0.0\r\ncocoapods-search        : 1.0.0\r\ncocoapods-stats         : 1.1.0\r\ncocoapods-trunk         : 1.4.1\r\ncocoapods-try           : 1.1.0\r\ncocoapods_debug         : 0.1.0\r\n```\r\n  <\/p>\r\n<\/details>\r\n\r\n## Project that demonstrates the issue\r\n\r\nI have made a somewhat contrived [example](https:\/\/github.com\/biboran\/SlowCocoaPods). It is a CocoaPods project in the `Application` directory with 4 local pods and a huge `ci_scripts` directory. On my machine `pod install` runs in 13 seconds with the `ci_scripts` directory and in 1.5 seconds without the directory.\r\n\r\nThe issue in the example is quite evident. `SharedModels.podspec` and `SharedServices.podspec` search files by the glob pattern. To find the files which satisfy the pattern both pods have to go through the `ci_scripts` directory which takes some time. \r\n\r\n## Background\r\n\r\nOur project has a bunch of `.podspec` files in the root directory for sharing code across other pods that contain code specific to the user stories. As a mono repository, it also has multiple other unrelated Xcode projects, some CI scripts, and a lot of other miscellaneous files. For a long time, such configuration worked just fine and the performance of `pod install` was good but as more and more files got added the performance slowly became miserable.\r\n\r\nUnfortunately, it was not immediately obvious what the problem was. By profiling CocoaPods we found that [read_file_system](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/ef91fa13b2c19fc1e84aa38e19e658e5cf84c212\/lib\/cocoapods\/sandbox\/path_list.rb#L50) was taking about 60% of the `pod install` time.\r\n\r\nWe made a quick-fix by monkey patching `read_file_system`:\r\n\r\n<details>\r\n<summary>quick_fix_read_file_system.rb<\/summary>\r\n<p>\r\n\r\n```ruby\r\nrequire 'find'\r\n\r\n# prepare static cache in pre_install\r\ndef prepare_file_cache\r\n  $all_files = []\r\n  $all_dirs = []\r\n\r\n  repo_root_path = repo_root\r\n  \r\n  # ignore large irrelevant folders\r\n  paths_to_ignore = %w[.git .idea ci_scripts some_other_irrelevant_folder].map { |path| repo_root_path + \"\/#{path}\" }\r\n  root_paths_to_cache = Dir.glob(repo_root_path + \"\/*\").select { |path| File.directory?(path) && (paths_to_ignore.include?(path) == false) }\r\n  root_paths_to_cache.each { |path| \r\n      Find.find(pod_path) do |path|\r\n      (File.directory?(path) ? $all_dirs : $all_files) << path\r\n    end\r\n  }\r\nend\r\n\r\nmodule Pod\r\n  class Sandbox\r\n    class PathList\r\n      def read_file_system\r\n        unless root.exist?\r\n          raise Informative, \"Attempt to read non existent folder `#{root}`.\"\r\n        end\r\n\r\n        root_path_str = root.cleanpath.to_s + File::SEPARATOR\r\n        root_length = root_path_str.length\r\n\r\n        # Attempt to find dirs and files in the static cache\r\n        dirs = ($all_dirs || []).select { |path| path.start_with?(root_path_str) }.map { |path| path.slice(root_length, path.length - root_length) } || []\r\n        files = ($all_files || []).select { |path| path.start_with?(root_path_str) }.map { |path| path.slice(root_length, path.length - root_length) } || []\r\n\r\n        # If none were found resort to reading from disk\r\n        if dirs.empty? and files.empty?\r\n          Find.find(root.to_s) do |path|\r\n            directory = File.directory?(path)\r\n            path = path.slice(root_length, path.length - root_length)\r\n            next if path.nil?\r\n\r\n            (directory ? dirs : files) << path\r\n          end\r\n        end\r\n\r\n        dirs.sort_by!(&:upcase)\r\n        files.sort_by!(&:upcase)\r\n\r\n        @dirs = dirs\r\n        @files = files\r\n        @glob_cache = {}\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n<\/p>\r\n<\/details>\r\n\r\n## Feature Request\r\n\r\nAs far as I understand `read_file_system` is called to cache all relevant files for each `PodTarget`(i.e. `.podspec` file) before any glob expressions are resolved. One solution might be to notify CocoaPods users that their local pods are misconfigured for performance. For example, CocoaPods could output a warning at the end of a \"lengthy\" `pod install`:\r\n\r\n> [!] Local pod SharedModels resolves only 4% of the read files. Consider moving it to a deeper folder.\r\n\r\nAnother solution might be to create a cache for the local pods to prevent redundant fs reads.\r\n\r\nWould such changes benefit CocoaPods users or does it sound to niche? Perhaps there are another ways to illustrate\/fix this performance issue?\r\n","comments":["Yes! This could be a great improvement. We use CocoaPods in a monorepo as well with hundreds of pods. Want to make a PR for it?","Sure, I'll start working on it!","@dnkoutso, how much time does pod install take on your project?","@Usipov 3 or 4 minutes but we also use incremental installation which we built for this specific reason and on average it can take 40-50 seconds instead.","I may have misinterpreted or misread the initial report. I had thought we would be interested in actually improving the performance.\r\n\r\nThe warning is helpful but I think CocoaPods should instead fix its performance issue rather than try to gauge a folder structure teams should have.","That's a bummer. Guess I should've asked explicitly about which feature I should implement. Then I'll start working on the cache.","@biboran I am sorry for the miscommunication from my side. If we can improve performance then that would be best in my opinion"],"labels":["t1:enhancement"]},{"title":"[Windows 10] Unable to add a source with url `https:\/\/cdn.cocoapods.org\/` named `trunk`.","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\nCocoaPods returns \"Unable to add a source with url `https:\/\/cdn.cocoapods.org\/` named `trunk`.\"\r\n\r\n## What did you do?\r\nI ran \"pod install\" in my project directory.\r\n\r\n## What did you expect to happen?\r\nFor the dependencies to install.\r\n\r\n## What happened instead?\r\nIt returned the error in the issue name.\r\n\r\n## CocoaPods Environment\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.9.3\r\n        Ruby : ruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x64-mingw32]\r\n    RubyGems : 3.1.2\r\n        Host : Unable to find an executable (No such file or directory - sw_vers)  ()\r\n       Xcode : -version) ()\r\n         Git : git version 2.22.0.windows.1\r\nRuby lib dir : C:\/Ruby\/lib\r\nRepositories :\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: C:\/Ruby\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '10.0'\r\nrequire_relative '..\/node_modules\/react-native-unimodules\/cocoapods.rb'\r\nrequire_relative '..\/node_modules\/@react-native-community\/cli-platform-ios\/native_modules'\r\n\r\ndef add_flipper_pods!(versions = {})\r\n  versions['Flipper'] ||= '~> 0.33.1'\r\n  versions['DoubleConversion'] ||= '1.1.7'\r\n  versions['Flipper-Folly'] ||= '~> 2.1'\r\n  versions['Flipper-Glog'] ||= '0.3.6'\r\n  versions['Flipper-PeerTalk'] ||= '~> 0.0.4'\r\n  versions['Flipper-RSocket'] ||= '~> 1.0'\r\n\r\n  pod 'FlipperKit', versions['Flipper'], :configuration => 'Debug'\r\n  pod 'FlipperKit\/FlipperKitLayoutPlugin', versions['Flipper'], :configuration => 'Debug'\r\n  pod 'FlipperKit\/SKIOSNetworkPlugin', versions['Flipper'], :configuration => 'Debug'\r\n  pod 'FlipperKit\/FlipperKitUserDefaultsPlugin', versions['Flipper'], :configuration => 'Debug'\r\n  pod 'FlipperKit\/FlipperKitReactPlugin', versions['Flipper'], :configuration => 'Debug'\r\n\r\n  # List all transitive dependencies for FlipperKit pods\r\n  # to avoid them being linked in Release builds\r\n  pod 'Flipper', versions['Flipper'], :configuration => 'Debug'\r\n  pod 'Flipper-DoubleConversion', versions['DoubleConversion'], :configuration => 'Debug'\r\n  pod 'Flipper-Folly', versions['Flipper-Folly'], :configuration => 'Debug'\r\n  pod 'Flipper-Glog', versions['Flipper-Glog'], :configuration => 'Debug'\r\n  pod 'Flipper-PeerTalk', versions['Flipper-PeerTalk'], :configuration => 'Debug'\r\n  pod 'Flipper-RSocket', versions['Flipper-RSocket'], :configuration => 'Debug'\r\n  pod 'FlipperKit\/Core', versions['Flipper'], :configuration => 'Debug'\r\n  pod 'FlipperKit\/CppBridge', versions['Flipper'], :configuration => 'Debug'\r\n  pod 'FlipperKit\/FBCxxFollyDynamicConvert', versions['Flipper'], :configuration => 'Debug'\r\n  pod 'FlipperKit\/FBDefines', versions['Flipper'], :configuration => 'Debug'\r\n  pod 'FlipperKit\/FKPortForwarding', versions['Flipper'], :configuration => 'Debug'\r\n  pod 'FlipperKit\/FlipperKitHighlightOverlay', versions['Flipper'], :configuration => 'Debug'\r\n  pod 'FlipperKit\/FlipperKitLayoutTextSearchable', versions['Flipper'], :configuration => 'Debug'\r\n  pod 'FlipperKit\/FlipperKitNetworkPlugin', versions['Flipper'], :configuration => 'Debug'\r\nend\r\n\r\n# Post Install processing for Flipper\r\ndef flipper_post_install(installer)\r\n  installer.pods_project.targets.each do |target|\r\n    if target.name == 'YogaKit'\r\n      target.build_configurations.each do |config|\r\n        config.build_settings['SWIFT_VERSION'] = '4.1'\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\ntarget 'htmag' do\r\n  # Pods for htmag\r\n  pod 'FBLazyVector', :path => \"..\/node_modules\/react-native\/Libraries\/FBLazyVector\"\r\n  pod 'FBReactNativeSpec', :path => \"..\/node_modules\/react-native\/Libraries\/FBReactNativeSpec\"\r\n  pod 'RCTRequired', :path => \"..\/node_modules\/react-native\/Libraries\/RCTRequired\"\r\n  pod 'RCTTypeSafety', :path => \"..\/node_modules\/react-native\/Libraries\/TypeSafety\"\r\n  pod 'React', :path => '..\/node_modules\/react-native\/'\r\n  pod 'React-Core', :path => '..\/node_modules\/react-native\/'\r\n  pod 'React-CoreModules', :path => '..\/node_modules\/react-native\/React\/CoreModules'\r\n  pod 'React-Core\/DevSupport', :path => '..\/node_modules\/react-native\/'\r\n  pod 'React-RCTActionSheet', :path => '..\/node_modules\/react-native\/Libraries\/ActionSheetIOS'\r\n  pod 'React-RCTAnimation', :path => '..\/node_modules\/react-native\/Libraries\/NativeAnimation'\r\n  pod 'React-RCTBlob', :path => '..\/node_modules\/react-native\/Libraries\/Blob'\r\n  pod 'React-RCTImage', :path => '..\/node_modules\/react-native\/Libraries\/Image'\r\n  pod 'React-RCTLinking', :path => '..\/node_modules\/react-native\/Libraries\/LinkingIOS'\r\n  pod 'React-RCTNetwork', :path => '..\/node_modules\/react-native\/Libraries\/Network'\r\n  pod 'React-RCTSettings', :path => '..\/node_modules\/react-native\/Libraries\/Settings'\r\n  pod 'React-RCTText', :path => '..\/node_modules\/react-native\/Libraries\/Text'\r\n  pod 'React-RCTVibration', :path => '..\/node_modules\/react-native\/Libraries\/Vibration'\r\n  pod 'React-Core\/RCTWebSocket', :path => '..\/node_modules\/react-native\/'\r\n\r\n  pod 'React-cxxreact', :path => '..\/node_modules\/react-native\/ReactCommon\/cxxreact'\r\n  pod 'React-jsi', :path => '..\/node_modules\/react-native\/ReactCommon\/jsi'\r\n  pod 'React-jsiexecutor', :path => '..\/node_modules\/react-native\/ReactCommon\/jsiexecutor'\r\n  pod 'React-jsinspector', :path => '..\/node_modules\/react-native\/ReactCommon\/jsinspector'\r\n  pod 'ReactCommon\/callinvoker', :path => \"..\/node_modules\/react-native\/ReactCommon\"\r\n  pod 'ReactCommon\/turbomodule\/core', :path => \"..\/node_modules\/react-native\/ReactCommon\"\r\n  pod 'Yoga', :path => '..\/node_modules\/react-native\/ReactCommon\/yoga', :modular_headers => true\r\n\r\n  pod 'DoubleConversion', :podspec => '..\/node_modules\/react-native\/third-party-podspecs\/DoubleConversion.podspec'\r\n  pod 'glog', :podspec => '..\/node_modules\/react-native\/third-party-podspecs\/glog.podspec'\r\n  pod 'Folly', :podspec => '..\/node_modules\/react-native\/third-party-podspecs\/Folly.podspec'\r\n\r\n  use_unimodules!\r\n  use_native_modules!\r\n\r\n  # Enables Flipper.\r\n  #\r\n  # Note that if you have use_frameworks! enabled, Flipper will not work and\r\n  # you should disable these next few lines.\r\n  add_flipper_pods!\r\n  post_install do |installer|\r\n    flipper_post_install(installer)\r\n  end\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\nhttps:\/\/www.mediafire.com\/file\/wwdm81elruammak","comments":["this doesnt seem an issue with Windows. Can you try `rm -rf ~\/.cocoapods\/repos` and try again?","Hello, I'm on Windows.","Then run `pod repo list` and see where the repos dir is present and delete it and run `pod install` again.","It returns:\r\n```\r\n0 repos\r\n```","Sorry I cannot keep guessing the solution. Some help from anyone else of if you can diagnose would be appreciated.","same issue ","I have the same issue.","I have this issue also.","I have the same issue. \r\n\r\nTried Solutions: \r\n\r\n- Installed and uninstalled Cocoapods\r\n- Removed and manually add source in podfile. \r\n- tried rm -rf ~\/.cocoapods\/repos and ran pod install. \r\n- Downgraded pod version but the packages throw out require pod version to be +1.10. And when upgraded back to trunk issue. \r\n\r\nNone of these solutions worked. ","@cardiffinc \r\nI still have this issue. I think cocoapods is designed this way, not to work on windows. ","> @cardiffinc \n> I still have this issue. I think cocoapods is designed this way, not to work on windows. \n\nI believe it. Apple is consistently a pain.","@ghasemikasra39 See [Windows support](https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/8189) on CocoaPods. \r\nAnd I've used it previously on other projects. Works fine as long as a proper code project is used. \r\n\r\nAnd in this instance, it is in fact install other packages but throws out errors for the trunk. "],"labels":["help wanted"]},{"title":"App clips integration","body":"* [*] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nCreated an app clip target to my current project\r\nCreated the following Podfile\r\n```\r\ndef firebase\r\n  pod 'Firebase\/Crashlytics'\r\n  pod 'FirebaseFirestoreSwift'\r\n  pod 'Firebase\/Analytics'\r\n  pod 'Firebase\/Firestore'\r\n  pod 'Firebase\/Auth'\r\n  pod 'Firebase\/RemoteConfig'\r\nend\r\ntarget 'Clip' do\r\n  use_frameworks! :linkage => :static\r\n  platform :ios, '14.0'\r\n  pod 'Kingfisher\/SwiftUI'\r\n  firebase\r\nend\r\n\r\ntarget 'fullApp' do\r\n  use_frameworks! :linkage => :static\r\n  platform :ios, '13.0'\r\n  pod 'Kingfisher\/SwiftUI'\r\n  firebase\r\nend\r\n```\r\nTried to Archive the App Clip\r\n\r\n## What did you expect to happen?\r\n\r\nFinishing the command\r\n\r\n## What happened instead?\r\n21 Errors\r\n```\r\nMultiple commands produce '\/Users\/danmotataeanu\/Library\/Developer\/Xcode\/DerivedData\/app\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Clip\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/FirebaseCoreDiagnostics.framework':\r\n1) Target 'FirebaseCoreDiagnostics-iOS13.0' has create directory command with output '\/Users\/danmotataeanu\/Library\/Developer\/Xcode\/DerivedData\/app\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Clip\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/FirebaseCoreDiagnostics.framework'\r\n2) Target 'FirebaseCoreDiagnostics-iOS14.0' has create directory command with output '\/Users\/danmotataeanu\/Library\/Developer\/Xcode\/DerivedData\/app\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Clip\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/FirebaseCoreDiagnostics.framework'\r\nMultiple commands produce '\/Users\/danmotataeanu\/Library\/Developer\/Xcode\/DerivedData\/app\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Clip\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/FirebaseFirestore.framework':\r\n1) Target 'FirebaseFirestore-iOS13.0' has create directory command with output '\/Users\/danmotataeanu\/Library\/Developer\/Xcode\/DerivedData\/app\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Clip\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/FirebaseFirestore.framework'\r\n2) Target 'FirebaseFirestore-iOS14.0' has create directory command with output '\/Users\/danmotataeanu\/Library\/Developer\/Xcode\/DerivedData\/app\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Clip\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/FirebaseFirestore.framework'\r\nMultiple commands produce '\/Users\/danmotataeanu\/Library\/Developer\/Xcode\/DerivedData\/app\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Clip\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/FirebaseFirestoreSwift.framework':\r\n1) Target 'FirebaseFirestoreSwift-iOS13.0' has create directory command with output '\/Users\/danmotataeanu\/Library\/Developer\/Xcode\/DerivedData\/app\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Clip\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/FirebaseFirestoreSwift.framework'\r\n2) Target 'FirebaseFirestoreSwift-iOS14.0' has create directory command with output '\/Users\/danmotataeanu\/Library\/Developer\/Xcode\/DerivedData\/app\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Clip\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/FirebaseFirestoreSwift.framework'\r\n\/\/and so on\r\n```\r\n451 Warnings\r\n```\r\nduplicate output file '\/Users\/danmotataeanu\/Library\/Developer\/Xcode\/DerivedData\/app\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Clip\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/FirebaseAuth.framework\/Headers\/FIRActionCodeSettings.h' on task: CpHeader \/Users\/danmotataeanu\/git\/ios\/Pods\/FirebaseAuth\/FirebaseAuth\/Sources\/Public\/FIRActionCodeSettings.h \/Users\/danmotataeanu\/Library\/Developer\/Xcode\/DerivedData\/app\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Clip\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/FirebaseAuth.framework\/Headers\/FIRActionCodeSettings.h\r\nduplicate output file '\/Users\/danmotataeanu\/Library\/Developer\/Xcode\/DerivedData\/app\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Clip\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/FirebaseAuth.framework\/Headers\/FIRAdditionalUserInfo.h' on task: CpHeader \/Users\/danmotataeanu\/git\/ios\/Pods\/FirebaseAuth\/FirebaseAuth\/Sources\/Public\/FIRAdditionalUserInfo.h \/Users\/danmotataeanu\/Library\/Developer\/Xcode\/DerivedData\/app\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Clip\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/FirebaseAuth.framework\/Headers\/FIRAdditionalUserInfo.h\r\n\/\/ and so on for each file I think\r\n```\r\n## CocoaPods Environment\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.10.0.beta.1\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.15.5 (19F101)\r\n       Xcode : 12.0 (12A8179i)\r\n         Git : git version 2.24.3 (Apple Git-128)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.4.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```\r\nruby\r\ndef firebase\r\n  pod 'Firebase\/Crashlytics'\r\n  pod 'FirebaseFirestoreSwift'\r\n  pod 'Firebase\/Analytics'\r\n  pod 'Firebase\/Firestore'\r\n  pod 'Firebase\/Auth'\r\n  pod 'Firebase\/RemoteConfig'\r\nend\r\ntarget 'Clip' do\r\n  use_frameworks! :linkage => :static\r\n  platform :ios, '14.0'\r\n  pod 'Kingfisher\/SwiftUI'\r\n  firebase\r\nend\r\n\r\ntarget 'fullApp' do\r\n  use_frameworks! :linkage => :static\r\n  platform :ios, '13.0'\r\n  pod 'Kingfisher\/SwiftUI'\r\n  firebase\r\nend\r\n```\r\n\r\n\r\n\r\n## Project that demonstrates the issue\r\nThis happens when adding the above Podfile to the hello world project generated by XCode.\r\n","comments":["Can you try 1.10.0.beta.2 which was just released?","I'm having the same issues with the app clip, it isnt working for me either :\/","Yep, I'm getting module map errors when trying to add an App Clip Target:\r\n\r\nModule map file '\/Users\/adamgreen\/Library\/Developer\/Xcode\/DerivedData\/Sleepiest-cuctfpehctjaepffkbgadtarcuoi\/Build\/Products\/Debug-iphoneos\/Alamofire-library\/Alamofire.modulemap' not found","I should add, I'm getting module map errors on the App Clip target using 1.10.0.beta.2.","Anyone has a quick sample app handy for me to try it on?","Here's a quick sample app @dnkoutso : \r\nhttps:\/\/Greenaj04@bitbucket.org\/Greenaj04\/appclipcocapodsexaple.git\r\n\r\nWith that example the App Clip appears to run fine, but the main app target does not.\r\n\r\nBoth the main app project, and the App Clip are just blank projects.\r\n\r\nI've managed to get (just) the App Clip building if I have the main app target use_frameworks! and the app clip use_modular_headers!, but via this setup the main app target doesn't compile (tho the app clip does).","I'm also having the same issue but with a different file `Assets.car`. I'm using the beta version `1.10.0.beta.2`.","We will need to properly verify and add support for AppClips. I will see if this is relatively easy that we can add to 1.10 or else we would move to 1.11.","Has anyone gotten the `use_modular_headers!` approach to work with PromiseKit? ","Has anyone fixed these \"Multiple commands produce\" issues ?","Is there a solution for this problem? We have run into this issue now that we are compiling our main app with app clip integration. Stand alone app clip is compiling if we remove the `use_module_headers!` but this breaks app clip itself. We are seeing the 'multiple commands produce' error as well. ","https:\/\/github.com\/firebase\/firebase-ios-sdk\/issues\/7486"],"labels":["t1:enhancement","d2:moderate","help wanted"]},{"title":"Xcconfing files are generated exponentially based on number of targets and configurations","body":"**Problem**: Pods xcconfig files are generated exponentially based on number of targets and configurations.\r\n\r\n**Case**: \r\n- 50 targets and 3 configurations = 150 xconfig files (All same).\r\n- All targets are using same pods versions\r\n\r\n![Screenshot 2020-08-06 at 23 40 09](https:\/\/user-images.githubusercontent.com\/7049715\/89585757-b84f5400-d83e-11ea-97df-b6a61d4f4f9b.png)\r\n\r\n![Screenshot 2020-08-06 at 23 37 39](https:\/\/user-images.githubusercontent.com\/7049715\/89585882-f2b8f100-d83e-11ea-9b93-999d31724da9.png)\r\n\r\n**Desired results**:\r\n- Want to generate only 2 xcconfig (debug\/release) and use it for all targets.\r\n\r\n\r\nI did a lot of research and tried everything, but didn't find any solution.\r\n\r\n","comments":["Yes this is currently by design, but how does this affect you directly?\r\n\r\nIs it a performance issue? ","I don't have a performance issue here yet.\r\n\r\nI was only trying to find a solution for cleanup because of files with the same content.\r\n\r\nCurrently, we can survive with it, but over time this number of xcconfig files can grow up quickly by adding new project configurations.\r\n\r\nExample: 70 targets x 10 configurations = 700 xcconfig files.\r\n\r\n\r\n","I mean we could potentially optimize this if the contents are the same not to create a new one....I think that would work?","This would be great if can be done. I'm here to help with testing or if the demo project is needed.","No need for a demo I dont think! Feel free to try and open a PR with a fix! I'd be happy to review.","Sounds good. I'll try -  I'll let you know. Thanks"],"labels":["t1:enhancement","d2:moderate"]},{"title":"Improve checksum for git branch based spec","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\nThis issue was originally posted here https:\/\/github.com\/CocoaPods\/Core\/issues\/640 However there was no feedback for some time. So I repost it in this main repo. Sorry if it bothers.\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nRun `pod install` after switching branch.\r\n\r\n## What did you expect to happen?\r\n\r\nInstall all pod dependencies correctly.\r\n\r\n## What happened instead?\r\n\r\nInstallation is skipped for some pod, so incorrect cached version is used.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.9.3\r\n        Ruby : ruby 2.4.4p296 (2018-03-28 revision 63013) [x86_64-darwin19]\r\n    RubyGems : 2.6.14.1\r\n        Host : Mac OS X 10.15.6 (19G73)\r\n       Xcode : 11.5 (11E608c)\r\n         Git : git version 2.28.0\r\nRuby lib dir : \/Users\/allen\/.rbenv\/versions\/2.4.4\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n               upwlabs - git - git@github.com:upwlabs\/PodsSpecs.git @ cf2344bbeb127b63f3159afaa66ad1ea8f4ade89\r\n\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/allen\/.rbenv\/versions\/2.4.4\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\nclaide-plugins         : 0.9.2\r\ncocoapods-deintegrate  : 1.0.4\r\ncocoapods-dependencies : 1.0.0.beta.1\r\ncocoapods-plugins      : 1.0.0\r\ncocoapods-search       : 1.0.0\r\ncocoapods-stats        : 1.1.0\r\ncocoapods-trunk        : 1.5.0\r\ncocoapods-try          : 1.2.0\r\ncocoapods_debug        : 0.1.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nI created [this minimal project](https:\/\/github.com\/allenhsu\/cocoapods-checksum-demo) to reproduce the issue.\r\n\r\n## Original Post\r\n\r\nTL;DR, [current checksum is based on the spec file only](https:\/\/github.com\/CocoaPods\/Core\/blob\/59eaa9b1b22070d6c5ffcfa19f491c1f47594459\/lib\/cocoapods-core\/specification.rb#L668), which may potentially cause wrong version of pod being used when using branch as source.\r\n\r\n## Background\r\n\r\nFirst of all, let me describe our development flow of private pods.\r\n\r\nDuring development, we will check out the source code of the private pod into a local directory, checkout a new feature branch, e.g. `feature-name`, and point the pod to a local path using `pod \"pod_name\", :path => \"local_path\"`.\r\n\r\nAfter local development, we will submit beta builds (of the main App containing the private pod) for QA to test. In this stage, we will use `pod \"pod_name\", :git => \"source_repo\", :branch => \"feature-name\"` to reference the latest code of the feature branch. Beta builds are build and deployed on a stateful CI server.\r\n\r\nOnly when it's stable for submission, we will then bump the version, make a tag, and push it to our private specs repo.\r\n\r\n## Steps to Reproduce The Problem\r\n\r\nI created [this minimal project](https:\/\/github.com\/allenhsu\/cocoapods-checksum-demo) to reproduce the issue.\r\n\r\n1. Clone the repo, check out to `branch-based-pod`, run `pod install`, which will install `AFNetworking` from it's master branch.\r\n2. Check out to `master` branch, run `pod install`, which is supposed to install the `AFNetworking` v4.0.1 as locked in Podfile.lock from the official trunk. However, because the checksum of `AFNetworking` didn't change, so pod skipped reinstalling it.\r\n\r\nIf you do it backward, there's no such issue, because branch based pod is pre-downloaded, which will hit [the check here](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/7033bd7bb07a37041bc6e367b45660c9ac4784b8\/lib\/cocoapods\/installer\/analyzer\/sandbox_analyzer.rb#L142).\r\n\r\nThis is causing some corner issues for us because we are using a local stateful CI server, Pods directory is not cleaned for each build. When switching to branches based on older release branches, the wrong cached pod may be used.\r\n\r\n## How to Fix It\r\n\r\nThe quickest workaround for us is remove Pods directory before each build to make sure pods are installed from source, but this will make the build time longer than expected. For deployment tasks, we do remove Pods directory to make sure everything is clean. But for beta builds, we still want to keep it to accelerate the builds.\r\n\r\nThe better solution would be change how checksum is calculated, or how sandbox manifest and dependencies are compared. The checksum part is in this Core repo, while the sandbox analyzer is actually in the CocoaPods repo.\r\n\r\nNot sure if anyone else has encountered similar problems, but I want to bring it up to see if there could be any improvements.","comments":["thanks for filing it. It was discussed a bit in the CocoaPods Slack and PR opened here https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/9958\r\n\r\nI am going to close the Core one to avoid duplication.","Thanks @dnkoutso. Good to know that it has already been taken care of.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n"],"labels":["t3:discussion"]},{"title":"Host: Unable to find an executable (No such file or directory - sw_vers) in Stack","body":"Below returned in debian when running `pod install` command:\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.9.3\r\n        Ruby : ruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-linux-gnu]\r\n    RubyGems : 3.1.2\r\n        Host : Unable to find an executable (No such file or directory - sw_vers)  ()\r\n       Xcode : xcodebuild) ()\r\n         Git : git version 2.28.0\r\nRuby lib dir : \/usr\/lib\r\nRepositories : \r\n```\r\n\r\nThere is no `sw_vers` executable in debian:\r\nhttps:\/\/packages.debian.org\/search?suite=sid&arch=any&mode=path&searchon=contents&keywords=sw_vers\r\n\r\nUse something else (code\/executable) when running on LinuxOS instead of missing\/not-existent sw_vers executable.","comments":["Yes this is something that can be fixed."],"labels":["t2:defect","d1:easy","help wanted"]},{"title":"Argument List Too Long:  \/bin\/sh can not spawn process (the exported environment variable caused this error.)","body":"I'm using cocoapods in my project, this project is very large, and it has many pods.\r\n\r\nWhen building this project, and before Xcode running scripts in BuildPhases,  Xcode complains \"Argument List Too Long  \/bin\/sh can not spawn process\" \r\n\r\nI spend days on it and finally find out the reasion: \r\n\r\nThere is too many pods in my project, \r\n\r\nand those pods causes `LIBRARY_SEARCH_PATH`,`OTHER_CFLAGS`,`HEADER_SEARCH_PATHS`... too long, \r\n\r\nwhich Xcode will export them into shell at build time before running scripts in BuildPhases,\r\n\r\nand those exported environment variables causes `Argument List Too Long` error.\r\n\r\nhere is the prove:\r\n\r\n[ArgumentListTooLong.txt](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/5001317\/ArgumentListTooLong.txt)\r\n\r\nrename this `ArgumentListTooLong.txt` to `ArgumentListTooLong.sh`, and run it, the `Argument List Too Long` shows. \r\n\r\nIf you uncomment those \"unset\" lines at line 450-455, the `Argument List Too Long` error goes away.\r\n\r\nrun `getconf ARG_MAX` in command line will show the limit, and the length of those exported environment variable is way above this limit.\r\n\r\nSo I wonder if CocoaPods can combine those paths and modulemap files from different pods into one path and one modulemap file, make those environment variables go shorter, so I can successfully build my project.\r\n\r\nI have spend a lot of time on this, have combined some pods into one pod to make my project build successfully.\r\n\r\nBut we are a 30-people team, new pod will be created every day, really need your help...\r\n","comments":["Are you using input\/output paths by any chance? Are you also using xcfilelists?\r\n\r\nYes we have had this issue internally for us but using xcfilelists for the CocoaPods script phases fixes the issue for us. I am also fairly certain our project is larger than yours as we 800+ pods in a monorepo.","> Are you using input\/output paths by any chance? Are you also using xcfilelists?\r\n> \r\n> Yes we have had this issue internally for us but using xcfilelists for the CocoaPods script phases fixes the issue for us. I am also fairly certain our project is larger than yours as we 800+ pods in a monorepo.\r\n\r\nThank you for your reply!\r\n\r\nMay I get more information about how you use \"input\/output paths\" and \"xcfilelists\" to solve this issue?","<img width=\"1512\" alt=\"Screen_Shot_2020-07-30_at_9_27_08_AM\" src=\"https:\/\/user-images.githubusercontent.com\/310370\/88948555-ed5c1500-d246-11ea-83ea-258cd3280751.png\">\r\n\r\nCocoaPods will utilize xcfilelists if your project is is \"Xcode 9.3-compatible\" and above.","I will try this to see if it solves my problem.\r\nThank you!","seems it is not working for me?\r\n\r\nIt's not about the list of files too long, it's about too many pods causes the exported environment variables too long, like `LIBRARY_SEARCH_PATHS `, `OTHER_CFLAGS `, etc. \r\n\r\nAnd the length of all those environment variables's value is larger than the system limit. Not the length of someone, but the total length of all those environment variables's value.\r\n\r\nThose exported environment variables stops Xcode to run the script.\"Argument List Too Long\", even if there is no argument needed.\r\n\r\nIf unset some of those longest environment variables, it works fine.\r\n\r\nJust like the script I gave previously. in the prove script, the last line of `\/bin\/sh -c .\/test.sh` will never run, because of those long environment variables exported above.(you can change the last line to `ls`, and it fails too)\r\n\r\nthis picture below will show the total environment variables that Xcode exported before calling the script in Build Phases, and my prove script is copied from it. My script will generate the \"Argument List Too Long\" error, even the last line needs no arguments. \r\n\r\n<img width=\"1983\" alt=\"\u622a\u5c4f2020-07-31 \u4e0a\u534812 40 39\" src=\"https:\/\/user-images.githubusercontent.com\/1005781\/88950140-c8a78200-d2c6-11ea-8fac-1f6a76fde885.png\">","Weird, I do not think cocoapods sets that by default. Maybe an older version did? In my screenshot above it is unchecked.\r\n\r\nOn a brand new project does it check this check mark? It might be dependent on Xcode version too so maybe in CocoaPods we can explicitly set that to false.","check this mark won't cause \"Argument List Too Long\".\r\n\r\nI check this mark to show information about the environment variables that Xcode exported before running script, and that's why I found the reason causes \"Argument List Too Long\". \r\n\r\nbelow I uploaded the information as txt file I copied from Xcode. Notice the last line of this file, it says \"Argument List Too Long\", that means the `\/bin\/sh -c \/Users\/casa\/Library\/Developer\/Xcode\/DerivedData\/DUApp-bjqexcubjvfvgmegpsiikmkfztca\/Build\/Intermediates.noindex\/DUApp.build\/Debug-iphoneos\/DUIdentificationInterface.build\/Script-4AFF177224D28138000C308E.sh` line won't run.\r\n\r\n[ArgumentListTooLong.txt](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/5002784\/ArgumentListTooLong.txt)\r\n","I understand the issue, I am trying to see how come you hit it in a rather medium\/large project but we have an extra large project and it works.\r\n\r\nI am not quite sure now what is causing it directly and what we can do in CocoaPods to circumvent this.","Thank you!\r\n\r\nIt's the environment variables' value too long caused \"Argument List Too Long\".\r\n\r\nif Cocoapods can combine `LIBRARY_SEARCH_PATHS`, `SWIFT_INCLUDE_PATHS` into one path, the total length goes down. \r\n\r\nAnd I use `use_modular_headers!` in my Podfile, which causes many modulemap files in my project.\r\n\r\nIf Cocoapods can combine modulemap files into one file, the length of `OTHER_CFLAGS `,`OTHER_CPLUSPLUSFLAGS `,`OTHER_SWIFT_FLAGS` will goes down either.\r\n\r\nAnd then my project can be build successfully.","I have written a python script, make it run at post_install in Cocoapods, try to modify xcconfig files to shrink the length of `HEADER_SEACH_PATH`, `OTHER_CFLAGS`, `LIBRARY_SEARCH_PATH`:\r\n\r\n[modification.py.txt](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/5003660\/modification.py.txt)\r\n\r\nand then I added a bash script in BuildPhase to merge module map files into one file before compile process:\r\n\r\n[MergeModuleMapFiles.sh.txt](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/5003624\/MergeModuleMapFiles.sh.txt)\r\n\r\nThough this bash scripts has some bad smell about `R.swift.Library-umbrella.h`, `SQLite.swift-umbrella.h`, and `SDWebImageWebPCoder.h`, it really works.\r\n\r\nand then I added another bash script to copy libraries from different directory to one directory after compile and before link:\r\n\r\n[CopyLibraries.sh.txt](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/5003628\/CopyLibraries.sh.txt)\r\n\r\nAfter finish these things above, no matter how many pod you are using, `HEADER_SEACH_PATH`, `OTHER_CFLAGS`, `LIBRARY_SEARCH_PATH` won't get longer.\r\n\r\nthen I clean `DerivedData`, remove `Pods` directory, `pod update`... my project successfully builded, and the Xcode exported shorter environment variables:\r\n\r\nBefore:\r\n\r\n[XcodeExportedEnvironmentVariables_Before.txt](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/5003682\/XcodeExportedEnvironmentVariables_Before.txt)\r\n\r\nAfter:\r\n\r\n[XcodeExportedEnvironmentVariables_After.txt](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/5003683\/XcodeExportedEnvironmentVariables_After.txt)\r\n\r\nIf Cocoapods can do these things internally in `post_install` and create scripts in BuildPhase automatically for user, it will be a nice job!\r\n","I leave `SWIFT_INCLUDE_PATHS` untouched because I don't know what Swift cares in the path. Hope someone can help me.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n"],"labels":["help wanted"]},{"title":"Possible to connect single Pod to multiple targets with different min deployment target?","body":"I couldn't find anything related to this question. That's why I am posting it here.\r\n\r\nRecently, we did increase our app's min deployment target iOS 9.0 > 11.0. However, our app uses additional internal frameworks that are still pointing to iOS 9. Is it possible to share the same Pod with two targets that they do have different minimum deployment target?\r\n\r\nSo far I tried.\r\n\r\n```\r\nworkspace 'ABC.xcworkspace'\r\nplatform :ios, '11.0'\r\nuse_frameworks! :linkage => :static\r\n\r\n# ============= SCOPES ============= #\r\ndef firebase\r\n    pod 'Firebase\/Core'\r\n    pod 'Firebase\/Messaging'\r\n    pod 'Firebase\/DynamicLinks'\r\n    pod 'Firebase\/InAppMessaging'\r\nend\r\n\r\n# ============= TARGETS ============ #\r\ntarget 'ABC' do\r\n    firebase\r\nend\r\n\r\ntarget :Core do\r\n    platform :ios, '9.0'\r\n    firebase\r\nend\r\n```\r\n\r\n_Note: This is not the exact Podfile but rather a sample of it._\r\n\r\nBut this generates duplicate Targets under `Pods.xcodeproj` appending `-iOS9.0` and `-iOS11.0`.\r\n\r\nWhat is the right way achieving what I am looking for? If currently possible.","comments":["Hmmm I would have to check if this is possible. If you embed `:Core` into `ABC` does this work or does it produce the same results?","@dnkoutso Unfortunately is the same outcome. Compiles fine but when you try archive:\r\n\r\n```\r\nShowing All Errors Only\r\nMultiple commands produce '...\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/SDWebImage.framework':\r\n1) Target 'SDWebImage-iOS11.0' has create directory command with output '...\/Build\/Intermediates.noindex\/ArchiveIntermediates\/...\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/SDWebImage.framework'\r\n2) Target 'SDWebImage-iOS9.0' has create directory command with output '...\/Build\/Intermediates.noindex\/ArchiveIntermediates\/...\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/SDWebImage.framework'\r\n```\r\n\r\n_Note: SDWebImage is just another Pod we do share between the two targets (In addition to Firebase)_","Let me clarify that initially, we had `platform :ios, '9.0'` defined at the very top. After increasing minimum deployment target to iOS 11.0 for our app, we did change Podfile as well (as you see above). However, while this is building and running with no issues on Xcode when we try to archive for distribution, console produces \r\n\r\n`ld: framework not found Pods_Core`","@p-nicolaou just catching up with most issues of CocoaPods... I wonder if this is an \"issue\" with the new build system and us trying to be smart by having two separate targets that produce the same framework name but the targets are named differently...\r\n","i'll need time to take the sample podfile and dig through into the issue.","@dnkoutso I also encountered this problem\r\n\r\nMy Podfile\r\n```\r\ninstall! \"cocoapods\",\r\n         :generate_multiple_pod_projects => true,\r\n         :incremental_installation => true\r\n\r\nuse_frameworks!\r\n\r\ntarget \"test\" do\r\n  platform :ios, \"10.0\"\r\n\r\n  pod \"SDWebImage\"\r\nend\r\n\r\ntarget \"test2\" do\r\n  platform :ios, \"9.0\"\r\n\r\n  pod \"SDWebImage\"\r\nend\r\n```\r\n\r\nError\r\n```\r\nMultiple commands produce '...\/Library\/Developer\/Xcode\/DerivedData\/test-dwskvvaamiaelwhcbotydijxebwv\/Build\/Intermediates.noindex\/ArchiveIntermediates\/test2\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/SDWebImage.framework':\r\n1) Target 'SDWebImage-iOS10.0' has create directory command with output '...\/Library\/Developer\/Xcode\/DerivedData\/test-dwskvvaamiaelwhcbotydijxebwv\/Build\/Intermediates.noindex\/ArchiveIntermediates\/test2\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/SDWebImage.framework'\r\n2) Target 'SDWebImage-iOS9.0' has create directory command with output '...\/Library\/Developer\/Xcode\/DerivedData\/test-dwskvvaamiaelwhcbotydijxebwv\/Build\/Intermediates.noindex\/ArchiveIntermediates\/test2\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/SDWebImage.framework'\r\n```\r\n\r\nhappens when archiving test2.\r\n\r\n\r\nIt may be related to \u02bbuse_frameworks!`, because I can archive it after deleting it","I'm experiencing the same issue:  https:\/\/github.com\/firebase\/firebase-ios-sdk\/issues\/7486\r\n","I have the same problem. Is there no workaround? I have an app extension that is only supported for >IOS14, but the app itself should still be available on iOS13. That's why both targets, which both use a couple of common pods, have different deployment targets, and I run unto \"multiple commands produce...\""],"labels":["help wanted"]},{"title":"pod copy resource to wrong folder","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [ ] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nRun `pod install`\r\n\r\n## What did you expect to happen?\r\n1. i have some built .driver bundle and want to distribute it using pod, so i use \r\ns.resource = 'test.driver', but pod copy the driver to resource folder which apple suggest is 'Contents\/PlugIns', and then xcode will not sign the driver when app sign, i hope pod can copy driver to correct position. \r\n2. i think pod should add other resource setting, something like s.plugins = 'test.driver', s.xpcs = 'test.xpc', there are many other contents in apple app : \r\nContents\/PlugIns  :  Plug-ins, both loadable and Extensions\r\nContents\/XPCServices  :  XPC services\r\nContents\/Helpers :  Helper apps and tools\r\nfor detail : https:\/\/developer.apple.com\/library\/archive\/technotes\/tn2206\/_index.html#\/\/apple_ref\/doc\/uid\/DTS40007919-CH1-TNTAG206\r\n\r\n## What happened instead?\r\n\r\npod copy resource to wrong folder\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.8.4\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.15.4 (19E287)\r\n       Xcode : 11.5 (11E608c)\r\n         Git : git version 2.9.3\r\n\r\n### Plugins\r\n\r\n```\r\nclaide-plugins        : 0.9.2\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.4.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n","comments":["Sounds like an enhancement that needs to be thought of. In the meantime you can use `s.script_phase` to write your own script phase to do that!"],"labels":["t1:enhancement","help wanted","s7:workaround available"]},{"title":"Pod cache automatically clean on CI machine.","body":"I have met a problem with the CI machine.\r\nWhen the different source control in Podfile.lock.\r\nOne is 1.9.1 and another is 1.9.3.\r\nWhen two CI jobs run concurrently.\r\nThe pod cache has version control, too.\r\nThe two jobs will affect each other.\r\nI found clean cache will cause the job to fail.\r\nIs there any method that can resolve this problem?\r\nThanks\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n\u2139 Please replace these two lines with what you did.  \r\n`bundle exec pod install --repo-update`\r\n\r\n## What did you expect to happen?\r\n\r\nInstall all pod dependencies correctly.\r\nProvide a method that can manage different version pod cache.\r\nNot always automatic remove instead.\r\n\r\n## What happened instead?\r\n\r\nProvide a method that can manage different version pod cache.\r\nNot always automatic remove instead.\r\n\r\n## CocoaPods Environment\r\n\r\n\u2139 Please replace these two lines with the output of `pod env`.\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.9.1\r\n        Ruby : ruby 2.6.0p0 (2018-12-25 revision 66547) [x86_64-darwin18]\r\n    RubyGems : 3.0.8\r\n        Host : Mac OS X 10.15.3 (19D76)\r\n       Xcode : 11.4 (11E146)\r\n         Git : git version 2.24.1 (Apple Git-126)\r\nRuby lib dir : \/Users\/user\/.rvm\/rubies\/ruby-2.6.0\/lib\r\nRepositories : private-ios-repo - git - https:\/\/xxx.git\r\n               master - git - https:\/\/github.com\/CocoaPods\/Specs.git @ b03992ca780dd821b1ae43269cae640f1f32e3b1\r\n\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/user\/.rvm\/gems\/ruby-2.6.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-bin                         : 0.1.29\r\ncocoapods-deintegrate                 : 1.0.4\r\ncocoapods-disable-podfile-validations : 0.1.1\r\ncocoapods-generate                    : 1.6.0\r\ncocoapods-packager                    : 1.5.0\r\ncocoapods-packager-pro                : 1.5.4\r\ncocoapods-plugins                     : 1.0.0\r\ncocoapods-search                      : 1.0.0\r\ncocoapods-stats                       : 1.1.0\r\ncocoapods-tdfire-binary               : 2.0.9\r\ncocoapods-trunk                       : 1.5.0\r\ncocoapods-try                         : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\nsource 'https:\/\/git.xxx.com\/privateSpecs.git'\r\nplatform :ios, '11.0'\r\n\r\nuse_frameworks!\r\n\r\ninstall! 'cocoapods', disable_input_output_paths: true\r\n\r\ndef add_multi_target_pods\r\n...\r\nend\r\n\r\ntarget 'Main' do\r\n\r\n  add_multi_target_pods\r\n\r\n\r\n  post_install do |installer|\r\n      ...\r\n    # Patch CCGestureLock\r\n    `patch -p0 < Patches\/CCGestureLock.swift.diff`\r\n\r\n    # Write the acknowledgements\r\n\r\n  end\r\n\r\nend\r\n\r\ntarget 'Widget' do\r\n\r\n  add_multi_target_pods\r\n\r\nend\r\n```\r\n\r\n\r\n\r\n## Project that demonstrates the issue\r\n\r\n\u2139 Please link to a project we can download that reproduces the issue.\r\nYou can delete this section if your issue is unrelated to build problems,\r\ni.e. it's only an issue with CocoaPods the tool.\r\n","comments":["https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/7915","The CocoaPods cache can break in more ways than just this when two `pod` commands are run concurrently. (e.g. two `repo-update` commands can clash when both trying to modify things in `~\/.cocoapods\/` at the same time, and two `pod install` commands can conflict\/race each other if they both try to download the same pod to the cache at the same time, even if the same version of cocoapods is used for both)\r\n\r\nThe way I've worked around this for concurrent CI jobs is with a lock file to ensure only one job is performing a pod command at a time. We use Fastlane, so I used the `filelock` gem and just enclosed every call to cocoapods in a block like\r\n\r\n```ruby\r\nfastlane_require 'filelock'\r\nFilelock [some_lock_file_path], :timeout => 1200, :wait => 3600  do\r\n    ... cocoapods commands...\r\nend\r\n```\r\n\r\nwhich ensures that any other jobs will block and wait until it's safe to continue.\r\n\r\nI think Cocoapods should probably implement similar locking behaviour internally.","Seems like something to heavily improve. The workaround posted here might be OK for folks who hit this issue.","still following this question","pod will strip all cache when the cache pod version is not consistent with current. so the solution will be:\r\n\r\n1. Use the same version of pod uniformly\r\n2. Different versions of pod, through the environment variable `CP_CACHE_DIR` for cache isolation. Sample code:\r\n```\r\nENV['CP_CACHE_DIR'] = File.join(Dir.home, \"Library\/Caches\/CocoaPods\", cocoapods_version) \r\n```"],"labels":["t1:enhancement","d2:moderate","help wanted","s7:workaround available"]},{"title":"Can't build application, pod says framework not found.","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI ran `pod install` and it worked fine.\r\nWhen I tried to build my iOS application it said `ld: framework not found Pods_97_7_Ra_dio__1`\r\nProject name: `97.7 R\u00e1di\u00f3 1`\r\n\r\n## What did you expect to happen?\r\n\r\nApplication builds successfully.\r\n\r\n## What happened instead?\r\n\r\nIt said `ld: framework not found Pods_97_7_Ra_dio__1`\r\n\r\n## CocoaPods Environment\r\n\r\n\/usr\/local\/lib\/ruby\/gems\/2.7.0\/gems\/cocoapods-core-1.9.3\/lib\/cocoapods-core\/cdn_source.rb:342: warning: URI.escape is obsolete\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.9.3\r\n        Ruby : ruby 2.7.0p0 (2019-12-25 revision 647ee6f091) [x86_64-darwin19]\r\n    RubyGems : 3.1.2\r\n        Host : Mac OS X 10.15.5 (19F101)\r\n       Xcode : 11.5 (11E608c)\r\n         Git : git version 2.20.1\r\nRuby lib dir : \/usr\/local\/lib\r\nRepositories : master - git - https:\/\/github.com\/CocoaPods\/Specs.git @ ca6e1c0a0c65cd88024c510c25402fa0926f70ca\r\n\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.5.0\r\ncocoapods-try         : 1.2.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\n# platform :ios, '9.0'\r\n\r\ntarget '97.7 R\u00e1di\u00f3 1' do\r\n  # Comment the next line if you don't want to use dynamic frameworks\r\n  use_frameworks!\r\n\r\n  pod 'MobileVLCKit'\r\n\r\n  target '97.7 R\u00e1di\u00f3 1Tests' do\r\n    inherit! :search_paths\r\n    # Pods for testing\r\n  end\r\n\r\n  target '97.7 R\u00e1di\u00f3 1UITests' do\r\n    # Pods for testing\r\n  end\r\n\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/files.fightman01bot.hu\/index.php\/s\/CRAjod80rYnt2d1\r\n","comments":["Definitely an issue with `97.7 Ra\u0301dio\u0301 1` target name. I was able to reproduce.\r\n\r\nWorkaround is to provide a different app name like `97.7` which worked for me. Change it also for tests.","Similar issue previously reported here https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8642","![Screen Shot 2020-06-28 at 7 46 39 PM](https:\/\/user-images.githubusercontent.com\/2281949\/85967789-210dfb80-b978-11ea-8516-74a9c2500df7.png)\r\n\r\nXcode itself struggles with these names as well. We can likely improve things on the CocoaPods side though","Yeap agreed."],"labels":["t2:defect","s2:confirmed","help wanted","s7:workaround available"]},{"title":"[Required feature] Can make subspec as submodule if enable \"use_modular_headers\"?","body":"for example,   MyDemo.podspec is like this:\r\n\r\n```ruby\r\n# ...\r\ns.subspec \"SubLibA\" do |ss|\r\n# ...\r\nend\r\n\r\ns.subspec \"SubLibB\" do |ss|\r\n# ...\r\nend\r\n```\r\n\r\nthe Podfile  import the pod:\r\n\r\n```ruby\r\nuse_modular_headers!\r\n\r\n# ...\r\npod 'MyDemo'\r\n```\r\n\r\nand I use the pod in my app code:\r\n\r\n```Objective-C\r\n@import MyDemo.SubLibA;\r\n\/\/ ...\r\n```\r\n","comments":["Yes possibly a good enhancement. I think it would depend if the root spec is used or not though.","You can also specify you own module map today using `s.module_map`.","Actually this would be much harder now with cocoapods as subspecs can change names depending on which variants you integrate.\r\n\r\nI dont think we will be able to support that and i recommend using your own module map.","@dnkoutso yes,  My own pods I can write my own module map to support it.\r\n\r\nI hope  when I use a pod written by others(eg, from github),  cocoapods will automatically generate the module map with submodules according to the configs in the podspec.","> Actually this would be much harder now with cocoapods as subspecs can change names depending on which variants you integrate.\r\n> \r\n> I dont think we will be able to support that and i recommend using your own module map.\r\n\r\n@dnkoutso  Can we generate different modules for different variants?  \r\nIf we cant do that,  is that means we don't need to specify subclass in the podfile?  Instead we just add the root of pod in the podfile, and we can import sub-module in the code?","@alexlee002 \r\n> @dnkoutso yes, My own pods I can write my own module map to support it.\r\n\r\nYou can always add `post_install` hook to edit the pods you use to set a `MODULE_MAP` entry providing your own module map file","@dnkoutso  \r\nYes,  this is a solution.  But I need to manually edit the module-map file, every time when the pods reference changed in the podfile.  I hope this would be more \"smart\".","I am sorry I don't fully understand. what do you mean with \"pods reference changed in the podfile\"?\r\n\r\nThe `pod_target` instance in the `post_install` hook would give you pretty much everything you need  to generate a module map file on the fly and set it as part of the targets build settings.","@dnkoutso\r\n\r\nI mean,   I don't want to manually edit the module map file every time if I change the subspecs in the Podfile.\r\nand, maybe there would be more than one target reference the same pod, in different platform, different subspecs.  \r\nI hope cocoapods can automatically create the different modulemap for different variants.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n"],"labels":["s1:awaiting input"]},{"title":"Feature Request: Support for git dependency with subdirectory path specified","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI use a monorepo for development. I have a CocoaPod inside the repo at `\/packages\/my_package\/my_package.podspec`\r\n\r\nAnother team has a project which wants to depend on this package. They enter this into their Podfile:\r\n```\r\npod 'MyPackage', :git => 'https:\/\/github.com\/harryeakins\/monorepo.git', :path => '.\/packages\/my_package'\r\n```\r\n\r\nWhen they run `pod install`, this happens:\r\n```\r\n[!] The dependency `MyPackage` specifies `podspec` or `path` in combination with other download strategies. This is not allowed.\r\n```\r\n\r\n## What did you expect to happen?\r\n\r\nIt should fetch the git repository, and use the CocoaPod from the correct directory provided. \r\n\r\nI *think* this is pretty reasonable. It would work in some similar package managers, such as  Dart\/Flutter: https:\/\/dart.dev\/tools\/pub\/dependencies\r\n\r\n## What happened instead?\r\n\r\nIt showed an error.\r\n\r\nAfter further investigation, I realized I can put multiple podspec files in the root directory of the repository. This is not ideal though... it would be nice to keep our repository neat and tidy with the podspec files belonging to the packages they describe.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.8.4\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.15.4 (19E287)\r\n       Xcode : 11.4 (11E146)\r\n         Git : git version 2.24.1 (Apple Git-126)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-binary       : 0.4.4\r\ncocoapods-deintegrate  : 1.0.4\r\ncocoapods-dependencies : 1.3.0\r\ncocoapods-plugins      : 1.0.0\r\ncocoapods-search       : 1.0.0\r\ncocoapods-stats        : 1.1.0\r\ncocoapods-trunk        : 1.4.1\r\ncocoapods-try          : 1.1.0\r\n```\r\n","comments":["I don't think is a good way to share your pods.\r\n\r\ncan the other team has the permission change your code? if no, why not use a released binary pod instead?\r\n\r\nif so, why not make a separate code repo for the share pod?","> I don't think is a good way to share your pods.\n\nWhy not?\n\n> can the other team has the permission change your code? if no, why not use a released binary pod instead?\n\nWe want the other teams to be able to read our code and submit pull requests against it, so I don\u2019t think this is an option.\n\n> if so, why not make a separate code repo for the share pod?\n\nWe\u2019ve decided to use a monorepo (https:\/\/en.m.wikipedia.org\/wiki\/Monorepo) because the pros outweigh the cons for our development process. Asking us to move away from this model  is asking us to sacrifice development productivity. It would be great to support different development practices.","This seems reasonable, but it should shouldn't be using `:path` - perhaps `:dir` or `:root`? \r\n\r\nIt's less accurate, but `:path` means that it will use the local fs to find a pod and make a dev pod in CocoaPods. Allowing the option to act differently depending on `git:` is gonna be confusing for docs and readability","@harryeakins I read the monorepo before.  But I don't think software development is something like Religion.  We can use the \"right way\" to us.\r\n\r\nBut there is a creed that I think is right: \"Keep it simple\".  Cocoapod is now becoming more complex. I think it's better to build a ecology with much plugins. so, I think you can write you own pod-plugin to customize your pod.\r\n\r\nBTW, actually,  my team currently use the dev-pattern much like monorepo,   there are also some \"base feature kits\" need to share with other teams,  and I separate them into isolate repos, so, actually I'm using the pattern mixed with \"monorepo\" and \"multi-repos\".  I wrote my own pod-plugin to manage this repos and make them looks like a single repo. it works good.\r\n","@orta I think it will bring something hard to control.  \r\n\r\nFor example,  there is a big monorepo project (eg, named \"MyProj\".) has   pod-a, pod-b, pod-c, ...\r\nAnd\uff0c my new project needs pod-a in branch master, and pod-b in tag-v1.0,  and pod-c in commit 666aaaa,  you need to clone 3-times of this big repo?","If you're operating internally in a monorepo they should be using `:path` to refer to the other Pods given that the source is right there (or make a plugin like you have). Having support for `:git` with :`dir` (or whatever) allows you to not need the Pod to be the root of your repo and is globally useful to any git repo,","@orta but it is not easy to solve my problem: if the monorepo is a huge repo, and other project need to refer some of the pods in this monorepo but they are in different branches or tags or commits,   how to avoid clone many times of this huge repo?","It's worth noting that this issue will potentially go away when git sparse-checkout becomes more mature and supported: https:\/\/github.blog\/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout\/","@harryeakins\r\n\r\nNo, I am not fully agree.  Even if we use sparse-checkout, we still need to download the huge `.git` objects one or more times\uff08for example,  my git repo is more than 20G -- a long history project, and some bad guy pushed some big binary files before\uff09,  and sparse-checkout is still toooo slow.\r\nMaybe we can clone the repo once,  and copy the first pod-dir,  and then checkout to next pod's branch\/commit, and copy the next pod-dir?","@harryeakins what is the final solution to this issue? I'm facing the same problem as you.","I'm facing the same issue as well","I assume this has never been addressed? With the rise of monorepos, it would make sense to accommodate for such. Maybe something like `:package`","Another question but little relative:  Which is the best way to use a monorepo with multiple APPs?","I think this should extension the `source` property in `podspec`,  e.g.:\r\n\r\n  spec.source = {:git => 'ssh:\/\/host\/pod.git', :pod_dir => 'path\/to\/pod' }\r\n\r\n"],"labels":["t1:enhancement","d2:moderate"]},{"title":"Feature Request - True isolated development with AppSpecs","body":" \ud83c\udf08 I've read and understood the CONTRIBUTING guidelines and have done my best effort to follow.\r\n\r\nWe are using AppSpecs to achieve \"isolated development\" in our monorepo.\r\nWith AppSpecs, we generate projects and develop on small slices of our monorepo.\r\nThis has worked well, but as we add more AppSpecs, we are polluting our monorepo with more AppSpec specific code, targets, etc. \r\nIs there a way to generate the AppSpec projects _without_ integrating them into our monorepo?\r\nI found this functionality in https:\/\/github.com\/square\/cocoapods-generate but was wondering  if AppSpecs can or plans to support the same behavior as there seems to be a lot of overlap.","comments":["cocoapods-generate uses the podspec you specified. It does not do anything special apart from creating an in-memory `Podfile` and writing out a user project.\r\n\r\nWe use app specs in our monorepo as well but we have the `gen\/` folder in `.gitignore`. Developers `cd` into the folder they want and run `pod gen <podspec>` to generate the workspace they want to develop for.","I am not particularly sure about what the specific feature request ask for is?","We are adding the light-weight Pods w\/ AppSpecs to our monorepo's Podfile in order to generate these sub-projects with runnable targets. It looks something like this:\r\n`            pod SubProjectOne, :appspecs => ['SubProjectOneApp'], :testspecs => ['SubProjectOneTests']\r\n`\r\nThe problem with this approach, as I mentioned, is that the code and targets for the SubProjects now lives in our monorepo.\r\n\r\nFrom what I understand, you do not have this issue because you are using cocoapods-generate to generate the projects from the AppSpecs.\r\n\r\nBoth cocoapods-generate and Cocoapods have _a way_ to generate projects from AppSpecs.\r\n\r\nMy Feature request was asking if Cocoapods would be able to generate AppSpec projects (as we have done) but not have them integrated into our monorepo.\r\n\r\nIt seems like just using cocoapods-generate is the preferred way to go about generating sub-projects for a monorepo, whereas adding an AppSpec to your Podfile is preferred when doing something like adding another libraries sample app to your project.\r\n\r\nI'm fine with either approach, I just saw that both methods had some overlap and I didn't want to take the wrong approach in the long-run if this functionality was going to be directly added to Cocoapods.","I see so you want support to basically create a fake \"user\" project that can be integrated like the `validator.rb` or cocoapods-generate do, correct?","Yes that's correct.","@yusufoos i am developing an tool for isolated development,  an found i must give so many effects on it. if you atre interesting, you can contact me."],"labels":["t1:enhancement","t3:discussion","d2:moderate"]},{"title":"[security] Install pods safety when they stored in Source control","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n```sh\r\npod install\r\n# then I change one source file on library and commit it\r\ngit add Pods; git commit;\r\n\r\n# finally I run again\r\npod install\r\n```\r\n\r\n## What did you expect to happen?\r\n\r\nChanges that I add to source code of library should be discarded and I will see it in `git status` \r\n\r\n## What happened instead?\r\n\r\nNothing happened( \r\nInjected alien code has not been deleted\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.8.4\r\n        Ruby : ruby 2.3.7p456 (2018-03-28 revision 63024) [universal.x86_64-darwin18]\r\n    RubyGems : 2.5.2.3\r\n        Host : Mac OS X 10.14.6 (18G103)\r\n       Xcode : 11.3.1 (11C504)\r\n         Git : git version 2.24.0\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.3\/usr\/lib\r\nRepositories : trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.4.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\n...\r\n","comments":["`rm -rf Pods` before `pod install` is a workaround","We could calculate a checksum for the current remote Pods and re-install it if it has changed. We should piggyback on the mechanism for incremental installation that generates those checksums and the list of files I think."],"labels":["t1:enhancement","d2:moderate","help wanted","s7:workaround available"]},{"title":"Removing pod from specific configurations","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [*] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI've added\r\n```\r\npod 'BugfenderSDK', '1.8', :configurations => ['Debug_dev', 'Release_dev']\r\npod 'Firebase\/Crashlytics', '6.21.0', :configurations => ['Debug_dev', 'Release_dev']\r\n```\r\n\r\nto my Podfile and ran `pod install` command\r\n\r\n\r\n## What did you expect to happen?\r\n\r\nHaving `BugfenderSDK` and `Firebase\/Crashlytics` frameworks embedded in final IPA files only when built with 'Debug_dev' and 'Release_dev' configurations.\r\n\r\n## What happened instead?\r\n\r\n`BugFenderSDK` framework is indeed visible only in IPA'a built via 'Debug_dev' \/ 'Release_dev', but Firebase is visible on all possible configurations that I'm building my app.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.9.1\r\n        Ruby : ruby 2.6.5p114 (2019-10-01 revision 67812) [x86_64-darwin19]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.15.3 (19D76)\r\n       Xcode : 11.3.1 (11C505)\r\n         Git : git version 2.25.0\r\nRuby lib dir : \/Users\/axadiw\/.rbenv\/versions\/2.6.5\/lib\r\nRepositories : master - git - https:\/\/github.com\/CocoaPods\/Specs.git @ 590bdf0b22f980c4923a83e8a80bd034a1518c00\r\n\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/axadiw\/.rbenv\/versions\/2.6.5\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.4.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '12.0'\r\ninhibit_all_warnings!\r\nuse_frameworks!\r\n\r\ntarget 'MyProject' do\r\n  pod 'FirebaseCrashlytics', '4.0.0-beta.6', :configurations => ['Debug_dev', 'Release_dev']\r\n  pod 'BugfenderSDK', '1.8', :configurations => ['Debug_dev', 'Release_dev']\r\nend\r\n```\r\n\r\nPS. Posted originally on https:\/\/github.com\/firebase\/firebase-ios-sdk\/issues\/5217\r\n","comments":["Thanks for the report. Please share a reproducible example.","Sure: https:\/\/github.com\/Axadiw\/cocoapods-configuration-issue\r\n\r\nArchives from \"dev\" schem have bugfender & firebase frameworks, scheme \"prod\" still have firebase","Thanks. I'm able to reproduce.\r\n\r\nIt looks like the `:configuration` restriction in the `Podfile` only applies to specified pod itself and not the pod's dependencies.  Thus in your example, the `Firebase` pod is excluded from the configuration's build, but none of its transitive dependencies are.\r\n\r\nTherefore, a workaround would be to explicitly specify and restrict each of the dependencies in the `Podfile`: FirebaseCrashlytics, FirebaseCore, GoogleUtiliites, etc. See the `Podfile.lock` to see the full list.\r\n\r\nThen you can verify they get removed by\r\n\r\n`git diff  \"Pods\/Target Support Files\/Pods-cocoapods-configuration-issue\/Pods-cocoapods-configuration-issue.release_dev.xcconfig\"` in the example project you provided.\r\n\r\nIf I get a chance, I'll try to investigate why CocoaPods doesn't properly limit the dependencies to the right configurations. It might be tricky since it might not be easy to do separate dependency trees for each configuration ....\r\n\r\n","Thanks, it's working for me when I've explicitly mentioned everyting that stands for Crashlytics\r\n\r\n```\r\npod 'Firebase', '6.21.0', :configurations => ['Debug_dev', 'Release_dev']\r\n  pod 'FirebaseAnalyticsInterop', '1.5.0', :configurations => ['Debug_dev', 'Release_dev']\r\n  pod 'FirebaseCore', '6.6.5', :configurations => ['Debug_dev', 'Release_dev']\r\n  pod 'FirebaseCoreDiagnostics', '1.2.2', :configurations => ['Debug_dev', 'Release_dev']\r\n  pod 'FirebaseCoreDiagnosticsInterop', '1.2.0', :configurations => ['Debug_dev', 'Release_dev']\r\n  pod 'FirebaseCrashlytics', '4.0.0-beta.6', :configurations => ['Debug_dev', 'Release_dev']\r\n  pod 'FirebaseInstallations', '1.1.1', :configurations => ['Debug_dev', 'Release_dev']\r\n  pod 'GoogleDataTransport', '5.1.0', :configurations => ['Debug_dev', 'Release_dev']\r\n  pod 'GoogleDataTransportCCTSupport', '2.0.1', :configurations => ['Debug_dev', 'Release_dev']\r\n  pod 'GoogleUtilities', '6.5.2', :configurations => ['Debug_dev', 'Release_dev']\r\n  pod 'PromisesObjC', '1.2.8', :configurations => ['Debug_dev', 'Release_dev']\r\n  pod 'nanopb', '0.3.9011', :configurations => ['Debug_dev', 'Release_dev']\r\n  pod 'FirebaseAnalytics', '6.4.0', :configurations => ['Debug_dev', 'Release_dev']\r\n  pod 'GoogleAppMeasurement', '6.4.0', :configurations => ['Debug_dev', 'Release_dev']\r\n```\r\n\r\n\r\nBTW. I still see that when I'm building other configurations (\"prod\" ones from the example app), all firebase dependencies are being built anyways. Is it normal behaviour? Would it be possible to skip these builds in order to save compile time?","This problem is similar to one that is currently affecting the latest version of React Native (`0.62`):\r\nhttps:\/\/github.com\/react-native-community\/upgrade-support\/issues\/28\r\n\r\nListing all the transitive dependencies would stop working as soon as you update the problematic pod and that pod has changed its dependencies. So this approach would constantly force you to be checking Podfile.lock to identify all transitive dependencies that needs to be excluded and move them to the Podfile. Not ideal IMHO.\r\n\r\nWould it be possible to have cocoapods exclude all dependencies of the excluded pods?\r\n\r\nThanks!","Regarding:\r\n\r\n> BTW. I still see that when I'm building other configurations (\"prod\" ones from the example app), all firebase dependencies are being built anyways. Is it normal behaviour? Would it be possible to skip these builds in order to save compile time?\r\n\r\n\r\nI do not think building can be avoided as the dependency is mapped on Xcode using the \"Dependencies\" section in Build Phases for each target.\r\n\r\nI do not think Xcode supports dependencies per configuration.\r\n\r\nThe important bit is whether or not the dependency gets linked. If you have specified \"Debug\" and you see `-framework MyDependency` or`-l MyDependency` in the CocoaPods generated xcconfig for \"Release\" for that target then it is a bug in CocoaPods. Although this is very thoroughly tested.","We would need to implement an enhancement to support this.\r\n                    ","This has come up before and I attempted to fix it but struggled to handle some cases.\r\n\r\nHere's the PR: https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/9066\r\nOriginal Issue: https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/6838","The branch is still up if anyone wants to try updating it. There's some comments on the PR explaining what needs to be improved","> Thanks, it's working for me when I've explicitly mentioned everyting that stands for Crashlytics\r\n> \r\n> ```\r\n> pod 'Firebase', '6.21.0', :configurations => ['Debug_dev', 'Release_dev']\r\n>   pod 'FirebaseAnalyticsInterop', '1.5.0', :configurations => ['Debug_dev', 'Release_dev']\r\n>   pod 'FirebaseCore', '6.6.5', :configurations => ['Debug_dev', 'Release_dev']\r\n>   pod 'FirebaseCoreDiagnostics', '1.2.2', :configurations => ['Debug_dev', 'Release_dev']\r\n>   pod 'FirebaseCoreDiagnosticsInterop', '1.2.0', :configurations => ['Debug_dev', 'Release_dev']\r\n>   pod 'FirebaseCrashlytics', '4.0.0-beta.6', :configurations => ['Debug_dev', 'Release_dev']\r\n>   pod 'FirebaseInstallations', '1.1.1', :configurations => ['Debug_dev', 'Release_dev']\r\n>   pod 'GoogleDataTransport', '5.1.0', :configurations => ['Debug_dev', 'Release_dev']\r\n>   pod 'GoogleDataTransportCCTSupport', '2.0.1', :configurations => ['Debug_dev', 'Release_dev']\r\n>   pod 'GoogleUtilities', '6.5.2', :configurations => ['Debug_dev', 'Release_dev']\r\n>   pod 'PromisesObjC', '1.2.8', :configurations => ['Debug_dev', 'Release_dev']\r\n>   pod 'nanopb', '0.3.9011', :configurations => ['Debug_dev', 'Release_dev']\r\n>   pod 'FirebaseAnalytics', '6.4.0', :configurations => ['Debug_dev', 'Release_dev']\r\n>   pod 'GoogleAppMeasurement', '6.4.0', :configurations => ['Debug_dev', 'Release_dev']\r\n> ```\r\n> \r\n> BTW. I still see that when I'm building other configurations (\"prod\" ones from the example app), all firebase dependencies are being built anyways. Is it normal behaviour? Would it be possible to skip these builds in order to save compile time?\r\n\r\nHi,\r\n\r\nBy the way, you can put this in a vatiable:  ['Debug_dev', 'Release_dev']\r\n\r\n```ruby\r\n$firebaseConfigurations = ['Debug_dev', 'Release_dev']\r\npod 'Firebase', '6.21.0', :configurations => $firebaseConfigurations \r\npod 'FirebaseAnalyticsInterop', '1.5.0', :configurations => $firebaseConfigurations \r\n```\r\n\r\nBest regards,","Hi,\r\nAny news?\r\n_Maybe can be interesting to configure the array of configuration at the top of the target block instead of duplicate on each line ; So directly below target like an \"attribute\"._"],"labels":["t1:enhancement","d2:moderate"]},{"title":"Here's how we improved our build speed and debugger experience","body":"## Preambula\r\n\r\nWe use CocoaPods (1.9), and we have ~170 devpods. Those are dynamic frameworks which we link as static in Release builds using CocoaPods Amimono-like plugin.\r\n\r\nWe experienced a huge LLDB slow-on-breakpoint issue.\r\n\r\n## Research\r\n\r\nAfter discussing this on [Swift forums](https:\/\/forums.swift.org\/t\/lldb-is-slow-to-resolve-local-vars\/32517\/58) we end up patching resulting projects and support files after `pod install` finishes the following way:\r\n\r\n- Removing most of `modulemap` files generated by CocoaPods\r\n- Excluding `dummy.m` files from compilation process.\r\n\r\n## Impact\r\n\r\n- This improved LLDB speed by 45%. \r\n- This also reduced compilation time: e.g. clean build of tests 239 seconds -> 208 seconds.\r\n\r\n## Caveats\r\n\r\n-  CocoaPods generated modulemap allows to mix ObjC and Swift as well. Also, `modulemap` files have a reference to umbrella header that includes UIKit (for convenience I guess, but that's debatable).\r\n- `dummy.m` allows to build source-less pods I guess. \r\n\r\n## Appeal to the CocoaPods team\r\n\r\n- Please consider allowing to disable `modulemap` generation, and allow to provide a replacement natively e.g. using Podfile syntax. This will break compilation in most code bases thought, as `import UIKit` must be added explicitly to the source files. But I think any explicitness is better than implicitness. Optionality of this feature can save most users from fixing their imports.\r\n- Please consider allowing to remove `dummy.m` files - I bet this is where build speed impact comes from. ","comments":["Yes! As you say, the breaking change is a problem so it will have to be for 2.0.\r\n\r\n","This can be done as optional functionality, and can be enabled in podfile somehow as a feature flag, e.g. like `generate_multiple_pod_projects` but on per-pod basis.","I havent read the Swift forums thread in detail but why does: \r\n\r\n> Excluding dummy.m files from compilation process.\r\n\r\nhelp so much with this?","I guess because Xcode doesn't have to execute clang. Even though the dummy class is simple, clang execution takes some time.","Hello! Also, you can prebuild pods. It improves debugging speed for the remaining ones.\r\nAnd then you need to rebuild only changed pods.\r\n\r\nI've had similar problems and developed my own utility \ud83c\udfc8 [Rugby](https:\/\/github.com\/swiftyfinch\/Rugby)\r\n\r\nAlso, there is a page about [Pre-compiling dependencies](https:\/\/guides.cocoapods.org\/plugins\/pre-compiling-dependencies.html) on the official CocoaPods website. But I had troubles with these solutions and I don't know Ruby well."],"labels":["t1:enhancement","d2:moderate","help wanted"]},{"title":"prefix_header_file custom content or post_install hook","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n    ```ss.prefix_header_file = 'ios\/PrefixHeader.pch'```\r\n\r\n## What did you expect to happen?\r\nI expected the content of my provided prefix header file to be the only content of the resulting prefix header file inte the target. Or at least some alternative where it was possible to prepend the default content.\r\n\r\n## What happened instead?\r\nThe content of my provided prefix header file appends to the end of a default prefix header file. Which in my case with OpenCV does not work since that headers needs to be included before any objective c parts.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.6.0\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]\r\n    RubyGems : 3.0.6\r\n        Host : Mac OS X 10.15.3 (19D76)\r\n       Xcode : 11.3.1 (11C504)\r\n         Git : git version 2.21.1 (Apple Git-122.3)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 20c4d13a7bbfb4a1871705bc38fe0266eed3841a\r\n               trunk -  @ fatal: not a git repository (or any of the parent directories): .git\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.4.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n\r\nI have posted a question about this over at stackoverflow as well: https:\/\/stackoverflow.com\/questions\/60745713\/cocoapods-complete-custom-prefix-header-file-using-prefix-header-file-only-appe","comments":["Are you saying you are trying to set this file as the contents but instead its setting that string as the contents?","The file itself is Ruby you can also read the file and pass the contents as a string.","Okey, sorry if my question was perhaps a bit unclear.\r\n\r\nwhat I have today in my .podspec:\r\n```\r\ns.subspec \"DocumentDetector\" do |ss|\r\n    ss.dependency 'react-native-camera\/RN'\r\n    ss.dependency 'react-native-camera\/RCT'\r\n    ss.dependency 'OpenCV'\r\n    ss.prefix_header_file = 'ios\/PrefixHeader.pch'\r\n  end\r\n```\r\n\r\nthe resulting content of the prefix header file:\r\n```\r\n#ifdef __OBJC__\r\n#import <UIKit\/UIKit.h>\r\n#else\r\n#ifndef FOUNDATION_EXPORT\r\n#if defined(__cplusplus)\r\n#define FOUNDATION_EXPORT extern \"C\"\r\n#else\r\n#define FOUNDATION_EXPORT extern\r\n#endif\r\n#endif\r\n#endif\r\n\r\n\r\n#ifndef PrefixHeader_pch\r\n#define PrefixHeader_pch\r\n\r\n#ifdef __cplusplus\r\n#include \"opencv2\/opencv.hpp\"\r\n\/\/ include other opencv2 headers if needed.\r\n#endif\r\n\r\n#endif \/* PrefixHeader_pch *\/\r\n```\r\n\r\nAnd what I acctually need to achieve, notice that my custom content needs to be in the beginning:\r\n```\r\n#ifndef PrefixHeader_pch\r\n#define PrefixHeader_pch\r\n\r\n#ifdef __cplusplus\r\n#include \"opencv2\/opencv.hpp\"\r\n\/\/ include other opencv2 headers if needed.\r\n#endif\r\n\r\n#endif \/* PrefixHeader_pch *\/\r\n\r\n#ifdef __OBJC__\r\n#import <UIKit\/UIKit.h>\r\n#else\r\n#ifndef FOUNDATION_EXPORT\r\n#if defined(__cplusplus)\r\n#define FOUNDATION_EXPORT extern \"C\"\r\n#else\r\n#define FOUNDATION_EXPORT extern\r\n#endif\r\n#endif\r\n#endif\r\n```\r\n\r\n\r\n","> The file itself is Ruby you can also read the file and pass the contents as a string.\r\n\r\nEven if I pass the content as string (assuming you mean to the ```prefix_header_contents```) it will still get appended at the end of the file. Or am I missing something here?\r\n","ah this is not possible yet. We need to expand the `prefix_header_contents` DSL to support `:append`, `:prepend` and `:replace` perhaps.","I think the easiest way to handle it is to add another new option, let's call it `prefix_header_file_override=false`, if this option is set to false, then just use `prefix_header_file` as it is.\r\n\r\nBy the way, any workaround now?\r\n\r\nI think this is mainly required by OpenCV users... also see https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/9320","I think a `post_install` hook allows you to do pretty much everything, including replacing the contents of the file.\r\n\r\nWith 1.10.0.beta.1 there is also a post integrate hook if you want to do it _after_ the xcodeproj has been written to disk.","> I think a `post_install` hook allows you to do pretty much everything, including replacing the contents of the file.\r\n> \r\n> With 1.10.0.beta.1 there is also a post integrate hook if you want to do it _after_ the xcodeproj has been written to disk.\r\n\r\nYeah, that works, thanks @dnkoutso \ud83d\udc4d .\r\n\r\nFor those who have the same issue, here is what I have in the `Podfile`:\r\n\r\n```ruby\r\npost_install do |installer|\r\n  installer.pods_project.targets.each do |target|\r\n    target.build_configurations.each do |config|\r\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\r\n    end\r\n  end\r\n\r\n  # Modify the generated prefix file\r\n  prefixFile = 'Pods\/Target Support Files\/opencv_helper\/opencv_helper-prefix.pch'\r\n  puts \"updating prefix file #{prefixFile} ...\"\r\n  text = File.read(prefixFile)\r\n  new_text = \"#ifdef __cplusplus\\n#include <opencv2\/opencv.hpp>\\n#endif\\n\\n\" + text\r\n\r\n  File.open(prefixFile, \"w\") {|file| file.puts new_text }\r\nend\r\n\r\n```","nice @drriguz .\r\n\r\nOne thing that could be safer is to use the `pod_target.rb` API from cocoapods within the post_install hook. You can then invoke `prefix_header_path` which would give you the path for the pod target so you dont have to hardcode it.","thanks a lot @dnkoutso . however, I'm not familiar with ios and ruby,  can you guide me on how to get this `PodTarget` class instance? \ud83d\ude2d  I tried this, \r\n```ruby\r\npost_install do |installer|\r\n    mypod = installer.pods_project.targets.find(\"opencv_helper\").next`\r\nend\r\n```\r\nbut it turns out to be a `PBXAggregateTarget` instance... ","Search against `installer.pod_targets` instead. You are querying against the native Xcode targets. ","@dnkoutso thanks for the quick reply, actually it's very easy \ud83d\ude3f :\r\n\r\n```ruby\r\npost_install do |installer|\r\n  installer.pods_project.targets.each do |target|\r\n    \r\n    target.build_configurations.each do |config|\r\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\r\n    end\r\n  end\r\n  \r\n  opencv_prefix = installer.pod_targets.find{|e| e.pod_name == 'opencv_helper' }.prefix_header_path\r\n  puts \"updating opencv prefix file #{opencv_prefix} ...\"\r\n  \r\n  originalText = File.read(opencv_prefix)\r\n  new_text =\r\n  <<~EOS\r\n    #ifdef __cplusplus\r\n    #include <opencv2\/opencv.hpp>\r\n    #endif\r\n    \r\n    #{originalText}\r\n  EOS\r\n  \r\n  File.open(opencv_prefix, \"w\") {|file| file.puts new_text }\r\nend\r\n\r\n\r\n```"],"labels":["t1:enhancement","d2:moderate","help wanted","s7:workaround available"]},{"title":"Ability to add custom script phases to user project","body":"I have third-party static framework, that should be integrated with custom script in user project.\r\nI want to distribute that framework in my internal projects via cocoapods.\r\nIt would be nice to have ability to integrate custom scripts not only in pods projects, but in user project too.\r\n\r\nI've found some related code in [cocoapods\/installer\/user_project_integrator\/target_integrator.rb](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/installer\/user_project_integrator\/target_integrator.rb) `create_or_update_user_script_phases`, but it looks like I can't use it via podspec.","comments":["Yeap could be an enhancement although it is a bit scary to give the ability for someone to do that.","But what difference between custom scripts in pods project which already implemented and in user project?","yeah I agree with you not much difference. We warn today that a pod installed a bunch of script phases. \r\n\r\n","this has been discussed at length before, and i believe we settled on not allowing this as it would only cause severe complications to the cocoapods users and give individual pod owners the power to break or push malicious code directly into other people's project files without warning -- not to mention breaking the user's project targets by messing with build phase ordering and adding a bunch of new build phases.","But you could make it work only if user explicitly enable this in podfile","That could work with `s.user_script_phase` or something like that."],"labels":["t1:enhancement","d2:moderate"]},{"title":"pod lib lint - ERROR | [watchOS] unknown: Encountered an unknown error (CocoaPods could not find compatible versions for pod \"FirebaseCore\"","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\npod lib lint MYPOD.podspec --allow-warnings\r\n\r\n## What did you expect to happen?\r\n\r\nno errors\r\n\r\n## What happened instead?\r\n\r\n- ERROR | [watchOS] unknown: Encountered an unknown error (CocoaPods could not find compatible versions for pod \"FirebaseCore\":\r\n\r\nIn my .podspec i set that firebase should only be available on all other platforms .....\r\n\r\nCan anyone help?\r\n\r\n## CocoaPods Environment\r\n\r\n```\r\n   CocoaPods : 1.8.4\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.15.3 (19D76)\r\n       Xcode : 11.3.1 (11C504)\r\n         Git : git version 2.21.1 (Apple Git-122.3)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : master - git - https:\/\/github.com\/CocoaPods\/Specs.git @ a9f329b380ba8b6cc66a7d9542d0d82d0c913b40\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.4.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### MY .podspec\r\n\r\n```\r\nPod::Spec.new do |s|\r\n\r\n  s.name         = 'MyPod'\r\n  s.version      = '2.0.0'\r\n  s.summary      = 'MyPod'\r\n\r\n  s.description  = <<-DESC\r\n  MyPod.\r\n  DESC\r\n\r\n  s.homepage     = 'https:\/\/XXX.org\/XXX\/mypod'\r\n  s.license      = 'MIT'\r\n\r\n  s.authors      = { 'XXX' => 'XXX' }\r\n\r\n  s.source       = { :git => 'https:\/\/XXX.org\/XXX\/mypod.git', :tag => s.version.to_s }\r\n  \r\n  s.requires_arc = true\r\n  s.static_framework = true\r\n\r\n  s.swift_version               = '5.0'\r\n  s.ios.deployment_target       = '10.0'\r\n  s.watchos.deployment_target   = '3.0'\r\n  s.tvos.deployment_target      = '10.0'\r\n  s.osx.deployment_target     = '10.11'\r\n\r\n  s.frameworks = 'Foundation'\r\n  s.source_files = 'Sources\/Core\/*.swift'\r\n\r\n  s.dependency 'CleanroomLogger', '~> 7.0'\r\n  s.dependency 'Logger'\r\n\r\n  s.default_subspecs = 'FirebaseCrashlytics'\r\n\r\n  s.subspec 'FirebaseCrashlytics' do |sp|\r\n    sp.source_files = 'Sources\/FirebaseCrashlytics\/*.swift'\r\n    sp.ios.dependency 'Firebase\/Crashlytics'\r\n    sp.tvos.dependency 'Firebase\/Crashlytics'\r\n    sp.osx.dependency 'Firebase\/Crashlytics'\r\n  end\r\n\r\n  s.subspec 'Crashlytics' do |sp|\r\n    sp.source_files = 'Sources\/Crashlytics\/*.swift'\r\n    sp.ios.dependency 'Crashlytics'\r\n    sp.tvos.dependency 'Crashlytics'\r\n    sp.osx.dependency 'Crashlytics'\r\n  end\r\n\r\nend\r\n```\r\n","comments":["The error message points in the right direction. FirebaseCore requires at least watchOS 6.0 and the podspec is at 3.0.  See https:\/\/github.com\/CocoaPods\/Specs\/blob\/master\/Specs\/8\/b\/d\/FirebaseCore\/6.6.1\/FirebaseCore.podspec.json#L21","yeah right but the firebase dependency is only for iOS, tvOS and OSX(macOS) not for watchOS\r\n    sp.ios.dependency 'Firebase\/Crashlytics'\r\n    sp.tvos.dependency 'Firebase\/Crashlytics'\r\n    sp.osx.dependency 'Firebase\/Crashlytics'","@paulb777 any further updates here?","@dnkoutso Looks like a CocoaPods bug since it shouldn't be checking the `watchos` version when `watchos` is not included in the platform list.","ah I see...interesting will keep it open then.","@Bino90 I took an initial stab at this and didn't repro. Would you send a repro example?\r\n\r\nAlso, a workaround may be running `pod lib lint` separately for the different platforms with the `--platforms` options.","I was able to repro this a while ago but I forgot again how i did it...still keeping this for 1.10 for a bit but I think we will punt if the time comes to release 1.10.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n"],"labels":["help wanted"]},{"title":"Specify source for single dependency","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\nSuppose there is a private specs repo contains `Foo`, `AFNetworking`. \r\n**I want to install `Foo` from this private repo and install `AFNetworking` from the Master repo.**\r\n\r\n```ruby\r\ntarget 'PodfileTest' do\r\n    pod 'AFNetworking'\r\n    pod 'Foo', :source => 'http:\/\/private\/repo.git'\r\nend\r\n```\r\n\r\nAfter `pod update`, **both `AFNetworking` and `Foo` are installed from the private repo**.\r\n\r\nAdding a global source won't help:\r\n\r\n```ruby\r\nsource 'https:\/\/cdn.cocoapods.org\/'\r\n\r\ntarget 'PodfileTest' do\r\n    pod 'AFNetworking'\r\n    pod 'Foo', :source => 'http:\/\/private\/repo.git'\r\nend\r\n```\r\n\r\nI must specify `source` for `AFNetworking`:\r\n\r\n```ruby\r\ntarget 'PodfileTest' do\r\n    pod 'AFNetworking', :source => 'https:\/\/cdn.cocoapods.org\/'\r\n    pod 'Foo', :source => 'http:\/\/private\/repo.git'\r\nend\r\n```\r\n\r\nI don't know if the design is so.\r\n\r\n","comments":["I believe the precedence can be controlled by manually specifying the sources in the order they should be resolved.\r\n\r\n```ruby\r\n# Use CocoaPods repo first, private one second\r\nsource 'https:\/\/cdn.cocoapods.org\/'\r\nsource 'http:\/\/private\/repo.git`\r\n```","@amorde Many thanks for your reply.\r\n\r\nIt seems the dependency resolver does not take account of the order of the global sources, for example:\r\n\r\n```ruby\r\nsource 'https:\/\/cdn.cocoapods.org\/'\r\nsource 'https:\/\/github.com\/ElfSundae\/CocoaPods-Specs.git'\r\n\r\nplatform :ios, '9.0'\r\n\r\ntarget 'PodSourceDemo' do\r\n    pod 'AFNetworking'\r\nend\r\n```\r\n\r\nAfter `pod install`, `AFNetworking` are installed from the private repo, because the version of AFNetworking in the private repo is greater than in the trunk repo.\r\n","There are two issues about the `source` directive:\r\n\r\n\\#1 The scope of the `:source` parameter in `pod` method, is not local (just for this `pod` method), but global.\r\n\r\n```ruby\r\nsource 'https:\/\/cdn.cocoapods.org\/'\r\n\r\nplatform :ios, '9.0'\r\n\r\ntarget 'PodSourceDemo' do\r\n    pod 'AFNetworking'\r\n    pod 'SocketRocket', :source => 'https:\/\/github.com\/ElfSundae\/CocoaPods-Specs.git'\r\nend\r\n```\r\n\r\n`AFNetworking` will be installed from `ElfSundae\/CocoaPods-Specs` too.\r\n\r\n> **By default** the sources specified at **the global level are searched** in the order they are specified for a dependency match.\r\n>\r\n> <cite>via [\"Source\" section of the `pod` syntax reference](https:\/\/guides.cocoapods.org\/syntax\/podfile.html#pod)<\/cite>\r\n\r\n\\#2 The order of the sources is irrelevant.\r\n\r\n```ruby\r\nsource 'https:\/\/cdn.cocoapods.org\/'\r\nsource 'https:\/\/github.com\/ElfSundae\/CocoaPods-Specs.git'\r\n\r\nplatform :ios, '9.0'\r\n\r\ntarget 'PodSourceDemo' do\r\n    pod 'AFNetworking'\r\nend\r\n```\r\n\r\n`AFNetworking` will be installed from `ElfSundae\/CocoaPods-Specs`.\r\n\r\n> The order of the sources is **relevant**. CocoaPods will use the highest version of a Pod of the first source which includes the Pod (**regardless whether other sources have a higher version**).\r\n>\r\n> <cite>via [`source` syntax reference](https:\/\/guides.cocoapods.org\/syntax\/podfile.html#source)<\/cite>\r\n","The second issue is covered by https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8679 I believe - that has yet to be resolved.\r\n\r\nUnfortunately I'm not personally familiar with dependency resolution enough to speak on 1","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","A demo project was uploaded at https:\/\/github.com\/ElfSundae\/PodfileSourceDemo"],"labels":["t2:defect","d2:moderate","help wanted"]},{"title":"prepare_command is executed when pod is installed with :path","body":"* [X] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nAdded `prepare_command` to my podspec and ran `bundle exec pod install` in project's directory that installs my pod with `:path`.\r\n\r\n## What did you expect to happen?\r\n\r\n`prepare_command` isn't executed as stated in the [docs](https:\/\/guides.cocoapods.org\/syntax\/podspec.html#prepare_command):\r\n\r\n> If the pod is installed with the :path option this command will not be executed.\r\n\r\n## What happened instead?\r\n\r\n`prepare_command` is executed.\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.8.4\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-darwin18]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.14.6 (18G1012)\r\n       Xcode : 11.2.1 (11B500)\r\n         Git : git version 2.21.0 (Apple Git-122.2)\r\nRuby lib dir : \/Users\/kambala\/.rbenv\/versions\/2.6.3\/lib\r\nRepositories : master - git - https:\/\/github.com\/CocoaPods\/Specs.git @ 7049f209245769070d93f191a6b386e49b7c8042\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/kambala\/.rbenv\/versions\/2.6.3\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.4.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nios_deployment_target = '8.0'\r\nplatform :ios, ios_deployment_target\r\n\r\nabstract_target 'example' do\r\n  pod 'MyPod', :path => '..\/'\r\n\r\n  target 'MyPod_Example'\r\n\r\n  abstract_target 'framework' do\r\n    use_frameworks!\r\n    target 'MyPod_Example-framework'\r\n  end\r\nend\r\n\r\ntarget 'MyPod_Widget' do\r\n  pod 'MyPod\/Widget', :path => '..\/'\r\nend\r\n\r\npost_install do |installer|\r\n  installer.pods_project.targets.each do |target|\r\n    target.build_configurations.each do |config|\r\n      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_deployment_target\r\n    end\r\n  end\r\n\r\n  # this is basically the same as the contents of my prepare_command, added it as docs say that prepare_command won't be executed when pod is installed with :path\r\n  `sed -i '' -e 's\/trackingID\/trackingId\/g' Pods\/GoogleAnalytics\/Sources\/GAI.h`\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nAny sample project would do.\r\n\r\n## Additional info\r\n\r\nI've added `echo $(pwd)` to `prepare_command` and it shows the root of the repo (where podspec is located).","comments":["The docs might be outdated. ","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","which extra input is needed? The docs should be updated\/fixed then.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","bump","> The docs might be outdated.\r\n\r\nI went into this too. I found the CocoaPods source about this\r\n\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/44243c7d96009157b590962324a1e3d405178ff4\/lib\/cocoapods\/installer\/pod_source_installer.rb#L70\r\n\r\n So, the expected behavior should be `prepare_command only be executed when installed with :path` ? Or, maybe there should replace `if` using `unless`?","@TragedyStar There are some other process to call `PodSourcePreparer.new`\r\n<img width=\"1039\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/8394612\/195604576-c95d8abc-e12b-4e4d-9d45-8829c926f621.png\">\r\n"],"labels":["s2:confirmed"]},{"title":"Local Podspec may got wrong cache","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x ] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n1. pod install with a pod have git commit dependency\uff0ccoocapod pre download the spec into Local Podspecs\r\n2. switch to another commit, which the pod dep on a different commit.\r\n3. pod install and cancel before finish. Local Podspecs got touch by the different spec.\r\n4. switch back\r\n5. pod install\r\n6. conflict occur because wrong Local Podspecs's version is not consistent with the desired one.\r\n\r\n## What did you expect to happen?\r\n\r\nget the correct local podspec when switch back\r\n\r\n## What happened instead?\r\n\r\nuse the wrong local podspec cache","comments":["this issue is similar to https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/9128, but that is sandbox's source cache is incorrect, this is local podspec. and the both reason is cancel the install, and break the atomicity of install.","Yeap this is probably an issue that i had found earlier with the local cache using the wrong directory to load the podspec from.\r\n\r\nPlease also upgrade to 1.8.4 if you haven't already as we have fixed another issue surrounding checksum generator of local podspecs."],"labels":["t2:defect"]},{"title":"Pod install with Incremental installation does not update changed project file","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n**TLDR:** incremental `pod install` does not check user changes of generated xcodeprjects\r\n\r\n## What did you do?\r\n\r\n1. Create empty test project with single development pod\r\n2. Turn on Incremental installation flag\r\n3. Create git branch and checkout in it\r\n4. Execute `pod install`\r\n5. Add new file to development pod project via Xcode interface\r\n6. Do _not_ execute pod install\r\n7. Commit changes\r\n8. Change branch back to master branch. No new file in this branch\r\n9. Execute `pod install`\r\n10. Build project\r\n\r\n## What did you expect to happen?\r\n\r\nI expect CocoaPods to generate new development pod project without file added in another branch. \r\n\r\n## What happened instead?\r\n\r\nFile is missing from file system but still presents in devpod project file what causes compilation error. \r\n\r\n## CocoaPods Environment\r\n\r\n<details><summary>CocoaPods env<\/summary>\r\n<p>\r\n\r\n### Stack\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.8.4\r\n        Ruby : ruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin16]\r\n    RubyGems : 2.6.12\r\n        Host : Mac OS X 10.14.6 (18G103)\r\n       Xcode : 10.3 (10G8)\r\n         Git : git version 2.20.1 (Apple Git-117)\r\nRuby lib dir : \/Users\/vyuignatov\/.rvm\/rubies\/ruby-2.3.3\/lib\r\nRepositories : master - git - https:\/\/github.com\/CocoaPods\/Specs.git @ d0cb7e67ee8edcd0672f504df358c80bcc004c3e\r\n               trunk - CDN - https:\/\/cdn.cocoapods.org\/\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/vyuignatov\/.rvm\/gems\/ruby-2.3.3\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\nclaide-plugins          : 0.9.2\r\ncocoapods-amimono       : 0.0.10.avito\r\ncocoapods-avito-amimono : 0.0.14\r\ncocoapods-deintegrate   : 1.0.4\r\ncocoapods-dependencies  : 1.0.0.beta.1\r\ncocoapods-plugins       : 1.0.0\r\ncocoapods-search        : 1.0.0\r\ncocoapods-stats         : 1.1.0\r\ncocoapods-trunk         : 1.4.1\r\ncocoapods-try           : 1.1.0\r\ncocoapods_debug         : 0.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\ninstall! 'cocoapods',\r\n     :generate_multiple_pod_projects => true,\r\n     :incremental_installation => true\r\n\r\n\r\ntarget 'CacheDemo'\r\npod 'AFNetworking', '~> 1.0'\r\npod 'DevPod', :path => '.\/DevPod'\r\n```\r\n\r\n<\/p>\r\n<\/details>\r\n\r\n## Possible causes and solutions\r\nIncremental pod install validate file system structure but not the xcodeproj file structure. If I add file to xcodeproj and then delete it from file system CocoaPods is blind on this changes.\r\n- Execute `pod install` before changing the branch. This will generate new cache with new structure and after changing the branch it will be invalidated and new xcodeproj will be generated. \r\n- Add some kind of generated project hash to `.project_cache`. This will invalidate cache if current project file is modified in any way.\r\n\r\n## Motivation\r\nWe have large distributed team of developers, with a lot of changes on a daily basis. Executing pod install before changing the branch is huge overhead and it is decreasing value of incremental installation dramatically. If you need spare hands to fix this issue I am happy to contribute to the community but I need some guidance on technical details.\r\n\r\n## Project that demonstrates the issue\r\nYou can see steps to reproduce in readme\r\nhttps:\/\/github.com\/ignatovv\/CocoaPodsCacheDemo","comments":["Yes I believe this is a known issue with development pods not being taken into consideration for incremental installation.","Can you provide any links or another issues related to this problem please, I want to track the progress. I did not find any clues on this by myself.","Sorry there is no other issue except this one! I should have mentioned we've seen this issue internally not so much in public.","Are there any plans to fix it? With this issue in place the incremental `pod install` becomes much less convenient. It means you are not really allowed to mess with generated Xcode project files, but it is very convenient from developer perspective to add\/remove files directly in Xcode instead of putting files on disk and then invoking `pod install`. \r\n\r\nI assume CocoaPods could compute hash of generated Xcode project files, it wouldn't take too much time, but then it will be possible to match on disk state properly and decide should project be re-generated or not.","No plans yet but it might happen for 1.9.x.","The bug is that the project is not being regenerated but I believe there is _another_ issue in which the sandbox can go out of sync due to local development pod changes. I think it might be the same but I haven't verified.\r\n\r\nEither way yes this one is definitely an issue that needs to be corrected.","Should we always mark development pods as dirty? It will slow down install but it seems like that's the _correct_ thing to do since things could change at any point without CocoaPods knowing what changed\r\n","\ud83d\ude2c Incremental would lose a lot of its power for projects that use mostly development pods if we always regenerate those targets.\r\n\r\nThe problem with taking a hash of the project is we've noticed that Xcode can sometimes write new objects to the project file even if nothing has changed during a save. This could cause over generation and likely break incremental installation with every Xcode update that includes new project elements, making it a really high maintenance feature. But maybe the performance hit is worth the correctness? Thoughts @dnkoutso ?","I'd like to believe on the side that Xcode won't be doing too many crazy things and even if it does I suspect it would only affect the projects the user was messing around with.\r\n\r\nI think we should try it with the project cache and see...I'd even er on the side of us trying it internally on our large project first before it gets upstreamed.","I am currently removing it from 1.9.0 milestone as I dont think this will make it.","This adds a lot of inconvenience for us. We constantly see compilation errors after switching branches and performing `pod install`. Then we have to `pod install --clean-install` to make project buildable again. This adds a lot of pain to our developer experience.\r\n\r\nI believe this issue is experienced by anyone who has local development pods and who has more than a single git branch.","> Sorry there is no other issue except this one! I should have mentioned we've seen this issue internally not so much in public.\r\n\r\n@dnkoutso If there is an open one, why people should file another bug report?","@beefon One implementation detail of incremental installation is that it'll selectively regenerate pods whose projects are missing in the sandbox. So if you know the project `DevelopmentPodA.xcodeproj` is dirtied, you can run `rm Pods\/DevelopmentPodA.xcodeproj`  followed by `pod install`, and that will only regenerate that individual project instead of the entire workspace.","@sebastianv1 Sure, we've noticed that, but we have like 70+ dev pods and some 3rdparty pods, and it is hard to know which projects will change after rebasing your branch on top of `develop`. In some cases we can cut off a good minute from `pod install` thanks to incremental project generation, in others - we have to face compilation errors and do `--clean-install`.","It's really annoying bug. I can spend several hours to deal with compilation errors after branch switching. And other developers too. And I think we aren't alone with this issue.\r\n\r\nIt costs us many man-hours. Many human life hours. Why it's not priority? ","There is no sense of priority in dealing with issues. The project is strictly supported by contributors who spend their free time to try to tackle issues but there is no issue triage or planning process. I marked this issue for 1.10.0 for anyone who can help fix it.\r\n\r\n","@west0r if this is a significant issue for your team then maybe you could consider contributing improvements :)\r\n\r\n@beefon if this is causing more friction for you than the decreased `pod install` time is worth, why not disable incremental installation?\r\n","@ignatovv  After some experiments, I think I may find the real reason.\r\n\r\n1. Cocoapods can find file changes in development pods. See: https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/installer\/project_cache\/project_cache_analyzer.rb#L107. If I just add\/remove files in development pods, `changed_targets` will not be nil\r\n2. The direct reason why you encounter the problem is your cache (located in `path\/to\/Pods\/.project_cache\/installation_cache.yaml`) keeps not changed when switching between master and feature branches\r\n3. This behaviour meets expectation because the `Pods` directory is usually ignored but when you switch back to feature branch from master branch, your cache says: `I am fine, do not regenerate project` but actually your project is generated from master branch\r\n4. `update_project_cache` function is called for each install but it will early return if `installation_cache` and `metadata_cache` is both nil. See: https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/installer.rb#L901 But on master branch, they are both nil because `incremental_installation` is false, see: https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/installer.rb#L195\r\n\r\nSo, I think this problem can be resolved by remove `.project_cache` directory from `.gitignore`:\r\n\r\n```bash\r\n**\/Pods\/*\r\n!**\/Pods\/.project_cache\r\n```"],"labels":["t2:defect","s2:confirmed","d2:moderate"]},{"title":"CocoaPods should re-process podspec-based pins on CocoaPods upgrades","body":"\ud83c\udf08\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nUpgrade CocoaPods from 1.7.x to 1.8.x.\r\n\r\n## What did you expect to happen?\r\n\r\nCI would successfully `pod install` after upgrading CocoaPods for pods that point at a specific ruby podspec file (i.e. `pod '<name>', podspec: 'path_to_spec'`).\r\n\r\n## What happened instead?\r\n\r\nIf you do a fresh `pod install` after removing your Pods directory, CocoaPods is forced to regenerated the local podspec.json files for the ruby podspecs referred to explicitly in the Podfile, which results in new checksums for those pods. Our CI environment caches the Pods directory, so committing such changes results in `pod install` failures because checksums for those pods in the Podfile.lock no longer match the Manifest.\r\n\r\n## CocoaPods Environment\r\n\r\nHappy to provide in CP slack if requested, but would prefer not to reveal here.\r\n\r\n## Project that demonstrates the issue\r\n\r\nIf needed, I can produce one.\r\n\r\n## Proposed solution\r\n\r\nBecause upgrading CocoaPods can result in changes in the way it generates json podspecs, which are also cached in the Pods directory, upgrades should attempt to regenerate these.","comments":["There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","> Because upgrading CocoaPods can result in changes in the way it generates json podspecs, which are also cached in the Pods directory, upgrades should attempt to regenerate these.\r\n\r\n+1, agree this would be worth doing"],"labels":["t1:enhancement","help wanted"]},{"title":"Specifying parameters of a pod in the Podfile for the dependency of a test_spec","body":"\ud83c\udf08\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Feature Request\r\n\r\n## Description\r\n\r\nThis feature request is for the ability, within a `Podfile`, to specify the version (and other parameters of the `pod` DSL) of a dependency that was declared in a `test_spec` or `app_spec`.\r\n\r\n## Details\r\n\r\nLet's say I have a pod (`PodA`) that includes a `test_spec`. This `test_spec` declares a dependency (`Quick`):\r\n\r\n```ruby\r\n# PodA.podspec\r\nPod::Spec.new do |s|\r\n  s.name = 'PodA'\r\n\r\n  s.test_spec do |test_spec|\r\n    test_spec.dependency 'Quick'\r\n  end\r\nend\r\n```\r\n\r\nIf I want to include that `test_spec` in a project with a target (`TargetA`), I would declare the `Podfile` as such:\r\n\r\n```ruby\r\n# Podfile\r\nplatform :ios, '10.0'\r\nuse_frameworks!\r\n\r\ntarget 'TargetA' do\r\n  pod 'PodA', testspecs: [\"Tests\"]\r\nend\r\n```\r\n\r\nHere is where the issue lies: If I want to specify a particular git repo and git commit for the `test_spec`'s dependency (`Quick`), at the moment I don't think there is a built-in way to do this without introducing that pod as a dependency of a target in the user project. For example:\r\n\r\n```ruby\r\n\r\n# Podfile\r\nplatform :ios, '10.0'\r\nuse_frameworks!\r\n\r\ntarget 'TargetA' do\r\n  pod 'PodA', testspecs: [\"Tests\"]\r\nend\r\n\r\n# Where should this be specified?\r\n# pod 'Quick', git: 'https:\/\/github.com\/Quick\/Nimble.git', commit: '4ce709f'\r\n```\r\n","comments":["I believe in latest versions (maybe 1.8.4) or `master` you are able to add pods into abstract targets that are not part of any specific target. This way you can potentially use this to customize that.","See this PR although I did not tag the milestone weirdly enough https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/8652","Seems like it shipped with 1.8.x","> See this PR although I did not tag the milestone weirdly enough #8652\r\n\r\nAh ok, thank you. I tried the `abstract_target` approach before creating this issue, but I hadn't realized that despite the warning that's presented, target-less `abstract_target`s are now explicitly allowed.\r\n\r\nUnfortunately, for my project, `cocoapods-binary` doesn't seem to honor `abstract_target`-only pods, but that's more likely an issue with `cocoapods-binary` than with CocoaPods.\r\n\r\nThe only concern that I would raise is that the `abstract_target` approach seems more of a workaround than anything, given the warning that's presented. I can imagine a more permanent solution to the issue at hand involving either removing the warning and creating first-class support for `abstract_target`-only pods (especially pods that are used in a `test_spec`\/`app_spec`), or investigating another mechanism for specifying constraints on a pod outside of the context of a target in the host project.","hmmm kind of true but I cant think of a good DSL to improve on this immediately. Potentially I cant see many folks need this to warrant a first class DSL and perhaps the abstract target way is sufficient?","> perhaps the abstract target way is sufficient?\r\n\r\nAre there any concerns related to not being able to inherit config settings from the lack of a user-specified host target?\r\n\r\nIn 1.8.3 I was running into an issue where the Swift version couldn't be determined because it wasn't specified in the `podspec` and there were no targets to read the setting from:\r\n```\r\n`RxNimble` does not specify a Swift version and none of the targets (`DummyTarget`) integrating it have the `SWIFT_VERSION` attribute set. Please contact the author or set the `SWIFT_VERSION` attribute in at least one of the targets that integrate this pod.\r\n```\r\n(Note that `DummyTarget` is an `abstract_target` here)\r\n\r\nThis issue went away in 1.8.4 but I'm not sure what the exact fix was and whether a similar issue could surface in the future.\r\n\r\nI could see one solution to this being to promote `test_spec` targets to the same status as a host-project target. Then, I believe the following would be true:\r\n\r\nA) Pods declared in an `abstract_target` without any linked concrete targets, but are dependencies of a `test_spec` wouldn't actually be target-less. It would be the `abstract_target` that has no concrete targets. The pod itself would be used by the `test_spec` target.\r\n\r\nB) Pods targets would be able to query\/inherit settings from the `test_spec` target, rather than believing they have no host targets. (Unless `test_spec` targets are already treated as host targets? But based on the error message above, it doesn't seem like they are.)\r\n\r\nAnother solution to this I could see would be to allow selecting `test_spec` and `app_spec` targets using the `target` DSL within a `Podfile`. However, I do agree with you, this starts to get fairly obscure at that point, so it might only be of marginal utility to others. This also might complicate things since the pod would have been declared a dependency of the `test_spec` target in 2 different places at that point.","Btw I do not understand why 1.8.3 -> 1.8.4 fixed that issue for you. 1.8.4 only had one fix that seems completely unrelated to choosing Swift versions.","> Btw I do not understand why 1.8.3 -> 1.8.4 fixed that issue for you. 1.8.4 only had one fix that seems completely unrelated to choosing Swift versions.\r\n\r\nOk I just tested on 1.8.3 and I'm now seeing the same behavior as 1.8.4, so it must be something else that fixed the Swift version issue."],"labels":["t1:enhancement","t3:discussion"]},{"title":"Unable to see XCode\/SwiftUI Previews within CocoaPods frameworks","body":"* [Y] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nSample project https:\/\/github.com\/jayayres\/cocoapodsswiftuipreviewbugreport\r\ngit clone https:\/\/github.com\/jayayres\/cocoapodsswiftuipreviewbugreport.git\r\ncd cocoapodsswiftuipreviewbugreport ; bundle install --binstubs ; bundle exec pod install\r\nOpen in Xcode 11.1, on Mac OS Catalina\r\nTry using SwiftUI preview functionality for Pods\/Development Pods\/MyStaticPod\/MyStaticPodSwiftUIView.swift , Pods\/Development Pods\/MyPod\/MyDynamicPodSwiftUIView.swift, and MyPodTest\/MyPodTest\/MyMainAppSwiftUIView.swift\r\n\r\n## What did you expect to happen?\r\nXCode previews should work for all 3 files.\r\n\r\n## What happened instead?\r\n\r\nXCode previews always fail for MyStaticPodSwiftUIView.swift (which is set up with static_framework = true in its podspec) with:\r\nnoPreviewInfos(arch: \"x86_64\", sdkRoot: \"\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/iPhoneSimulator.platform\/Developer\/SDKs\/iPhoneSimulator13.1.sdk\")\r\n\r\nXCode previews fail most of the time for MyDynamicPodSwiftUIView.swift (unless a clean build is done, and that is the only dynamic pod in which previews are done, and previews are not done first for MyMainAppSwiftUIView.swift) with:\r\n Xcode Previews rendering agent: Error Domain=com.apple.dt.UITestingAgent Code=-1 \"failed to load library at path \"~\/DerivedData\/MyPodTest-hcoikzfhpffncqcobtylgtykwvvb\/Build\/Intermediates.noindex\/Previews\/MyPodTest\/Products\/Debug-iphonesimulator\/MyStaticPod\/MyStaticPod.framework\/MyStaticPod\": Optional(dlopen(~\/DerivedData\/MyPodTest-hcoikzfhpffncqcobtylgtykwvvb\/Build\/Intermediates.noindex\/Previews\/MyPodTest\/Products\/Debug-iphonesimulator\/MyStaticPod\/MyStaticPod.framework\/MyStaticPod, 0): no suitable image found\r\n\r\nor sometimes:\r\nMyPodTest.app: Error Domain=com.apple.dt.UITestingAgent Code=-1 \"Preview provider \"9MyPodTest32MyDynamicPodSwiftUIView_PreviewsV\" does not exist\" UserInfo={NSLocalizedDescription=Preview provider \"9MyPodTest32MyDynamicPodSwiftUIView_PreviewsV\" does not exist}\r\n\r\nIt looks like Xcode internally uses preview-thunk.dylib for previews. It appears that the preview functionality is not working at present within CocoaPods for either static or dynamic frameworks however.\r\n\r\n## CocoaPods Environment\r\n\r\n```\r\n   CocoaPods : 1.8.4\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-darwin18]\r\n    RubyGems : 3.0.6\r\n        Host : Mac OS X 10.15 (19A602)\r\n       Xcode : 11.1 (11A1027)\r\n         Git : git version 2.21.0 (Apple Git-122)\r\nRuby lib dir : \/usr\/local\/var\/rbenv\/versions\/2.6.3\/lib\r\nRepositories : cocoapods- - CDN - https:\/\/cdn.cocoapods.org\/\r\n               master - git - https:\/\/github.com\/CocoaPods\/Specs.git @ 7dd20d6b83719245167a244512860ef8b1ea5e99\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: .\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.4.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nsource 'https:\/\/cdn.cocoapods.org\/'\r\n\r\nplatform :ios, 13.0\r\n\r\ntarget 'MyPodTest' do\r\n  use_frameworks!\r\n\r\n  pod 'MyPod', path: 'lib\/MyPod'\r\n  pod 'MyStaticPod', path: 'lib\/MyStaticPod'\r\nend\r\n```\r\n\r\n\r\n## Project that demonstrates the issue\r\nhttps:\/\/github.com\/jayayres\/cocoapodsswiftuipreviewbugreport.git\r\n","comments":["Have no idea here sorry.","I think Interface Builder doesn't work with static libs, does this work without setting `static_framework = true`?","It partially works with non-static libs. In the example at https:\/\/github.com\/jayayres\/cocoapodsswiftuipreviewbugreport , Pods\/Development Pods\/MyPod\/MyDynamicPodSwiftUIView.swift is in a dynamic lib. If the first file previewed is in a dynamic lib, previews work in that one dynamic lib, but subsequently fail in the main app + other dynamic libs with the \"failed to load library at path\" error. If the first file previewed is in the main app, then subsequently previews fail in all dynamic libs. \r\n\r\nSo it entirely depends on which dynamic lib has the file which is previewed first. ","So is this a cocoapods library issue?","I see. There's definitely some weirdness in this, unfortunately there isn't much documentation on how we are supposed to set things up here.\r\n\r\nFor example, I noticed that `Bundle(for:)` passing a class from a static lib does not return the main bundle when building for Xcode Previews - it returns a bundle pointing to an intermediate directory inside DerivedData. This can mess with resource loading if you rely on that bundle to manually load fonts.\r\n\r\nIt's possible there's something else we could do here but I'm not 100% sure at the moment what we would need to change to make this work more reliably\r\n\r\nEdit: ~SwiftUI~ Xcode Previews","@dnkoutso it could be a CocoaPods issue but I'm not 100% sure. @jayresta if you link your dependencies natively in Xcode (without CocoaPods, and without the CocoaPods script phases) does it work as expected?","A bunch of fixes in Xcode 11.2 for Previews https:\/\/developer.apple.com\/documentation\/xcode_release_notes\/xcode_11_2_release_notes","> Xcode Previews now passes BUILT_PRODUCTS_DIR correctly as a DYLD_FRAMEWORK_PATH when rendering previews to allow you to reference and resolve built frameworks and other products. (53967108)\r\n\r\nThis is interesting, would love to see how this manifests. I haven't tried the 11.2 beta at all yet","I think I have a similar issue trying to use Xcode previews with UIKit. I got this error even on Xcode 11.2.1\r\n```failedToBuildDylib: ld: warning: directory not found for option '-F\/Applications\/Xcode.app\/Contents\/SharedFrameworks-iphonesimulator'\r\nUndefined symbols for architecture x86_64:\r\n  \"___llvm_profile_runtime\", referenced from:\r\n      ___llvm_profile_runtime_user in FirebaseABTesting(ABTConditionalUserPropertyController.o)\r\n      ___llvm_profile_runtime_user in FirebaseABTesting(ExperimentPayload.pbobjc.o)\r\n      ___llvm_profile_runtime_user in FirebaseABTesting(FIRExperimentController.o)\r\n      ___llvm_profile_runtime_user in FirebaseABTesting(FirebaseABTesting-dummy.o)\r\n      ___llvm_profile_runtime_user in FirebaseABTesting(FIRLifecycleEvents.o)\r\n      ___llvm_profile_runtime_user in FirebaseCore(FIRAppAssociationRegistration.o)\r\n      ___llvm_profile_runtime_user in FirebaseCore(FIRComponentType.o)\r\n      ...\r\n     (maybe you meant: ___llvm_profile_runtime_user)\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation) \r\n```\r\nI think this isn't a cocoapods issue, is from Xcode previews, looks like others are having similar problems with static frameworks that contains objective-c code see https:\/\/github.com\/JetBrains\/kotlin-native\/issues\/3059\r\n","Hi, I'm able to reproduce 100% of the times this problem, with any pod, statically or dynamically linked. I'm trying with Xcode 11.2, 11.2.1 and 11.3 beta, and if the iOS Framework has a SwiftUI and at least one Pod, the preview crashes even if the project is completely empty:\r\nhttps:\/\/github.com\/luizmb\/SwiftUIPodsCrash\r\n\r\nI just open a radar but maybe it could be some misconfiguration on the Pods project. It compiles correctly and runs correctly, only the SwiftUI Preview doesn't work.\r\n\r\nAny ideas on how to debug this to understand better the problem?\r\nAny help will be appreciated.","I would recommend attempting to embed the framework natively in Xcode to see if that fixes the issue. We can then try to narrow down what CocoaPods is doing differently\r\n\r\n","Thanks @amorde , I'm gonna try later today and share my findings. So far my workaround is creating the preview in any file that is in the Main App target, that works. But what's more interesting about this workaround is that, if I split the Xcode screen and open the View source code side-by-side to the preview running on main app, then it crashes again!","Hi @amorde,\r\n\r\nI've added 2 branches to my repo:\r\n- Carthage (https:\/\/github.com\/luizmb\/SwiftUIPodsCrash\/tree\/Carthage) that uses Carthage to build externally the Frameworks and embedding using Xcode\r\n- Manual (https:\/\/github.com\/luizmb\/SwiftUIPodsCrash\/tree\/Manual) that adds RxSwift directly as a project in the same workspace and embed into my lib using Xcode framework.\r\n\r\nBoth work as expected, I even added some Rx logic to be sure the 3rd party is working.\r\nWith CocoaPods I still have the previews crash, unless the preview struct is in the main app.","Thank you! I'll try to look into this when I get the chance","Thanks for the support. From my side I'll try to understand better the issue when I have some time and will share here if I learn something.","@luizmb This is more of a workaround I guess but I had success by copying the required frameworks in a folder called `Frameworks` inside the Framework the SwiftUI View you want to preview is belonging to (e.g. LibWithUI in your case).\r\nI looked at projects where the preview was working and by looking at the error messages.\r\nCurrently we run a script in the Build Phases to copy those Frameworks but I\u2019m not sure if this is a setup step that\u2019s missing from CocoaPods atm.\r\n<img width=\"305\" alt=\"Screenshot 2019-11-21 at 10 24 33\" src=\"https:\/\/user-images.githubusercontent.com\/3483604\/69324638-1e606080-0c49-11ea-923f-ce5e0154870f.png\">\r\n","Hi @nicerice \r\n\r\nThanks to your suggestion I managed to make preview work again. Very nice workaround.\r\n\r\nI think I didn't follow exactly what you suggested, because my logs pointed me to a slightly different direction (in my real-world project, I mean). Probably because my DerivedData is located in a custom place (~\/code\/DerivedData) and the intermediates and builds are subfolders of it.\r\n\r\nSo in my case, logs pointed me to:\r\n\/Users\/my.user\/code\/DerivedData\/Build\/Intermediates.noindex\/Previews\/MyProject\/Products\/Debug-iphonesimulator\r\n\r\nWhich is my custom Intermediates folder + \"\/Previews\/MyProject\/Products\/Debug-iphonesimulator\"\r\n\r\nFrom there I open MyViewLib.framework\/Frameworks and noticed that only some frameworks were there, basically only the ones I use Xcode to link.\r\n\r\nInitially I tried to copy Pods_MyViewLib.framework into this folder, but that didn't help. So, instead, I copied all the dependencies that should be there, individually:\r\n\r\nFrom:\r\n\/Users\/my.user\/code\/DerivedData\/Build\/Intermediates.noindex\/Previews\/MyProject\/Products\/Debug-iphonesimulator\/RxSwift\/RxSwift.framework\r\n\r\nTo:\r\n\/Users\/my.user\/code\/DerivedData\/Build\/Intermediates.noindex\/Previews\/MyProject\/Products\/Debug-iphonesimulator\/MyViewLib.framework\/Frameworks\/\r\n\r\nAnd the SwiftUI Preview started working immediately. As you suggested, I'm gonna try to automate this process in my build phases.\r\n\r\nThanks again for the help!","Same issue, can also confirm placing the framework in another Frameworks folder fixed the Previews for me as well.","Any luck in automating this?","Hi @cltnschlosser \r\n\r\nFor now I am using a Xcode Build Phase of type run script, and running this:\r\n\r\n```\r\ncp -R \"$BUILT_PRODUCTS_DIR\/SwiftRex\/SwiftRex.framework\" \"$BUILT_PRODUCTS_DIR\/$FRAMEWORKS_FOLDER_PATH\"\r\ncp -R \"$BUILT_PRODUCTS_DIR\/CombineRex\/CombineRex.framework\" \"$BUILT_PRODUCTS_DIR\/$FRAMEWORKS_FOLDER_PATH\"\r\ncp -R \"$BUILT_PRODUCTS_DIR\/RxSwift\/RxSwift.framework\" \"$BUILT_PRODUCTS_DIR\/$FRAMEWORKS_FOLDER_PATH\"\r\ncp -R \"$BUILT_PRODUCTS_DIR\/RxBluetoothKit\/RxBluetoothKit.framework\" \"$BUILT_PRODUCTS_DIR\/$FRAMEWORKS_FOLDER_PATH\"\r\n```\r\n\r\nNot super elegant but it's what I could come up with in a few minutes.\r\n\r\nOne interesting thing that I found during writing this script, and it could be the root cause of this problem, is that \"Build\" and \"Build for SwiftUI Preview\" are two distinct things, and ALL environment variables are different, including the \"\/Previews\" part between \"Intermediates\" and \"PRODUCT_NAME\".\r\n\r\nMy assumption is that the Embed Pods Framework phase has some hardcoded path that's not working for the Previews because it's assuming the path incorrectly. I'm not familiar with CocoaPods source code but I can try to find something.","That\u2019s all here: https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/generator\/embed_frameworks_script.rb","`${TARGET_BUILD_DIR}\/${FRAMEWORKS_FOLDER_PATH}` It's being installed here, from `\"${BUILT_PRODUCTS_DIR}\/Apollo\/Apollo.framework\"`. Looks like `TARGET_BUILD_DIR` needs to be replaced with `BUILT_PRODUCTS_DIR` when doing a preview build.","Because the env vars are different when building for preview, I believe there should be a way to write this script that works regardless if it's build or preview. I didn't have time to check the Ruby code you sent me, but I'm gonna try when I have some time.","Hmm, it looks like the embed frameworks script only runs for the app itself, and we need the frameworks copied to the correct folders for the frameworks.","Anyone know if there are any mechanisms in cocoapods now to add script phases to the framework targets?","You can add script phases both from `Podfile` and in podspecs. See podspec here https:\/\/guides.cocoapods.org\/syntax\/podspec.html#script_phases.","Right, I was thinking internally in the cocoapods tool itself, but I'll check out how that works, should be similar. I think we need a script like the Embed Frameworks script, but that runs for every pod framework. Script will look similar to the one [here](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/9275#issuecomment-563342091). I think we should be able to just simlink and not copy though.","What seems to work for Previews in frameworks is adding the pod built product paths (`$(BUILT_PRODUCTS_DIR)\/YourFramework`) to `LD_RUNPATH_SEARCH_PATHS`, without needing scripts to copy frameworks over.","Here is a temporary workaround that seems working well \u2014 it overrides `AggregateTargetSettings`, adds more linker search paths for Previews to pick the pods up, and thus does not require manual framework copying.\r\n\r\n```\r\n\/\/ in Podfile\r\n\r\nclass Pod::Target::BuildSettings::AggregateTargetSettings\r\n    BUILT_PRODUCTS_DIR_VARIABLE = \"${BUILT_PRODUCTS_DIR}\"\r\n\r\n    alias_method :ld_runpath_search_paths_original, :ld_runpath_search_paths\r\n\r\n    def ld_runpath_search_paths\r\n        ld_runpath_search_paths_original + custom_ld_paths + [BUILT_PRODUCTS_DIR_VARIABLE]\r\n    end\r\n\r\n    def custom_ld_paths\r\n        return [] unless configuration_name == \"Debug\"\r\n        target.pod_targets.map do |pod|\r\n            BUILT_PRODUCTS_DIR_VARIABLE + \"\/\" + pod.product_basename\r\n        end\r\n    end\r\nend\r\n```","Hmm doesn't seem to be working for me. Looks like it's not picking up transitive dependencies.\r\n\r\nSo I have lib A, which depends on pod B. I have example app for lib A. When I'm in the example app previews don't work because it complains that pod B isn't loaded.\r\n\r\n> Library not loaded: @rpath\/B.framework\/B\r\n|    Referenced from: \/...\/DerivedData\/A-hash\/Build\/Intermediates.noindex\/Previews\/A-Example\/Products\/Debug-iphonesimulator\/A\/A.framework\/A\r\n\r\nEDIT: If I open the example app for lib B, then previews work fine.","Okay got it working for transitive dependencies too. Extended what @andersio posted:\r\n```\r\nclass Pod::Target::BuildSettings::AggregateTargetSettings\r\n    BUILT_PRODUCTS_DIR_VARIABLE = \"${BUILT_PRODUCTS_DIR}\"\r\n\r\n    alias_method :ld_runpath_search_paths_original, :ld_runpath_search_paths\r\n\r\n    def ld_runpath_search_paths\r\n        ld_runpath_search_paths_original + custom_ld_paths + [BUILT_PRODUCTS_DIR_VARIABLE]\r\n    end\r\n\r\n    def custom_ld_paths\r\n        return [] unless configuration_name == \"Debug\"\r\n        target.pod_targets.map do |pod|\r\n            BUILT_PRODUCTS_DIR_VARIABLE + \"\/\" + pod.product_basename\r\n        end\r\n    end\r\nend\r\n\r\nclass Pod::Target::BuildSettings::PodTargetSettings\r\n    BUILT_PRODUCTS_DIR_VARIABLE = \"${BUILT_PRODUCTS_DIR}\"\r\n\r\n    alias_method :ld_runpath_search_paths_original, :ld_runpath_search_paths\r\n\r\n    def ld_runpath_search_paths\r\n        if ld_runpath_search_paths_original\r\n            ld_runpath_search_paths_original + custom_ld_paths + [BUILT_PRODUCTS_DIR_VARIABLE]\r\n        else\r\n            # May just want to not return in this case\r\n            custom_ld_paths + [BUILT_PRODUCTS_DIR_VARIABLE]\r\n        end\r\n    end\r\n\r\n    def custom_ld_paths\r\n        target.dependent_targets.map do |pod|\r\n            BUILT_PRODUCTS_DIR_VARIABLE + \"\/..\/\" + pod.product_basename\r\n        end\r\n    end\r\nend\r\n```\r\n\r\nThe new part is `class Pod::Target::BuildSettings::PodTargetSettings`. I removed the configuration check because there is no configuration_name here. There is `@configuration`, but it was `nil` in my case.\r\nAlso `BUILT_PRODUCTS_DIR_VARIABLE + \"\/..\/\" + pod.product_basename` is kinda a big hack because of the directory traversal, but BUILT_PRODUCTS_DIR_VARIABLE for the pods is the pod folder themselves. Ex: `\/DerivedData\/A-hash\/Build\/Intermediates.noindex\/Previews\/A-Example\/Products\/Debug-iphonesimulator\/A`, so by default it was looking for B in `\/DerivedData\/A-hash\/Build\/Intermediates.noindex\/Previews\/A-Example\/Products\/Debug-iphonesimulator\/A\/B.framework\/B`, but it's actually in `\/DerivedData\/A-hash\/Build\/Intermediates.noindex\/Previews\/A-Example\/Products\/Debug-iphonesimulator\/B\/B.framework\/B`\r\n\r\nEDIT: It doesn\u2019t seem to be perfect though, not sure why, but once you start previewing in one target, you need to do a clean to get previews in other targets to work. May be an xcode issue. So as long as you don\u2019t constantly switch between targets you are previewing then it\u2019s fine. (Example: Start looking at previews in pod A. It works, can switch between files in pod A, etc. If you want to preview files in pod B, then you need to clean build folder and click try again. Now you are soft-locked to pod B, until the next clean build where you can choose a different target.)","Posting this here since this was the only helpful post I came across in searching for a solution. I'm not using Cocoapods in my project, but the underlying issue appears to be the same.\r\n\r\nMy project is modularized into many separate static libraries. When I want to work with SwiftUI previews in a particular UI module I temporarily change that module from `library.static` to `framework`. (This is necessary because SwiftUI previews does not work from `Views` defined in static libraries.)\r\n\r\nThis strategy worked until recently, when I added Realm to my project (as a `framework`). I found that any UI module that depended on another framework (transitively or directly), was failing with `\u201cLibrary not loaded: @rpath\/OtherFramework.framework\/OtherFramework\u201d`.\r\n\r\nSimply adding `$(BUILT_PRODUCTS_DIR)` to `LD_RUNPATH_SEARCH_PATHS` in my UI module did the trick. Thanks to @andersio for this comment: https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/9275#issuecomment-566281575\r\n","I've updated @cltnschlosser's\/@andersio's fix to work with transitive dependencies (ie. pod A depends on pod B which depends on pod C) as the previous fix wasn't working in that scenario. This makes use of `FRAMEWORK_SEARCH_PATHS` which Xcode uses to look for frameworks and adds those to `@rpath`.\r\n\r\n```ruby\r\nclass Pod::Target::BuildSettings::AggregateTargetSettings\r\n    alias_method :ld_runpath_search_paths_original, :ld_runpath_search_paths\r\n\r\n    def ld_runpath_search_paths\r\n        return ld_runpath_search_paths_original unless configuration_name == \"Debug\"\r\n        return ld_runpath_search_paths_original + framework_search_paths\r\n    end\r\nend\r\n\r\nclass Pod::Target::BuildSettings::PodTargetSettings\r\n    alias_method :ld_runpath_search_paths_original, :ld_runpath_search_paths\r\n\r\n    def ld_runpath_search_paths\r\n        return (ld_runpath_search_paths_original || []) + framework_search_paths\r\n    end\r\nend\r\n```","On Xcode 11.3 I've been able to get SwiftUI Previews building by simply disabling Code Coverage gathering for my scheme. The above solutions weren't working as I was still getting \"failedToBuildDylib\" errors for Firebase. In fact, the above fixes don't seem to be necessary at all, at least on my case. Hope this helps someone.\r\n\r\nCredits to: https:\/\/twitter.com\/dannypier\/status\/1190312160557068293 \ud83d\ude4f ","Oh, hey! Was hoping that tweet would come in handy at some point. Thanks for the credit @p4checo.\r\n\r\nI minimized the pain a bit by creating a duplicate target without code coverage that I use while doing UI development and keep the target with code coverage for my logic and CI tests. Not ideal, but it's not much of a day to day pain.","@p4checo @dannypier I'm afraid the error you mentioned is a different one. In the sample project reproducing this error here there's no code coverage at all.\r\nPlease check here:\r\nhttps:\/\/github.com\/luizmb\/SwiftUIPodsCrash\r\n\r\nGo to LibWithUI folder and try to preview SwiftUIView.swift.\r\n\r\nYou will notice that all schemes have \"gather code coverage\" disabled. The other solutions here seem to work for me.\r\n\r\nFor what you reported, I believe a Radar would be great because it really sounds a Xcode issue.","> Oh, hey! Was hoping that tweet would come in handy at some point. Thanks for the credit @p4checo. \r\n\r\nI'm the one that must be thanking you, @dannypier! \ud83d\ude47  I had also spent a couple of hours ripping my hairs off trying to understand why it didn't work.\r\n\r\n> I minimized the pain a bit by creating a duplicate target without code coverage that I use while doing UI development and keep the target with code coverage for my logic and CI tests. Not ideal, but it's not much of a day to day pain.\r\n\r\nYeah, that sounds quite sensible. Happily for us we already had a bunch of targets just for running tests, so it was relatively straightforward to just disable code coverage on our main one. \r\n\r\n@luizmb I'm really sorry that this \"fix\" didn't solve it for your case, however if the other solutions fixed your issue, that's great! I simply mentioned this alternative \"fix\" here so that others could find it on this thread, where more people are likely to land with similar problems.\r\n\r\nLife's good on the cutting edge, right? \ud83d\ude06\ud83d\udd2a \r\n\r\nAs for the Radar\/FB, I can try to open one but Apple will most likely ask for a test project and unfortunately at this moment I can't afford the time to make one that replicates it.","@dannypier Disabling code coverage works for me! Thanks!","If, like me, you're not well versed in ruby and tried the workarounds above but on running `pod install` you got: `NoMethodError - undefined method `+' for nil:NilClass`\r\n\r\nYou should wrap the items you're adding in (${possibly_nil} || []), so for @cltnschlosser's answer, the line that is:\r\n\r\n```\r\nld_runpath_search_paths_original + custom_ld_paths + [BUILT_PRODUCTS_DIR_VARIABLE]\r\n```\r\nwould become:\r\n```\r\n(ld_runpath_search_paths_original || []) + (custom_ld_paths || []) + [BUILT_PRODUCTS_DIR_VARIABLE]\r\n```\r\n\r\nOnce I did that, `pod install` stopped erroring and the previews appeared as expected.","I have a dev pod where I am using a framework and whenever I link the framework in the dev pod, my swiftUI previews break. If I remove the framework from the podspec, the previews work again.\r\n\r\nIn my podspec:\r\n\r\n```\r\ns.vendored_frameworks = 'SomeFramework.framework'\r\n```\r\n\r\nIs this the same issue?","Hello,\r\nwas this ever addressed in the cocoapods sources?","> On Xcode 11.3 I've been able to get SwiftUI Previews building by simply disabling Code Coverage gathering for my scheme. The above solutions weren't working as I was still getting \"failedToBuildDylib\" errors for Firebase. In fact, the above fixes don't seem to be necessary at all, at least on my case. Hope this helps someone.\r\n> \r\n> Credits to: https:\/\/twitter.com\/dannypier\/status\/1190312160557068293 \ud83d\ude4f\r\n\r\nXcode : Version 11.4.1 (11E503a)\r\nThis worked for me also.","Would appreciate someone open a PR here with the proposed fix and a test. This is a long issue thread and its hard to follow which answer is the right one.","I used Gemfile for cocoapods and Ruby 2.6.4p104. so I had this problem.\r\nI changed to not use Gemfile and use Ruby  2.5.1p57.\r\n\r\nthen\r\n```\r\n$ pod install\r\n```\r\nI resolve this problem.\r\n\r\nThis is diff.\r\n```\r\n--- a\/.ruby-version\r\n+++ b\/.ruby-version\r\n@@ -1 +1 @@\r\n-2.6.4\r\n+2.5.1\r\ndiff --git a\/Gemfile b\/Gemfile\r\nindex 8b0c454..0cdb6dd 100644\r\n--- a\/Gemfile\r\n+++ b\/Gemfile\r\n@@ -5,5 +5,5 @@ source \"https:\/\/rubygems.org\"\r\n git_source(:github) {|repo_name| \"https:\/\/github.com\/#{repo_name}\" }\r\n\r\n gem \"fastlane\"\r\n-gem \"cocoapods\"\r\n+# gem \"cocoapods\"\r\n\r\ndiff --git a\/Podfile.lock b\/Podfile.lock\r\nindex a000b61..54110b9 100644\r\n--- a\/Podfile.lock\r\n+++ b\/Podfile.lock\r\n@@ -114,4 +114,4 @@ SPEC CHECKSUMS:\r\n\r\n PODFILE CHECKSUM: 7c9dc03baafc5241ee84a5cc678cec1deda775a7\r\n\r\n-COCOAPODS: 1.9.3\r\n+COCOAPODS: 1.9.0\r\n```\r\n","can someone verify with Xcode 12 Beta 5? https:\/\/twitter.com\/NeoNacho\/status\/1295793181871599616","> can someone verify with Xcode 12 Beta 5? https:\/\/twitter.com\/NeoNacho\/status\/1295793181871599616\r\n\r\nUnfortunately still happens for us (Firebase) using Xcode 12 beta 6, workaround of disabling code coverage still works. Repro steps for us: https:\/\/github.com\/firebase\/firebase-ios-sdk\/issues\/6219#issuecomment-683896871","Tried running a preview that depends on AsyncDisplaykit (Texture pod) with Xcode 12 beta 6 the following workaround \ud83d\udc4d \r\n\r\n```swift\r\nclass Pod::Target::BuildSettings::AggregateTargetSettings\r\n    alias_method :ld_runpath_search_paths_original, :ld_runpath_search_paths\r\n\r\n    def ld_runpath_search_paths\r\n        return ld_runpath_search_paths_original unless configuration_name == \"Debug\"\r\n        return ld_runpath_search_paths_original + framework_search_paths\r\n    end\r\nend\r\n\r\nclass Pod::Target::BuildSettings::PodTargetSettings\r\n    alias_method :ld_runpath_search_paths_original, :ld_runpath_search_paths\r\n\r\n    def ld_runpath_search_paths\r\n        return (ld_runpath_search_paths_original || []) + framework_search_paths\r\n    end\r\nend\r\n```\r\n>RemoteHumanReadableError: Failed to update preview.\r\n>\r\n>The preview process appears to have crashed.\r\n>\r\n>Error encountered when sending 'previewInstances' message to agent.\r\n>\r\n>==================================\r\n>\r\n>|  RemoteHumanReadableError: The operation couldn\u2019t be completed. (BSServiceConnectionErrorDomain error 3.)\r\n>|  \r\n>|  BSServiceConnectionErrorDomain (3):\r\n>|  ==BSErrorCodeDescription: OperationFailed\r\n\r\nI tried disabling code coverage and that didn't work as well.","also crashes in Xcode 11.6","I'm having this issue with Xcode 12 Beta 6. Didn't succeed with the workaround posted by @mycroftcanner \/ @jameshurst but it's possible that I'm doing something wrong here. Code coverage seems already disabled (maybe from earlier Podfile configuration) so workaround from @dannypier (hi!) can't work for me either. ","Hello! \r\n\r\nBased on @jameshurst and @kerrmarin, I fixed my issue with this code in my Podfile:\r\n\r\n```ruby\r\nclass Pod::Target::BuildSettings::AggregateTargetSettings\r\n    alias_method :ld_runpath_search_paths_original, :ld_runpath_search_paths\r\n\r\n    def ld_runpath_search_paths\r\n        return ld_runpath_search_paths_original unless configuration_name == \"Debug\"\r\n        return (ld_runpath_search_paths_original || []) + (framework_search_paths || [])\r\n    end\r\nend\r\n\r\nclass Pod::Target::BuildSettings::PodTargetSettings\r\n    alias_method :ld_runpath_search_paths_original, :ld_runpath_search_paths\r\n\r\n    def ld_runpath_search_paths\r\n        return (ld_runpath_search_paths_original || []) + (framework_search_paths || [])\r\n    end\r\nend\r\n```\r\n\r\nIt removes all errors about `Error Domain=com.apple.dt.UITestingAgent Code=-1 \"failed to load library at path\u2026`\r\n\r\nThen, as I was using Firebase, I found in the crash logs that it also doesn't run the ApplicationDelegate methods and so I also missed the configuration of my FirebaseApp. \r\n\r\nSo I needed to add also a manual configuration in my preview code like this:\r\n\r\n```swift\r\nlet options = FirebaseOptions(googleAppID: \"my_id_from_ GoogleService-Info.plist file\", gcmSenderID: \"my_id_from_ GoogleService-Info.plist file\")\r\nFirebaseApp.configure(options: options)\r\n```\r\n\r\nBTW, I'm using Xcode 11.7","> linker command failed with exit code 1 (use -v to see invocation)\r\n> \r\n> ----------------------------------------\r\n> \r\n> LinkDylibError: Failed to build SignUpView.swift\r\n> \r\n> Linking failed: linker command failed with exit code 1 (use -v to see invocation)\r\n> \r\n> ld: warning: directory not found for option '-F\/Applications\/Xcode.app\/Contents\/SharedFrameworks-iphonesimulator'\r\n> Undefined symbols for architecture x86_64:\r\n>   \"___llvm_profile_runtime\", referenced from:\r\n>       ___llvm_profile_runtime_user in Pods_MyProject(Pods-MyProject-dummy.o)\r\n>      (maybe you meant: ___llvm_profile_runtime_user)\r\n> ld: symbol(s) not found for architecture x86_64\r\n> clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n\r\n\r\nI dont know why or how but the first answer [here](https:\/\/stackoverflow.com\/questions\/58127940\/undefined-symbols-llvm-profile-runtime) fixed this issue","> I dont know why or how but the first answer [here](https:\/\/stackoverflow.com\/questions\/58127940\/undefined-symbols-llvm-profile-runtime) fixed this issue\r\n\r\nThe problem is caused by Code Coverage being enabled. Above StackOverflow contains a fix. Thank you!\r\n","The \"AggregateTargetSettings\" script doesn't seem to work with ruby 2.6, but I managed to get the similar results with a post install script.\r\n\r\n```\r\npost_install do |installer|\r\n    installer.pods_project.targets.each do |target|\r\n        if target.name == 'YourSwiftUIFramework'\r\n            target.build_configurations.each do |config|\r\n            if config.name == 'Debug'\r\n                config.build_settings[\"LD_RUNPATH_SEARCH_PATHS\"] += \" $(FRAMEWORK_SEARCH_PATHS)\"\r\n            end\r\n        end\r\n    end\r\nend\r\n```\r\n\r\napparently `if target.name == 'YourSwiftUIFramework'` can be removed if you want to add the search path to all your pods, but it's probably not a good idea.","Slightly reworded solution from @FredericRuaudel (that employs prepend vs alias_method), that does not break when Podfile is sourced twice, e.g. when using https:\/\/github.com\/square\/cocoapods-generate:\r\n\r\n```\r\nmodule AggregateTargetSettingsExtensions\r\n  def ld_runpath_search_paths\r\n    return super unless configuration_name == \"Debug\"\r\n    return (super || []) + (framework_search_paths || [])\r\n  end\r\nend\r\n\r\nclass Pod::Target::BuildSettings::AggregateTargetSettings\r\n  prepend AggregateTargetSettingsExtensions\r\nend\r\n\r\nmodule PodTargetSettingsExtensions\r\n  def ld_runpath_search_paths\r\n    return (super || []) + (framework_search_paths || [])\r\n  end\r\nend\r\n\r\nclass Pod::Target::BuildSettings::PodTargetSettings\r\n  prepend PodTargetSettingsExtensions\r\nend\r\n```\r\n\r\nJust in case, the net result is literally the same as with the original solution.","Related [StackOverflow question.](https:\/\/stackoverflow.com\/questions\/59080259\/can-not-render-swiftui-preview-from-cocoapods)","In Xcode 14 our previews are now failing due to a missing symbols error, so it wasn't enough by modifying the linker search paths, we needed to explicitly set the transitive framework dependencies too, this is how we solved it but there must be a better solution:\r\n\r\n```\r\n  class Target\r\n    class BuildSettings::PodTargetSettings\r\n      alias_method :other_ldflags_original, :other_ldflags\r\n      \r\n      def other_ldflags\r\n          new_flags = other_ldflags_original.dup\r\n          dependent_targets_to_link.each { |dep|\r\n              dep.framework_paths.each { |key, fwk_paths|\r\n                  fwk_paths.each { |fwk_path|\r\n                      name = File.basename(fwk_path.source_path, \".*\")\r\n                      new_flags << '-framework' << %(\"#{name}\") unless frameworks.include?(name)\r\n                  }\r\n              }\r\n          }\r\n          new_flags\r\n      end\r\n    end\r\n  end\r\n```","Unfortunately, we're facing a similar problem quite a some time. Some of the solutions above helped us in Xcode 13, however since we're Xcode 14, previews doesn't seem to work.\r\n\r\n```\r\nRemoteHumanReadableError\r\n|  \r\n|  LoadingError: failed to load library at path \"...Xcode\/DerivedData\/###- ...\/...\r\n\/Previews\/###\/Products\/Debug-iphonesimulator\/Pods_###.framework\/Pods### (not a mach-o file)\"\r\n```\r\n\r\nSomehow if we manually, remove the pod framework Pods_XXX from linked libraries in app target and add our pod add our framework (CustomUIFramework) manually, it renders the Previews but with the pod install, it originally links the pod framework and we're going back to error case. \r\n\r\nExact same configuration works in Xcode 13 though.","> Related [StackOverflow question.](https:\/\/stackoverflow.com\/questions\/59080259\/can-not-render-swiftui-preview-from-cocoapods)\r\n\r\nWorking perfectly for previews, but it block the debug running on rosseta simulators.","This issue still occured in xcode 15.1 beta 3. common pods into main target and framework and framework embed into main target. failing SwiftUI Preview.","Disabling this setting helped me `Editor \/ Canvas \/ Automatically Refresh Canvas`"],"labels":["help wanted"]},{"title":"Copy Pod Resources copies xcassets that not included into app bundle","body":"* [ x ] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\npod install and run project\r\nIt happens usually when the pod project is included via  `git submodule`, then the whole demo project under the main project but NOT INCLUDED , BUT the `copy pod resource` would STILL copy the demo xcassets into the main project \r\nThe origin app icons are replaced by them\r\n\r\n## What did you expect to happen?\r\n\r\nDO NO COPY the xcassets that not included \r\n\r\n## What happened instead?\r\n\r\nsome unnecessary xcassets are copied into the app bundle. the appIcon or image get \r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.7.2\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-darwin18]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.14.6 (18G95)\r\n       Xcode : 11.0 (11A420a)\r\n         Git : git version 2.21.0 (Apple Git-122)\r\nRuby lib dir : \/usr\/local\/var\/rbenv\/versions\/2.6.3\/lib\r\nRepositories : benemind-diffusion-spec-emspecs - http:\/\/ph.benemind.com\/diffusion\/SPEC\/emspecs.git @ e8ece21a3df66ac2f62e471045c1333c69e6d452\r\n               edu-git-cocoapods-specs - https:\/\/mirrors.tuna.tsinghua.edu.cn\/git\/CocoaPods\/Specs.git @ 0bf2f719cdd71a25b12394dbb3f7841be126f39e\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ 2939de9b48c36fbe3be06f18de735802f39789f0\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/var\/rbenv\/versions\/2.6.3\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate            : 1.0.4\r\ncocoapods-flutter                : 0.0.1\r\ncocoapods-packager               : 1.5.0\r\ncocoapods-plugins                : 1.0.0\r\ncocoapods-search                 : 1.0.0\r\ncocoapods-static-swift-framework : 0.4\r\ncocoapods-stats                  : 1.1.0\r\ncocoapods-trunk                  : 1.3.1\r\ncocoapods-try                    : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '8.0'\r\ninhibit_all_warnings!\r\n#use_frameworks!\r\n#install! 'cocoapods', :disable_input_output_paths => true\r\nuse_modular_headers!\r\n\r\n#plugin 'cocoapods-binary'\r\n#enable_bitcode_for_prebuilt_frameworks!\r\n\r\nsource 'http:\/\/ph.benemind.com\/diffusion\/SPEC\/emspecs.git'\r\nsource 'https:\/\/mirrors.tuna.tsinghua.edu.cn\/git\/CocoaPods\/Specs.git'\r\n\r\n\r\ndef binary_pods\r\n  pod 'Protobuf', :modular_headers => true\r\n  pod 'MSAppModuleKit', :path => 'submodule\/MSAppModuleKit'\r\n  pod 'MSThemeKit', :path => 'submodule\/MSThemeKit'\r\n  pod 'EMSpeed', :path => 'submodule\/EMSpeed' # :git => 'http:\/\/ph.benemind.com\/diffusion\/EMSPEED\/emspeed.git', :branch => 'develop'\r\n  pod 'PINCache'\r\n  pod 'AMPopTip', '~> 4.0'\r\n  pod 'Alamofire'\r\n  pod 'Aspects'\r\n  pod 'JRSwizzle'\r\n  pod 'Protobuf'\r\n  pod 'GCDTimer'\r\n  pod 'iCarousel'\r\n  pod 'Differentiator'\r\n  pod 'EMEmptyDataSet'\r\n  pod 'DynamicBlurView'\r\n  pod 'MSRoutes',       :git => 'https:\/\/github.com\/aelam\/MSRoutes.git'\r\n  pod 'Gecco',          :git => 'https:\/\/github.com\/aelam\/Gecco.git'    # \u5347\u7ea7\u4e86Swift5.0\r\n  pod 'ScrollCoordinator'#\r\n  pod 'YBPopupMenu'\r\n  pod 'Yaml'\r\n  pod 'WZLBadge'\r\n  pod 'ReactiveCocoa'\r\n  pod 'sqlite3'\r\n  pod 'UIColor-HexString'\r\n  pod 'TYAttributedLabel'\r\n  pod 'SnapKit'\r\n  pod 'SwiftyJSON'\r\n  pod 'Cosmos'\r\n  \r\n  pod 'IGListKit', :git => 'https:\/\/gitee.com\/lunwang\/IGListKit.git'  # zIndex\u6709\u95ee\u9898\r\n  pod 'Masonry', '~> 0.6.1'\r\n  \r\n  pod 'UIColor_Hex_Swift', '~> 4.2'\r\n  pod 'InAppSettingsKit', '~> 2.9'\r\n  pod 'OAStackView'\r\n  pod 'TYPagerController', '1.0.6'\r\n  pod 'MSKeyboard',                 :git => 'http:\/\/ph.benemind.com\/diffusion\/MSKEYBOARD\/mskeyboard.git' #'~> 1.0.2.beta.2'\r\n#  pod 'RDVTabBarController',        :git => 'http:\/\/ph.benemind.com\/diffusion\/RDVTABBAR\/rdvtabbarcontroller.git'\r\n  #pod 'Charts', '~> 3.3.0' #\r\n  pod 'Charts', :git => 'http:\/\/ph.benemind.com\/diffusion\/133\/charts.git', :branch => 'swift5.0'\r\n  pod 'RxSwift', '~> 4'\r\n  pod 'RxCocoa', '~> 4'\r\n  pod 'RxDataSources'\r\n  pod 'Result'\r\n\r\n  pod 'Toast-Swift', '~> 4.0.0'\r\n  pod 'SDWebImage', '~> 5.0.1' #\r\n  pod 'CocoaSecurity'\r\n  \r\n  pod 'SwiftyTimer', '2.1.0'\r\n  # Fixed Optional \u51b2\u7a81\u7684\u95ee\u9898\r\n  pod 'JSONModel', :git => 'https:\/\/github.com\/bosong\/jsonmodel.git', :branch => 'renameOptional'\r\n  pod 'LGAlertView', :git => 'http:\/\/ph.benemind.com\/diffusion\/149\/lgalertview.git'\r\n  pod 'GridView', :git => 'http:\/\/ph.benemind.com\/diffusion\/143\/gridview.git', :branch => 'develop'\r\n  pod 'OverScroller',  :git => 'https:\/\/github.com\/aelam\/OverScroller.git'\r\n  pod 'EMSocialKit',   :git => 'http:\/\/ph.benemind.com\/diffusion\/EMSK\/emsocialkit-ios.git', :branch=> 'dev8.3'\r\n  pod 'MJRefresh'\r\n  pod 'YMStockAppSettings', :git => 'http:\/\/ph.benemind.com\/diffusion\/YMSTOCKAPPSETTINGS\/YMStockAppSettings.git'\r\n  pod 'Moya\/RxSwift', '~> 13'\r\n  pod 'JLRoutes', '~> 2.1'\r\n\r\n  \r\nend\r\n\r\ndef base_component_pods\r\n  pod 'AFNetworking'\r\n  pod 'FMDB'\r\n  pod 'MBProgressHUD'\r\n  pod 'SFHFKeychainUtils'\r\n  pod 'WebViewJavascriptBridge'\r\n  pod 'CocoaAsyncSocket'\r\n  pod 'RegexKitLite-NoWarning'\r\n  pod 'SYWechatOpenSDK'\r\n  pod 'SYUPPaySDK',                 :git => 'https:\/\/gitee.com\/lunwang\/SYUPPaySDK.git'\r\n  \r\n  pod 'CocoaLumberjack', '~> 3.5'\r\n  #pod 'EMopenssl', :git => 'http:\/\/ph.benemind.com\/diffusion\/SSL\/openssl.git', :branch => 'develop'\r\n  pod 'EMopenssl',                  :git => 'http:\/\/ph.benemind.com\/diffusion\/SSL\/openssl.git', :commit => '5570acd', :modular_headers => false\r\n  \r\n  pod 'EMCycleScroll',              :path => 'submodule\/EMCycleScroll'\r\n  #pod 'EMSpeed',                    :path => 'submodule\/EMSpeed'\r\n  \r\n  pod 'YRCoverFlowLayout',     :git => \"https:\/\/github.com\/aelam\/YRCoverFlowLayout\"\r\n  \r\nend\r\n\r\n\r\n\r\ndef deployed_module_pods\r\n  pod 'EMClick', :path => 'submodule\/EMClick'\r\n  #pod 'EMTradeKit', :git => 'http:\/\/ph.benemind.com\/diffusion\/157\/emtradekit.git', :commit => 'a497cd4'\r\n  #pod 'EMTradeKit', :git => 'http:\/\/ph.benemind.com\/diffusion\/157\/emtradekit.git', :tag => '2.1.4'\r\n  pod 'EMTradeKit', :git => 'http:\/\/ph.benemind.com\/diffusion\/157\/emtradekit.git'\r\n\r\n  pod 'MSAppModulePayApp', '~> 1.0.0'\r\n  pod 'MSAppModuleShare\/JSBridgeModuleShare', :path => 'submodule\/MSAppModuleShare'\r\n\r\n  pod 'MSAppModuleWebApp', :path => 'submodule\/MSAppModuleWebApp'\r\n\r\n  # \u76ca\u5708\u5708\r\n  #pod 'MSAppModuleYQQApp', :git => 'http:\/\/ph.benemind.com\/diffusion\/130\/yqq.git', :branch => 'ymStock'\r\n  pod 'MSAppModuleYQQApp', :path => 'submodule\/MSAppModuleYQQApp'\r\n\r\n  #   \u89c6\u9891\r\n  pod 'IQKeyboardManagerSwift'\r\n  pod 'MSAppModuleVideoApp', :subspecs => ['Core', 'VideoModule'], :path => 'submodule\/MSAppModuleVideoApp'\r\n  #pod 'MSAppModuleVideoApp', :subspecs => ['Core', 'VideoModule'], :git => 'http:\/\/ph.benemind.com\/diffusion\/68\/msappmodulevideoapp.git', :branch => 'YMStock'\r\n  pod 'EMVideo\/MSMoviePlayer', :path => 'submodule\/EMVideo'\r\n  pod 'SKDynamicStock\/SKDynamicKit', :path => 'submodule\/SKDynamicStock' #:git => 'http:\/\/ph.benemind.com\/diffusion\/79\/skdynamicstock.git'\r\n\r\n  pod 'SKRefresh', :git => 'http:\/\/ph.benemind.com\/diffusion\/104\/skrefresh.git', :branch => 'swift5.0'\r\n  pod 'SKGeneral', :git => 'http:\/\/ph.benemind.com\/diffusion\/117\/skgeneral.git'\r\n  \r\nend\r\n\r\ndef developing_module_pods\r\n  # \u4e3b\u9898\u8272\r\n  pod 'MSThemeModuleCommon\/YMStockSupport', :path => 'submodule\/MSThemeModuleCommon'\r\n  pod 'StockPB', :subspecs => ['Moya', 'YMStockSupport', 'RACNetwork'] , :path => 'submodule\/StockPB'\r\n\r\n  # \u91cd\u6784\u6a21\u5757 \u5168\u65b0\u6a21\u5757\r\n  pod 'YMStockMarket', :path => 'submodule\/YMStockMarket'\r\n  pod 'YMHome', :path => 'submodule\/YMHome'\r\n  pod 'YMAccount', :path => 'submodule\/YMAccount'\r\n\r\n  pod 'SKStockStone\/YMStockSupport', :path => 'submodule\/SKStockStone'\r\n  pod 'YMStockDetail', :path => 'submodule\/YMStockDetail'\r\n  pod 'SKDepth', :path => 'submodule\/SKDepth'\r\n\r\n  pod 'StockWatchList', :subspecs => ['YMStock'], :path => 'submodule\/StockWatchList'\r\n  pod 'YMSearchUI', :path => 'submodule\/YMSearchUI'\r\n\r\n  pod 'YMUserCenter', :path => 'submodule\/YMUserCenter'\r\n  pod 'YMMockStock',  :path => 'submodule\/YMMockStock'\r\n  #pod 'YMScreening',  :path => 'submodule\/YMStockScreening'\r\n  pod 'YMNewInfo',    :path => 'submodule\/YMNewInfo'\r\n#  pod 'SKGeneral',    :path => 'submodule\/SKGeneral'\r\n\r\n#  pod 'RealmSwift'\r\n#  pod 'MessengerSDK',  :path => 'submodule\/MessengerKit'\r\n#  pod 'MessengerKit',  :path => 'submodule\/MessengerKit'\r\n  pod 'StockDBKit',    :path => 'submodule\/StockDBKit'\r\n  pod 'IndCalculator', :path => 'submodule\/IndCalculator'\r\n  \r\n  pod 'RDVTabBarController', :path => 'submodule\/RDVTabBarController'\r\n  \r\nend\r\n\r\nabstract_target 'AppPods' do\r\n   # crash sdk\r\n  #  pod 'Bugtags'\r\n    pod 'Bugly'\r\n    # \u5c0f\u7c73\u63a8\u9001\r\n    pod 'QQ_XGPush'\r\n\r\n    # Pods for YMStockApp\r\n    binary_pods\r\n    base_component_pods\r\n    developing_module_pods\r\n    deployed_module_pods\r\n\r\n  \r\n  target 'YMStockApp'\r\n  target 'EMStockApp'\r\n  \r\nend\r\n\r\n#\r\n#target 'YMStockApp' do\r\n#  #use_frameworks!\r\n#\r\n#\r\n#end\r\n\r\n\r\n\r\n# Workaround CocoaPods to mix Swift 3.2 and 4\r\n# Manually add to swift4Targets, otherwise assume target uses Swift 3.2\r\n# https:\/\/stackoverflow.com\/questions\/46101625\/using-cocoapods-mixed-swift3-and-swift4-pods\r\n#swift4_2Targets = ['Cosmos', 'Yaml', 'SKDepth', 'DynamicBlurView', 'RxSwift', 'RxCocoa', 'RxDataSources', 'Differentiator', 'Moya', 'Alamofire',   'YMSearchUI', 'SwiftyTimer', 'CCZoomTransition', 'AMPopTip', 'Snapkit', 'CocoaLumberjack', 'YMAccount', 'RxSwiftExt', 'RxDataSource', 'ScrollCoordinator', 'SwiftyJSON', 'StockPB', 'StockWatchList', 'YMStockAppSettings', 'Result', 'MSThemeModuleCommon', 'SKStockStone', 'YMUserCenter', 'YMHome', 'YMScreening', 'YMMockStock', 'YMStockMarket', 'MessengerKit', 'RealmSwift', 'KeyboardMan']\r\n\r\nswift4_2Targets = ['YMNewInfo', 'YMStockDetail', 'JLRoutes', 'PINCache'] #, 'YMScreening', 'YMStockMarket', 'SKDepth']\r\nswift4_0Targets = []\r\n\r\npost_install do |installer|\r\n  \r\n  installer.pods_project.build_configurations.each do |config|\r\n    # Fixed \u6253\u5305\u5361\u4f4f\u7684Bug\r\n    if config.name == 'Release'\r\n      config.build_settings['SWIFT_COMPILATION_MODE'] = 'incremental'\r\n    end\r\n    # ENABLE_BITCODE\r\n    config.build_settings['ENABLE_BITCODE'] = 'NO'\r\n\r\n    installer.pods_project.targets.each do |target|\r\n      # SWIFT_VERSION\r\n      if swift4_2Targets.include? target.name\r\n        config.build_settings['SWIFT_VERSION'] = '4.2'\r\n      elsif swift4_0Targets.include? target.name\r\n        config.build_settings['SWIFT_VERSION'] = '4.0'\r\n      else\r\n        config.build_settings['SWIFT_VERSION'] = '5.0'\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\n# link_with is deprecated in 1.0 in favour of abstract_target and target inheritance instead.\r\n# link_with http:\/\/guides.cocoapods.org\/syntax\/podfile.html#link_with\r\n# abstract_target http:\/\/guides.cocoapods.org\/syntax\/podfile.html#abstract_target\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\n\u2139 Please link to a project we can download that reproduces the issue.\r\nYou can delete this section if your issue is unrelated to build problems,\r\ni.e. it's only an issue with CocoaPods the tool.\r\n","comments":["This is a duplicate of https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8431 I believe.\r\n\r\nIts a clear issue and known issue that xcassets are fairly broken in CocoaPods.","There is another case \r\nthere are two targets in one project, xcassets belongs to each target both would be copied in the app bundle no matter which target I run  ","Keeping it open."],"labels":["t2:defect"]},{"title":"Allow installation of pods with the same name but different podspecs or paths per configuration","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\nFlutter is distributed with different framework binaries for [debug, profile, and release](https:\/\/flutter.dev\/docs\/testing\/build-modes).  This can be expressed with three podspecs at different paths pointing to different vendored frameworks.\r\n\r\nIt would be great for CocoaPods to be able to handle installing pods with different `:path` or `:podspec` per configuration, but with the same names.\r\n\r\nExample Podfile\r\n```ruby\r\npod 'Flutter', :path => path\/to\/debug-pod, :configuration => ['Debug']\r\npod 'Flutter', :path => path\/to\/profile-pod, :configuration => ['Profile']\r\npod 'Flutter', :path => path\/to\/release-pod, :configuration => ['Release']\r\n```\r\n\r\n## What did you expect to happen?\r\n\r\nPods-{project}-frameworks.sh\r\n```ruby\r\nif [[ \"$CONFIGURATION\" == \"Debug\" ]]; then\r\n  install_framework \"${PODS_ROOT}\/path\/to\/debug\/Flutter.framework\"\r\nfi\r\nif [[ \"$CONFIGURATION\" == \"Profile\" ]]; then\r\n  install_framework \"${PODS_ROOT}\/path\/to\/profile\/Flutter.framework\"\r\nfi\r\nif [[ \"$CONFIGURATION\" == \"Release\" ]]; then\r\n  install_framework \"${PODS_ROOT}\/path\/to\/release\/Flutter.framework\"\r\nfi\r\n```\r\n\r\n## What happened instead?\r\n\r\n`pod install` fails:\r\n```shell\r\nAnalyzing dependencies\r\n[!] There are multiple dependencies with different sources for `Flutter` in `Podfile`:\r\n\r\n- Flutter (from `.symlinks\/ios-debug`)\r\n- Flutter (from `.symlinks\/ios-profile`)\r\n- Flutter (from `.symlinks\/ios-release`)\r\n```\r\n\r\n## CocoaPods Environment\r\n\r\n```shell\r\n$ pod --version\r\n1.7.5\r\n```\r\n\r\n","comments":["Attempt in context: https:\/\/github.com\/flutter\/flutter\/issues\/24641#issuecomment-443404880","Here's another failed attempt with `:podspec` instead of `:path` https:\/\/github.com\/flutter\/flutter\/issues\/26712#issuecomment-532894023","This is not supported currently nor do we have plans to support it.","Marked it as a hard enhancement."],"labels":["t1:enhancement","d3:hard","help wanted"]},{"title":"macOS CLI: dyld: Library not loaded ... image not found","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [X] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nCreate Podfile for empty MacOS CLI tool with:\r\n```\r\ntarget 'podNew' do\r\n  use_frameworks!\r\n\r\n  pod 'RxSwift'\r\n  # Pods for podNew\r\n\r\nend\r\n```\r\n\r\nThen run `pod install` and build\r\n\r\n## What did you expect to happen?\r\n\r\nA successful build\r\n\r\n## What happened instead?\r\n\r\n```\r\ndyld: Library not loaded: @rpath\/RxSwift.framework\/Versions\/A\/RxSwift\r\n  Referenced from: \/Users\/michaeleisel\/Documents\/Projects\/podNew\/Build\/Products\/Debug\/podNew\r\n  Reason: image not found\r\n```\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.7.5\r\n        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.15 (19A536g)\r\n       Xcode : 10.3 (10G8)\r\n         Git : git version 2.21.0\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : artsy - https:\/\/github.com\/artsy\/Specs.git @ ef1735b844309562ba59a1ef257a3148958fe4e9\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ e32f4aaa8f6ad641a62cf88b3b54b521055331d0\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate                 : 1.0.4\r\ncocoapods-disable-podfile-validations : 0.1.1\r\ncocoapods-generate                    : 1.5.0\r\ncocoapods-plugins                     : 1.0.0\r\ncocoapods-search                      : 1.0.0\r\ncocoapods-stats                       : 1.1.0\r\ncocoapods-trunk                       : 1.3.1\r\ncocoapods-try                         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\n# platform :ios, '9.0'\r\n\r\ntarget 'podNew' do\r\n  # Comment the next line if you don't want to use dynamic frameworks\r\n  use_frameworks!\r\n\r\n  pod 'RxSwift'\r\n  # Pods for podNew\r\n\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nIt's just an empty project, created and built with Xcode 10.","comments":["It seems that there are other issues like this one related to CLI tools, e.g. https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/3709, but the steps from that guide are outdated (e.g. `link_with`), and there didn't seem to be a really clear answer anyways.","We do not support macOS CLI tools in CocoaPods IIRC.","I see, which types of Mac apps are supported? And could there be some sort of warning when the user runs `pod install`, telling them that it isn't supported? I think that other users would be surprised by that as well","@michaeleisel actually I think @amorde implemented a warning here https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/6493! It has shipped with 1.8.0.beta.1","We can probably further enhance it with the list of supported targets. But I would say Applications and Frameworks \/ Libraries are supported for macOS.","OK thank you","Yup we added a warning when using dynamic frameworks with CLI targets, since there\u2019s no way to embed the framework into the binary.\r\n\r\nCLI targets should work though, as long as you\u2019re using static linking or are able to package the dynamic frameworks with the binary somehow"],"labels":["t1:enhancement","d1:easy","help wanted"]},{"title":"Cannot get ObjC and Swift to interop (module map support for static libs)","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\nI want to call some C\/ObjC functions from within Swift, and I don't want to expose these functions to consumers of my cocoapod. When I try to use a bridging header, Xcode tells me \"error: using bridging headers with framework targets is unsupported\". When I try to use a custom module map, cocoapods tells me that it won't work for static libraries, and I'm not sure if it works that way anyways. What should I do?\r\n\r\n## What did you do?\r\n\r\nRun `pod install`, with a brand new .xcodeproj that depends on this library and see that there's a build error\r\n\r\n## What did you expect to happen?\r\n\r\nIt builds\r\n\r\n## What happened instead?\r\n\r\nIt does not build\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.7.3\r\n        Ruby : ruby 2.6.0p0 (2018-12-25 revision 66547) [universal.x86_64-darwin19]\r\n    RubyGems : 3.0.1\r\n        Host : Mac OS X 10.15 (19A471t)\r\n       Xcode : 11.0 (11M336w)\r\n         Git : git version 2.21.0\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.6\/usr\/lib\r\nRepositories : artsy - https:\/\/github.com\/artsy\/Specs.git @ bdd1edc21cd8e834919636d4ace59e4bf362f2fc\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ 3ec921a1a1f1cd8a1304d33bfdee5947e201c75f\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\n# platform :ios, '9.0'\r\n\r\ntarget 'ZippyRun' do\r\n  # Comment the next line if you don't want to use dynamic frameworks\r\n  # use_frameworks!\r\n  pod 'ZippyJSON', :git => 'https:\/\/github.com\/michaeleisel\/zippyjson'\r\n\r\n\r\n  # Pods for ZippyRun\r\n\r\n  target 'ZippyRunTests' do\r\n    inherit! :search_paths\r\n    # Pods for testing\r\n  end\r\n\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/michaeleisel\/ZippyRun\/ , run `pod install` and then observe that in ZippyJSONDecoder.swift, it can't find lots of functions that are in ZippyJSONPrivate.h\r\n","comments":["Cannot run `pod install` in your sample:\r\n```\r\n[!] No podspec found for `ZippyJSON` in `..\/ZippyJSON`\r\n```\r\n\r\nNeed a correct sample.","I also tried:\r\n```\r\npod 'ZippyJSON', :git => 'https:\/\/github.com\/michaeleisel\/zippyjson'\r\n```\r\n\r\nWhile `pod install` worked I am seeing a `'simdjson.h' file not found` error.","Oops, it builds now, you can build for the simulator at least (I made a bunch of private headers public, skirting the issue). But I think it will help to ignore sample projects like this one and to consider the different options:\r\n\r\n- Have a bridging header with the private headers in it, except that this doesn't work because Apple doesn't allow bridging headers in static libs and dylibs\r\n- Use a module map that declares a private module, except Cocoapods doesn't allow you to set the `module_map` option for static libraries, and this needs to be available as a static library. I suppose I could just change the Xcode build settings for module maps myself, but this feels like circumventing Cocoapods and makes me nervous.\r\n\r\nThese options are discussed further in https:\/\/jsorge.net\/2019\/01\/23\/mixed-language-framework","Generally specifying a private module map could be a good enhancement but yes support for module maps for static libraries is not there yet.\r\n\r\nAm I understanding that you were able to get things working? Trying to see if there is an action to be taken here.","I am not able to get things working, because although it builds for me, I don\u2019t want to expose all those private functions to consumers. To reiterate, my goal is to have a Swift file that calls private C\/ObjC functions and not expose those functions to the consumer.","If this can be accomplished by a private module map then this could be the enhancement. ","Yes, I think that\u2019s the best solution. +1 for that enhancement, I\u2019ll find a workaround in the meantime","@michaeleisel thanks! If we mirror the `module_map` DSL we can have a `private_module_map` DSL added so it should actually be fairly easy.\r\n\r\nNot tagging this for 1.8.0 yet as we do not know if we will make it there.","That is not the blocker, although that could make things nicer. The blocker is that module_map is not supported for static libs. So unless this private option was supported for static libs, I would still be unable to use it"," then it is even a \"bigger\" enhancement to add module map support for static libs. ","Yes","I wasn\u2019t sure if there was a workaround so I opened the issue, but it sounds like there\u2019s not, so yes this is just an enhancement request then","`use_frameworks! :linkage => :static` introduced in 1.9.0 might be a workaround","Paulb777. I had to create a Github account just so I could thank you. \r\n`use_frameworks! :linkage => :static` does indeed solve the actual problem.","> `use_frameworks! :linkage => :static` introduced in 1.9.0 might be a workaround\r\n\r\nIt actually did worked. I was working around on this  issue from cocoa pods 1.8.0 alternatively using \"use_modular_headers!\" but the issue of module map missing was persistent for \"BoringSSL-GRPC\" finally Thanks Paul you saved the day.!!","Thanks for this. Also, since SwiftPM doesn\u2019t allow mixed-language packages, people who want to support both will have to create separate projects anyways","@michaeleisel I am having same issue as your, but in my case I can make objective-c module public.\r\n\r\nDid you find workaround for your problem?"],"labels":["t1:enhancement","d2:moderate"]},{"title":"Windows Long Path Failed to Install","body":"Hello guys i trying to call 'pod install' to download and install Firebase with pods but when the path reach 260 (MAX_PATH_LIMIT) the pod fail to download the dependence.\r\n\r\nMy sugestion is to use `'\"\\\\?\\\"` prefix before path to make windows expand to Unicode Long Path while downloading\/creating\/reading files.\r\n\r\n`For example, \"\\\\?\\D:\\very long path\".`\r\n\r\nhttps:\/\/docs.microsoft.com\/en-us\/windows\/desktop\/fileio\/naming-a-file#maximum-path-length-limitation\r\n\r\nIn my error the filepath with 261 chars failed to download (path: C:\/Users\/RafaVR\/Library\/Caches\/CocoaPods\/Pods\/Release\/FirebaseAnalyticsInterop\/1.2.0-efbe4\/Example\/tvOSSample\/tvOSSample\/Assets.xcassets\/App Icon & Top Shelf Image.brandassets\/App Icon - App Store.imagestack\/Front.imagestacklayer\/Content.imageset\/Contents.json)\r\n\r\n### Pod Log\r\n\r\nD:\\UnityProjects\\AeC\\Robbyson_Mobile\\BuildXCode>pod install\r\nAnalyzing dependencies\r\nDownloading dependencies\r\nInstalling Firebase (6.1.0)\r\nInstalling FirebaseAnalytics (6.0.1)\r\nInstalling FirebaseAnalyticsInterop (1.2.0)\r\n\r\n[!] Error installing FirebaseAnalyticsInterop\r\n\r\n### Command\r\n\r\n```\r\nD:\/Program Data\/Ruby25-x64\/bin\/pod install\r\n```\r\n\r\n### Report\r\n\r\n* What did you do?\r\n\r\n* What did you expect to happen?\r\n\r\n* What happened instead?\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.7.3\r\n        Ruby : ruby 2.5.5p157 (2019-03-15 revision 67260) [x64-mingw32]\r\n    RubyGems : 2.7.6.2\r\n        Host : Unable to find an executable (No such file or directory - sw_vers)  ()\r\n       Xcode : -version) ()\r\n         Git : git version 2.22.0.windows.1\r\nRuby lib dir : D:\/Program Data\/Ruby25-x64\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 3983b6bcc6bf0cefea5bfdd10865abd287e14cdc\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\nplatform :ios, '11.0'\r\n\r\ntarget 'Unity-iPhone' do\r\npod 'Firebase\/Core', '6.1.0'\r\npod 'Firebase\/Messaging', '6.1.0'\r\nend\r\n```\r\n\r\n### Error\r\n\r\n```\r\nErrno::ENOENT - No such file or directory @ rb_sysopen - C:\/Users\/RafaVR\/Library\/Caches\/CocoaPods\/Pods\/Release\/FirebaseAnalyticsInterop\/1.2.0-efbe4\/Example\/tvOSSample\/tvOSSample\/Assets.xcassets\/App Icon & Top Shelf Image.brandassets\/App Icon - App Store.imagestack\/Front.imagestacklayer\/Content.imageset\/Contents.json\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1292:in `initialize'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1292:in `open'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1292:in `block in copy_file'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1291:in `open'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1291:in `copy_file'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1259:in `copy'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:418:in `block in copy_entry'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1390:in `wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1393:in `block in wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `each'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1393:in `block in wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `each'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1393:in `block in wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `each'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1393:in `block in wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `each'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1393:in `block in wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `each'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1393:in `block in wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `each'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1393:in `block in wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `each'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1393:in `block in wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `each'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1393:in `block in wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `each'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1392:in `wrap_traverse'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:415:in `copy_entry'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:393:in `block in cp_r'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1463:in `block in fu_each_src_dest'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1479:in `fu_each_src_dest0'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:1461:in `fu_each_src_dest'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/2.5.0\/fileutils.rb:392:in `cp_r'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/downloader\/cache.rb:201:in `copy_and_clean'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/downloader\/cache.rb:159:in `block (2 levels) in uncached_pod'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/downloader\/cache.rb:157:in `each'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/downloader\/cache.rb:157:in `block in uncached_pod'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/downloader\/cache.rb:181:in `in_tmpdir'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/downloader\/cache.rb:153:in `uncached_pod'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/downloader\/cache.rb:33:in `download_pod'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/downloader.rb:42:in `download'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/installer\/pod_source_installer.rb:109:in `download_source'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/installer\/pod_source_installer.rb:62:in `install!'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/installer.rb:545:in `install_source_of_pod'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/installer.rb:496:in `block (2 levels) in install_pod_sources'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/user_interface.rb:86:in `titled_section'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/installer.rb:495:in `block in install_pod_sources'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/installer.rb:478:in `each'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/installer.rb:478:in `install_pod_sources'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/installer.rb:235:in `block in download_dependencies'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/user_interface.rb:64:in `section'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/installer.rb:234:in `download_dependencies'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/installer.rb:157:in `install!'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/command\/install.rb:51:in `run'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/claide-1.0.2\/lib\/claide\/command.rb:334:in `run'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/lib\/cocoapods\/command.rb:52:in `run'\r\nD:\/Program Data\/Ruby25-x64\/lib\/ruby\/gems\/2.5.0\/gems\/cocoapods-1.7.3\/bin\/pod:55:in `<top (required)>'\r\nD:\/Program Data\/Ruby25-x64\/bin\/pod:23:in `load'\r\nD:\/Program Data\/Ruby25-x64\/bin\/pod:23:in `<main>'\r\n```","comments":["\/cc @paulb777 for Firebase stuff.\r\n\r\nYes we can probably fix this.","cc: @davidair for windows","I've taken a quick look and the \\\\?\\ suggested by @soulsoul666 looks promising. However, we would need to fight Ruby on this one, because those paths do not allow mixing \\ and \/ and Ruby's File::SEPARATOR is '\/' on Windows (see https:\/\/bugs.ruby-lang.org\/issues\/7822), meaning that code that uses it (e.g FileUtils.cp_r) will not work.\r\n\r\nOne solution would be to re-implement FileUtils.cp_r to be more Windows-friendly.","Another problem in windows is related to new default Windows TAR.\r\n\r\nIn new versions, the windows come with native TAR and CURL commands but the native TAR command `--force` is not supported:\r\n\r\n`tar: Option --force-local is not supported`\r\n\r\nPODs show try use TAR of Ruby instead of Windows Native TAR (cd to ruby path), or avoid using `--force`.\r\n\r\nBy now the only way to avoid this error is editing the `ENVIROMENT VARIABLE PATH` and add ruby TAR folder before `C:\\Windows\\System32` PATH.\r\n\r\nBest regards\r\nRafael","Any solutions? I tried to \"increase\" the MAX_PATH_LENGTH of Windows, but no success.","@AvigarD611 - haven't had a chance to look into it yet","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Any improvement in this issue?\r\n\r\nBest Regards\r\nRafael","@davidair looks like to solve this problem the path must be converted before calling\r\n\"mkdir\", \"mkfile\", \"file exists\" and \"directory exist\".\r\n\r\nAs ruby support `\\\\?\\` if path don't contains `\/` we have this \"Pseudo-code\" to convert path to long path \r\n(in C#, i dont have enought  knowledge to write this in Ruby, sorry)\r\n\r\n```\r\npublic static string ConvertToWindowsLongPath(string path)\r\n{\r\n\t\/\/Prevent errors with nulls\r\n\tif(path == null)\r\n\t\tpath = \"\"\r\n\r\n\t\/\/Convert path to windows forward slash\r\n\tpath = path.Replace(\"\/\", @\"\\\");\r\n\r\n\t\/\/Here we have to solve relative path and convert it to FullPath\r\n\tif(path.StartsWith(@\"\\\") || path.StartsWith(@\".\"))\r\n\t{\r\n\t\t\/\/Now we must solve SubPath (in C# we can do it using Path.GetFullPath as this method solve \/..\/ and .\/) \r\n\t\tpath = Path.GetFullPath(path);\r\n\t}\r\n\t\r\n\t\/\/With full path we must check if we need to convert to Unicode Path\r\n\tif(path.Length > 255 && !path.StartsWith(@\"\\\\?\\\"))\r\n\t\tpath = @\"\\\\?\\\" + path;\r\n\t\r\n\t\/\/Return the full valid path\r\n\treturn path;\r\n}\r\n```\r\n\r\nWhat do you think about this?\r\n\r\nPS: The logic to solve .\/ and ..\/ can be found in microsoft webpage https:\/\/referencesource.microsoft.com\/#mscorlib\/system\/io\/path.cs,dc6448549d442c9e\r\nin method `LegacyNormalizePath`","The suggestion makes sense, but there are 129 uses of FileUtils in CocoaPods so this might be some work. I'm also not able to use CocoaPods 1.9.3 on Windows due to https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/9731.","Any updates on this issue?\r\nI am trying to add firebase vision ml to my flutter app that I develop on windows and build for iOS using Codemagic.\r\nI seem to fail adding the vision pod for exactly the above reason.\r\nI have set the long path name for win32 in windows 10\r\nI tried pwsh, cmd, git bash\r\nI also moved the ruby tar path before any other and made sure my shell calls it when I type tar\r\n\r\nIf I could tell Cocoapods somehow not to use c:\\users\\myuser\\....\\caches\\cocoapods as a base folder that would solve the issue.\r\nIs there some way to force the base folder to some other, short path?\r\n\r\nhere's my podfile (tried with and without the pod 'Firebase' line)\r\n\r\n```\r\n# Uncomment the next line to define a global platform for your project\r\nplatform :ios, '9.0'\r\n# source 'https:\/\/cocoapods-cdn.netlify.app\/'\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\n# project '.\/Runner.xcodeproj'\r\n\r\ntarget 'Runner' do\r\n  # Comment the next line if you don't want to use dynamic frameworks\r\n  use_frameworks!\r\n\r\n  # Pods for Runner\r\n  # pod 'Firebase\/Core'\r\n  # pod 'Firebase\/MLVision'\r\n  #pod 'Firebase', '6.25.0'\r\n  #pod 'Firebase\/MLVisionFaceModel', '6.25.0'\r\n  pod 'Firebase'\r\n  pod 'Firebase\/MLVisionFaceModel'\r\nend\r\n```","update: although a bit crude, I opened cocoapods\/config.rb and changed cache_root to the constant 'c:\/x' after creating that folder. After that, pod update went through.\r\nnow i'm facing other, flutter\/windows warning which are unrelated to the long path issue","Patching config.rb is a cool hack, but can't you just specify it properly via config.yaml? I think on Windows it should be %USERPROFILE%\\.cocoapods\\config.yaml (based on what I see in https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/config.rb).\r\n\r\nWould be curious about your Flutter warning although this is probably outside of the scope of this conversation. Perhaps file an issue on Flutter just to get the conversation started?","Thanks! That **does** sound much better.  I don't know how I missed that comment.\r\n\r\nThe flutter part is still a problem. Been at it for quite some time now. Still unable to pass the CI build even after solving the warnings. I opened an issue there, too, with more information regarding flutter. Hope someone will have an idea.","Do you mind pasting a link to the Flutter issue?","https:\/\/github.com\/FirebaseExtended\/flutterfire\/discussions\/3938","Has any fix or work around (except for the one that making the cache path something like c:\/x) for this issue been found?"],"labels":["t2:defect","help wanted","windows"]},{"title":"[Catalyst] Podspec Resource Bundle requires a development team","body":"Podspec resource bundles now require a development team \/ signing identity. I think this only affects static libraries with resource bundles and not when the resources are bundled within a framework.\r\n\r\nI will take a look at the Pods project diff to see what keys need to be added and update this issue. Maybe this will require an update to the Xcodeproj gem?\r\n\r\n### Default after `pod install`\r\n<img width=\"377\" alt=\"Screen Shot 2019-06-05 at 10 51 00 PM\" src=\"https:\/\/user-images.githubusercontent.com\/518687\/59009968-7ebb2d00-87e4-11e9-9fe1-281086efc69c.png\">\r\n\r\n<img width=\"544\" alt=\"Screen Shot 2019-06-05 at 10 52 50 PM\" src=\"https:\/\/user-images.githubusercontent.com\/518687\/59010057-d6f22f00-87e4-11e9-8461-1c2a97a4baf0.png\">\r\n\r\n### Manually modified Pods project resolves the issue\r\n\r\n<img width=\"540\" alt=\"Screen Shot 2019-06-05 at 10 53 04 PM\" src=\"https:\/\/user-images.githubusercontent.com\/518687\/59010058-d6f22f00-87e4-11e9-8bde-2d7bdc7bc21d.png\">\r\n\r\n_Originally posted by @chrisballinger in https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8877#issuecomment-499359485_\r\n\r\n### Workaround\r\n\r\nWorkaround available by Podfile hack here: https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8891#issuecomment-546636698","comments":["There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Still not resolved as macOS 10.15 is already released.","Here is a Podfile hack workaround:\r\n\r\n```ruby\r\ndef fix_config(config)\r\n  # https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8891\r\n  if config.build_settings['DEVELOPMENT_TEAM'].nil?\r\n    config.build_settings['DEVELOPMENT_TEAM'] = '<YOUR TEAM ID HERE>'\r\n  end\r\nend\r\n\r\npost_install do |installer|\r\n  installer.generated_projects.each do |project|\r\n    project.build_configurations.each do |config|\r\n        fix_config(config)\r\n    end\r\n    project.targets.each do |target|\r\n      target.build_configurations.each do |config|\r\n        fix_config(config)\r\n      end\r\n    end\r\n  end\r\nend\r\n```","This workaround might not actually work after all. Although it builds and runs locally after the fix,  the binary is not accepted by App Store Connect, and is rejected with code `ITMS-90284` \"Invalid Code Signing\".\r\n\r\n> ITMS-90284: Invalid Code Signing - The executable 'Example.app\/Contents\/Resources\/ExamplePodBundle.bundle' must be signed with the certificate that is contained in the provisioning profile.\r\n\r\nSomeone else posted about this issue here: https:\/\/stackoverflow.com\/questions\/58547010\/ios-catalyst-cocoapod-framework-error-signing-requires-a-development-team","I submitted a radar FB7425571 because I really don't know how to fix this. It seems that resource bundle targets aren't compatible with Mac Catalyst App Store builds at all. It works just fine when running locally exported via Developer ID.\r\n\r\nSo far it seems the only workaround is to remove all resource bundle targets, which might be a big issue especially because they are \"strongly recommended\" in the podspec docs: https:\/\/guides.cocoapods.org\/syntax\/podspec.html#resource_bundles","Another workaround is to create exported archives of the resource bundles and then include that version instead.","@chrisballinger you can try set 'Signing Certificate' to 'Sign to Run Locally'. [like this](https:\/\/pic4.zhimg.com\/80\/v2-fdb1464681a2cdb892fe77c808c24bc7_hd.jpg)","This is probably a better way to fix it, without specifying the team id.\r\n```ruby\r\npost_install do |installer|\r\n    installer.pods_project.targets.each do |target|\r\n        # Fix bundle targets' 'Signing Certificate' to 'Sign to Run Locally'\r\n        if target.respond_to?(:product_type) and target.product_type == \"com.apple.product-type.bundle\"\r\n            target.build_configurations.each do |config|\r\n                config.build_settings['CODE_SIGN_IDENTITY[sdk=macosx*]'] = '-'\r\n            end\r\n        end\r\n    end\r\nend\r\n```","Relatedly, adding the option `CODE_SIGN_IDENTITY='-'` is a workaround for xcodebuild invocations.","Adding `CODE_SIGN_IDENTITY[sdk=macosx*]='-'` would be a relatively straightforward change on the CocoaPods side - if this is the _correct_ way to do it than we can move forward with that","Automatically signing to run locally is the right fix for local development. I'm not sure about deployment.","Won't Xcode re-sign when exporting archives?","Just to confirm settings for deployment through the appstore:\r\n\r\nSetting a team manually, and setting signing certificate 'development' results in the archive being signed by XCode and uploading to the store, but being rejected during processing with:\r\n\r\n> ITMS-90284: Invalid Code Signing - The executable 'Off.app\/Contents\/Frameworks\/Material.framework\/Versions\/A\/Resources\/com.cosmicmind.material.fonts.bundle' must be signed with the certificate that is contained in the provisioning profile\r\n\r\nSetting a team manually, and setting signing certificate 'sign to run locally' uploads correctly and results in a build that I can select for release in appstore connect.\r\n\r\n","So it's sounding like the `CODE_SIGN_IDENTITY[sdk=macosx*]='-'` works for development but not uploading to the App Store.\r\n\r\nThis is a bit problematic since we'll now need to pull the development team ID from somewhere. We can add code to infer it from the project but we may need new DSL for specifying it within the `target` block in the Podfile","`CODE_SIGN_IDENTITY[sdk=macosx*]='-'` works for uploading to the App Store.","It looks like Xcode 13.3 beta now imposes the same requirement on resource bundles even when building for iOS, not Mac Catalyst.\r\n\r\n**UPD**: I tried `CODE_SIGN_IDENTITY[sdk=iphone*]='-'` but it didn't help, Xcode is still asking me to set a team ID.","> It looks like Xcode 13.3 beta now imposes the same requirement on resource bundles even when building for iOS, not Mac Catalyst.\r\n> \r\n> **UPD**: I tried `CODE_SIGN_IDENTITY[sdk=iphone*]='-'` but it didn't help, Xcode is still asking me to set a team ID.\r\n\r\n+1","The newly introduced iOS behavior has been reported to Apple as FB9874350.","I want to confirm I have exactly same issue when compiling for iOS device under Xcode 13.3 beta 2 :( ","![image](https:\/\/user-images.githubusercontent.com\/216363\/154213959-aae48fa1-8e21-45bb-aea5-b19b26bfde4a.png)\r\nI set manually each Pod project having error with team signing. And it works now.   ","Thanks @JeffGuKang \r\n\r\nOn my side, I didn't have the tab \"Signing & Capabilities\" for the Pod, I had to set the \"Development Team\" in build settings for this Pod.","Setting the \"Development Team\" didn't work for me unfortunately.\r\n\r\n> The newly introduced iOS behavior has been reported to Apple as FB9874350.\r\n\r\n@nikolaykasyanov Is that radar still open? I can't seem to find it.\r\n","Good news, seems to be fixed with Xcode 13.3 RC!","@monchote I didn't cross-post it to openradar or anywhere, sorry.","Lots of people solved lots of problems! I solved a few just yesterday.\r\nFor this specific problem, the comment above worked for me: https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8891#issuecomment-573301570","I think you'll need to post a great deal more information in order for anything useful to come from your comments, like a future solution. https:\/\/stackoverflow.com\/help\/how-to-ask \/ https:\/\/stackoverflow.com\/help\/minimal-reproducible-example","This now again happens with Xcode 14 beta.\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8891#issuecomment-573301570 did not work for me.","I have never had it work consistently with 13.3 or 14rc without the signing workaround, personally.\r\nI just leave it on in my testing harness\r\n\r\nhttps:\/\/github.com\/mikehardy\/rnfbdemo\/blob\/51ef9f125d67b599854de81764b9451514a5608e\/make-demo.sh#L244-L246","> This now again happens with Xcode 14 beta. [#8891 (comment)](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8891#issuecomment-573301570) did not work for me.\r\n\r\n+1","> ![image](https:\/\/user-images.githubusercontent.com\/216363\/154213959-aae48fa1-8e21-45bb-aea5-b19b26bfde4a.png) I set manually each Pod project having error with team signing. And it works now.\r\n\r\nyou need to set 'DEVELOPMENT_TEAM' with you team id, not team name","> This now again happens with Xcode 14 beta. [#8891 (comment)](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8891#issuecomment-573301570) did not work for me.\r\n\r\n+1",">  Only set teamid to fix. this code work for me,  xcode14 beta2\u3002\r\n```\r\npost_install do |installer|\r\n  installer.pods_project.targets.each do |target|\r\n    target.build_configurations.each do |config|\r\n      if config.name != \"Release\"\r\n        config.build_settings['DEVELOPMENT_TEAM'] = \"  debugTeamId. \"\r\n      else\r\n        config.build_settings['DEVELOPMENT_TEAM'] = \" releaseTeamId. \"\r\n      end\r\n    end\r\n  end\r\nend\r\n```","> Only set teamid to fix. this code work for me, xcode14 beta2\u3002\r\n```\r\npost_install do |installer|\r\n    # Get main project development team id\r\n    dev_team = \"\"\r\n    project = installer.aggregate_targets[0].user_project\r\n    project.targets.each do |target|\r\n        target.build_configurations.each do |config|\r\n            if dev_team.empty? and !config.build_settings['DEVELOPMENT_TEAM'].nil?\r\n                dev_team = config.build_settings['DEVELOPMENT_TEAM']\r\n            end\r\n        end\r\n    end\r\n    \r\n    # Fix bundle targets' 'Signing Certificate' to 'Sign to Run Locally'\r\n    installer.pods_project.targets.each do |target|\r\n        if target.respond_to?(:product_type) and target.product_type == \"com.apple.product-type.bundle\"\r\n            target.build_configurations.each do |config|\r\n                config.build_settings['DEVELOPMENT_TEAM'] = dev_team\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n```","Hello,\r\n\r\nThis error now happens again with Xcode 14 beta 4.\r\n\r\nWorkaround with Podfile works: [#8891 (comment)](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8891#issuecomment-546636698)","fix \r\n```\r\npost_install do |installer|\r\n  installer.pods_project.targets.each do |target|\r\n    if target.respond_to?(:product_type) and target.product_type == \"com.apple.product-type.bundle\"\r\n      target.build_configurations.each do |config|\r\n          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'\r\n      end\r\n    end\r\n  end\r\nend\r\n```","> fix\r\n> \r\n> ```\r\n> post_install do |installer|\r\n>   installer.pods_project.targets.each do |target|\r\n>     if target.respond_to?(:product_type) and target.product_type == \"com.apple.product-type.bundle\"\r\n>       target.build_configurations.each do |config|\r\n>           config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'\r\n>       end\r\n>     end\r\n>   end\r\n> end\r\n> ```\r\n\r\nThis work with Xcode 14","> fix\r\n> \r\n> ```\r\n> post_install do |installer|\r\n>   installer.pods_project.targets.each do |target|\r\n>     if target.respond_to?(:product_type) and target.product_type == \"com.apple.product-type.bundle\"\r\n>       target.build_configurations.each do |config|\r\n>           config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'\r\n>       end\r\n>     end\r\n>   end\r\n> end\r\n> ```\r\n\r\nIf the error **doesn't fix** after this change, run `pod install`.","Is it still needed with the public Xcode 14 release?","> Is it still needed with the public Xcode 14 release?\r\n\r\nYes.","> \r\n\r\njust update 14.0.1 RC, still need","Im with Xcode 14 and with the same problem. I have five dependencies with this error when execute `pod install`.  \r\n\r\nThe `product_type` in the fix below need be changed one by one that error happen or it is generic?\r\n\r\n```\r\npost_install do |installer|\r\n  installer.pods_project.targets.each do |target|\r\n    if target.respond_to?(:product_type) and target.product_type == \"com.apple.product-type.bundle\" # <--- this\r\n      target.build_configurations.each do |config|\r\n          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'\r\n      end\r\n    end\r\n  end\r\nend\r\n```","The code above fix for all dependencies together. Thanks.","> fixar\r\n> \r\n> ```\r\n> post_install do |installer|\r\n>   installer.pods_project.targets.each do |target|\r\n>     if target.respond_to?(:product_type) and target.product_type == \"com.apple.product-type.bundle\"\r\n>       target.build_configurations.each do |config|\r\n>           config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'\r\n>       end\r\n>     end\r\n>   end\r\n> end\r\n> ```\r\n\r\n\r\n\r\n> l\r\n\r\nFriends, I add this code inside the block >\r\n # DO NOT MODIFY -- auto-generated by Apache Cordova\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\nsource 'https:\/\/cdn.cocoapods.org\/'\r\nplatform :ios, '11.0'\r\nuse_frameworks!\r\ntarget 'KAccess' do\r\nproject 'KAccess.xcodeproj'\r\npod 'PhoneNumberKit', '~> 3.3'\r\npod 'Firebase\/Core', '9.1.0'\r\npod 'Firebase\/Auth', '9.1.0'\r\npod 'Firebase\/Messaging', '9.1.0'\r\npod 'Firebase\/Performance', '9.1.0'\r\npod 'Firebase\/RemoteConfig', '9.1.0'\r\npod 'Firebase\/InAppMessaging', '9.1.0'\r\npod 'Firebase\/Firestore', '9.1.0'\r\npod 'Firebase\/Crashlytics', '9.1.0'\r\npod 'Firebase\/Functions', '9.1.0'\r\npod 'Firebase\/Installations', '9.1.0'\r\npod 'GoogleSignIn', '6.2.1'\r\npod 'GoogleTagManager', '7.4.1'\r\nend\r\n\r\nSorry, I'm not a native developer so something is beyond my knowledge.","Post your code as code with markdown char.\r\n\r\nPut the post install code in the end of your file `Podfile`."],"labels":["s2:confirmed"]},{"title":"Project Catalyst Support (aka UIKit on macOS)","body":"I'm not sure if this is better suited as an umbrella issue for people to help surface rough edges, or if opening multiple individual issues would be better.\r\n\r\nOne issue I've found so far is that I haven't found a way to vendor a fat static library built for multiple architectures. For instance:\r\n\r\n```\r\nld: in libcrypto.a(cryptlib.o), building for UIKitForMac, but linking in object file built for macOS, file 'libcrypto.a' for architecture x86_64\r\n```\r\n\r\nI'm not sure if the podspec DSL needs to be updated to support something like `s.iosmac.vendored_libraries` because including the simulator x86_64 architectures conflicts with the iOS Mac x86_64 slice.\r\n\r\nIssues identified so far:\r\n- [x] ~Additional platform likely required for `iosmac` when vendoring static libraries #8892~ vendor xcframeworks instead, supported added in v1.9.0\r\n- [ ] Resource bundles accompanying static libraries require a development team to be set #8891 ","comments":["you can do `s.macos.vendored_libraries` and `s.ios.vendored_libraries` maybe ship 2 `.a` files.","@dnkoutso  Ah yeah I'm saying that we might need to ship 3 `.a` files now instead of 2 because of the conflict for the x86_64 slice being used by both the iOS simulator and \"UIKit for macOS\". \r\n\r\n```ruby\r\n# built for macOS (x86_64, i386)\r\ns.macos.vendored_libraries = 'libs\/mac\/*.a'\r\n# built for iOS and iOS simulator (armv7, arm64, x86_64, i386)\r\ns.ios.vendored_libraries = 'libs\/ios\/*.a'\r\n# built for \"UIKit for macOS\" (x86_64)\r\ns.iosmac.vendored_libraries = 'libs\/iosmac\/*.a'\r\n```","I see is this Catalina only? probably yes we need to have this enhancement.","Yep! I am still trying to figure out how to cross compile static libs in the first place for the \"UIKit for macOS\" platform SDK, it's not exactly straightforward and I haven't seen any other examples yet. I can confirm so far that the \"UIKit for macOS\" linker rejects x86_64 slices built for the iOS simulator and for native macOS. I can also confirm that x86_64 is still not a valid non-simulator iOS target.\r\n\r\n```\r\nIn file included from \/Applications\/Xcode-beta.app\/Contents\/Developer\/Platforms\/iPhoneOS.platform\/Developer\/SDKs\/iPhoneOS13.0.sdk\/usr\/include\/stdlib.h:62:\r\n\/Applications\/Xcode-beta.app\/Contents\/Developer\/Platforms\/iPhoneOS.platform\/Developer\/SDKs\/iPhoneOS13.0.sdk\/usr\/include\/sys\/cdefs.h:803:2: error: Unsupported\r\n      architecture\r\n#error Unsupported architecture\r\n```\r\n","Do we need to add a new platform `iosmac` to Core?","@amorde That's my current hypothesis. It seems that the new `xcframework` stuff is the \"blessed\" approach in Xcode 11, but that doesn't really solve the problem for vendored static libraries. It might be helpful to check out how Carthage is approaching Catalyst support here: https:\/\/github.com\/Carthage\/Carthage\/issues\/2799","I did some more digging, it looks like you use a subfolder in the MacOSX SDK with a `x86_64-apple-ios13.0-macabi` target. Here are some nuggets I found in the raw build logs for compiling a C file in a static lib:\r\n\r\n### Compiling\r\n* `-target x86_64-apple-ios13.0-macabi`\r\n* `-isysroot \/Applications\/Xcode-beta.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX10.15.sdk`\r\n* `-isystem \/Applications\/Xcode-beta.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX10.15.sdk\/System\/iOSSupport\/usr\/include`\r\n* `-iframework \/Applications\/Xcode-beta.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX10.15.sdk\/System\/iOSSupport\/System\/Library\/Frameworks`\r\n### Linking\r\n* `-syslibroot \/Applications\/Xcode-beta.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX10.15.sdk`\r\n* `-L\/Applications\/Xcode-beta.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX10.15.sdk\/System\/iOSSupport\/usr\/lib`\r\n* `-L\/Applications\/Xcode-beta.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/lib\/swift\/uikitformac`\r\n\r\n```\r\nCompileC \/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Intermediates.noindex\/Marzipan.build\/Debug-uikitformac\/CrossTwo.build\/Objects-normal\/x86_64\/CrossTest.o \/Users\/xxxxxx\/Desktop\/Marzipan\/CrossTwo\/CrossTest.c normal x86_64 c com.apple.compilers.llvm.clang.1_0.compiler (in target: CrossTwo)\r\n    cd \/Users\/xxxxxx\/Desktop\/Marzipan\r\n    export LANG=en_US.US-ASCII\r\n    \/Applications\/Xcode-beta.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/clang -x c -target x86_64-apple-ios13.0-macabi -fmessage-length=0 -fdiagnostics-show-note-include-stack -fmacro-backtrace-limit=0 -std=gnu11 -fmodules -fmodules-cache-path=\/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/ModuleCache.noindex -fmodules-prune-interval=86400 -fmodules-prune-after=345600 -fbuild-session-file=\/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/ModuleCache.noindex\/Session.modulevalidation -fmodules-validate-once-per-build-session -Wnon-modular-include-in-framework-module -Werror=non-modular-include-in-framework-module -Wno-trigraphs -fpascal-strings -O0 -fno-common -Wno-missing-field-initializers -Wno-missing-prototypes -Werror=return-type -Wdocumentation -Wunreachable-code -Werror=deprecated-objc-isa-usage -Werror=objc-root-class -Wno-missing-braces -Wparentheses -Wswitch -Wunused-function -Wno-unused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wempty-body -Wuninitialized -Wconditional-uninitialized -Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants -Wno-conversion -Wconstant-conversion -Wint-conversion -Wbool-conversion -Wenum-conversion -Wno-float-conversion -Wnon-literal-null-conversion -Wobjc-literal-conversion -Wshorten-64-to-32 -Wpointer-sign -Wno-newline-eof -DDEBUG=1 -isysroot \/Applications\/Xcode-beta.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX10.15.sdk -fasm-blocks -fstrict-aliasing -Wdeprecated-declarations -g -Wno-sign-conversion -Winfinite-recursion -Wcomma -Wblock-capture-autoreleasing -Wstrict-prototypes -Wno-semicolon-before-method-body -Wunguarded-availability -index-store-path \/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Index\/DataStore -iquote \/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Intermediates.noindex\/Marzipan.build\/Debug-uikitformac\/CrossTwo.build\/CrossTwo-generated-files.hmap -I\/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Intermediates.noindex\/Marzipan.build\/Debug-uikitformac\/CrossTwo.build\/CrossTwo-own-target-headers.hmap -I\/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Intermediates.noindex\/Marzipan.build\/Debug-uikitformac\/CrossTwo.build\/CrossTwo-all-non-framework-target-headers.hmap -ivfsoverlay \/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Intermediates.noindex\/Marzipan.build\/Debug-uikitformac\/CrossTwo.build\/all-product-headers.yaml -iquote \/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Intermediates.noindex\/Marzipan.build\/Debug-uikitformac\/CrossTwo.build\/CrossTwo-project-headers.hmap -I\/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Products\/Debug-uikitformac\/include -isystem \/Applications\/Xcode-beta.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX10.15.sdk\/System\/iOSSupport\/usr\/include -I\/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Intermediates.noindex\/Marzipan.build\/Debug-uikitformac\/CrossTwo.build\/DerivedSources-normal\/x86_64 -I\/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Intermediates.noindex\/Marzipan.build\/Debug-uikitformac\/CrossTwo.build\/DerivedSources\/x86_64 -I\/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Intermediates.noindex\/Marzipan.build\/Debug-uikitformac\/CrossTwo.build\/DerivedSources -F\/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Products\/Debug-uikitformac -iframework \/Applications\/Xcode-beta.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX10.15.sdk\/System\/iOSSupport\/System\/Library\/Frameworks -MMD -MT dependencies -MF \/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Intermediates.noindex\/Marzipan.build\/Debug-uikitformac\/CrossTwo.build\/Objects-normal\/x86_64\/CrossTest.d --serialize-diagnostics \/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Intermediates.noindex\/Marzipan.build\/Debug-uikitformac\/CrossTwo.build\/Objects-normal\/x86_64\/CrossTest.dia -c \/Users\/xxxxxx\/Desktop\/Marzipan\/CrossTwo\/CrossTest.c -o \/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Intermediates.noindex\/Marzipan.build\/Debug-uikitformac\/CrossTwo.build\/Objects-normal\/x86_64\/CrossTest.o\r\n\r\nLibtool \/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Products\/Debug-uikitformac\/libCrossTwo.a normal x86_64 (in target: CrossTwo)\r\n    cd \/Users\/xxxxxx\/Desktop\/Marzipan\r\n    export MACOSX_DEPLOYMENT_TARGET=10.15\r\n    \/Applications\/Xcode-beta.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/libtool -static -arch_only x86_64 -D -syslibroot \/Applications\/Xcode-beta.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX10.15.sdk -L\/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Products\/Debug-uikitformac -L\/Applications\/Xcode-beta.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX10.15.sdk\/System\/iOSSupport\/usr\/lib -L\/Applications\/Xcode-beta.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/lib\/swift\/uikitformac -L\/Applications\/Xcode-beta.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX10.15.sdk\/System\/iOSSupport\/usr\/lib -L\/Applications\/Xcode-beta.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/lib\/swift\/uikitformac -filelist \/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Intermediates.noindex\/Marzipan.build\/Debug-uikitformac\/CrossTwo.build\/Objects-normal\/x86_64\/CrossTwo.LinkFileList -o \/Users\/xxxxxx\/Library\/Developer\/Xcode\/DerivedData\/Marzipan-gbnckgdrmlikahasegoldvxdkpif\/Build\/Products\/Debug-uikitformac\/libCrossTwo.a\r\n```","Another issue I've noticed is that podspec resource bundles now require a development team \/ signing identity. I think this only affects static libraries with resource bundles and not when the resources are bundled within a framework.\r\n\r\n### Default after `pod install`\r\n<img width=\"377\" alt=\"Screen Shot 2019-06-05 at 10 51 00 PM\" src=\"https:\/\/user-images.githubusercontent.com\/518687\/59009968-7ebb2d00-87e4-11e9-9fe1-281086efc69c.png\">\r\n\r\n<img width=\"544\" alt=\"Screen Shot 2019-06-05 at 10 52 50 PM\" src=\"https:\/\/user-images.githubusercontent.com\/518687\/59010057-d6f22f00-87e4-11e9-8461-1c2a97a4baf0.png\">\r\n\r\n### Manually modified Pods project resolves the issue\r\n\r\n<img width=\"540\" alt=\"Screen Shot 2019-06-05 at 10 53 04 PM\" src=\"https:\/\/user-images.githubusercontent.com\/518687\/59010058-d6f22f00-87e4-11e9-8bde-2d7bdc7bc21d.png\">\r\n","For any other lost souls trying to recompile their binary blobs, adding the following to `CFLAGS` and `LDFLAGS` seems to be the magic ticket:\r\n\r\n`-target x86_64-apple-ios-macabi -miphoneos-version-min=13.0`","Alrighty, was able to get things to work in case anyone else wants to check out an example: https:\/\/github.com\/ChatSecure\/ChatSecure-iOS\/pull\/1121\r\n\r\nI think I'll open up two separate issues for the CocoaPods related issues surfaced earlier so they are easier to tackle individually.","Thank you so much for diagnosing here.","And on the usage side of things, how could I exclude some pods only from the macOS app, while still being available on iOS?","\/Applications\/Xcode-beta.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/lib\/swift\/uikitformac not found in xcode-beta 4 release. ","Any news?","Here's a workaround for the Resource signing issue: https:\/\/github.com\/firebase\/firebase-ios-sdk\/issues\/3500#issuecomment-518741681","> For any other lost souls trying to recompile their binary blobs, adding the following to `CFLAGS` and `LDFLAGS` seems to be the magic ticket:\r\n> \r\n> `-target x86_64-apple-ios-macabi -miphoneos-version-min=13.0`\r\n\r\nMay you please explain how you have done this? Do you set that in XCODE itself? Thanks","too much trouble, I would not support this soon... maybe ill wait until its stable enough.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","This has not been fixed yet.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Resource bundles on Catalyst are still problematic, however..... as far as I can tell they can't be shipped to the App Store.\r\n\r\n> ITMS-90284: Invalid Code Signing - The executable 'Example.app\/Contents\/Resources\/ExamplePod.bundle' must be signed with the certificate that is contained in the provisioning profile.\r\n\r\nI wasn't able to find a workaround, so my solution has been to remove pods that contain resource bundles.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Not stale","This issue will be auto-closed because there hasn't been any activity for a few months. Feel free to [open a new one](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/new) if you still experience this problem :+1:\n","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Not stale","Has `iosmac` platform been added? to configure independently `s.ios.deployment_target = '12.0'` and `s.iosmac.deployment_target = '12.0'` for example?"],"labels":["t4:question"]},{"title":"Feature Request: Preserve folder structure in podspec","body":"# Report\r\n\r\nFeature Request\r\n\r\n## What did you do?\r\n\r\nI created a podspec where the folder structure has depth, not all headers exist in the same directory but in lots of different directories. \r\n## What did you expect to happen?\r\n\r\nI want to be able to keep the folder structure I have instead of it flattening out.\r\n\r\n## What happened instead?\r\n\r\nAfter I install my podspec all the headers flatten out and the podspec fails to build because my import statements still reference the more complete paths. There seems to be a lot of stackoverflow articles on this back in 2014 but none of them have a conclusive answer.","comments":["Maybe `:preserve_pod_file_structure` is what you are looking for?\r\n\r\nCan you try adding this to your Podfile:\r\n\r\n```ruby\r\ninstall! 'cocoapods',\r\n         : preserve_pod_file_structure => true\r\n```\r\n\r\nYou can take a look at the [`install!` Syntax](https:\/\/guides.cocoapods.org\/syntax\/podfile.html#install_bang) to see other options.","> Maybe `:preserve_pod_file_structure` is what you are looking for?\r\n> \r\n> Can you try adding this to your Podfile:\r\n> \r\n> ```ruby\r\n> install! 'cocoapods',\r\n>          : preserve_pod_file_structure => true\r\n> ```\r\n> \r\n> You can take a look at the [`install!` Syntax](https:\/\/guides.cocoapods.org\/syntax\/podfile.html#install_bang) to see other options.\r\n\r\n@mfiebig  If I want to use the `preserve_pod_file_structure` feature, how do I configure my `podspec` file? I tried to use this feature in existing projects, but nothing changed.","It's a change within your `Podfile` not the `podspec` of your Pod.\r\n\r\nSee this example:\r\n\r\n```ruby\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\n\r\ninstall! 'cocoapods',\r\n  :preserve_pod_file_structure => true\r\n\r\nplatform :ios, '10.0'\r\n\r\ntarget 'Sample' do\r\n  pod 'AFNetworking', '~> 3.1'\r\nend\r\n```\r\n\r\nDoes this work for you?\r\n\r\nThe only case I can imagine, where this would not work is, when you use the actual `podspec` and `app_spec` to generate the project.","This change to my test `Podfile` seems to keep the folder structure of my pods. But this also modifies the structure of pods like `Realm`.\r\n\r\n@mfiebig Is there a way to only keep the structure of my pods without touching other pods so as to not break them?\r\n\r\nIf there is not a way to only keep the file structure of my `podspec`s from within the `Podfile` is it possible that adding in that flag will not break any other pods, such as `Realm`, which are not designed to use `preserve_pod_file_structure`?","You could add them as development pods (`:path => ...`) if that\u2019s an option. Development pods keep their folder structure.\r\n\r\nWhat do you want to achieve with the groups? Maybe there is something available for your problem instead of your proposed feature?","@mfiebig \r\nBasically what I want to achieve is I am making a `podspec` and I want to keep the folder structure in the `podspec` so users can see which headers are in which folder. Since this is a release pod I wouldn't like to instruct users to install it as a development pod.\r\n\r\nSo if in my project which will be podded I have `foo\/bar\/header.h` I want the user to see that it is in `foo\/bar` directory when they install my pod.","Right now when I install my `podspec` it flattens everything, so `header.h` which was in `foo\/bar\/` is now just in that flat repository. I would like it to still be in `foo\/bar\/`","Ok I get it, and you want that feature for users of the pod not for further development of your pod, right?\r\n\r\nSo why would consumers be interested in the structure? If they are, they could adopt the available syntax in their Podfile?\r\n\r\nI guess the internal structure of any pod is non relevant for the pod itself, some users might be interested, hence the user defined syntax.\r\nI guess adding the feature should be a manageable task. Maybe a core member can answer if it aligns with in the interest of cocoapods?","@mfiebig Yes for users of the pod. Consumers would be interested in how the different headers are arranged so they can more clearly see which headers do what (if I have a `graphics` directory and a `math` directory in my pod the users know headers in `graphics` will deal with UI and headers in `math` will deal with math).\r\n\r\nIt's more for informational purposes. \r\n\r\nIf nothing is available to accomplish that would the only options be to either *accept a flat directory* or to create `subspecs` and use `header_mappings_dir` in each of the `subspecs` to force some folder structure? Where each `subspec` is a folder (like `math` or `graphics`)?","To be specific - the project I am doing this for is the pod of [EarlGrey2](https:\/\/github.com\/google\/EarlGrey\/tree\/earlgrey2). If you notice we have `CommonLib` and `TestLib` folders so that the user knows what files to use for what. I would like the user to see that CommonLib\/TestLib separation after they install the pod instead of just having all those headers combined in the base directory. ","Podspecs support [header_mappings_dir](https:\/\/guides.cocoapods.org\/syntax\/podspec.html#header_mappings_dir) to control the behavior of flattening headers, and [header_dir](https:\/\/guides.cocoapods.org\/syntax\/podspec.html#header_dir) to control the name of the directory which will contain the headers (defaults to the Pod name).\r\n\r\nDo these two attributes help with what you're trying to accomplish?","They help somewhat. The problem is with those you will have to define every single subdirectory manually, i.e. you need a header_dir and header_mappings_dir for every single folder. In a large project this is not ideal. Ideally there would be a single line flag that you can just put in the podspec to preserve *all* paths. ","@brettfazio I get what you would like to do. Maybe @amorde could tell us if this would be an fitting addition to cocoa pods?\r\n\r\nFor me, it looks like an appropriate documentation could be an alternative (maybe better?) way to do this? Personally I like to rely on docsets (with the awesome dash app) as a source how to do things. While implementing, code comments help to understand things. If users misuse API, maybe cross referencing and \"do not ...\" comments can help.\r\n\r\nAnyway, if the cocoapods team decides this is a valid feature request, I would like to help (if time permits :) )","I'd like to leave a comment there to just clarify that Development Pods do not preserve the folder structure.\r\nI have `s.source_files = 'NativeHelpWidget\/Source\/**\/*.{swift,xib,storyboard}'` in my podspec and it just flattens out whatever folder structure I might have with `pod install` on the demo app.","\ud83d\udc4d  @markltownsend  I'm seeing the same ","@kerrmarin and others.. I believe I got this working by including h,m in the list of extensions above. \r\nSo, `s.source_files = 'NativeHelpWidget\/Source\/**\/*.{h,m,swift,xib,storyboard}`.  After updating this and doing a `pod install` the folders showed up in the Development Pods.","Ah, thanks for that @markltownsend. What I found is that the folder structure is only preserved for folders that have a source file in them. For example:\r\n\r\n- Folder structure A\/B\/C where only C has .swift files in them after a `pod install` my project will show the group C but not A or B even though C is a child of B (and by extension A).\r\n- Folder structure A\/B\/C where A has a.swift and B hosts b.swift and C hosts c.swift after a `pod install` all groups appear.\r\n\r\n@dnkoutso is this expected behaviour?","Ah yes, that make sense too.  I believe that the way that source_files works is that it takes the pattern and copies those files in the appropriate place in the development pod. I think Xcode then takes into account the folder structure.  If there are no files, then no folder structure.  But then I don't understand why the folder structure isn't kept when the pod is installed normally.","all files in one floder is very confuse,think more than 1000 file in one path, i want to folder structor too,\r\n","> all files in one floder is very confuse,think more than 1000 file in one path, i want to folder structor too,\r\n\r\npreserve_pod_file_structure is useful hhh","We recently needed this in one of our project and we were able to keep the folder structure by using the approach [here](https:\/\/github.com\/saachitech\/RNPokerStoveLib\/blob\/master\/ios\/RNPokerStoveLib.podspec). I think it just we need to create `subspec` and then setup correct source files and header files. This is working fine in our case.\r\n","+1 for this. \r\n\r\nI've taken some unconventional measures to resolve issues with the project structure of my development pods (of which there are many for modualisation reasons).  See here for more info... https:\/\/stackoverflow.com\/questions\/21168826\/preserve-folder-structure-cocoa-pods\/65511402#65511402","We can update `preserve_pod_file_structure` to take in a regex like `share_schemes_for_development_pods` and allow folks to specify the pods they want to preserve the structure for.","> We can update `preserve_pod_file_structure` to take in a regex like `share_schemes_for_development_pods` and allow folks to specify the pods they want to preserve the structure for.\r\n\r\n@dnkoutso when this feature can try?","Hey guys\r\n\r\nFor those who still can't solve the problem I managed:\r\n\r\nIf you have something like this:\r\n\r\n```\r\nYourPod\r\n |\r\n---- Classes\r\n     |\r\n     MainController.swift\r\n---- Resources\r\n---- Tests\r\n```\r\n\r\nWhere inside Classes go your files and sub folders for organization.\r\nIf you want it to appear the same way it is, the Resources folder needs to have (at least) a file of some sort that also has classes.\r\nFor example:\r\n\r\n```\r\nYourPod\r\n |\r\n---- Classes\r\n     |\r\n     ---- MainController.swift\r\n---- Resources\r\n    |\r\n     ---- Assets.swift\r\n---- Tests\r\n```\r\n\r\nSo, in your podspec you need to say that you have files in both folders:\r\n\r\n```\r\ns.resource = 'YourPod\/Resources\/**\/*.{xcassets, strings}'\r\ns.source_files = 'YourPod\/Classes\/**\/*.{swift,h,m}', 'YourPod\/Resources\/**\/*.{swift,h,m}'\r\n```\r\n\r\nFile organization is the same as GitHub. If you create an empty folder it is not recognized on GitHub, only local.\r\nBut when you put a file yes!\r\n\r\nHope this helps"],"labels":["t1:enhancement","d2:moderate","help wanted"]},{"title":"Installer pods_project.pod_groups returns incorrect reference with :generate_multiple_pod_projects","body":"\ud83c\udf08\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nWith `:generate_multiple_pod_projects => true`:\r\n`installer.pods_project.pod_groups` returns reference to the sub project, not the group for the pod. The group is one level deeper. Also the return type is `Array<PBXFileReference>` vs the documented `Array<PBXGroup>`\r\n\r\nThis breaks a post install script I'm using to add a folder reference for a development pod. This folder includes configuration files that are nice to tweak from xcode, but aren't resources to be included in the final build. If there is a better way to do this, let me know.\r\n```ruby\r\n  installer.pods_project.pod_groups.each do |pod_group|\r\n    if pod_group.name == \"LocalPod\"\r\n      dir = pod_group.real_path.to_s + '\/Operations\/'\r\n      installer.pods_project.add_file_reference(dir, pod_group, true, nil)\r\n    end\r\n  end\r\n```\r\n\r\n## What did you expect to happen?\r\n\r\n`installer.pods_project.pod_groups` returns reference to the `PBXGroup` inside of the sub project.\r\n\r\n## What happened instead?\r\n\r\n`installer.pods_project.pod_groups` returns reference to the sub project which is a `PBXFileReference`.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.7.0\r\n        Ruby : ruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin18]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.14.4 (18E226)\r\n       Xcode : 10.2.1 (10E1001)\r\n         Git : git version 2.20.1 (Apple Git-117)\r\nRuby lib dir : \/usr\/local\/var\/rbenv\/versions\/2.3.3\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ e3650707a8182edf02482a3a5dd60355b15a9db5\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/var\/rbenv\/versions\/2.3.3\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\nclaide-plugins        : 0.9.2\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\nslather               : 2.4.4\r\n```\r\n","comments":["Cc @sebastianv1","Yeah `#pod_groups` might need some updating with `generate_multiple_pod_projects` since the children of the `Pods` and `Development Pods` groups are now subprojects instead of groups. \r\n\r\n@cltnschlosser I would recommend using the `#generated_projects` or for just the set of projects for pods, `#generated_pod_targets` on `installer` to find the group for \"LocalPod\" instead of just `pods_project`.\r\n","Thanks for the tip, I'll keep in mind if I'm able to switch to multiple xcodeprojs. We use FBSDKLoginKit, so currently blocked by the way they import internal headers from FBSDKCoreKit \ud83d\ude41 ","You could still use `generated_projects` today (supports both single and multi pod projects) so that when you do switch over it _should_ just work. But thanks for pointing out the issue with `#pod_groups`. ","I tried to take a stab at this. I managed to fix it but I am not happy. In multi-xcodeproj to return the pod group for subprojects means we have to call `Project.load` in order to be able to return the group reference of that project.\r\n\r\nThis can be costly. as for large projects we have to re-open _all_ of them.\r\n\r\nThis needs a different model in which all sub-projects are passed into `project.rb` after they have been created to be properly solved.","Removing from 1.10 milestone."],"labels":["t2:defect","d2:moderate","s7:workaround available"]},{"title":"`repo push` caches revision of git tag","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 10.1: Requires CocoaPods 1.6.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n`pod repo push` command caches revision of `git tag` and does not download a new one when called again. `pod cache clean --all` fixes the issue, however this is still a bug, perhaps\r\n\r\n## What did you do?\r\n* Create a tag `my_version`\r\n* Run `pod repo push my_spec_repo MyPod.podspec` with `s.source   = { :git => 'https:\/\/gitlab.my\/MyPod.git', :tag => \"my_version\" }` inside\r\n* Failed due to some issue in `my_version` \r\n* Delete `my_version` tag, fix ongoing code and re-create `my_version` tag\r\n* Run `pod repo push <...>` again\r\n\r\n## What did you expect to happen?\r\nNew revision of `my_version` tag fetched by `cocoapods`\r\n\r\n## What happened instead?\r\nOld `my_version` tag revision was used and push failed again\r\n","comments":["Did you push the updated tag via git?","See https:\/\/stackoverflow.com\/questions\/5195859\/how-do-you-push-a-tag-to-a-remote-repository-using-git\r\n\r\n`pod repo push` does not cache anything...as far as I know.","I've created tag by gitlab's web interface. I've double checked - it works as expected:\r\n```\r\n$ git log -1 my_version\r\n> 2b5aa7b0e8a443088bd1f615a616fec0b0a8cf3e\r\n$ git fetch --tags --force\r\n> From https:\/\/gitlab.my\/MyPod\r\n>  t [tag update]      my_version   -> my_version\r\n$ git log -1 my_version\r\n> 1796dd1129b784cc54efe40b488a74a1697bed84\r\n```","Have you tried `pod cache clean MyPod`? \r\n\r\nAgain unless the `pod cache` returns a cached pod the `repo push` command does not do any caching in and of itself.","I can judge by logs that in fact it __does__ caches it, first time around logs `--verbose` looks like\r\n```-> Installing MyPod (versionX)\r\n > Git download\r\n     $ \/usr\/bin\/git clone https:\/\/gitlab.my\/MyPod.git \/var\/folders\/84\/fzv_3rsn06507glr46ty_mkw0000gn\/T\/d20190521-45748-1ktb0ey --template= --single-branch --depth 1 --branch my_version\r\n     Cloning into '\/var\/folders\/84\/fzv_3rsn06507glr46ty_mkw0000gn\/T\/d20190521-45748-1ktb0ey'...\r\n     Note: checking out '2b5aa7b0e8a443088bd1f615a616fec0b0a8cf3e'.\r\n```\r\nNote that `2b5aa7...` is first revision of this tag which is ok for the time being, but **despite validation fails** at the second attempt after tag is fixed logs looks like \r\n```\r\n-> Installing MyPod (versionX)\r\n  > Copying MyPod from `\/Users\/katsz\/Library\/Caches\/CocoaPods\/Pods\/External\/MyPod\/0d45d2fec240f3ebc74ed09f4259c35f-431ee` to\r\n  `..\/..\/..\/..\/private\/var\/folders\/84\/fzv_3rsn06507glr46ty_mkw0000gn\/T\/CocoaPods-Lint-20190521-45792-1l2606c-MyPod\/Pods\/MyPod`\r\n```\r\n\r\nwhich means it **was** cached after failed validation. ","This is what I said also above the cached pod might be returned so you need to run `pod cache clean MyPod` did you do that?","As i mentioned before\r\n> pod cache clean --all fixes the issue, however this is still a bug, perhaps\r\n\r\nbecause my invalid pod shouldn't be cached","What is the logic behind\r\n\"Sorry dude, your code is not compiling, but I still will cache it for you\"\r\nhuh?","Predates me. Could use some help maybe `pod repo push` should never cache the pod being tested or ensure the cache is clean if the attempt fails.","`pod cache clean MyPod` It's work for me"],"labels":["t2:defect","d2:moderate","help wanted"]},{"title":"Invalid argument @ io_fread error when linting pod with large vendored files (>2gb)","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\npod spec lint TensorIOTensorFlow.podspec --verbose\r\n\r\n## What did you expect to happen?\r\n\r\nI expected the pod to lint correctly\r\n\r\n## What happened instead?\r\n\r\nThe pod fails to lint with the following error:\r\n\r\n```\r\n- ERROR | [iOS] unknown: Encountered an unknown error (Invalid argument @ io_fread - \/path\/to\/vendored\/framework\/file\r\n\r\n\/Library\/Ruby\/Gems\/2.3.0\/gems\/ruby-macho-1.4.0\/lib\/macho\/fat_file.rb:94:in `read'\r\n\/Library\/Ruby\/Gems\/2.3.0\/gems\/ruby-macho-1.4.0\/lib\/macho\/fat_file.rb:94:in `open'\r\n\/Library\/Ruby\/Gems\/2.3.0\/gems\/ruby-macho-1.4.0\/lib\/macho\/fat_file.rb:94:in `initialize'\r\n\/Library\/Ruby\/Gems\/2.3.0\/gems\/ruby-macho-1.4.0\/lib\/macho.rb:31:in `new'\r\n\/Library\/Ruby\/Gems\/2.3.0\/gems\/ruby-macho-1.4.0\/lib\/macho.rb:31:in `open'\r\n\/Library\/Ruby\/Gems\/2.3.0\/gems\/cocoapods-1.6.0\/lib\/cocoapods\/sandbox\/file_accessor.rb:436:in `dynamic_binary?'\r\n\/Library\/Ruby\/Gems\/2.3.0\/gems\/cocoapods-1.6.0\/lib\/cocoapods\/sandbox\/file_accessor.rb:171:in `block in vendored_dynamic_frameworks'\r\n\/Library\/Ruby\/Gems\/2.3.0\/gems\/cocoapods-1.6.0\/lib\/cocoapods\/sandbox\/file_accessor.rb:170:in `select'\r\n\/Library\/Ruby\/Gems\/2.3.0\/gems\/cocoapods-1.6.0\/lib\/cocoapods\/sandbox\/file_accessor.rb:170:in `vendored_dynamic_frameworks'\r\n\/Library\/Ruby\/Gems\/2.3.0\/gems\/cocoapods-1.6.0\/lib\/cocoapods\/sandbox\/file_accessor.rb:179:in `vendored_static_frameworks'\r\n\/Library\/Ruby\/Gems\/2.3.0\/gems\/cocoapods-1.6.0\/lib\/cocoapods\/sandbox\/file_accessor.rb:245:in `vendored_static_artifacts'\r\n...\r\n```\r\n\r\nAs far as I can tell this is a problem with ruby reading files larger than 2gb. The file is a static library we are vending in a .framework bundle and comes in at a hefty ~2.5gb. The previous version of this framework vended a smaller static library with the same directory structure and it linted without any issues.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.6.0\r\n        Ruby : ruby 2.3.7p456 (2018-03-28 revision 63024) [universal.x86_64-darwin18]\r\n    RubyGems : 2.5.2.3\r\n        Host : Mac OS X 10.14.4 (18E226)\r\n       Xcode : 10.2.1 (10E1001)\r\n         Git : git version 2.20.1 (Apple Git-117)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.3\/usr\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 79664131a6e07a7492255fc8e1135ced79a6a7c8\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/doc-ai\/tensorio-tensorflow-ios\r\n","comments":["Seems like a bug in `ruby-macho` gem. \/cc @woodruffw \r\n\r\nPerhaps fixed in the latest 2.x version of `ruby-macho` but CocoaPods is still on the 1.x version.","~Will attempt a lint with 2.x and report back~ \r\n\r\nAh misunderstood that you were suggesting to try a prerelease version of cocoapods","My guess is that the `fread` that underlies ruby-macho's `File.read` is failing at the signed 32-bit boundary (2.5GB would put you _just_ over that). I'll take a look this evening.","Hmm, so here's the `io_fread` signature:\r\n\r\n```c\r\nstatic long\r\nio_fread(VALUE str, long offset, long size, rb_io_t *fptr)\r\n```\r\n\r\nI'm *pretty* sure macOS is LP64, so `size` shouldn't be overflowing at 2.5GB. The only other actual failure mode in `io_fread` looks like the string re-allocation, but I don't think that's what's failing here (I'd expect a different error). So I'm a bit stumped, at least until I look into this more deeply.\r\n\r\nGenerally speaking, it would be ideal if `ruby-macho` didn't suck the entire file into memory to perform its operations. Unfortunately, most of the current codebase is built around the assumption that a raw buffer of the file's contents is always available. It might be feasible to add a mode that only parses the load commands, which would reduce the size of the in-memory buffer drastically.","Any updates on this? I am experiencing the exact same issue while linting.","> Any updates on this? I am experiencing the exact same issue while linting.\r\n\r\nNo update on the ruby-macho side. I haven't had time to work on an I\/O abstraction that avoids sucking the whole binary into memory, but would review and accept a PR for one.\r\n\r\nIn the mean time, my recommendation (which you should take with a grain of salt, since I don't know anything about iOS apps!) is that you vendor or otherwise rearchitect your Mach-Os so that they fall under ~2.4GB.","Okay. Thanks for the quick reply. I guess the current viable workaround is to remove one of the less used target architecture (x86_64) from the vendored framework.","You can consider to remove unnecessarily mach-o archs from \"Pods\/\" directory in pre_install time, I solve this problem by doing this\r\n```\r\nrequire 'fileutils'\r\nrequire 'open3'\r\n\r\npre_install do | installer |\r\n  puts \"pod time pre_install #{Time.now.to_s}\"\r\n\r\n#  if $build_machine\r\n#    pod_library_thin(['i386','x86_64'])\r\n#  else\r\n    # local pods\r\n    pod_library_thin(['armv7','i386'])\r\n#  end\r\n\r\n  puts \"pod time pre_install finish #{Time.now.to_s}\"\r\nend\r\n\r\ndef pod_library_thin(archs)\r\n\r\n  if archs.empty?\r\n    return\r\n  end\r\n\r\n  libraries = Dir[\"Pods\/**\/*.a\"]\r\n\r\n  size_before = 0\r\n  size_after = 0\r\n  libraries.each { |e|\r\n    size_before = size_before + File.size(e)\r\n    archs.each { |arch|\r\n      cmd = \"lipo -remove #{arch} #{e} -output #{e}\"\r\n      stdout, stderr, status = Open3.capture3(cmd)\r\n    }\r\n    size_after = size_after + File.size(e)\r\n  }\r\n  puts 'pod_library_thin %.1f M' % ((size_before - size_after).to_f \/ (1024 ** 2))\r\nend\r\n\r\n```","In my case, `ruby-macho` failed about even 700MB of input file.\r\nI tried all versions of `ruby-macho` up to `1.11.3`, but nothing could solve error `Invalid argument @ io_fread`.\r\nThe only solution was to reduce input file size under the error in source code not fixed.\r\nI used release build of my library as input file, instead of debug build.\r\nIts size was 200MB and this solution compiled iOS app and ran it on iOS simulator successfully."],"labels":["t2:defect","s2:confirmed","help wanted","s7:workaround available"]},{"title":"Include all README.md files found in groups with source files","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nRun `pod install` to install a local podspec whose sources contain multiple README.md files in various subdirectories.\r\n\r\n## What did you expect to happen?\r\n\r\nThe README.md files should be listed in Pods.xcodeproj to facilitate reading in consumer projects\/workspaces, similar to the repo browsing experience on GitHub\/GitLab\/Bitbucket, where any README.md present in the currently browsing directory is rendered.\r\n\r\n## What happened instead?\r\n\r\nREADME.md files from subdirectories are not included; only the one from the pod's source root, as mentioned in https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/2260.\r\n\r\nI think it'd be best to just include any `README.md`s encountered as part of the xcodeproj generation. Some things I considered\/tried:\r\n\r\n- I tried `preserve_paths` but that didn't bring them into the project, just leaves them on disk. \r\n- I thought a workaround might be to include `README.md`s as source files and somehow define Xcode build rules to ignore them, but that's really hacky and maybe not even possible. \r\n- Adding a new declarator akin to `preserve_paths`, which would also add declared files to Pods.xcodeproj without any targets selected, could be useful, but would increase surface area for a really niche solution. \r\n\r\nThanks for your consideration! \ud83d\udc4b\ud83c\udffb\r\n\r\n## CocoaPods Environment\r\n\r\n<details>\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.6.1\r\n        Ruby : ruby 2.5.5p157 (2019-03-15 revision 67260) [x86_64-darwin18]\r\n    RubyGems : 2.7.6.2\r\n        Host : Mac OS X 10.14.4 (18E226)\r\n       Xcode : 10.2 (10E125)\r\n         Git : git version 2.20.1 (Apple Git-117)\r\nRuby lib dir : \/Users\/amcknight\/.rbenv\/versions\/2.5.5\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ ef61253719174aaf39a8394ee9518acb63bf4012\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/amcknight\/.rbenv\/versions\/2.5.5\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '9.0'\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\nuse_frameworks!\r\n\r\ntarget 'Swiftilities_Example' do\r\n  pod 'Swiftilities', :path => '..\/'\r\nend\r\n\r\ntarget 'Swiftilities_Tests' do\r\n  pod 'Swiftilities', :path => '..\/'\r\nend\r\n```\r\n<\/details>","comments":["Yeap good enhancement!","FWIW I believe if you put `.md` files into `docs` folder that will be included for local pods.\r\n\r\nThe logic for the local-Podspec-specific files is here:\r\n\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/19bfe2ad91e53f7b758171de00a59e77b692cb39\/lib\/cocoapods\/sandbox\/file_accessor.rb#L344-L366\r\n\r\nthe Readme is handled here:\r\n\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/19bfe2ad91e53f7b758171de00a59e77b692cb39\/lib\/cocoapods\/sandbox\/file_accessor.rb#L301-L303","That is good to know, thank you @amorde for the tip!","Does this solve this issue?","I\u2019d say no, as it prescribes a certain structure for a project\u2019s files, which might not be desirable\u2013personally I\u2019d prefer to keep readmes with code instead of in a totally separate and parallel directory like `docs`. \r\n\r\nAlso it sounds like it only works for local installations and not production (I didn\u2019t test the difference), but my main objective is to deliver the readmes to consumers of a pod, not just its developers.","sounds good. Marked it as help wanted for anyone to pick up and enhance!","I read through some code last week and left some breadcrumbs for myself... wondering if I'm on the right trail here: https:\/\/github.com\/armcknight\/CocoaPods\/pull\/1","Left some comments for you but yes looks like you're on the right track \ud83d\udc4d "],"labels":["t1:enhancement","d2:moderate","help wanted"]},{"title":"Separate build configuration for Test action breaks autocomplete in test target","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md). \ud83c\udf08\r\n\r\n# Report\r\n\r\n## What did you do?\r\nWhen using different build configurations for the Build and Test actions, when integrated with CocoaPods (1.6.1 or 1.7.0.beta.3), autocomplete for target API in test files fails in Xcode 10.1 and 10.2. Same project worked fine prior to CP integration.\r\n\r\n## What did you expect to happen?\r\nAutocomplete should work correctly in test files for test target API.\r\n\r\n## What happened instead?\r\nAutocomplete is broken for all types from the test target.\r\n\r\nNote: Setting the Build action's configuration to match the Test action fixes the autocomplete issue. However, this is not a tenable solution due to intended behavioral differences in the target app when built using the Testing configuration.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.7.0.beta.3\r\n        Ruby : ruby 2.6.2p47 (2019-03-13 revision 67232) [x86_64-darwin18]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.14.4 (18E226)\r\n       Xcode : 10.2 (10E125)\r\n         Git : git version 2.20.1 (Apple Git-117)\r\nRuby lib dir : \/Users\/jshier\/.rvm\/rubies\/ruby-2.6.2\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ b4fa385ae7fa5e1b22cd0171bafde1d21d781fe4\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/jshier\/.rvm\/gems\/ruby-2.6.2@autocompletetest\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '12.0'\r\n\r\nproject 'AutocompleteTest', 'Testing' => :debug\r\n\r\npod 'SwiftLint'\r\n\r\ntarget 'AutocompleteTest' do\r\n  use_frameworks!\r\n  pod 'Alamofire', '~> 5.0.0-beta.5'\r\n\r\n  target 'AutocompleteTestTests' do\r\n    inherit! :search_paths\r\n\r\n    pod 'OHHTTPStubs\/Swift'\r\n  end\r\n\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nNote: Project contains Git history of initial project -> CP 1.6.1 -> CP 1.7.0.beta.3, no ignored files.\r\n\r\n[AutocompleteTest.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/3086996\/AutocompleteTest.zip)","comments":["This issue is still occurring when using CocoaPods 1.7.0.rc.2, though it's a bit better. Now, instead of always being broken, autocomplete will start working if I do a regular build first, then build for testing. Once that happens, changes from the main target show up and I can autocomplete all I want.\r\n\r\nI've moved the example project to a separate repo, with a new commit for 1.7.0.rc.2. https:\/\/github.com\/jshier\/AutocompleteTest","So while rc.2 seems to have helped the test project, the app I discovered the issue with is no better. ","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","This issue will be auto-closed because there hasn't been any activity for a few months. Feel free to [open a new one](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/new) if you still experience this problem :+1:\n","> Now, instead of always being broken, autocomplete will start working if I do a regular build first, then build for testing. Once that happens, changes from the main target show up and I can autocomplete all I want. \r\n\r\nI _think_ that is intentional by Xcode? Not 100% sure. I am keeping this open though.","It's not how Xcode typically works. Normally, you can have a clean project and immediately build for testing, which builds both the target and the tests, and have the targets symbols available. Something about CocoaPods' integration here breaks that, likely having something to do with where products are store on disk, and building the normal project first (under the Debug configuration), allows the Test configuration to see the symbols from the app. Without CocoaPods, separate configurations for development and testing work fine.\r\n\r\nI'll try to run my tests under 1.8 when I get a chance.","I dont think anything has changed for 1.8 that would have improved this. I only hope an Xcode update may have improved this if its truly the CocoaPods structure.\r\n\r\nIt might have to do with the fact that we use implicit linking but I am not entirely sure.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","This issue will be auto-closed because there hasn't been any activity for a few months. Feel free to [open a new one](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/new) if you still experience this problem :+1:\n","Sorry for necroing this issue, but I have some hopefully new info.\r\n\r\nI ran into this issue and I have a couple of details I can add that might help someone who has more Cocoapods\/Xcode knowledge solve this issue.\r\n\r\nI followed instructions here: [PSPDFKit Blog Post](https:\/\/pspdfkit.com\/blog\/2019\/how-xcode-indexing-works-and-how-to-solve-problems\/)\r\n\r\nDoing this gave me a whole list of arguments being passed by Xcode when compiling for source kit and a nasty error message:\r\n```\r\nerror: virtual filesystem overlay file '\/Users\/username\/Library\/Developer\/Xcode\/DerivedData\/ProjectName-cpftaymgjvbdxccofkyqcqdcahue\/Build\/Intermediates.noindex\/ProjectName.build\/Debug-iphonesimulator\/ProjectNameTests.build\/all-product-headers.yaml' not found\r\n```\r\n\r\nGoing into the directory it's trying to find, I saw that `ProjectName.build\/Test-iphonesimulator` has the `ProjectNameTests.build` directory, but `ProjectName.build\/Debug-iphonesimulator` didn't, obvious because I am using the `Test` configuration for `ProjectNameTests`.\r\n\r\nSo it seems that the `$(CONFIGURATION_TEMP_DIR)` (or some similarly defined build setting) which uses `$(CONFIGURATION)` build setting is not getting built properly because somewhere someone's making an assumption about the `Debug` configuration or misreading it.\r\n\r\nHere's the repro project which has a simple Test config added and includes my Compilation.sh file.  You'll need to follow the steps in the above blog post to reproduce the error, though, as there are hard coded paths in there.\r\n\r\n[Repro project](https:\/\/github.com\/jboulter11\/CocoapodsBugTestProject)\r\n\r\nSimply go into the SomethingTests file and attempt to type `QuickSpec` or some similar thing from Quick or Nimble and you'll notice the lack of autocomplete.","@dnkoutso please take a look and reopen if applicable.  Thanks!","I should also mention for anyone suffering from this that there's a relatively simple workaround: Add all your test pods to your app target too.  Obviously not desirable but it gets things working again if you really want\/need the separate config for tests.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","This issue will be auto-closed because there hasn't been any activity for a few months. Feel free to [open a new one](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/new) if you still experience this problem :+1:\n","Is it possible to leave this issue open and tagged so Stalebot doesn't close it? This is an ongoing and important problem.","Would still love some assistance here and potentially a PR!","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n"],"labels":["t2:defect","d2:moderate","help wanted"]},{"title":"Enhancement: Allow to segregate vendored_frameworks by platform","body":"\r\n* [X] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## The Problem\r\n\r\nIt is very common for certain frameworks to ship as precompiled binaries (especially when the source is not available or the build process can not fit within CocoaPods). Many if not all of these frameworks, whether dynamic or static, are so-called universal binaries containing slices for both the device and simulator platforms on iOS. This looks like the following:\r\n\r\n- MyBinary.framework\r\n  - `iphoneos` slices\r\n     - armv7\r\n     - arm64\r\n  - `iphonesimulator` slices\r\n    - x86_64\r\n    - i386\r\n\r\nWhile this has been working fine in most cases so far, Apple [explicitly recommends](https:\/\/forums.developer.apple.com\/message\/335047#335047) against mixing slices from different platforms into the same binaries - it is an unsupported behavior that just happens to work right now. With the recent release of Swift 5 and Xcode 10.2, some of that behavior has already started showing cracks - particularly when Swift is involved - and there's no telling when we won't be able to rely on shipping universal frameworks.\r\n\r\n## The Solution\r\n\r\nThe proper way to address this is to actually ship vendored binary frameworks for each of the platforms (for iOS: `phoneos` and `iphonesimulator`). A good way to do this is to put these same frameworks in a per-platform directory structure (the same way that Xcode and Apple already does), and use the `$(PLATFORM_NAME)` variable in Xcode projects to automatically pick up the proper version at build time. The new directory structure would be like this:\r\n\r\n- `iphoneos` directory\r\n  - MyBinary.framework\r\n     - armv7\r\n     - arm64\r\n - `iphonesimulator` directory\r\n   - MyBinary.framework\r\n     - x86_64\r\n     - i386\r\n\r\n## What CocoaPods should do\r\n\r\nBecause CocoaPods currently only allows to specify one (expectedly universal) reference to a given framework, it is not currently possible to achieve this properly with `vendored_frameworks`. For a given framework within a pod, we can include a reference to a single platform or an unsupported \"universal\" framework with all slices.\r\n\r\nWe basically need to be able to have an attribute to use in conjunction with the `vendored_frameworks` elements in the Podspec. This attribute could simply indicate the platform that the given framework was built for, and allow to specify multiple elements for the same pod with different platforms. It could look something like the following:\r\n\r\n```ruby\r\nspec.ios.vendored_frameworks = { \r\n  \"iphoneos\" => \"\/path\/to\/iphoneos\/MyBinary.framework\",\r\n  \"iphonesimulator\" => \"\/path\/to\/iphonesimulator\/MyBinary.framework\" \r\n}\r\n```\r\n\r\nWhen these attributes are used CocoaPods would then be responsible for setting up the framework paths in the client projects as appropriate, maybe by taking advantage of the `$(PLATFORM_NAME)` variable.\r\n\r\nI am also assuming the same remarks apply to the `vendored_libraries` element since those can also contain multiple slices. This would also extend to other platforms beyond iOS that have simulator flavors (tvOS and watchOS).\r\n\r\nI am managing the releases of a large open-source audio library for Apple platforms ([AudioKit](https:\/\/github.com\/AudioKit\/AudioKit)) and we feel like this needs to be addressed soon as new releases of Xcode \/ Swift introduce more uncertainty into the mix.","comments":["Yeap can be a nice enhancement indeed!"],"labels":["t1:enhancement","d2:moderate"]},{"title":"Source order should matter as per documentation","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI recently added a pod from an external source. A pod with the same name also exists in the main pod repo, which gives a warning upon first `pod install`:\r\n\r\n```\r\n[!] Found multiple specifications for `ServiceSDK (1.1.0)`:\r\n- \/Users\/phil\/.cocoapods\/repos\/master\/Specs\/3\/1\/e\/ServiceSDK\/1.1.0\/ServiceSDK.podspec.json\r\n- \/Users\/phil\/.cocoapods\/repos\/goinstant\/ServiceSDK\/1.1.0\/ServiceSDK.podspec\r\n```\r\n\r\nIt selected the correct pod, but I was curious how the selection works. According to the [docs of `source`](https:\/\/guides.cocoapods.org\/syntax\/podfile.html#source):\r\n\r\n> The order of the sources is relevant. CocoaPods will use the highest version of a Pod of the first source which includes the Pod (regardless whether other sources have a higher version).\r\n\r\nWith this definition in mind, I tried switching the order of `source`.\r\n\r\n## What did you expect to happen?\r\n\r\nRunning `pod install` with the reversed `source` definitions, I expected CocoaPods to select the other pod at version 1.1.0. This did not happen.\r\n\r\n## What happened instead?\r\n\r\nInstead, it always chooses the pod from the private source at version 218.0.1.\r\n\r\nIt seams to be picking the highest version available, regardless of the order of `source`.\r\n\r\nNote that this might be expected behavior and the documentation for `source` might just be outdated.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n(Note that this happens in the latest stable version 1.6.1 as well as the latest beta 1.7.0.beta.3.)\r\n\r\n```\r\n   CocoaPods : 1.7.0.beta.3\r\n        Ruby : ruby 2.6.1p33 (2019-01-30 revision 66950) [x86_64-darwin18]\r\n    RubyGems : 3.0.1\r\n        Host : Mac OS X 10.14.2 (18C54)\r\n       Xcode : 10.1 (10B61)\r\n         Git : git version 2.18.0\r\nRuby lib dir : \/Users\/phil\/.rubies\/ruby-2.6.1\/lib\r\nRepositories : goinstant - https:\/\/github.com\/goinstant\/pods-specs-public @ 8fc9da7f193f0c4d07b9d287b9237565cb2f7d3d\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ bb24e795959e33014f1449d2697942de87cc854c\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/phil\/.gem\/ruby\/2.6.1\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.3\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\nsource 'https:\/\/github.com\/goinstant\/pods-specs-public'\r\n\r\ninstall! 'cocoapods', integrate_targets: false\r\n\r\nplatform :ios, '12.0'\r\n\r\ntarget 'FooBar' do\r\n  pod 'ServiceSDK'\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/fphilipe\/pod_source_order_bug","comments":["This might not necessarily be a bug, but that it's (IMO correctly) locked to the last version - does switching and then running `pod update ServiceSDK` then update to the other?","@orta no difference: https:\/\/github.com\/fphilipe\/pod_source_order_bug\/commit\/7197008eb41471b73bdc296e2f36e2949ed48ad9","Cool, yep, sounds like a bug then \ud83d\udc4d ","according to sort by: https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/c1292cca13a8afa067e5157856b73cb0a65d6da4\/lib\/cocoapods\/resolver\/lazy_specification.rb#L79, and molinillo will use the latest possibility, so the resolved spec always be max version.\r\n\r\nand according to https:\/\/github.com\/CocoaPods\/Molinillo\/blob\/b419616b2230663db01462a4b93c01d3c3569a8d\/lib\/molinillo\/resolution.rb#L704 and https:\/\/github.com\/CocoaPods\/Core\/blob\/fe19e73758c2bcbed4f59ca3fdc0ed4040ba3db3\/lib\/cocoapods-core\/specification.rb#L99,\r\narray & will only keep the first for specs with different source","I think this could be abused to carry out a dependency confusion attack like [this](https:\/\/www.bleepingcomputer.com\/news\/security\/researcher-hacks-over-35-tech-firms-in-novel-supply-chain-attack\/amp\/). Maybe this warrants a priority bump?","Does the following statement correctly summarize the current behavior?\r\n> If a pod exists in multiple source repos and multiple `source`s are specified in the Podfile the CocoaPods dependency resolver will select the latest version among all the source repos. Note that the order of the Podfile `source`s does not change this behavior.\r\n\r\nIf not, please correct me.\r\nI'll make a docs PR update cos this was confusing and I got hit by this issue.\r\n\r\nThanks\r\n\r\n@dnkoutso ","So this is not a bug then and it's the documentation error? But how to achieve this behaviour nonetheless? It could be a perfectly normal use-case.\r\nFor example: I build some pods as XCFrameworks and want to use them in my project. So I create my private specs repo and upload specs of existing pods but with source changed to XCFrameworks I've built.\r\n\r\nWe could specify the source on the per pod basis of cause, but when we lint the specs, we can't do this. Linting with specified sources does not respect the order of sources\r\n\r\nThanks.\r\n@dnkoutso ","After pondering around and trying to work a way to change this behaviour to the documented one I came across some issue.\r\nConsider test case `Multiple sources - chooses the first source in a complicated scenario`\r\nIt has a complicated setup of interdependent pods and two sources.\r\n```\r\n        test_repo1 = MockSource.new('test_repo1') do\r\n          pod 'Core', '1.0.0' do\r\n            test_spec\r\n          end\r\n          pod 'Core', '1.0.1' do\r\n            test_spec\r\n          end\r\n          pod 'Data', '1.0.0' do |s|\r\n            s.dependency 'Core', '~> 1.0'\r\n            test_spec { |ts| ts.dependency 'Testing', '~> 1.0' }\r\n          end\r\n          pod 'Data', '1.0.1' do |s|\r\n            s.dependency 'Core', '~> 1.0'\r\n            test_spec { |ts| ts.dependency 'Testing', '~> 1.0' }\r\n          end\r\n          pod 'Testing', '1.0.0' do |s|\r\n            s.dependency 'Core'\r\n          end\r\n          pod 'Testing', '1.0.1' do |s|\r\n            s.dependency 'Core'\r\n          end\r\n        end\r\n\r\n        test_repo2 = MockSource.new('test_repo2') do\r\n          pod 'Core', '1.0.1' do\r\n            test_spec\r\n          end\r\n          pod 'Data', '1.0.1' do |s|\r\n            s.dependency 'Core', '~> 1.0'\r\n            test_spec { |ts| ts.dependency 'Testing', '~> 1.0' }\r\n          end\r\n          pod 'Testing', '1.0.1' do |s|\r\n            s.dependency 'Core'\r\n          end\r\n        end\r\n        sources = [test_repo1, test_repo2]\r\n        podfile = Podfile.new do\r\n          platform :ios, '9.0'\r\n          pod 'Data\/Tests', '~> 1.0'\r\n          pod 'Data', '~> 1.0'\r\n        end\r\n        podfile = Podfile.new do\r\n          platform :ios, '9.0'\r\n          pod 'Data\/Tests', '~> 1.0'\r\n          pod 'Data', '~> 1.0'\r\n        end\r\n```\r\nAnd the test is asserting that we install all pods of version `1.0.1`: https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/d18f49392c5e9ed9a2cdcb2ee89391cf7690ee5d\/spec\/unit\/resolver_spec.rb#L1013\r\nHowever if we print out not only the pods but their respective sources we'll se that for some reason `Core` is installed from `test_repo2` while all other pods are installed from `test_repo1`:\r\n`[\"Core (1.0.1) test_repo2\", \"Data (1.0.1) test_repo1\", \"Data\/Tests (1.0.1) test_repo1\", \"Testing (1.0.1) test_repo1\"]`\r\n\r\nNow when I've tried to implement sources priority, this test started to fail because `Core` resolved to version `1.0.0` instead of `1.0.1`, which is also bizarre (all pods are resolved from the first source `test_repo1 ` though, which is correct)\r\nThe problematic pod is `Data\/Tests`, it causes `Core 1.0.0` to be chosen for some reason.\r\nMy PR with slightly changed and failed test: https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/11325\r\nMy PR with attempt to take sources priority into account is here: https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/11324\r\n","> So this is not a bug then and it's the documentation error? But how to achieve this behaviour nonetheless? It could be a perfectly normal use-case. For example: I build some pods as XCFrameworks and want to use them in my project. So I create my private specs repo and upload specs of existing pods but with source changed to XCFrameworks I've built.\r\n> \r\n> We could specify the source on the per pod basis of cause, but when we lint the specs, we can't do this. Linting with specified sources does not respect the order of sources\r\n> \r\n> Thanks. @dnkoutso\r\n\r\nI really need this behaviour. What you talk about is a normal use case."],"labels":["t2:defect","s2:confirmed","d2:moderate"]},{"title":"PhaseScriptExecution Error: resources.sh: No such file or directory","body":"We have a project which uses a development pod. Since we updated to cocoapods version 1.6.1 the following PhaseScriptExecution error occured:\r\n`\/Users\/...\/Library\/Developer\/Xcode\/DerivedData\/<project>-btkioiepgjiygbdoirfuymqlkurk\/Build\/Intermediates.noindex\/<project>.build\/Debug-iphonesimulator\/<target>.build\/Script-962734B0374980AA4BB6EC824561B7D4.sh: line 2: <path to project>\/Pods\/Target Support Files\/Pods-<target>\/Pods-<target>-resources.sh: No such file or directory`\r\n\r\nWe updated from cocoapods 1.5.3 to cocoapods 1.6.1 and everything seems to be ok locally, but our build server showed the error above. I can reproduce the issue as soon as I delete the pods directory (no files from old version are available anymore) and execute `bundle exec pod install`. It seems that cocoapods 1.5.3 creates the resources.sh file, but cocoapods 1.6.1 doesn't.\r\n\r\nThe problem exists with cocoapods version [1.6.0.beta.1](https:\/\/github.com\/CocoaPods\/CocoaPods\/releases\/tag\/1.6.0.beta.1), too. Maybe it has something to do with the release note _Don't generate framework or resource scripts if they will not be used._\r\n\r\n## What did you do?\r\n- define a development pod in Podfile `pod 'devpod', path: '..\/'`\r\n- pin cocoapods version to 1.6.1 (or 1.6.0.beta.1) in Gemfile\r\n- delete Pods directory \r\n- execute `bundle install`\r\n- execute `bundle exec pod install`\r\n- build the project with Xcode\r\n\r\n## What did you expect to happen?\r\nAll pods including generated scripts are installed successfully.\r\n\r\n## What happened instead?\r\nBuild error during PhaseScriptExecution [CP]\\ Copy\\ Pods\\ Ressource: The resources.sh file is missing.\r\n\r\n## CocoaPods Environment\r\n`bundle exec pod env | pbcopy`\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.6.1\r\n        Ruby : ruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-darwin17]\r\n    RubyGems : 3.0.3\r\n        Host : Mac OS X 10.14.4 (18E226)\r\n       Xcode : 10.2 (10E125)\r\n         Git : git version 2.20.1 (Apple Git-117)\r\nRuby lib dir : \/Users\/<user>\/.rbenv\/versions\/2.3.1\/lib\r\nRepositories : <internal>\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/<user>\/.rbenv\/versions\/2.3.1\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.4\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nsource '<internal>'\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\n\r\nplatform :ios, '10.0'\r\nuse_frameworks!\r\ninhibit_all_warnings!\r\n\r\n\r\n\r\ntarget '<target>' do\r\n  pod '<devpod>', path: '..\/'\r\n\r\n  target '<target>_Tests' do\r\n  \tuse_frameworks!\r\n  \tinherit! :search_paths\r\n  \tplatform :ios, '10.0'\r\n  \tpod 'Nimble', '8.0.1'\r\n  \tpod 'Quick', '2.0.0'\r\n  \tpod 'OHHTTPStubs\/Swift', '6.1.0'\r\n  \tpod 'MockUIAlertController', '3.2.0'\r\n  end\r\nend\r\n````\r\n\r\n","comments":["Please provide a sample app. We are unable to diagnose with given information and the script phase works.","The problem is solved: the old cocoapods version 1.5.3 generated the resources.sh file and added the `[CP] Copy Pods Ressources` build phase to the Xcode project. After cocoapods version update (to 1.6.1) the resources.sh file is not generated anymore (for our project), but the `[CP] Copy Pods Ressources` build phase still remains in the project. \r\n\r\n**Solution:**\r\nI deleted the `[CP] Copy Pods Ressources` build phase manually from the the project. `bundle exec pod install` doesn't add the `[CP] Copy Pods Ressources` build phase again, so this solution is fine for us.","ah...that is a bug then a minor one but a bug nonetheless.","Maybe not very minor? Currently seeing a similar issue in our CI process as part of linting static libraries. What's strange is that it seems to be pretty inconsistent. This may also be an issue with Travis CI as I haven't been able to reproduce this locally.\r\n\r\nHere's a link to a failing job. The output is: https:\/\/travis-ci.org\/facebook\/facebook-ios-sdk\/jobs\/640198778?utm_medium=notification&utm_source=github_status\r\n\r\n```\r\n    - NOTE  | [iOS] xcodebuild:  warning: \r\n    - NOTE  | [iOS] xcodebuild:  note: \r\n    - ERROR | [iOS] [FBSDKCoreKit\/Core] xcodebuild: Returned an unsuccessful exit code. You can use `--verbose` for more information.\r\n    - NOTE  | [iOS] [FBSDKCoreKit\/Core] xcodebuild:  rsync error: received SIGINT, SIGTERM, or SIGHUP (code 20) at \/BuildRoot\/Library\/Caches\/com.apple.xbs\/Sources\/rsync\/rsync-52.200.1\/rsync\/rsync.c(244) [sender=2.6.9]\r\n    - NOTE  | [iOS] [FBSDKCoreKit\/Core] xcodebuild:  \/privateTarget Support Files\/Pods-App\/Pods-App-resources.sh:107: error: Unexpected failure\r\n```","@joesus that issue looks unrelated, since the file exists in that case (note the line number in `FBSDKCoreKit\/Core] xcodebuild:  \/privateTarget Support Files\/Pods-App\/Pods-App-resources.sh:107: error: Unexpected failure`)\r\n\r\nIf you are experiencing a bug a new issue would be greatly appreciated \ud83d\ude4f ","@joesus  I'm getting a similar issue right now. Have you solved this?","I also facing this issue , have anyone resolved it yet?","This issue is still open, but [this comment](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8677#issuecomment-480247466) provided some steps for a potential workaround if this is affecting you.","> The problem is solved: the old cocoapods version 1.5.3 generated the resources.sh file and added the `[CP] Copy Pods Ressources` build phase to the Xcode project. After cocoapods version update (to 1.6.1) the resources.sh file is not generated anymore (for our project), but the `[CP] Copy Pods Ressources` build phase still remains in the project.\r\n> \r\n> **Solution:**\r\n> I deleted the `[CP] Copy Pods Ressources` build phase manually from the the project. `bundle exec pod install` doesn't add the `[CP] Copy Pods Ressources` build phase again, so this solution is fine for us.\r\n\r\nHey @VirtualFox0 can you please give more details on how to find this file? I've been trying to find it but I can't.\r\n\r\nThanks you so much","> > The problem is solved: the old cocoapods version 1.5.3 generated the resources.sh file and added the `[CP] Copy Pods Ressources` build phase to the Xcode project. After cocoapods version update (to 1.6.1) the resources.sh file is not generated anymore (for our project), but the `[CP] Copy Pods Ressources` build phase still remains in the project.\r\n> > **Solution:**\r\n> > I deleted the `[CP] Copy Pods Ressources` build phase manually from the the project. `bundle exec pod install` doesn't add the `[CP] Copy Pods Ressources` build phase again, so this solution is fine for us.\r\n> \r\n> Hey @VirtualFox0 can you please give more details on how to find this file? I've been trying to find it but I can't.\r\n> \r\n> Thanks you so much\r\n\r\nI deleted the `[CP] Copy Pods Ressources build phase` manually from the the project. \r\nThis step was generated by Cocoapods, but the script doesn't exist anymore.\r\nYou can find this step in your Xcode project in tab `Build Phases`. Delete this step and it should be fine.\r\n","This seems to be an issue with dependencies introduced in *CocoaPods 1.10*.\r\n\r\nWhen the project references a Pod with its own Asset Catalog, and that library is **NOT** named *Assets.xcassets* (let's say, *Images.xcassets*), the compilation phase always produces *Assets.car*.\r\n\r\nWith a clean install of CocoaPods 1.9.x, the generated Copy Resources script attempts to copy the entire source Asset Catalog file by file; when upgrades to CocoaPods 1.10.x, `pod install` again changes the Copy Resources script to copy the compiled *Images.car*, which cannot be found as expected (because the compiled version was named *Assets.car*).\r\n\r\nDowngrading CocoaPods alone does not revert to the old behavior, which makes me think one of the dependencies must be downgraded as well. I did `gem uninstall -aIx` (WARNING: This uninstalls all Gems!) and then `gem install cocoapods -v 1.9.1` to reinstall CocoaPods to solve it.\r\n\r\nEdit: I'm not saying this is a solution or fix, but it does work. CocoaPods needs to rethink about how it deals with Asset Catalog from Pods; if copying the compiled version is indeed the new direction, it should make sure it gets the naming correct.","Finally fixed it.\r\n\r\nMy problem was that I have my App target, a TodayWidget target, and a CommandIntents target that use different subpods of my SDK project.\r\n\r\nsomething like:\r\n```ruby\r\nplatform :ios, '12.0'\r\n\r\n# Workaround duplicate Assets.car issue https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8122\r\n# This impacts the new Xcode build system\r\ninstall! 'cocoapods', :deterministic_uuids => false, :disable_input_output_paths => true\r\nuse_modular_headers!\r\ninhibit_all_warnings!\r\n\r\ntarget 'MyApp' do\r\n  # Pods for MyApp\r\n  pod 'iOS-MyAppSDK\/Full', :path => 'ios-sdk\/iOS-MyAppSDK', :inhibit_warnings => false\r\n  # other pods...\r\n\r\n  target 'MyAppTests' do\r\n    inherit! :search_paths\r\n    # Pods for testing\r\n  end\r\n\r\nend\r\n\r\ntarget 'CommandIntents' do\r\n  # Pods for Siri Shortcuts Intents\r\n  pod 'iOS-MyAppSDK\/Backend', :path => 'ios-sdk\/iOS-MyAppSDK', :inhibit_warnings => false\r\n  pod 'iOS-MyAppSDK\/Database', :path => 'ios-sdk\/iOS-MyAppSDK', :inhibit_warnings => false\r\nend\r\n\r\ntarget 'TodayExtension' do\r\n  # Pods for Today Widget\r\n  pod 'iOS-MyAppSDK\/Backend', :path => 'ios-sdk\/iOS-MyAppSDK', :inhibit_warnings => false\r\n  pod 'iOS-MyAppSDK\/Database', :path => 'ios-sdk\/iOS-MyAppSDK', :inhibit_warnings => false\r\n  # other pods...\r\nend\r\n```\r\n\r\nWhat was happening is that a few xcframeworks inside iOS-MyAppSDK were being copied to a temporary file and then deleted on the MyApp build but before CommandIntents and TodayExtension builds.\r\n\r\nReplacing all `rsync --delete` commands to `rsync` on all `install_xcframework` scripts, solved my problem.\r\n\r\nI did that automatically by adding this to my Podfile:\r\n\r\n```ruby\r\npost_install do |installer|\r\n  # The [CP] scripts have a race condition that will delete some of the compiled files before all of the targets had them copied.\r\n  system(\"find Pods ~+ -name '*.sh' -type f -print0 | xargs -0 sed -i '' -e 's\/rsync --delete\/rsync\/g'\")\r\nend\r\n```","Update: working 100% of the time.\r\n@dnkoutso maybe we can change that on the generated scripts?"],"labels":["t2:defect","d1:easy"]},{"title":"Swift Conversion Should Be Inhibited by inhibit_all_warnings!","body":"\ud83c\udf08\r\n* [X] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI opened my existing workspace with a new version of Xcode which included a new Swift version. (Xcode 10.2, Swift 5.0)\r\n\r\nMy `Podfile` includes `inhibit_all_warnings!`.\r\n\r\n## What did you expect to happen?\r\n\r\nI expected that all warnings I saw would apply only to my app code and not to Pods.\r\n\r\n## What happened instead?\r\n\r\nI was given warnings that Swift 5 conversion was available for Pod projects.\r\n\r\n# Request\r\n\r\nManually marking those targets as \"Don't Remind Me\" with Xcode results in the following changes in my project file:\r\n\r\n```\r\n\/* Begin PBXProject section *\/\r\n\t\tBFDFE7DC352907FC980B868725387E98 \/* Project object *\/ = {\r\n\t\t\tisa = PBXProject;\r\n\t\t\tattributes = {\r\n\t\t\t\tLastSwiftUpdateCheck = 0930;\r\n\t\t\t\tLastUpgradeCheck = 0930;\r\n\t\t\t\tTargetAttributes = {\r\n\t\t\t\t\t3B89420BB3D74AD2DCF0D76DA7C98D30 = {\r\n\t\t\t\t\t\tLastSwiftMigration = 1020;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t72AC8D674DF3E00D18AF01E060D70EBC = {\r\n\t\t\t\t\t\tLastSwiftMigration = 1020;\r\n\t\t\t\t\t};\r\n\t\t\t\t\tAFD3EF90CF874B6247EE8C79F6BF3B5D = {\r\n\t\t\t\t\t\tLastSwiftMigration = 1020;\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\t\t\t};\r\n```\r\n\r\nIf you could generate the Pods project with ALL targets marked with `LastSwiftMigration = 9999;` then I'd never be asked to migrate the Swift version of Pods targets. And then this occasional warning would also be suppressed by `inhibit_all_warnings!`. \ud83c\udf08\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.6.1\r\n        Ruby : ruby 2.6.1p33 (2019-01-30 revision 66950) [x86_64-darwin18]\r\n    RubyGems : 3.0.2\r\n        Host : Mac OS X 10.14.3 (18D109)\r\n       Xcode : 10.2 (10E125)\r\n         Git : git version 2.20.1\r\nRuby lib dir : \/usr\/local\/Cellar\/ruby\/2.6.1\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ c04d675f6a80a93b03a264e0811dd862bf0c8e9b\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/path\/to\/redacted\/vendor\/bundle\/ruby\/2.6.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-acknowledgements : 1.1.3\r\ncocoapods-deintegrate      : 1.0.3\r\ncocoapods-plugins          : 1.0.0\r\ncocoapods-search           : 1.0.0\r\ncocoapods-stats            : 1.1.0\r\ncocoapods-trunk            : 1.3.1\r\ncocoapods-try              : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment this line to define a global platform for your project\r\n platform :ios, '11.2'\r\n\r\n# ignore all warnings from all pods\r\ninhibit_all_warnings!\r\n\r\ntarget 'Redacted' do\r\n  use_frameworks!\r\n\r\n  # Pods for Redacted\r\n  pod 'Crashlytics', '3.8.3'\r\n  pod 'Fabric', '1.6.10'\r\n\r\n  target 'RedactedTests' do\r\n    inherit! :search_paths\r\n    # Pods for testing\r\n  end\r\n\r\n  target 'RedactedIntegrationTests' do\r\n    inherit! :search_paths\r\n    # Pods for testing\r\n  end\r\n\r\n  target 'RedactedUITests' do\r\n    inherit! :search_paths\r\n    # Pods for testing\r\n  end\r\n\r\nend\r\n\r\nplugin 'cocoapods-acknowledgements'\r\n```\r\n","comments":["There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","This issue will be auto-closed because there hasn't been any activity for a few months. Feel free to [open a new one](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/new) if you still experience this problem :+1:\n","Just found a neat trick that is working at the moment. Just add this to your pod file:\r\n```\r\npost_install do |installer|\r\n  # This removes the warning about swift conversion, hopefuly forever!\r\n  installer.pods_project.root_object.attributes['LastSwiftMigration'] = 9999\r\n  installer.pods_project.root_object.attributes['LastSwiftUpdateCheck'] = 9999\r\n  installer.pods_project.root_object.attributes['LastUpgradeCheck'] = 9999\r\nend\r\n```\r\n","Hey @gpambrozio\r\nAny clue of how to suppress `Enable New Build System` recommended settings warning?\r\n<img width=\"552\" alt=\"Screen Shot 2020-07-15 at 2 35 26 AM\" src=\"https:\/\/user-images.githubusercontent.com\/2069158\/87486406-f0021c00-c643-11ea-9cac-80fcaa42f179.png\">\r\nI've tried adding `installer.pods_project.root_object.attributes['LastUpgradeCheck'] = 9999` then did `pod install` but it still shows up.","@EvgenyKarkan sorry, not sure. But if you can \"manually\" clear this error you can probably look at the diff of what XCode did to your project and try to reproduce that on the script. It's what I did to figure this trick.","Yep, I already did & was able to suppress it for the main target. \r\nWhat I saw in the diff was exactly bumping `LastUpgradeCheck` version:\r\n<img width=\"300\" alt=\"Screen Shot 2020-07-15 at 2 46 54 AM\" src=\"https:\/\/user-images.githubusercontent.com\/2069158\/87487140-8edb4800-c645-11ea-89f9-12f7ae99ea3e.png\">\r\nBut for some reason it doesn't work for `Pods` target.\r\nThanks for your reply!","Even after @gpambrozio nice solution I still had warnings. I found out that those were because of xcuserdata schemas - those also have LastUpgradeCheck fields that needs to be updated. My final solution looks like this:\r\n\r\n```\r\npost_install do |installer|\r\n  # This removes the warning about swift conversion, hopefuly forever!\r\n  installer.pods_project.root_object.attributes['LastSwiftMigration'] = 9999\r\n  installer.pods_project.root_object.attributes['LastSwiftUpdateCheck'] = 9999\r\n  installer.pods_project.root_object.attributes['LastUpgradeCheck'] = 9999\r\n\r\n  shared_data_dir = Xcodeproj::XCScheme.user_data_dir(installer.pods_project.path)\r\n  Dir[\"#{shared_data_dir}\/*.xcscheme\"].each do |scheme_path|\r\n    scheme = Xcodeproj::XCScheme.new scheme_path\r\n    scheme.doc.root.attributes['LastUpgradeVersion'] = 9999\r\n    scheme.save!\r\n  end\r\nend\r\n```","> Even after @gpambrozio nice solution I still had warnings. I found out that those were because of xcuserdata schemas - those also have LastUpgradeCheck fields that needs to be updated. My my final solution looks like this:\r\n> \r\n> ```\r\n> post_install do |installer|\r\n>   # This removes the warning about swift conversion, hopefuly forever!\r\n>   installer.pods_project.root_object.attributes['LastSwiftMigration'] = 9999\r\n>   installer.pods_project.root_object.attributes['LastSwiftUpdateCheck'] = 9999\r\n>   installer.pods_project.root_object.attributes['LastUpgradeCheck'] = 9999\r\n> \r\n>   shared_data_dir = Xcodeproj::XCScheme.user_data_dir(installer.pods_project.path)\r\n>   Dir[\"#{shared_data_dir}\/*.xcscheme\"].each do |scheme_path|\r\n>     scheme = Xcodeproj::XCScheme.new scheme_path\r\n>     scheme.doc.root.attributes['LastUpgradeVersion'] = 9999\r\n>     scheme.save!\r\n>   end\r\n> end\r\n> ```\r\n\r\nIt looks like working for me, thanks!"],"labels":["t1:enhancement","d2:moderate","help wanted"]},{"title":"Cannot start CocoaPods at all when using GIT version that contains 'GIT' in its name","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nRun `pod`.\r\n\r\n## What did you expect to happen?\r\n\r\nUm... not error out, I guess :D\r\n\r\n## What happened instead?\r\n\r\nI got an error message:\r\n\r\n```\r\niMac-ForceBru:Pyto forcebru$ pod\r\n\/Library\/Ruby\/Gems\/2.3.0\/gems\/cocoapods-1.6.1\/lib\/cocoapods\/command.rb:118:in `git_version': Failed to extract git version from `git --version` (\"git version 2.19.GIT\\n\") (RuntimeError)\r\n\tfrom \/Library\/Ruby\/Gems\/2.3.0\/gems\/cocoapods-1.6.1\/lib\/cocoapods\/command.rb:130:in `verify_minimum_git_version!'\r\n\tfrom \/Library\/Ruby\/Gems\/2.3.0\/gems\/cocoapods-1.6.1\/lib\/cocoapods\/command.rb:49:in `run'\r\n\tfrom \/Library\/Ruby\/Gems\/2.3.0\/gems\/cocoapods-1.6.1\/bin\/pod:55:in `<top (required)>'\r\n\tfrom \/usr\/local\/bin\/pod:22:in `load'\r\n\tfrom \/usr\/local\/bin\/pod:22:in `<main>'\r\n```\r\n\r\n## macOS info\r\nA relatively fresh install of macOS Mojave 10.14.4. I tried uninstalling and re-installing CocoaPods. The reinstallation succeeded (I mean, it's the first time I'm installing it anyways).\r\n\r\n## CocoaPods Environment\r\n\r\n\r\nNo idea:\r\n\r\n```\r\niMac-ForceBru:Pyto forcebru$ pod env\r\n\/Library\/Ruby\/Gems\/2.3.0\/gems\/cocoapods-1.6.1\/lib\/cocoapods\/command.rb:118:in `git_version': Failed to extract git version from `git --version` (\"git version 2.19.GIT\\n\") (RuntimeError)\r\n\tfrom \/Library\/Ruby\/Gems\/2.3.0\/gems\/cocoapods-1.6.1\/lib\/cocoapods\/command.rb:130:in `verify_minimum_git_version!'\r\n\tfrom \/Library\/Ruby\/Gems\/2.3.0\/gems\/cocoapods-1.6.1\/lib\/cocoapods\/command.rb:49:in `run'\r\n\tfrom \/Library\/Ruby\/Gems\/2.3.0\/gems\/cocoapods-1.6.1\/bin\/pod:55:in `<top (required)>'\r\n\tfrom \/usr\/local\/bin\/pod:22:in `load'\r\n\tfrom \/usr\/local\/bin\/pod:22:in `<main>'\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nI'm trying to build [Pyto](https:\/\/github.com\/ColdGrub1384\/Pyto), but I can't even start the `pod` command, so I guess it's unrelated.","comments":["Did you compile git from scratch? Looks like we might need to add support for that","@orta, I think I did since it says \"version 2.19.__GIT__\". Not sure why I did this tho. I think the stock git was missing some features or something. Is there a way to revert it? I tried to reinstall it with `xcode-select --install`, but it just told me: \"command line tools are already installed\" (which makes sense).","`brew install git` might fix that?","@orta, apparently, my version of git is installed in `\/Users\/forcebru\/bin\/git`, not in `\/usr\/local\/bin`, where `brew`ed files seem to go, so it just updated the `brew`ed version of git (for whatever reason I had two).\r\n","So, I ended up putting `brew`'s path (`\/usr\/local\/bin`) at the beginning of the `PATH` variable with `export PATH=\/usr\/local\/bin:$PATH`, so `pod` got the correct version of git. I know it's a temporary workaround because `PATH` will be reset on the next login, but it's fine in my case.","Personally, I'd use this as a chance to contribute to CP and fix it while you can get into the right state to repro - if we've got this far and no-one has hit this, it's unlikely it'll get fixed. I'm gonna mark it as a good first step for someone though, just in case others want a good place to start \ud83d\udc4d ","@ForceBru  may I suggest to rename the issue to make it explicit that it's about git version?","Hey guys! I have similar issue in 2022 where I can't run Cocoapods on my Mac M1 Machine - it seems to be related to Git as I get  this error:\r\n\r\n```\r\n[ +735 ms] \/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/command.rb:128:in `git_version': Failed to\r\nextract git version from `git --version` (\"\") (RuntimeError)\r\n                        from \/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/command.rb:140:in\r\n                        `verify_minimum_git_version!'\r\n                        from \/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.11.3\/lib\/cocoapods\/command.rb:49:in `run'\r\n                        from \/Library\/Ruby\/Gems\/2.6.0\/gems\/cocoapods-1.11.3\/bin\/pod:55:in `<top (required)>'\r\n                        from \/usr\/local\/bin\/pod:23:in `load'\r\n                        from \/usr\/local\/bin\/pod:23:in `<main>'\r\n[   +2 ms] Warning: CocoaPods is installed but broken. Skipping pod install.\r\n             You appear to have CocoaPods installed but it is not working.\r\n             This can happen if the version of Ruby that CocoaPods was installed with is different from the one being\r\nused to\r\n             invoke it.\r\n             This can usually be fixed by re-installing CocoaPods.\r\n           To re-install see https:\/\/guides.cocoapods.org\/using\/getting-started.html#installation for instructions.\r\n           \r\n[   +9 ms] CocoaPods not installed or not in valid state.\r\n[   +1 ms] Error launching application on iPhone SE (3rd generation).\r\n[+6728 ms] \"flutter run\" took 17,627ms.\r\n[  +36 ms] \r\n```\r\n\r\nMore info here:\r\nhttps:\/\/github.com\/flutter\/flutter\/issues\/102911\r\n\r\nCan somebody help?"],"labels":["t2:defect","d1:easy","s2:confirmed"]},{"title":"change Pods_\u4e2d\u6587.framework into Pods___.framework","body":"<!--\r\n\u2139 embed framework change  Chinese char into underline eg. Pods_\u4e2d\u6587.framwork => Pods___.framework\r\n-->\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n Run `pod install`\r\nembed Pods file name becomes  Pods___.framework\r\n\r\n## What did you expect to happen?\r\nPod_\u4e2d\u6587.framework\r\n\r\nInstall all pod dependencies correctly. and My project path contains Chinese Path\r\n\r\n\r\n## CocoaPods Environment\r\n\r\n\u2139 Please replace these two lines with the output of `pod env`.\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.3.7p456 (2018-03-28 revision 63024) [universal.x86_64-darwin18]\r\n    RubyGems : 2.7.7\r\n        Host : Mac OS X 10.14.3 (18D109)\r\n       Xcode : 10.2 (10E125)\r\n         Git : git version 2.18.0\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.3\/usr\/lib\r\nRepositories : \r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ 2f1e9636d7973bac974d370217a2c7ae360c3164\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\nclaide-plugins        : 0.9.2\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-keys        : 2.0.5\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '8.0'\r\nuse_frameworks!\r\ninhibit_all_warnings! \r\n\r\ntarget '\u4e2d\u6587' do\r\n  pod 'AFNetworking'\r\nend\r\n```\r\n[Build target \u4e2d\u6587_2019-03-27T17-57-20.txt](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/3012558\/Build.target._2019-03-27T17-57-20.txt)\r\n\r\nattach files is Xcode log","comments":["So When I use compile it comes error,that don't have Pods__.framework, but When I delete it and readd it, it runs as normal.","It seems you shouldn't use a Chinese name.","I found that when Podfile contains use_frameworks!, it will must happened","Seems like Xcode cannot handle these characters...what can we do here I am uncertain.","@dnkoutso what part can't be handled by Xcode? Creating a target named with Chinese characters is supported.","This is because we use the module name as the name of the framework to link.\r\n\r\nXcode appears to behave similarly in certain scenarios. For example, creating a project named `\u4e2d\u6587` and then created a new unit test bundle for the app results in the default test file named `__Tests.swift`\r\n\r\n<img width=\"263\" alt=\"Screen Shot 2019-04-27 at 8 47 05 PM\" src=\"https:\/\/user-images.githubusercontent.com\/2281949\/56858374-a5f12580-692d-11e9-9c09-c16381c21e29.png\">\r\n\r\nXcode also does this in other places, like replacing the characters in the bundle identifier with --\r\n\r\n<img width=\"694\" alt=\"Screen Shot 2019-04-27 at 8 51 26 PM\" src=\"https:\/\/user-images.githubusercontent.com\/2281949\/56858408-40516900-692e-11e9-9bfa-fa2558c9d4bc.png\">\r\n\r\nIt's possible CocoaPods could do something better here, but it's not clear what we should be doing based on Xcode's behavior","@amorde  For the bundle identifier, it makes sense to keep it ASCII. For `__Tests.swift`, we should open a radar.","<img width=\"389\" alt=\"Screen Shot 2019-04-27 at 9 19 52 PM\" src=\"https:\/\/user-images.githubusercontent.com\/2281949\/56858625-39c4f080-6932-11e9-935b-d98ab2b31678.png\">\r\n\r\nXcode also seems to rename the framework product, even though the settings have it set to `Pods_\u4e2d\u6587`"],"labels":["t2:defect","d1:easy","help wanted"]},{"title":"Add build phase warning to projects when building w\/o workspace.","body":"One common problem people can run into is after a project has been setup with CocoaPods they accidentally open the project instead of the workspace and then build with errors. Depending on their familiarity with the situation they may be left confused.\r\n\r\nI wonder if one of the project augments that is done to the project when CocoaPods is setup could be a simple build phase that looks for the Pod framework and if missing provide a helpful console message. Might help solve this common issue.","comments":["perhaps yes, could see a PR here and have some of the contributors weigh in."],"labels":["t1:enhancement","d1:easy","help wanted"]},{"title":" Please separate appspec from podspec, and manage it under semver like podspec. ","body":"I am very excited to see cocoapods intend to support appspec for \"Isolated Development\" in 1.7.0 . Last year I have work on it for many months. I defined an specification called 'appspec' too. And use it to generate the workspace. I have also integrate many other tools (Fastlane, Jenkins, Jazzy, SwiftInject and more). It has very good scalability for integrating tools about building application, because the workspace is generated by the 'Appspec'. And I publish appspec in semver like podspec. then podspec can specify any appspec to generate workspace, and debug on the appspec.\r\n\r\nFrom my practice, I strong advice to separate appspec from podspec, and manage it under semver like podspec. then when debug an podspec, i can specify appspec like that:\r\n\r\n~~~\r\nhost_dependency 'XXApp', '1.2.3'\r\n~~~","comments":["Certainly the goal but will take a while. We haven't had an issue so I am marking this as a hard enhancement.","what's 'Isolated Development' meaning? are there some papers or links for it?","There are no \"papers\" for it. It means to provide ability to construct an Xcode project out of a podspec in isolation and work on it.\r\n\r\nThis is to be maybe marked for 2.0.0 release of maybe a 1.9.0"],"labels":["t1:enhancement","d3:hard"]},{"title":"There should be a way to set specify source files `File Type` using in Xcode to solve C\/C++ compile issue","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI'm tring to bring a C++ library from CMake to CocoaPods's podspec DSL, to allow using on Apple platforms by CocoaPods. But failed to do so because it does not allow to specify custom file type for the `.cpp` files.\r\n\r\nIn C\/C++\/OC language, the `#incldue` can include anything like `*.cpp`, `*.c`. At this time, the file been included can specify whether to be treated as C header\/C source files, which have different compile behavior. For example, `.cpp` does not support the `#pragma once` to avoid duplicated include, only header support.\r\n\r\nThe original C++ library is here: https:\/\/github.com\/FLIF-hub\/FLIF.\r\n\r\nThe reason why I need to use File Type is because of this code:\r\n\r\n```cpp\r\n\/\/ flif-interface.cpp\r\n#include \"flif-interface_dec.cpp\"\r\n#ifdef HAS_ENCODER\r\n#include \"flif-interface_enc.cpp\"\r\n#endif\r\n```\r\n\r\n## What did you expect to happen?\r\n\r\nThere should be one syntax in podspec, like this:\r\n\r\n```\r\nspec.source_file_types = {\r\n    'flif-interface_common.cpp' => 'sourcecode.cpp.h',\r\n    'flif-interface_enc.cpp' =>  'sourcecode.cpp.h',\r\n    'flif-interface_dec.cpp' =>  'sourcecode.cpp.h',\r\n}\r\n```\r\n\r\nAnd the generated Pod.xcodeproj, should treat these files as the correct file type `C++ Header`, instead of Xcode's default file type based on the file extension.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/6919743\/54485422-10d12a80-48b3-11e9-8dbb-2e1a50cd3b23.png)\r\n\r\n\r\n## What happened instead?\r\n\r\nThere are no any syntax, to specify one source files's File Type used by Xcode. So this cause the clang compiler treate this `.cpp` as source files part to compile, which ignore something C syntax related to headers only like `#pragma once`, so the final result cause a compile error because of the duplicated include.\r\n\r\nClang's warning for `#pragma once` for source files (header only syntax):\r\n\r\n```\r\n\/Users\/lizhuoli\/Documents\/GitHub\/libflif-Xcode\/FLIF\/src\/library\/flif-interface_common.cpp:19:9: #pragma once in main file\r\n```\r\n\r\nBuild log:\r\n\r\n```\r\n    duplicate symbol _flif_free_memory in:\r\n        \/Users\/lizhuoli\/Library\/Developer\/Xcode\/DerivedData\/App-ajqrmdgbdygwpxdaxiyqmxixvnlm\/Build\/Intermediates.noindex\/Pods.build\/Release-appletvsimulator\/libflif.build\/Objects-normal\/x86_64\/flif-interface.o\r\n        \/Users\/lizhuoli\/Library\/Developer\/Xcode\/DerivedData\/App-ajqrmdgbdygwpxdaxiyqmxixvnlm\/Build\/Intermediates.noindex\/Pods.build\/Release-appletvsimulator\/libflif.build\/Objects-normal\/x86_64\/flif-interface_common.o\r\n    duplicate symbol _flif_image_set_frame_delay in:\r\n        \/Users\/lizhuoli\/Library\/Developer\/Xcode\/DerivedData\/App-ajqrmdgbdygwpxdaxiyqmxixvnlm\/Build\/Intermediates.noindex\/Pods.build\/Release-appletvsimulator\/libflif.build\/Objects-normal\/x86_64\/flif-interface.o\r\n        \/Users\/lizhuoli\/Library\/Developer\/Xcode\/DerivedData\/App-ajqrmdgbdygwpxdaxiyqmxixvnlm\/Build\/Intermediates.noindex\/Pods.build\/Release-appletvsimulator\/libflif.build\/Objects-normal\/x86_64\/flif-interface_common.o\r\n```\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.6.1\r\n        Ruby : ruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin18]\r\n    RubyGems : 2.7.9\r\n        Host : Mac OS X 10.14 (18A391)\r\n       Xcode : 10.1 (10B61)\r\n         Git : git version 2.17.2 (Apple Git-113)\r\nRuby lib dir : \/Users\/lizhuoli\/.rvm\/rubies\/ruby-2.5.0\/lib\r\nRepositories :\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ 14c522003fccd4ec843d4452075fb9104c096ae2\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/lizhuoli\/.rvm\/gems\/ruby-2.5.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.3\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nuse_frameworks!\r\n\r\ntarget 'SDWebImageFLIFCoder_Example' do\r\n  platform :ios, '8.0'\r\n  pod 'SDWebImageFLIFCoder', :path => '..\/'\r\n\r\n  target 'SDWebImageFLIFCoder_Tests' do\r\n    inherit! :search_paths\r\n\r\n    \r\n  end\r\nend\r\n\r\ntarget 'SDWebImageFLIFCoderExample-macOS' do\r\n  platform :osx, '10.10'\r\n  pod 'SDWebImageFLIFCoder', :path => '..\/'\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nSee the Xcode project which can build successfully:\r\n\r\nhttps:\/\/github.com\/SDWebImage\/libflif-Xcode\r\n\r\nThe podspec files that can not build successfully because it use the default file type:\r\nhttps:\/\/github.com\/SDWebImage\/libflif-Xcode\/blob\/2a88de9d16aa3436a29a7cb38f501c1665fb5fc1\/libflif.podspec","comments":["Not currently supported. Needs a proposal to be approved by other contributors first.","Yes...Current I've using a tricky way to solve by the `prepare_command`, which modify the source code to use `.hpp` instead of `.cpp`. It works and I've pushed this repo into the Trunk. But I don't think it's a good idea... \ud83d\ude05 \r\n\r\nSee [libflif.podspec on CocoaPods](https:\/\/github.com\/CocoaPods\/Specs\/blob\/master\/Specs\/7\/e\/e\/libflif\/0.3\/libflif.podspec.json)"],"labels":["t1:enhancement","d2:moderate","help wanted"]},{"title":"Could not find any way to mark all headers in one subspec into Project Headers (not Public or Private), compared to native Xcode framework project (or Carthage)","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI have a Pod, which one subspec should only be imported by another subspec, so itself should not produce any Public Headers. And it can not use Private Headers because the parent spec should import the header files.\r\n\r\nThe podspec looks like this one:\r\n\r\n```ruby\r\n  # HEIF Encoding need libx265\r\n  s.subspec 'libx265' do |ss|\r\n    ss.dependency 'libx265'\r\n    ss.dependency 'SDWebImageHEIFCoder\/libheif'\r\n    ss.source_files = 'Vendors\/libheif\/libheif\/heif_encoder_x265.{h,c,cc}'\r\n    ss.public_header_files = 'Vendors\/libheif\/libheif\/heif_encoder_x265.h' # I don't want to mark this into publoic headers actually. This subspec should be project headers only. But I can not find a way to do so\r\n    ss.preserve_path = 'Vendors'\r\n    ss.xcconfig = {\r\n      'GCC_PREPROCESSOR_DEFINITIONS' => '$(inherited) HAVE_X265=1',\r\n      'HEADER_SEARCH_PATHS' => '$(inherited) ${PODS_ROOT}\/SDWebImageHEIFCoder\/Vendors\/include'\r\n    }\r\n  end\r\n```\r\n\r\nI've tried any of CocoaPods's podspec syntax, even with some tricks, it can build using `pod install`. But with no luck to pass `pod trunk push`\r\n\r\nTrick 1: Mark both `public_header_files` && `private_header_files` to be empty.\r\n\r\n```ruby\r\nss.public_header_files = ''\r\nss.private_header_files = ''\r\n```\r\n\r\nTrick 2: Use one dummy headers (or one exist public headers from another subspec) as public headers\r\n\r\n```ruby\r\nss.public_header_files = 'MyAnotherSubspec\/public_headers.h'\r\n```\r\n\r\n## What did you expect to happen?\r\n\r\nThere should be a podspec option **project_header_files**, to explicitly set the project header. It's not public, not private. Because sometime, you don't want to mark those header files into public for end-user to let them import. It's a common use case in framework author, and Swift author already support this type inside language using `package control attribute`. \r\n\r\nFor Objective-C\/C\/C++, it's already supported by native Xcode project, but can not be done via CocoaPods's DSL. Since CocoaPods DSL is aim to generate Xcode project, it should at least cover this type of usage.\r\n\r\n## What happened instead?\r\nThe above tricks can works on `pod install`. And generate the correct Xcode project.\r\n\r\nHowever, the `pod trunk push` failed, because of either one type of error or another error.\r\n\r\nTrick 1, error:\r\n\r\n> The 'public_header_files' pattern did not match any file.\r\n\r\nTrick 2, error:\r\n\r\n> public_header_files: The pattern includes header files that are not listed in source_file\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.3.7p456 (2018-03-28 revision 63024) [x86_64-darwin18]\r\n    RubyGems : 2.7.8\r\n        Host : Mac OS X 10.14 (18A391)\r\n       Xcode : 10.1 (10B61)\r\n         Git : git version 2.17.2 (Apple Git-113)\r\nRuby lib dir : \/Users\/lizhuoli\/.rvm\/rubies\/ruby-2.3.7\/lib\r\nRepositories : byted-cj_pods_specs - git@code.byted.org:caijing_ios\/cj_pods_specs.git @ 73a98b1e893494c1baff39a3f5ca50efdfdd3f8f\r\n               byted-cocoapods-master-specs-mirror - git@code.byted.org:TTIOS\/cocoapods-master-specs-mirror.git @ efe3275b6e97ddd14c40bfe05585e684e77ffe4c\r\n               byted-ez_source_repo - git@code.byted.org:sunxurang\/ez_source_repo.git @ 78ec163e8009f7d5bcb917d1ac0c625f970d22b6\r\n               byted-podspecs - git@code.byted.org:bds\/podspecs.git @ 415177578ec88c9ffd3dff1278f635a5b74b9336\r\n               byted-privatethird_binary_repo - git@code.byted.org:iOS_Library\/privatethird_binary_repo.git @ b68871ad4f8b2b92212d3db55653ea5fcf6de081\r\n               byted-privatethird_source_repo - git@code.byted.org:iOS_Library\/privatethird_source_repo.git @ e4428849234afdb1ab7dba7c06dfe671975952c5\r\n               byted-publicthird_binary_repo - git@code.byted.org:iOS_Library\/publicthird_binary_repo.git @ a86db2e23b0fec0164a97fc591a0491503363959\r\n               byted-publicthird_source_repo - git@code.byted.org:iOS_Library\/publicthird_source_repo.git @ 7b7156cfeeabd5eb190c70551b629e6da65fdf08\r\n               byted-toutiao_binary_repo - git@code.byted.org:iOS_Library\/toutiao_binary_repo.git @ b094d1ed83349948336686be2483e945d336edc9\r\n               byted-toutiao_source_repo - git@code.byted.org:iOS_Library\/toutiao_source_repo.git @ 976fd76f52919506002fa6f35db99bae364228d3\r\n               byted-ttvideo-pods - git@code.byted.org:TTVideo\/ttvideo-pods.git @ 932b66378ce6a69c680788e927b30af08eac5664\r\n               byted-ugcspecs - git@code.byted.org:ugc\/UGCSpecs.git @ becd4dbb144026fd8e05e01114ffe1624c1a4e11\r\n               byted-xigua_binary_repo - git@code.byted.org:iOS_Library\/xigua_binary_repo.git @ 0cfbb8a551c04f3cc1fdcecd53236fa0a550cdee\r\n               byted-xigua_source_repo - git@code.byted.org:iOS_Library\/xigua_source_repo.git @ 3da0ef744fe5a6ff4724eb6ae062e6450fc5ce1f\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ e742e240cb62fc5691ab9031b910878da8e85e9e\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/lizhuoli\/.rvm\/gems\/ruby-2.3.7\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.1.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nYou can use this [SDWebImageHEIFCoder.podspec](https:\/\/github.com\/SDWebImage\/SDWebImageHEIFCoder\/blob\/master\/SDWebImageHEIFCoder.podspec), by modifying the contents of `libx265` subspec's `public_header_files` with empty string, and can works with `pod install`. But can not pass `pod trunk push`. So current, we expose those dummy headers(`heif_decoder_libde265` && `heif_encoder_libx265`) into public. Actually, those should be project headers, and not visible to end-user.","comments":["@dreampiggy including headers in `source_files` and _not_ including them in either `private_header_files` nor `public_header_files` will result in the header being marked as a Project header. Does this solve what you're trying to accomplish?","@amorde No. For this case, actually you means:\r\n\r\n```ruby\r\nss.source_files = 'Vendors\/libheif\/libheif\/heif_encoder_x265.{h,c,cc}'\r\nss.public_header_files = \"\" # nothing\r\nss.private_header_files = \"\" # nothing\r\n```\r\n\r\nHowever, this can work for local podspec (using `:path =>` require), but does not pass the `pod spec lint` or `pod trunk push`, make this pod does not works for public usage.\r\n\r\n> The 'public_header_files' pattern did not match any file.\r\n> The 'private_header_files' pattern did not match any file.\r\n\r\nMy current use case, is that one subspec, only contains Project Headers, no any Public Headers or Private Headers. And with some compile source files.","Why doesn't this work?\r\n\r\n```ruby\r\nss.source_files = 'Vendors\/libheif\/libheif\/heif_encoder_x265.{h,c,cc}'\r\n```\r\n\r\nAny headers within `source_files` will be _Project_ headers, and there are no public or private headers specified. Or is the issue that you are trying to convert the `public_header_files` in the 'SDWebImageHEIFCoder\/libheif' subspec from public to project?","@amorde This syntax, resolve the Pod Poject to use the subspec's headers as Public Headers, but not Project Headers...I've already try this syntax. And I think this is because of the project header generate rules:\r\n\r\n1. If only `source_files`, treate all headers as public headers\r\n2. If not any headers outside `public_headers` or `private_headers`, treated as project headers\r\n\r\nBy following these rules, there are no way to treate all as project headers. So I think it's better to introduce a new podspec syntax. Or there are one hack way, to let user pass `public_headers = \"\" && private_headers = \"\"` works. But however, current cocoapos-trunk forbid this usage.\r\n\r\nHere is the screenshot: \r\n\r\n```ruby\r\n  # HEIF Encoding need libx265\r\n  s.subspec 'libx265' do |ss|\r\n    ss.dependency 'libx265'\r\n    ss.dependency 'SDWebImageHEIFCoder\/libheif'\r\n    ss.source_files = 'Vendors\/libheif\/libheif\/heif_encoder_x265.{h,c,cc}'\r\n    ss.preserve_path = 'Vendors'\r\n    ss.xcconfig = {\r\n      'GCC_PREPROCESSOR_DEFINITIONS' => '$(inherited) HAVE_X265=1',\r\n      'HEADER_SEARCH_PATHS' => '$(inherited) ${PODS_ROOT}\/SDWebImageHEIFCoder\/Vendors\/include ${PODS_ROOT}\/libx265\/source\/'\r\n    }\r\n  end\r\n```\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/6919743\/52781287-29b5a880-3087-11e9-9e38-c86a6a06dc9c.png)\r\n\r\n\r\nCode about this: https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/1.6.0\/lib\/cocoapods\/installer\/xcode\/pods_project_generator\/pod_target_installer.rb#L715-L723","right, but isn't that because that subspec depends on the 'libheif' subspec which _does_ include it in its public header files?\r\n\r\nhttps:\/\/github.com\/SDWebImage\/SDWebImageHEIFCoder\/blob\/04bbd3ddb6718f4678cff7900b41804f6cae9934\/SDWebImageHEIFCoder.podspec#L36","actually not sure that it is included, it looks like there's a nested folder that isn't in the glob pattern. will take a look","@amorde Sorry to bother. But actually, the folder structure looks like this:\r\n\r\n\r\n```\r\n- Vendor\r\n-- include\r\n--- libheif\r\n---- heif.h\r\n---- heif_version.h\r\n-- libheif(Git Submodule, below it's another repo's content)\r\n--- libheif\r\n---- src\r\n----- heif_decoder_libde265.h\r\n```\r\n\r\nSo, even I use `ss.public_header_files = 'Vendors\/include\/libheif\/*.h',`, this could not revolve that `heif_decoder_libde265.h` to become public header. `include` folders contains only two exact files.\r\n\r\nThis issue it's easy to reproduce actually, and does not only effect `Subspec`. Actually, I can not build a Pod, which does not expose any public headers or private headers (A framework, only contains Project Headers, such as extension\/hook only framework).","I am able to reproduce, and I narrowed down the source of this behavior to this code path:\r\n\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/23d4bfc5c755bac874bf2027b6f61796d05d44cf\/lib\/cocoapods\/sandbox\/file_accessor.rb#L132-L136\r\n\r\nSo yes you are right if there are any headers at all, they default to public unless `public_header_files` or `private_header_files` are non-empty. This seems like something that can be changed, the logic has stayed the same since it was written 6 years ago. Going to investigate whether we need this behavior or not and possibly make a PR.\r\n\r\nThanks for the report!","In the mean time, you should be able to work around this by adding one of the public header files from the other subspec that `libx265` depends on\r\n\r\n```\r\nss.public_header_files = 'Vendors\/include\/libheif\/*.h'\r\n```","@amorde This does not works...I already point this out in the Issue Description. It's forbidden because of `pod trunk push` extra rules. Only works for local `pod install` or `pod lib lint`.\r\n\r\n> public_header_files: The pattern includes header files that are not listed in source_file\r\n\r\nI think, maybe CocoaPods should better filter these special case ? Do I need to submit a issue report for https:\/\/github.com\/CocoaPods\/cocoapods-trunk ? I think their rules is not so suitable.","@dreampiggy  Hello, may you check if it is related to our problem?\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8594","So any fix for this issue? It's still there for 1.10.1"],"labels":["s2:confirmed"]},{"title":"Prevent dev pods from importing private header files of other pods","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: https:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n import private header files\r\n\r\n## What did you expect to happen?\r\nLet dev pods can not import private header files of other pods\r\n\r\n## What happened instead?\r\n\r\nDev pods can import private header files of other pods, no matter using import \"xxx\" or import <xxx\/xxx>\r\n\r\n## CocoaPods Environment\r\n```\r\n   CocoaPods : 1.6.0.beta.2\r\n        Ruby : ruby 2.6.0p0 (2018-12-25 revision 66547) [x86_64-darwin18]\r\n    RubyGems : 3.0.1\r\n        Host : Mac OS X 10.14.2 (18C54)\r\n       Xcode : 10.0 (10A255)\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n","comments":["Yes this is a hard issue to fix as it requires breaking the header search paths that has been since version 1.x.\r\n\r\nThis can only be fixed in 2.0 with a breaking change.\r\n\r\nCheck `USE_HEADERMAPS` as well.","What would the point of this change be? If private headers were no longer accessible, they would be no different from internal headers.","@paulb777 this is referring to private headers of _other_ pods - shouldn't private headers be private to that specific pod?","oh wait I think I see what your saying - I was confusing `Project` and `Private` headers","Yeah, the naming is bad, but private headers are a good way to expose APIs across pods without making them part of the pod's default module import or part of the pod's public API contract.","Yeah I agree. It seems like the solution here is to just use `Project` headers, which you can do by including headers in `source_files` and _not_ including them in either `public_header_files` or `private_header_files`","Should we close?","Yes","\r\n[Sample.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/2863198\/Sample.zip)\r\n@paulb777 @dnkoutso  @amorde  Can you provide more info of \"internal headers\" to me? Thanks.  I put all  headers in `source_files`, but they can be imported to any other development pod. What I want is that one development pod can not import private header files of other pods. By the way, all my pods are source files, not framework.\r\n\r\nFor example. I have two pods, pod A and pod B\r\n\r\n.podspec of A:\r\ns.source_files = 'PodA\/Classes\/*.{h,m,mm}'  (A have 10 header files)\r\ns.public_header_files = 'PodA\/Classes\/HeaderOne.h'\r\n\r\npodfile of project:\r\npod 'PodA', :git => 'git@xxx.com\/PodA.git', :branch => 'xxx'\r\npod 'PodB', :path => '..\/PodB'\r\n\r\nNow, after pod install,\r\nMyProject\/Pods\/Headers\/Public\/PodA only have HeaderOne.h\r\nMyProject\/Pods\/Headers\/Private\/PodA have other nine header files.\r\n\r\nThen, I  write  `#import \"HeaderTwo.h\" ` in one source file of PodB, this works, no error happens.\r\nWhat I want is that , this line should have a  `'HeaderTwo.h' file not found` error, because HeaderTwo.h is a private header file of PodA.","hmm okay, that sounds like it's not working as expected. If you click on the header you are importing and look at the `Target Membership` section in Xcode, does it say \"Project\"?\r\n\r\nIf so, could you upload a sample app that demonstrates the issue?","\r\n\r\n\r\n> hmm okay, that sounds like it's not working as expected. If you click on the header you are importing and look at the `Target Membership` section in Xcode, does it say \"Project\"?\r\n> \r\n> If so, could you upload a sample app that demonstrates the issue?\r\n\r\n@amorde Yes, it say \"Project\". But no matter I change it  to \"Private\" or \"Public\", still can be imported.No error. I will upload a sample later.","[TestPod.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/2863637\/TestPod.zip)\r\n","The sample you uploaded doesn't build (it's missing `PodA` from `..\/PodA`), but I whipped up something that I think reproduces what you're describing.\r\n\r\nGiven:\r\n\r\n* Externally sourced pod *Foo* containing Project header \"SomeHeader.h\"\r\n* Development Pod *Bar* containing header \"SomeObject.h\"\r\n\r\nInside `SomeObject.h` of *Bar*, I can successfully import the Project header \"SomeHeader.h\" when I shouldn't be able to.\r\n\r\nI haven't tested other combinations of development pods vs. external pods but I think I can repro this.\r\n\r\nHere's my version of your sample \r\n[Sample.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/2863604\/Sample.zip)\r\n\r\nEdit: Updated sample","> The sample you uploaded doesn't build (it's missing `PodA` from `..\/PodA`), but I whipped up something that I think reproduces what you're describing.\r\n> \r\n> Given:\r\n> \r\n> * Externally sourced pod _Foo_ containing Project header \"SomeHeader.h\"\r\n> * Development Pod _Bar_ containing header \"SomeObject.h\"\r\n> \r\n> Inside `SomeObject.h` of _Bar_, I can successfully import the Project header \"SomeHeader.h\" when I shouldn't be able to.\r\n> \r\n> I haven't tested other combinations of development pods vs. external pods but I think I can repro this.\r\n> \r\n> Here's my version of your sample\r\n> [Sample.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/2863604\/Sample.zip)\r\n> \r\n> Edit: Updated sample\r\n\r\nYes, your sample code of `TestProjectHeaderImport.h` is exactly what I want to say.","Great, thanks for verifying that. I'm not too sure how this has worked in the past (and I also noticed you are using static libraries, which I haven't personally looked at in a while) so I'm hoping @paulb777 or @dnkoutso could look into this further using my sample","I haven't fully confirmed, but I suspect that if there's an issue may stem from putting the headers in the same directory.  \r\n\r\nThe visibility works appropriately in the [FirebaseCore](https:\/\/github.com\/firebase\/firebase-ios-sdk\/blob\/master\/FirebaseCore.podspec#L28) pod by putting the public and private headers in their own directory.  The rest of the headers are not visible.\r\n\r\nAlso, if `use_frameworks!` is specified, HeaderOne.h is not found since PodB is not a dependency of PodA.\r\n\r\nCocoaPods can only do so much about for namespacing if frameworks are disabled.","@dnkoutso \r\n\r\n> Yes this is a hard issue to fix as it requires breaking the header search paths that has been since version 1.x.\r\n\r\nIt's so confuse that why the public header files in `static_library` pods not put in the xcode's  public header files' build phase?  And why don't set the header search path to the built product dir, instead of linking it to the `Pods\/Headers\/Public`?","And, is there any issue If we add the public header files of the `static library pod` to the `public header build phase`, and then change the search path point to the `built_product_dir\/include`?"],"labels":["t1:enhancement","d3:hard"]},{"title":"integrate_targets in static library and test target.","body":"Before you start, are you using the latest CocoaPods release?\r\nYes. I'm using 1.5.3\r\n\r\nProblem:\r\n\r\nI have a static library target along with a Test target (say ZSDK and ZSDK-Tests). ZSDK-Tests has dependency on ZSDK.\r\n\r\n\r\n```\r\ninstall! 'cocoapods', :integrate_targets => false\r\n\r\ndef common_pods\r\n\tpod 'FMDB', '2.7.5'\r\nend\r\n\r\ntarget 'ZSDK' do\r\n  common_pods\r\nend\r\n\r\ntarget 'ZSDK-Tests' do\r\n  #inherit! :search_paths\r\n  common_pods\r\nend\r\n\r\n```\r\n\r\nExpectation:\r\nwhen I do **pod install**, no workspace directory should be generated. Also, **libPods-ZSDK.a** shouldn't be added to the \"Link Binary With Libraries.\" (This is a requirement, since I use ZSDK project as a subproject inside another app project). Essentially I don't want to use workspaces in ZSDK project.\r\n\r\nBut since libPods isn't added to  \"Link Binary With Libraries\"  in the test target as well, I cannot run this target.\r\n\r\nEssentially what I'm looking for is a setup where libPods static is not added to ZSDK target, but added to ZSDK-Tests target (so it runs). **integrate_targets** works only at the global level and cannot specify targets like **link_with** did.\r\n\r\n\r\n\r\nPlease let me know if the question is not clear or need more info.","comments":["> when I do pod install, no workspace directory should be generated. Also, libPods-ZSDK.a shouldn't be added to the \"Link Binary With Libraries.\" (This is a requirement, since I use ZSDK project as a subproject inside another app project). Essentially I don't want to use workspaces in ZSDK project.\r\n\r\nI do not understand this part. Why would no workspace be generated? \r\n\r\nThis seems like a good StackOverflow question under `cocoapods` tag. I do not understand the issue 100%. If you don't want a target to be linked use `inherit! :search_paths1`.\r\n\r\n@sudeepkzd I am going to preemptively close the issue and I _will_ re-open it after we discuss further whether its a bug or not. We get a lot of issues as questions here and would like to limit them to actual bugs or enhancements in the codebase.","I read again, that is correct that `integrate_targets` is only at global level. I will re-open as a hard\/enhancement to support it at a per target level.","You can also remove \r\n```ruby\r\ntarget 'ZSDK' do\r\n  common_pods\r\nend\r\n```\r\nTo not integrate it."],"labels":["t1:enhancement","d3:hard"]},{"title":"[Feature Request] Alternative to vendored_framework which allows lazy framework compilation","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI use Kotlin\/Native to create a .framework during build time. This is accomplished using a `run_script`. CocoaPods requires that the framework linked to by `vendored_framework` is on disk during installation. To get around this I use a `prepare_command` to also create the framework, so that the search path and linker options are properly initialized in xcode.\r\n\r\n## Request\r\n\r\nA new attribute like `dynamic_framework` or `static_framework` which lets cocoapods know a framework file linked to by the attribute will exist during compilation, but not during installation.\r\n\r\nIf there's an appetite for such an attribute I'm happy to contribute this, but wanted to start the discussion first to see if there is a better\/alternative appraoch.\r\n\r\n(Also since it wasn't a bug the default issue template didnt really apply. Let me know if there's more information I can provide!)","comments":["@dnkoutso this is the feature I was DM'ing you about. The ability to tell CP that you \"promise\" a framework will be created at build time.","Yeap. We will have to think this through a bit in terms of DSL. I'd love to see an RFC for this see example here https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8191","Hey, I am running into the same issue. Have you found a solution or a workaround for this? I also ended up using \"prepare_command\" which seems wrong but does the trick."],"labels":["t1:enhancement","d3:hard"]},{"title":"If there are one pod using xcassets via resources spec syntax, then all xcassets will be copied and compied twice during [CP] Copy Pods Resources build phase","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: http:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\nI've filled the issue template. But I've provide a detailed repo about this. You can check it if my description have some misunderstanding : [CocoaPodsXCAssetsIssue](https:\/\/github.com\/dreampiggy\/CocoaPodsXCAssetsIssue)\r\n\r\n## What did you do?\r\n\r\n+ Have a iOS App project using CocoaPods\r\n+ Have pods which use `resources` and `resource_bundles` to include xcassets resource. At least one pod using `resources`, others using `resource_bundles`\r\n+ Run `pod install`\r\n+ Build the project and check the `Demo.app` product\r\n\r\n## What did you expect to happen?\r\n\r\nThe `Demo.app` have two `Assets.car`, one is `Demo.app\/Assets.car`, one is `Demo.app\/TestLibrary\/Assets.car`.\r\n\r\nAnd each assets.car should contains individual image resource. Which means, using [cartool](https:\/\/github.com\/steventroughtonsmith\/cartool), the output folder should have no common images.\r\n\r\n## What happened instead?\r\n\r\nThe `Demo.app` have two `Assets.car`, one is `Demo.app\/Assets.car`, one is `Demo.app\/TestLibrary\/Assets.car`.\r\n\r\nBut, the main bundle's `Assets.car`, contains all the images inside that `Demo.app\/TestLibrary\/Assets.car`. The images in Pods and also be copied and compiled into the main bundle, cause a duplicated resouce and increase the ipa size.\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.3.7p456 (2018-03-28 revision 63024) [universal.x86_64-darwin18]\r\n    RubyGems : 2.5.2.3\r\n        Host : Mac OS X 10.14 (18A391)\r\n       Xcode : 10.1 (10B61)\r\n         Git : git version 2.17.2 (Apple Git-113)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.3\/usr\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 77b6b8a7c9b07dbaf8f197b1446fddabec0b8ca7\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\n### **Please** see the demo project here. Which can 100% trigger the issue and provide detail information\r\n\r\nhttps:\/\/github.com\/dreampiggy\/CocoaPodsXCAssetsIssue\r\n\r\nThe issue seems like that #6159, but I provide more detailed information and reproduce demo and fix for this issue.\r\n","comments":["Yes this is a dup. I will keep this and close the other one we do not need two.","I want to tackle this once and for all for 1.7.0. It has about 5 issues open due to this and its a very bad issue.","@dnkoutso Good. One suggestion, I think the better way to solve this is not using something patch. If there are `resource` syntax with xcassets, we should use a better and correct way to collect the xcassets should be compiled.\r\n\r\nFor example, that `Find all other xcassets` logic, should use `xcodeproj` or somethinig, to check the Xcode Project's group, which is actually built for the current build target. Base on the file directory path is not a good idea. And even you can filter the `Pods` folder, what about the other folder, like WatchKit App's xcassets \/ iMessage \/ etc ? They may all inside the current working directory. That solution is not safe at all.","Our temp solution is to patch that `Find all other xcassets` with a custom ruby script do the things above. Maybe this can help to provide a better, robust official solution ?\r\n\r\nHere it is: \r\n\r\nThe ruby script:\r\n\r\n```ruby\r\n#!\/usr\/bin\/ruby\r\n\r\nrequire 'xcodeproj'\r\n\r\nEncoding.default_external = 'utf-8'\r\nEncoding.default_internal = 'utf-8'\r\n\r\npath = ARGV[0]\r\ntarget_name = ARGV[1]\r\nproject_path = path + '\/Demo.xcodeproj\/'\r\nproject = Xcodeproj::Project.open(project_path)\r\nproject.targets.each do |target|\r\n\tif target.name != target_name then next end\r\n\ttarget.resources_build_phase.files.each do |file|\r\n\t\tif file.file_ref.path && file.file_ref.path.end_with?(\"xcassets\")\r\n\t\t\tputs file.file_ref.real_path \r\n\t\tend\r\n\tend\r\nend\r\n```\r\n\r\nThe temp patch we used to solve the xcasses search (Hack but worked) :\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/6919743\/51581748-518c7300-1f04-11e9-8283-ff288a99f349.png)","Thanks, I will see what I can do. Planning to tackle this in February hopefully. No promises always :)","I have an idea on how to tackle this. Will implement and see and close it once and for all.","I think I have a patch ready for this.","not yet. My patch works but I realized how broken this is even today...I do have a plan though hoping to get to it by end of this week.","@dnkoutso Thanks for your hard-work. I think this is a historical issue, and it may contains many edge cases. Hope you can get a better and robust solution.","I still have a plan for this and still aim 1.7.0","All related PRs\/Issues:\r\n#7785\r\n#8136\r\n#6159\r\n#7745\r\n#7779\r\n#7617","@dreampiggy Hi, maybe I have some other clues. \r\nI found that the following shell code always return true. Therefore, cocoapods will always add all xcassets into `XCASSET_FILES` from `OTHER_XCASSETS`.\r\n```shell\r\nif [[ $line != \"${PODS_ROOT}*\" ]]; then\r\n   XCASSET_FILES+=(\"$line\")\r\nfi\r\n```\r\nMaybe the correct way to use regex is: (remove the double quotation marks)\r\n```shell\r\nif [[ $line != ${PODS_ROOT}* ]]; then\r\n   XCASSET_FILES+=(\"$line\")\r\nfi\r\n```\r\n\r\nI'm not sure if you have already noticed the problems since your temporary solution is is to limit the search zone.\r\nYou can try the following code in shell to verify the result.\r\n```shell\r\n#!\/bin\/sh\r\nPODS_ROOT=\"\/Users\/dongxinb\/Repos\/Test\/Pods\/\"\r\nline=\"\/Users\/dongxinb\/Repos\/Test\/Pods\/TestPods\/TestPods\/Resources\/XX.xcassets\"\r\nif [[ $line != \"${PODS_ROOT}*\" ]]; then\r\n\techo \"original true\"\r\nfi\r\nif [[ $line != ${PODS_ROOT}* ]]; then\r\n\techo \"modified true\"\r\nfi\r\n```","@dongxinb  Correct the script is OK. But does not solve the problem from scratch. I've also point this simple fix in the demo repo in issue description: [CocoaPodsXCAssetsIssue](https:\/\/github.com\/dreampiggy\/CocoaPodsXCAssetsIssue)\r\n\r\nThe original script, still trying to search the xcassets, based on **File System Path**, but not **Xcode Project Group** logic part.\r\n\r\nIf I put a folder under this structure:\r\n\r\n```\r\nRoot\r\n- *.xcodeproj\r\n- Podfile\r\n- Temp \/\/ <-- Temp folder and not in Xcode project, should not be included at all\r\n-- temp1.xcassets\r\n-- temp2.xcassets\r\n- WatchKit\r\n-- watchKit.xcassets \/\/ <-- WatchKit xcassets, should not be included in iOS product\r\n```\r\n\r\nYour finally iOS Application, will compile both `temp1`, `temp2`, `watchKit` into the ipa product. It's still a problem.\r\n\r\nSo the correct solution, should based on the Xcode Project Group, and should not change between different build times, only a new fresh `pod install` should generate a new xcassets list.\r\n\r\nis this available in the 1.7.1 beta ? @dnkoutso ","Thank you for your kind reply!\r\nYes, of course, the original way to grab the xcassets list is rude, which may include some xcassets by mistake.\r\n\r\nBut correcting the script may solve some problems in the short term. At least, pod will no longer to merge the xcassets from  resource bundle into main .car file. I think this will obviously be benefical to those iOS project without extensions.\r\nNow that the robust solution is still on the hard way, should we correct the script first? I\u2019ll come up with a PR if necessary~\r\n","Wanted to fix this for 1.7.0 but never did. Punting to 1.8.0 for now or maybe 1.7.1.","WIP branch here: https:\/\/github.com\/CocoaPods\/CocoaPods\/compare\/xcassets_revamp?expand=1","Were the early results from your branch promising? Willing to help out if I can.","@cltnschlosser not much actually there are still issues with it and have reconsidered doing it from scratch and remove `xcsasset` management outside the script phase and directly add `Pods_<target>_Assets.xcassets` into the users `Copy Bundle Resources` phase. This will however make us lose per-configuration handling of `xcassets` that CocoaPods offers (e.g. having assets only being processed in Debug vs Release).","Is per configuration handling something that cocoapods actually exposes to end users via Podfile?","yes you can do `pod 'MyPod', :configuration => 'Debug'`","Oh nice. I have to imagine that doesn't work for assets currently anyway, because cocoapods is currently pulling in all xcassets, so if the pod was downloaded, it's assets would get included.\r\n\r\nWhat's that rationale for checking everywhere for xcassets?\r\n\r\nSeems like we should only need to grab xcassets referenced by the xcodeproj, and in `podspec` `resources`? or am I missing something obvious?","it is _very_ old code and was a bit difficult to manage or dig through why it was designed like this but it was naive and assumed a single app is integrated in the `Podfile`.","@dnkoutso Has the cocoapods team considered deprecating `resources` and then removing it in `2.0.0`? It's not a short term fix, but `resource_bundles` just work \ud83d\ude06 ","@cltnschlosser there hasn't been a tremendous discussion on it but you are right this can be deprecated and a new DSL introduced that does the right thing.","I don't even know if anything new needs to be introduced. `resource_bundles` should be able to replace all `resources` usages and bundles don't have the namespace collision drawback.","Sure could be the case we deprecate and only force resource bundles.","> All related PRs\/Issues:\r\n\r\n@dnkoutso , thanks for your hard working. #3405 may be a related PR\/Issue","Also having a similar issue...","same problem","same problem, and our temp solution in `Podfile`:\r\n```ruby\r\npost_install do |installer|\r\n  system 'sed -i \"\" \"s\/\\[\\[ \\$line != \\\"\\${PODS_ROOT}\\*\\\" \\]\\]\/\\[\\[ \\$line != \\${PODS_ROOT}\\* \\]\\]\/g\" \".\/Pods\/Target Support Files\/Pods-Demo\/Pods-Demo-resources.sh\"'\r\nend\r\n```\r\n\r\nwhen will this be resolved?","> same problem, and our temp solution in `Podfile`:\r\n> \r\n> ```ruby\r\n> post_install do |installer|\r\n>   system 'sed -i \"\" \"s\/\\[\\[ \\$line != \\\"\\${PODS_ROOT}\\*\\\" \\]\\]\/\\[\\[ \\$line != \\${PODS_ROOT}\\* \\]\\]\/g\" \".\/Pods\/Target Support Files\/Pods-Demo\/Pods-Demo-resources.sh\"'\r\n> end\r\n> ```\r\n> \r\n> when will this be resolved?\r\n\r\nThis code solves just \"XCASSET_FILES\" to get all the files under the root path \"*.xcassets\" (currently filters out the result path containing \"${PODS_ROOT}\").\r\n\r\nHowever, when there are other targets in the root path, pod install\/update will copy the \"*.xcassets\" files of other targets, which is a redundant copy of resources, which has the following effects: duplicate files are overwritten, and the package size will increase.\r\n\r\neg: https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8431#issuecomment-490727486\r\n","@dnkoutso Have idea.\r\n\r\nWhy we need use 'xcrun actool ' script built the any *.xcassets files.\r\n\r\nNow remove it.\r\n\r\n```\r\nif [[ -n \"${WRAPPER_EXTENSION}\" ]] && [ \"`xcrun --find actool`\" ] && [ -n \"${XCASSET_FILES:-}\" ]\r\nthen\r\n  # Find all other xcassets (this unfortunately includes those of path pods and other targets).\r\n  OTHER_XCASSETS=$(find -L \"$PWD\" -iname \"*.xcassets\" -type d)\r\n  while read line; do\r\n    if [[ $line != \"${PODS_ROOT}*\" ]]; then\r\n      XCASSET_FILES+=(\"$line\")\r\n    fi\r\n  done <<<\"$OTHER_XCASSETS\"\r\n\r\n  if [ -z ${ASSETCATALOG_COMPILER_APPICON_NAME+x} ]; then\r\n    printf \"%s\\0\" \"${XCASSET_FILES[@]}\" | xargs -0 xcrun actool --output-format human-readable-text --notices --warnings --platform \"${PLATFORM_NAME}\" --minimum-deployment-target \"${!DEPLOYMENT_TARGET_SETTING_NAME}\" ${TARGET_DEVICE_ARGS} --compress-pngs --compile \"${BUILT_PRODUCTS_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\"\r\n  else\r\n    printf \"%s\\0\" \"${XCASSET_FILES[@]}\" | xargs -0 xcrun actool --output-format human-readable-text --notices --warnings --platform \"${PLATFORM_NAME}\" --minimum-deployment-target \"${!DEPLOYMENT_TARGET_SETTING_NAME}\" ${TARGET_DEVICE_ARGS} --compress-pngs --compile \"${BUILT_PRODUCTS_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\" --app-icon \"${ASSETCATALOG_COMPILER_APPICON_NAME}\" --output-partial-info-plist \"${TARGET_TEMP_DIR}\/assetcatalog_generated_info_cocoapods.plist\"\r\n  fi\r\nfi\r\n```\r\n\r\nand replace it.\r\n\r\nSo now we just need to find all the *.xcassets files and path addresses from ${PODS_ROOT}, and then use the resources_build_phase provided by native_target under xcodeproj to add the relevant paths to the PBXResourcesBuildPhase of the app's main target.\r\n\r\nThe benefit of this is that Xcode's PBXResourcesBuildPhase feature helps us copy and compress *.xcassets resources, which is completely automated.\r\n\r\nAt the same time, we no longer have to worry about the fact that the script is not executed (https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/7745#issue-323052798) , and there is no regular copy of resources under the current root path (https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8431#issue-400670237 , https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8122#issue-362865196 , https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/9238#issue-505168088).\r\n\r\nBTW: If you have enough dependent projects, `OTHER_XCASSETS=$(find -L \"$PWD\" -iname \"*.xcassets\" -type d)` causes excessive time (performance)\r\n"],"labels":["t2:defect","d3:hard"]},{"title":"`pod cache list` print incorrect pod path","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: http:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n`pod cache list` command print incorrect pod path\r\n\r\n## What did you do?\r\n\r\n1. run `pod repo add PrivateSpecRepo https:\/\/github.com\/tripleCC\/PrivateSpecRepo.git` \r\n2. run `git clone https:\/\/github.com\/tripleCC\/podTestLibrary.git`\r\n3. run `cd podTestLibrary\/Example`\r\n4. run `pod install`\r\n5. run `pod cache list podTestLibrary`\r\n\r\n## What did you expect to happen?\r\n\r\nprint correct pod path\r\n\r\n```\r\npodTestLibrary:\r\n  - Version: 0.1.0\r\n    Type:    Release\r\n    Spec:    \/Users\/songruiwang\/Library\/Caches\/CocoaPods\/Pods\/Specs\/Release\/podTestLibrary\/0.1.podspec.json\r\n    Pod:    \/Users\/songruiwang\/Library\/Caches\/CocoaPods\/Pods\/Release\/podTestLibrary\/0.1.0-479bb\r\n```\r\n\r\n\r\n## What happened instead?\r\n\r\nprint incorrect pod path\r\n\r\n```\r\npodTestLibrary:\r\n  - Version: 0.1.0\r\n    Type:    Release\r\n    Spec:    \/Users\/songruiwang\/Library\/Caches\/CocoaPods\/Pods\/Specs\/Release\/podTestLibrary\/0.1.podspec.json\r\n    Pod:     \/Users\/songruiwang\/Library\/Caches\/CocoaPods\/Pods\/Release\/podTestLibrary\/0.1.0-beec6\r\n```\r\n`\/Users\/songruiwang\/Library\/Caches\/CocoaPods\/Pods\/Release\/podTestLibrary\/0.1.0-beec6`  directory isn't exist. \r\n\r\nrun ` cd \/Users\/songruiwang\/Library\/Caches\/CocoaPods\/Pods\/Release\/podTestLibrary\/0.1.0-beec6` : \r\n```\r\ncd: no such file or directory: \/Users\/songruiwang\/Library\/Caches\/CocoaPods\/Pods\/Release\/podTestLibrary\/0.1.0-beec6\r\n```\r\nrun `ls \/Users\/songruiwang\/Library\/Caches\/CocoaPods\/Pods\/Release\/podTestLibrary` : \r\n```\r\n0.1.0-479bb\r\n```\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-darwin17]\r\n    RubyGems : 2.6.14\r\n        Host : Mac OS X 10.14.2 (18C54)\r\n       Xcode : 10.1 (10B61)\r\n         Git : git version 2.17.2 (Apple Git-113)\r\nRuby lib dir : \/Users\/songruiwang\/.rvm\/rubies\/ruby-2.4.1\/lib\r\nRepositories : 2dfire-cocoapods-spec - git@git.2dfire.net:ios\/cocoapods-spec.git @ fa31f0842e458a9dfe9b2acbe23f91da87421fdf\r\n               2dfire-cocoapods-spec-binary - git@git.2dfire.net:ios\/cocoapods-spec-binary.git @ 2d99f66237c8dff6857caba9f1048e976075d56c\r\n               2dfire-ios-cocoapods-spec - http:\/\/git.2dfire.net\/ios\/cocoapods-spec.git @ ec0cef93a7ddf476b9627b5d0cda6c6cf94aba5d\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ 2f0c5aa09d8467f048a80b92e972e465fbc30084\r\n               private - git@git.2dfire.net:qingmu\/cocoapods-spec.git @ 70bc386f7cd16f51f6d1dc901ca964fbbabea718\r\n               private-binary - git@git.2dfire.net:qingmu\/binary-cocoapods-spec.git @ b5240723ac6bf6a5413fae565dbfb492861e5d13\r\n               PrivateSpecRepo - https:\/\/github.com\/tripleCC\/PrivateSpecRepo.git @ efa5034567bc2edf9a68314d9934dba8261823bc\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/songruiwang\/.rvm\/gems\/ruby-2.4.1\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\nclaide-plugins                : 0.9.2\r\ncocoapods-bin                 : 0.0.8\r\ncocoapods-deintegrate         : 1.0.2\r\ncocoapods-dependencies        : 1.0.0.beta.1\r\ncocoapods-external-pod-sorter : 0.0.2\r\ncocoapods-open                : 0.0.8\r\ncocoapods-packager            : 1.5.0\r\ncocoapods-plugins             : 1.0.0\r\ncocoapods-search              : 1.0.0\r\ncocoapods-stats               : 1.0.0\r\ncocoapods-tdfire-binary       : 2.0.3\r\ncocoapods-trunk               : 1.3.1\r\ncocoapods-try                 : 1.1.0\r\ncocoapods_debug               : 0.1.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\nsample project link https:\/\/github.com\/tripleCC\/podTestLibrary.git\r\n","comments":["I found that  CocoaPods generated the path of pod cache by podTestLibrary.podspec's checksum , but print the path which was generated by podTestLibrary.podspec.json's checksum.\r\n\r\nthe podspecs' checksum of podTestLibrary :\r\n```ruby\r\n\u279c  Example git:(master) \u2717 irb\r\n2.4.1 :001 > require 'cocoapods'\r\n => true\r\n2.4.1 :002 > Pod::Specification.from_file(Pathname.new('\/Users\/songruiwang\/Library\/Caches\/CocoaPods\/Pods\/Specs\/Release\/podTestLibrary\/0.1.podspec.json')).checksum\r\n => \"beec68153b3753f9283eae5f8c84ca55e0fa34ff\"\r\n2.4.1 :003 >\r\nPod::Specification.from_file(Pathname.new('\/Users\/songruiwang\/.cocoapods\/repos\/PrivateSpecRepo\/podTestLibrary\/0.1.0\/podTestLibrary.podspec')).checksum\r\n => \"479bb0f018b9bbc0704f53c15d31c6dca90f2366\"\r\n```\r\n\r\nhow about generating checksum by pretty JSON of the specification ?\r\n\r\n```ruby\r\n# lib\/cocoapods-core\/specification.rb\r\n\r\ndef checksum\r\n  generate_checksum(to_pretty_json)\r\nend\r\n\r\ndef file_checksum\r\n  generate_checksum(File.read(defined_in_file)) unless defined_in_file.nil?\r\nend\r\n\r\ndef generate_checksum(string) \r\n  require 'digest'\r\n  checksum = Digest::SHA1.hexdigest(string)\r\n  checksum = checksum.encode('UTF-8') if checksum.respond_to?(:encode)\r\n  checksum\r\nend\r\n\r\n```","Most likely a bug yes","Isn't there a missing `pod repo push` here? I didn't think that Development pods went into the `pod cache`."],"labels":["t2:defect","help wanted"]},{"title":"Create modules for subspecs","body":"I'd like cocoapods to generate a modulemap when I use subspecs. I thought this was how it was done to match the concept of a submodule from modulemap. Is this possible or considerable?\r\n\r\nFor example (pseudocode):\r\n\r\nPodspec:\r\n```\r\nPod:: do |s|\r\n    s.name = 'MyPod'\r\n    s.modules = true  # <= potential configuration?\r\n    s.subspec 'SubPodA' do |ss|\r\n        ss.source_files = '...'\r\n    end\r\n    s.subspec 'SubPodB' do |ss|\r\n        ss.source_files = '...'\r\n    end\r\nend\r\n```\r\n\r\nThen when I use `pod 'MyPod'` I'd like the resulting modules map to be:\r\n```\r\nframework module MyPod {\r\n  module SubPodA { export ... }\r\n  module SubPodB { export ... }\r\n}\r\n```\r\n\r\nThen I can import in my project `MyPod.SubPodA`.\r\n\r\nI imagine if someone uses `pod 'MyPod\/SubPodA'` the the resulting modulemap would be normal:\r\n```\r\nframework module SubPodA {\r\n    ...\r\n}\r\n```\r\n","comments":["I dont think this is supported right now as you point out. Best workaround is to provide your own module map for now."],"labels":["t1:enhancement","d2:moderate","help wanted","s7:workaround available"]},{"title":"Is there a way to handle built resources in Swift Static Libraries mode?","body":"I'm trying to migrate from dynamic frameworks to swift static libraries. I have a whole ecosystem of private pods and some of them contain coreml models\/metal files inside them, which are compiled to `.mlmodelc` and `.metallib` and get copied to a framework's bundle, so later I can access them via `Bundle(for:<AnyClass>)`\r\n\r\nIs there anything similar with Swift Static lib? Do they even support resources in any way? Maybe it is possible to point resources in build folder? \r\n\r\n","comments":["it will have to be a separate resource bundle that will get copied to the app instead.\r\n\r\nThis does not appear to be a CocoaPods issue with the library itself and I think it is currently supported. I am going to preemptively close and re-open if we find a feature enhancement we can build.\r\n\r\nAlso recommend asking the same on StackOverflow under `cocoapods` tag.\r\n\r\nThank you!","@dnkoutso yup, but the problem is that they are not regular resources, they need to be compiled first and then copied. Like `.metal` files are compiled into `.metallib` and `.mlmodel` files are compiled into `.mlmodelc`. I see those files in Products dir next to lib<Name>.a, but they are not copied into app's bundle. \r\n\r\nIs there a way to tell CocoaPods to grab resources from build directory? \r\n\r\nBtw, thanks for quick response and sorry if GitHub issues is the wrong place.","hmmmm do you have a sample app that we can use ? Perhaps this is actually not supported currently.","@dnkoutso Okay, so I composed a minimal project. You can see they way we use it with frameworks, but once you switch to libs everything breaks up.\r\n\r\nIf you jump to built products dir you will see that metal files are actually compiled to `.metallib`, but it never gets copied. \r\n\r\n![](https:\/\/i.ibb.co\/smJGvkC\/image.png)\r\n\r\nAnother question: how to detect that the pod is being built as library or as framework? \r\n\r\nBecause we will also have to replace Bundle(for:) somehow like that:\r\n\r\n```swift\r\n#if POD_IS_FRAMEWORK\r\n\r\n\/\/ load resources from Bundle(for: Foo.self)\r\n\r\n#else\r\n\r\n\/\/ load resouces from something like Bundle.main\/\"Foo\"\r\n#endif\r\n```\r\n\r\nThis is the link to the project: https:\/\/drive.google.com\/file\/d\/1DJWIf2nSNbXjQKoBwE_05CAMO5IweYWT\/view?usp=sharing","Thanks for the project. I will have to take a look once I find time","@s1ddok is this happening only with metal sources or other ones as well?","Basically all resources that have to compiled, e.g. CoreML model","@s1ddok hm I will double check with CoreData too","@s1ddok I am not certain this is supported currently. Definitely not for the `Metal` files. Support to add this would be somewhat hard so I am marking this as an enhancement."],"labels":["t1:enhancement","d3:hard","help wanted"]},{"title":"Cocoapods doesn't install the correct version when versions have metadata","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: http:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI have a dependency which has a couple of metadata options. Based on that, I have the following podspec versions:\r\n\r\nMyDependency\r\n\r\n- 1.0.0\r\n- 1.0.0+code\r\n- 1.0.0+debug\r\n\r\nMy Podfile has \r\n\r\n```\r\npod 'MyDependency, '1.0.0+code'\r\n```\r\n\r\nRun pod install\r\n\r\n## What did you expect to happen?\r\n\r\nCocoapods installs version `1.0.0+code`\r\n\r\n## What happened instead?\r\n\r\nCocoapods installs version `1.0.0+debug`\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.2.4p230 (2015-12-16 revision 53155) [x86_64-darwin15]\r\n    RubyGems : 2.4.8\r\n        Host : Mac OS X 10.13.6 (17G3025)\r\n       Xcode : 10.1 (10B61)\r\n         Git : git version 2.14.1\r\nRuby lib dir : \/Users\/bhasingh\/.rvm\/rubies\/ruby-2.2.4\/lib\r\nRepositories : bhavdeepsingh - https:\/\/github.com\/bhavdeepsingh\/SamplePodspecs @ 216607e32f826d6684e61b82c0ced260e193344b\r\n               cocoapods - https:\/\/github.com\/CocoaPods\/Old-Specs @ 6e256ccc84aad851d401fabb79b2c0f9e09bb875\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ 9c630913ab7acc44e7e060adfc0211a33b56686d\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/bhasingh\/.rvm\/gems\/ruby-2.2.4\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '10.0'\r\n\r\nsource 'https:\/\/github.com\/bhavdeepsingh\/SamplePodspecs'\r\nproject 'SampleProject'\r\n\r\ntarget 'SampleProject' do\r\n pod 'MyDependency', '1.0.0+code'\r\nend\r\n```\r\n\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/bhavdeepsingh\/SampleProject","comments":["According to semver, I don\u2019t think metadata is actually a part of the version comparison?","That's correct\r\n\r\nBased on semver,\r\n`Build metadata SHOULD be ignored when determining version precedence.`\r\nand accordingly, in terms of version precedence:\r\n```\r\n1.0.0 == 1.0.0+code == 1.0.0+debug\r\n```\r\n\r\nThat however, doesn't mean that trying to install one specific metadata version (with a hard version requirement no less) should install a version with different metadata.","If they\u2019re all equal though, I\u2019m not sure it\u2019s valid to say one of them should be picked over another","The key phrase here from semver is `when determining version precedence`.\r\n\r\nBased on my interpretation, that does not however make them equivalent in every aspect. The request to install one version over the other should merely ignore the metadata information when **ordering** these versions, but still install the version **explicitly** being requested.\r\n\r\nAs opposed to that, in the current behavior:\r\nThe presence of any metadata in the version requested always gives preference to the **highest lexically sorted** metadata version while obeying all the characters before the `+`\r\n\r\ni.e.\r\nPodfiles with any of the following lines\r\n`'pod MyDependency', '1.0.0+a'`\r\n`'pod MyDependency', '1.0.0+code'`\r\n`'pod MyDependency', '1.0.0+debug'`\r\n`'pod MyDependency', '1.0.0+k'`\r\n\r\nall install version `1.0.0+debug` which is clearly getting picked over any other available version with metadata (`1.0.0+code` in this case).\r\n\r\nThe addition of another version `1.0.0+zebra` always results in the `zebra` version getting picked irrespective of the version being requested. Which means clearly, in terms of precedence, `z > d > c` which is against the rules laid out in semver\r\n\r\n\r\n\r\n","Adding to that, the only way I've found to actually install version `1.0.0+code` is to have a Podfile with:\r\n`'pod MyDependency', '1.0.0+code', '< 1.0.0+debug'`\r\n\r\nwhich makes no sense with regards to the ignorance of metadata for version precedence","Hm I am encountering the same issue @bhavdeepsingh has presented as well. \r\n\r\nfrom Semver.org rule 11:\r\n```\r\nA larger set of pre-release fields has a higher precedence than a smaller set, if all of the preceding identifiers are equal. \r\nExample: 1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-alpha.beta < 1.0.0-beta < 1.0.0-beta.2 < 1.0.0-beta.11 < 1.0.0-rc.1 < 1.0.0.\r\n```\r\n\r\nThough in general, should explicit version be respected? (i.e. `'pod MyDependency', '1.0.0+code'` should resolve to ` '1.0.0+code'` spec and not some other variant of `1.0.0`)","If `1.0.0+code` is in your Podfile.lock, and running `pod install` installs `1.0.0+debug`, this should not dirty the Podfile.lock (the real bug here IMO). Instead, we should just emit a warning that the metadata in the lock doesn't match what was found in your local specs repo (maybe with a link to this issue so that people can become educated about the intricacies of the metadata issue).\r\n\r\nHaving the Podfile.lock become dirty in this scenario is a great way to confuse your whole team."],"labels":["t1:enhancement","d2:moderate","help wanted"]},{"title":"Framework added to Notification Service Extension being linked to Main App Target causing a crash in iOS9","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nI'm using cocoaPod version 1.5.3\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: http:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [ ] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\nWe have a framework MORichNotiifcation (https:\/\/cocoapods.org\/pods\/MORichNotification), this framework is having a deployment target of iOS10 is only added to the Notification Service Extension target(available post iOS 10). Now, this setup works perfectly fine when running in devices with iOS version 10.0 and above. But crashes on iOS 9.\r\n\r\n## What did you expect to happen?\r\nIn iOS 9.0 since the Notification Service Extension(`also verified that deployment target is set to iOS 10.0`) is not supported it will not be present in the App Installed and on running the App the App target should not be linked to MORichNotification.\r\n\r\n## What happened instead?\r\nThe App target is linked with MORichNotification and crashes since it refers to UserNotifications framework, and its not available in iOS9.0\r\n\r\n## CocoaPods Environment\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin18]\r\n    RubyGems : 2.7.6\r\n        Host : Mac OS X 10.14.1 (18B75)\r\n       Xcode : 10.1 (10B61)\r\n         Git : git version 2.9.2\r\nRuby lib dir : \/usr\/local\/Cellar\/ruby\/2.5.1\/lib\r\nRepositories : bitbucket-moeqa - https:\/\/ChengappaMoEngage@bitbucket.org\/ChengappaMoEngage\/moeqa.git @ bd74b743632024fd6fdb93354c94a6636726ec88\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ 599e1541862f0a39d2567ebffdcb69831d2a9940\r\n               MoEPods - https:\/\/ChengappaMoEngage@bitbucket.org\/ChengappaMoEngage\/moepods.git @ 6e0576f9273ed711d5715c5c98878f77a375f365\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment this line to define a global platform for your project\r\nuse_frameworks!\r\ntarget 'SwiftMoEngageIntegration' do\r\n    platform :ios, '8.0'\r\n    pod 'MoEngage-iOS-SDK'\r\n    pod 'MOGeofence'\r\nend\r\n\r\ntarget 'NotificationService' do\r\n\tplatform :ios, '10.0'\r\n\tpod 'MORichNotification'\r\nend\r\n```\r\n\r\n\r\n\r\n## Project that demonstrates the issue\r\nThis is a sample app where we could replicate the issue, just run `pod install` and run the app in iOS 9 device OR Simulator, it will crash because of `UserNotifications` framework(Referred by MORichNotification) not being available. But MORichNotification was only added to Notification Service Extension with deployment target of iOS 10.0.\r\n\r\nhttps:\/\/github.com\/moengage\/SwiftMoEngageIntegration\r\n","comments":["Out of curiosity, can you see if this is fixed using CocoaPods 1.6 beta?","@segiddins Tried with 1.6 beta2,  still it was crashing.\r\n\r\n```dyld: Library not loaded: \/System\/Library\/Frameworks\/UserNotifications.framework\/UserNotifications\r\n  Referenced from: \/Users\/Chengappa\/Library\/Developer\/CoreSimulator\/Devices\/AA90658E-ACF2-422A-A88E-F7A4C75AA473\/data\/Containers\/Bundle\/Application\/D2041252-09D1-491C-87CE-92A0C4020952\/SwiftMoEngageIntegration.app\/Frameworks\/MORichNotification.framework\/MORichNotification\r\n  Reason: no suitable image found.  Did find:\r\n\t\/System\/Library\/Frameworks\/UserNotifications.framework\/UserNotifications: mach-o, but not built for iOS simulator```\r\n","@segiddins Any update on this issue? ","Any workaround for this issue?","@segiddins Any update on this issue?","I had exactly similar case, solution was to downgrade MORichNotification to \r\n`pod 'MORichNotification', '1.3.0'`","@Berdikhan It's working below 2.0.0 (i.e;`1.3.0`) because it was shipped as a static library back then. And now it's shipped as a dynamic framework and the issue with dynamic frameworks is that cocoa pods is linking it with the main app target though explicitly its being included for the Notification Service Extention target.","I've run into this very same issue with a different SDK. My workaround is to remove `use_frameworks!` from the Podfile. It's definitely not ideal though.\r\n\r\nAnother workaround is to change the `UserNotifications` dependency to a `weak_framework`. Not sure if this has ramifications when running the app on an iOS 10+ device though."],"labels":["t2:defect"]},{"title":"Importing header\/source files with same names and different paths","body":"Cocoapods version: 1.5.3\r\nXcode version: 10.0\r\n\r\nConsider following structure of local pod dependency with objective-c sources:\r\ndependency -> folder1 -> MyClass.h\r\ndependency -> folder1 -> MyClass.m\r\ndependency -> folder2 -> MyClass.h\r\ndependency -> folder2 -> MyClass.h\r\n\r\nFiles MyClass in folder1 contains implementation of class, named MyClass1\r\nFiles MyClass in folder2 contains implementation of class, named MyClass2\r\nIt's general case, while using j2objc, that class names are different to files(different packages in java with same class names).\r\n\r\nAfter importing this local dependency to cocoa pods workspace, files from both folders are imported to Xcode project, but from only from one folder are imported into project build phases (but twice). It breaks compilation. \r\n\r\n<img width=\"857\" alt=\"cocoapodsbug\" src=\"https:\/\/user-images.githubusercontent.com\/11790983\/48676666-e8daf000-eb7a-11e8-8cbf-15347aeb402c.png\">\r\n\r\nSample project, demonstrated issue:\r\nhttps:\/\/github.com\/vojerr\/CocoapodsHeadersBug","comments":["You'll need to use a `header_mappings_dir` if you want to be able to import both headers, but that doesnt explain why both `.m`s aren't being added correctly","@segiddins \r\nIn case of using header_mappings_dir, one of headers still remains not imported in \"project headers\", sources phase remains same.\r\n\r\n<img width=\"874\" alt=\"cccc\" src=\"https:\/\/user-images.githubusercontent.com\/11790983\/48900235-ecb09000-ee62-11e8-9ff7-39de355a2144.png\">\r\n\r\n\r\n\r\n","I have the same issue.\r\n\r\nI'm try to provide a pure C\/C++ project, from a standalone Xcode project, into CocoaPods podspec syntax. The original Xcode project it's here : https:\/\/github.com\/dreampiggy\/libx265-Xcode\r\n\r\nIt have 3 directory which contains the same name source file `.cpp`, but the content are exact different. I can successfully config and build with Xcode or Carthage.\r\n\r\nHowever, I can not write any correct way to port this into CocoaPods `source_files` syntax.\r\n\r\n","The Xcode project of framework (manage by my own hands) can build success.\r\n![image](https:\/\/user-images.githubusercontent.com\/6919743\/52163383-40b9d980-271c-11e9-844b-fdc6276393fe.png)\r\n","I try the Podspec syntax. However, the generate project source files list is totally wrong. Which treat any same name source files (for example, `yuv.cpp`), without consider its path. And cause build failsure.\r\n\r\n```\r\ns.source_files = 'source\/x265.{h,cpp}', 'source\/x265_config.h', 'source\/common\/*.{h,c,cpp,hpp}', 'source\/input\/*.{h,c,cpp,hpp}', 'source\/output\/*.{h,c,cpp,hpp}', 'source\/encoder\/*.{h,c,cpp,hpp}'\r\ns.public_header_files = 'source\/x265.h', 'source\/x265_config.h'\r\ns.preserve_paths = 'source\/**\/*'\r\n```\r\n\r\nThe generate `Pods.xcproj`:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/6919743\/52163434-dfded100-271c-11e9-95df-fb682ce9d6d2.png)\r\n","Right now, I can not find a way to solve this for CocoaPods.\n\nI thin it\u2019s bug not feature. Because I\u2019ve already use that `preserve_paths` to keep the source files directory structure. So that it should not be put as plane. However, seems CocoaPods assume something about filename but not full paths.\n\nNow, I have to pre-built the static library (`.a`) and provide it to my user. It's a litttle suck...Hope for a fix.","The podspec is here. You can have a try of that with `pod 'libx265', :git => 'https:\/\/github.com\/dreampiggy\/x265.git'`\r\n\r\nhttps:\/\/github.com\/dreampiggy\/x265","OK. I found a hack way to pass this bug. It's to use Pod subspec to allow same filename exist in one Pod. \ud83d\udc36 \r\n\r\nAnd, it take me hours to fix that `pod spec lint` issue, because by default, all the subspecs combination (Mine is 5, the all combinations nearlly 20...) it's hard to pass. So I polish the hack of Podspec to pass. I think that `pod spec lint --help` should point out the `--subspecs=xxx` usage. Or it takes so much of time to find the way out. (Because why I use subspecs is to solve this bug. The code are actually an entire framework components, without any internal dependency, I have to manually create the dependency... \ud83d\udc31 )\r\n\r\nThe final achievement: https:\/\/github.com\/SDWebImage\/libx265-Xcode\/blob\/3.0\/libx265.podspec#L44-L47\r\n\r\nThe Pod is now on trunk. The x265 codec: https:\/\/cocoapods.org\/pods\/libx265","And, during that Podspec, I found another usage issue of CocoaPods subspecs.\r\n\r\nIs there are any way, to make one `subspec`, contains Project Headers only (wihtout any Public Headers or Private Headers ?). I found that there are no way to do this. \ud83d\ude15 \r\n\r\nI try this workaround, it works in local `:path` usage. But however, this does not pass the `pod spec lint`\r\n\r\n```ruby\r\n  s.subspec 'common' do |ss|\r\n    ss.dependency 'libx265\/core'\r\n    ss.source_files = 'source\/common\/*.{h,c,cpp,hpp}'\r\n    ss.public_header_files = 'source\/x265.h'# dummy to mark all as project header\r\n  end\r\n```","Yes this is a bug, we've marked it as a defect but no one has taken the time to fix it.\r\n\r\nPRs are welcomed :)\r\n\r\n> Is there are any way, to make one subspec, contains Project Headers only (wihtout any Public Headers or Private Headers ?)\r\n\r\nHeaders included in `source_files` are `Project` by default - I _think_ this can be overridden on the subspec level but if the root spec includes them in `public_header_files` then you might need to override it as you have done in your example","> Yes this is a bug, we've marked it as a defect but no one has taken the time to fix it.\r\n> \r\n> PRs are welcomed :)\r\n> \r\n> > Is there are any way, to make one subspec, contains Project Headers only (wihtout any Public Headers or Private Headers ?)\r\n> \r\n> Headers included in `source_files` are `Project` by default - I _think_ this can be overridden on the subspec level but if the root spec includes them in `public_header_files` then you might need to override it as you have done in your example\n\nI\u2019ll try to provide the solution to fix this. Maybe after the vacation. Though I\u2019m not famaliar with Pods, but I have a little ruby language experience....","facing this problem.\r\nin my case, i have some c++ file for different platforms with some file's name in the same.","I have the same problem https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/11172\r\n\r\nIt solve the issue!\r\nhttps:\/\/github.com\/ivpusic\/react-native-image-crop-picker\/issues\/680#issuecomment-678724312\r\n\r\n\r\n```\r\ninstall! 'cocoapods',\r\n         :deterministic_uuids => false\r\n```         \r\n\r\n@vojerr I have  the same sources for react-native and flutter module project. For RN I have this issue but flutter project have not. I dont understand the reason."],"labels":["t2:defect"]},{"title":"Having 'watchOS' support in podspec with 'test_spec' causes spec linting failure","body":"* [X] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI have a lib project (cross-platform Cocoa framework).\r\n\r\nI use Bundler, here is my `Gemfile`:\r\n\r\n```ruby\r\nsource \"https:\/\/rubygems.org\"\r\n\r\ngem 'fastlane'\r\ngem 'cocoapods', '~> 1.6.0.beta.2'\r\ngem 'cocoapods-generate'\r\n```\r\n\r\nHere is my `podspec` file:\r\n\r\n```ruby\r\nPod::Spec.new do |s|\r\n\r\n    s.name          = 'XCEPipeline'\r\n    s.summary       = 'Custom pipeline operators for easy chaining in Swift.'\r\n    s.version       = '1.1.2'\r\n    s.homepage      = 'https:\/\/XCEssentials.github.io\/Pipeline'\r\n\r\n    s.source        = { :git => 'https:\/\/github.com\/XCEssentials\/Pipeline.git', :tag => s.version }\r\n\r\n    s.requires_arc  = true\r\n\r\n    s.license       = { :type => 'MIT', :file => 'LICENSE' }\r\n\r\n    s.authors = {\r\n        'Maxim Khatskevich' => 'maxim@khatskevi.ch'\r\n    } # authors\r\n\r\n    s.swift_version = '4.2'\r\n\r\n    s.cocoapods_version = '>= 1.5.3'\r\n\r\n    # === ios\r\n\r\n    s.ios.deployment_target = '9.0'\r\n\r\n    # === watchos\r\n\r\n    s.watchos.deployment_target = '3.0' \/\/ THIS line causes problems!\r\n\r\n    # === tvos\r\n\r\n    s.tvos.deployment_target = '9.0'\r\n\r\n    # === osx\r\n\r\n    s.osx.deployment_target = '10.11'\r\n\r\n    # === SUBSPECS ===\r\n\r\n    s.subspec 'Core' do |ss|\r\n\r\n        ss.source_files = 'Sources\/Core\/**\/*.swift'\r\n\r\n    end # subspec 'Core'\r\n\r\n    s.subspec 'Operators' do |ss|\r\n\r\n        ss.dependency 'XCEPipeline\/Core'\r\n        ss.source_files = 'Sources\/Operators\/**\/*.swift'\r\n\r\n    end # subspec 'Operators'\r\n\r\n    s.test_spec 'Tests' do |ss|\r\n\r\n        ss.requires_app_host = false\r\n        ss.source_files = 'Tests\/**\/*.swift'\r\n        ss.framework = 'XCTest'\r\n        ss.dependency 'SwiftLint'\r\n\r\n    end # test_spec 'Tests'\r\n\r\nend # spec s\r\n```\r\n\r\nWhen I want to validate my spec, I run:\r\n\r\n```bash\r\nbundle exec pod lib lint\r\n```\r\n\r\n## What did you expect to happen?\r\n\r\nThe pod to pass validation.\r\n\r\n## What happened instead?\r\n\r\nValidation fails.\r\n\r\n```bash\r\n> XCEPipeline (1.1.2)\r\n    - NOTE  | [XCEPipeline\/Core,XCEPipeline\/Operators] xcodebuild:  note: Using new build system\r\n    - NOTE  | [XCEPipeline\/Core,XCEPipeline\/Operators] xcodebuild:  note: Planning build\r\n    - NOTE  | [XCEPipeline\/Core,XCEPipeline\/Operators] xcodebuild:  note: Constructing build description\r\n    - NOTE  | [XCEPipeline\/Core,XCEPipeline\/Operators] xcodebuild:  warning: Skipping code signing because the target does not have an Info.plist file. (in target 'App')\r\n    - NOTE  | [watchOS] xcodebuild:  ld: warning: directory not found for option '-F\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/WatchSimulator.platform\/Developer\/Library\/Frameworks'\r\n    - ERROR | [watchOS] xcodebuild: Returned an unsuccessful exit code. You can use `--verbose` for more information.\r\n    - ERROR | [watchOS] xcodebuild:  \/Users\/maxim\/Library\/Mobile Documents\/com~apple~CloudDocs\/Dev\/XCEssentials\/Pipeline\/Tests\/PipelineTests.swift:27:8: error: no such module 'XCTest'\r\n\r\n[!] XCEPipeline did not pass validation, due to 2 errors.\r\nYou can use the `--no-clean` option to inspect any issue.\r\n```\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.6.0.beta.2\r\n        Ruby : ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin17]\r\n    RubyGems : 2.7.7\r\n        Host : Mac OS X 10.13.6 (17G3025)\r\n       Xcode : 10.1 (10B61)\r\n         Git : git version 2.19.0\r\nRuby lib dir : \/Users\/maxim\/.rvm\/rubies\/ruby-2.5.1\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 84791d40c2fa3b3cb95ed72bb6a39d3ec77308c1\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/maxim\/.rvm\/gems\/ruby-2.5.1\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-generate    : 1.3.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nThe spec listed above comes from this repo:\r\n[XCEPipeline](https:\/\/github.com\/XCEssentials\/Pipeline)\r\n\r\nNOTE: if we remove 'watchOS' support, then it passes validation:\r\n[Working XCEPipeline.podspec](https:\/\/github.com\/XCEssentials\/Pipeline\/blob\/master\/XCEPipeline.podspec)\r\n","comments":["I was able to solve this by manually specifying the platform in my test spec: \r\n\r\n```Ruby\r\ns.test_spec 'IRLSizeTests' do |ts|\r\n    ts.platform = :ios, '10.0'\r\n```","@SlaunchaMan yes, I know this trick, but here are my thoughts about this.\r\n\r\n1. We should not use workarounds, most logical interpretation of the spec must be built into the CocoaPods itself.\r\n2. My lib supports all 4 Cocoa platforms, as it only depends on standard Swift lib. So the unit tests code is identical for all platforms (as well as lib sources). So using this approach means I need to create 3 test specs (excluding one for watchOS), which are going to be configured identically except deployment target, which is obviously inconvenient and error prone, hence should be avoided.\r\n3. This workaround causes spec to pass validation, but with lots of annoying warnings from linter \u2014 for each supported spec platform it reports that incompatible test targets are ignored because, obviously, they are incompatible. It unnecessary pollutes the output, which is always unwelcome.\r\n4. I also use [cocoapods-generate](https:\/\/github.com\/square\/cocoapods-generate) plugin, which, unfortunately fails when this workaround is in use - for some reasons it attempts to create and build a unit tests target for watchOS and, of course, can not find 'XCTest' and fails the whole process (while when test spec is declared as in my podspec file example above it only creates unneded unit tests target for watchOS, but does not fail the whole process).\r\n\r\nTo sum it up, overall I think this behavior would be fare to call \"unexpected\" (at least), should be considered as undesired in CocoaPods and is worth to be fixed\/improved.\r\n\r\nDear CocoaPods contributers, please, feel free to comment and let me know what is your point of view on this. Thanks!","As a workaround in the meantime, you can specify every platform but watchOS in your test spec","Setting an specific version inside the tests spec doesn\u00b4t seem to work for me whey I do a pod lib lint, still get the error.\r\n\r\n```` - ERROR | [watchOS] unknown: Encountered an unknown error (The platform of the target `App` (watchOS 4.0) is not compatible with `APIClient\/Tests (1.0)`, which does not support `watchos`.) during validation. ````","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Any updates on this issue, any idea when it's gonna be resolved? Thanks!","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","keep. No updates here.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","This issue will be auto-closed because there hasn't been any activity for a few months. Feel free to [open a new one](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/new) if you still experience this problem :+1:\n","The issue seems to be generating a main.m in the generated App target - similar to https:\/\/github.com\/square\/cocoapods-generate\/issues\/42\r\n\r\n```\r\n    Testing failed:\r\n    \tEntry point (_main) undefined. for architecture i386\r\n    \tTesting cancelled because the build failed.\r\n```","It seems that CocoaPods generates an empty main.m in the AppHost-*-UnitTests target in the watchOS target. If I work around that, I see that XCTest doesn't support watchOS.  Given that, it's probably a low priority to fix this for now.  \r\n\r\nIn the meantime, disable watchOS for the testspecs as noted [above](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8283#issuecomment-439503006).\r\n\r\n![Screen Shot 2019-12-07 at 2 31 15 PM](https:\/\/user-images.githubusercontent.com\/73870\/70381431-dd31a700-18fe-11ea-92bf-e22031c1d29f.png)\r\n","The workaround also doesn't work for me. I set all the platform except for watch and I got the same error:\r\n[!] The platform of the target `App-watchOS` (watchOS 6.0) is not compatible with `FirebaseMessaging\/unit (4.1.9)`, which does not support `watchos`.\r\n\r\nHere's how I set up the platform:\r\ns.test_spec 'unit' do |ts|\r\n    ts.platforms = {:ios => '8.0', :osx => '10.11', :tvos => '10.0'}\r\n\r\n","Reopening now that Xcode 12.5 has added XCTest for watchos."],"labels":["s7:workaround available"]},{"title":"Add option for pulling in all test targets in a Podfile","body":"\ud83c\udf08\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\nWe're making use of the new test spec functionality, but finding it difficult to remember to maintain the testspecs list in our Podfile:\r\n\r\nhttps:\/\/github.com\/material-components\/material-components-ios\/blob\/develop\/catalog\/Podfile#L8\r\n\r\nWould it be possible to somehow provide an option for pulling in all tests for a given podspec?","comments":["Yes! Look into https:\/\/github.com\/CocoaPods\/Core to do this. Would be a nice enhancement.\r\n","Sounds like a good idea to me \ud83d\udc4d ","It'll require some plumbing to get to the resolver, most likely. That'll be the trickiest bit"],"labels":["t1:enhancement","d2:moderate"]},{"title":"CP raise a error when a pod uses a pre-release version in other pod","body":"I using CocoaPods v1.6.0.beta.1, I get a error:\r\n```\r\n\r\n  In snapshot (Podfile.lock):\r\n    TTTracker (= 1.1.11-rc.0, ~> 1.1.1)\r\n\r\n  In Podfile:\r\n    TTPushSDK (from `git url`, commit `575fad426b1e7581458991f529fe42e81095c297`) was resolved to 0.1.3, which depends on\r\n      TTTracker\r\n\r\nThere are only pre-release versions available satisfying the following requirements:\r\n\r\n\t'TTTracker', '= 1.1.11-rc.0, ~> 1.1.1'\r\n\r\n\t'TTTracker', '>= 0'\r\n\r\nYou should explicitly specify the version in order to install a pre-release version\r\n```\r\n\r\nI check my Podfile, it does not specify the `TTTracker`. But in my Podfile.lock, I found that:\r\n```\r\n  - AWETrackerService (0.1.8):\r\n    - BDTracker (= 0.1.3-rc.0)\r\n    - HTSServiceKit\r\n    - TTInstallService (= 1.1.3.2)\r\n    - TTNetworkManager (~> 2.2.8)\r\n    - TTTracker (= 1.1.11-rc.0)\r\n    - UMengAnalytics (~> 4.1.4)\r\n```\r\n The TTTracker's version is from other dependency, and it uses a pre-release version. I think it should be OK. Is it a bug?","comments":["It works in CocoaPods v1.6.0.beta.2. I close this issue.","It still exists in v1.6.0.beta.2. But at the first it is OK, and it raises error after run `pod install` again.\r\n\r\n```\r\n  In snapshot (Podfile.lock):\r\n    TTTracker (= 1.1.11-rc.0, ~> 1.1.1)\r\n\r\n  In Podfile:\r\n    TTPushSDK (from `git url`, commit `575fad426b1e7581458991f529fe42e81095c297`) was resolved to 0.1.3, which depends on\r\n      TTTracker\r\n\r\nThere are only pre-release versions available satisfying the following requirements:\r\n\r\n\t'TTTracker', '= 1.1.11-rc.0, ~> 1.1.1'\r\n\r\n\t'TTTracker', '>= 0'\r\n\r\nYou should explicitly specify the version in order to install a pre-release version\r\n\r\n```","It works in CocoaPods v1.5.3.","Could somebody help me?","@Whirlwind I believe this is just a warning that only a pre-release version satisfies the requirements, and therefore CocoaPods is recommending to make it explicit by using `pod 'TTTracker', '1.1.11-rc.0'`","The prerelease version is required by other pod , and the pod make it 'explicit'. I think the prerelease pod should be not written in my podfile.\r\n","Interesting, this might be a bug then. Will need to look into it","do you specify another version requirement in your Podfile? ex. do you have something like `pod 'TTTracker', '>= 1.1.0'`?","No, the `TTTracker` could not found in my Podfile. It is required by other pod.","> In snapshot (Podfile.lock):\r\n    TTTracker (= 1.1.11-rc.0, ~> 1.1.1)\r\n\r\nIt looks like the requirement `~> 1.1.1` is coming from somewhere, and without enough information this is difficult to debug. It must be the requirement of a pod, in your Podfile, or was previously in your Podfile and is therefore including in the Podfile.lock","`TTTracker` is required by two pods, so the `Podfile.lock` show `TTTracker (= 1.1.11-rc.0, ~> 1.1.1)`.\r\nBut the Podfile not require `TTTracker`.","I get this error in v1.5.3.....\r\n\r\n```\r\n\t11: from \/Users\/whirlwind\/.rvm\/gems\/ruby-2.5.0\/gems\/cocoapods-1.5.3\/lib\/cocoapods\/installer\/analyzer.rb:779:in `resolve_dependencies'\r\n\t10: from \/Users\/whirlwind\/.rvm\/gems\/ruby-2.5.0\/gems\/cocoapods-1.5.3\/lib\/cocoapods\/user_interface.rb:64:in `section'\r\n\t 9: from \/Users\/whirlwind\/.rvm\/gems\/ruby-2.5.0\/gems\/cocoapods-1.5.3\/lib\/cocoapods\/installer\/analyzer.rb:781:in `block in resolve_dependencies'\r\n\t 8: from \/Users\/whirlwind\/.rvm\/gems\/ruby-2.5.0\/gems\/cocoapods-1.5.3\/lib\/cocoapods\/resolver.rb:123:in `resolve'\r\n\t 7: from \/Users\/whirlwind\/.rvm\/gems\/ruby-2.5.0\/gems\/molinillo-0.6.5\/lib\/molinillo\/resolver.rb:43:in `resolve'\r\n\t 6: from \/Users\/whirlwind\/.rvm\/gems\/ruby-2.5.0\/gems\/molinillo-0.6.5\/lib\/molinillo\/resolution.rb:182:in `resolve'\r\n\t 5: from \/Users\/whirlwind\/.rvm\/gems\/ruby-2.5.0\/gems\/molinillo-0.6.5\/lib\/molinillo\/resolution.rb:254:in `process_topmost_state'\r\n\t 4: from \/Users\/whirlwind\/.rvm\/gems\/ruby-2.5.0\/gems\/molinillo-0.6.5\/lib\/molinillo\/resolution.rb:684:in `attempt_to_activate'\r\n\t 3: from \/Users\/whirlwind\/.rvm\/gems\/ruby-2.5.0\/gems\/molinillo-0.6.5\/lib\/molinillo\/resolution.rb:308:in `unwind_for_conflict'\r\n\t 2: from \/Users\/whirlwind\/.rvm\/gems\/ruby-2.5.0\/gems\/molinillo-0.6.5\/lib\/molinillo\/resolution.rb:308:in `tap'\r\n\t 1: from \/Users\/whirlwind\/.rvm\/gems\/ruby-2.5.0\/gems\/molinillo-0.6.5\/lib\/molinillo\/resolution.rb:310:in `block in unwind_for_conflict'\r\n\/Users\/whirlwind\/.rvm\/gems\/ruby-2.5.0\/gems\/molinillo-0.6.5\/lib\/molinillo\/resolution.rb:328:in `raise_error_unless_state': [!] [!] CocoaPods could not find compatible versions for pod \"TTTracker\": (Pod::NoSpecFoundError)\r\n  In snapshot (Podfile.lock):\r\n    TTTracker (= 1.1.11-rc.0, ~> 1.1.1)\r\n\r\n  In Podfile:\r\n    TTPushSDK (from `git@myprivate.com:IOS\/tt_pods_push_sdk.git`, commit `575fad426b1e7581458991f529fe42e81095c297`) was resolved to 0.1.3, which depends on\r\n      TTTracker\r\n\r\nDue to the previous na\u00efve CocoaPods resolver, you were using a pre-release version of `TTTracker`, without explicitly asking for a pre-release version, which now leads to a conflict. Please decide to either use that pre-release version by adding the version requirement to your Podfile (e.g. `pod 'TTTracker', '= 1.1.11-rc.0, ~> 1.1.1'`) or revert to a stable version by running `pod update TTTracker`.\r\n```\r\n\r\nPodfile.lock:\r\n```\r\n  - AWETrackerService (0.1.8):\r\n    - BDTracker (= 0.1.3-rc.0)\r\n    - HTSServiceKit\r\n    - TTInstallService (= 1.1.3.2)\r\n    - TTNetworkManager (~> 2.2.8)\r\n    - TTTracker (= 1.1.11-rc.0)\r\n    - UMengAnalytics (~> 4.1.4)\r\n  - AWEFoundationKit\/Lib\/Dependency (3.2.0):\r\n    - TTTracker (~> 1.1.1)\r\n...\r\n```","Is it a bug? or CocoaPods still want to make the `TTTracker` explicit?","Ah ok, so there's 2 version requirements coming from 2 different podspecs. I guess you could argue that there shouldn't be a warning here, but that would be quite difficult to implement. would love to hear other opinions on this","Now, there are 3 pods are pre-release version, and they are required by other pods. I must specify them in my Podfile. But I don't know what these pods to do. So I don't want to write it in my Podfile. Because if the pre-release pods are removed or updated from the dependencies, I would forget to update\/remove them from my Podfile.","Yes I understand, you make a valid point. However this is just a warning, you can ignore if you don't mind. I think the general idea was that pods should not be depending on pre-release versions but I am lacking the context of when this was implemented\r\n\r\nEdit: should -> should not","It is a error, not warning.... I could not ignore it... ","sounds like a bug then"],"labels":["s2:confirmed","d2:moderate"]},{"title":"Failure to archive with new build system, extensions, and subspec combinations","body":"* [X] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n \ud83c\udf08\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nProduct -> Archive\r\n\r\n## What did you expect to happen?\r\n\r\nSuccessful archive\r\n\r\n## What happened instead?\r\n\r\n```\r\nerror: Multiple commands produce '\/Users\/paulbeusterien\/Library\/Developer\/Xcode\/DerivedData\/NewBuild-Extension-Subspec-gpaqorhpcdsnzfbjncbmklpefpai\/Build\/Intermediates.noindex\/ArchiveIntermediates\/NewBuild-Extension-Subspec\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GTMSessionFetcher.framework':\r\n1) Target 'GTMSessionFetcher-Core' has create directory command with output '\/Users\/paulbeusterien\/Library\/Developer\/Xcode\/DerivedData\/NewBuild-Extension-Subspec-gpaqorhpcdsnzfbjncbmklpefpai\/Build\/Intermediates.noindex\/ArchiveIntermediates\/NewBuild-Extension-Subspec\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GTMSessionFetcher.framework'\r\n2) Target 'GTMSessionFetcher-Core-Full' has create directory command with output '\/Users\/paulbeusterien\/Library\/Developer\/Xcode\/DerivedData\/NewBuild-Extension-Subspec-gpaqorhpcdsnzfbjncbmklpefpai\/Build\/Intermediates.noindex\/ArchiveIntermediates\/NewBuild-Extension-Subspec\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GTMSessionFetcher.framework'\r\n```\r\n\r\n## CocoaPods Environment\r\n\r\nAlso occurs with 1.6.0\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-darwin17]\r\n    RubyGems : 2.6.13\r\n        Host : Mac OS X 10.13.6 (17G65)\r\n       Xcode : 10.0 (10A255)\r\n         Git : git version 2.19.0.605.g01d371f741-goog\r\nRuby lib dir : \/Users\/paulbeusterien\/.rbenv\/versions\/2.4.0\/lib\r\nRepositories : cpdc-eap-spec - sso:\/\/cpdc-eap\/spec @ 0fd9263ede63bee9aec1034b38771950cd7e147a\r\n               cpdc-internal-spec - sso:\/\/cpdc-internal\/spec @ 98ecdc63c0d9c742bd186a2da06b64e3b40899dd\r\n               cpdc-test-spec - sso:\/\/cpdc-test\/spec @ 00c36f2a45e0fabc743572254402411c8493396e\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ f5bb69af3467f6ccb449624f29a53a388167a445\r\n               temp-specs - git@github.com:paulb777\/Specs.git @ e945099cd9c9d8b8a34cc583662c9a2b150893f0\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/paulbeusterien\/.rbenv\/versions\/2.4.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\nclaide-plugins         : 0.9.2\r\ncocoapods-deintegrate  : 1.0.2\r\ncocoapods-dependencies : 1.1.0\r\ncocoapods-generate     : 1.0.0\r\ncocoapods-packager     : 1.5.0\r\ncocoapods-plugins      : 1.0.0\r\ncocoapods-rome         : 1.0.0\r\ncocoapods-search       : 1.0.0\r\ncocoapods-stats        : 1.0.0\r\ncocoapods-trunk        : 1.3.1\r\ncocoapods-try          : 1.1.0\r\ncocoapods_debug        : 0.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '9.0'\r\n\r\nuse_frameworks!\r\n\r\ntarget 'MessageExtension' do\r\n  pod 'GTMSessionFetcher\/Core'\r\nend\r\n\r\ntarget 'NewBuild-Extension-Subspec' do\r\n  pod 'GTMSessionFetcher\/Full'\r\n\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/paulb777\/NewBuildExtensionSubspec\r\n\r\nLikely a direct result of creating two build targets for the GTMSessionFetcher CocoaPod:\r\n\r\n![screen shot 2018-10-19 at 4 41 07 pm](https:\/\/user-images.githubusercontent.com\/73870\/47248278-0cfdb280-d3be-11e8-97f6-0151bdcfc05f.png)\r\n\r\n","comments":["I've the exact same issue with multiple targets that use different iOS versions (10.0 & 12.0)\r\n\r\n    error: Multiple commands produce '\/Users\/tomspee\/Library\/Developer\/Xcode\/DerivedData\/Company-hhmrvgkwkpelmlewuxvhclfggdtc\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Company\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/ObjectMapper.framework':\r\n    1) Target 'ObjectMapper-iOS12.0' has create directory command with output '\/Users\/tomspee\/Library\/Developer\/Xcode\/DerivedData\/Company-hhmrvgkwkpelmlewuxvhclfggdtc\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Company\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/ObjectMapper.framework'\r\n    2) Target 'ObjectMapper-iOS10.0' has create directory command with output '\/Users\/tomspee\/Library\/Developer\/Xcode\/DerivedData\/Company-hhmrvgkwkpelmlewuxvhclfggdtc\/Build\/Intermediates.noindex\/ArchiveIntermediates\/Company\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/ObjectMapper.framework'\r\n\r\n@paulb777 Did you manage to fix this issue?","@tomspee So far, I only have the workaround of changing the Podfile so that extensions don't use a different subset of subspecs that the app.  Your issue may be different - same symptom, but different cause.","I have the same issue. \r\n\r\nI think the reason that there are duplicate frameworks could be because there are multiple projects in the same workspace. It appears to be due to how the naming works when creating frameworks.\r\n\r\nWe have a dependency\r\n`pod 'Appboy-iOS-SDK'`\r\nwhich defines a subspec dependency\r\n```\r\n  s.subspec 'ContentCards' do |scc|\r\n    scc.source_files = 'AppboyUI\/ABKContentCardsViewController\/ContentCardsViewController\/**\/*.*', 'AppboyUI\/ABKUIUtils\/**\/*.*', 'AppboyKit\/ABKSDWebImageProxy.m'\r\n    scc.resource = 'AppboyUI\/ABKContentCardsViewController\/ContentCards_Resources\/**\/*.*'\r\n    scc.dependency 'Appboy-iOS-SDK\/Core'\r\n    scc.dependency 'SDWebImage\/GIF', '~>4.0'\r\n  end\r\n```\r\n\r\nWe have a separate dependency \r\n`pod 'SDWebImage'` which defines a default subspec `s.default_subspec = 'Core'`\r\n\r\nBecause `SDWebImage\/GIF` depends on `SDWebImage\/Core`, the system builds the `Core` framework for each project that needs it.\r\n\r\nThis causes our workspace to have a collision with two frameworks named:\r\n`\"${BUILT_PRODUCTS_DIR}\/SDWebImage.default-GIF\/SDWebImage.framework\",`\r\nand\r\n`\"${BUILT_PRODUCTS_DIR}\/SDWebImage-Core-GIF\/SDWebImage.framework\",`\r\n\r\nNote that these are in two separate projects but compiling down into one app.","I've been testing for a while and I've created an empty project with just 2 targets, one main project and one widget. In the Podfile both targets (with different platforms, iOS 10 & 12) use just one shared pod, Alamofire. Also then I'm getting the same errors.\r\n\r\n@vinceis1337 Do you have a solution\/workaround?","@tomspee Workaround is to specify subspec explicitly i.e.\r\n\r\n`pod 'SDWebImage'`\r\nchange to\r\n`pod 'SDWebImage\/Core'`\r\n\r\nThis causes the build product path to always have the subspec name (in this example `-Core-`instead of `-.default-`)\r\n\r\nHmm..this might not work for you though because I don't think Alamofire has subspecs does it?\r\n\r\nCould you post the error logs?","Same problem here. Even though the targets contain the subspec names (`-Core-...`), they still produce the same framework name in the Products, leading to the build failure.","Yep. I'm seeing this in our project using a pod with multiple sub-specs referenced from different targets. This is a show stopper... 1.6.0.beta.2.\r\n\r\n```\r\nerror: Multiple commands produce '\/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/CASComponentLibrary.framework':\r\n1) Target 'Foo-FoundationExtensions-Model' has create directory command with output '\/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework'\r\n2) Target 'Foo-FoundationExtensions-Logging-Model-SecureStore' has create directory command with output '\/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework'\r\n3) Target 'Foo-55ceec23' has create directory command with output '\/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework'\r\n```\r\n\r\nPlease note the suggested workaround gives no relief.\r\n\r\nAdditionally, I have a lot of related warnings coming from the build system. Notably `unexpected mutating task` and `duplicate output file` (which has nothing to do with inadvertently included plist files).\r\n\r\n```\r\nBuild system information\r\nwarning: unexpected mutating task ('SetOwnerAndGroup xcodeserver:staff \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework') with no relation to prior mutator ('SetOwnerAndGroup xcodeserver:staff \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework') (in target 'Foo-FoundationExtensions-Model')\r\n\r\nBuild system information\r\nwarning: unexpected mutating task ('SetOwnerAndGroup xcodeserver:staff \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework') with no relation to prior mutator ('SetOwnerAndGroup xcodeserver:staff \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework') (in target 'Foo-FoundationExtensions-Model')\r\n\r\nBuild system information\r\nwarning: unexpected mutating task ('SetMode u+w,go-w,a+rX \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework') with no relation to prior mutator ('SetMode u+w,go-w,a+rX \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework') (in target 'Foo-FoundationExtensions-Model')\r\n\r\nBuild system information\r\nwarning: unexpected mutating task ('SetMode u+w,go-w,a+rX \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework') with no relation to prior mutator ('SetMode u+w,go-w,a+rX \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework') (in target 'Foo-FoundationExtensions-Model')\r\n\r\nBuild system information\r\nwarning: duplicate output file '\/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework\/Headers\/NSDecimalNumber+Creation.h' on task: CpHeader \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/Source\/MyProject\/Pods\/Foo\/CCLFoundationExtensions\/CCLFoundationExtensions\/NSDecimalNumber+Creation.h \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework\/Headers\/NSDecimalNumber+Creation.h (in target 'Foo-FoundationExtensions-Logging-Model-SecureStore')\r\n\r\nBuild system information\r\nwarning: duplicate output file '\/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework\/Headers\/NSJSONSerialization+Safe.h' on task: CpHeader \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/Source\/MyProject\/Pods\/Foo\/CCLFoundationExtensions\/CCLFoundationExtensions\/NSJSONSerialization+Safe.h \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework\/Headers\/NSJSONSerialization+Safe.h (in target 'Foo-FoundationExtensions-Logging-Model-SecureStore')\r\n\r\nBuild system information\r\nwarning: duplicate output file '\/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework\/Headers\/NSObject+NilTolerantEqual.h' on task: CpHeader \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/Source\/MyProject\/Pods\/Foo\/CCLFoundationExtensions\/CCLFoundationExtensions\/NSObject+NilTolerantEqual.h \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework\/Headers\/NSObject+NilTolerantEqual.h (in target 'Foo-FoundationExtensions-Logging-Model-SecureStore')\r\n\r\nBuild system information\r\nwarning: duplicate output file '\/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework\/Headers\/NSString+Utils.h' on task: CpHeader \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/Source\/MyProject\/Pods\/Foo\/CCLFoundationExtensions\/CCLFoundationExtensions\/NSString+Utils.h \/Users\/xcodeserver\/Library\/Caches\/XCSBuilder\/Bots\/82a75fec2007332e806edaa27b01db63\/DerivedData\/Build\/Intermediates.noindex\/ArchiveIntermediates\/MyProject\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/Foo.framework\/Headers\/NSString+Utils.h (in target 'Foo-FoundationExtensions-Logging-Model-SecureStore')\r\n```","Any progress on this?\r\nI need SDWebImage\/WebP pod in app and in notification extension\r\nCurrent workaround is to use carthage for extension, and cocoapods for app, but it feels weird","This issue seems related to #7733 where @segiddins says \"CocoaPods can only embed a single framework with a given name, so you're not able to expose different functionality to the extension and the main app by using subspecs\".  However, this issue is different since these examples work fine with the old build system.","I'm working on a fix to make sure that an extension target's pod targets include the subspec combinations of its host app.","I got a fix working for the basic case of directly depending upon different subspec combinations.\r\n\r\nHowever, I'm not sure what to do about the case where the subspec combination is coming transitively via another target. It doesn't seem right to try to change that other target.\r\n\r\nI'm starting to think that subspecs are not scalable for source pods, since they imply different variations of the same named library could be needed and different variations of the same-named library does not work well with the Xcode builder and loader.\r\n\r\nShould CocoaPods be change or have an option to build a different library for each subspec?","I think we need to rethink subspecs entirely in 2.x.","Here's an update from my ongoing investigation:\r\n\r\nFor subspecs from **dynamic frameworks** pods, there could have easily been load failures with the old build system depending on which subspec combination got copied into the app's Frameworks folder and  which symbols are being used from which targets.  For any workspace that ends up with different subspec combinations between an extension and the host app, it should be possible to make it fail at load time by calling methods from subspec combination that didn't get copied to the bundle. Therefore, it is arguable that the new archive failure is a good thing - although it would be much better for the build system to give the error - or at least a warning - in a regular build instead of waiting until archiving to expose it.\r\n\r\nFor subspecs from **static frameworks** pods, regular builds with the old and new build systems should always work fine because the right frameworks are built into appropriately labeled directory and properly linked into the right build targets.  It doesn't matter which frameworks are copied into the bundle since static frameworks are linked at build time and not needed at load time.\r\n\r\nThe issue with the new build system is that the archiver wants to put all intermediate frameworks into the same directory instead of separate directories for each build target like the regular builder. I'm thinking about flushing this out a bit further and sending a Radar.\r\n\r\n\r\n```\r\nerror: Multiple commands produce '\/Users\/paulbeusterien\/Library\/Developer\/Xcode\/DerivedData\/NewBuild-Extension-Subspec-gaeuwroouqpzwlfwgiqtmknxbqjt\/Build\/Intermediates.noindex\/ArchiveIntermediates\/NewBuild-Extension-Subspec\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GoogleUtilities.framework':\r\n1) Target 'GoogleUtilities-NSData+zlib' has create directory command with output '\/Users\/paulbeusterien\/Library\/Developer\/Xcode\/DerivedData\/NewBuild-Extension-Subspec-gaeuwroouqpzwlfwgiqtmknxbqjt\/Build\/Intermediates.noindex\/ArchiveIntermediates\/NewBuild-Extension-Subspec\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GoogleUtilities.framework'\r\n2) Target 'GoogleUtilities-Environment' has create directory command with output '\/Users\/paulbeusterien\/Library\/Developer\/Xcode\/DerivedData\/NewBuild-Extension-Subspec-gaeuwroouqpzwlfwgiqtmknxbqjt\/Build\/Intermediates.noindex\/ArchiveIntermediates\/NewBuild-Extension-Subspec\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GoogleUtilities.framework'\r\n```","https:\/\/openradar.appspot.com\/radar?id=5038526135533568","The issue is still present in 1.6.0-rc1, the only solution for me was to switch back to the old build system.","> https:\/\/openradar.appspot.com\/radar?id=5038526135533568\r\n\r\nI hope Apple fix that soon.","> However, I'm not sure what to do about the case where the subspec combination is coming transitively via another target. It doesn't seem right to try to change that other target.\r\n\r\nYeah I'm running into this. We have two different google pods included. One requires `GTMSessionFetcher` and the others just include `GTMSessionFetcher\/Core`.  Even changing the prior to the `GTMSessionFetcher\/Full` subspec doesn't work.\r\n\r\nNot exactly sure what to do about this. Any other workarounds?","Maybe I'm misreading, but changing `GTMSessionFetcher` to `GTMSessionFetcher\/Full` is a no-op since `Full` is the [default subspec](https:\/\/github.com\/google\/gtm-session-fetcher\/blob\/master\/GTMSessionFetcher.podspec#L25).  The targets that require `GTMSessionFetcher\/Core` should be changed to require `GTMSessionFetcher\/Full`.","Yeah, you are exactly right. That's what I determined. Unfortunately I can't fix that without a bunch of PRs to various google pods or hosting a pod spec for it locally.","@sprynmr You should be able to add `pod 'GTMSessionFetcher\/Full'` to the targets in the Podfile.","I can add their targets to my Podfile and override their podspec? To be clear, we include a couple google dependencies, which in turn include either `GTMSessionFetcher` or `GTMSessionFetcher\/Core` in their podspec, thus the two targets created in my Pods workspace. I can override that without hacking their podspec files?","CocoaPods will union the dependencies from all the requested podspecs in the target of the Podfile, so you can explicitly add 'GTMSessionFetcher\/Full', so that all of your targets end up matching the GTMSessionFetcher subspec subset.","Aha! I had tried that, and it didn\u2019t work, so I looked closer. Turns out we also had `Firebase\/Auth` required again (which in turn requires just `GTMSessionFetcher`) in the tests target for some reason. It was already inherited, so it wasn\u2019t needed. Having that there caused the problem to persist. Removing that and adding `GTMSessionFetcher\/Full` to the main Podfile (and the SNG podspec for good measure) fixes the issue.\r\n\r\nThanks for the help!","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Still an issue and no word from Apple on the radar.","This is still an issue for us as well","Same here, 3 apps all with the same issue","same problem using Xcode 10.2","same problem using Xcode 10.3","Same error with GTMSessionFetcher using firebase, couldn't I solve it in any way? Are there solutions besides legacy mode? Can someone explain them to me?\r\n\r\nI tried to add 'GTMSessionFetcher \/ Core' to the pod file in both targets but I didn't solve it.","@darkbit34 See https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8206#issuecomment-484100078 above","Let me understand, I have three targets in the pod file, one is the main app one is the test and one is the widget today, I have to remove from the test target \"pod 'Firebase'\" and insert in the target of the app in the pod file  \"Pod 'GTMSessioFetcher \/ Full'\"?!  without touching the widget today?  both the app and today are giving me error!  today uses firebase auth.","Faced the same issue with GTMAppAuth pulling in AppAuth\/Core, and needing codes from AppAuth. \r\n\r\nInitial workaround of adding AppAuth above GTMAppAuth in Podfile fails, however, found out that it works after I do the following.\r\n\r\n1. Removed all GTMAppAuth from Podfile, run pod install.\r\n2. Add back GTMAppAuth into Podfile, then run pod install again.","I faced the same issues too, but I try to add these :\r\n\r\n`pod 'GTMAppAuth', '1.0.0'`\r\n`pod 'GTMSessionFetcher\/Full', '1.3.0'`\r\n`pod 'AppAuth', '1.3.0'`\r\n\r\nin my podfile, and it works...","Commenting use_frameworks! in PodFile worked for me.\r\nUsing XCode 10.1, pod version 1.8.4","Hi there,\r\n\r\nI have fixes the issue with below code in my case.\r\n\r\n```\r\nplatform :ios, '10.0'\r\nuse_frameworks!\r\n\r\ndef google_utilites\r\n  pod 'GoogleUtilities\/AppDelegateSwizzler'\r\n  pod 'GoogleUtilities\/Environment'\r\n  pod 'GoogleUtilities\/ISASwizzler'\r\n  pod 'GoogleUtilities\/Logger'\r\n  pod 'GoogleUtilities\/MethodSwizzler'\r\n  pod 'GoogleUtilities\/NSData+zlib'\r\n  pod 'GoogleUtilities\/Network'\r\n  pod 'GoogleUtilities\/Reachability'\r\n  pod 'GoogleUtilities\/UserDefaults'\r\n  pod 'GTMSessionFetcher'\r\nend\r\n\r\ntarget 'myApp' do\r\n\r\n  google_utilites\r\n\r\n  pod 'Firebase\/Auth'\r\n  pod 'Firebase\/Database'\r\n  pod 'Firebase\/Storage'\r\n  pod 'Firebase\/Analytics'\r\n  pod 'GoogleSignIn'\r\n\r\nend\r\n\r\ntarget 'shareExtension' do\r\n\r\n  google_utilites\r\n\r\n  pod 'Firebase\/Auth'\r\n  pod 'Firebase\/Database'\r\n  pod 'Firebase\/Storage'\r\n\r\nend\r\n```","Apart for waiting for Apple to fix it, couldn't we just name the produced frameworks differently so there's no name clash? E.g. SDWebImage and SDWebImage-Core (or SDWebImageCore). It's how the target names differ. Why can't the frameworks themselves follow the same convention, I don't get it.","Thank you @shinichiro-san ","That works for me, thank you @shinichiro-san ","I have the same issue.\r\nOur project has different targets for regions. Share pods with different resources and code in subspecs. \r\nDoes anyone have a solution?","> Apart for waiting for Apple to fix it, couldn't we just name the produced frameworks differently so there's no name clash? E.g. SDWebImage and SDWebImage-Core (or SDWebImageCore). It's how the target names differ. Why can't the frameworks themselves follow the same convention, I don't get it.\r\n\r\nPerhaps if we do have dependencies like `Foo\/Bar1` and `Foo\/Bar2`, we don't have to have separated binaries, even if they belong to different targets?","For me, it's due to our multi-targets, multi-subspecs system (iOS, watchOS, today extension, siri extension, etc). Something like:\r\n\r\n- Utility\/Logger\/AppDynamics relies on app dynamics, which relies on iOS so it cannot be added to \"Watch\" target;\r\n- Utility\/Logger\/FileLogger doesn't have any specific dependencies, and is needed in targets that enables file storing;\r\n- Ulitily\/Logger\/ConsoleLogger is required by all targets;\r\n- Utility\/Core is required by all targets;\r\n- Utility\/JailbreakDetection required by iOS target;\r\n- And so on.\r\n\r\nThings like this. It works fine for debug build, but we are having problem in archiving. ","I'm having the same issue in our large project. We have our code split up into multiple pods that we import into our main project file. Since we want to share some code with our watchOS and Siri targets, some of our pods have multiple subspecs so we don't have to #if our incompatible code out. Like mentioned above, it builds completely fine for debug but fails on archiving.","I wrote [a post](https:\/\/www.linkedin.com\/pulse\/cocoapods-problem-multi-targets-vs-multi-subspecs-leo-liu) about this problem; since we know how CocoaPods works, such behavior is understandable and can be worked around. But it's still good to see a fix here (sorry I'm not able to contribute for now).","@superarts Thanks for shining light on this issue and I agree that it might be possible to fix CocoaPods to address it. However, it is much more arguably an Xcode bug, in that its intermediate build hierarchy no longer supports multiple versions of the same named framework going to different destinations. This worked fine before version 10.2.  There's more detail in the comments above.","Another workaround way is to use Legacy Build System. So far, I can found ways to resolve it\r\n1. Use Legacy Build System\r\n2. If multiple targets depends on multiple subspecs, list all subspecs and shared across all targets\r\n3. Don't use subspecs, create new specs instead.\r\n\r\nThe problem with these ways\r\n1. Use Legacy Build System ~> Can be removed by Apple in future\r\n2. If multiple targets depends on multiple subspecs, list all subspecs and shared across all targets -> Redundant libraries for other targets, can increase App Size\r\n3. Don't use subspecs, create new specs instead. -> Only work with your specs.\r\n\r\nI also feel like it's Xcode bug. ","> Here's an update from my ongoing investigation:\r\n> \r\n> For subspecs from **dynamic frameworks** pods, there could have easily been load failures with the old build system depending on which subspec combination got copied into the app's Frameworks folder and which symbols are being used from which targets. For any workspace that ends up with different subspec combinations between an extension and the host app, it should be possible to make it fail at load time by calling methods from subspec combination that didn't get copied to the bundle. Therefore, it is arguable that the new archive failure is a good thing - although it would be much better for the build system to give the error - or at least a warning - in a regular build instead of waiting until archiving to expose it.\r\n> \r\n> For subspecs from **static frameworks** pods, regular builds with the old and new build systems should always work fine because the right frameworks are built into appropriately labeled directory and properly linked into the right build targets. It doesn't matter which frameworks are copied into the bundle since static frameworks are linked at build time and not needed at load time.\r\n> \r\n> The issue with the new build system is that the archiver wants to put all intermediate frameworks into the same directory instead of separate directories for each build target like the regular builder. I'm thinking about flushing this out a bit further and sending a Radar.\r\n> \r\n> ```\r\n> error: Multiple commands produce '\/Users\/paulbeusterien\/Library\/Developer\/Xcode\/DerivedData\/NewBuild-Extension-Subspec-gaeuwroouqpzwlfwgiqtmknxbqjt\/Build\/Intermediates.noindex\/ArchiveIntermediates\/NewBuild-Extension-Subspec\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GoogleUtilities.framework':\r\n> 1) Target 'GoogleUtilities-NSData+zlib' has create directory command with output '\/Users\/paulbeusterien\/Library\/Developer\/Xcode\/DerivedData\/NewBuild-Extension-Subspec-gaeuwroouqpzwlfwgiqtmknxbqjt\/Build\/Intermediates.noindex\/ArchiveIntermediates\/NewBuild-Extension-Subspec\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GoogleUtilities.framework'\r\n> 2) Target 'GoogleUtilities-Environment' has create directory command with output '\/Users\/paulbeusterien\/Library\/Developer\/Xcode\/DerivedData\/NewBuild-Extension-Subspec-gaeuwroouqpzwlfwgiqtmknxbqjt\/Build\/Intermediates.noindex\/ArchiveIntermediates\/NewBuild-Extension-Subspec\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GoogleUtilities.framework'\r\n> ```\r\n\r\nLet say we have this `Pod` file\r\n\r\n```\r\nplatform :ios, '9.0'\r\n\r\nuse_frameworks!\r\n\r\ntarget 'A' do\r\n  pod 'MyUIKit\/Button'\r\nend\r\n\r\ntarget 'B' do\r\n  pod 'MyUIKit\/Popup'\r\n\r\nend\r\n```\r\n\r\n@paulb777 May I ask why Xcode archiver need to create directory command for both `MyUIKit\/Button` and `MyUIKit\/Popup` framework even I only archive target 'A' ? And here target A and target B are not extension targets.","@lemanhtien I don't think there is a need. That's why I think it's an Xcode bug.","@paulb777 I tried to create 2 framework which has the same name, and embed into 2 different Targets in 1 project. It's still able to Archive successfully. \r\nI'm wondering if the issue comes from Cocopod instead of Xcode \ud83e\udd14 ","Well, I had the same issue \r\nThe error is shown below -\r\n\r\n> Multiple commands produce '\/Users\/ikjotsingh\/Library\/Developer\/Xcode\/DerivedData\/ServiceCore-dymywhldzbveayavtkrhbwezaxyt\/Build\/Intermediates.noindex\/ArchiveIntermediates\/ServiceCore\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GTMSessionFetcher.framework':\r\n> 1) Target 'GTMSessionFetcher-Core' has create directory command with output '\/Users\/ikjotsingh\/Library\/Developer\/Xcode\/DerivedData\/ServiceCore-dymywhldzbveayavtkrhbwezaxyt\/Build\/Intermediates.noindex\/ArchiveIntermediates\/ServiceCore\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GTMSessionFetcher.framework'\r\n> 2) Target 'GTMSessionFetcher.default-Core' has create directory command with output '\/Users\/ikjotsingh\/Library\/Developer\/Xcode\/DerivedData\/ServiceCore-dymywhldzbveayavtkrhbwezaxyt\/Build\/Intermediates.noindex\/ArchiveIntermediates\/ServiceCore\/IntermediateBuildFilesPath\/UninstalledProducts\/iphoneos\/GTMSessionFetcher.framework'\r\n\r\n\r\nI have the explanation and reason for this issue.\r\nSo `GTMSessionFetcher` is a depiendency for 2 frameworks i.e `Firebase\/Performance`  and `GoogleSignIn`  so XCode creates those dependencies twice without comparing and then gets confused having two commands for exactly same dependency while archiving i.e `GTMSessionFetcher`\r\nIt creates one as `GTMSessionFetcher.default-Core`  and other as `GTMSessionFetcher-Core`\r\n\r\n\r\nSolution - \r\n\r\nadd `pod 'GTMSessionFetcher'` (dependency which is common between 2 framework) to your main project podfile ;)\r\n\r\nI guess by adding this Xcode refer to the main project pod instead of the subSpecs of the frameworks.","> Hi there,\r\n> \r\n> I have fixes the issue with below code in my case.\r\n> \r\n> ```\r\n> platform :ios, '10.0'\r\n> use_frameworks!\r\n> \r\n> def google_utilites\r\n>   pod 'GoogleUtilities\/AppDelegateSwizzler'\r\n>   pod 'GoogleUtilities\/Environment'\r\n>   pod 'GoogleUtilities\/ISASwizzler'\r\n>   pod 'GoogleUtilities\/Logger'\r\n>   pod 'GoogleUtilities\/MethodSwizzler'\r\n>   pod 'GoogleUtilities\/NSData+zlib'\r\n>   pod 'GoogleUtilities\/Network'\r\n>   pod 'GoogleUtilities\/Reachability'\r\n>   pod 'GoogleUtilities\/UserDefaults'\r\n>   pod 'GTMSessionFetcher'\r\n> end\r\n> \r\n> target 'myApp' do\r\n> \r\n>   google_utilites\r\n> \r\n>   pod 'Firebase\/Auth'\r\n>   pod 'Firebase\/Database'\r\n>   pod 'Firebase\/Storage'\r\n>   pod 'Firebase\/Analytics'\r\n>   pod 'GoogleSignIn'\r\n> \r\n> end\r\n> \r\n> target 'shareExtension' do\r\n> \r\n>   google_utilites\r\n> \r\n>   pod 'Firebase\/Auth'\r\n>   pod 'Firebase\/Database'\r\n>   pod 'Firebase\/Storage'\r\n> \r\n> end\r\n> ```\r\n\r\nThank you @shinichiro-san you've saved me!\r\n\r\nWhat worked for me is:\r\n\r\n```ruby\r\nplatform :ios, '12.0'\r\nuse_frameworks!\r\ninhibit_all_warnings!\r\n\r\ntarget 'MyProject' do\r\n  pod 'GoogleUtilities'\r\n  pod 'Firebase\/Analytics'\r\n  pod 'Firebase\/Crashlytics'\r\n  pod 'Firebase\/Messaging'\r\n  # Other pods\r\nend\r\n\r\ntarget 'NotificationService' do\r\n  pod 'GoogleUtilities'\r\n  pod 'Firebase\/Messaging'\r\nend\r\n```\r\n\r\n","So, after reading all the specific solutions proposed above I managed to fix the issue in my special case and I believe that the general rule here is:\r\n\r\nFor each sub-pod that creates issues, for instance:\r\n```\r\nMultiple commands produce '\/...\/iphoneos\/my_pod_A.framework':\r\n1) Target 'my_pod_A.common' has create directory command with output '\/...\/my_pod_A.framework'\r\n2) Target 'my_pod_A.common-SubPodA-SubPodB' has create directory command with output '\/...\/my_pod_A.framework'\r\n```\r\nAdd an explicit dependency to every target, even if not really needed, like:\r\n\r\n```\r\npod 'my_pod_A',\r\npod 'my_pod_A\/SubPodA',\r\npod 'my_pod_A\/SubPodB',\r\n```\r\nThis solved the problem for me.","\u4ee5\u4e0a\u95ee\u9898\uff0c\u6211\u901a\u8fc7\u5982\u4e0b\u65b9\u6cd5\u89e3\u51b3\r\n```\r\nplatform :ios, '10.0'\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\n\r\nuse_frameworks!\r\ninhibit_all_warnings!\r\n\r\nabstract_target 'AhakidTarget' do\r\n\r\n  pod 'YYModel', '1.0.4'\r\n  pod 'HandyJSON','5.0.2'\r\n  pod 'Kingfisher\/SwiftUI', '5.15.7'\r\n  pod 'Moya', '14.0.0'\r\n  \r\n  target 'Ahakid' do\r\n\r\n    pod 'AFNetworking', '4.0.1'\r\n      \r\n  end\r\n\r\n  target 'WidgetExtension' do\r\n  \r\n    pod 'MBProgressHUD', '1.2.0'\r\n\r\n  end\r\n\r\n  target 'NotificationService' do\r\n\r\n    pod 'JPushExtension', '1.1.2'\r\n\r\n  end\r\n\r\nend\r\n```\r\n[\u53c2\u8003\u94fe\u63a5]https:\/\/guides.cocoapods.org\/using\/the-podfile.html","Same problem here! I use dynamic framework too! ","> So, after reading all the specific solutions proposed above I managed to fix the issue in my special case and I believe that the general rule here is:\r\n> \r\n> For each sub-pod that creates issues, for instance:\r\n> \r\n> ```\r\n> Multiple commands produce '\/...\/iphoneos\/my_pod_A.framework':\r\n> 1) Target 'my_pod_A.common' has create directory command with output '\/...\/my_pod_A.framework'\r\n> 2) Target 'my_pod_A.common-SubPodA-SubPodB' has create directory command with output '\/...\/my_pod_A.framework'\r\n> ```\r\n> \r\n> Add an explicit dependency to every target, even if not really needed, like:\r\n> \r\n> ```\r\n> pod 'my_pod_A',\r\n> pod 'my_pod_A\/SubPodA',\r\n> pod 'my_pod_A\/SubPodB',\r\n> ```\r\n> \r\n> This solved the problem for me.\r\n\r\nGreat Worked for me Thanks ","> \u4f60\u597d\u5440\uff0c\r\n> \r\n> \u5728\u6211\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u5df2\u7ecf\u89e3\u51b3\u4e86\u4ee5\u4e0b\u4ee3\u7801\u7684\u95ee\u9898\u3002\r\n> \r\n> ```\r\n> platform :ios, '10.0'\r\n> use_frameworks!\r\n> \r\n> def google_utilites\r\n>   pod 'GoogleUtilities\/AppDelegateSwizzler'\r\n>   pod 'GoogleUtilities\/Environment'\r\n>   pod 'GoogleUtilities\/ISASwizzler'\r\n>   pod 'GoogleUtilities\/Logger'\r\n>   pod 'GoogleUtilities\/MethodSwizzler'\r\n>   pod 'GoogleUtilities\/NSData+zlib'\r\n>   pod 'GoogleUtilities\/Network'\r\n>   pod 'GoogleUtilities\/Reachability'\r\n>   pod 'GoogleUtilities\/UserDefaults'\r\n>   pod 'GTMSessionFetcher'\r\n> end\r\n> \r\n> target 'myApp' do\r\n> \r\n>   google_utilites\r\n> \r\n>   pod 'Firebase\/Auth'\r\n>   pod 'Firebase\/Database'\r\n>   pod 'Firebase\/Storage'\r\n>   pod 'Firebase\/Analytics'\r\n>   pod 'GoogleSignIn'\r\n> \r\n> end\r\n> \r\n> target 'shareExtension' do\r\n> \r\n>   google_utilites\r\n> \r\n>   pod 'Firebase\/Auth'\r\n>   pod 'Firebase\/Database'\r\n>   pod 'Firebase\/Storage'\r\n> \r\n> end\r\n> ```\r\n\r\nThat works for me, thank you @shinichiro-san ","It is that Pods will try to resolve the version in each target.\r\nSo it will be error when try\r\n```\r\ntarget 'A' do\r\n  pod 'Firebase\/Analytics'\r\nend\r\ntarget 'B' do\r\n  pod 'Firebase\/Performance'\r\nend\r\n```\r\n*Performance and Analytics is depend on different googleUtilities lib.\r\nAlso error at \r\n```\r\ntarget 'B' do\r\n  pod 'Firebase\/Analytics'\r\n  target 'A' do\r\n    inherit! :search_paths\r\n    pod 'Firebase\/Performance'\r\n  end\r\nend\r\n```\r\nand do below will be ok.\r\n```\r\ntarget 'B' do\r\n  pod 'Firebase\/Performance'\r\n  pod 'Firebase\/Analytics'\r\n  target 'A' do\r\n    inherit! :search_paths\r\n    pod 'Firebase\/Performance'\r\n    pod 'Firebase\/Analytics'\r\n  end\r\nend\r\n```\r\n","@paulb777 I managed to archive successfully after changing the product name of the subspec target while keeping the module name the same for the imports.\r\n\r\n![Screen_Shot_2021-08-28_at_12_43_19_AM](https:\/\/user-images.githubusercontent.com\/310370\/131191801-2210186b-50dc-42fe-b9c9-1a5be7f49693.png)\r\n\r\nperhaps we should do that for subspec targets? We would need to update the linker flags too but that seems to be fine and working.\r\n","@dnkoutso Good find! That sounds promising.","This SO response seems to provide clarify on what module name, product name and executable name mean https:\/\/stackoverflow.com\/a\/57517400\/16155746","@dnkoutso I've tried ur solution w\/out success, even though it appears to be part of the solution.\r\n\r\nMy configuration (simplified):\r\n- Application\r\n- Two Extension\r\n\r\n- Application use `appAuth` dependency for authentification, using built-in interfaces logics\r\n- Extensions use `appAuth\/Core` dependency minimum required for authentifications (tokens)\r\n\r\nNaturally I've been running into this problem and for now my solution is to use the `legacy build system` which isn't ideal and might be a issue once it's remove from Xcode.\r\n\r\nI've been trying ur solution, but I think we should setup and example project to share this solution if it works.\r\n\r\n-I've updated the `product_name` only, the \"multiple target\" warning disappear but the project doesn't build anymore \ud83d\udd34 \r\n-> changing the `product_name` as u mentioned in the last comment, change the directory stucture from `AppAuth.framework` to `AppAuthCore.framework`\r\n\r\n- Meaning I had to updated the `pods` configuration for my targets, to point to the correct updated AppAuth-Core\/AppAuthCore.framework \ud83d\udd34 \r\n\r\nNow building seems to work but at the last moment the `module` isn't found during import:\r\n![image](https:\/\/user-images.githubusercontent.com\/442276\/134529324-91d08deb-20e0-4078-aed1-8968e0d4e15d.png)\r\n\r\n- I've also played w\/ the `info.plist` of the pods target, making sure everything match the intended module name, `AppAuth` which seems correct inside the `framework`:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/442276\/134529621-0be98e94-6b62-44ac-a76c-c46ad297f5bf.png)\r\n\r\nI'm not sure I can spare much more time on this today, I'll try and make a example project and see if we can make it work there.\r\n\r\n\r\n","So, after three years i'll go out. The SPM now supports any what i'm needed. Bye bye cocoapods.","@lifely thanks a lot for the write up. I will need to find time to research this further! If you have a sample app that showcases your problem along with the fixes you had to do maybe I can investigate a more robust fix.\r\n\r\n@nikolay-kapustin good bye!","@dnkoutso we definitely need a clean sample app w\/\r\n\r\n- one app (target)\r\n- on extension (target)\r\n- private pos w\/ multiple subpecs in app target\r\n- private pod w\/ single subspec in extension target\r\n- public pod w\/ default in app target (appAuth eg)\r\n- public pod w\/ configured spec in extension target\r\n\r\nI think theses will exposes all this issue possible configurations.\r\nWill try to find time and make a small repo w\/ this, we can make branch poc \ud83d\udc4c ","thank you again! this is great and can fix quite a few issues with subspecs, especially when different set of subspecs are used across different targets.","> \u26a0\ufe0f this resolve the warnings\r\n> allowing you to developer in both legacy or new build system, on simulator and w\/ preview w\/out warnings.\r\n> However it still produce an error while archiving on the new build system, I already have ci using old-system in cmd\r\n\r\nHey @dnkoutso,\r\n\r\nI took some time to work on this, this afternoon, and I might have found a fix, it's weird to me so maybe u can share some insights.\r\n\r\nI don't really have a sample app because the fix seems simple, even though I work on one so I could still push it somewhere.\r\n\r\nWhat I tried:\r\n- Playing w\/ app + extension and `appAuth` & `appAuth\/Core` in a cocoapods project \/ workspace\r\n- Playing w\/ app + extension and the same framework generated by cocoapods:\r\n   - 'AppAuth.framework' configured as 'pod 'AppAuth'\r\n   - 'AppAuth.framework' configured as 'pod 'AppAuth\/Core'\r\n\r\nI've reused the build project from the generated framework before trying any change\r\n\r\nI've also tried the same thing but by having different `Product_name` and `product_module_name`\r\nthis was my first tests but it appears this is impossible, I've found multiple issue on stack overflow w\/ no results:\r\n>https:\/\/stackoverflow.com\/questions\/64066158\/xcode-change-dynamic-framework-product-module-name\r\n> https:\/\/stackoverflow.com\/questions\/57304255\/how-to-create-project-with-different-product-module-name-and-product-name-an\r\n\r\nIt might have worked in your previous solution, like it seems to did to me when I tried it manually in a project.\r\nHaving both 'AppAuth.Framework' and a 'AppAuthCore.framework' both w\/ a module name of 'AppAuth'.\r\nXcode was actually using 'AppAuth.Framework' while building the extension, even though I'm specifying to link w\/ AppAuthCore.\r\n\r\nBecause the `FRAMEWORK_SEARCH_PATH` had access to both. 'AppAuth' and 'AppAuthCore' which made this seems work.\r\n\r\nSo I pushed, I tried `CONFIGURATION_BUILD_DIR` for a while but it amounted to nothing, then I though about the warning again:\r\n\r\n> Multiple targets match implicit dependency for linker flags '-framework AppAuth'. Consider adding an explicit dependency on the intended target to resolve this ambiguity. (in target 'SampleApp' from project 'SampleApp')\r\n\r\nThe words `implicit dependency` & `explicit dependency`, made me stop. is there a way to specify a `explicit dependency` on the framework.\r\n\r\nI though maybe settings `-framework 'AppAuth\/AppAuth'` and `-framework 'AppAuth-Core\/AppAuth`,\r\nthe warning went away but then we get a warning that no such framework exists.\r\n\r\nI started comparing w\/ the working manual sample project I had above, two folder w\/ two different `AppAuth.framework`.\r\nEach target have the correct `Framework_SEARCH_PATH` loading only each framework, cocoapods does the same.\r\n\r\nBut what I didn't find in the `sample project` is no `OTHER_LDFLAGS` definitions for the framework. Bing bing \ud83d\udfe2 \r\n\r\n> I've then removed the `-framework AppAuth` reference from any `OTHER_LDFLAGS` of the application and extension target and everything seems to work.\r\n\r\nnow I haven't taken some time to check how I could achieve this through my podfile install directy but seems we have an awnser at least.","You can make archiving to work, by using `install` options for the duplicated frameworks.\r\n\r\n- setting `SKIP_INSTALL` to `NO`\r\n- setting `INSTALL_PATH` to something u want, I've left it as `library\/frameworks` and it worked\r\n\r\nHowever, u will probably need to use `command line` tools to distribute ur application because the `xcarchive` will then contains both the application and the frameworks.\r\n\r\nMaking Xcode not providing options for distributing the application in the archive.\r\nYou can make the Xcode organiser provide theses distribute option by editing the xcarchive plist and adding a `ApplicationProperties` key as follow:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE plist PUBLIC \"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\" \"http:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\">\r\n<plist version=\"1.0\">\r\n<dict>\r\n\t<key>ApplicationPath<\/key>\r\n\t<string>Applications\/Application.app<\/string>\r\n\t<key>Architectures<\/key>\r\n\t<array>\r\n\t\t<string>arm64<\/string>\r\n\t<\/array>\r\n\t<key>CFBundleIdentifier<\/key>\r\n\t<string>net.domain.app<\/string>\r\n\t<key>CFBundleShortVersionString<\/key>\r\n\t<string>0.0.1<\/string>\r\n\t<key>CFBundleVersion<\/key>\r\n\t<string>13<\/string>\r\n\t<key>SigningIdentity<\/key>\r\n\t<string>`TO COMPLETE~<\/string>\r\n\t<key>Team<\/key>\r\n\t<string>`TO COMPLETE`<\/string>\r\n<\/dict>\r\n<\/plist>\r\n```","I just want to point out that I've found a way to easily reproduce the issue with a very minimal project and `Podfile`. The key to reproduce the issue is to \r\n- define **two** targets with different platform (`iOS` and `tvOS`),\r\n- make sure to tells `Cocoapods` to use **dynamic framework** (`use_frameworks!`), and\r\n- use the **New build system**\r\n\r\n```\r\nuse_frameworks!\r\nworkspace 'App.xcworkspace'\r\n\r\ndef shared_pods\r\n  pod 'SnapKit', '~> 5.0'\r\nend\r\n\r\ntarget 'App' do\r\n  platform :ios, '13.0'\r\n  shared_pods\r\nend\r\n\r\ntarget 'App-tvOS' do\r\n  platform :tvos, '13.0'\r\n  shared_pods\r\nend\r\n```\r\n\r\nThe resulting output when building an archive produce the same error:\r\n\r\n```\r\nerror: Multiple commands produce '\/Users\/pblondin\/Library\/Developer\/Xcode\/DerivedData\/App-ctdwtddrowlhmwdhetnotbvajwhr\/Build\/Intermediates.noindex\/ArchiveIntermediates\/App-tvOS\/IntermediateBuildFilesPath\/UninstalledProducts\/appletvos\/SnapKit.framework':\r\n1) Target 'SnapKit-iOS' has create directory command with output '\/Users\/pblondin\/Library\/Developer\/Xcode\/DerivedData\/App-ctdwtddrowlhmwdhetnotbvajwhr\/Build\/Intermediates.noindex\/ArchiveIntermediates\/App-tvOS\/IntermediateBuildFilesPath\/UninstalledProducts\/appletvos\/SnapKit.framework'\r\n2) Target 'SnapKit-tvOS' has create directory command with output '\/Users\/pblondin\/Library\/Developer\/Xcode\/DerivedData\/App-ctdwtddrowlhmwdhetnotbvajwhr\/Build\/Intermediates.noindex\/ArchiveIntermediates\/App-tvOS\/IntermediateBuildFilesPath\/UninstalledProducts\/appletvos\/SnapKit.framework'\r\n```\r\n\r\nI'm currently trying to fix this with the aforementioned workarounds, but so far none of them is working. I have yet to try the workaround suggested by @lifely. I will keep you posted.\r\n\r\nIf needed, I can provide with a sample project if that would be any help. (cc @dnkoutso)","@pblondin My understanding was that the subspec combination problem and inability to support multi-platform Podfiles are two different issues.","@paulb777 absolutely! I will try to find the corresponding issue about the inability to **support multi-platform** Podfiles and cross-reference my findings.\r\n\r\nWith that being said, I can testify that the workaround mentioned by @lifely seems to work, at least for my issue.\r\n\r\nIndeed, when setting `SKIP_INSTALL` to `NO` the archive is working. I would recommend that you only apply the setting to `RELEASE`.\r\n\r\n![Screen Shot 2021-10-13 at 9 30 57 PM](https:\/\/user-images.githubusercontent.com\/1045929\/137235443-bdccab76-66f6-4449-b042-1110acae4e67.png)\r\n\r\nThe other part that @lifely, mention about `INSTALL_PATH` doesn't seem to be needed. The default value is  `$(LOCAL_LIBRARY_DIR)\/Frameworks` which resolve to `Library\/Frameworks` anyway.\r\n\r\nIt made a lot of sense when you look at the [doc](https:\/\/developer.apple.com\/library\/archive\/documentation\/DeveloperTools\/Reference\/XcodeBuildSettingRef\/1-Build_Setting_Reference\/build_setting_ref.html#\/\/apple_ref\/doc\/uid\/TP40003931-CH3-SW36).\r\n\r\n> Boolean value. Specifies whether to place the product at the location indicated by DSTROOT or the uninstalled products directory inside the directory indicated by TARGET_TEMP_DIR.\r\n>\r\n> YES: When $DEPLOYMENT_LOCATION = YES, the product is placed in $TARGET_TEMP_DIR\/UninstalledProducts.\r\n> NO: The product is placed in $DSTROOT.\r\n\r\nwhich is exactly what occurred if you pay attention to the create directory command output `IntermediateBuildFilesPath\/UninstalledProducts\/`.\r\n\r\n\r\n","```\r\ntarget 'SDWebImageExample' do\r\n  # Comment the next line if you don't want to use dynamic frameworks\r\n  use_frameworks!\r\n\r\n  # Pods for SDWebImageExample\r\n  pod 'SDWebImage\/Core'\r\n  pod 'SDWebImage\/GIF'\r\n\r\nend\r\n\r\ntarget 'SDWebImageExample_SG' do\r\n  # Comment the next line if you don't want to use dynamic frameworks\r\n  use_frameworks!\r\n\r\n  # Pods for SDWebImageExample_SG\r\n  pod 'SDWebImage\/Core'\r\n  \r\nend\r\n```\r\n\r\n## before archiving SDWebImageExample\r\n**delete** the target **SDWebImage-Core** in `Pods` project.\r\n![\u622a\u5c4f2021-10-25 \u4e0b\u53483 36 52](https:\/\/user-images.githubusercontent.com\/11863087\/138653900-da036f14-b46b-4f93-a6b4-375b3b23779b.png)\r\n\r\nOr just **delete** the dependency in `Pods\/Pods.xcodeproj\/project.pbxproj`.\r\n![\u622a\u5c4f2021-10-25 \u4e0b\u53483 37 39](https:\/\/user-images.githubusercontent.com\/11863087\/138654025-23ae13ab-6c24-49ed-ba42-3c757e51be5a.png)\r\n\r\n## after archiving SDWebImageExample\r\nreset the **delete** action.\r\n\r\n\r\n\r\n\r\n","Any news about that, is there a workaround ? I tried all previous workaround, but I still have the same problem.","@Dragna try replacing `use_frameworks!` with `use_modular_headers!`. I managed to make Archiving work with that. The problem with that is that my build times are way worse.","Hello,\r\nIs anyone got this error. Because of this my app is not build. It says Build failed.\r\n\r\nmacOS Monterey\r\nXcode Version 13.1 \r\n\r\nMultiple targets match implicit dependency for linker flag '-lRNPermissions'. Consider adding an explicit dependency on the intended target to resolve this ambiguity. (in target 'mobile' from project 'mobile')","@dlakmalb  check both my answer above, I\u2019m using it for a few weeks and it\u2019s been working.\r\n\r\nI\u2019ve also worked out a fix for archive export w\/ fast lane that I should post soon and will link back here.\r\n Maybe I\u2019ll try on working on a fix directly in the podfile. I\u2019m still modifying the workspace manually at the moment.\r\n\r\ngood luck","Here's my solution for a project that has this issue with 2 dependent libraries being developed together in a single repo. Hopefully it helps figure out what the ultimate cause is.\r\n\r\n---\r\n\r\n**My Setup**\r\n\r\nThe Podfile setup for the development workspace is like so:\r\n\r\n```\r\ntarget 'DevApp' do\r\n    project 'DevApp\/DevApp'\r\n\r\n    pod 'SDKOne', :path => 'SDKOne\/'\r\n    pod 'SDKTwo', :path => 'SDKTwo\/'\r\nend\r\n\r\ntarget 'SDKOne' do\r\n    project 'SDKOne\/SDKOne'\r\n\r\n    pod 'DependencyA'\r\n    \r\n    abstract_target 'Tests' do\r\n      ...\r\n      \r\n      target 'SDKOneUnitTests' do\r\n      end\r\n      \r\n      target 'SDKOneIntegrationTests' do\r\n          # Integration specific deps\r\n      end\r\n    end\r\nend\r\n\r\ntarget 'SDKTwo' do\r\n    project 'SDKTwo\/SDKTwo'\r\n\r\n    pod 'DependencyB', '~> 5.11'\r\n    pod 'SDKOne', :path => 'SDKOne\/'\r\n    \r\n    target 'SDKTwoUnitTests' do\r\n      ...\r\n    end\r\nend\r\n```\r\n\r\n**Identifying Cause**\r\n\r\nThis all worked fine with the Legacy Build system but had the same issues as described above when building the Dev App during development. The actual build error was `Module 'DependencyA' not found`, but I identified as the same issue via the multiple targets warning at the start of the build log:\r\n\r\n```\r\nMultiple targets match implicit dependency for linker flags '-framework SDKOne'. Consider adding an explicit dependency on the intended target to resolve this ambiguity. (in target 'DemoApp' from project 'DemoApp')\r\nTarget 'SDKOne' (in project 'SDKOne')\r\nTarget 'SDKOne' (in project 'Pods')\r\n```\r\n\r\nIt can also be confirmed by inspecting the build log and confirming that SDKOne is getting built multiple times, from different targets.\r\n\r\n**Solution**\r\n\r\nFollowing @lifely comments above, I confirmed that the SDK libraries are being added incorrectly to the `Pods-DevApp.xcconfig` file's `OTHER_LDFLAGS` param, and that removing there allows builds to work correctly with the new build system.\r\n\r\nI've added a `post_install` step to remove these from the generated DevApp `xcconfig` files automatically. It looks like so (please forgive my terrible Ruby :D):\r\n\r\n```\r\ninstaller.pods_project.targets.each do |target|\r\n  if target.name == \"Pods-DevApp\"\r\n    target.build_configurations.each do |config|\r\n      if config.base_configuration_reference && config.base_configuration_reference.path\r\n        config_file = File.read \"Pods\/Target Support Files\/Pods-DevApp\/#{config.base_configuration_reference.path}\"\r\n        config_file = config_file.sub '-framework \"SDKOne\"', ''\r\n        config_file = config_file.sub '-framework \"SDKTwo\"', ''\r\n        \r\n        file = File.open(\"Pods\/Target Support Files\/Pods-DevApp\/#{config.base_configuration_reference.path}\", 'w')\r\n        file.write config_file\r\n        file.close\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n","\u8c22\u8c22\u60a8\uff0c\u6587\u4ef6 \u738b\u9526\u53d1 \u5df2\u6536\u5230\u3002","> @paulb777 absolutely! I will try to find the corresponding issue about the inability to **support multi-platform** Podfiles and cross-reference my findings.\r\n> \r\n> With that being said, I can testify that the workaround mentioned by @lifely seems to work, at least for my issue.\r\n> \r\n> Indeed, when setting `SKIP_INSTALL` to `NO` the archive is working. I would recommend that you only apply the setting to `RELEASE`.\r\n> \r\n> ![Screen Shot 2021-10-13 at 9 30 57 PM](https:\/\/user-images.githubusercontent.com\/1045929\/137235443-bdccab76-66f6-4449-b042-1110acae4e67.png)\r\n> \r\n> The other part that @lifely, mention about `INSTALL_PATH` doesn't seem to be needed. The default value is `$(LOCAL_LIBRARY_DIR)\/Frameworks` which resolve to `Library\/Frameworks` anyway.\r\n> \r\n> It made a lot of sense when you look at the [doc](https:\/\/developer.apple.com\/library\/archive\/documentation\/DeveloperTools\/Reference\/XcodeBuildSettingRef\/1-Build_Setting_Reference\/build_setting_ref.html#\/\/apple_ref\/doc\/uid\/TP40003931-CH3-SW36).\r\n> \r\n> > Boolean value. Specifies whether to place the product at the location indicated by DSTROOT or the uninstalled products directory inside the directory indicated by TARGET_TEMP_DIR.\r\n> > YES: When $DEPLOYMENT_LOCATION = YES, the product is placed in $TARGET_TEMP_DIR\/UninstalledProducts.\r\n> > NO: The product is placed in $DSTROOT.\r\n> \r\n> which is exactly what occurred if you pay attention to the create directory command output `IntermediateBuildFilesPath\/UninstalledProducts\/`.\r\n\r\nHmmm, the Archive seems to work but leading to Generic Xcode Archive which can't be exported. Any other workaround?","\u8c22\u8c22\u60a8\uff0c\u6587\u4ef6 \u738b\u9526\u53d1 \u5df2\u6536\u5230\u3002","> to Generic Xcode Archive which can't be exported\r\n\r\nIt can be exported by editing the archive plist as mentioned in my post above.\r\nI have a script\/fix to edit the plist in fastlane I might share soon\r\n\r\ncheck a working archive plist to compare what\u2019s needed","> > to Generic Xcode Archive which can't be exported\r\n> \r\n> It can be exported by editing the archive plist as mentioned in my post above. I have a script\/fix to edit the plist in fastlane I might share soon\r\n> \r\n> check a working archive plist to compare what\u2019s needed\r\n\r\nIt would be great if you could share the script! ","@rizwan95 working on this and cocoapods plug-in soon, need cleanup and will be shared on both fastlane and here.","> @rizwan95 working on this and cocoapods plug-in soon, need cleanup and will be shared on both fastlane and here.\n\n\nThanks a lot!!! ","@rizwan95 or others: You can fin the `Fastlane` fix here: \r\n>https:\/\/gist.github.com\/lifely\/7f8b68bb3f1fed31da8c1a8aff93ae6b\r\n\r\nIt's override `Fastlane` `Gym::Runner` `verify_archive` function, fixing the archive before any export is done.\r\nYou can drop it at the top of your `Fastlane` file as is. You might need to adds the required dependencies.\r\n","> @rizwan95 or others: You can fin the `Fastlane` fix here:\r\n> \r\n> > https:\/\/gist.github.com\/lifely\/7f8b68bb3f1fed31da8c1a8aff93ae6b\r\n> \r\n> It's override `Fastlane` `Gym::Runner` `verify_archive` function, fixing the archive before any export is done. You can drop it at the top of your `Fastlane` file as is. You might need to adds the required dependencies.\r\n\r\nThank you so much! I will try the fix asap","> @rizwan95 or others: You can fin the `Fastlane` fix here:\r\n> \r\n> > https:\/\/gist.github.com\/lifely\/7f8b68bb3f1fed31da8c1a8aff93ae6b\r\n> \r\n> It's override `Fastlane` `Gym::Runner` `verify_archive` function, fixing the archive before any export is done. You can drop it at the top of your `Fastlane` file as is. You might need to adds the required dependencies.\r\n\r\n@lifely I tried your script but it is not working. I am getting the following error while trying to distribute. Not sure what I am missing.\r\n\r\n`2022-01-24 16:31:55 +0000 [MT] Step failed: <IDEDistributionPackagingStep: 0x7f957787a200>: Error Domain=DVTMachOErrorDomain Code=5 \"Executable Not Found\" UserInfo={NSLocalizedDescription=Executable Not Found, NSLocalizedRecoverySuggestion=\"{my_path}\" is not a valid path to an executable file. Please rebuild the project to ensure that all required executables are created. Check your project settings to ensure that a valid executable will be built.}\r\n`\r\n\r\nIf you could give a cocoapods-plugin I could try that way as well. ","@rizwan95 \r\n\r\n> @lifely I tried your script but it is not working. I am getting the following error while trying to distribute. Not sure what I am missing.\r\n\r\nIt seems it doesn't found the correct path of the binary.\r\n> NSLocalizedRecoverySuggestion=\"{my_path}\" is not a valid path to an executable file.\r\n\r\ncan you check or upload the archive.plist here, what's the path given in the applicationProperti attribute ? \r\n\r\n","I've run into this same problem, albeit from a slightly different perspective. I'm developing a framework, and have two versions (`beta` and `release`) of a demonstration app that use the framework. Both pull in some third-party dependencies via CocoaPods.\r\n\r\n* The `beta` app uses the framework I'm developing in a git submodule, embeds the framework's project file, and adds the framework to the **Frameworks, Libraries, and Embedded Content**. \r\n<img width=\"642\" alt=\"beta version\" src=\"https:\/\/user-images.githubusercontent.com\/708510\/153692291-556f6276-01b4-4386-9c78-cf20db9d9b4e.png\">\r\n\r\n* The `release` app gets the _most recently-released pod_ of the framework:\r\n<img width=\"604\" alt=\"release version\" src=\"https:\/\/user-images.githubusercontent.com\/708510\/153692290-050b31e5-3f96-4670-b54f-2b8d9fab581a.png\">\r\n\r\nThe `Podfile`:\r\n\r\n```\r\nplatform :ios, '12.0'\r\nuse_frameworks!\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\n\r\ndef default_pods\r\n  pod 'Firebase\/Crashlytics'\r\n  pod 'RealmSwift', '~> 10.19.0'\r\nend\r\n\r\ntarget 'release' do\r\n  pod 'Foo', '3.3.1'\r\n  default_pods\r\nend\r\n\r\ntarget 'beta' do\r\n  default_pods\r\nend\r\n```\r\n\r\nNote that the `Foo` framework is _not_ in the `beta` target's list of dependencies. I don't _want_ to use Swift Package Manager for this, because our framework's repo is _enormous_ (long story), and SPM takes several minutes to resolve packages. Perhaps Carthage would be a decent compromise.","I had the same problem and solved it like this: Add the problematic package EXPLICITLY for EACH target.\r\n\r\nLet's say the error message complains about 'GTMSessionFetcher'. The likely reason is that you have multiple targets that have pods that are dependent on GTMSessionFetcher. The problem is solved if you add:\r\n\r\n  pod 'GTMSessionFetcher'\r\n\r\nTo each target. \r\n","> \r\n\r\n@winstonschen I am not sure if this solution is right or wrong but it works!","I am getting this error as well, xcode v13.31 on a project I 'inherited'. SDWebImage-Core-GIF and SDWebImage.default-gif both create the SDWebImage.framework, stopping me from archiving.\r\n\r\nI read through all the replies but I didn't manage to make it work with any of the solutions proposed.\r\nI have tried explicitly adding dependencies in the podfile for each of the two targets, with variations of SDWebImage, SDWebImage\/Core, etc but no luck.\r\n\r\nAnyone got SDWebImage to work?","\u8c22\u8c22\u60a8\uff0c\u6587\u4ef6 \u738b\u9526\u53d1 \u5df2\u6536\u5230\u3002","Happy New Year! 2023, issue still there btw...","\u8c22\u8c22\u60a8\uff0c\u6587\u4ef6 \u738b\u9526\u53d1 \u5df2\u6536\u5230\u3002","I got this error in my Flutter 3.3 app on iOS after adding Firebase Analytics & Performance. The only way to fix it was in [this previous answer](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8206#issuecomment-696754566): Adding `pod 'GoogleUtilities'` both in the `target 'Runner' do` and the `target 'ImageNotification' do`sections. Thank you, @0xMarK!","> Hi there,\r\n> \r\n> I have fixes the issue with below code in my case.\r\n> \r\n> ```\r\n> platform :ios, '10.0'\r\n> use_frameworks!\r\n> \r\n> def google_utilites\r\n>   pod 'GoogleUtilities\/AppDelegateSwizzler'\r\n>   pod 'GoogleUtilities\/Environment'\r\n>   pod 'GoogleUtilities\/ISASwizzler'\r\n>   pod 'GoogleUtilities\/Logger'\r\n>   pod 'GoogleUtilities\/MethodSwizzler'\r\n>   pod 'GoogleUtilities\/NSData+zlib'\r\n>   pod 'GoogleUtilities\/Network'\r\n>   pod 'GoogleUtilities\/Reachability'\r\n>   pod 'GoogleUtilities\/UserDefaults'\r\n>   pod 'GTMSessionFetcher'\r\n> end\r\n> \r\n> target 'myApp' do\r\n> \r\n>   google_utilites\r\n> \r\n>   pod 'Firebase\/Auth'\r\n>   pod 'Firebase\/Database'\r\n>   pod 'Firebase\/Storage'\r\n>   pod 'Firebase\/Analytics'\r\n>   pod 'GoogleSignIn'\r\n> \r\n> end\r\n> \r\n> target 'shareExtension' do\r\n> \r\n>   google_utilites\r\n> \r\n>   pod 'Firebase\/Auth'\r\n>   pod 'Firebase\/Database'\r\n>   pod 'Firebase\/Storage'\r\n> \r\n> end\r\n> ```\r\n\r\nnicely done!!","> I got this error in my Flutter 3.3 app on iOS after adding Firebase Analytics & Performance. The only way to fix it was in [this previous answer](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8206#issuecomment-696754566): Adding `pod 'GoogleUtilities'` both in the `target 'Runner' do` and the `target 'ImageNotification' do`sections. Thank you, @0xMarK!\r\n\r\nIn my case, this helped me! Thanks!\r\n","Maybe something worth noting.. \r\n\r\nWhen i add this `ImageNotification` as a new target, it sets the deployment target to the latest available version. Now in my case the `platform :ios, '14.0'` in my pod file and the `ImageNotification` had `17.2`, now the issue appeared with the duplications, i also noted that it seems to create duplicates with the latest deployment target for other pods.\r\n\r\nI set the deployment target both to 14.0, and tried a few things but this all didn't made the fix, other than duplicating the google utilities in both targets.\r\n\r\nBut maybe a hint to understand why it creates duplicate pods. idk."],"labels":["t2:defect","s2:confirmed"]},{"title":"Can pod search show spec repo's name?","body":"Currently(1.5.3) which repo contain the spec is not clear.","comments":["`pod spec cat` also has the same problem.","Don't know from the top of my head but this could be an easy enhancement.","@CodeLife2012 do you mean which spec repo or which repo that contains the source code? ","@amorde Which spec repo contain the spec.","Gotcha. I like the idea, but I often use the result of `pod spec which` in another unix command, and this would prevent that use case. Ex. \r\n```\r\nless `pod spec which Alamofire`\r\n```\r\n\r\nSide note, I can't seem to do `pod spec which Alamofire | less` or `pod spec which | cat` which is odd"],"labels":["t1:enhancement","d1:easy","help wanted"]},{"title":"Feature Request: Add option to `pod install` to fail if any warnings are emitted","body":"When doing a pod install, I often get warnings like the following\r\n```\r\nPod installation complete! There are 33 dependencies from the Podfile and 63 total pods installed.\r\n\r\n[!] `<PBXResourcesBuildPhase UUID=`2E14AAE21E7C267E00C2D465`>` attempted to initialize an object with an unknown UUID. `1A2F35A41F28EE0100BC1A6D` for attribute: `files`. This can be the result of a merge and  the unknown UUID is being discarded.\r\n\r\n[!] `<PBXResourcesBuildPhase UUID=`2E14AAE21E7C267E00C2D465`>` attempted to initialize an object with an unknown UUID. `2F062F561F54828700588292` for attribute: `files`. This can be the result of a merge and  the unknown UUID is being discarded.\r\n```\r\n\r\nThis is often the result of a bad merge during development. It would be nice if I could make `pod install` fail if warnings like this come up, so my dev teams can correct them immediately.","comments":["Sure I think its a fairly easy enhancement and starter task for anyone who wants to contribute!","If anyone else wants a quick workaround for their CI purposes, try this\r\n\r\n```bash\r\npod install 2>&1 | tee pod-install-output.txt\r\nif (grep -q '\\[!\\]' pod-install-output.txt); then\r\n    echo \"'pod install' finished with warnings! \ud83d\ude22\"\r\n    exit 1\r\nfi\r\n```"],"labels":["t1:enhancement","d1:easy","help wanted","s7:workaround available"]},{"title":"Xcode 10 new build system makes asset catalog invalid specified by podspec's`resource(s)`","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: http:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n\u2139 Please replace these two lines with what you did.  \r\nXcode 10 new build system, CocoaPods 1.5.3.\r\nPrivate pod (named Pod1), podspec: s.resources = ['Pod1\/Assets\/*'], this folder includes a asset catalog(images.xcassets).\r\nPod install and compile\r\n\r\n## What did you expect to happen?\r\nimage in Pod1's images.xcassets do not show in UI by using -[UIImage imageNamed:] with new build system\r\n\r\n## What happened instead?\r\n- images not show.\r\n- images in pod's images.assets not in Asset.car in .app\r\n- build log: \r\n```\r\nShowing All Messages\r\n:-1: ignoring duplicated output file: '\/Users\/ooops\/Library\/Developer\/Xcode\/DerivedData\/Example-aavrswxzmgwwppbxcwetebxamdir\/Build\/Products\/Debug-iphonesimulator\/Example.app\/Assets.car' (in target 'Example')\r\n```\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.2.7p470 (2017-03-28 revision 58194) [x86_64-darwin17]\r\n    RubyGems : 2.6.14\r\n        Host : Mac OS X 10.14 (18A384a)\r\n       Xcode : 10.0 (10A255)\r\n         Git : git version 2.19.0\r\nRuby lib dir : \/Users\/ooops\/.rvm\/rubies\/ruby-2.2.7\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 29c32347b0e16c19f1f2b438980959b5240bcc48\r\n               sankuai-binaryspecs - ssh:\/\/git@git.sankuai.com\/ios\/binaryspecs.git @ 5c5f950f2d3697f524280a4d7bcb3dee485ba9ca\r\n               sankuai-bizapp-specs - ssh:\/\/git@git.sankuai.com\/sjst\/bizapp-specs.git @ f4413e94a43dc0539f11d4d453bdd09a5710d370\r\n               sankuai-specs - ssh:\/\/git@git.sankuai.com\/ios\/specs.git @ 33e04c7093977188ea0944da9f9a5f6582957c8e\r\n               sankuai-specs-1 - ssh:\/\/git@git.sankuai.com\/wm\/specs.git @ dbee903fe0a3627de127fda74117f76338db224f\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/ooops\/.rvm\/gems\/ruby-2.2.7\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\nplatform :ios, '9.0'\r\n\r\ntarget 'Example' do\r\n  # Uncomment the next line if you're using Swift or would like to use dynamic frameworks\r\n  # use_frameworks!\r\n\r\n  # Pods for Example\r\n  pod 'Pod1', :path => '..\/Pod1'\r\n  pod 'Pod2', :path => '..\/Pod2'\r\n\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\n[cocoapods-resources.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/2407906\/cocoapods-resources.zip)\r\nI didn't show image in demo app, just open the build artifact and show package content of .app to see if Asset.car contains the image in Pod1\/Assets\/images.xcassets\r\n\r\n## Investigation\r\n\r\nI have read the [Build System Release Notes for Xcode 10](https:\/\/developer.apple.com\/documentation\/xcode_release_notes\/xcode_10_release_notes\/build_system_release_notes_for_xcode_10), it said\r\n> Targets which have multiple asset catalogs that aren't in the same build phase may produce an error regarding a \"duplicate output file\". (39810274)\r\n>\r\n>Workaround: Ensure that all asset catalogs are processed by the same build phase in the target.\r\n\r\n\r\nThe problem is I don't know how to **ensure all asset catalogs are processed in same build phase for the target**.\r\nAny advice or guidance would be greatly appreciated.","comments":["I am having similar issue too. clean and rebuild will include all assets. but when I re-run the project, Assets.car will be empty, recompiled without assets from pods. It seems the \"re-run\" doesn't copy the assets from pods. \r\n\r\nI had to switch back to legacy build system on Xcode 10. Please fix this. ","I havent verified but this might be the same issue as this https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8073\r\n\r\nWorth trying master to see if it fixes it and use:\r\n```\r\ninstall! 'cocoapods', :disable_input_output_paths => true\r\n```\r\n\r\nOther than that I need to find time to investigate this so I am uncertain yet if its a CocoaPods issue or an Xcode 10 new build system issue.","Meanwhile investigation you can you can use a work arounds : using the Xcode Legacy Build System and not the Xcode 10 new build system.\r\n\r\nXcode \/ File \/ Workspace Settings \/ Build system \/ select \"Legacy Build System\"\r\n\r\n<img width=\"590\" alt=\"capture d ecran 2018-09-25 a 11 04 14\" src=\"https:\/\/user-images.githubusercontent.com\/587505\/46004573-86ea9680-c0b3-11e8-91a9-e1335635e71d.png\">\r\n","@samirGuerdah Thanks for your workaround. I have already known this way can make it work. But I also hope this issue can be solved when using new build system.","Uncertain yet if its a CocoaPods bug itself or new build system bug. It appears that switching to legacy makes it work for folks. I haven't had the time to investigate it though.","@dnkoutso  Remind","@ooopscc there is no specific time an issue will be dealt with. This is mostly handled by free time of a few folks. If you need this faster I highly recommend to investigate the sources, otherwise I cannot provide a time frame sorry.","It is ok to leave it alone for now, because I can use legacy build system. I post this issue not asking for workaround, I already know it. I think it\u2019s not compatible with new build system, just solve it whenever it\u2019s convenient for you. Thanks.","Trying to investigate this issue. Found that warning is fixed by removing input\/output paths (or using related install option). But assets are still not present on incremental builds just like @ansonbtl described.","*.xcassets of Copy Bundle Resources --> Assets.car \r\n*.xcassets of [CP] Copy Pods Resource --> other  Assets.car \r\nThe first one covers second in the New Build System\uff0cThat's the reason.","Great guess! Anyone have ideas how to guarantee [CP] Copy Pods Resource execution after Copy Bundle Resources?","It seems I found the solution.\r\n\r\nPlacing `Assets.car` in input files of the `[CP] Copy Pods Resource` script tells the build system to wait for it to be created before running the script. See [Xcode 10 Build System Release notes](https:\/\/developer.apple.com\/documentation\/xcode_release_notes\/xcode_10_release_notes\/build_system_release_notes_for_xcode_10):\r\n\r\n> In the new build system, shell scripts can't rely on the state of build artifacts not listed in other build phases (for example, the Info.plist file or .dSYM files.) Add files the script build phase depends on as explicit input dependencies to the shell script build phase. (40852184)\r\n\r\nAs for the warning about duplicated output, if we remove _Assets.car_ from output files of the script, it is not executed at all. Seems that build system do not see that script processes it + there are no changes in input files. Thus it is skipped. The warning itself does not cause any change in the build process as I can see. I guess we can ignore this warning since it is a **known issue** with provided **workaround** . Thus I hope it will be fixed by Apple at some point. \r\n\r\nI also inspected build system `CompileAssetsCatalog` phase and found more arguments to `actool` that it uses. For example resource thinning in debug configuration and enabling on demand resources. These parameters are passed via env variables to resources script so they can be added to actool call in it.\r\n\r\n@dnkoutso I want to create PR that will incorporate the fix and changes above. I found that I can modify the script in _copy_resources_script.rb_, but I do not see where I can alter script`s input and output files. Maybe you can help me?\r\n\r\nMeanwhile the workaround for new build system will be to copy `${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car` to the input files of `[CP] Copy Pods Resource `after `pod install` or `pod update`.","@OneSman7 Probably here. https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/d2b21da046ac5e2a26a617c81bf4e944323b9710\/lib\/cocoapods\/installer\/user_project_integrator\/target_integrator.rb#L125","@dnkoutso  I try to put the action that @OneSman7 describes in post_install hook, but fails. \r\nWould you please help me figure out why this modification will be reverted.\r\n```ruby\r\npost_install do |installer|\r\n    app_project = installer.aggregate_targets.first.user_project\r\n    main_target = app_project.targets.first\r\n    build_phases = main_target.build_phases.grep(Xcodeproj::Project::Object::PBXShellScriptBuildPhase)\r\n    phase = build_phases[1]  # This is [CP] Copy Pod Resources phase, just for testing.\r\n    phase.input_paths.clear\r\n    phase.shell_script = \"\"\r\n    app_project.save\r\nend\r\n```","@ooopscc as I see your script removes any code from `Copy Pod Resources` and input paths.\r\nThis just breaks the phase.\r\nThe cause of the \"assets bug\" is the parallelization of the new build system. It tries to run as much tasks as possible at once on multiple cores. Thus in incremental builds `Copy Pod Resources` phase is executed a bit earlier that regular `Compile assets` phase. So Xcode just overwrites `Assets.car.`\r\nWe need to make sure `Copy Pod Resources` phase is executed later. As stated in new docs, if script phases depend on certain file it should be stated in input paths. So I proposed to make `Copy Pod Resources` phase dependant on `Assets.car` existing in build folder -> add it to input path of this phase.\r\nNo other change is needed. To remove the warning we can remove `Assets.car` from output path, but it hides form the build system that `Assets.car` is processed by this script, so it decides not to execute it (all other input files do not change from build to build). This warning is a known issue, so I hope that Apple will fix it in the future.","@OneSman7 Thanks for the details. The hook I wrote is just a test to see if the modification will work. The full script should add the `Assets.car` to the input paths. \r\nUse the above script, I can get the correct input paths (same as the final one), and the `clear` and `save` seems work, but after a while, it is modified and my changes is reverted.","I see. I do not know what is reverting your changes, but I think that modifying anything except for Pods project in post install hook can have unexpected consequences since it was not intended.\r\nI suggest adding input path manually after each pod install or update. It is not happening so often and the change is not reverted :)","It seems I overestimated my Ruby skills, my current workload and the complexity of CocoaPods project.\r\nI cannot tell if will be able to create PR any time soon, so I will write about my findings here. Maybe someone else can use them to fix the issue.\r\n\r\nThe origin of the issue is described in full detail above. To reenable pods assets in incremental builds we need to add `${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car` path to the input paths of the `Copy Pod Resource` script build phase (maybe just copy from output paths). We can ignore the warning of duplicated output since it is a known issue by Apple and do not affect anything.\r\n\r\nIn [CocoaPods\/lib\/cocoapods\/installer\/user_project_integrator\/target_integrator.rb](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/installer\/user_project_integrator\/target_integrator.rb) in `resource_output_paths` method there is a line `basename = extname == '.xcassets' ? 'Assets' : File.basename(resource_input_path)`. Here we are able to determine that we will output `Assets.car`. I was thinking about 2 possible additions:\r\n\r\n1. Making 'Assets' a constant. Search for it in output paths in `add_copy_resources_script_phase` method. If a path with this constant is found, add it to the input path also.\r\n2. Avoid searching, make `resource_output_paths ` method return Assets.car path if it was added. If it was returned add it to the input paths.\r\n\r\nI also studied `CompileAssetCatalog` command in Xcode 10:\r\n\r\n`\/Applications\/Xcode.app\/Contents\/Developer\/usr\/bin\/actool --output-format human-readable-text --notices --warnings --export-dependency-info ...\/assetcatalog_dependencies --output-partial-info-plist ...\/assetcatalog_generated_info.plist --app-icon AppIcon --compress-pngs --enable-on-demand-resources YES --filter-for-device-model iPhone10,6 --filter-for-device-os-version 11.4 --target-device iphone --minimum-deployment-target 9.3 --platform iphonesimulator --product-type com.apple.product-type.application --compile ...\/Assets.xcassets`\r\n\r\nI was thinking about adding additional options to `actool` call in [CocoaPods\/lib\/cocoapods\/generator\/copy_resources_script.rb](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/generator\/copy_resources_script.rb):\r\n\r\n1. `--enable-on-demand-resources YES`. The value can be obtained from `ENABLE_ON_DEMAND_RESOURCES=YES` env var.\r\n2. `--filter-for-device-model iPhone10,6 --filter-for-device-os-version 11.4`. If these options should be added can be obtained from `BUILD_ACTIVE_RESOURCES_ONLY=YES` env var. The values for options themselves are in `TARGET_DEVICE_MODEL=iPhone10,6` and `TARGET_DEVICE_OS_VERSION=11.4` env vars.\r\n3. `--product-type com.apple.product-type.application`. The value can be obtained from `PRODUCT_TYPE=com.apple.product-type.application` env var.\r\n4. The value of `COMPRESS_PNG_FILES=YES` env var can be used to determine whether to add `--compress-pngs` option.\r\n\r\nThese additions can bring support for on demand resources and improve debugging (they enable app resources thinning in debug builds, which decreases resources compile time and helps testing app thinning). ","Thank you @OneSman7 for the very thorough investigation and explanation!\r\n\r\nFor others trying to find a workaround, one option is to add the following to your project's Podfile:\r\n```\r\n# Work around for issue described here: https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8122#issuecomment-427680543\r\npost_install do |installer|\r\n  project_path = '<Your_Project_File_Here>.xcodeproj'\r\n  project = Xcodeproj::Project.open(project_path)\r\n  project.targets.each do |target|\r\n    build_phase = target.build_phases.find { |bp| bp.display_name == '[CP] Copy Pods Resources' }\r\n    \r\n    if build_phase.present?\r\n      build_phase.input_paths.push('${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car')\r\n    end\r\n  end\r\n  \r\n  project.save(project_path)\r\nend\r\n```\r\n\r\nThis would make sure that every time `pod install` or `pod update` is run, the copy pod resources phase is updated with the workaround suggested by others in this issue.","Unfortunately, @matt-loflin's script didn't quite work for me, though I appreciate seeing that script spelled out.  Using the script produced the following compiler error on my project: \r\n\r\n```\r\ninvalid task ('PhaseScriptExecution [CP]\\ Copy\\ Pods\\ Resources ... with mutable output but no other virtual output node (in target 'Secret')\r\n```\r\n\r\nI'm surprised more people aren't hitting this issue.  For me, that warning about duplicated output file on Assets.car isn't benign.  My assets (colors in xcassets) don't actually load at runtime.\r\n\r\nI was able to reproduce this issue with the finished tutorial project on raywenderlich.com (https:\/\/www.raywenderlich.com\/5823-how-to-create-a-cocoapod-in-swift).  With that project, you see the same warning.  And at runtime, you see `Could not load the \"background\" image referenced from a nib in the bundle with identifier`.\r\n\r\nSeems like using xcassets as `resources` in a CocoaPod framework is broken under Xcode 10.1 when using the new build system.","I've also been having trouble with @matt-loflin's script.\r\nWhen I run `pod install` the script works fine; the input path is added to the \"[CP] Copy Pods Resources\" build phase and all the images work as expected.\r\n\r\nHowever, when I run `pod install` again, the input path is removed from the build phase. This is obviously a problem and it's an even bigger one when it occurs in a CI workflow.\r\n\r\nAccording to this StackOverflow answer, the script would have to be run **after** the \"Integrating client project\" step, but there are no installer hooks that run after the project integrator:\r\nhttps:\/\/stackoverflow.com\/questions\/33846361\/hook-in-podfile-to-edit-my-project-file\/38208513#38208513\r\n","> *.xcassets of Copy Bundle Resources --> Assets.car\r\n> *.xcassets of [CP] Copy Pods Resource --> other Assets.car\r\n> The first one covers second in the New Build System\uff0cThat's the reason.\r\n\r\n@shixiaoda\r\n\r\nI don't think so,If this is true,Why first time run it was work?","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Use legacy is not work on xcode10.2. Have some idea?","+1. Still broken for the new build system in Xcode 10.2. \r\nAlso for both cocoapods version 1.5.3 and 1.7.0.beta.3.\r\nWaiting for solutions.","+1. Still broken for the new build system in Xcode 10.2.","+1 still seeing this in 10.2","+1 Still same issue","+1 still seeing this in 10.2","I move `[CP] Copy Pods Resources` after `Copy Bundle Resources` \r\n\r\nand Use:\r\n```\r\ninstall! 'cocoapods', :disable_input_output_paths => true\r\n```\r\nin podfile.\r\n\r\nIt seem works in new build system","+1\r\n\r\nAdding `${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car` to my `[CP] Copy Pods Resources` phase's \"input list\" seems to solve the issue (I can compile now) though I have no idea if this is safe. It also obviously gets blown away on ever `pod install`.","In Xcode 11 beta this warning is now error. Adding `${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car` to input files still works. But I wish there were more clean solution.","I have an Assets.car issue but I don't know if it's the same as this issue or separate?\r\n\r\n1) Xcode target builds fine\r\n2) Xcode unit tests run fine.\r\n3) lib lint is giving a warnings about duplicate output file around Assets.car:\r\nTarget Framework has an .xcassets file\r\nUnit Tests target has a TestAssets.xcassets file\r\n\r\n    warning: ignoring duplicated output file: '\/Users\/david.ferrero\/Library\/Developer\/Xcode\/DerivedData\/...\/MyLibUI-Unit-Tests.xctest\/Assets.car' in shell script build phase '[CP] Copy Pods Resources'. This warning represents an extremely serious project misconfiguration and will likely cause some shell scripts in your project to be skipped entirely, leading to other build failures or missing files in the build directory. This will be a hard error in the future. (in target 'MyLibUI-Unit-Tests')\r\n","For those who google Xcode 11 beta error message, here it is.\r\n\r\nWarning first:\r\n\r\n    warning: duplicate output file '\/Users\/valentine\/Library\/Developer\/Xcode\/DerivedData\/MyProj-aqxzijyfpejuxqbbjaivvdfgeawg\/Build\/Products\/Development-Debug-iphonesimulator\/MyProj.app\/Assets.car' on task: PhaseScriptExecution [CP] Copy Pods Resources \/Users\/valentine\/Library\/Developer\/Xcode\/DerivedData\/MyProj-aqxzijyfpejuxqbbjaivvdfgeawg\/Build\/Intermediates.noindex\/MyProj.build\/Development-Debug-iphonesimulator\/MyProj.build\/Script-1EF392577225761A8D70A2CD.sh (in target 'MyProj')\r\n\r\nFollowed by error:\r\n\r\n    error: Multiple commands produce '\/Users\/valentine\/Library\/Developer\/Xcode\/DerivedData\/MyProj-aqxzijyfpejuxqbbjaivvdfgeawg\/Build\/Products\/Development-Debug-iphonesimulator\/MyProj.app\/Assets.car':\r\n    1) Target 'MyProj' (project 'MyProj') has compile command with input '\/Users\/valentine\/Projects\/MyProj\/Resources\/panel-ipad.xcassets'\r\n    2) That command depends on command in Target 'MyProj' (project 'MyProj'): script phase \u201c[CP] Copy Pods Resources\u201d","If you are using Xcode 11 and distributing assets through pods using e.g.:\r\n`s.resources = [\"your resource.xcassets\"]` (in podspec)\r\nthen as a workaround you can set:\r\n`install! 'cocoapods', :disable_input_output_paths => true` (in Podfile)\r\nas was already mentioned above. \r\n\r\nThis will download your resources from pods, but will not copy those assets to apps bundle during build. \r\nTo get resources to the app bundle as a workaround you will need to manually reference them in your project structure from Pods folder.\r\n","Any solution for this issue? It is breaking most of the projects out there.","I have modified @matt-loflin 's script in order to always include `${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car` as input file (even after the first `pod install` run).\r\n\r\n```\r\n\r\n    project_path = '[YOUR_PROJ_NAME].xcodeproj'\r\n    project = Xcodeproj::Project.open(project_path)\r\n    project.targets.each do |target|\r\n      build_phase = target.build_phases.find { |bp| bp.display_name == '[CP] Copy Pods Resources' }\r\n      \r\n      assets_path = '${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car'\r\n      if build_phase.present? && build_phase.input_paths.include?(assets_path) == false\r\n        build_phase.input_paths.push(assets_path)\r\n      end\r\n    end\r\n```\r\n\r\nThe problem with the previous version of the script was the fact that we were always appending the `Assets.car` file to the input files list and a later phase of pod install cleans these duplicated entries (no explanation for it however).","> I have modified @matt-loflin 's script in order to always include `${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car` as input file (even after the first `pod install` run).\r\n> \r\n> ```\r\n> \r\n>     project_path = '[YOUR_PROJ_NAME].xcodeproj'\r\n>     project = Xcodeproj::Project.open(project_path)\r\n>     project.targets.each do |target|\r\n>       build_phase = target.build_phases.find { |bp| bp.display_name == '[CP] Copy Pods Resources' }\r\n>       \r\n>       assets_path = '${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car'\r\n>       if build_phase.present? && build_phase.input_paths.include?(assets_path) == false\r\n>         build_phase.input_paths.push(assets_path)\r\n>       end\r\n>     end\r\n> ```\r\n> \r\n> The problem with the previous version of the script was the fact that we were always appending the `Assets.car` file to the input files list and a later phase of pod install cleans these duplicated entries (no explanation for it however).\r\n\r\nI will try this workaround and let you know! \r\n","> I have modified @matt-loflin 's script in order to always include `${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car` as input file (even after the first `pod install` run).\r\n> \r\n> ```\r\n> \r\n>     project_path = '[YOUR_PROJ_NAME].xcodeproj'\r\n>     project = Xcodeproj::Project.open(project_path)\r\n>     project.targets.each do |target|\r\n>       build_phase = target.build_phases.find { |bp| bp.display_name == '[CP] Copy Pods Resources' }\r\n>       \r\n>       assets_path = '${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car'\r\n>       if build_phase.present? && build_phase.input_paths.include?(assets_path) == false\r\n>         build_phase.input_paths.push(assets_path)\r\n>       end\r\n>     end\r\n> ```\r\n> \r\n> The problem with the previous version of the script was the fact that we were always appending the `Assets.car` file to the input files list and a later phase of pod install cleans these duplicated entries (no explanation for it however).\r\n\r\nIt doesn't work either. ","Same issue. And I can provide a demo to 100% trigger this build failure. Only New Build System has this issue. Legacy does not.\r\n\r\npod version: 1.7.4\r\nXcode version: Xcode 11 Beta3\r\nmacOS version: macOS 10.14.4\r\n\r\nDemo: https:\/\/github.com\/dreampiggy\/CocoaPodsXCAssetsIssue","experiencing the same issue. does anyone know of any workarounds for configuring the static framework \/ podspec so devs don't see this? ","Its almost one year still this issue not get fixed. Sad.","Upvote. Since this is an error now it is critical.\r\n@dnkoutso are there any plans to work on resolving this?","With this now coming up on Xcode 11 whenever you use a pod that has assets, it's become a significant issue. This is effectively a blocker for anyone using one of those pods. \r\n\r\nThe manual fix above has been confirmed to work, with the automated fixes being less successful. Getting that built into cocoapods would likely work correctly for everyone. \r\n\r\nHow can we make that happen? ","This looks like a blocking issue with new build system on Xcode 11 since it's already beta 5. Do we have any plan to fix it?","> > I have modified @matt-loflin 's script in order to always include `${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car` as input file (even after the first `pod install` run).\r\n> > ```\r\n> > \r\n> >     project_path = '[YOUR_PROJ_NAME].xcodeproj'\r\n> >     project = Xcodeproj::Project.open(project_path)\r\n> >     project.targets.each do |target|\r\n> >       build_phase = target.build_phases.find { |bp| bp.display_name == '[CP] Copy Pods Resources' }\r\n> >       \r\n> >       assets_path = '${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car'\r\n> >       if build_phase.present? && build_phase.input_paths.include?(assets_path) == false\r\n> >         build_phase.input_paths.push(assets_path)\r\n> >       end\r\n> >     end\r\n> > ```\r\n> > \r\n> > \r\n> > The problem with the previous version of the script was the fact that we were always appending the `Assets.car` file to the input files list and a later phase of pod install cleans these duplicated entries (no explanation for it however).\r\n> \r\n> I will try this workaround and let you know!\r\n\r\nNote. **This only works on Xcode New Build System**\r\nOne **Legacy Build System** This will cause build error for Xcode :)\r\n\r\nUsing post-installer does not solve the problem. Because CocoaPods's logic, it's to call your post-installer first, then override all the input files. So your changes will be reverted.\r\n\r\nI write a CocoaPods plugin to solve this problem. But need a official workaround.\r\n\r\nGood Apple.","Hi. Xcode 11 issue is critical for our project too.\r\n@dalemyers, could you please help with manual fix that works for Xcode 11? If I add Assets.car to '[CP] Copy Pods Resources' it just doesn't compile. How can I fix it manually to compile project and have assets?","I have no idea what issue you are seeing unfortunately. Sorry I can't be of more help. ","> I have no idea what issue you are seeing unfortunately. Sorry I can't be of more help.\r\n\r\nRun this demo using Xcode 11 and New Build System (Legacy have no issue) :  https:\/\/github.com\/dreampiggy\/CocoaPodsXCAssetsIssue\r\n\r\nThis issue only appear, when you have at least one Pod, using the `spec.resource = 'ABC.xcassets'` syntax, not the resource bundles.","@dalemyers I mean issue with pods that have assets. We have to use XCode 11 and new build system, because XCode 11 fixes another critical issue from XCode 10. And this fix works only with new build system (https:\/\/forums.swift.org\/t\/swift-compilation-reaching-arg-max-limit-causing-xcode-build-failure\/6494) ","Any news at this one? Same issue at my end.","as with Xcode 11 (starting already with its first Beta) the warning with duplicate output files is now error. Therefore for Workaround I've ended up using this `post_install` script:\r\n```\r\n# Work around for issue described here: https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8122#issuecomment-427680543\r\n# need to reference resources manually from Pods folder (one time task - will not breal with \"pods update\" command)\r\npost_install do |installer|\r\n  project_path = '[YOUR_PROJ_NAME].xcodeproj'\r\n  project = Xcodeproj::Project.open(project_path)\r\n  project.targets.each do |target|\r\n    build_phase = target.build_phases.find { |bp| bp.display_name == '[CP] Copy Pods Resources' }\r\n    \r\n    if build_phase.present?\r\n      target.build_phases.delete(build_phase)\r\n    end\r\n  end\r\n  \r\n  project.save(project_path)\r\nend\r\n```\r\n\r\nthe difference between this and previous workarounds is that now I'm removing whole `[CP] Copy Pods Resources` phase instead of trying to fix it (as previous workarounds are not working any more in Xcode 11).\r\nOnly thing you need to do next to this script is adding your resources references to the project manually, which is single time task and will not brake with \"pods update\" command.\r\nThis workaround has no side-effect on frameworks, so only resources needs to be manually referenced till proper solution is done in CocoaPods.","Xcode 11 has now gone GM and this continues to be an issue. Considering the number of people seeing this on a beta, the numbers when it is launched are going to skyrocket. This has the potential to be a significant issue for cocoapods. We need to figure out a solution to it. \r\n\r\nFrom what I've gathered from above, the only real fix we've identified is to patch CocoaPods itself to add the assets file to the phase. \r\n\r\nAre there any other alternatives that we've found? ","@dalemyers I currently use a hard-code written CocoaPods plugin to solve this problem. If this can help, you can have a try:\r\n\r\n+ https:\/\/github.com\/dreampiggy\/cocoapods-xcode-patch\r\n\r\nI don't know the official way to solve this problem, the plugin logic is just the simple temporary workaround from this issue comments. When using Xcode 11 GM New Build System, since CocoaPods touch the `Assets.car`, it **SHOULD** be here in the Input File List.\r\n\r\nHowever, the Legacy Build System does not have this limit and I have to check the build system in this patch. Why ? Maybe Apple knows.","Adding `${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car` to my `[CP] Copy Pods Resources` phase's _\"Input Files\"_ list mo more working with Cocoapods 1.8.0, still working with 1.7.5.","> Meanwhile investigation you can you can use a work arounds : using the Xcode Legacy Build System and not the Xcode 10 new build system.\r\n> \r\n> Xcode \/ File \/ Workspace Settings \/ Build system \/ select \"Legacy Build System\"\r\n> \r\n> <img alt=\"capture d ecran 2018-09-25 a 11 04 14\" width=\"590\" src=\"https:\/\/user-images.githubusercontent.com\/587505\/46004573-86ea9680-c0b3-11e8-91a9-e1335635e71d.png\">\r\n\r\nThis fixed my issue","I solved this by creating a subspec for the entire project with resource bundles in it, like:\r\n\r\n```\r\ns.subspec 'Sources' do |source|\r\n    source.source_files = 'MyProject\/**\/*.{pch,h,m,swift}'\r\n    source.resources = 'MyProject\/**\/*.{png,json,plist,xib,otf,ttf,strings,html,der,storyboard}'\r\n    source.resource_bundles = { 'Resources' => ['MyProject\/**\/*.xcassets']}\r\n    source.exclude_files = 'MyProject\/Info.plist' # this is because Info.plist is going to overwrite the main one\r\nend\r\n```\r\n\r\nit is probably going to work also with:\r\n\r\n```\r\nPod::Spec.new do |source|\r\n...\r\n  source.resources = 'MyProject\/**\/*.{png,json,plist,xib,otf,ttf,strings,html,der,storyboard}'\r\n  source.resource_bundles = { 'Resources' => ['MyProject\/**\/*.xcassets']}\r\n...\r\nend\r\n```\r\n(not tested)","Tried it all on Xcode 11, but the very first workaround helped:\r\n\r\n`install! 'cocoapods', :disable_input_output_paths => true`\r\n\r\nAfter this the script is always executed (no possible skip optimisation), but it is only 10 additional sec in our case. And back is compiling as usual and running CI.\r\n\r\nThanks @dnkoutso! It is really better to try proposed fix and not inventing the wheel.\r\n\r\n**P.S.**: I checked generated Assets.car on a clean build - all resources from pods were there. If your build are clean and generated by CI - you win)","Our build times are already 12 minutes for initial build and 90 seconds on subsequent builds... using this work around gives us build times close to 2x longer. I really think there should be a fix for this from the cocoa pods team? Our only option is to look at Carthage or SPM for everything.\r\n\r\n@dreampiggy  mentioned a plugin, we'll give that a try for now.","Still no solution for this problem? ","Just adding my experience here:\r\nIf we build our project with **zero** changes, the `install! 'cocoapods', :disable_input_output_paths => true` workaround results in our project rebuilding the asset catalog (24secs)+ running the Copy Pod Resources script (27secs) **every** time. \r\n![incremental-build](https:\/\/user-images.githubusercontent.com\/316931\/68808814-a204d500-06be-11ea-8323-1dc6f2c703ab.png)\r\nWe're using (with great success) the patch to cocoapods from @dreampiggy here: https:\/\/github.com\/dreampiggy\/cocoapods-xcode-patch which selectively inserts `${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car` to the input file list files. \r\n\r\n@dreampiggy have you attempted to make a PR to include this fix? ","> https:\/\/github.com\/dreampiggy\/cocoapods-xcode-patch\r\n\r\nThat plugin is a patch, in logic. It's OK someone can port this to the official implementation.\r\nBut the logic there check `Whether current workspace using Legacy Build System or New Build System`, which is a little ugly. I don't know any better solution now.\r\n\r\nCan anyone who really familiar with CocoaPods or Ruby, help to port that and create a MR ?","> If you are using Xcode 11 and distributing assets through pods using e.g.:\r\n> `s.resources = [\"your resource.xcassets\"]` (in podspec)\r\n> then as a workaround you can set:\r\n> `install! 'cocoapods', :disable_input_output_paths => true` (in Podfile)\r\n> as was already mentioned above.\r\n> \r\n> This will download your resources from pods, but will not copy those assets to apps bundle during build.\r\n> To get resources to the app bundle as a workaround you will need to manually reference them in your project structure from Pods folder.\r\n\r\n@BalkiX This answer works for me, but is there a downside of putting this in my Podfile?\r\n\r\n","> > If you are using Xcode 11 and distributing assets through pods using e.g.:\r\n> > `s.resources = [\"your resource.xcassets\"]` (in podspec)\r\n> > then as a workaround you can set:\r\n> > `install! 'cocoapods', :disable_input_output_paths => true` (in Podfile)\r\n> > as was already mentioned above.\r\n> > This will download your resources from pods, but will not copy those assets to apps bundle during build.\r\n> > To get resources to the app bundle as a workaround you will need to manually reference them in your project structure from Pods folder.\r\n> \r\n> @BalkiX This answer works for me, but is there a downside of putting this in my Podfile?\r\n\r\nHi cgossain, if you are using pods only for distributing assets this workaround will be fine for you, but I had issue with other frameworks distributed through pods. I ended up using other workaround mentioned above https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8122#issuecomment-531202439 which is not braking my other framework references. With this workaround I just have to call also pod install after pod update as the script is not ideal and I hope proper fix is coming soon.","> what is the downside of putting this in my Podfile?\n\nThis workaround stops cocoapods from defining the dependencies (inputs and outputs) for the build phase step. When a build phase step has no input dependencies, Xcode must run that step every single build, even if you have changed nothing and just hit build again. For us that adds a massive wasted overhead for our incremental builds, as our asset catalogs take > 30secs to build. For smaller projects, simple asset catalogs, rebuilding them every time may be an acceptable cost to incur. ","> Just adding my experience here:\r\n> If we build our project with **zero** changes, the `install! 'cocoapods', :disable_input_output_paths => true` workaround results in our project rebuilding the asset catalog (24secs)+ running the Copy Pod Resources script (27secs) **every** time.\r\n> ![incremental-build](https:\/\/user-images.githubusercontent.com\/316931\/68808814-a204d500-06be-11ea-8323-1dc6f2c703ab.png)\r\n> We're using (with great success) the patch to cocoapods from @dreampiggy here: https:\/\/github.com\/dreampiggy\/cocoapods-xcode-patch which selectively inserts `${TARGET_BUILD_DIR}\/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\/Assets.car` to the input file list files.\r\n> \r\n> @dreampiggy have you attempted to make a PR to include this fix?\r\n\r\nEven using the patch, the build still errors. Assets.car is still being added to both the input and output files. How is this supposed to work? Is this patch _only_ for 1.7.5? I tried using 1.8.4.","Hello all,\r\n\r\nI've found a workaround to this problem that is working well for me, and allows me to keep using `*.xcassets` files.\r\n\r\n## Broken Setup:\r\n_MyPod.podspec_:\r\n```\r\ns.resources = 'MyPod\/Assets\/Images\/**\/*'\r\n```\r\n\r\n_UIImage+Bundle.swift_ helper extension:\r\n```\r\nimport UIKit\r\n\r\nextension UIImage {\r\n    \/\/\/ Creates an image object using the named image asset from the current library bundle.\r\n    static func makeLibraryImage(named: String) -> UIImage? {\r\n        return UIImage(named: named, in: Bundle(for: SomeClassInMyLibrary.self), compatibleWith: nil)\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Working Setup:\r\n_MyPod.podspec_:\r\n```\r\ns.resource_bundles = { 'MyPod-Images' => ['MyPod\/Assets\/Images\/*.xcassets'] }\r\n```\r\n\r\n_UIImage+Bundle.swift_ helper extension:\r\n```\r\nimport UIKit\r\n\r\nextension UIImage {\r\n    \/\/\/ Creates an image object using the named image asset from the current library bundle.\r\n    static func makeLibraryImage(named: String) -> UIImage? {\r\n        guard let bundlePath = Bundle(for: SomeClassInMyLibrary.self).path(forResource: \"MyPod-Images\", ofType: \"bundle\") else {\r\n            return nil\r\n        }\r\n        let bundle = Bundle(path: bundlePath)\r\n        return UIImage(named: named, in: bundle, compatibleWith: nil)\r\n    }\r\n}\r\n```\r\n\r\n## Summary\r\n\r\nIn summary, in my working solution I've reconfigured my `.podspec` to wrap my `.xcassets` file into a resource bundle, and I've updated my helper extension accordingly. This is currently working reliably for me and I don't need to add additional plugins or code into my Podfile.\r\n\r\n## Update - Nov 21, 2019\r\n\r\nIt seems like I still need to run `pod install` after a `pod update` for this solution to work. \r\n\r\nApparently the `pod update` command removes the paths to the ressource bundles from the `[CP] Copy Pods Resources` build phase script, but then `pod install` adds them back in.\r\n","> Very sorry if this issue is not quite relating to this ticket but at the moment its the closest I can find. \r\n\r\n### My Issue:\r\nAny changes I make to my **Assets.xcassets** folder (_i.e. add a new AR Reference Image for image tracking_)  are not being picked up when I go to rerun the app. \r\n\r\nI assumed they weren't being picked up by the **Assets.xcassets** folder so I decided to remove Assets.cassets folder from my **build phase bundle resource**, and then re add it.\r\n\r\n**The exception being thrown:**\r\nAfter re adding the folder and running my app again the application freezes outputting the following error:\r\n\r\n`2019-11-28 15:59:35.265955+0100 Image TrackAR[15721:1026007] [framework] CoreUI: RunTimeThemeRefForBundleIdentifierAndName() couldn't find Assets.car in bundle with identifier: 'com.{mybundleid}'\r\n2019-11-28 15:59:35.266144+0100 Image TrackAR[15721:1026007] [framework] CoreUI: RunTimeThemeRefForBundleIdentifierAndName() couldn't find Assets.car in bundle with identifier: 'com.{mybundleid}'\r\n2019-11-28 15:59:35.266613+0100 Image TrackAR[15721:1026007] [General] Error while opening catalog named \"Assets\" in bundle \"(null)\": Error Domain=NSCocoaErrorDomain Code=260 \"RunTimeThemeRefForBundleIdentifierAndName() couldn't find Assets.car in bundle with identifier: com.sambowen\" UserInfo={NSLocalizedDescription=RunTimeThemeRefForBundleIdentifierAndName() couldn't find Assets.car in bundle with identifier: com.{mybundleid}}`\r\n\r\nI really can't understand whats going wrong, any help would be really appreciated.\r\n\r\nCurrently working with the following:\r\n- Arkit 2.0\r\n- Xcode Version 11.2.1 (11B500)\r\n","Any update on this? \r\n\r\nHaving the same issuer with:\r\n\r\nPod version: 1.8.4\r\nXcode version: Xcode 11.3.1\r\nmacOS version: macOS 10.15.3","sorry, novice question: where should we add `install! 'cocoapods', :disable_input_output_paths => true` in the podfile?","@adamgins I put it just under `platform :ios, '9.0'`. But as commented buy many in this thread already it will probably slow down your incremental builds a lot. I'm using the legacy build system for now.","Adding this to podfile\r\n\r\n`install! 'cocoapods', :disable_input_output_paths => true`\r\n\r\nAnd changing the copy pods order worked for us","If you want to avoid the incremental compilation time hit, using `resource_bundles` rather than `resources` as mentioned above by @cgossain should help.","https:\/\/developer.apple.com\/documentation\/xcode-release-notes\/xcode-12-beta-release-notes#Build-System\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/316931\/85350272-113f8300-b544-11ea-9d41-2a2aa410db1f.png)\r\n","Yeap! The change you highlighted fixed a long standing issue also for development pods and dynamic frameworks https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8073.\r\n\r\nHowever, other issues regarding XCAssets are still remaining.","@dnkoutso @raven \r\nDoes this mean Xcode 12 fixes this whole issue (i.e. no more need for slow workarounds?)","So, legacy build system is being deprecated and we will not be able to use cocoapods with the new one. Is there any workaround without performance issues?","@zaptrem I can confirm we still have the same issue with Xcode 12 beta1 (12A6159)","If it helps anyone. So `disable_input_output_paths` slowed down our build times a lot. So I had to find another workaround, the pod which is causing `assets.car` error, install it as dynamic framework. Note: You also have to install pod's dependencies as dynamic framework.\r\n\r\n```ruby\r\nuse_frameworks! :linkage => :static\r\n\r\ndynamic_frameworks = ['Pod1', 'dependentPod']\r\npre_install do |installer|\r\n    installer.pod_targets.each do |pod|\r\n        if dynamic_frameworks.include?(pod.name)\r\n            puts \"Overriding the build_as_dynamic_framework? method for #{pod.name}\"\r\n            def pod.build_as_dynamic_framework?;\r\n                true\r\n            end\r\n            def pod.build_type;\r\n                Pod::BuildType.dynamic_framework\r\n            end\r\n        end\r\n    end\r\nend\r\n```","> Hello all,\r\n> \r\n> I've found a workaround to this problem that is working well for me, and allows me to keep using `*.xcassets` files.\r\n> \r\n> ## Broken Setup:\r\n> _MyPod.podspec_:\r\n> \r\n> ```\r\n> s.resources = 'MyPod\/Assets\/Images\/**\/*'\r\n> ```\r\n> \r\n> _UIImage+Bundle.swift_ helper extension:\r\n> \r\n> ```\r\n> import UIKit\r\n> \r\n> extension UIImage {\r\n>     \/\/\/ Creates an image object using the named image asset from the current library bundle.\r\n>     static func makeLibraryImage(named: String) -> UIImage? {\r\n>         return UIImage(named: named, in: Bundle(for: SomeClassInMyLibrary.self), compatibleWith: nil)\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> ## Working Setup:\r\n> _MyPod.podspec_:\r\n> \r\n> ```\r\n> s.resource_bundles = { 'MyPod-Images' => ['MyPod\/Assets\/Images\/*.xcassets'] }\r\n> ```\r\n> \r\n> _UIImage+Bundle.swift_ helper extension:\r\n> \r\n> ```\r\n> import UIKit\r\n> \r\n> extension UIImage {\r\n>     \/\/\/ Creates an image object using the named image asset from the current library bundle.\r\n>     static func makeLibraryImage(named: String) -> UIImage? {\r\n>         guard let bundlePath = Bundle(for: SomeClassInMyLibrary.self).path(forResource: \"MyPod-Images\", ofType: \"bundle\") else {\r\n>             return nil\r\n>         }\r\n>         let bundle = Bundle(path: bundlePath)\r\n>         return UIImage(named: named, in: bundle, compatibleWith: nil)\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> ## Summary\r\n> In summary, in my working solution I've reconfigured my `.podspec` to wrap my `.xcassets` file into a resource bundle, and I've updated my helper extension accordingly. This is currently working reliably for me and I don't need to add additional plugins or code into my Podfile.\r\n> \r\n> ## Update - Nov 21, 2019\r\n> It seems like I still need to run `pod install` after a `pod update` for this solution to work.\r\n> \r\n> Apparently the `pod update` command removes the paths to the ressource bundles from the `[CP] Copy Pods Resources` build phase script, but then `pod install` adds them back in.\r\n\r\nthis solution worked for me as well. only need to check that all the Pod dependencies that you're using are also implementing `resource_bundles` instead of `resources`. this is also a better solution to avoid naming collisions between your assets and assets from 3rd party dependencies.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Still not working properly"],"labels":["r:new build system","s7:workaround available"]},{"title":"NoMethodError - undefined method `real_path`","body":"# Report\r\n\r\n## What did you do?\r\n\r\n`pod install`\r\n\r\n## What did you expect to happen?\r\n\r\nAll pods correctly installed\r\n\r\n## What happened instead?\r\n\r\n```\r\n[!] An error occurred while processing the post-install hook of the Podfile.\r\n\r\nundefined method `real_path' for nil:NilClass\r\n\r\n\/Users\/sergei\/Desktop\/TryCocoaPods16\/Podfile:26:in `patch_xcconfig_file'\r\n\/Users\/sergei\/Desktop\/TryCocoaPods16\/Podfile:36:in `block (4 levels) in from_ruby'\r\n\/Users\/sergei\/Desktop\/TryCocoaPods16\/Podfile:34:in `each'\r\n\/Users\/sergei\/Desktop\/TryCocoaPods16\/Podfile:34:in `block (3 levels) in from_ruby'\r\n\/Users\/sergei\/Desktop\/TryCocoaPods16\/Podfile:32:in `each'\r\n\/Users\/sergei\/Desktop\/TryCocoaPods16\/Podfile:32:in `block (2 levels) in from_ruby'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/gems\/cocoapods-core-1.6.0.beta.1\/lib\/cocoapods-core\/podfile.rb:179:in `post_install!'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/gems\/cocoapods-1.6.0.beta.1\/lib\/cocoapods\/installer.rb:685:in `run_podfile_post_install_hook'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/gems\/cocoapods-1.6.0.beta.1\/lib\/cocoapods\/installer.rb:673:in `block in run_podfile_post_install_hooks'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/gems\/cocoapods-1.6.0.beta.1\/lib\/cocoapods\/user_interface.rb:145:in `message'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/gems\/cocoapods-1.6.0.beta.1\/lib\/cocoapods\/installer.rb:672:in `run_podfile_post_install_hooks'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/gems\/cocoapods-1.6.0.beta.1\/lib\/cocoapods\/installer.rb:197:in `block in generate_pods_project'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/gems\/cocoapods-1.6.0.beta.1\/lib\/cocoapods\/user_interface.rb:64:in `section'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/gems\/cocoapods-1.6.0.beta.1\/lib\/cocoapods\/installer.rb:194:in `generate_pods_project'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/gems\/cocoapods-1.6.0.beta.1\/lib\/cocoapods\/installer.rb:125:in `install!'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/gems\/cocoapods-1.6.0.beta.1\/lib\/cocoapods\/command\/install.rb:48:in `run'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/gems\/claide-1.0.2\/lib\/claide\/command.rb:334:in `run'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/gems\/cocoapods-1.6.0.beta.1\/lib\/cocoapods\/command.rb:52:in `run'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/gems\/cocoapods-1.6.0.beta.1\/bin\/pod:55:in `<top (required)>'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/bin\/pod:23:in `load'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/bin\/pod:23:in `<main>'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/bin\/ruby_executable_hooks:15:in `eval'\r\n\/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/bin\/ruby_executable_hooks:15:in `<main>'\r\n```\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.6.0.beta.1\r\n        Ruby : ruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-darwin17]\r\n    RubyGems : 2.6.14\r\n        Host : Mac OS X 10.13.6 (17G65)\r\n       Xcode : 9.4.1 (9F2000)\r\n         Git : git version 2.15.2 (Apple Git-101.1)\r\nRuby lib dir : \/Users\/sergei\/.rvm\/rubies\/ruby-2.4.2\/lib\r\nRepositories : cocoapods-local - file:\/\/\/Users\/sergei\/.cocoapods\/repos-art\/cocoapods-local @ ef581fd6702607fa5cb0535d0cb909999c5ff014\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ 4abe09c9d9498b46f51cc2b05c59f5b5fb3d6ae1\r\n               mb-internal-specs - git@github.mb-internal.com:AdwareMedic\/specs.git @ 57e9210510871cf5f33b9694fce562b028cc295d\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/sergei\/.rvm\/gems\/ruby-2.4.2\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-art         : 1.0.0\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\nslather               : 2.4.6\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :osx, '10.10'\r\nuse_frameworks!\r\n\r\nworkspace 'TryCocoaPods16'\r\n\r\ndef podAlamofire\r\n  pod 'Alamofire'\r\nend\r\n\r\ntarget 'TryCocoaPods16' do\r\n\r\n  project 'TryCocoaPods16.xcodeproj'\r\n  pod 'Alamofire'\r\n\r\nend\r\n\r\ntarget 'MyFramework' do\r\n\r\n  project 'MyFramework\/MyFramework.xcodeproj'\r\n  pod 'Alamofire'\r\n\r\nend\r\n\r\ndef patch_xcconfig_file(config)\r\n\r\n  puts config.base_configuration_reference.real_path\r\n\r\nend\r\n\r\npost_install do |installer_representation|\r\n\r\n  installer_representation.pods_project.targets.each do |target|\r\n\r\n    target.build_configurations.each do |config|\r\n\r\n      patch_xcconfig_file(config)\r\n\r\n    end\r\n\r\n  end\r\n\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/serges147\/TryCocoaPods16.git\r\n\r\n","comments":["My investigation showed that the key to reproduce this issue is the following:\r\n\r\nWorkspace has **two projects with different set of configurations**, like one with \"Debug|Release\" and another with \"Debug|Release|ReleaseBeta\".","This is an error in your own `Podfile` you have a method called `patch_xcconfig_file(config)`.\r\n\r\nPlease use StackOverflow under `cocoapods` tag for these questions.","You are also not mapping your configuration `project 'MyProject', 'ReleaseBeta' => :release`","ok, why it worked in 1.5.3 ?","Also, I'm not sure that I need such mapping b\/c 'ReleaseBeta' could be just not applicable for the 'MyProject' at all, but still cocoapods tries to build a configuration for it.","Is the repo you have a good sample to test this?","Looks like, indeed, adding `, 'ReleaseBeta' => :release` fixes the problem.","@dnkoutso Yup, I did it specifically for this report\r\n","great thanks","@serges147 Yes it works on 1.5.3 but no longer in 1.6.0.beta.1 but I am checking to see if its actually the right thing 1.6.0.beta.1 does.","Still not sure if its a defect once I find a bit of time I will look into what changed and whether it was a regression or a correct thing.","This happened to me because I did not have a Release config at all. It looks like \"Debug\" and \"Release\" are hardcoded without checking if they exist. Attaching sample project as a proof.\r\n\r\n[ConfigsProblem.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/2900401\/ConfigsProblem.zip)\r\n\r\nThis project has no Debug config, but it's still handled (I have added print in the hook). A workaround I'm going to use is skipping if config.name == Debug.\r\n```\r\nAnalyzing dependencies\r\nDownloading dependencies\r\nGenerating Pods project\r\nChecking config: Release\r\nChecking config: Debug\r\nIntegrating client project\r\nSending stats\r\n```\r\n\r\n","There maybe lots of causes for this error, but in my case, it is because of missing xcconfig file https:\/\/github.com\/onmyway133\/blog\/issues\/170","In my case I just removed the Podfile.lock and runned `pod install`"],"labels":["s2:confirmed"]},{"title":"Prefer Copy Headers over Copy Files build phases when generating Xcode projects","body":"In pod_target_installer.rb, there is the following code:\r\n\r\n```ruby\r\ndef add_header(build_file, public_headers, private_headers, native_target)\r\n  file_ref = build_file.file_ref\r\n  acl = if !target.requires_frameworks? # Headers are already rooted at ${PODS_ROOT}\/Headers\/P*\/[pod]\/...\r\n          'Project'\r\n        elsif public_headers.include?(file_ref.real_path)\r\n          'Public'\r\n        elsif private_headers.include?(file_ref.real_path)\r\n          'Private'\r\n        else\r\n          'Project'\r\n        end\r\n        \r\n  if target.requires_frameworks? && header_mappings_dir && acl != 'Project'\r\n    relative_path = file_ref.real_path.relative_path_from(header_mappings_dir)\r\n    sub_dir = relative_path.dirname\r\n    copy_phase_name = \"Copy #{sub_dir} #{acl} Headers\"\r\n    copy_phase = native_target.copy_files_build_phases.find { |bp| bp.name == copy_phase_name } ||\r\n      native_target.new_copy_files_build_phase(copy_phase_name)\r\n    copy_phase.symbol_dst_subfolder_spec = :products_directory\r\n    copy_phase.dst_path = \"$(#{acl.upcase}_HEADERS_FOLDER_PATH)\/#{sub_dir}\"\r\n    copy_phase.add_file_reference(file_ref, true)\r\n  else\r\n    build_file.settings ||= {}\r\n    build_file.settings['ATTRIBUTES'] = [acl]\r\n  end\r\nend\r\n```\r\n\r\nFor certain projects (like Realm: https:\/\/github.com\/realm\/realm-cocoa\/blob\/master\/Realm.podspec), this causes header files to be copied into frameworks using a Copy Files phase rather rather than a Copy Headers phase as is the normal practice.\r\n\r\nBecause this loses the semantic information in the Xcode project that these files are framework headers, it creates a suboptimal user experience and might prevent Xcode from building the project in the most optimal manner under certain conditions.\r\n\r\nPlease re-evaluate this logic and try to use Copy Headers phases whenever possible. For example, if the sub_dir is \".\" (perhaps for other values it's required since Copy Headers cannot copy to subdirs) then there should be no reason to require a Copy Files phase.","comments":["Thank you for the report! I think this has been a very old vestigial reason why CocoaPods does this. I think we should mark it as an enhancement to improve upon and replace.\r\n\r\n@paulb777 this might be of interest as well.","@jakepetroules also it seems that we only add this when `header_mappings_dir` is set and only for the case you describe in your last paragraph. Does it not use the standard Copy Headers Phase otherwise?","@jakepetroules I'd also welcome any PRs to tackle this and would be happy to review."],"labels":["t1:enhancement","d2:moderate"]},{"title":"\"Unable to find a specification for\" error resolution","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: http:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nRun `pod install` on a Podfile specifying a pod that is available upstream but not cached in my local specs repo.\r\n\r\n## What did you expect to happen?\r\n\r\nAn error message with a suggestion to run `pod repo update` for new pods.\r\n\r\n## What happened instead?\r\n\r\nAn error with no suggested resolution:\r\n\r\n```\r\nAnalyzing dependencies\r\n[!] Unable to find a specification for `PointFree-Validated`\r\n```\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.6.0.beta.1\r\n        Ruby : ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin18]\r\n    RubyGems : 2.7.6\r\n        Host : Mac OS X 10.14 (18A377a)\r\n       Xcode : 10.0 (10L232m)\r\n         Git : git version 2.17.1 (Apple Git-112)\r\nRuby lib dir : \/Users\/stephencelis\/.rbenv\/versions\/2.5.1\/lib\r\nRepositories : googlesource-nearby - https:\/\/cpdc-eap.googlesource.com\/Nearby.git @ eded63d2a99c571e1d01b0aa1b860b99496c3495\r\n               googlesource-spec - https:\/\/cpdc-eap.googlesource.com\/spec.git @ 0fd9263ede63bee9aec1034b38771950cd7e147a\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ ad98367c1611113ad457fe12f8690359354931a9\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/stephencelis\/.rbenv\/versions\/2.5.1\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\n\r\ntarget 'MyApp' do\r\n  pod 'PointFree-Validated', '~> 0.1'\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nN\/A","comments":["FWIW, this is a library issue that made me realize this was a point of confusion: https:\/\/github.com\/pointfreeco\/swift-validated\/issues\/2","Did you try `pod install --repo-update`?\r\n\r\n```\r\nThe Gemfile's dependencies are satisfied\r\nAnalyzing dependencies\r\nDownloading dependencies\r\nInstalling NonEmpty (0.1.0)\r\nInstalling PointFree-Validated (0.1.0)\r\nGenerating Pods project\r\nIntegrating client project\r\nPod installation complete! There is 1 dependency from the Podfile and 2 total pods installed.\r\n```\r\n\r\nWorks for me.\r\n\r\nI think your `master` specs repo is outdated.\r\n\r\n@stephencelis I am going to preemptively close this for now and I *will* re-open it if we figure out its a real CocoaPods issue.","Please reopen this issue.\r\n\r\nI reported it as a usability issue. I have users of my pod who are reporting issues because it's a new pod and they have a local specs repo that is out of date. I think CocoaPods should provide better UX and provide a suggested solution to run `pod repo update` whenever it encounters this error.","Apologies for my fast response. I thought you meant you couldn't install it at all.","Welp...I could have _sworn_ this was already tracked.\r\n\r\nYou are right this is a good change!","PR: https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/8071","This has gotten better but I think the original issue is more about making it smarter\/automatic instead of manual. Keeping this open.","Hey I've just noticed that this is causing some issues in our CI system as well. \r\n\r\nWould this also be a sensible error condition to return `31` as the exit code? The scenario here seems very similar to the rationale behind adding this originally in https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/6033"],"labels":["t1:enhancement","d1:easy","help wanted"]},{"title":"\ud83c\udf08 Feature request: lint with xcpretty","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\nI use `pod lib lint` to check my pod on Travis CI. While this is very convenient, it has two problems:\r\n1. By default it's very quiet -- for a few long moments you don't know what's going on. As a side effect, it may cause Travis to abort your build because there's no output for a long time.\r\n2. The verbose flag is **way** too verbose. Clearly, it's meant for debugging the build process itself. As a result, the output is not pretty.\r\n\r\nWhat I'm looking for is a middle ground: lint and show xcodebuild output with xcpretty (or similar). \r\n\r\nAlternatively (if [feature creep](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md#feature-requests) is your concern), add a `lib lintapp` command that generates a \"lint\" app (the temporary app generated by `pod lib lint`), allowing me to just run `xcodebuild | xcpretty` (or whatever).","comments":["I'm a plus one on this, I think a `--xcpretty` flag might make sense. It shouldn't 't be the responsibility of cocoapods to make sure it's installed and set up right, but to make sure that the output is correctly piped through xcpretty.\r\n\r\nYou should give it a shot \ud83d\udc4d ","sure!"],"labels":["t1:enhancement","d2:moderate","help wanted"]},{"title":"Feature Request: Add nested Development Pods folder support","body":"\r\n\r\n* [\u221a ] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\npod install\r\n\r\n## What did you expect to happen?\r\n\r\nAll My codes are located in local folder as developement pods to make business code modularization. \r\nI want to find some way to nest the Developement Pods folder in Xcode.\r\n\r\n\r\n## What happened instead?\r\n\r\nAll the \"Developement Pods\" flatten display in Xcode\r\n\r\n\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin17]\r\n    RubyGems : 2.7.6\r\n        Host : Mac OS X 10.13.6 (17G65)\r\n       Xcode : 9.4.1 (9F2000)\r\n         Git : git version 2.18.0\r\nRuby lib dir : \/usr\/local\/Cellar\/ruby\/2.5.1\/lib\r\nRepositories : facebook - https:\/\/github.com\/facebook\/Sonar.git @ d0ecb46d646e0f74f8f019307f721496781331ba\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ 3bfcbda19f4246e040df61c7cbfb46e3305d4ba2\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate  : 1.0.2\r\ncocoapods-dependencies : 1.1.0\r\ncocoapods-packager     : 1.5.0\r\ncocoapods-plugins      : 1.0.0\r\ncocoapods-search       : 1.0.0\r\ncocoapods-stats        : 1.0.0\r\ncocoapods-trunk        : 1.3.0\r\ncocoapods-try          : 1.1.0\r\n```\r\n\r\n\r\n## Project that demonstrates the issue\r\n\r\n# None","comments":["Thanks! Could use anyones help for this and might be a good starting task for others."],"labels":["t1:enhancement","help wanted"]},{"title":"Nested targets incorrectly link to frameworks used by outer target","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: http:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n1. Create a new Xcode project with Unit Tests and UI Tests.\r\n2. Run `pod init`.\r\n3. Change Podfile's content to mine below.\r\n4. Run `pod install`.\r\n5. Run UI tests.\r\n\r\n## What did you expect to happen?\r\n\r\nThe generated `xcconfig` files for nested targets shouldn't include `OTHER_LDFLAGS` that links to frameworks used only by outer target.\r\n\r\n## What happened instead?\r\n\r\nThe generated `xcconfig` files for nested targets include `OTHER_LDFLAGS` that links to frameworks used only by outer target. It causes missing frameworks at runtime:\r\n\r\n> Runner[9970:76658] The bundle \u201cPodTestUITests\u201d couldn\u2019t be loaded because it is damaged or missing necessary resources. Try reinstalling the bundle.\r\n> 2018-08-07 10:45:57.812016-0500 PodTestUITests-Runner[9970:76658] (dlopen_preflight(\/Users\/lwanh\/Library\/Developer\/Xcode\/DerivedData\/PodTest-bbbnvmyapbeuaugvtkrbrjuvrmkv\/Build\/Products\/Debug-iphonesimulator\/PodTestUITests-Runner.app\/PlugIns\/PodTestUITests.xctest\/PodTestUITests): Library not loaded: @rpath\/Alamofire.framework\/Alamofire\r\n>   Referenced from: \/Users\/lwanh\/Library\/Developer\/Xcode\/DerivedData\/PodTest-bbbnvmyapbeuaugvtkrbrjuvrmkv\/Build\/Products\/Debug-iphonesimulator\/PodTestUITests-Runner.app\/PlugIns\/PodTestUITests.xctest\/PodTestUITests\r\n>   Reason: image not found)\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin17]\r\n    RubyGems : 2.7.6\r\n        Host : Mac OS X 10.13.3 (17D47)\r\n       Xcode : 9.2 (9C40b)\r\n         Git : git version 2.18.0\r\nRuby lib dir : \/usr\/local\/Cellar\/ruby\/2.5.1\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 4e8c81d0725a4c383b4f2d4c181edffb15bda8b4\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\nplatform :ios, '10.0'\r\n\r\ntarget 'PodTest' do\r\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\r\n  use_frameworks!\r\n\r\n  # Pods for PodTest\r\n  pod 'Swinject'\r\n  pod 'Moya'\r\n  pod 'KeychainAccess'\r\n  pod 'XCGLogger'\r\n  pod 'lottie-ios'\r\n  pod 'Firebase\/Core'\r\n  pod 'Firebase\/Database'\r\n  pod 'Firebase\/RemoteConfig'\r\n  pod 'Firebase\/Auth'\r\n  pod 'Firebase\/Performance'\r\n  pod 'GoogleMaps'\r\n  pod 'GooglePlaces'\r\n\r\n  target 'PodTestTests' do\r\n    inherit! :search_paths\r\n    # Pods for testing\r\n  end\r\n\r\n  target 'PodTestUITests' do\r\n    inherit! :search_paths\r\n    # Pods for testing\r\n  end\r\n\r\nend\r\n```","comments":["Please provide a sample. \r\n\r\nDoes `PodTestUITests` require `PodTest` as its app host? If so then it should work.\r\n\r\nIf it does not then you need to remove `inherit! :search_paths` from it since that will only bring you in the search paths and not any linker flags.","If you are also using `use_frameworks!` as it appears then you are OK to remove `inherit! :search_paths` because linking the frameworks twice should be OK as they will get loaded once.","Sample project: https:\/\/github.com\/an0\/PodTest.\r\n\r\n`PodTestUITests` doesn't need(shouldn't have) those linker flags because it shouldn't link to those frameworks.","@an0 confirmed. This is not about linking so much as much about not copying the framework to the right place. The problem is that your `PodTestUITests` target has `productType = \"com.apple.product-type.bundle.ui-testing\";` compared to your other target `PodTestTests` which has `productType = \"com.apple.product-type.bundle.unit-test\";`.\r\n\r\nThis is why `PodTestTests` works if you CMD+U it.\r\n\r\nIf you see your error message, the way `ui-testing` bundle works it creates a `PodTestUITests-Runner.app` that must have the frameworks embedded into it for them to be loaded or we switch the framework load path.\r\n\r\nDefinitely an issue with UI test bundles and probably a bit moderate to resolve.","This is also in 1.6.0 (master). double linking the frameworks doesnt make any difference. The frameworks are not copied there to be found.\r\n\r\nIf it were static libraries it would cause duplicate symbols so it must be something we think about.","I don't understand why `PodTestUITests-Runner.app` needs those frameworks at all. Only the host app needs them, right? The UI tests app only drives the host app, doesn't it?\r\n\r\nAlso, remove all pods from `Podfile` except `XCGLogger` then try again. You'll see that there are no `OTHER_LDFLAGS` in the generated `xcconfig` files for `PodTestTests` and `PodTestUITests` and everything works, which is the expected result.\r\n\r\nSo I still think it is a linking issue.","`PodTestUITests-Runner.app` is not a thing CocoaPods creates its made by Xcode because of the `ui-testing` bundle. This is just how Xcode decides to do this.\r\n\r\nI tried with `XCGLogger` and got a similar error message, did you try to `import` it first? \r\n\r\nEither way this is either fixed by \"not linking\" as you say (I commented out the `OTHER_LDFLAGS` from `Pods-PodTestUITests.debug.xcconfig`) and it worked. Or by copying the frameworks into the `Runner.app` that Xcode creates.\r\n\r\n","Where do you `import XCGLogger`? You should only import that in the host app not in `PodTestUITests`. That's my whole point: `PodTestUITests` don't use those frameworks so shouldn't link to them. CocoaPods shouldn't add `OTHER_LDFLAGS` to `Pods-PodTestUITests.debug.xcconfig` in the first place(isn't that the expected behavior of `inherit! :search_paths`?).\r\n\r\nAlso, with only `pod 'XCGLogger'` do you see `OTHER_LDFLAGS` in `Pods-PodTestUITests.debug.xcconfig`? I believe you don't and that's correct. So why do we see it with the complete pod list? That's inconsistent behavior, smells a bug(and the root cause) to me.","@an0 you can start exploring for a fix here https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/target\/build_settings.rb\r\n\r\nI'd be glad to review a PR!","I'd like to help with a PR but I don't know Ruby.","I ran into this same issue w\/ my UI tests (\"Library not loaded: @rpath\/Alamofire.framework\/Alamofire\").  If I comment out the Firebase pods from the Podfile, then I don't see the error.\r\n\r\nCommenting out \"inherit! :search_paths \" from the UItests also fixed the issue.","@dnkoutso, I'd like to try to pick up the work on this issue.  \r\n\r\nThis is a fairly common issue with Unity integrations since their Unity 2019.3 release.  The short story is that Unity builds its game engine into a dynamic framework target, embedded in an app target.  Dynamic Library pods that are used in the game (often embedded via [Google's Unity External Dependency Manager](https:\/\/github.com\/googlesamples\/unity-jar-resolver)) will fail to embed with the dyld load error:\r\n`Error loading [path]\/Test.app\/Frameworks\/UnityFramework.framework\/UnityFramework:  \r\n  dlopen([path]\/Test.app\/Frameworks\/UnityFramework.framework\/UnityFramework, 265): \r\n     Library not loaded: @rpath\/\r\n  Referenced from: [path]\/Unity-iPhone.app\/Frameworks\/UnityFramework.framework\/UnityFramework\r\n  Reason: image not found`\r\nunless the Pod is added to both the UnityFramework target and the App target.\r\n\r\nThe issue with adding the dynamic pod to the app target is that when there's also static framework pods used by the UnityFramework target, they get added to the OTHER_LDFLAGS of the app target, resulting in the static pods being linked into both executables:\r\n`Class PodsDummy_TestPod is implemented in both \/private\/var\/containers\/Bundle\/Application\/75EB8444-64D6-4C1E-B82F-CDD7A95F06B4\/unitysampleapp.app\/unitysampleapp (0x104470f60) and \/private\/var\/containers\/Bundle\/Application\/75EB8444-64D6-4C1E-B82F-CDD7A95F06B4\/unitysampleapp.app\/Frameworks\/UnityFramework.framework\/UnityFramework (0x10a49c308). One of the two will be used. Which one is undefined.`"],"labels":["t2:defect","s2:confirmed","d2:moderate"]},{"title":"Feature request: Pre-downloading progress","body":"Hello guys) Thanks for the tool)\r\n\r\nSince the Pre-downloading is very slow time to time it would be very good to add the progress bar in order to understand, that the downloading didn't stack.","comments":["Will it ever be implemented ?"],"labels":["t1:enhancement","d2:moderate"]},{"title":"Always update the pod with `:branch` when `pod install`","body":"I have a Podfile: \r\n```\r\npod 'VideoEditor', :git=>'git@gitlab.com\/test\/VideoEditor', :branch=>'master'\r\n```\r\nThere is a `Podfile.lock` and the `VideoEditor` have a commit hash in the `Podfile.lock`.\r\n\r\nWhen I run `pod install`, CocoaPods always update `VideoEditor` to latest branch and the commit hash has been updated in the `Podfile.lock`:\r\n```\r\n-> Pre-downloading: `ServiceKit` from `git@gitlab.com\/test\/ServiceKit.git`, branch `master`\r\n  $ \/usr\/local\/bin\/git ls-remote git@gitlab.com\/test\/ServiceKit.git master\r\n  80ea7fc7e22f1eddd7927e8941ac9fc02ff1ad88\trefs\/heads\/master\r\n  > Copying ServiceKit from `\/Users\/whirlwind\/Library\/Caches\/CocoaPods\/Pods\/External\/ServiceKit\/392a35c5e06aa95b7f16ec24aa5c7974` to `Pods\/ServiceKit`\r\n-> Pre-downloading: `VideoEditor` from `git@gitlab.com\/test\/VideoEditor`, branch `master`\r\n  $ \/usr\/local\/bin\/git ls-remote git@gitlab.com\/test\/VideoEditor master\r\n  717d2392bdf3453378837a63bfb42285789554fe\trefs\/heads\/master\r\n > Http download\r\n   $ \/usr\/bin\/curl -f -L -o \/var\/folders\/wc\/3xbpwz1s7kbc3970y2kq8mvh0000gn\/T\/d20180727-95192-1lsd49b\/file.zip\r\n   https:\/\/gitlab.com\/test\/VideoEditor\/repository\/archive.zip?ref=717d2392bd&private_token=****** --create-dirs --netrc-optional --retry 2\r\n     % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                    Dload  Upload   Total   Spent    Left  Speed\r\n   100  125M  100  125M    0     0  4191k      0  0:00:30  0:00:30 --:--:-- 3825k\r\n```\r\n\r\nIt seems that CocoaPods always check the commit hash for the branch, and download the source code ( skip if there is a cache ), then copy the cache into `Pods\/`.\r\nCocoaPods never check the commit hash in the `Podfile.lock`, so it always update the branch.\r\n\r\nI think that it is a bug and `pod install` should pick the commit hash in the `Podfile.lock` and download it. if I run `pod update VideoEditor` should check the latest branch and ignore the commit hash in the `Podfile.lock`. Is it right?","comments":["That sounds right, though it looks like you\u2019re actually downloading that pod via HTTP?","I have a plugin to hook the downloader, convert the `git clone` to `curl`. It will get a smaller zip.","Please try without that plugin, it might be causing the issue you're seeing?","I did. And the bug has been found at CocoaPods v1.3.1 and v1.5.3, the plugin is work only for v1.5.3.\r\nThe plugin hook the downloader and the `ls-remote` is called before the downloader.","Have the same issue. I think it's not predictable behaviour, that `pod install` updates some of your pods ignoring `.lock` file."],"labels":["t2:defect","d2:moderate"]},{"title":"Enable `pod spec lint` to lint multiple subspecs","body":"* [X ] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n```\r\n$ git clone git@github.com:firebase\/firebase-ios-sdk.git\r\n$ cd firebase-ios-sdk\r\n$ pod spec lint GoogleUtilities.podspec --subspec=Environment --subspec=Network\r\n[!] Unknown option: `--subspec=Environment`\r\nDid you mean: --subspec=NAME?\r\n```\r\n\r\n## What did you expect to happen?\r\n\r\nLint both subspecs\r\n\r\n## What happened instead?\r\n\r\nError\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-darwin17]\r\n    RubyGems : 2.6.13\r\n        Host : Mac OS X 10.13.6 (17G65)\r\n       Xcode : 9.4 (9F1027a)\r\n         Git : git version 2.17.0.441.gb46fe60e1d-goog\r\nRuby lib dir : \/Users\/paulbeusterien\/.rbenv\/versions\/2.4.0\/lib\r\nRepositories : cpdc-eap-spec - sso:\/\/cpdc-eap\/spec @ 0fd9263ede63bee9aec1034b38771950cd7e147a\r\n               cpdc-internal-spec - sso:\/\/cpdc-internal\/spec @ ed1a70e577891615717ca53265825a14643206d6\r\n               cpdc-test-spec - sso:\/\/cpdc-test\/spec @ cb5549337c0b42005d27f997f5b81f29af4c55a3\r\n               googlesource-nearby - sso:\/\/cpdc-eap.googlesource.com\/Nearby.git @ 85d088b78e5c37f936a7fc64be50e24c5fd2dd0f\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ 1eb7d17a04feaac8b98b45f7bb2b5c8076ad91cf\r\n               paulb777 - https:\/\/github.com\/paulb777\/Specs.git @ a2e7ea043e550aaff01d17cabb7334cf4254d196\r\n               paulb777-1 - git@github.com:paulb777\/Specs.git @ a2e7ea043e550aaff01d17cabb7334cf4254d196\r\n               temp-specs - git@github.com:paulb777\/Specs.git @ 8827ae16a20813bb48e28532fc26e903c70c7274\r\n               user-paulbeusterien-specs - sso:\/\/user\/paulbeusterien\/Specs @ 028bd284cff3a048426714dda850de01327c3659\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/paulbeusterien\/.rbenv\/versions\/2.4.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\nclaide-plugins         : 0.9.2\r\ncocoapods-deintegrate  : 1.0.2\r\ncocoapods-dependencies : 1.1.0\r\ncocoapods-generate     : 1.0.0\r\ncocoapods-packager     : 1.5.0\r\ncocoapods-plugins      : 1.0.0\r\ncocoapods-search       : 1.0.0\r\ncocoapods-stats        : 1.0.0\r\ncocoapods-trunk        : 1.3.0\r\ncocoapods-try          : 1.1.0\r\ncocoapods_debug        : 0.1.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/firebase\/firebase-ios-sdk\r\n","comments":["Maybe it should be `--subspecs=[comma separated list]` to match with other args that accept multiple values","Yes I think what @amorde said should be fine, although maybe we should not delete the current parameter.","`--subspecs=[comma separated list]` sgtm"],"labels":["t1:enhancement","d2:moderate"]},{"title":"Test spec dependency symbols shipped in release builds","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\nWhen a test spec is specified in a Podfile, it will take on the test spec's dependencies and put them into the target corresponding to the pod. \r\n`pod 'LocalPod', :path => '.\/LocalPod', :testspecs => ['Tests']`\r\n\r\nThis means that, even if the dependency is never used outside of the test specs, they are still bundled into the target, and the symbols in the unused dependency end up being shipped in production builds.\r\n\r\nThe important parts of the pod spec for \"LocalPod\" mentioned above is as below:\r\n```ruby\r\ns.subspec 'Core' do |subspec|\r\n  subspec.source_files = 'Source'\r\nend\r\n\r\ns.default_subspecs = 'Core'\r\n\r\ns.subspec 'TestMocks' do |subspec|\r\n  subspec.source_files = 'Tests\/Mocks\/*.swift'\r\nend\r\n\r\ns.test_spec 'Tests' do |test_spec|\r\n  test_spec.source_files = 'Tests\/*.swift'\r\n  test_spec.dependency 'LocalPod\/TestMocks'\r\nend\r\n```\r\n\r\n## What did you do?\r\n- `pod install`\r\n- archive the app (there is no team or provisioning profile attached, that will have to be resolved first)\r\n- unzip the output IPA (`unzip app.ipa`)\r\n- run `\/usr\/bin\/nm -Uj \"\/Path_to_output_ipa\/Payload\/TransitiveTestspecDependency.app\/Frameworks\/LocalPod.framework\/LocalPod\"`\r\n\r\n## What did you expect to happen?\r\nThere shouldn't be any symbols containing `MockClassForSomething`. If I removed the test spec specification in the Podfile so it looks like `pod 'LocalPod', :path => '.\/LocalPod'`, the output is\r\n```\r\n_LocalPodVersionNumber\r\n_LocalPodVersionString\r\n_OBJC_CLASS_$_PodsDummy_LocalPod\r\n_OBJC_METACLASS_$_PodsDummy_LocalPod\r\n__T08LocalPod013UsefulClassInaB0VMa\r\n__T08LocalPod013UsefulClassInaB0VMn\r\n__T08LocalPod013UsefulClassInaB0VN\r\n```\r\n\r\n## What happened instead?\r\nHere's an output locally on my machine:\r\n```\r\n_LocalPodVersionNumber\r\n_LocalPodVersionString\r\n_OBJC_CLASS_$_PodsDummy_LocalPod\r\n_OBJC_METACLASS_$_PodsDummy_LocalPod\r\n__T08LocalPod013UsefulClassInaB0VMa\r\n__T08LocalPod013UsefulClassInaB0VMn\r\n__T08LocalPod013UsefulClassInaB0VN\r\n__T08LocalPod21MockClassForSomethingCACycfC\r\n__T08LocalPod21MockClassForSomethingCACycfc\r\n__T08LocalPod21MockClassForSomethingCMa\r\n__T08LocalPod21MockClassForSomethingCMm\r\n__T08LocalPod21MockClassForSomethingCMn\r\n__T08LocalPod21MockClassForSomethingCN\r\n__T08LocalPod21MockClassForSomethingCfD\r\n__T08LocalPod21MockClassForSomethingCfd\r\n```\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-darwin16]\r\n    RubyGems : 2.5.1\r\n        Host : Mac OS X 10.13.5 (17F77)\r\n       Xcode : 9.4.1 (9F2000)\r\n         Git : git version 2.15.2 (Apple Git-101.1)\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ dce8b25a6829d611e5c06440af48874d8d589812\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\ntarget 'TransitiveTestspecDependency' do\r\n  use_frameworks!\r\n\r\n  pod 'LocalPod', :path => '.\/LocalPod', :testspecs => ['Tests']\r\n\r\nend\r\n```\r\n\r\n\r\n## Project that demonstrates the issue\r\nhttps:\/\/github.com\/allen-zeng\/TransitiveTestspecDependency\r\n","comments":["@allen-zeng thanks for the report, this is most likely fixed with 1.6.0 but I have not yet verified.","Thanks @dnkoutso - is there an alpha\/beta version I could try?","https:\/\/guides.cocoapods.org\/using\/unreleased-features","I added a Gemfile like so\r\n```ruby \r\nsource 'https:\/\/rubygems.org'\r\n\r\ngem 'cocoapods', :git => 'https:\/\/github.com\/CocoaPods\/CocoaPods.git'\r\ngem 'cocoapods-core', :git => 'https:\/\/github.com\/CocoaPods\/Core.git'\r\n```\r\n\r\nAnd then performed these steps:\r\n1. `bundle install`\r\n2. `rm -rf Pods`\r\n3. `bundle exec pod install`\r\n4. archive the app\r\n5. unzip the ipa\r\n6. run `\/usr\/bin\/nm -Uj \"\/Path_to_output_ipa\/Payload\/TransitiveTestspecDependency.app\/Frameworks\/LocalPod.framework\/LocalPod\"`\r\n\r\nUnfortunately the output is still the same. The mock symbols are still in the output framework.","I think then this might be because it's using subspecs, and it's all getting merged in to the one built product :\/ I'd probably have to recommend not using subspecs in this case","I must concede that the use of a subspec was not my top choice. I didn't see an alternative though. I tried putting the mock inside of a testspec but it turns out that it's not possible to consume a testspec like a subspec.\r\n\r\nI'm guessing the only option right now is to have a standalone pod purely for the mocks?","That\u2019s what we do at the moment. It\u2019s not ideal, but subspecs dont (yet?) work for this purpose. We\u2019ve thought about introducing some idea of a \u201ctesting_spec\u201d, but only very briefly. ","A \"testing_spec\" would make the intention very clear, and it would prevent accidentally including them.\r\n\r\nThat said, I'm not entirely sure how big a problem accidental inclusions of these pods is. So maybe a much simpler solution is to use a pod spec with a proper name \"SomethingSomethingMocks\" so it's clear that they shouldn't be used.","Yes this can be marked as an enhancement to basically not merge all subspecs into a single target.","> Yes this can be marked as an enhancement to basically not merge all subspecs into a single target.\r\n\r\n@dnkoutso I think the fix for this could have a smaller scope than that.\r\n\r\nI think the issue is that `test_spec`s aren't treated the same as user-created targets in terms of scoping for dependency resolution and subspec unionization.\r\n\r\nIf @allen-zeng converted the `test_spec` `Tests` to a target in the main project and specified `pod 'LocalPod\/TestMocks', :path => '.\/LocalPod'` for the `Tests` target, then I believe CocoaPods will generate 2 targets for LocalPod, one for use in the original `TransitiveTestspecDependency` target, and another for use in the new `Test` target. Consider:\r\n\r\n```ruby\r\n# LocalPod\/LocalPod.podspec\r\n\r\ns.subspec 'Core' do |subspec|\r\n  subspec.source_files = 'Source'\r\nend\r\n\r\ns.default_subspecs = 'Core'\r\n\r\ns.subspec 'TestMocks' do |subspec|\r\n  subspec.source_files = 'Tests\/Mocks\/*.swift'\r\nend\r\n```\r\n\r\n```ruby\r\n# Podfile\r\n\r\nuse_frameworks!\r\n\r\ntarget 'TransitiveTestspecDependency' do\r\n  pod 'LocalPod', :path => '.\/LocalPod'\r\nend\r\n\r\ntarget 'Tests' do\r\n  pod 'LocalPod\/TestMocks', :path => '.\/LocalPod'\r\nend\r\n```\r\n\r\nThis is further illustrated by keeping the `test_spec` but moving the dependency `:testspecs => ['Tests']` to another target in the `Podfile`:\r\n\r\n```ruby\r\n# LocalPod\/LocalPod.podspec\r\n\r\ns.subspec 'Core' do |subspec|\r\n  subspec.source_files = 'Source'\r\nend\r\n\r\ns.default_subspecs = 'Core'\r\n\r\ns.subspec 'TestMocks' do |subspec|\r\n  subspec.source_files = 'Tests\/Mocks\/*.swift'\r\nend\r\n\r\ns.test_spec 'Tests' do |test_spec|\r\n  test_spec.source_files = 'Tests\/*.swift'\r\n  test_spec.dependency 'LocalPod\/TestMocks'\r\nend\r\n```\r\n\r\n```ruby\r\n# Podfile\r\n\r\nuse_frameworks!\r\n\r\ntarget 'TransitiveTestspecDependency' do\r\n  pod 'LocalPod', :path => '.\/LocalPod'\r\nend\r\n\r\ntarget 'AnotherTarget' do\r\n  pod 'LocalPod', :path => '.\/LocalPod', :testspecs => ['Tests']\r\nend\r\n```\r\nHere the 2 user targets create different dependency scopes, so you have `TransitiveTestspecDependency` relying on a version of `LocalPod` that includes only the `Core` subspec, while `AnotherTarget` links to the same `LocalPod` target that the `Tests` `test_spec` links to, which includes both `Core` and `TestMocks` subspecs.\r\n\r\nThis implies that subspecs are unioned within a scope, where scope is being defined as a user target (among other things I'm sure), while a `test_spec` target doesn't count as a user target for the purpose of scoping for this unionization.\r\n\r\nI believe that if `test_spec`s created a separate scope in the same way as user targets that @allen-zeng's issue would be solved.\r\n\r\nThis also implies a workaround, which is to not include `:testspecs => ['Tests']` in the same target that you plan on distributing, but to add it to a different user target within the `Podfile`."],"labels":["t1:enhancement","d3:hard","s7:workaround available"]},{"title":"More than one spec found for 'UITableView\\+FDTemplateLayoutCell'","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: http:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\nRun `pod spec which UITableView+FDTemplateLayoutCell --show-all`\r\n\r\n## What did you expect to happen?\r\n\r\nShow all the file path of podspecs of  `UITableView+FDTemplateLayoutCell`.\r\n\r\n## What happened instead?\r\n\r\n```\r\n[!] More than one spec found for 'UITableView\\+FDTemplateLayoutCell':\r\nUITableView+FDTemplateLayoutCell, UITableView+FDTemplateLayoutCell_Bell\r\n```\r\n\r\n## CocoaPods Environment\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.3.7p456 (2018-03-28 revision 63024) [universal.x86_64-darwin18]\r\n    RubyGems : 2.5.2.3\r\n        Host : Mac OS X 10.14 (18A326h)\r\n       Xcode : 10.0 (10L201y)\r\n         Git : git version 2.17.1\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.3\/usr\/lib\r\nRepositories : artsy - https:\/\/github.com\/artsy\/Specs.git @ a5dabed3ee8b95be68f23b51ede07eb653155ba6\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ 6bea82723cbb1b98515d816a6e019bfa6053c1d2\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\nclaide-plugins        : 0.9.2\r\ncocoapods-amimono     : 0.0.10\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-keys        : 2.0.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n\r\n## Project that demonstrates the issue\r\n\r\nN\/A\r\n","comments":["Looks like a name check is failing due to the shell escaping the \"+\" character with \"\\\\+\"","Actually looks like this isn't from the shell but somewhere else, but indeed the issue is the escaping \\","Same happens to me with \"GRDB.swift\""],"labels":["t2:defect","d1:easy","help wanted"]},{"title":"'pod trunk push' should check email before building podspec","body":"It's a shame to complete the long validation process only to get that you have the wrong email registered. I believe that the email check should be done sooner.","comments":["Yeah, sounds like a good idea, you'll need to add a route to trunk for verifying and update the cocoapods-trunk gem \ud83d\udc4d "],"labels":["t1:enhancement","d1:easy"]},{"title":"Source not added to target \/ duplicated ","body":"# Report\r\n\r\nWhen a pod spec specifies source files with identical names but from different directories only one of the files is added to the target (twice) whilst the other is not al all.\r\n\r\n## What did you do?\r\n\r\npod install with a development pod that contains source of\r\na\/source.m\r\nb\/source.m\r\n\r\n## What did you expect to happen?\r\n\r\nAdd both a\/source.m and b\/source.m added to the pods target\r\n\r\n## What happened instead?\r\n\r\na\/source.m appears twice under BuildPhases -> Compile Source whilst  b\/source.m is missing\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.3.3p222 (2016-11-21 revision 56859) [universal.x86_64-darwin17]\r\n    RubyGems : 2.5.2\r\n        Host : Mac OS X 10.13.4 (17E202)\r\n       Xcode : 9.3.1 (9E501)\r\n         Git : git version 2.15.1 (Apple Git-101)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.3\/usr\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 9ae48e58e17a55802ed2b41f3ff00dbc06f39c15\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n","comments":["I've reproduced and will debug in the next few days.","nice!","This is a bug with deterministic uuids and overlaps with #4370.   \r\n\r\nA workaround is adding `install! 'cocoapods', :deterministic_uuids => false` to the top of the Podfile.","`uuid_generator.rb` hashes the two files together since both of their paths are `source.m` and both of their sourceTree's are `<group>`.  There is not an obvious way to tell which group, since that is coming from a different tree.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Any updates here? Should we push to 1.8.0?","I'd be ok with pushing to 1.8.0\r\n\r\nI looked at this briefly, the issue is the way we use the path to generate UUIDs, and these both have the same relative path and are both in the same target. Haven't dug much deeper than that","pushed to 1.8.0.","Any updates here @paulb777 or @amorde or push to 1.10?","No updates from me, AFAIK my comment [above](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/7807#issuecomment-489394486) is still true","punting out of 1.10.","Agreed - the complexity of the fix might outweigh its value."],"labels":["s2:confirmed","s7:workaround available"]},{"title":"macOS only: Headers in `source_files` are copied into the output framework","body":"For more info, also see https:\/\/github.com\/grpc\/grpc\/pull\/15277#issuecomment-392121858.\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nIncluded the pod [`BoringSSL`](https:\/\/github.com\/grpc\/grpc\/blob\/master\/src\/objective-c\/BoringSSL.podspec) and ran `pod install` as usual.\r\n\r\n## What did you expect to happen?\r\n\r\nCompiling should create a macOS Framework with the proper directory structure (example):\r\n\r\n<img width=\"1127\" alt=\"screen shot 2018-05-28 at 10 33 17\" src=\"https:\/\/user-images.githubusercontent.com\/117466\/40605410-982320e8-6262-11e8-86d7-a77d83edb9f7.png\">\r\n\r\n## What happened instead?\r\n\r\nThe header files specified in `source_files` are copied verbatim to the output framework:\r\n\r\n<img width=\"1136\" alt=\"screen shot 2018-05-28 at 10 32 25\" src=\"https:\/\/user-images.githubusercontent.com\/117466\/40605429-a5c49fc4-6262-11e8-815a-ef65d878e457.png\">\r\n\r\nThis causes e.g. Gatekeeper's code signature verification to fail.\r\n\r\nFYI, these headers are _also_ listed in `private_headers`. They can't be removed from `source_files`, though, as that causes compilation under iOS to fail (see https:\/\/github.com\/grpc\/grpc\/pull\/15277#issuecomment-388503785).\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.0\r\n        Ruby : ruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-darwin16]\r\n    RubyGems : 2.6.14\r\n        Host : Mac OS X 10.12.6 (16G29)\r\n       Xcode : 9.3 (9E145)\r\n         Git : git version 2.15.1 (Apple Git-101)\r\nRuby lib dir : \/usr\/local\/Cellar\/ruby\/2.4.2_1\/lib\r\nRepositories : artsy - https:\/\/github.com\/artsy\/Specs.git @ 2a9ddb8e56aa3830d12c0dafafd82307684bcaad\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ 5f42c393b6cc224b693ec882293900c6b1971c45\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\n# platform :ios, '9.0'\r\n\r\ntarget 'source_files_example' do\r\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\r\n  use_frameworks!\r\n\r\n  # Pods for source_files_example\r\n  pod 'BoringSSL'\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/MrMage\/source_files_example","comments":["Are you saying that these private headers should not be copied at all? This is the logic that sets up a script phase to copy them:\r\n\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/installer\/xcode\/pods_project_generator\/pod_target_installer.rb#L710-L718","As far as I know, the point of private headers is that they are available to Xcode for compilation, but not copied to the framework \u2014 similar to Xcode's \"Private\" option for headers:\r\n\r\n<img width=\"181\" alt=\"screen shot 2018-05-28 at 16 50 37\" src=\"https:\/\/user-images.githubusercontent.com\/117466\/40619942-4db480ee-6297-11e8-9775-4c8b0906a2f3.png\">\r\n\r\nDo note that the headers get copied because they are part of `source_files`, though, not because they are in `private_headers`. But as explained above, removing these headers from `source_files` is not an option in this case :-\/ I'd suggest that the contents of `source_files` should never get copied, actually \u2014 those are for compilation, after all.","A lot of this code predates me and I am uncertain why these copy headers script phases exist for `Public` and for `Private` ones as the code suggests. It seems it has to do with `header_mappings_dir` as well.\r\n\r\nI am sorry I cant immediately figure this one out as I first need to understand the existence of this script phase being added to begin with.","This code is fairly old as well and a lot of things may have change since then for us to re-assess if we need this further.","Thanks for looking into this at all! I understand that it would be good to be sure first that this does not break any other users of CocoaPods. Not sure what the best way to ensure that would be, though. For now, I have a manual build phase that strips these headers out of the frameworks before code-signing, but that is not optimal.\r\n\r\nFYI, here are all the build phases generated by CocoaPods:\r\n\r\n<img width=\"802\" alt=\"screen shot 2018-05-28 at 17 12 33\" src=\"https:\/\/user-images.githubusercontent.com\/117466\/40620777-5c8c314a-629a-11e8-8630-2059bbcfbcc5.png\">\r\n\r\n<img width=\"803\" alt=\"screen shot 2018-05-28 at 17 12 47\" src=\"https:\/\/user-images.githubusercontent.com\/117466\/40620779-5e852a4c-629a-11e8-9cb7-0c30ed017c4b.png\">\r\n\r\nI suspect that most of the \"Copy ... Private Headers\" phases could be removed.","Yeap saw these script phases being added. Still need to know why it was added. Possibly because of `header_mappings_dir`. \r\n\r\nDo you just strip the private ones or all?","I just strip the ones not in the \"Headers\/\" directory, which is where headers belong. Note that the headers might be in the wrong directory because of the \"..\/..\" in the path, but I'd say that \"..\/..\" shouldn't be applied to the destination path in the framework. Also, I'd say that source files shouldn't be copied at all, anyway ;-)","Check this old issue out https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/5313","and this https:\/\/github.com\/realm\/realm-cocoa\/commit\/e4af8bee7c2f3c8aa90cd4458d3775de22add4ff","Hmm, I think my case is slightly different:\r\n\r\n1. Private headers from `source_files` are copied verbatim to the framework.\r\n2. Those private headers get copied to the wrong directory, because they contain a `..\/..` path.\r\n\r\nSo, what I would suggest is dropping initial `..` portions when creating \"Copy Headers\" phases to avoid the headers ever being placed outside the `PrivateHeaders` directory.\r\n\r\n\/ccing @muxi who might be able to provide more insights into the particular situation with gRPC, and whether that would work.","> Those private headers get copied to the wrong directory, because they contain a ..\/.. path.\r\n\r\nThis would be the thing to fix. Private headers are supposed to be copied to the `PrivateHeaders` directory in the framework","Alternatively, we could just error out since there are headers that live outside of the `header_mappings_dir`, and that isn't really supported","How about a combination \u2014 removing initial \"..\" prefix folders and emitting a warning instead of an error?","Would love the PR that does either of the suggested solutions. ","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","@MrMage any luck on this issue? I just got pinged about it for being stale","I'm afraid I didn't have any time to clean this up. I am using this `Podfile` hook now:\r\n\r\n```ruby\r\npost_install do |installer|\r\n\tinstaller.pods_project.targets.each do |target|\r\n\t\tif target.name.start_with?('BoringSSL') or target.name.start_with?('gRPC')\r\n\t\t\t# Ensure uniqueness of the files listed in the \"Copy Headers\" steps.\r\n\t\t\ttarget.build_phases.each do |phase|\r\n\t\t\t\tif phase.is_a?(Xcodeproj::Project::Object::PBXHeadersBuildPhase)\r\n\t\t\t\t\tpath_to_ref = {}\r\n\t\t\t\t\tphase.files_references.uniq.each do |file|\r\n\t\t\t\t\t\tpath_to_ref[file.path] = file\r\n\t\t\t\t\t\tphase.remove_file_reference file\r\n\t\t\t\t\tend\r\n\t\t\t\t\tpath_to_ref.values.each do |ref|\r\n\t\t\t\t\t\tphase.add_file_reference ref\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n```","Seems like it should be easy to make a PR and test for it. I might take it myself ","It's also true that Public headers are copied to the same place.","To account for PRIVATE_HEADERS_FOLDER_PATH and PUBLIC_HEADERS_FOLDER_PATH being {framework_name}\/Versions\/A\/Headers instead of {framework_name}\/Headers, to have comparable behavior as iOS.\r\n\r\n`$(PRIVATE_HEADERS_FOLDER_PATH)\/..\/..\/` should be changed to `$(PRIVATE_HEADERS_FOLDER_PATH)\/..\/..\/..\/..\/` and similarly for PUBLIC_HEADERS_FOLDER_PATH.","MrMage's post_install script didn't work for my project, which imports firebase-ios-sdk so I put together the below. Everything seems to be working now. I'm new to CocoaPods and Ruby so any feedback is welcome.\r\n```\r\npost_install do |installer|\r\n  installer.pods_project.targets.each do |target|\r\n    if target.name.start_with?('BoringSSL') or target.name.start_with?('gRPC')\r\n      target.build_phases.each do |phase|\r\n        if phase.is_a?(Xcodeproj::Project::Object::PBXCopyFilesBuildPhase) and phase.name.end_with?('Headers')\r\n          if phase.dst_path.start_with? '$(PUBLIC_HEADERS_FOLDER_PATH)\/..\/..\/'\r\n            phase.dst_path.sub! '$(PUBLIC_HEADERS_FOLDER_PATH)\/..\/..\/', '$(PUBLIC_HEADERS_FOLDER_PATH)\/..\/..\/..\/..\/'\r\n          end\r\n          if phase.dst_path.start_with? '$(PRIVATE_HEADERS_FOLDER_PATH)\/..\/..\/'\r\n            phase.dst_path.sub! '$(PRIVATE_HEADERS_FOLDER_PATH)\/..\/..\/', '$(PRIVATE_HEADERS_FOLDER_PATH)\/..\/..\/..\/..\/'\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n```"],"labels":["t2:defect","s2:confirmed","s3:detailed","s7:workaround available"]},{"title":"Pods project doesn't inherit settings for custom build configurations","body":"* [x] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nInstalled pods with a custom build configuration in my project.\r\n\r\n## What did you expect to happen?\r\n\r\nMy project's build configurations and their settings should be reflected exactly (minus pod specific settings for each pod target) in the Pods project. This ensure that optimization settings, build parameter, and other flags match, which have been issues before.\r\n\r\n## What happened instead?\r\n\r\nPods project apparently sets one set of default values for the Debug configuration (and in fact, always has a Debug configuration, even when I rename my project's Debug configuration to NewDebug), and a different set which are applied for all non-Debug configurations. \r\n\r\nThis forced Debug configuration that isn't reflected in the main project is perhaps the strangest thing here.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.2\r\n        Ruby : ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin17]\r\n    RubyGems : 2.7.6\r\n        Host : Mac OS X 10.13.4 (17E202)\r\n       Xcode : 9.3.1 (9E501)\r\n         Git : git version 2.15.1 (Apple Git-101)\r\nRuby lib dir : \/Users\/jshier\/.rvm\/rubies\/ruby-2.5.1\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 79f90ff6d81518dc3bacb837ff053946a6d1bf0b\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/jshier\/.rvm\/gems\/ruby-2.5.1@buildsettingsshouldmatch\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '11.0'\r\n\r\ntarget 'BuildSettingsShouldMatch' do\r\n  use_frameworks!\r\n\r\n  pod 'Alamofire'\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/jshier\/BuildSettingsShouldMatch\r\n","comments":["Did not try the sample yet (but will) but making sure this is not missing:\r\n\r\n```ruby\r\nplatform :ios, '11.0'\r\n\r\nproject 'BuildSettingsShouldMatch', 'NewDebug' => :debug\r\n\r\ntarget 'BuildSettingsShouldMatch' do\r\n  use_frameworks!\r\n\r\n  pod 'Alamofire'\r\nend\r\n```\r\n\r\nI think the default `Debug` is actually added by Xcode for a new project once generated.","@jshier did you get a chance to try the above?","Sorry, didn't realize you wanted me to try that. It may have made the LLVM optimization level match my `OtherDebug` optimization level, but it didn't affect my Swift optimization or compilation mode settings. All of those still match the release mode settings.","interesting, thanks will double check it myself and see if we can fix this.\r\n\r\nSorry I should have been explicit.","@jshier from digging at the code there is nothing that transfers over these values. The reason why `SWIFT_OPTIMIZATION_LEVEL` is because its the default setting set from Xcodeproj gem (see here https:\/\/github.com\/CocoaPods\/Xcodeproj\/blob\/master\/lib\/xcodeproj\/constants.rb#L225-L231)\r\n\r\nBy adding `'NewDebug' => :debug` it basically instructs pods to create a new build configuration and then it uses the default values. \r\n\r\nThere is a tiny bit of customization with regards to setting a few CocoaPods internal `GCC_PREPROCESSOR_DEFINITIONS` found here https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/project.rb#L275-L294\r\n\r\nbut there is no overall logic that copies over these build settings from the user to that target. \r\n\r\n","Right. I guess this is a combination bug report (unexpected behavior, especially in regards to the Pods project having configurations that don't exist in my project at all) and feature request (more settings from my project should be copied to the Pods project). The lack of these settings being transferred has led to user bugs in the past, especially when the optimization settings of the app don't match those of the pods. Plus, if I create new configurations that aren't supposed to use any optimization, building the pods with optimization adds unnecessary build time, meaning special configurations for testing don't have the performance a user would expect.","This bug was driving me absolutely batty today. \r\n\r\nI'm on 1.6.0 rc2 and @dnkoutso your comment helped me fix it. \r\n\r\n```project 'BuildSettingsShouldMatch', 'NewDebug' => :debug```\r\n\r\nmust be at the top of your podfile\r\n\r\nI previously had it inside my target do's like so:\r\n\r\n```\r\ntarget 'BuildSettingsShouldMatch1' do\r\n        >>> Here\r\nend\r\n```\r\n\r\nDid not consistently set my custom configuration to DEBUG, in fact oddly enough it would do something like:\r\n\r\n-Debug << New config that isn't in my xcode proj\r\n-Debug_vendor1 << Correctly set to debug\r\n-Debug_vendor2 << would be in release mode\r\n\r\n","So I'm looking into this again, since I'm trying to use more custom build configurations as a replacement for multiple targets. There seems to be a few different CP behaviors at play here.\r\n\r\n1. CocoaPods always creates Debug and Release build configurations, even if you're not using them at all.\r\n2. CocoaPods will create configs that match the names of the integrating target's build configs, but the settings aren't inherited at all, so they're all set to Release-like settings by default.\r\n3. Using the workaround @dnkoutso mentioned above, you can get some of the settings to look like Debug and others to look like Release, but they still don't inherit settings from the integrating target, which is the most important part, otherwise you can't properly control certain settings on a per-config basis.\r\n\r\nIf I do want to control these settings, is my only option at this point to use a `post_install` hook to set them manually?\r\n\r\nUltimately it seems like this issue comes down to CocoaPods using Xcodeproj's settings instead of the integrating target's, right? It seems like it should inherit instead, as not only are the various defaults from Xcodeproj wildly out of date but could break the build in various ways if they don't match the target's. Which of these behaviors are intentional and which aren't? Which should be improved?","> Ultimately it seems like this issue comes down to CocoaPods using Xcodeproj's settings instead of the integrating target's, right? It seems like it should inherit instead, as not only are the various defaults from Xcodeproj wildly out of date but could break the build in various ways if they don't match the target's. \r\n\r\n@jshier I completely agree. My song and dance with cocoapods is currently:\r\n\r\n-pod outdated -> pod update, because of a new release\r\n-delete the Debug and Release configs cocoapods decided to add out of nowhere\r\n-Wait for xcode to *maybe* tell me the project settings need to be updated. This involves clean build, let the index happen, then quit\/launch xcode 3-4 times. Eventually you get the \"update project to recommended settings\" prompt in warnings and you can apply it, typically setting \"build for active architectures\" or something in tons of places. \r\n\r\nI had to remove pod install from our fastlane deploy scripts because cocaopods doing anything borks the project until you do the above","+1 I would love support for this.","Any updates on this issue? :)","If there were updates they would be posted here :) contributions welcome!\r\n\r\nIf CocoaPods were to start copying over build settings from the user project, we would need to support _not_ doing this as this may not be desired behavior. Some other potential improvements:\r\n\r\n* Emit a warning if there's a mis-match between the configurations that exist in the user's project and the default Debug\/Release created by CocoaPods\r\n* If a project only has 1 configuration, only create 1 configuration in the Pods project\r\n","Still having same issue, any update? ","The work around is to leave legacy Debug and Release configurations in place, and have your schemes point to them, and then add other configurations as needed.  If you rename for consistency - Dev, Staging, Production, you will start fighting the above.  \r\n\r\nIdeally this will be fixed though."],"labels":["t1:enhancement","d2:moderate"]},{"title":"Can I mix frameworks and static libraries in a single target?","body":"* [X] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\nAs best as I can tell from reading the documentation, there's no way to have a mixture of static library and framework source dependencies in a single target. It does seem to be supported if the pod contains a prebuilt binary (e.g. my current project has `use_frameworks!` but has at least one dependency that is just a prebuilt static library, and it works), just not for building from source.\r\n\r\nAm I missing something here, or am I understanding this limitation correctly?\r\n\r\nI'm asking because at least one of the pods I vend (probably 2 but I haven't confirmed) doesn't currently build as a static library (see #7771). It's a Swift dependency so until 1.5.0 it didn't matter as Swift dependencies required `use_frameworks!`, but now that static libraries are supported for Swift, I'm looking for a solution that will allow me to remove `use_frameworks!` from my downstream project while still using my pods (a solution that doesn't involve shipping a prebuilt binary).\r\n\r\nIf I am understanding this limitation correctly, then I'd request one of the following (ideally both):\r\n\r\n1. Allow me to specify in a `pod` declaration that it should use frameworks (or static libraries).\r\n3. Allow me to specify in a podspec that the pod only supports being built as a framework.\r\n\r\nIf I'm not understanding this limitation correctly and there is a way to declare one or both of these, then the documentation should be updated to describe how.","comments":["Both of these asks are very valid and have been more or less discussed in various other places (including other issues). \r\n\r\nNeither of them are a small change though."],"labels":["t1:enhancement","d3:hard","help wanted"]},{"title":"Can't seem to make my pod compatible with static libraries","body":"* [X] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI discovered today that my library [Tomorrowland](https:\/\/github.com\/kballard\/Tomorrowland\/tree\/7a018e08ad91598991840ffe08c6d7dbea07f3cc) doesn't work when I try to compile it as a static library, only as a framework. There are a few reasons for this. Most of them I can find workarounds for, but the one I can't is the fact that my pod has a custom modulemap and, as a static library, the headers referenced by the modulemap can't be found.\r\n\r\nHere's what I'm seeing and what I've tried:\r\n\r\n### Import of `<Tomorrowland\/Tomorrowland-Swift.h>`\r\n\r\nI have an import in a source file for `<Tomorrowland\/Tomorrowland-Swift.h>`. This doesn't work when compiled as a static library. I've found two possible workarounds:\r\n\r\n1. Add `s.header_dir 'Tomorrowland'`\r\n\r\n   This lets this file compile, but causes issues down the road.\r\n2. Change my import to be something like\r\n\r\n   ```objc\r\n   #if defined(COCOAPODS) && __has_include(\"Tomorrowland-Swift.h\")\r\n   # import \"Tomorrowland-Swift.h\"\r\n   #else\r\n   # import <Tomorrowland\/Tomorrowland-Swift.h>\r\n   #endif\r\n   ```\r\n\r\n   This seems to work, but it seems like a rather odd solution, and surely I'm not the first person to hit this. Am I missing something here?\r\n\r\n### Linker error\r\n\r\nAt this point I get a linker error, which is trivially solved by `s.library = 'c++'`. I'm only listing this here because the current state of my podspec doesn't include that line (as it doesn't seem necessary when compiling as a framework, for whatever reason).\r\n\r\n### modulemap issue\r\n\r\nNow we hit the issue I can't solve. If I use the `s.header_dir` solution to the import problem I hit this with a `pod lib lint --use-libraries`. If I do the other solution, `pod lib lint --use-libraries` actually passes, but I then hit this issue when trying to import the framework from an Obj-C file in a downstream project (importing from a Swift file appears to work, though I didn't really investigate that).\r\n\r\nAs best I can figure, the issue is CocoaPods copies my modulemap verbatim into the Products\/Tomorrowland folder, but doesn't copy the headers into that folder, and so when the downstream project tries to import the module it can't find the headers.\r\n\r\nI'm inclined to say this may in fact be a CocoaPods bug, and that it should probably be copying the modulemap plus all of the headers into the same directory (which itself should probably be a subfolder of the Products\/Tomorrowland folder). Right now it doesn't appear to be copying the headers into the built products at all, even though the [documentation for `public_header_files`](https:\/\/guides.cocoapods.org\/syntax\/podspec.html#public_header_files) indicates that the headers should be copied into the build directory.\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.2\r\n        Ruby : ruby 2.3.3p222 (2016-11-21 revision 56859) [universal.x86_64-darwin17]\r\n    RubyGems : 2.5.2\r\n        Host : Mac OS X 10.13.4 (17E202)\r\n       Xcode : 9.3.1 (9E501)\r\n         Git : git version 2.15.1 (Apple Git-101)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.3\/usr\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ b7a6aff002b37ae77f2f9c034a9e2c600d583e6c\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nHere's a project that imports Tomorrowland. I tweaked the Pod checkout to do the `__has_include` trick, so now it's throwing the modulemap error (I skipped the `s.library = 'c++'`, because of course that's a link-time error and we haven't even gotten there yet). Presumably running `pod install` will overwrite that change, though.\r\n\r\n[Foo.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/2029501\/Foo.zip)\r\n","comments":["Incidentally I'm surprised there's no way for my podspec to indicate that it must be built as a framework.","The Swift header import issue is known, and I don't think there's a fix outside of the workaround you listed.\r\nThe header directory issue looks like the same one that was fixed in https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/7724.","It looks like #7724 only affects if `header_dir` is specified? Can this be fixed for the case where `header_dir` isn't specified?","It could be fixed, it just hasn't yet","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Keep","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","What would it take to get this fixed?","@lilyball, don't know if this is still relevant, but just my 2 cents: I checked out out the modulemap in your library, and saw it declares a private module to hide some headers. I might be super wrong here, but if that's all that modulemap is doing, maybe you can rid of it and use the `private_header_files` property in the **podspec** instead?","@biocross I need the modulemap to expose these headers to the Swift code. `private_header_files` is just the equivalent of marking an Obj-C header \"Private\" instead of \"Public\" in a normal target."],"labels":["t2:defect"]},{"title":"Cocoapods 1.5.2 crashes with rome plugin","body":"### Report\r\n\r\n* What did you do?\r\nrun `pod install` on an empty folder with just this Podfile\r\n\r\n```\r\nplatform :ios, '8.0'\r\n\r\nplugin 'cocoapods-rome'\r\n\r\ntarget 'caesar' do\r\n  pod 'Alamofire'\r\nend\r\n\r\n```\r\n\r\n* What did you expect to happen?\r\n\r\nTo get an output folder with the compiled `Alamofire` framework\r\n\r\n* What happened instead?\r\n\r\nGot an error.\r\n\r\n### Command\r\n\r\n```\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0\/bin\/pod install\r\n```\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.2\r\n        Ruby : ruby 2.0.0p647 (2015-08-18 revision 51631) [x86_64-darwin16.6.0]\r\n    RubyGems : 2.0.14.1\r\n        Host : Mac OS X 10.12.6 (16G1212)\r\n       Xcode : 9.2 (9C40b)\r\n         Git : git version 2.14.3 (Apple Git-98)\r\nRuby lib dir : \/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 422a260e27e8636972adf4eeace58f53f26a031f\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-rome        : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '8.0'\r\n\r\nplugin 'cocoapods-rome'\r\n\r\ntarget 'caesar' do\r\n  pod 'Alamofire'\r\nend\r\n```\r\n\r\n### Error\r\n\r\n```\r\nNoMethodError - undefined method `build_settings' for nil:NilClass\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-rome-1.0.0\/lib\/cocoapods-rome\/post_install.rb:44:in `block in enable_debug_information'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-rome-1.0.0\/lib\/cocoapods-rome\/post_install.rb:42:in `each'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-rome-1.0.0\/lib\/cocoapods-rome\/post_install.rb:42:in `enable_debug_information'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-rome-1.0.0\/lib\/cocoapods-rome\/post_install.rb:73:in `block in <top (required)>'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-1.5.2\/lib\/cocoapods\/hooks_manager.rb:109:in `call'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-1.5.2\/lib\/cocoapods\/hooks_manager.rb:109:in `block (3 levels) in run'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-1.5.2\/lib\/cocoapods\/user_interface.rb:142:in `message'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-1.5.2\/lib\/cocoapods\/hooks_manager.rb:103:in `block (2 levels) in run'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-1.5.2\/lib\/cocoapods\/hooks_manager.rb:101:in `each'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-1.5.2\/lib\/cocoapods\/hooks_manager.rb:101:in `block in run'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-1.5.2\/lib\/cocoapods\/user_interface.rb:142:in `message'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-1.5.2\/lib\/cocoapods\/hooks_manager.rb:100:in `run'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-1.5.2\/lib\/cocoapods\/installer.rb:455:in `run_plugins_post_install_hooks'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-1.5.2\/lib\/cocoapods\/installer.rb:433:in `perform_post_install_actions'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-1.5.2\/lib\/cocoapods\/installer.rb:125:in `install!'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-1.5.2\/lib\/cocoapods\/command\/install.rb:41:in `run'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/claide-1.0.2\/lib\/claide\/command.rb:334:in `run'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-1.5.2\/lib\/cocoapods\/command.rb:52:in `run'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0-p647\/lib\/ruby\/gems\/2.0.0\/gems\/cocoapods-1.5.2\/bin\/pod:55:in `<top (required)>'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0\/bin\/pod:23:in `load'\r\n\/Users\/julian\/.rbenv\/versions\/2.0.0\/bin\/pod:23:in `<main>'\r\n```","comments":["@jugutier I am sorry but I think this issue should actually be filed on the https:\/\/github.com\/CocoaPods\/Rome repo","yeah that makes sense, sorry I wasn't sure where to put it.","maybe a try\/catch on `cocoapods\/hooks_manager.rb:109:in `call'` with some message would be in order for plugins to not crash cocoapods?","no problem. If possible please file there. I am going to close this one.","hm interesting, we kind of want to leverage those crashes ","@dnkoutso If you don't think that is necessary then let's just close it. I don't think we want to hide the error just make it more clear that it's coming from a plugin so that users like me know where to file their issue haha\r\n\r\nThis may be not necessary if plugins are not so widely used \r\n\r\nJust filed here https:\/\/github.com\/CocoaPods\/Rome\/issues\/67","I guess we could parse the stack trace and see if the top line is an official cocoapods gem? Otherwise it's likely a plugin or custom code in a podfile etc","Something like this around the block calls? with a nice banner saying \"Plugin interrupted execution\" or similar\r\n\r\nhttps:\/\/gist.github.com\/mikepfirrmann\/3820663","for now keeping open and marking it as a discussion and potential enhancement."],"labels":["t1:enhancement","t3:discussion","help wanted"]},{"title":"Add Podfile.lock additional information for local pods","body":"Hi!\r\n\r\nIt would be nice to know additional information in Podfile.lock about the state of the development (local) pod.\r\n\r\nYes, development pod could contain uncommitted changed, however, it could also has commits, tags and branches.\r\n\r\n**This additional information (latest commit, tag or branch) about development pod is only for human, not for installation process.**\r\n\r\nFor example, I have local pod with github remote. However, it is convenient ( and faster ) for me to install it from local folder, especially when I want to try something new.","comments":["This seems like it could be a decent plugin for those that need it - not sure if this needs to be in the lockfile though","@amorde if this information co-exists in Podfile.lock ( for example, after the end of necessary Podfile.lock information which could be marked as line of dashes ), it would not damage installation. However, yes, it is better to keep it in separate file to nuke Podfile.lock sometimes. \r\n\r\nIt also allows to install library not only from local directory, but also from `git remote`, if this commit exists in it."],"labels":["t1:enhancement","t5:plugin idea"]},{"title":"Assets NOT recompiled because Xcode skip run `Copy Pod Resources`","body":"CP add some `Input Files` and `Output Files` to `Copy Pod Resources` in `Build Phases`. And Xcode will not run again if the `Input Files` and `Output Files` not be changed, include their contents are not changed. It is good job.\r\n\r\nBut, there are a logic which search assets will not be run again in the `Copy Pod Resources` script:\r\n```\r\n  OTHER_XCASSETS=$(find \"$PWD\" -iname \"*.xcassets\" -type d)\r\n  while read line; do\r\n    if [[ $line != \"${PODS_ROOT}*\" ]]; then\r\n      XCASSET_FILES+=(\"$line\")\r\n    fi\r\n```\r\n\r\nThere is a strange logic in the CP: \r\nCP find all assets in my project directory, then run `actool` to compile my project's assets and Pod's assets together. `actool` will generate a `Assets.car` in `xxx.app`, and instead of origin `Assets.car` which be generated by Xcode.\r\n\r\neg:\r\n```\r\nMy Projects: Assets.xcassets and IM.xcassets\r\nPods: ShareSDK.xcassets\r\n```\r\nXcode will compile `Assets.xcassets` and `IM.xcassets` to `Assets.car` first. but it is a small file.\r\nThe Pod will recompile `Assets.xcassets`, `IM.xcassets` and `ShareSDK.xcassets` to a bigger `Assets.car` to instead of the small one.\r\n\r\nIt is OK, if there is NOT the `Input Files` and `Output Files`....\r\n\r\nWhen the `Input Files` and `Output Files` not be changed, Xcode will skip the script.\r\nIf I update the `Assets.xcassets`, the Xcode will recompile the `Assets.xcassets` and `IM.xcassets` to a small `Assets.car` to overwrite the bigger which generated by Pods. But the Pod will not run the script again. So I will lose the `ShareSDK.xcassets` in my `Assets.car`.\r\n\r\nI think the assets logic should be a Independent script.\r\n\r\nCould you understand what I said?","comments":["> Could you understand what I said?\r\n\r\nKind of...I can see a problem potentially but would like to see a sample app here demonstrating the issue 100%. ","The Demo is very easy: https:\/\/github.com\/Whirlwind\/CocoaPodsTestAssets\r\nFirst, build and run the `MyApp`, you will see a imageview in simulator. Then, please add any image to the `Assets.xcassets` in the `MyApp`. Run again, you will lost the image in the imageView!","Test by Cocoapods v1.5.2","definitely a bug. investigated will be a bit tough to fix. See more here https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/7779#discussion_r190659547","I meet this issue too\uff0c with envi:\r\n- cocoapods 1.6.0 beta1\r\n- xcode 10 release\r\ndid it resolved?","@dnkoutso I experienced the same issue with a fresh project now and Xcode 10 when creating a sample project for #8136.\r\n\r\nFor everyone who is curious of how to reproduce the issue, I have setup a detailed sample project here:\r\nhttps:\/\/github.com\/Fab1n\/PodResourcesBug\r\n\r\nThe sample project actually shows 2 recent issues regarding asset catalog compilation.\r\nFor this issue here you will need to check out the first bug.\r\n\r\nThe test procedure is written in detail in the repo's README.md","I meet this issue too\uff0c with envi:\r\n\r\ncocoapods 1.1.1\r\nxcode 10 release\r\ndid it resolved?","I have a fix for this.","@Whirlwind I have a fix on branch `xcassets_revamp` can you try it?","actually its not there yet."],"labels":["t2:defect","d3:hard"]},{"title":"Cocoapods 1.5.2 development pods with sub directories not work","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: http:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n`pod install`\r\n\r\n## What did you expect to happen?\r\n\r\nI have a development pod for different configuration, like this:\r\n\r\n```ruby\r\npod 'xxx-module-ios-debug', :path => '.\/xxx-module', :configuration => ['Debug']\r\npod 'xxx-module-ios', :path => '.\/xxx-module', :configuration => ['Release']\r\n```\r\n\r\nwhen the {h,m} in different sub directories in the podspec's source files path, xcode builds successfully\r\n\r\n## What happened instead?\r\n\r\nwhen the {h,m} in different sub directories in the podspec's source files path, xcode complain it can not found header file.\r\nhowever, if the {h.m} in same sub directory, xcode build successfully.\r\nand It works in cocoapods 1.4.0\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.2\r\n        Ruby : ruby 2.2.10p489 (2018-03-28 revision 63023) [x86_64-darwin17]\r\n    RubyGems : 2.7.2\r\n        Host : Mac OS X 10.13.4 (17E199)\r\n       Xcode : 9.3 (9E145)\r\n         Git : git version 2.15.1 (Apple Git-101)\r\nRuby lib dir : \/usr\/local\/Cellar\/ruby@2.2\/2.2.10\/lib\r\nRepositories : 26-scm-sa-sepspecs - http:\/\/10.157.26.43:7990\/scm\/sa\/sepspecs.git @ 08923a34051c4214889af6674869a90a17ab55af\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ a542a0f7f03023e4185f1506592ce6314ff55309\r\n               supermariobean - https:\/\/github.com\/SuperMarioBean\/FMTSpecs.git @ 12efa538af60554d0b42a3bba42504a5e9b92750\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/lib\/ruby\/gems\/2.2.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-packager    : 1.5.0\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '9.0'\r\ninhibit_all_warnings!\r\nuse_frameworks!\r\n\r\nproject 'Sephora_APP',\r\n    'Debug' => :debug, 'Debug.test' => :debug, 'Debug.stage' => :debug, 'Debug.prod' => :debug, 'Debug.appstore' => :debug,\r\n    'Release' => :release, 'Release.test' => :release, 'Release.stage' => :release, 'Release.prod' => :release, 'Release.appstore' => :release\r\n\r\ntarget 'Sephora' do\r\n\r\n    # Business\r\n    # Ad\r\n    pod 'XHLaunchAd', '3.9.7'\r\n    \r\n    ## Dynamic\r\n    pod 'React', :path =>'..\/node_modules\/react-native', :subspecs => [\r\n    'Core',\r\n    'ART',\r\n    'RCTActionSheet',\r\n    'RCTAdSupport',\r\n    'RCTGeolocation',\r\n    'RCTImage',\r\n    'RCTNetwork',\r\n    'RCTPushNotification',\r\n    'RCTSettings',\r\n    'RCTText',\r\n    'RCTVibration',\r\n    'RCTWebSocket',\r\n    'RCTLinkingIOS',\r\n    'RCTAnimation',\r\n    'DevSupport',\r\n    'BatchedBridge',\r\n    ]\r\n    pod 'CodePush', :path => '..\/node_modules\/react-native-code-push'\r\n    pod 'react-native-fetch-blob', :path => '..\/node_modules\/react-native-fetch-blob'\r\n    pod 'Yoga', :path => '..\/node_modules\/react-native\/ReactCommon\/yoga'\r\n\r\n    pod 'FMTFoundation', :path => '.\/FMTFoundation'\r\n    pod 'SEPFoundation', :path => '.\/SEPFoundation'\r\n\r\n    pod 'tryon-module-ios-debug', :path => '.\/tryon-module'\r\n    #pod 'tryon-module-ios-debug', :path => '.\/tryon-module', :configuration => ['Debug', 'Debug.test', 'Debug.stage', 'Debug.prod', 'Debug.appstore']\r\n    #pod 'tryon-module-ios', :path => '.\/tryon-module', :configuration => ['Release', 'Release.test', 'Release.stage', 'Release.prod', 'Release.appstore']\r\n    #pod 'live-module-ios', :path => '..\/live-module'\r\n    pod 'social-module-ios', :path => '.\/social-module'\r\n    pod 'ecommerce-module-ios', :path => '.\/ecommerce-module'\r\n    pod 'account-module-ios', :path => '.\/account-module'\r\n\r\n    target 'SephoraTests' do\r\n        inherit! :search_paths\r\n        # Pods for testing\r\n    end\r\n    \r\n    target 'SephoraUITests' do\r\n        inherit! :search_paths\r\n        # Pods for testing\r\n    end\r\n    \r\n    post_install do |installer|\r\n        installer.pods_project.targets.each do |target|\r\n            target.build_configurations.each do |config|\r\n                if config.name.include?(\".test\")\r\n                    config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', 'Test=1', 'kWhetherAppStoreVersion=NO']\r\n                elsif config.name.include?(\".stage\")\r\n                    config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', 'Stage=1', 'kWhetherAppStoreVersion=NO']\r\n                elsif config.name.include?(\".prod\")\r\n                    config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', 'Prod=1', 'kWhetherAppStoreVersion=NO']\r\n                elsif config.name.include?(\".appstore\")\r\n                    config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', 'Prod=1', 'kWhetherAppStoreVersion=YES']\r\n                else\r\n                    config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', 'Dev=1', 'kWhetherAppStoreVersion=NO']\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/SuperMarioBean\/TestProject\r\n","comments":["it works in Cocopods 1.5.3 with use_modular_headers! flag"],"labels":["t2:defect"]},{"title":"use_modular_headers results in incomplete umbrella warnings with some cross-platform pods","body":"* [x] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nBuilding a project that contains both an iOS and macOS target, sharing a cross-platform pod that conditionally includes platform-specific frameworks like UIKit or AppKit, causes triggers the `-Wincomplete-umbrella` warning for the target where the umbrella header excludes certain headers.\r\n\r\nThis only happens when building static pods with the new `use_modular_headers!` directive. This issue doesn't occur when switching back to `use_frameworks!`.\r\n\r\nDisabling this warning in the project using `-Wno-incomplete-umbrella` is a workaround that suppresses this warning.\r\n\r\n## What did you expect to happen?\r\n\r\nThe build should complete without warnings.\r\n\r\n## What happened instead?\r\n\r\nIn the attached example, AFNetworking is used as the cross-platform pod, and when building the macOS target, the following warnings are generated, because the UIKit-specific category headers are excluded when building for macOS:\r\n```\r\n<module-includes>:1:1: warning: umbrella header for module 'AFNetworking' does not include header 'UIButton+AFNetworking.h' [-Wincomplete-umbrella]\r\n#import \"AFNetworking-c94d3492-umbrella.h\"\r\n^\r\n<module-includes>:1:1: warning: umbrella header for module 'AFNetworking' does not include header 'UIImageView+AFNetworking.h' [-Wincomplete-umbrella]\r\n<module-includes>:1:1: warning: umbrella header for module 'AFNetworking' does not include header 'AFImageDownloader.h' [-Wincomplete-umbrella]\r\n<module-includes>:1:1: warning: umbrella header for module 'AFNetworking' does not include header 'AFAutoPurgingImageCache.h' [-Wincomplete-umbrella]\r\n<module-includes>:1:1: warning: umbrella header for module 'AFNetworking' does not include header 'UIWebView+AFNetworking.h' [-Wincomplete-umbrella]\r\n<module-includes>:1:1: warning: umbrella header for module 'AFNetworking' does not include header 'UIActivityIndicatorView+AFNetworking.h' [-Wincomplete-umbrella]\r\n<module-includes>:1:1: warning: umbrella header for module 'AFNetworking' does not include header 'UIImage+AFNetworking.h' [-Wincomplete-umbrella]\r\n<module-includes>:1:1: warning: umbrella header for module 'AFNetworking' does not include header 'UIProgressView+AFNetworking.h' [-Wincomplete-umbrella]\r\n<module-includes>:1:1: warning: umbrella header for module 'AFNetworking' does not include header 'UIKit+AFNetworking.h' [-Wincomplete-umbrella]\r\n<module-includes>:1:1: warning: umbrella header for module 'AFNetworking' does not include header 'UIRefreshControl+AFNetworking.h' [-Wincomplete-umbrella]\r\n<module-includes>:1:1: warning: umbrella header for module 'AFNetworking' does not include header 'AFNetworkActivityIndicatorManager.h' [-Wincomplete-umbrella]\r\n11 warnings generated.\r\n11 warnings generated.\r\n```\r\n\r\nThis same issue can be demonstrated with the ReactiveObjC pod as well.\r\n\r\n## CocoaPods Environment\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.2\r\n        Ruby : ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-darwin17]\r\n    RubyGems : 2.6.14\r\n        Host : Mac OS X 10.13.5 (17F66a)\r\n       Xcode : 9.3 (9E145)\r\n         Git : git version 2.15.1 (Apple Git-101)\r\nRuby lib dir : \/Users\/steven\/.rvm\/rubies\/ruby-2.4.1\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 10afe009d080032c479d90a4492a029e76c8bfbf\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/steven\/.rvm\/gems\/ruby-2.4.1\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nuse_modular_headers!\r\n#use_frameworks!\r\n\r\ntarget \"IncompleteUmbrella-iOS\" do\r\n    platform :ios, \"10.0\"\r\n    pod 'AFNetworking'\r\nend\r\n\r\ntarget \"IncompleteUmbrella-macOS\" do\r\n    platform :macos, \"10.13\"\r\n    pod 'AFNetworking'\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\n[IncompleteUmbrella.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/1993781\/IncompleteUmbrella.zip)\r\n","comments":["I can confirm this still happens with CocoaPods 1.6.0.beta1 and the latest master (e667af1), and both with Xcode 9 and 10:\r\n> <module-includes>:1:1: warning: umbrella header for module 'Alamofire' does not include header '\/Alamofire.framework\/Headers\/Alamofire-umbrella.h'\r\n> #import \"Alamofire-umbrella.h\"\r\n> ^\r\n> <module-includes>:1:1: warning: umbrella header for module 'Alamofire' does not include header '\/Alamofire.framework\/Headers\/Alamofire-Swift.h'\r\n> #import \"Alamofire-umbrella.h\"\r\n> ^\r\n> <module-includes>:1:1: warning: umbrella header for module 'AppwiseCore' does not include header '\/AppwiseCore.framework\/Headers\/AppwiseCore-Swift.h'\r\n> #import \"AppwiseCore-umbrella.h\"\r\n> ^\r\n> <module-includes>:1:1: warning: umbrella header for module 'AppwiseCore' does not include header '\/AppwiseCore.framework\/Headers\/AppwiseCore-umbrella.h'\r\n> #import \"AppwiseCore-umbrella.h\"\r\n> ^\r\n\r\nMy example project (using Swift with static libs) can be found here:\r\nhttps:\/\/github.com\/appwise-labs\/AppwiseCore-Example\/commit\/9a1f023c3eda9a7c5e2f12b5ca7be006354c58f0\r\n(see this https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8068#issuecomment-417745900 by @dnkoutso, you may have to comment out the dependency on local dev. pods)\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.6.0.beta.1\r\n        Ruby : ruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-darwin17]\r\n    RubyGems : 2.6.13\r\n        Host : Mac OS X 10.13.6 (17G65)\r\n       Xcode : 9.4.1 (9F2000)\r\n         Git : git version 2.15.2 (Apple Git-101.1)\r\nRuby lib dir : \/Users\/davidjennes\/.rbenv\/versions\/2.4.2\/lib\r\nRepositories : bitbucket-appwise-podspecs - git@bitbucket.org:appwise\/appwise-podspecs.git @ 7695d3238f55b0574fc2fdf6f2e1d324a31a6465\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ d53e8527c3736bf23269687d9a3a6752f84b28f6\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/davidjennes\/.rbenv\/versions\/2.4.2\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '10.0'\r\n\r\ninhibit_all_warnings!\r\n\r\ntarget 'Example Project' do\r\n\tproject 'Example Project',\r\n\t\t'Development (Debug)' => :debug,\r\n\t\t'Development (Release)' => :release,\r\n\t\t'Staging (Debug)' => :debug,\r\n\t\t'Staging (Release)' => :release,\r\n\t\t'Production (Debug)' => :debug,\r\n\t\t'Production (Release)' => :release\r\n\r\n\tpod 'AppwiseCore', :path => '..\/'\r\n\tpod 'AppwiseCore\/CoreData', :path => '..\/'\r\n\tpod 'AppwiseCore\/DeepLink', :path => '..\/'\r\n\tpod 'AppwiseCore\/UI', :path => '..\/'\r\n\r\n\t# Tools\r\n\tpod 'LocalizableCheck'\r\n\tpod 'Sourcery'\r\n\tpod 'SwiftGen'\r\n\tpod 'SwiftLint'\r\n\r\n\t# Other\r\n\tpod 'BonMot'\r\n\tpod 'Crashlytics'\r\n\tpod 'IQKeyboardManagerSwift'\r\n\tpod 'Nuke'\r\n\tpod 'Nuke-Alamofire-Plugin'\r\n\tpod 'OneSignal'\r\n\tpod 'p2.OAuth2'\r\n\tpod 'Reusable'\r\n\tpod 'SnapKit'\r\nend\r\n\r\npost_install do | installer |\r\n\trequire 'fileutils'\r\n\r\n\t# generate acknowledgements\r\n\tFileUtils.cp_r('Pods\/Target Support Files\/Pods-Example Project\/Pods-Example Project-Acknowledgements.plist', 'Application\/Resources\/Settings.bundle\/Acknowledgements.plist', :remove_destination => true)\r\nend\r\n```\r\n"],"labels":["t2:defect","s2:confirmed"]},{"title":"`pod install` adds nested projects to the workspace unnecessarily","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: http:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [X] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\nWhen I have a project with a nested project, and I have a `Podfile` that sets up CocoaPods for both the parent project and the child project, CocoaPods will add the child project to the workspace even though there's no reason for it to be part of the workspace as it's already accessible via the parent project.\r\n\r\n## What did you do?\r\n\r\n`pod install`\r\n\r\n## What did you expect to happen?\r\n\r\nIt should set up the workspace properly such that I have my parent project and the Pods project.\r\n\r\n## What happened instead?\r\n\r\nIt added the nested project to the workspace as well.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.2\r\n        Ruby : ruby 2.0.0p648 (2015-12-16 revision 53162) [x86_64-darwin16]\r\n    RubyGems : 2.0.14.1\r\n        Host : Mac OS X 10.12.6 (16G1314)\r\n       Xcode : 9.2 (9C40b)\r\n         Git : git version 2.16.3\r\nRuby lib dir : \/opt\/local\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ a807fa1178202d4ee9a4d38cbcd1bfc69e8ff7d9\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/opt\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '11.0'\r\n\r\nworkspace 'NestedProjectBug.xcworkspace'\r\n\r\ntarget 'NestedProjectBug' do\r\n  project 'NestedProjectBug.xcodeproj'\r\nend\r\n\r\ntarget 'MyLibrary' do\r\n  project 'MyLibrary\/MyLibrary.xcodeproj'\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\n[NestedProjectBug.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/1993636\/NestedProjectBug.zip)\r\n","comments":["I also don't see any way to add a `post_install` hook to remove the project from the workspace. The [API documentation](https:\/\/www.rubydoc.info\/gems\/cocoapods\/Pod\/) doesn't seem to expose anything about the workspace.","We could probably just not add the nested project, but I don\u2019t see this as a high-priority change to make","Same situation here, after installation CocoaPods adds a nested project to the workspace so that it's included twice (via workspace and via parent). I have to manually remove it form the workspace.","Same issue here. Is there a fix ?"],"labels":["t1:enhancement","d1:easy"]},{"title":"Custom module map and module name yields wrong header locations for static Swift libs","body":"* [x] I've read and understood the [*CONTRIBUTING* guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n1. Create a pod that sets both `module_name` and `module_map`. (Aside: The `modulemap` is used to declare an explicit module for importing C. There are tons of other ways to accomplish this but none work quite as well. I welcome a recommendation.)\r\n1. Point to it in a `Podfile`.\r\n1. Set `Podfile` to _not_ have `use_frameworks!`.\r\n1. Run `pod install`.\r\n1. Open project workspace.\r\n1. Add an `import` statement for the pod.\r\n1. Build.\r\n\r\n## What did you expect to happen?\r\n\r\nThe pod can compile by finding the umbrella header and embedded header like it can when `use_frameworks` is set.\r\n\r\n## What happened instead?\r\n\r\n<img width=\"228\" alt=\"screen shot 2018-05-10 at 09 44 09\" src=\"https:\/\/user-images.githubusercontent.com\/170812\/39881769-b97ad658-5436-11e8-92da-3f05d0bbc08b.png\">\r\n\r\nThe headers are placed in a way the module map can't find.\r\n\r\n## CocoaPods Environment\r\n\r\n<details>\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.2\r\n        Ruby : ruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin17]\r\n    RubyGems : 2.7.6\r\n        Host : Mac OS X 10.13.4 (17E202)\r\n       Xcode : 9.4 (9Q1019a)\r\n         Git : git version 2.17.0\r\nRuby lib dir : \/usr\/local\/var\/rbenv\/versions\/2.5.0\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 52d858d1c0afcdca860a9bc74c61ba037f5a61aa\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/var\/rbenv\/versions\/2.5.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '11.0'\r\n\r\nuse_modular_headers!\r\n\r\ntarget 'PodIntegration' do\r\n  pod 'PodKit', :path => '.\/PodKit'\r\nend\r\n```\r\n<\/details>\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/bucket.waldowski.me\/PodIntegration-TeLTCPNizH\r\n\r\nThe app target is `PodIntegration.` The pod is named `PodKit`, for a library named `Kit` which requires a private-ish C module `CKit`.","comments":["Yup, known issue, don't know how to fix it besides copying all headers in the build phase","Do note that it fails to compile while building the static lib - not even getting to the part where the Copy Headers Build Phase comes into play.","I'm running into this issue too, with https:\/\/github.com\/uber\/ios-snapshot-test-case and https:\/\/github.com\/Iterable\/swift-sdk. Neither define a custom `module_map`."],"labels":["t2:defect"]},{"title":"Thread safe in `run_prepare_command`","body":"CocoaPods v1.5.0.\r\n\r\nI use the plugin [cocoapods-multithread-installpod](https:\/\/github.com\/mahaiyannn\/cocoapods-multithread-installpod) to download all pods under multi thread.\r\n\r\nEverything is OK, but the prepare command is not thread safe when there are two podspec with `prepare_command`.\r\n\r\nI check the code in `pod_source_preparer.rb`:\r\n```\r\n      def run_prepare_command\r\n        return unless spec.prepare_command\r\n        UI.section(' > Running prepare command', '', 1) do\r\n          puts \"pwd: #{Dir.pwd} -> #{path}\"\r\n          Dir.chdir(path) do\r\n             begin\r\n               ENV.delete('CDPATH')\r\n               ENV['COCOAPODS_VERSION'] = Pod::VERSION\r\n               prepare_command = spec.prepare_command.strip_heredoc.chomp\r\n               full_command = \"\\nset -e\\n\" + prepare_command\r\n               puts \"bash -c #{full_command}\"\r\n               bash!('-c', full_command)\r\n             ensure\r\n               ENV.delete('COCOAPODS_VERSION')\r\n             end\r\n          end\r\n        end\r\n      end\r\n```\r\nThe `Dir.chdir` is NOT thread safe, and I get a warning: \r\n```\r\n\/Users\/whirlwind\/.rvm\/gems\/ruby-2.4.1\/gems\/cocoapods-1.5.0\/lib\/cocoapods\/installer\/pod_source_preparer.rb:60: warning: conflicting chdir during another chdir block\r\n```\r\n\r\nI known that the change dir is required. But , I think we can change dir in the shell:\r\n```\r\n               full_command = \"\\ncd \\\"#{path}\\\"\\nset -e\\n\" + prepare_command\r\n```\r\n\r\nIs it right?","comments":["We could, but CocoaPods really was not meant to be used from multiple threads","It is so slow to download so many dependencies.","@Whirlwind PRs welcome!","Also in Specification#from_string method\r\n\r\n```ruby\r\ndef self.from_string(spec_contents, path, subspec_name = nil)\r\n  path = Pathname.new(path).expand_path\r\n  spec = nil\r\n  Dir.chdir(path.parent.directory? ? path.parent : Dir.pwd) do\r\n    case path.extname\r\n    when '.podspec'\r\n      spec = ::Pod._eval_podspec(spec_contents, path)\r\n      unless spec.is_a?(Specification)\r\n        raise Informative, \"Invalid podspec file at path `#{path}`.\"\r\n      end\r\n    when '.json'\r\n      spec = Specification.from_json(spec_contents)\r\n    else\r\n      raise Informative, \"Unsupported specification format `#{path.extname}`.\"\r\n    end\r\n  end\r\n\r\n  spec.defined_in_file = path\r\n  spec.subspec_by_name(subspec_name, true)\r\nend\r\n```\r\nhow about using absolute path instead ?\r\n","Absolute paths won't work there, since we can be evaluating a ruby podspec, and they can expect that they are evaluated from their own directory"],"labels":["t1:enhancement","d1:easy"]},{"title":"[1.5.0, static libs] Mixed Objective-C\/Swift pod fails to import Swift from Objective-C","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: http:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\ud83c\udf08\r\n* [X] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\nFirst, a lot of thanks for this feature \u2764\ufe0f\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n* Update to CocoaPods 1.5.0\r\n* Remove `use_frameworks!` from Podfile\r\n\r\nPod setup: one Pod `TestLib` with mixed Swift\/Objective-C code. Objective-C files import Swift code with `#import <TestLib\/TestLib-Swift.h>`.\r\n\r\n## What did you expect to happen?\r\n\r\nThe project would build.\r\n\r\n## What happened instead?\r\n\r\nThe project failed to build with error `'TestLib\/TestLib-Swift.h' file not found`.\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.0\r\n        Ruby : ruby 2.2.1p85 (2015-02-26 revision 49769) [x86_64-darwin14]\r\n    RubyGems : 2.4.6\r\n        Host : Mac OS X 10.13.4 (17E199)\r\n       Xcode : 9.3 (9E145)\r\n         Git : git version 2.15.1 (Apple Git-101)\r\nRuby lib dir : \/Users\/maximelemoine\/.rvm\/rubies\/ruby-2.2.1\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 4ddb0bcf3b52ed9ff3e40a475fb06d9dc264bcfe\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/maximelemoine\/.rvm\/gems\/ruby-2.2.1\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-packager    : 1.5.0\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\nplatform :osx, '10.10'\r\n\r\n#use_frameworks!\r\n\r\ntarget 'TestSwiftImport' do\r\n  \r\n  pod 'TestLib', :path => '.'\r\n\r\nend\r\n```\r\n\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/MaximeLM\/TestSwiftImport\r\n","comments":["This is a known issue you can workaround it via `#import \"TestLib-Swift.h\"` instead.","... or just use cocoapods 1.4","sure, you do you @Zmeu213 ","@dnkoutso (:","@dnkoutso ok, I'll use the workaround","@dnkoutso you say this is a \"known issue\", is there an issue open already?","@MaximeLM apologies meant meant internally and we should keep this open.","Same Issue +1\r\n\r\n@MaximeLM \r\n@dnkoutso \r\n\r\nDid you realize that the more serious problem is:  As a pod author, you can not limit user how to use!\r\n```\r\nuse_frameworks!\r\n\/\/to be\r\n#import <TestLib\/TestLib-Swift.h>\r\n```\r\n\r\n```\r\n\/\/remove use_frameworks!\r\n\/\/to be\r\n#import \"TestLib-Swift.h\"\r\n```\r\n\r\nSo The temporary solution is:\r\n```\r\n#ifdef  AMacro\r\n#import \"TestLib-Swift.h\"\r\n#else  \r\n#import <TestLib\/TestLib-Swift.h>\r\n#endif\r\n\r\n\/\/And find ways to inject 'AMacro' into your application\r\n```\r\n\r\nAnother serious problem is:\r\n@dnkoutso \r\nWhen using swift, the lint function Cocoapods provide is compiled to dynamic framework?Why not lint by static library? Although using macros can solve this problem. When lint is a dynamic library, use `<>`. In the other case, `\"\"` is used.\r\n\r\n\r\nAt work , when we want to gradually migrate to use swift, we have to rely on libraries that were previously written with objc. It is OK! But we should try to avoid this situation: objc and swift are mixed and objc still needs to call swift. \r\nUnfortunately, I am the one. @MaximeLM too.","I'd [recommend using](https:\/\/github.com\/artsy\/Artsy-Authentication\/blob\/0974ff5ceeb7bf899ca6bdf6168c466aa9f67500\/Pod\/Classes\/Artsy%2BAuthentication.h#L3-L8) `#if __has_include` to differentiate between them\r\n","@orta \r\nYou got wright way!!!\r\nThank you\uff0cI learned.\r\n\r\nI think this issue could be close.","I disagree, this issue should remain open. The `__has_include` workaround is helpful, but forcing pod authors to deviate from Apple docs doesn\u2019t seem great if it\u2019s possible for CocoaPods to configure build settings appropriately. The ideal fix is to have libraries build as-is.\r\n\r\nIf that\u2019s not possible then some documentation is probably warranted.\r\n\r\nBut I didn\u2019t open the issue so I can\u2019t exactly go making demands everywhere :)","Will keep it open.","@nolanw \r\nI think it is so hard ... But I agree you said!\r\nI hate protobuf by using `use_framework!`. I use swift so I have to `use_framework` until the release of cocapods@1.5. \r\n\r\nI can finally avoid using the [disgusting macro (`GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS `)](https:\/\/github.com\/google\/protobuf\/blob\/master\/objectivec\/google\/protobuf\/Duration.pbobjc.m) to use both swift and objc-protobuf. There are some issues so I can not use swift-protobuf.\r\n\r\nSo the protobuf author must be very happy to hear: cocoapods can make libraries build as-is! ","@orta thanks! What I end up using in our private pod is:\r\n```\r\n#if __has_include(\"TestLib-Swift.h\")\r\n    #import \"TestLib-Swift.h\"\r\n#else\r\n    #import <TestLib\/TestLib-Swift.h>\r\n#endif\r\n```\r\nOf course, this workaround is only possible for pod authors.","Is there a final say on this issue yet?\r\n\r\nI'm not a fan of adding the hack, since I've already in this life experienced situations where such hacks break in edge cases, and considering this world of mixed package managers, unexpected things happen.\r\n\r\nBut, if that's the only way this is going to work, I'll do it.","We haven't found a better way yet","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","@dnkoutso I am trying to include socket.io swift client using cocoapods in my existing project which has already Objective C pods and my project is in Objective C. When I do so I get the error \"module map file '\/Users\/...\/Library\/Developer\/Xcode\/DerivedData\/BCFramework-aecawjeshbaibfeekdiasoxrrcjz\/Build\/Products\/Debug-iphoneos\/Socket.IO-Client-Swift\/SocketIO.modulemap' not found\"\r\n\r\nOne thing to note here is that I am creating a custom framework instead of an application. Please suggest how should I proceed.","@ChiragBhutani1988 what you're describing sounds like a different issue - could you open another issue with a sample project + steps to repro? thanks","@amorde It appears this is broken in cocoapods 1.5.3. I was having trouble getting it to work in the attached project with the proposed workaround, and so i tried to revert to 1.5.0 via gemfile. After a clean and rebuild it worked. Going back to 1.5.3, clean, build, doesn't work again.","@fer662 what exactly is broken? there are a few things discussed in this issue.","@amorde sorry for being unspecific. The import for for \"LibName-Swift.h\" works on 1.5.0, but results in a file not found in 1.5.3, where LibName is a swift pod integrated as a static library.","Noticing the same problem with 1.6.1. Create an empty ObjC project, then add a Swift pod and do not set use_frameworks!. Now try to #import \"LibName-Swift.h\" and you get not found. I tried with a couple of different Pods including AlamoFire. Interestingly enough I do see the \"LibName-Swift.h\" file in the build folder, but for some reason it isn't found by Xcode. So the solution I assume is to get this file generated\/moved to the correct folder to be found, OR make a change to the project so it can find it.","Tried #import \"PromiseKit-Swift.h\", doesn't work. Any other workarounds?","I'm also seeing that the Library-Swift.h file still isn't being generated for static libs on CP v1.8.4. Without it, I'm unable to use the pod as a static lib. Any idea why the workaround from 1.5.0 isn't working anymore?","> @dnkoutso I am trying to include socket.io swift client using cocoapods in my existing project which has already Objective C pods and my project is in Objective C. When I do so I get the error \"module map file '\/Users\/...\/Library\/Developer\/Xcode\/DerivedData\/BCFramework-aecawjeshbaibfeekdiasoxrrcjz\/Build\/Products\/Debug-iphoneos\/Socket.IO-Client-Swift\/SocketIO.modulemap' not found\"\r\n> \r\n> One thing to note here is that I am creating a custom framework instead of an application. Please suggest how should I proceed.\r\n\r\nI have the same issue but can't find if @ChiragBhutani1988 has create a separate issue or not...","@davidahouse @komocode @abbeycode Has anyone been able to figure this out? All the workarounds are for pods with mixed Swift\/Objective-C code. It seems like almost no one is trying to use Swift static libraries from an Objective-C project, which has no workarounds, apparently.","You can mix swift and objective-C in Framework, not pod library. Take a look at here: https:\/\/jsorge.net\/2019\/01\/23\/mixed-language-framework"],"labels":["s2:confirmed","d3:hard"]},{"title":"Improve docs to reduce confusion about static frameworks and static libraries","body":"There is confusion in the community about the differences between static frameworks and static libraries and what's available with 1.4.0 and 1.5.0.  An example is https:\/\/github.com\/apple\/swift-protobuf\/issues\/723 where the OP mixes up the two concepts. The podspec documentation for `static_framework` is very light.\r\n\r\nThe docs should be improved to reduce that confusion. \r\n\r\nPart of the answer is:\r\n\r\nhe best explanation of static frameworks is probably in the [1.4.0 CocoaPods blog announcement](http:\/\/blog.cocoapods.org\/CocoaPods-1.4.0\/).  Swift static libraries just released in the first 1.5.0 beta and the docs still need to be written.\r\n\r\nIn CocoaPods, a big difference between static frameworks and static libraries is that static frameworks are controlled by the podspec and static libraries by the Podfile.   Until CocoaPods 1.5.0, static libraries did not support modules and were therefore limited to Objective C apps.  With 1.5.0, `use_frameworks!` is no longer required for Swift apps and the pods will be built as static libraries.\r\n\r\nFor most pods, there is likely no reason to add static_framework's, since it is better to give the static versus dynamic control to the developer in their Podfile. However, if a pod has dependencies on static frameworks (most binary `vendored_framework` CocoaPods are static frameworks), the static_framework attribute is needed.","comments":["Agreed.","@paulb777 are you planning on tackling this? :)\r\n\r\nAnother thing I think is worth mentioning in the docs somewhere is the recommended way to \"wrap\" vendored binaries. Many podspecs are a simple wrapper for a vendored library\/framework, and providing steps on how to do that correctly would go a long way","@amorde Agreed that the docs should provide a recommended way to \"wrap\" vendored binaries. There are a few tutorials, but it would be good to consolidate or recommend the right way from here.  That's probably worth its own issue.\r\n\r\nI'm not likely to tackle this anytime soon, but I would have the bandwidth to help and review if anyone else wants to. :P ","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","@maksymmalyhin is working on documentation in https:\/\/github.com\/firebase\/firebase-ios-sdk\/pull\/5181"],"labels":["t1:enhancement","s3:detailed","d2:moderate"]},{"title":"Test target with inherit! :search_paths missing framework search paths","body":"* [x] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI updated our project to use proper target inheritance; in doing this, I used `inherit! :search_paths` for the test target.\r\n\r\n## What did you expect to happen?\r\n\r\nI expected the project to build successfully when building for testing.\r\n\r\n## What happened instead?\r\n\r\nThe build fails when precompiling the bridging header for the test target because it can't find the headers (for FMDB in the attached test project). If I remove `inherit! :search_paths` from the test targets, this fixes the build.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.4.0\r\n        Ruby : ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-darwin16]\r\n    RubyGems : 2.6.10\r\n        Host : Mac OS X 10.13.3 (17D102)\r\n       Xcode : 9.3 (9Q127n)\r\n         Git : git version 2.15.1 (Apple Git-101)\r\nRuby lib dir : \/Users\/basher\/.rvm\/rubies\/ruby-2.4.0\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 0864611ad37eb0f6134278ba484f35906c2eda0b\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/basher\/.rvm\/gems\/ruby-2.4.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\n[TestSearchPaths.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/1861092\/TestSearchPaths.zip)","comments":["I also noticed that when I remove `inherit! :search_paths`, the pods test target xcconfigs get properly scoped under the abstract_target (i.e. they have names like Pods-AbstractTarget-TestTarget). I would only expect the scoping to go away with `inherit! :none`, but maybe this could be a fundamental misunderstanding on my part. It's been awhile \ud83d\ude09\r\n\r\nAll of this behavior is demonstrated in the attached sample project by opening up its workspace and building for testing (command + shift + u). I've also tried with the beta release, and I got the same result.","@benasher44 its probably because there is logic that dedups what gets linked into the test target if its part of the parent target to avoid \"duplicate class\" warnings found when booting up the test bundle.\r\n\r\nHavent looked at the sample yet.","Hm what I said above is for linking, header paths should be there. Let me see.","Right! Avoiding the duplicate class warnings makes sense. That should be solved by ensuring that linker flags are not inherited. Framework search paths should still be there though.","@benasher44 one more thing I cant open your sample I get an error that Xcode proj is not working:\r\n![screen shot 2018-03-29 at 10 24 16 am](https:\/\/user-images.githubusercontent.com\/310370\/38103520-5d6c35e4-333b-11e8-93f8-84bf3a01322e.png)\r\n\r\nI am on Xcode 9.2\r\n\r\nedit: worked with Xcode 9.3 beta","@benasher44 confirmed. Only happens when using `use_frameworks!`, works with static libs.","Ah I made the project with Xcode 9b4.3, but the same happens for Xcode 9.2. @dnkoutso want me to remake it for you, or do you feel like you have a good handle on this?","I got it from here thanks, will need to figure out whats the bug.","Awesome. Thanks! <3","@benasher44 yes the issue is that a target with inherit search paths does not include the abstract target as part of its targets to inherit from and therefore everything trickles down from there including the name but also the paths of frameworks...","@benasher44 can confirm this works:\r\n```ruby\r\nplatform :ios, '9.0'\r\nuse_frameworks!\r\ninhibit_all_warnings!\r\n\r\npod 'CocoaLumberjack'\r\n\r\nabstract_target 'TestSearchPathsShared' do\r\n  pod 'FMDB'\r\n\r\n  target 'TestSearchPaths' do\r\n    pod 'SSZipArchive'\r\n\r\n    target 'TestSearchPathsTests' do\r\n      inherit! :search_paths\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThe way above is for the intended way I think of `inherit! :search_paths` to work. It makes more sense to me. Basically you have an app target and the test bundle that is using this app target as the host and therefore should not link dependencies linked by the parent and just inherit the search paths.\r\n\r\nIn your original case there is no target to inherit from since the parent is abstract.","I am not certain if the other one is intended to work, perhaps it should error out?","I think it was intended to work. The guide has a good example of when this is particularly useful:\r\n\r\nhttps:\/\/guides.cocoapods.org\/syntax\/podfile.html#abstract_target","You are right. I figured out why it works on static libs mode...its a bit by \"luck\" again because we blindly add header search paths for ALL things for aggregate target xcconfigs. Seems like two bugs here.","@benasher44 this change https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/7559 makes it so it actually breaks for static libraries which given the current integration it is correct be broken. \r\n\r\nI think the actual fix now is to properly figure out that this target is inheriting from an abstract target.","@benasher44 I tried to surface this issue from the dead....its still exist on latest master and you are right the docs do mention this as a valid use case.\r\n\r\nI still don't know how to fix it and whether the fix is to remove the docs and that this case is not supported or \"works as expected\".","@dnkoutso `inherit! :search_paths` main use case is test targets that are injected into the bundle under test though right? ","correct but in the initial report it was not nested under an app bundle for example","Oh I see what you mean. We recently removed the `abstract_target`, which explains why this is working for us now.\r\n\r\n\r\nThis still feels like something we should fix though. What did you mean about not being nested under an app bundle?\r\n","```ruby\r\n  target 'TestSearchPaths' do\r\n    pod 'SSZipArchive'\r\n\r\n    target 'TestSearchPathsTests' do\r\n      inherit! :search_paths\r\n    end\r\n  end\r\n```\r\n\r\nI will keep it open and discuss internally if it needs to be fixed.","But that is nested, no?","Tried 1.6.0.beta.2, and some `inherit :search_path` lines we had in place and working had to be removed.","I have the same issue with CocoaPods v 1.7.3\r\n\r\nhere is my Podfile\r\n\r\n```\r\nplatform :ios, '11.0'\r\nuse_frameworks!\r\ninhibit_all_warnings!\r\n\r\nworkspace 'myApp'\r\nproject 'myApp.xcodeproj'\r\n\r\ndef ui_helpers\r\n  pod 'Kingfisher'\r\n  pod 'NotificationBannerSwift', '2.0.1'\r\n  \r\n  # keyboard handling\r\n  pod 'IQKeyboardManagerSwift'\r\n  \r\n  # Animation\r\n  pod 'lottie-ios'\r\n  \r\n  # Collection diffing\r\n  pod 'IGListKit'\r\n  \r\n  # Layout\r\n  pod 'SnapKit'\r\n  \r\n  # Payment\r\n  pod 'CardIO', '~> 5.4'\r\nend\r\n\r\ndef facebook\r\n  pod 'FBSDKCoreKit', '~> 4.38.1'\r\n  pod 'FBSDKShareKit', '~> 4.38.1'\r\n  pod 'FBSDKLoginKit', '~> 4.38.1'\r\nend\r\n\r\ndef reactive\r\n  pod 'MERLin', '~> 2.0.0'\r\nend\r\n\r\ndef analytics\r\n  pod 'Fabric'\r\n  pod 'Crashlytics'\r\n  pod 'Firebase\/Core'\r\n  \r\n  pod 'Zaius', '~>  2.0'\r\n  pod 'Analytics', '~> 3.0'\r\n  \r\n  pod 'Segment-Appboy', '~> 2.0.3'\r\n  \r\n  pod 'GoogleAnalytics', '~> 3.17'\r\nend\r\n\r\ndef other_utils\r\n    # Paypal\r\n    pod 'Braintree', '~>  4.9'\r\n    \r\n    #A\/B Testing\r\n    pod 'Split', '~> 2.3.0'\r\nend\r\n\r\ntarget 'myApp' do\r\n  pod 'SwiftFormat\/CLI', '0.39.4'\r\n  pod 'GooglePlaces', '~> 2.5'\r\n  \r\n  ui_helpers\r\n  facebook\r\n  reactive\r\n  analytics\r\n  other_utils\r\n  \r\n  target 'myAppTests' do\r\n    inherit! :search_paths\r\n  end\r\nend\r\n\r\nabstract_target 'Modules' do\r\n  ui_helpers\r\n  reactive\r\n  other_utils\r\n  \r\n  pod 'RxDataSources'\r\n  \r\n  # - Targets\r\n  # Parent modules\r\n  target 'myAppFoundation' do\r\n    target 'myAppFoundationTests' do\r\n      inherit! :search_paths\r\n    end\r\n  end\r\n  \r\nend\r\n\r\npost_install do |installer|\r\n  installer.pods_project.targets.each do |target|\r\n    target.build_configurations.each do |config|\r\n      config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'DWARF'\r\n      config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = '$(inherited)'\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nwhat happens to me is that `myAppTests` works just fine. what fails is the `myAppFoundationTests ` with the following error:\r\n\r\n```\r\n2019-08-01 11:22:02.840300+0100 xctest[52740:5159767] The bundle \u201cmyAppFoundationTests\u201d couldn\u2019t be loaded because it is damaged or missing necessary resources. Try reinstalling the bundle.\r\n2019-08-01 11:22:02.840438+0100 xctest[52740:5159767] (dlopen_preflight(\/Users\/aaaaa\/Library\/Developer\/Xcode\/DerivedData\/myApp-ckayahdterphykbuvlunituyshxo\/Build\/Products\/Debug-Prod-iphonesimulator\/MOFoundationTests.xctest\/myAppFoundationTests): Library not loaded: @rpath\/Braintree.framework\/Braintree\r\n  Referenced from: \/Users\/aaaaa\/Library\/Developer\/Xcode\/DerivedData\/consumer-ckayahdterphykbuvlunituyshxo\/Build\/Products\/Debug-Prod-iphonesimulator\/myAppFoundationTests.xctest\/myAppFoundationTests\r\n  Reason: image not found)\r\nProgram ended with exit code: 82\r\n```\r\n\r\nIf I set the test host application to be the main target, then it all works, but this will cause the app to be launched which is time consuming.\r\ncan anyone help?","This is still an issue when using targets. Any plans to fix it?\r\n"],"labels":["t2:defect","s2:confirmed","d2:moderate"]},{"title":"Can not strip the frameworks in project with single quote in the name","body":"# Report\r\n\r\n## What did you do?\r\n\r\nBuild project that contains single quotes `'` in its name and uses `CocoaPods`.\r\n\r\n## What did you expect to happen?\r\n\r\nSuccessful build. \r\n\r\n## What happened instead?\r\n\r\nThe build was failed in the `Run Script` phase, script name `$PROJECT_NAME-frameworks.sh`. \r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.4.0\r\n        Ruby : ruby 2.2.5p319 (2016-04-26 revision 54774) [x86_64-darwin15]\r\n    RubyGems : 2.4.8\r\n        Host : Mac OS X 10.13.3 (17D102)\r\n       Xcode : 9.2 (9C40b)\r\n         Git : git version 2.14.3 (Apple Git-98)\r\nRuby lib dir : \/Users\/orestsavchak\/.rvm\/rubies\/ruby-2.2.5\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ e51b40cfb010e9383e38c543fba86750fc6f2030\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/orestsavchak\/.rvm\/gems\/ruby-2.2.5\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\nplatform :ios, '9.0'\r\n\r\ntarget 'Twist \\'n\\' Slide' do\r\n  # Uncomment the next line if you're using Swift or would like to use dynamic frameworks\r\n   use_frameworks!\r\n\r\n  # Pods for Twist 'n' Slide\r\n  pod \"GetSocial\/Core\"\r\n  pod \"GetSocial\/UI\"\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\n[GitHub example](https:\/\/github.com\/hydro0\/Twist-n-Slide)\r\n\r\n## Workaround\r\n\r\nI've fixed that by replacing single quotes with double quotes on the line `98` in the `$PROJECT_NAME-frameworks.sh`. ","comments":["- Seems like we may want to `shellescape` the strings we interpolate into build script phases","Same issue. Fixed it by adding a \\ before the apostrophe. ","Hi, I think I found a solution. I have create this [PR](https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/7870). \r\nI couldn't find any similar unit test that cover this part. But if there are let me know that I will happily write them."],"labels":["t2:defect","s2:confirmed","help wanted"]},{"title":"Duplicate frameworks ","body":"* [x] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nWith a project with multiple static library and test targets that share dependencies (see attached sample project for specifics), and `use_frameworks` a target can have duplicate dependencies, yet not fail, and end up with duplicate entries in the `Pods-foo-frameworks.sh` shell script, causing race conditions where the same framework is copied, and codesigned, at the same time it is deleted.\r\n\r\n## What did you expect to happen?\r\n\r\n[This pull request](https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/6877) added a `.uniq` to the list of frameworks a pod depends on. This broke the target validation that should produce this error:\r\n\r\n```\r\n[!] The 'Pods-Sometarget' target has frameworks with conflicting names: someduplicatedependency.\r\n```\r\n\r\n## CocoaPods Environment\r\n\r\n<details>\r\n<summary>pod env (click to expand)<\/summary>\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.4.0\r\n        Ruby : ruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin16]\r\n    RubyGems : 2.5.2\r\n        Host : Mac OS X 10.13.3 (17D102)\r\n       Xcode : 9.2 (9C40b)\r\n         Git : git version 2.15.1\r\nRuby lib dir : \/Users\/ksmiley\/.rubies\/ruby-2.3.3\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 941cabb34b0d56a20a0fb05afbee8f64b894d24b\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/ksmiley\/.gem\/ruby\/2.3.3\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\nclaide-plugins         : 0.9.2\r\ncocoapods-deintegrate  : 1.0.2\r\ncocoapods-dependencies : 1.1.0\r\ncocoapods-playgrounds  : 1.2.2\r\ncocoapods-plugins      : 1.0.0\r\ncocoapods-search       : 1.0.0\r\ncocoapods-stats        : 1.0.0\r\ncocoapods-trunk        : 1.3.0\r\ncocoapods-try          : 1.1.0\r\ncocoapods_debug        : 0.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '11.0'\r\n\r\nuse_frameworks!\r\n\r\ntarget :Foo do\r\n  pod \"ModelMapper\"\r\n\r\n  target :FooTests do\r\n    inherit! :search_paths\r\n  end\r\nend\r\n\r\ntarget :Bar do\r\n  pod \"ModelMapper\"\r\nend\r\n```\r\n<\/details>\r\n\r\n## Project that demonstrates the issue\r\n\r\nHere's a sample project: [CocoaPodsDuplicateTargets.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/1823627\/CocoaPodsDuplicateTargets.zip)\r\n\r\nToo specifically see the issue, open `Pods\/Target\\ Support\\ Files\/Pods-FooTests\/Pods-FooTests-frameworks.sh` and scroll to the bottom.\r\n\r\n\r\n\ud83c\udf08\r\n","comments":["Ah it's important for the race condition issue that `COCOAPODS_PARALLEL_CODE_SIGN` is set to `true`. But without it set to true you still end up doing some duplicate copies and codesigns","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Still a problem. ","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","@keith can you try with #8076 ? That may have accidentally fixed it","ah, nevermind, misunderstood the actual issue. so the desired behavior here would be to fail early rather than just silently removing duplicates","I think possibly de-duping would be ideal. But that might get tough. ","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n"],"labels":["t2:defect"]},{"title":"Running `pod install` should be able to handle git conflict markers in the lock files","body":"* [x] I've read and wrote the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n* Pulled\r\n  ```sh\r\n  $ git pull origin master \r\n\r\n  \u276f git pull origin master\r\n  From https:\/\/github.com\/artsy\/eigen\r\n   * branch              master     -> FETCH_HEAD\r\n  Auto-merging Podfile.lock\r\n  CONFLICT (content): Merge conflict in Podfile.lock\r\n  Auto-merging Podfile\r\n  Auto-merging Artsy_Tests\/View_Controller_Tests\/Live_Auction\/LiveAuctionViewControllerTests.swift\r\n  ...\r\n  ```\r\n\r\n* Then I manually edited the `Podfile.lock` to remove the conflicts. \r\n* Then ran `pod install`.\r\n\r\n## What did you expect to happen?\r\n\r\n* `git pull origin master`\r\n* `pod install`\r\n\r\nIt would resolve the lockfile git conflicts for me. I do [this with yarn](https:\/\/github.com\/yarnpkg\/yarn\/pull\/3544).\r\n\r\n## What happened instead?\r\n\r\nCP safely lets us know that it can't run with the conflict markers\r\n\r\n## CocoaPods Environment\r\n\r\nCP master\r\n\r\n## Project that demonstrates the issue\r\n\r\nNo need.","comments":["any updates?","Any updates would be posted here - PRs welcome! I don't think anyone is currently working on this."],"labels":["t1:enhancement","s2:confirmed","d2:moderate"]},{"title":"Cannot set the CFBundleDevelopmentRegion in Info.plist of resource bundles","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: http:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n* [*] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nClone the lastest CocoaPods project to review the resource bundle's Info.plist's generate rules.\r\nCheck the issue list.\r\n\r\n## What did you expect to happen?\r\n\r\nApply the app target's `development region` to all the pods' resource bundle.\r\n\r\n## What happened instead?\r\n\r\nThe `CFBundleDevelopmentRegion` key in Info.plist is set to `en` with a default key.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.3.1\r\n        Ruby : ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-darwin16]\r\n    RubyGems : 2.6.13\r\n        Host : Mac OS X 10.12.6 (16G29)\r\n       Xcode : 9.2 (9C40b)\r\n         Git : git version 2.14.3 (Apple Git-98)\r\nRuby lib dir : \/Users\/hanwei\/.rvm\/rubies\/ruby-2.4.1\/lib\r\nRepositories : bitbucket - https:\/\/bitbucket.org\/UItachi\/specs.git @ 6aa9c96ed1c82b32f906285dc004c0a50bc16666\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ bec882057e88704a796126484d0e627b654b43eb\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/hanwei\/.rvm\/gems\/ruby-2.4.1\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n...\r\n\r\n## Project that demonstrates the issue\r\n\r\nI found the [onepassword-app-extension](https:\/\/github.com\/agilebits\/onepassword-app-extension) has the same issue there.\r\n\r\n\r\n---\r\n\r\n# Additional\r\n\r\nI found [this issue](https:\/\/github.com\/CocoaPods\/Xcodeproj\/issues\/259) is the starter, resource bundle needs an Info.plist as a standard. For the `CFBundleDevelopmentRegion` key,  the region will be used in some system API to localize some identifiers like `UIBarButtonSystemItemDone` and `UIBarButtonSystemItemCancel` in pod projects.\r\n\r\nCurrently, the https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/3edf0f3fdc4e34327e5a9507b4d933fd325339b8\/lib\/cocoapods\/generator\/info_plist_file.rb#L105 uses the `en` for all the cases, this should be configurable like a property in cocoapods. \r\n\r\nI'm not good at ruby here, sorry! Please confirm this, thanks! Besides, I'm happy for that there are some official `post_install` hooks, too.\r\n\r\n","comments":["#4729","Yes that needs to be improved.","I resolved it as fixed with the following post_install hook code temporarily.\r\n\r\n```ruby\r\n    post_install do |installer|\r\n        # Update the CFBundleDevelopmentRegion values for resource bundles manually.\r\n        # https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/7486\r\n        pod_project_root = File.dirname(installer.pods_project.path)\r\n        info_plist_files = Dir.glob(\"#{pod_project_root}\/**\/*Info.plist\")\r\n\r\n        info_plist_files.each do |info_plist|\r\n            # puts info_plist\r\n            cmd = \"\/usr\/libexec\/PlistBuddy '#{info_plist}' -c 'Set CFBundleDevelopmentRegion zh_CN'\"\r\n\r\n            output = `#{cmd}`\r\n            if $?.exitstatus != 0\r\n                puts output\r\n            end\r\n        end\r\n\r\n        puts \"\\n\\e[3m\\e[32mUpdated the CFBundleDevelopmentRegion key for #{info_plist_files.length} pod resource bundle(s)!\\e[0m\\e[23m\\n\\n\"\r\n    end\r\n```","will do for now","Thanks @dnkoutso , I think the right fix is to read the region value from the main app target's `Info.plist` and set it to all the dependent pods' resource bundles, it seems all the Info.plist's name have a format like `ResourceBundle-<PODNAME>-Info.plist` from the static library, the framework bundles have a config file named `Info.plist` within it, too.  Just a reminder. :)","@xingheng would be awesome if you can open a PR for it! I think if you learn the project you can make great improvements :)","I dug out a new big hole here when trying to fix it. The `INFOPLIST_FILE` didn't be read in all the components of CocoaPods, that makes sense because the `Info.plist` file could be localized into multiple languages (with multiple subfiles). It's a key to localize, not a result, my thought in above is wrong.\r\n\r\nGo back to the localization of `UIBarButtonSystemItemDone`, the prefer localized language is controlled by `preferredLocalizations` of `NSBundle`. [Understanding iOS internationalization](http:\/\/maniak-dobrii.com\/understanding-ios-internationalization\/), this article has a deep explanation.\r\n\r\nHow to fix it?\r\nThe podspec's owners should maintain the supported localization for their resource bundles, `CocoaPods` should support to define it\/them in\/like `resource_bundles` in podspec. I saw it's defined in https:\/\/github.com\/CocoaPods\/Core\/blob\/37ed7bbb6b822a1dfee580dc5e1facda418fe31c\/lib\/cocoapods-core\/specification\/dsl.rb#L1185 with type `[String, Array]`, this isn't enough to describe it, there should have `[String, Hash]` to expand the bundle properties including paths, localized language list, development region, etc.\r\n\r\nHow does the above hook script work?\r\nIt uses [the last search pattern](https:\/\/developer.apple.com\/documentation\/foundation\/nsbundle?language=objc) to determine the final localization resource, that isn't the best solution but works.\r\n\r\nFrom this point, `CocoaPods` didn't support localization too much, there will be plenty of discussion and code needed to implement it. This should be confirmed by maintainers, not a new ruby guy like me. I'll watch it related later. :)","@xingheng in the first comment you had mentioned to read the value from the app target and apply that while in your second comment it seems you are arguing to let the podspec author to specify it instead.\r\n\r\nWhich one is it?","Exactly, it's not just only the `CFBundleDevelopmentRegion` key but the entire `Info.plist` file, which should be localized into multiple languages. The podspec author should specify the localization language list including the corresponding resource bundles, then `cocoapods` parses it and generates the localized `Info.plist` for those bundles.\r\n\r\nIf the high level app target has only one\/some of localization configurations, `cocoapods` should build the copy the existing corresponding bundles subset to app product directory.","The original issue [https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/4729](url) seems to have been regressed in the latest beta release, I am guessing due to these changes?"],"labels":["t1:enhancement","d2:moderate","help wanted","s7:workaround available"]},{"title":"\"Failed to connect to GitHub\" error misleading, should print full error","body":"* [X] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n(note: this actually happened to a friend of mine, I'm just submitting the issue on their behalf)\r\n\r\n## What did you do?\r\n\r\nRun `pod repo update`\r\n\r\n## What did you expect to happen?\r\n\r\nIt should have updated the master repo (I only have the one default spec repo).\r\n\r\n## What happened instead?\r\n\r\nIt printed an error\r\n\r\n```\r\nUpdating spec repo `master`\r\n[!] Failed to connect to GitHub to update the CocoaPods\/Specs specs repo - Please check if you are offline, or that GitHub is down\r\n```\r\n\r\nThe problem with this is it actually did connect to GitHub just fine and updated the repo just fine. I can see that with the `--verbose` flag. Furthermore, deleting the repo and re-running `pod setup` also clones it just fine.\r\n\r\nAfter some digging it turns out that it's not a `git` command failing at all. It's the `modified_since_commit()` call, which is doing a GET request to `https:\/\/api.github.com\/repos\/CocoaPods\/Specs\/commits\/master`. This request must be failing somehow, but CocoaPods is catching the error and just printing a generic message.\r\n\r\nThere's two things that should be corrected here:\r\n\r\n1. The message is wrong. GitHub is not down, and I connected to it just fine. I know this because the `git fetch origin` call worked just fine. This is a subsequent REST call that failed. I'm not quite sure how to adjust the error message for this, but I do know if the `git` command succeeded, then the subsequent GET failed, we shouldn't be telling the user that GitHub is down.\r\n2. The actual error in question should be printed (at least if `--verbose` is specified). Ideally it would even be inspected to determine the appropriate error message to print based on what error it is, but at the very least, the error surely contains useful information about what actually happened.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n```\r\n   CocoaPods : 1.4.0\r\n        Ruby : ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\r\n    RubyGems : 2.0.14.1\r\n        Host : Mac OS X 10.12.6 (16G1212)\r\n       Xcode : 9.2 (9C40b)\r\n         Git : git version 2.16.1\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.0\/usr\/lib\r\nRepositories : honeywell-scm-granite_apps-ios-granite-podspecs - <sanitized URL> @ 077ebca2d8069f8386ac134a7d7bf760dfa5bb2a\r\n               honeywell-scm-maca-ios-maca-podspecs - <sanitized URL> @ de8a142f94da57cee92cf6c89e9368ba26080b13\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ a52f51141dd8222e5816978aaacbcb826fd97623\r\n```\r\n### Installation Source\r\n```\r\nExecutable Path: \/usr\/local\/Cellar\/cocoapods\/1.4.0\/libexec\/bin\/pod\r\n```\r\n### Plugins\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n### Podfile\r\nSanitized","comments":["Ok I have to backtrack slightly. After looking at my friend's output again, the `git` succeeded *against a different spec repo*. The error with the `master` repo happens before trying to run `git`. So my complaint about \"GitHub is down\" isn't actually accurate. But it's still *probably* wrong, and definitely not very helpful.\r\n\r\nIf you want to assert that GitHub is down, you should do so only after looking at the error and verifying that it corresponds with a \"failed to connect\" error. And even then you should offer the suggestion that a network proxy could be interfering.","I also have to wonder if maybe getting an error trying to hit GitHub's API should just result in treating the repo as potentially-modified anyway, so that way the `git` command would be the source of truth for whether GitHub really is accessible or not. It could still print a warning saying that an error occurred accessing the GitHub API, but it doesn't need to be a fatal error.","The line of code in question for the error is [`cocoapods-core\/github.rb:105`](https:\/\/github.com\/CocoaPods\/Core\/blob\/e0c6884b37ab6a44095a2bbdbfe9032627a90388\/lib\/cocoapods-core\/github.rb#L105).","Specifically this call is failing at `\/lib\/cocoapods-core\/github.rb:108` in `GitHub.modified_since_commit(url, commit)`","The exception message that I get is `SSL_connect returned=1 errno=0 state=SSLv2\/v3 read server hello A: tlsv1 alert protocol version`, maybe this is related somehow to GitHub recently switching to supporting on TLS v1.2? see: https:\/\/githubengineering.com\/crypto-removal-notice\/ and https:\/\/twitter.com\/grantaholliday\/status\/966757304640028672","If this is a TLS issue, why am I not replicating it on my own setup? It looks like `'rest'` is a built-in library, not a gem, and I'm running the exact same version of Ruby (on the same version of macOS) as my friend is. The only difference is my friend is using the system-provided Ruby whereas I'm using the same version installed from MacPorts (because my system rubygems got screwed up due to bad advice on how to update it). Here's my own `pod env`:\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.4.0\r\n        Ruby : ruby 2.0.0p648 (2015-12-16 revision 53162) [x86_64-darwin16]\r\n    RubyGems : 2.0.14.1\r\n        Host : Mac OS X 10.12.6 (16G1212)\r\n       Xcode : 9.2 (9C40b)\r\n         Git : git version 2.14.3 (Apple Git-98)\r\nRuby lib dir : \/opt\/local\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 74be351eeddfe2281cf1986c85278c9c9e051ab4\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/opt\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n","We treat that as an error to avoid hammering githubs servers, but I agree that printing out (some of) the underlying error would be helpful, if anyone wants to submit a PR that does that.","> why am I not replicating it on my own setup?\r\n\r\nTo repro this, you'll need to be using the system ruby on macOS Sierra: https:\/\/github.com\/rubygems\/rubygems\/issues\/1912#issuecomment-298747586\r\n\r\n> Running \/usr\/bin\/gem on macOS will use Apple's Ruby 2.0.0 linked to their old OpenSSL 0.9.8, which will fail with servers supporting only TLS 1.2.","For anyone encountering this error, you can fix it by updating to High Sierra or installing Ruby via Homebrew :)","Or via MacPorts","Co-worker with Ruby installed via RVM, and CocoaPods installed via gem never experienced the error. Followed his example and the error evaporates.","If you're trying to fix a broken Travis build and you're seeing this error, try this fix in your .travis.yml file:\r\n\r\nosx_image: xcode9.3beta\r\n\r\nthat should run your build on 10.13 (High Sierra) and as @SSheldon pointed out, fixes this issue.","Reporting that since a few days ago, `pod update` started failing on me:\r\n\r\n```\r\n$ pod update --verbose\r\nUpdate all pods\r\n  Preparing\r\n\r\nUpdating local specs repositories\r\n\r\nUpdating spec repo `master`\r\n[!] Failed to connect to GitHub to update the CocoaPods\/Specs specs repo - Please check if you are offline, or that GitHub is down\r\n\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-core-1.4.0\/lib\/cocoapods-core\/github.rb:105:in `rescue in modified_since_commit'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-core-1.4.0\/lib\/cocoapods-core\/github.rb:100:in `modified_since_commit'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-core-1.4.0\/lib\/cocoapods-core\/source.rb:445:in `unchanged_github_repo?'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-core-1.4.0\/lib\/cocoapods-core\/source.rb:334:in `update'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/lib\/cocoapods\/sources_manager.rb:88:in `block (2 levels) in update'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/lib\/cocoapods\/user_interface.rb:64:in `section'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/lib\/cocoapods\/sources_manager.rb:87:in `block in update'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/lib\/cocoapods\/sources_manager.rb:86:in `each'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/lib\/cocoapods\/sources_manager.rb:86:in `update'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/lib\/cocoapods\/installer\/analyzer.rb:247:in `block in update_repositories'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/lib\/cocoapods\/installer\/analyzer.rb:245:in `each'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/lib\/cocoapods\/installer\/analyzer.rb:245:in `update_repositories'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/lib\/cocoapods\/installer.rb:150:in `block in resolve_dependencies'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/lib\/cocoapods\/user_interface.rb:64:in `section'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/lib\/cocoapods\/installer.rb:149:in `resolve_dependencies'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/lib\/cocoapods\/installer.rb:116:in `install!'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/lib\/cocoapods\/command\/update.rb:81:in `run'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/claide-1.0.2\/lib\/claide\/command.rb:334:in `run'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/lib\/cocoapods\/command.rb:52:in `run'\r\n\/Library\/Ruby\/Gems\/2.0.0\/gems\/cocoapods-1.4.0\/bin\/pod:55:in `<top (required)>'\r\n\/usr\/local\/bin\/pod:23:in `load'\r\n\/usr\/local\/bin\/pod:23:in `<main>'\r\n```","This is the same error I am getting right now. I am not sure about the problem. Deleting and reinstalling repo. not solving the problem.","I [confirm](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/7447#issuecomment-367858136) fix by upgrading from system Ruby (2.0 on MacOS Sierra - 10.12.6). I used `brew install ruby`, and made sure the installed binary under `\/usr\/local\/bin` takes precedent over system's at \/usr\/bin (confirm by ruby --version). Latest `ruby` from `brew` is 2.5. As others have said, ruby 2.0 from MacOS default was the culprit.\r\n\r\n+1 to original issue here of better debug output on what the cause of \"Failed to connect to GitHub\" is. As is evident, it wasn't network issue connecting to github but something else.\r\n\r\nFYI, I had cocoapod at 1.2.1 before trying again after upgrade to 1.4.0. There's no difference in result or debug output between the 2 cocoapod versions.","I was able to solve it by installing latest version of ruby. Thank you \ud83d\udc4d ","oops misclicked.","MacOS Sierra - 10.12.6:\r\ni fixed it by:\r\nbrew install ruby\r\nsudo gem install cocoapods","It's still not working for me. Getting this error: \r\n\r\n> [!] Failed to connect to GitHub to update the CocoaPods\/Specs specs repo - Please check if you are offline, or that GitHub is down\r\n\r\nI have, \r\n\r\nMacOS Sierra: 10.12.6 (16G29)\r\nCocoaPods: 1.4.0\r\nRuby: 2.4.0\r\n\r\nAny solution?","@hemangshah \r\ncan you try with Ruby: 2.5\r\ni have same configuration & works for me after update Ruby..","It works with ruby 2.5, but the error message is plain wrong, lost two hours for a 'pod outdated'...","@przala and @ggreco - what's the exact solution then?\r\n","Read my comment","@przala - No binary rubies available for: osx\/10.12\/x86_64\/ruby-2.5.0.\r\n@fungilation - sure. ","@fungilation - Can you please share your OSX version? Ruby Version? and CocoaPods version? This will help me to understand to which I should upgrade. For me, I am running OSX 10.12.6 with Ruby 2.0.0 (trying to installing 2.5.0) and CocoaPods 1.4.0.","Dude, I wrote all of these [in my comment](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/7447#issuecomment-368245483).","Hello all, thanks for your replies. I have fixed the issue by upgrading my Mac's OSX, Xcode, ruby and CocoaPods version to the latest.","Don't forget to restart your Terminal session otherwise it might not pick up the new `ruby` version. ","Ruby update on Sierra doesn't seem to resolve this:\r\n\r\n**$ sw_vers**\r\nProductName:\tMac OS X\r\nProductVersion:\t10.12.6\r\nBuildVersion:\t16G1212\r\n\r\n**$ ruby --version**\r\nruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin16]\r\n**$ pod --version**\r\n1.4.0\r\n\r\n**$pod update**\r\nUpdate all pods\r\nUpdating local specs repositories\r\n**[!] Failed to connect to GitHub to update the CocoaPods\/Specs specs repo - Please check if you are offline, or that GitHub is down**\r\n","Well, turns out if you are using **homebrew** to install **ruby** via **rbenv**, then **homebrew** will not use installed from **rbenv** version of **ruby** and will use systems' ruby instead.\r\n\r\n```\r\n$ sw_vers\r\nProductName:\tMac OS X\r\nProductVersion:\t10.12.6\r\nBuildVersion:\t16G1212\r\n\r\n$ ruby --version\r\nruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin16]\r\n$ pod --version\r\n1.4.0\r\n\r\n$openssl version\r\nOpenSSL 1.0.2n  7 Dec 2017\r\n\r\n$ ruby -ropenssl -e 'puts OpenSSL::OPENSSL_VERSION'\r\nOpenSSL 1.0.2n  7 Dec 2017\r\n\r\n$pod update\r\nUpdate all pods\r\nUpdating local specs repositories\r\n[!] Failed to connect to GitHub to update the CocoaPods\/Specs specs repo - Please check if you are offline, or that GitHub is down\r\n```\r\n\r\nHmm..\r\n```\r\n$ pod env\r\n   CocoaPods : 1.4.0\r\n        Ruby : ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\r\n    RubyGems : 2.0.14.1\r\n    ...\r\n```\r\n\r\nWell, turns out if you are using **homebrew** to install **ruby** via **rbenv**, then **homebrew** will not use installed from **rbenv** version of **ruby** and will use systems' ruby instead.\r\n\r\n**Workaround**\r\n- find pod bin (for me it was `\/usr\/local\/Cellar\/cocoapods\/1.4.0\/libexec\/bin`)\r\n- open it in text editor\r\n- change path in first line For example:\r\nChange `#!\/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.0\/usr\/bin\/ruby`\r\nTo `#!\/Users\/YOUR_USERNAME\/.rbenv\/versions\/2.5.0\/bin\/ruby` (I installed v. 2.5.0)\r\n\r\n```\r\n$ pod env\r\n   CocoaPods : 1.4.0\r\n        Ruby : ruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin16]\r\n    RubyGems : 2.7.3\r\n    ...\r\n```\r\n\r\nDifferent rubygems version and `pod update` works fine now.\r\n\r\nUnfortunately the change will not work after updating cocoapods \/ deleting or changing rbenv's ruby version.","I got this error and agree with the above point that a better error message could be output. The issue you may be experiencing is that Cocoapods is not using the newer version of Ruby, even if you have it installed (it might still be using an old version). This is how I resolved it. I'm including some extra output in case other users experiencing this issue want to check their settings. \r\n```\r\n$ pod update\r\n[!] Failed to connect to GitHub to update the CocoaPods\/Specs specs repo - Please check if you are offline, or that GitHub is down\r\n```\r\nI hadn't updated my system in a while so followed the advice to update Ruby. \r\n1. I got the new version of Ruby via Brew (though I had to update Brew first, which I had to run xcode-select --install first). \r\n2. Started new Terminal session. Checked Ruby Version. \r\n```\r\n$ ruby --version\r\nruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin16]\r\n```\r\nGreat, I have the new version of Ruby installed. Unfortunately pod update still gave me the issue. I checked what pod was using. \r\n\r\n```\r\n$ pod env\r\n   CocoaPods : 1.0.1\r\n        Ruby : ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\r\n    RubyGems : 2.0.14.1\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.0\/usr\/lib\r\n```\r\n\r\nUsing the old Ruby version - that's not what I want. Checked what my system was using (sanity check). \r\n```\r\n$ ruby --version\r\nruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin16]\r\n$ which ruby\r\n\/usr\/local\/bin\/ruby\r\n$ which pod\r\n\/usr\/local\/bin\/pod\r\n```\r\n\r\n3 (option 1). Followed advice to install Cocoapods (I specified 1.0.1 because that's what my team must use).\r\n`$ gem install cocoapods -v 1.0.1`\r\n```\r\n$ pod env\r\n   CocoaPods : 1.0.1\r\n        Ruby : ruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin16]\r\n    RubyGems : 2.7.6\r\nRuby lib dir : \/usr\/local\/Cellar\/ruby\/2.5.0_2\/lib\r\n```\r\nThat's what I want - it's using the new version of Ruby. I no longer get the issue and pod update works. \r\nI looked at the file at \/usr\/local\/bin\/pod to see what changed. The first line had changed from a path to the system Ruby that was version 2.0 to `#!\/usr\/local\/opt\/ruby\/bin\/ruby`, which is the location of the new version of Ruby.\r\n3 (option 2). Manually modifying the file that runs pod (`\/usr\/local\/bin\/pod` for me) and replacing the old Ruby location line at the top to your new Ruby location should suffice. \r\n\r\nNote: I'm on Mac OS X 10.12.6\r\n","This is probably caused by https:\/\/developer.github.com\/changes\/2018-02-01-weak-crypto-removal-notice\/","Something like the following in https:\/\/github.com\/CocoaPods\/Core would probably do the trick:\r\n\r\n```diff\r\ndiff --git a\/lib\/cocoapods-core\/github.rb b\/lib\/cocoapods-core\/github.rb\r\nindex e936f9eb..fa10a396 100644\r\n--- a\/lib\/cocoapods-core\/github.rb\r\n+++ b\/lib\/cocoapods-core\/github.rb\r\n@@ -93,7 +93,7 @@ module Pod\r\n       request_url = \"https:\/\/api.github.com\/repos\/#{repo_id}\/commits\/master\"\r\n       headers = {\r\n         'User-Agent' => 'CocoaPods',\r\n-        'Accept' => 'application\/vnd.github.chitauri-preview+sha',\r\n+        'Accept' => 'application\/vnd.github.v3.sha',\r\n         'If-None-Match' => %(\"#{commit}\"),\r\n       }\r\n \r\n@@ -101,6 +101,8 @@ module Pod\r\n         response = REST.get(request_url, headers)\r\n         code = response.status_code\r\n         code != 304\r\n+      rescue OpenSSL::SSL::SSLError => e\r\n+        raise Informative, \"Failed to connect to GitHub due to an SSL error:\\n\\t#{e}\\nMake sure your ruby install supports a new enough TLS version.\\nSee http:\/\/bundler.io\/guides\/rubygems_tls_ssl_troubleshooting_guide.html#automated-ssl-check for more information.\"\r\n       rescue\r\n         raise Informative, \"Failed to connect to GitHub to update the #{repo_id} specs repo - Please check if you are offline, or that GitHub is down\"\r\n       end\r\n\r\n```","Can confirm, updating to ruby 2.5 does fix the issue\r\ncheck `$ pod env` to verify which version of ruby your cocoapods install is running on, mine used to say 2.0 even after updating ruby version to 2.5. To update that I had to uninstall cocoapods with `$ gem uninstall cocoapods` then reinstall using `$ gem install cocoapods`.\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.4.0\r\n        Ruby : ruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin16]\r\n    RubyGems : 2.7.6\r\n        Host : Mac OS X 10.12.6 (16G1212)\r\n       Xcode : 9.2 (9C40b)\r\n         Git : git version 2.9.3\r\nRuby lib dir : \/usr\/local\/Cellar\/ruby\/2.5.0_2\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 22974e61fed3ea1abadc3d6575cfcf56cc1495e7\r\n```","@8of You are my hero. The million [StackOverflow](https:\/\/stackoverflow.com\/questions\/38993527\/cocoapods-failed-to-connect-to-github-to-update-the-cocoapods-specs-specs-repo) [threads](https:\/\/stackoverflow.com\/questions\/49021445\/not-able-to-update-pod-always-getting-error-github-is-down?noredirect=1&lq=1) that just banged on about \"UPDATE RUBY AND COCOAPODS RAWR\" led to nothing. You have saved my sanity.\r\n\r\nI can handle manually updating Cocoapod's ruby until I upgrade to High Sierra. Thanks again!\r\n\r\n(note to others: you still probably need to follow [these instructions](https:\/\/qiita.com\/satoshi-iwaki\/items\/ed2c267127dcc80baa21), but if that doesn't pan out, check `pod env` and make sure Cocoapods is behaving itself, @8of's comment above)","Even I faced the similar issue after updating ruby to newer version 2.5. I fixed it by upgrading cocoapods to version 1.4.0.\r\n\r\nThings that worked for me:\r\n\r\nMacOS : 10.12.6 \r\nXcode : 9.2\r\nRuby : 2.5.0p0 (2017-12-25 revision 61468)\r\nCocoapods : 1.4.0\r\n","I've just updated my ruby version - just do the following update:\r\nhttps:\/\/stackoverflow.com\/questions\/38194032\/how-to-update-ruby-version-2-0-0-to-the-latest-version-in-mac-osx-yosemite","use the rvm update newest ruby (my ruby version is 2.4.0)\u3002then 'pod repo update'  try it again .             if there is a problem ((Gem::GemNotFoundException)) ,  update the cocoapods ('sudo gem install -n \/usr\/local\/bin cocoapods') , it can be ok ","This solves my problem:  https:\/\/stackoverflow.com\/a\/48962041","Wow thanks everyone, I'm still using Sierra with Xcode 9.2 and this error was really not obvious to debug as it only appeared when updating pods, not when installing them.\r\n\r\nSo updating Ruby and reinstalling cocoapods did it for me as well. ","Updating ruby and cocopods solves my issue.  Thanks all for the help!\r\n\r\n","Faced the similar issue. Updated ruby to 2.5 and reinstalled cocoapods, that worked for me. Thanks @sheehanm ","had similar problem, i've updated ruby through homebrew and exec \"bundle install\" in the root of project","I tried all the way. It dosen't worked for me.\r\n\r\n```\r\n   CocoaPods : 1.5.0\r\n        Ruby : ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin17]\r\n    RubyGems : 2.7.6\r\n        Host : Mac OS X 10.13.4 (17E202)\r\n       Xcode :  ()\r\n         Git : git version 2.15.1 (Apple Git-101)\r\nRuby lib dir : \/Users\/JanzTam\/.rbenv\/versions\/2.5.1\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 6b22328e37c5864836422e645803117f859c3de6\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```","MacOS Sierra: 10.12.6 (16G29) is not worked,  upgrade Mac version is worked.","pod repo remove master\r\npod setup\r\npod install","updating ruby solved my problem, Thanks :)","I am experiencing the same problem. \r\nMy computer is behind a proxy and firewall, the git can communicate only over https protocol and my user account has no admin rights.\r\n\r\nI have installed Cocoapods via RubyGems with --user-install argument. I am able to clone any repository hosted on the GitHub with _git clone_ .\r\n\r\nMy solution is to not use _pod update_ or _pod repo update master_ commands but to use command _git pull_ inside the folder _\/.cocoapods\/repos\/master_ . This will update the cocoa pods master repo with success\r\n\r\n### pod repo update master --verbose\r\n```\r\nUpdating spec repo `master`\r\n[!] Failed to connect to GitHub to update the CocoaPods\/Specs specs repo - Please check if you are offline, or that GitHub is down\r\n\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/gems\/cocoapods-core-1.5.3\/lib\/cocoapods-core\/github.rb:105:in `rescue in modified_since_commit'\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/gems\/cocoapods-core-1.5.3\/lib\/cocoapods-core\/github.rb:100:in `modified_since_commit'\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/gems\/cocoapods-core-1.5.3\/lib\/cocoapods-core\/source.rb:453:in `unchanged_github_repo?'\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/gems\/cocoapods-core-1.5.3\/lib\/cocoapods-core\/source.rb:342:in `update'\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/gems\/cocoapods-1.5.3\/lib\/cocoapods\/sources_manager.rb:88:in `block (2 levels) in update'\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/gems\/cocoapods-1.5.3\/lib\/cocoapods\/user_interface.rb:64:in `section'\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/gems\/cocoapods-1.5.3\/lib\/cocoapods\/sources_manager.rb:87:in `block in update'\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/gems\/cocoapods-1.5.3\/lib\/cocoapods\/sources_manager.rb:86:in `each'\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/gems\/cocoapods-1.5.3\/lib\/cocoapods\/sources_manager.rb:86:in `update'\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/gems\/cocoapods-1.5.3\/lib\/cocoapods\/command\/repo\/update.rb:23:in `run'\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/gems\/claide-1.0.2\/lib\/claide\/command.rb:334:in `run'\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/gems\/cocoapods-1.5.3\/lib\/cocoapods\/command.rb:52:in `run'\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/gems\/cocoapods-1.5.3\/bin\/pod:55:in `<top (required)>'\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/bin\/pod:22:in `load'\r\n\/Users\/kowalski\/.gem\/ruby\/2.3.0\/bin\/pod:22:in `<main>'\r\n```\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.5.3\r\n        Ruby : ruby 2.3.3p222 (2016-11-21 revision 56859) [universal.x86_64-darwin17]\r\n    RubyGems : 2.5.2\r\n        Host : Mac OS X 10.13.5 (17F77)\r\n       Xcode : 9.4.1 (9F2000)\r\n         Git : git version 2.15.2 (Apple Git-101.1)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.3\/usr\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 382f17e9f35571d9d6af9a165544ef8a3127e73d\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/kowalski\/.gem\/ruby\/2.3.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n","Using Xcode 9.4\r\nSwift 3\r\nGot Resolved by below methods\r\n\r\nbrew install ruby\r\nsudo gem install cocoapods","```bash\r\nbrew install ruby\r\n\r\nsudo gem install cocoapods\r\n\r\npod setup\r\n```\r\n\r\nIt's work perfect !","@anhhtz When i use `pod setup`, it still show error :\r\n`[!] Failed to connect to GitHub to update the CocoaPods\/Specs specs repo - Please check if you are offline, or that GitHub is down`","Github change SSL, upgrade ruby may fix problem.","Old thread, but it might still help somebody to know that your http(s) proxy could be getting in the way. Try getting a direct connection to the internet in addition to everything suggested here.\r\n","> Github change SSL, upgrade ruby may fix problem.\r\n\r\nit's works for me, thx.","Always fail to connect to github with cocoapods 1.7.1.\r\n\r\nPod install works correctly but getting \"failed to connect to github\" error when trying to run pod \r\n\r\nupdate."],"labels":["t1:enhancement","d1:easy","s2:confirmed","help wanted"]},{"title":"Introducing use_frameworks! to a podfile leaves a reference to the Pods static library that no longer exists and makes the linker error out","body":"<!--\r\n\u2139 Please fill out this template when filing an issue.\r\nAll lines beginning with an \u2139 symbol instruct you with\r\nwhat info we expect.  \r\n\r\nBefore you start, are you using the latest CocoaPods release?\r\nA lot changes with Xcode releases that are not backwards compatible.\r\n\r\nNot an issue about the CocoaPods command line app? Please file an issue in the appropriate repo - https:\/\/github.com\/CocoaPods\r\nIssues are for feature requests, and bugs; questions should go to Stack Overflow\r\n\r\nUsing CocoaPods <= 0.39: http:\/\/blog.cocoapods.org\/Sharding\/\r\n\r\nUsing Xcode 8: Requires CocoaPods 1.1.0 or above.\r\n\r\nIssue with Nanaimo not loading:\r\nPlease run `[sudo] gem uninstall nanaimo` and remove all but the latest version.\r\n\r\nIssues with `pod search`? Try deleting your cache `rm -rf ~\/Library\/Caches\/CocoaPods`first.\r\n-->\r\n\r\n\ud83c\udf08\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\n1. Authored a podfile referencing a single pod _without_ the `use_frameworks!` directive\r\n2. Ran `pod install`\r\n3. Ensured the project could be built successfully\r\n4. Added a second pod reference for a pod that contains a vendored framework. _Added the `use_frameworks` directive_ (**NB**: I believe this is they key part that this directive is being added to an existing podfile which was already integrated)\r\n5. Ran `pod install` again\r\n6. Reopened the workspace in xCode\r\n7. Attempted to build the project\r\n\r\n## What did you expect to happen?\r\n\r\nThe project could be built successfully.\r\n\r\n## What happened instead?\r\n\r\nBuild failed with a linker error reading that a library named \"Pods-projectName\" could not be found.\r\nFurther investigation revealed that the linker command line arguments referenced \"Pods-projectName\" both as a static library **and** a framework (i.e. `-l Pods-projectName -framework Pods-projectName`)\r\n\r\nRemoving \"lidPods-projectName\" from the list of libraries and frameworks in the project settings immediately allowed to successfully build the project.\r\n\r\n## CocoaPods Environment\r\n\r\n**NB**: Apologies, parts containing confidential information have been removed.\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.4.0\r\n        Ruby : ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\r\n    RubyGems : 2.0.14.1\r\n        Host : Mac OS X 10.12.6 (16G1212)\r\n       Xcode : 9.2 (9C40b)\r\n         Git : git version 2.14.3 (Apple Git-98)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.0\/usr\/lib\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/Cellar\/cocoapods\/1.4.0\/libexec\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nPlease let me know which parts you need specifically, I will try my best to strip any confidential information from them. \r\n","comments":["Most likely a legit de integration issue.","@DmytroLapshyn there is no need to strip and upload your real project. Can you create a brand new project that also clearly demonstrates the issue?","@dnkoutso I tried and surprisingly this resulted in a no-repro. Since the \"real\" project where I observe this issue is being generated by Unity3D, and there's a [forum thread](https:\/\/forum.unity.com\/threads\/library-not-found-lpods-unity-iphone.487853\/) complaining about a very similar issue, I'm inclined to think it could be a Unity3d-specific problem"],"labels":["t2:defect","d1:easy","s2:confirmed"]},{"title":"Allow podfile to specify if dependency should be statically linked","body":"Thanks for adding support for static frameworks in v1.5.0! \ud83c\udf08\r\n\r\nI'd like to switch several of my dependencies to be statically linked, but I'm not sure if it safe for the library authors to make this change for everyone.\r\n\r\nHere is a discussion where Keychain-Swift is weighing the pros\/cons: https:\/\/github.com\/evgenyneu\/keychain-swift\/issues\/74\r\n\r\nRather than having the library writer force static or dynamic, can we have the user of the pod choose?\r\n\r\n\r\n* [X] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n","comments":["This issue is a precursor to a larger refactor we would like to do in potentially a CocoaPods 2.0 version in which we allow app developers to choose how to pack and link a given pod (of course with some limitations and input from the pod author).\r\n\r\nI can keep this issue open since we do not have any other issue that closely asks for this, however, I do not anticipate any immediate work on this.\r\n\r\nAn ugly solution is to publish a separate podspec that uses the static framework flag. It's the best I can give you for now.","Just for reference, this library can be used in the meantime: https:\/\/github.com\/keith\/swift-staticlibs\r\n","An easy but non-standard solution to choosing between static or dynamic linking is adding the following to the Podfile (I've tried and used it with CP 1.4):\r\n```\r\nuse_frameworks!\r\n...\r\ndynamic_frameworks = ['PromiseKit']\r\n\r\n# make all the other frameworks into static frameworks by overriding the static_framework? function to return true\r\npre_install do |installer|\r\n  installer.pod_targets.each do |pod|\r\n    if !dynamic_frameworks.include?(pod.name)\r\n      puts \"Overriding the static_framework? method for #{pod.name}\"\r\n      def pod.static_framework?;\r\n        true\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\nWe enable the use of frameworks and then make us of the `static_framework?` ruby function to force all the modules (except a list we define) to be compiled as static frameworks.\r\n\r\nCurious to see what the CocoaPods team think about this. It's probably not their first recommendation, but I'm putting it out here just for the discussion.","It's a nice hack IMO ;)","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Thanks for posting @bpoplauschi! I've spent hours trying to figure this out and your solution worked for me.","This is what worked best for my project for others still looking at this-\r\n\r\n```\r\nuse_frameworks!\r\n$static_framework = ['Flipper']\r\n\r\npre_install do |installer|\r\n    installer.pod_targets.each do |pod|\r\n        if $static_framework.include?(pod.name)\r\n            pod.host_requires_frameworks = false\r\n        end\r\n    end\r\n  end\r\n\r\n```","Update for CP 1.7+ - I tried @dmac81's solution, but it didn't work (all frameworks were still built as dynamic). What worked for me was\r\n```ruby\r\npre_install do |installer|\r\n  installer.pod_targets.each do |pod|\r\n    if $static_framework.include?(pod.name)\r\n      def pod.build_as_static_framework?;\r\n        true\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\nThis is the same principle as above, just taking into account the deprecation of `static_framework` in favour of `build_as_static_framework` from CP 1.7 - https:\/\/www.rubydoc.info\/gems\/cocoapods\/Pod\/Target:static_framework%3F","@bpoplauschi's updated solution still didn't work for me (Xcode 11 beta 4 + CP 1.7.5) :(","We have just upgraded from 1.6.x to 1.7.3 and using the new `build_as_static_framework` seems to work partially where the `static_framework` was working fine.  With 1.7.3, the framework's code does seem to be getting linked statically into the main binary, but the framework's resources are not being copied over to the main directory and are therefore not found at runtime in the main bundle.  \r\n\r\nWe are actually seeing the framework getting embedded in the app's `Frameworks` directory (which is odd, since it's not a dynamic framework - running `file` on the binary reveals that it is an `ar archive`) while the `Copy Pods Resources` phase is missing all of the framework's resources.\r\n\r\nThis is all using Xcode 10.2.1.\r\n\r\nIs this expected behavior?  It feels like if the framework's code is getting linked into the main binary, the resources should follow suit?  As it is right now, it feels like the framework is part dynamically linked, part statically. ","@FarAndHeight @hujunfeng you are probably right. After all, we are hacking around the built in CP features, so it's expected that as some point, things will go south. \r\nMaybe someone from the @orta or someone else from the CP team can comment on why this behaviour has changed and how \/ if we can update the hack.\r\n(in my case, I am using Rome which means CP is used to build the binaries and we link them manually, that is why this issue hasn't been a problem to me).","I noticed that there are some duplicated file linker errors that show up when overriding `build_as_static_framework?`.  This is due to some configuration that occurs based on the actual underlying `build_type`.\r\n\r\nHere is what fixed this for me. Riffing off of @bpoplauschi \r\n```\r\npre_install do |installer|\r\n  installer.pod_targets.each do |pod|\r\n    if $static_framework.include?(pod.name)\r\n      def pod.build_type;\r\n        Pod::Target::BuildType.static_framework\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\n```","@bpoplauschi @dmac81 : I am using Cocoapods 1.8.4 and neither of these solutions work. Do you have any pointers?","@dnkoutso \r\n\r\n> An ugly solution is to publish a separate podspec that uses the static framework flag. It's the best I can give you for now.\r\n\r\nWhat do you mean by \"publish a separate podspec\". Can you please elaborate?","Part of this will be available in 1.9 but not on a per-pod basis and rather on on a global basis through `use_frameworks!(:linkage => :static)`","> An easy but non-standard solution to choosing between static or dynamic linking is adding the following to the Podfile (I've tried and used it with CP 1.4):\r\n> \r\n> ```\r\n> use_frameworks!\r\n> ...\r\n> dynamic_frameworks = ['PromiseKit']\r\n> \r\n> # make all the other frameworks into static frameworks by overriding the static_framework? function to return true\r\n> pre_install do |installer|\r\n>   installer.pod_targets.each do |pod|\r\n>     if !dynamic_frameworks.include?(pod.name)\r\n>       puts \"Overriding the static_framework? method for #{pod.name}\"\r\n>       def pod.static_framework?;\r\n>         true\r\n>       end\r\n>     end\r\n>   end\r\n> end\r\n> ```\r\n> \r\n> We enable the use of frameworks and then make us of the `static_framework?` ruby function to force all the modules (except a list we define) to be compiled as static frameworks.\r\n> \r\n> Curious to see what the CocoaPods team think about this. It's probably not their first recommendation, but I'm putting it out here just for the discussion.\r\n\r\nI managed to change a good percentage of my frameworks from dynamic to static. However, when trying to send the binary do AppStore the following error is displayed:\r\n\"\u201dInvalid Bundle Structure \u2014 The binary file \u2018[NAME_OF_STATIC_FRAMEWORK]\u2019 is not permitted. Your app can\u2019t contain standalone executables or libraries, other than a valid CFBundleExecutable of supported bundles. Refer to the Bundle Programming Guide at https:\/\/developer.apple.com\/go\/?id=bundle-structure for information on the iOS app bundle structure.\u201d\"\r\nDid this happen to anybody?","> I noticed that there are some duplicated file linker errors that show up when overriding `build_as_static_framework?`. This is due to some configuration that occurs based on the actual underlying `build_type`.\r\n> \r\n> Here is what fixed this for me. Riffing off of @bpoplauschi\r\n> \r\n> ```\r\n> pre_install do |installer|\r\n>   installer.pod_targets.each do |pod|\r\n>     if $static_framework.include?(pod.name)\r\n>       def pod.build_type;\r\n>         Pod::Target::BuildType.static_framework\r\n>       end\r\n>     end\r\n>   end\r\n> end\r\n> ```\r\n\r\nI have to change to `Pod::BuildType` in version 1.10.1\r\n```\r\npre_install do |installer|\r\n  installer.pod_targets.each do |pod|\r\n    if $static_framework.include?(pod.name)\r\n      def pod.build_type;\r\n        Pod::BuildType.static_framework\r\n      end\r\n    end\r\n  end\r\nend\r\n```","You can also use a cocoapod plugin like:\r\nhttps:\/\/github.com\/microsoft\/cocoapods-pod-linkage\r\nor https:\/\/github.com\/segiddins\/cocoapods-packing-cubes"],"labels":["t1:enhancement","t3:discussion","d3:hard"]},{"title":"Change in pod selection with 1.4.0 (was OK with 1.4.0rc1)","body":"* [\u2705 ] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\npod install\r\n\r\n## What did you expect to happen?\r\n\r\npod from my private specs repo to be installed\r\n\r\n## What happened instead?\r\n\r\npod that happened to have the same name was picked from the main public specs repo even though my private repo was first in Podfile.\r\n\r\n## Notes\r\n\r\nThis change seems to have been introduced by 1.4.0 as I didn't have this problem with 1.4.0rc1. If I explicitly specify a version for my private pod then `pod install` finds and uses it. If I don't it seems it now uses the highest version across spec repos rather than taking the one found in the first specified repo. Whilst I could change the name of my pod it would seem that this is incorrect behaviour and naming of a private pod is now fragile and dependent on no one choosing the same name in the master public repo.\r\n\r\nIt would appear that:\r\n```\r\nFix resolution when multiple sources provide the same pods, and there are\r\n(potential) dependencies between the sources.\r\nSamuel Giddins\r\n#7031\r\n```\r\nwould be the change that had this effect? \r\n\r\nCould the team confirm that this change in behaviour is not intended as I see it leading to lots of problems as private repo selection can now be broken by subsequent pods being published in the master repo.\r\n\r\nAny workaround other than renaming my pod or reverting to rc1 ?\r\n\r\nThanks!\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.4.0\r\n        Ruby : ruby 2.3.3p222 (2016-11-21 revision 56859) [universal.x86_64-darwin17]\r\n    RubyGems : 2.6.14\r\n        Host : Mac OS X 10.13.2 (17C205)\r\n       Xcode : 9.2 (9C40b)\r\n         Git : git version 2.14.3 (Apple Git-98)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.3\/usr\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 1bdd0d5636e035eb1e19a0ada15aeff306d4334a\r\n               mwoollard - https:\/\/github.com\/mwoollard\/specs.git @ e0daa30356cb63fa2b746218c8460ccf23645cbb\r\n               mwoollard-1 - https:\/\/github.com\/mwoollard\/erg_core.git @ fe3135ecf142ee779f80459c368bc795eb065438\r\n               urbanthings - git@bitbucket.org:urbanthings\/podspecs.git @ 7deb5ca6bf8b77940d23cd40f9dd300f76e386f8\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nsource 'https:\/\/github.com\/mwoollard\/specs.git'\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\n\r\nuse_frameworks!\r\n\r\nabstract_target 'Shared' do\r\n\r\n    pod 'Core'\r\n    pod 'RxSwift'\r\n    pod 'Map'\r\n    \r\n    target 'AirQuality' do\r\n        platform :ios, '10.0'\r\n    end\r\n\r\n    target 'AirQualityTests' do\r\n        platform :ios ,'10.0'\r\n    end\r\n\r\nend\r\n```\r\n\r\n","comments":["Thanks for the report, currently no workaround we need to investigate, specifying the `:source` next to `pod 'Core'` should also probably do it.","@mwoollard Providing a clear sample app would help a lot, although this might be more difficult as it requires the same pod published in more than one repo?","Thanks for quick response and `:source` suggestion.\r\nI can probably set something up in the way of complete demo project sometime this week if that'd help.","It would most certainly help!","See https:\/\/github.com\/mwoollard\/app-7354 - let me know if any questions !","I can confirm that specifying the pod with:\r\n\r\n```\r\npod 'Core',  :source => 'https:\/\/github.com\/mwoollard\/specs.git'\r\n```\r\n\r\nis a workaround that forces selection from the correct specs repo. However I was unaware of this as an option of the 'pod' statement as it doesn't appear to be documented in the Podfile Syntax Reference. Maybe good to do so?","+1 certainly, want to make a PR for it?","Tracked down where this documentation comes from so will take a look.","This issue also effects dependencies specified in podspec files as I have a number of inter-dependent components in my private specs repo. Only workaround I've found for this case is to tie the dependency to a limited version range which is not ideal but at least have things working with 1.4.0. Assuming its the same underlying problem so not creating a new issue.","It's most likely the same issue, we are currently working on Swift Static Library support so once some time is freed we can take a look, apologies for the problem, you are being hit by this because the same pod is published in multiple sources which is not common, but yes it is a bug.","Static Swift Library support will make big difference to us so agree with your priorities !","I dont think this is a bug -- we've resolved to the highest version possible","@mwoollard thoughts on this? We might want to close if it works as intended.","I'm in a situation very similar to @mwoollard. Let me describe it to make things clearer.\r\n\r\nI have a project that uses pods from two different sources (private source and master), they are specified like this in the `podfile`:\r\n\r\n```\r\nsource 'url_to_private_specs_repo'\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\n```\r\nLets suppose I'm importing a `pod` named `SideMenu`, and there is a pod with that name in both repositories (they are different, but have the same name) and the one in the master repository has a higher version number.\r\n\r\nIn version 1.4.0.rc.1 the order of the `sources` would define the priority in which they are resolved, while in version 1.4.0 (and 1.5.0) they are resolved to the highest version number.\r\n\r\n> In version 1.4.0.rc.1 it uses the SideMenu of the **private specs repo**\r\n> In version 1.4.0 (and 1.5.0) it uses the SideMenu **of the master**\r\n\r\nFor the `podfile` it can be solved using:\r\n\r\n```\r\npod 'SideMenu',  :source => 'url_to_private_specs_repo'\r\n```\r\n\r\nAs it has already been discussed in this thread.\r\n\r\nHowever, in the `podspec` there is no such option as `source` (as far as I'm aware of). \r\nIt is possible to upload a new podspec by doing: \r\n\r\n```\r\npod repo push my-specs my-pod.podspec --sources=url_to_private_specs_repo,master\r\n```\r\n\r\nThis way, in version 1.4.0.rc.1, you could specify the priority of the sources when resolving dependence, but since in version 1.4.0 (and 1.5.0) they resolve to the hightest version, there is no way to do so.\r\n\r\nIs this the intended behavior as @segiddins pointed out? If so, should a `source` option be added for `podspecs` as it is done in `podfile`?\r\n\r\nSorry for my verbose explanation, but I really wanted to make the problem really clear and precise. ","Any comments on this @dnkoutso @segiddins @mwoollard ?",">  If so, should a source option be added for podspecs as it is done in podfile?\r\n\r\nthis has been discussed before, it won't happen\r\n\r\n> Is this the intended behavior as @segiddins pointed out\r\n\r\nI think the root of the issue here is that there are 2 equally valid behaviors, and picking either 1 would appear to be a bug to people expecting the other :\/\r\n","Hi @segiddins, \r\n\r\nThanks for answering :) Here are my thought about what you said:\r\n\r\n> this has been discussed before, it won't happen\r\n\r\nooow :( \r\nCan you point me to the thread discussion (if there is one), I don't see how adding this option would be a bad thing\r\n\r\n> I think the root of the issue here is that there are 2 equally valid behaviors, and picking either 1 would appear to be a bug to people expecting the other :\/\r\n\r\nMaybe you right, but I don't see the 2 equally valid behaviors. \r\nNow people would need to make sure to pick names for their private pods that do not collide with names in the Master pods repository so to avoid situations as the one I described before.\r\n\r\n\r\nBesides, in the way it is done right now, it is possible that a PodSpec that's was working at some moment in the past, stops working only because someone added a new pod (or updated a pod) to the public pod specs repo. Sounds dangerous to me... :S ","> > If so, should a source option be added for podspecs as it is done in podfile?\r\n> \r\n> this has been discussed before, it won't happen\r\n> \r\n> > Is this the intended behavior as @segiddins pointed out\r\n> \r\n> I think the root of the issue here is that there are 2 equally valid behaviors, and picking either 1 would appear to be a bug to people expecting the other :\/\r\n\r\nHi @segiddins, I have some doubts about this. In order to clarify, we suppose this situation:\r\n\r\nI have a private pod name Example and currently doesn't exists a public pod called \"Example\". For some reason, somebody creates a public pod with that name and generates the version 10.0.0. This version is probably greater, consequently, I don't touch my code and it will be failed without any reason because of the new dependency downloaded. I think this scenario is not nice. Why doesn't prioritize the source order instead the greatest version number? This works like this in cocoapods < 1.4.\r\n\r\nThank you!\r\n"],"labels":["t2:defect","s2:confirmed","s7:workaround available"]},{"title":"Allow Subspecs with higher Platform Requirements than Superspec","body":"* [x] I've read and understood the [*CONTRIBUTING](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md) guidelines and have done my best effort to follow.\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nWe created a wrapper to abstract away different service providers. Our wrapper only requires iOS 8+. However, some of the APIs we wrap, require iOS 9.\r\n\r\nThis does not bring up any problem except when linting the spec. We added `ss.platform :ios, '9.0'` for the subspec.\r\n\r\nThe we ran `pod spec lint --verbose --fail-fast`.\r\n\r\n## What did you expect to happen?\r\n\r\nWe expected cocoa pods to test the different subspaces of the product. Every time the iOS9 bit was included, we expected CocoaPods to use iOS 9 for testing. This would be the desired behavior, as some of our customers want to support iOS8+ and thus could manually select a subset of the subspaces that is compatible with iOS 8.\r\n\r\n## What happened instead?\r\n\r\nCocoaPods failed very quickly with:\r\n\r\n    Resolving dependencies of \r\n     -> Module (version-beta1)\r\n        - ERROR | [iOS] unknown: Encountered an unknown error (Unable to satisfy the following requirements:\r\n    \r\n    - `Module\/Subspec (= version-beta1)` required by `Module\/Default (version-beta1)`\r\n    \r\n    Specs satisfying the `Module\/Subspec (= version-beta1)` dependency were found, but they required a higher minimum deployment target.\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.3.1\r\n        Ruby : ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-darwin16]\r\n    RubyGems : 2.6.11\r\n        Host : Mac OS X 10.12.6 (16G1114)\r\n       Xcode : 9.2 (9C40b)\r\n         Git : git version 2.14.3 (Apple Git-98)\r\nRuby lib dir : \/Users\/herzi\/.brew\/Cellar\/ruby\/2.4.1_1\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 4ad92b579045d477de23f5a08f8bebf5a20981cf\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/herzi\/.brew\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.2.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\n\r\ntarget 'AATKitResources' do\r\n  platform :ios, '7.0'\r\n\r\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\r\n  use_frameworks!\r\n\r\n  # Pods for AATKitResources\r\n\r\nend\r\n\r\ntarget 'IntentInspector' do\r\n  platform :ios, '9.3'\r\n\r\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\r\n  use_frameworks!\r\n\r\n  # Pods for IntentInspector\r\n  pod 'FBAudienceNetwork', '< 4.22'\r\nend\r\n\r\ntarget 'IntentKit' do\r\n  platform :ios, '7.0'\r\n\r\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\r\n  use_frameworks!\r\n\r\n  # Pods for IntentKit\r\n  pod 'ANPreBidMobileForDFP', '2.4.7'   # TODO: Update version number in driver class manually.\r\n  pod 'FBAudienceNetwork', '< 4.22'\r\n  pod 'Google-Mobile-Ads-SDK', '7.26.0'\r\n  #pod 'ANPreBidMobileForMoPub', '2.4.7' # TODO: Update version number in driver class manually.\r\n\r\n  target 'IntentKit Tests' do\r\n    inherit! :search_paths\r\n    # Pods for testing\r\n  end\r\n\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nIf you want to, I can set up an example project to expose this.\r\n","comments":["This is a bit hard to support I think atm. No plans also for any upcoming release. Will mark as a hard enhancement.","Hello ! I have the same error when linting a podspec.\r\n\r\nThe context: I wish that `pod 'GRDB.swift'` and `pod 'GRDB.swift\/FTS5'` would have different minimum targets so that clients that need the modern FTS5 full-text engine of SQLite can only use it with SDK that come with this option.\r\n\r\nInterestingly enough, this podspec can be used: it works, and client applications are correctly configured. It just can't be linted (which means that I won't be able to pod trunk push).\r\n\r\nThe podspec:\r\n\r\n```ruby\r\nPod::Spec.new do |s|\r\n  s.name     = 'GRDB.swift'\r\n  s.version  = '3.2.0'\r\n  \r\n  s.license  = { :type => 'MIT', :file => 'LICENSE' }\r\n  s.summary  = 'A toolkit for SQLite databases, with a focus on application development.'\r\n  s.homepage = 'https:\/\/github.com\/groue\/GRDB.swift'\r\n  s.author   = { 'Gwendal Rou\u00e9' => 'gr@pierlis.com' }\r\n  s.source   = { :git => 'https:\/\/github.com\/groue\/GRDB.swift.git', :tag => \"v#{s.version}\" }\r\n  s.module_name = 'GRDB'\r\n  s.module_map = 'Support\/module.modulemap'\r\n  s.framework = 'Foundation'\r\n  s.library = 'sqlite3'\r\n  \r\n  s.default_subspec = 'default'\r\n  \r\n  s.subspec 'default' do |ss|\r\n    ss.source_files = 'GRDB\/**\/*.swift', 'Support\/*.h'\r\n    ss.ios.deployment_target = '8.0'\r\n    ss.osx.deployment_target = '10.9'\r\n    ss.watchos.deployment_target = '2.0'\r\n  end\r\n  \r\n  s.subspec 'FTS5' do |ss|\r\n    ss.source_files = 'GRDB\/**\/*.swift', 'Support\/*.h'\r\n    ss.ios.deployment_target = '11.4'\r\n    ss.osx.deployment_target = '10.13'\r\n    ss.watchos.deployment_target = '4.3'\r\n    ss.xcconfig = {\r\n      'OTHER_SWIFT_FLAGS' => '$(inherited) -D SQLITE_ENABLE_FTS5',\r\n    }\r\n  end\r\nend\r\n```\r\n\r\n```\r\n$ pod lib lint --allow-warnings GRDB.swift.podspec \r\n\r\n -> GRDB.swift (3.2.0)\r\n    - ERROR | [OSX] unknown: Encountered an unknown error (CocoaPods could not find compatible versions for pod \"GRDB.swift\/default\":\r\n  In Podfile:\r\n    GRDB.swift (from `\/Users\/groue\/Documents\/git\/groue\/GRDB.swift`) was resolved to 3.2.0, which depends on\r\n      GRDB.swift\/default (= 3.2.0)\r\n\r\nSpecs satisfying the `GRDB.swift\/default (= 3.2.0)` dependency were found, but they required a higher minimum deployment target.) during validation.\r\n\r\n[!] GRDB.swift did not pass validation, due to 1 error.\r\nYou can use the `--no-clean` option to inspect any issue.\r\n```\r\n","Any update on this?"],"labels":["t1:enhancement","d3:hard"]},{"title":"Dynamic vendored frameworks from app extensions are not included in the final package","body":"## What I did\r\n\r\n- Create a new project from the default Xcode template.\r\n- Add a today extension from the Xcode template.\r\n- Integrate CocoaPods **without** using `use_frameworks!`.\r\n- In the extension target, add a dependency to a pod with a dynamic vendored framework (this is a framework provided by `vendored_frameworks` in the podspec which is a dynamic shared library, not a static archive, meaning cocoapods cannot include it in the app binary, it has to be a framework even without `use_frameworks!` in the podfile).\r\n- Build or archive the project.\r\n\r\n## What I expected to happen\r\n\r\n- The resulting app package contains the vendored framework in the `Frameworks` directory.\r\n\r\n## What happened instead\r\n\r\n- The project compiles fine, but the required framework is not copied in the `Frameworks` directory. In fact it is nowhere to be found in the resulting archive.\r\n- As a result the extension crashes on launch when trying to link with this framework.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n```\r\n   CocoaPods : 1.4.0.rc.1\r\n        Ruby : ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\r\n    RubyGems : 2.0.14.1\r\n        Host : Mac OS X 10.12.6 (16G1036)\r\n       Xcode : 9.2 (9C40b)\r\n         Git : git version 2.14.3 (Apple Git-98)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.0\/usr\/lib\r\n```\r\n### Installation Source\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n```\r\ncocoapods-deintegrate : 1.0.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/ghugues\/FrameworkInExtension\r\nRun pod install, build the project (or archive) and check the generated app package.\r\n\r\n## Workaround\r\n\r\nA workaround is to add the dependency in the app target as well so that the framework gets copied. However this will unnecessarily link the app binary with it, and can cause duplicate symbols issues.\r\n","comments":["Extensions generally need a re-work in CocoaPods. I will mark this as a hard issue to resolve right now.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Not stale","Still relevant"],"labels":["s2:confirmed","d3:hard","extensions"]},{"title":"Add an `allow_insecure_source_urls` installer option and otherwise prohibit consuming artifacts via HTTP","body":"Followup to #7250: \"Show warning when SDK provider tries to push a version with an unencrypted HTTP source\"\r\n\r\nOn the consumption side we should require an explicit installation option of `install! 'cocoapods', allow_insecure_source_urls: true` to protect users from installing pods that have previously been published with http URLs.\r\n\r\nPer @orta's suggestion, logging this as a tracking issue.","comments":["There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Stay."],"labels":["t1:enhancement","s2:confirmed","d2:moderate"]},{"title":"Can't use subspec in child target whose parent target uses parent spec","body":"* [x] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI have a pod containing a rather complex graph of classes modeling my domain entities (let's call it Commons). In order to make testing easier for clients of the pod, having to create those object graphs, I have a subspec including builders that provide object graphs populated with initial values (Commons\/Test).\r\n\r\nIn my client project I have a parent target which declares a dependency on the root spec, and a child test target declaring a dependency to the Test subspec. Something like this:\r\n\r\n```\r\nabstract_target 'project-parent' do\r\n  platform :ios, '8.2'\r\n\r\n  # Common dependencies\r\n  pod 'Commons'\r\n\r\n  target 'projectA' do\r\n    # Dependencies for project A\r\n  end\r\n\r\n  target 'projectB' do\r\n    # Dependencies for project B\r\n\r\n    target 'project-tests' do\r\n      inherit! :search_paths\r\n\r\n      #Test dependencies\r\n      pod 'Commons\/Test'\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n## What did you expect to happen?\r\n\r\nI expected the project to correctly build and run unit tests.\r\n\r\n## What happened instead?\r\n\r\nThe project seems to build correctly, but when I try to run the unit tests inside Xcode I get the following error:\r\n\r\n```\r\n2017-11-03 13:21:13.828800+0100 ios-sim[55586:6417762] Failed to load test bundle from file:\/\/\/...\/Library\/Developer\/Xcode\/DerivedData\/ios-ckatbnjhinhmdfgunhgkvfmrzrmn\/Build\/Products\/DebugSpartan-iphonesimulator\/ios-sim.app\/PlugIns\/unit-tests.xctest\/: Error Domain=NSCocoaErrorDomain Code=3588 \"dlopen(\/...\/Library\/Developer\/Xcode\/DerivedData\/ios-ckatbnjhinhmdfgunhgkvfmrzrmn\/Build\/Products\/DebugSpartan-iphonesimulator\/ios-sim.app\/PlugIns\/unit-tests.xctest\/unit-tests, 265): Symbol not found: __T013wuaki_commons18StableReachabilityCAA010ObservableD0AAWP\r\n  Referenced from: \/...\/Library\/Developer\/Xcode\/DerivedData\/ios-ckatbnjhinhmdfgunhgkvfmrzrmn\/Build\/Products\/DebugSpartan-iphonesimulator\/ios-sim.app\/PlugIns\/unit-tests.xctest\/unit-tests\r\n  Expected in: \/...\/Library\/Developer\/CoreSimulator\/Devices\/06A4745D-D20B-44F4-B2AA-BE87034E6672\/data\/Containers\/Bundle\/Application\/428C0AEB-4FBD-404F-A126-FEFCA78341CB\/ios-sim.app\/Frameworks\/wuaki_commons.framework\/wuaki_commons\r\n in \/...\/Library\/Developer\/Xcode\/DerivedData\/ios-ckatbnjhinhmdfgunhgkvfmrzrmn\/Build\/Products\/DebugSpartan-iphonesimulator\/ios-sim.app\/PlugIns\/unit-tests.xctest\/unit-tests\" UserInfo={NSLocalizedFailureReason=No se ha podido cargar el paquete., NSLocalizedRecoverySuggestion=Vuelve a instalar el paquete., NSFilePath=\/...\/Library\/Developer\/Xcode\/DerivedData\/ios-ckatbnjhinhmdfgunhgkvfmrzrmn\/Build\/Products\/DebugSpartan-iphonesimulator\/ios-sim.app\/PlugIns\/unit-tests.xctest\/unit-tests, NSDebugDescription=dlopen(\/...\/Library\/Developer\/Xcode\/DerivedData\/ios-ckatbnjhinhmdfgunhgkvfmrzrmn\/Build\/Products\/DebugSpartan-iphonesimulator\/ios-sim.app\/PlugIns\/unit-tests.xctest\/unit-tests, 265): Symbol not found: __T013wuaki_commons18StableReachabilityCAA010ObservableD0AAWP\r\n  Referenced from: \/...\/Library\/Developer\/Xcode\/DerivedData\/ios-ckatbnjhinhmdfgunhgkvfmrzrmn\/Build\/Products\/DebugSpartan-iphonesimulator\/ios-sim.app\/PlugIns\/unit-tests.xctest\/unit-tests\r\n  Expected in: \/...\/Library\/Developer\/CoreSimulator\/Devices\/06A4745D-D20B-44F4-B2AA-BE87034E6672\/data\/Containers\/Bundle\/Application\/428C0AEB-4FBD-404F-A126-FEFCA78341CB\/ios-sim.app\/Frameworks\/wuaki_commons.framework\/wuaki_commons\r\n in \/...\/Library\/Developer\/Xcode\/DerivedData\/ios-ckatbnjhinhmdfgunhgkvfmrzrmn\/Build\/Products\/DebugSpartan-iphonesimulator\/ios-sim.app\/PlugIns\/unit-tests.xctest\/unit-tests, NSBundlePath=\/...\/Library\/Developer\/Xcode\/DerivedData\/ios-ckatbnjhinhmdfgunhgkvfmrzrmn\/Build\/Products\/DebugSpartan-iphonesimulator\/ios-sim.app\/PlugIns\/unit-tests.xctest, NSLocalizedDescription=No se ha podido cargar el paquete \u201cunit-tests\u201d.}\r\n```\r\n\r\nAs you can see the operation seems to fail while linking due to a missing symbol (a Swift class defined in Commons\/Test, but not in Commons). So I guess that due to the conflicting dependencies the system is always building the parent spec (Commons) but not the child subspec(Commons\/Test).\r\n\r\nIs this expected? Am I doing anything wrong? The only workaround I've found is to declare the parent target to depend on the child subspec, but that would include classes in the final product that are only intended for testing purposes.\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.3.1\r\n        Ruby : ruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-darwin16]\r\n    RubyGems : 2.6.13\r\n        Host : Mac OS X 10.12.6 (16G29)\r\n       Xcode : 9.0.1 (9A1004)\r\n         Git : git version 2.13.5 (Apple Git-94)\r\nRuby lib dir : \/Users\/jose.gonzalez\/.rbenv\/versions\/2.4.2\/lib\r\nRepositories : marketing-suite - https:\/\/github.com\/Marketing-Suite\/podSpec.git @ 2d77bd9975a85b82e177cebdbce835faa54e674a\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ 8d8f95bedb522a3d3f0987f9bb6fd48d65c8e528\r\n               rakuten-it-scm-eco-core-ios-specs - https:\/\/gitpub.rakuten-it.com\/scm\/eco\/core-ios-specs.git @ 8500fcc9546e11d5980ab3c22cf4b702cda40f67\r\n               wuakitv - git@github.com:wuakitv\/ios-specs.git @ 5136038257a346a45ce76e2ea105dab18be1eb8d\r\n               wuakitv-1 - https:\/\/github.com\/wuakitv\/ios-specs.git @ 5136038257a346a45ce76e2ea105dab18be1eb8d\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/jose.gonzalez\/Documents\/projects\/rakuten\/ios\/ios-v3\/vendor\/bundle\/ruby\/2.4.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.3.0\r\ncocoapods-try         : 1.1.0\r\nslather               : 2.4.3\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\ninstall! 'cocoapods', :deterministic_uuids => false\r\nuse_frameworks!\r\ninhibit_all_warnings!\r\n\r\nplatform :ios, '8.2'\r\n\r\nsource \"https:\/\/github.com\/CocoaPods\/Specs.git\"\r\nsource \"https:\/\/gitpub.rakuten-it.com\/scm\/eco\/core-ios-specs.git\"\r\nsource \"https:\/\/github.com\/wuakitv\/ios-specs.git\"\r\nsource \"https:\/\/github.com\/Marketing-Suite\/podSpec.git\"\r\n\r\nabstract_target 'wuaki-ios-parent' do\r\n  platform :ios, '8.2'\r\n  project 'wuaki-ios\/wuaki-ios', 'DebugSpartan' => :debug, 'ReleaseSpartan' => :release\r\n\r\n  # Infrastructure (DI, logging, deep linking...)\r\n  pod 'XCGLogger', '~> 5.0.1'\r\n  pod 'RxSwift', '~> 4.0'\r\n  pod 'RxCocoa', '~> 4.0'\r\n  pod 'Then', '~> 2.0'\r\n  pod 'Result', '~> 3.0'\r\n\r\n  # Metrics & monitoring\r\n  pod 'Google\/Analytics', '~> 3.0.3'\r\n  pod 'Crashlytics', '~> 3.8.3'\r\n  pod 'Appsee', '~> 2.3.2'\r\n  pod 'FBSDKCoreKit', '~> 4.26'\r\n\r\n  # Feedback\r\n  pod 'iRate', '~> 1.11.6'\r\n  pod 'RakutenMobileSDK\/feedback', '~> 2.11.1'\r\n  pod 'HCSStarRatingView', '~> 1.4.5'\r\n\r\n  # Push notifications\r\n  pod 'EMSMobileSDK', '~> 1.2.0'\r\n\r\n  # Interface\r\n  pod 'Cartography', '~> 1.1'\r\n  pod 'Masonry', '~> 1.0.2'\r\n  pod 'XLForm', '~> 3.2.0'\r\n  pod 'TTTAttributedLabel', '~> 1.13.4'\r\n  pod 'JVFloatLabeledTextField', '~> 1.1.1'\r\n  pod 'STPopupPreview', '~> 1.0.1'\r\n  pod 'wuaki-ios-ui', '~> 0.4.1'\r\n  pod 'wuaki-commons', :path => '..\/ios-commons'\r\n\r\n  target 'wuaki-ios' do\r\n    pod 'wuaki-ios-playback', '~> 0.4.1'\r\n  end\r\n\r\n  target 'wuaki-ios-sim' do\r\n    pod 'wuaki-ios-playback\/Simulator', '~> 0.4.1'\r\n\r\n    target 'unit-tests' do\r\n      inherit! :search_paths\r\n\r\n      pod 'Quick', '~> 1.2.0'\r\n      pod 'Nimble', '~> 7.0.0'\r\n      pod 'RxBlocking', '~> 4.0'\r\n      pod 'Nimble-Snapshots', '~> 5.0.0'\r\n      # TODO: Remove this when https:\/\/github.com\/facebook\/ios-snapshot-test-case\/issues\/227 gets fixed\r\n      pod 'FBSnapshotTestCase', :git => 'https:\/\/github.com\/jgongo\/ios-snapshot-test-case.git'\r\n      pod 'wuaki-commons\/Test', :path => '..\/ios-commons'\r\n    end\r\n  end\r\nend\r\n\r\npost_install do |installer|\r\n  installer.pods_project.targets.each do |target|\r\n    target.build_configurations.each do |config|\r\n      # Disable bitcode until the Widevine SDK supports it\r\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\r\n    end\r\n  end\r\nend\r\n```\r\n","comments":["Is `pod 'Commons\/Test'` a `test_spec`? If so can you try 1.4.0.beta.2 since a lot of bugs around test specs have been fixed in 1.4.x.\r\n\r\nAlso a sample app demonstrating the issue is the best way for us to debug and diagnose.","May also be related to #6967 that was fixed in 1.4.0, so please try the beta ","@dnkoutso I didn't know about `test_spec`. As far as I understand from this [blog entry](http:\/\/blog.cocoapods.org\/CocoaPods-1.3.0\/), a `test_spec` specifies the sources for the unit tests of your spec, so you can include them alongside the sources of your pod.\r\n\r\nIf I have understood it correctly, this is not the case for my subspec. My subspec contains testing helper classes for clients of the pod. \r\n\r\nLet me elaborate on my case: my pod contains quite a few classes modelling the domain entities of my application. An object graph for some of the entities may have more than 5 levels of nested objects. I have another project that depends on this pod, and creates ViewModels. In order to test those ViewModels I need to create complex object graphs. The subspec contains builder classes that provide already built graph objects with example values. So the subspec is intended to be used in testing targets, but it doesn't contain unit tests for the root spec. Does this make sense?","@paulb777 Thanks Paul, gonna give it a try!","@paulb777 I have just tried with 1.4.0.beta.2, same result \ud83d\ude22 ","An important point (which I don't know if it's stated clearly enough): the project **builds correctly**. I get the error when **running** the unit tests, so it seems a dynamic linking problem.","@jgongo Sorry to hear that it's still not fixed in 1.4.x. As @dnkoutso said, we'll likely need a reproducible sample app to debug and diagnose.","Here you have it:\r\n[subspec-bug.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/1441869\/subspec-bug.zip)\r\n\r\nIf you execute the tests inside the `application` project they will fail. If you edit `subspec-bug\/application\/Podfile` and change line 11 to contain the following, and run `pod install`: \r\n```\r\n  pod 'domain\/Test', :path => '..\/domain'\r\n```\r\nthe tests will run properly.","I have been having the same issue if the child target has a more restrictive subspec than the parent(i.e. doesn't include all files from the default subspec), in runtime I get a symbol not found on one of the \"extra\" classes of the full spec.\r\n\r\nI first noticed this behaviour with a custom private pod, but was also able to reproduce it with Bolts in this Podfile:\r\n```ruby\r\nplatform :ios, '9.0'\r\nuse_frameworks!\r\n\r\ntarget 'App' do\r\n  pod 'Bolts'\r\nend\r\n\r\ntarget 'Today' do\r\n  pod 'Bolts\/Tasks'\r\nend\r\n```\r\n\r\nIf then in the code I do the following:\r\n```swift\r\nimport Bolts\r\nlet task = BFTaskCompletionSource<NSString>() \/\/included from Bolts\/Taks -> fine\r\nlet nav = BFAppLinkNavigation() \/\/included from Bolts -> will get dyld:Symbol not found in runtime\r\n```\r\n\r\nIt compiles fine but when it runs I get `dyld: Symbol not found: _OBJC_CLASS_$_BFAppLinkNavigation\r\n`\r\n\r\nI can see the that the `Pods-PodTest` generated framework has included two copies of Bolts: `Bolts` and `Bolts-Tasks`.\r\n\r\nI tested with version `1.4.0.beta.2` and still had the same issue\r\n\r\nHere is a full reproducible sample app:\r\n[PodTest.zip](https:\/\/github.com\/CocoaPods\/CocoaPods\/files\/1443784\/PodTest.zip)\r\n\r\n","@jgongo (and @felix-dumit) Thanks for the test cases. I'm able to reproduce, but so far, not able to find a path to a fix. This issue will likely go onto the 1.5 todo list.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Issue is still present in version `1.4.0`","@felix-dumit nobody claimed that the issue was fixed in 1.4.0, it is still open and there are no PRs to fix the issue and it has a milestone of 1.5.0.","@dnkoutso I know, I was just commenting for stable bot so it wouldn't close this","@felix-dumit \ud83d\udc4d  my bad","I have the same issue on a private pod. Any plans on fixing this? Would be awesome to be able to only include whats needed in other targets.","@paulb777 as we wrap up 1.5.0.beta.1 do we still want to tackle this?","also this does not appear to be a static frameworks issue correct?","It would be awesome to tackle it, but I don't have to time to work on it. I can only be the lazy complainer \ud83d\ude22 ","@dnkoutso Nothing to do with static frameworks. I did do a few other things in 1.4.0 ;-)\r\n\r\nI'm unlikely to have time for 1.5.0.beta.1, but can try to take another stab in the next few weeks.","Let's aim for 1.5.0.beta.2 ","I made progress on isolating this today.  The wrong domain.framework is getting linked into the app, even though both are built.  I'll try to continue within the next week.","In the subspec-bug example from @jgongo,  the app and the test targets have two different domain.frameworks. The test version doesn't get found because the app one is found first.   \r\n\r\n```\r\n~\/Library\/Developer\/CoreSimulator\/Devices  $ find . | grep \/Frameworks\/domain.framework\/domain\r\n.\/8D10C86A-FEB3-49BF-89CE-B6DD72164243\/data\/Containers\/Bundle\/Application\/9E658993-9978-4A36-989F-84CC30A34303\/application.app\/PlugIns\/applicationTests.xctest\/Frameworks\/domain.framework\/domain\r\n.\/8D10C86A-FEB3-49BF-89CE-B6DD72164243\/data\/Containers\/Bundle\/Application\/9E658993-9978-4A36-989F-84CC30A34303\/application.app\/Frameworks\/domain.framework\/domain\r\n~\/Library\/Developer\/CoreSimulator\/Devices  $ ls -l .\/8D10C86A-FEB3-49BF-89CE-B6DD72164243\/data\/Containers\/Bundle\/Application\/9E658993-9978-4A36-989F-84CC30A34303\/application.app\/PlugIns\/applicationTests.xctest\/Frameworks\/domain.framework\/domain .\/8D10C86A-FEB3-49BF-89CE-B6DD72164243\/data\/Containers\/Bundle\/Application\/9E658993-9978-4A36-989F-84CC30A34303\/application.app\/Frameworks\/domain.framework\/domain\r\n-rw-r--r--  1 paulbeusterien  eng  52288 Mar 22 16:53 .\/8D10C86A-FEB3-49BF-89CE-B6DD72164243\/data\/Containers\/Bundle\/Application\/9E658993-9978-4A36-989F-84CC30A34303\/application.app\/Frameworks\/domain.framework\/domain\r\n-rw-r--r--  1 paulbeusterien  eng  62896 Mar 22 16:53 .\/8D10C86A-FEB3-49BF-89CE-B6DD72164243\/data\/Containers\/Bundle\/Application\/9E658993-9978-4A36-989F-84CC30A34303\/application.app\/PlugIns\/applicationTests.xctest\/Frameworks\/domain.framework\/domain\r\n~\/Library\/Developer\/CoreSimulator\/Devices  $ nm .\/8D10C86A-FEB3-49BF-89CE-B6DD72164243\/data\/Containers\/Bundle\/Application\/9E658993-9978-4A36-989F-84CC30A34303\/application.app\/Frameworks\/domain.framework\/domain | grep EnttityBu\r\n~\/Library\/Developer\/CoreSimulator\/Devices  $ nm .\/8D10C86A-FEB3-49BF-89CE-B6DD72164243\/data\/Containers\/Bundle\/Application\/9E658993-9978-4A36-989F-84CC30A34303\/application.app\/PlugIns\/applicationTests.xctest\/Frameworks\/domain.framework\/domain | grep EntityB | head -3\r\n0000000000002850 T __T06domain13EntityBuilderC4withACXDSS9property1_tF\r\n0000000000002950 T __T06domain13EntityBuilderC4withACXDSS9property2_tF\r\n0000000000002a40 T __T06domain13EntityBuilderC5buildAA0B0VyF\r\n```\r\n\r\nI'm not sure the necessary build system contortions to solve this would be a better approach than the workaround of using a separate pod for the Test dependency.\r\n\r\nMy understanding of the subspec semantics is that subspecs are a way of selecting what gets built into a particular library. It could be argued that it is incorrect usage to expect two different configurations of the same library to be built into the same package.","I have the use case that I'd like to link the full library to the main application, but extensions do not need the full library. Extensions handle single or a few use cases and a full library could be a lot of overhead.","@paulb777 are you OK with moving this to 1.6.0? Is there anything further actionable here?","@dnkoutso I'm blocked.  From my understanding, the requested use case is outside the scope of subspec capabilities.  I'd like someone to confirm that - and then perhaps the docs should be made clearer.  ","@paulb777 sounds good, moving to 1.6.0 for now.","@paulb777 is this related to https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8033? maybe the same?","@dnkoutso I think you mean #7850.\r\n\r\nThey're definitely related, but not necessarily the same. In this case, the Podfile is asking for a different subspec configuration for the test versus the host app.","#8041 (the fix for #7850) does not help this issue. \r\n\r\nI'm not convinced that the desired behavior of a test target wanting to use a subset of a larger framework that's already in the host app is valid in iOS.","I guess I have a very similar issue.\r\nI'm just adding an App Extension to my App and I extracted some common components into a Common Framework that is part of the project I'm working on. The Common Framework is not under cocoapods but even if it would be under Cocoapods the issue would not change.\r\n\r\nCommonFramework -> It use `Siesta` (Core) by Cocoapods\r\nApp -> It needs to use `Siesta\/UI` Subspec by Cocoapods, and link manually to CommonFramework \r\nExtension -> It use CommonFramework linked manually + Cocoapods\r\n\r\nThe result I see is that after `pod install` Pod project contains two different libraries:\r\n- `Siesta` (Core Source Files) (Siesta as Module Name)\r\n- `Siesta.default.UI` (Core Source Files + UI Source Files) (Siesta as Module Name)\r\n\r\nBoth the libraries contains the Core code that will result in a code duplication in two distinct libraries that has the same name (Module Name Collision).\r\n\r\nWhen I run the App Extension everything works as expected while when I run the App it crashes because the Siesta library without UI is chosen from the package.\r\n\r\nWhy the subspec libraries are not build as separate library with different Module Name and just linked with the dependent libraries?\r\n\r\nTo have the same Module Name we result in having a code duplication in two separate libraries.\r\nIf I'm not wrong Carthage does not use this approach, not having this subspec concept at all and this will result in having two distinct modules. (Core and UI in the Siesta example)\r\n\r\nWould it be a better approach to have separate libraries for subspecs? Probably this is not a simple source code change\/update ","@falcon283 Does #8041 fix your issue?  This issue may be specific to test targets.  Your issue might be similar to #7850 that was fixed.","Mmm looks promising. I will give it a try ASAP. ","It seems to build but then it still crash. \r\n\r\nHere my Podfile\r\n```\r\n\r\ntarget 'CommonFramework' do\r\n\r\n    # Pods for CommonFramework\r\n    pod 'Siesta\/Core', '~> 1.4.0'\r\n\r\nend\r\n\r\ntarget 'Application' do\t\t#<- This target uses CommonFramework linked manually\r\n\tinherit! :search_paths\r\n\t# Pods for Application\r\n\tpod 'Siesta\/Core', '~> 1.4.0'\r\n\tpod 'Siesta\/UI', '~> 1.4.0'\r\n\r\n\ttarget 'ApplicationTests' do\r\n\t\tinherit! :search_paths\r\n\t\t# Pods for ApplicationTests\r\n\tend\r\n\t\r\n\ttarget 'ApplicationUITests' do\r\n\t\tinherit! :search_paths\r\n\t\t# Pods for ApplicationUITests\r\n\tend\r\n\r\nend\r\n\r\ntarget 'Extension' do\t\t#<- This target uses CommonFramework linked manually\r\n\tinherit! :search_paths\r\n\t# Pods for Extension\r\n\tpod 'Siesta\/Core', '~> 1.4.0'\r\nend\r\n```\r\n\r\nThe libraries appear to be better organized with no duplicates but still there is something that prevent the app and the extension to work properly.\r\n\r\nAnyway the two libraries Siesta-Core and Siesta-UI still duplicates code inside their packages.\r\n\r\n----\r\n\r\nI was finally able to make it works today using Carthage. I removed Siesta from the Podfile, keeping the rest as it is, and I built the two Siesta Frameworks, the UI links the Core, and linked as usual when using Carthage.\r\n\r\nI think that having this same handling: `Spec + SubSpec that links the Spec` should be the nice to have and this should solve any issue of this kind. I don't know how much difficult would be to have it in Cocoapods.\r\nProbably I should create a PR for Siesta to split app the Spec and Subspec in order to have the same behaviour Carthage has by default.\r\n\r\nIs it a viable solution for you?","Its a good change to split subspecs maybe into their own target but it is a *huge* change. We should definitely consider this for a 1.8.0 or 2.0.0 instead.","I see. I will ask and try splitting the subspecs of siesta in the while. The only other alternative would be use the mix of Carthage and Pod","Here to add another use case where I'm facing a similar if not the same issue. I am providing test helpers for ReSwiftThunk as a subspec. Integrating with CocoaPods 1.6.1 and the following in this demo project [ExpectThunkDemo](https:\/\/github.com\/jjgp\/ExpectThunkDemo) works:\r\n\r\n```\r\nplatform :ios, '12.1'\r\n\r\ntarget 'ExpectThunkDemo' do\r\n  use_frameworks!\r\n  pod 'ReSwiftThunk', :git => 'git@github.com:jjgp\/ReSwift-Thunk.git', :branch => 'expect-thunk-proposal'\r\nend\r\n\r\ntarget 'ExpectThunkDemoTests' do\r\n  pod 'ReSwiftThunk\/ExpectThunk', :git => 'git@github.com:jjgp\/ReSwift-Thunk.git', :branch => 'expect-thunk-proposal'\r\nend\r\n```\r\n\r\nWhen I attempt to add it as a child target with the following I receive a SIGABRT `dyld: lazy symbol binding failed: Symbol not found: _$S12ReSwiftThunk06ExpectC0CMa` when running the unit tests:\r\n\r\n```\r\ntarget 'ExpectThunkDemo' do\r\n  use_frameworks!\r\n  pod 'ReSwiftThunk', :git => 'git@github.com:jjgp\/ReSwift-Thunk.git', :branch => 'expect-thunk-proposal'\r\n  target 'ExpectThunkDemoTests' do\r\n    inherit! :search_paths\r\n    pod 'ReSwiftThunk\/ExpectThunk', :git => 'git@github.com:jjgp\/ReSwift-Thunk.git', :branch => 'expect-thunk-proposal'\r\n  end\r\nend\r\n```\r\n\r\nHere's the abbreviated podspec as found in the [PR 19](https:\/\/github.com\/ReSwift\/ReSwift-Thunk\/pull\/19):\r\n\r\n```\r\nPod::Spec.new do |spec|\r\n  ...\r\n  spec.subspec \"Core\" do |sp|\r\n    sp.source_files = \"ReSwift-Thunk\"\r\n  end\r\n\r\n  spec.subspec \"ExpectThunk\" do |sp|\r\n    sp.dependency \"ReSwiftThunk\/Core\"\r\n    sp.pod_target_xcconfig = { \"ENABLE_BITCODE\" => \"NO\" }\r\n    sp.framework    = \"XCTest\"\r\n    sp.source_files = \"ReSwift-ThunkTests\/ExpectThunk.swift\"\r\n  end\r\n\r\n  spec.default_subspec = \"Core\"\r\n\r\n  spec.dependency \"ReSwift\", \"~> 4.0\"\r\nend\r\n```\r\n\r\nI'll peruse the other linked issues in case I missed something. Thanks!","This got kinda long, so **TLDR**: I support the following:\r\n> Its a good change to split subspecs maybe into their own target but it is a _huge_ change. We should definitely consider this for a 1.8.0 or 2.0.0 instead.\r\n\r\nRunning into a very similar issue where I somewhat complicated setup involving multiple private pods. I'll try to simplify it with an example:\r\n\r\nAt the lowest level I have something like a Models pods. Models also utilizes codegen which is run in a script phase.\r\n```\r\nPod::Spec.new do |s|\r\n  s.name = 'Models'\r\n  s.static_framework = true\r\n\r\n  s.default_subspecs = 'Core', 'Extensions'\r\n\r\n  s.subspec 'Core' do |ss|\r\n    ss.source_files = 'Sources\/Core\/**\/*.swift'\r\n    # ss.script_phase\r\n  end\r\n\r\n  s.subspec 'Extensions' do |ss|\r\n    ss.source_files = 'Sources\/Extensions\/**\/*.swift'\r\n    ss.dependency 'SomeLargerDependencyYouMightNotAlwaysWant'\r\n  end\r\n\r\n  s.subspec 'Mocks' do |ss|\r\n    ss.source_files = 'Sources\/Mocks\/**\/*.swift'\r\n    ss.dependency 'Models\/Core'\r\n  end\r\nend\r\n```\r\n\r\nAnd in some Feature pod\r\n```\r\nPod::Spec.new do |s|\r\n  s.name = 'Feature'\r\n  s.static_framework = true\r\n\r\n  s.dependency 'Models'\r\nend\r\n```\r\n\r\nThen in an App Podfile\r\n```\r\ntarget 'Example' do\r\n    pod 'Models', :path => 'libs\/Models\/'\r\n    pod 'Feature', :path => 'libs\/Feature\/'\r\n\r\n    target 'Example_Tests' do\r\n        pod 'Models\/Mocks', :path => 'libs\/Models\/'\r\n    end\r\nend\r\n```\r\n\r\nSo `Example` has a dependency on `Models`, but `Example_Tests` has a dependency on `Models.default-Mocks`.\r\n\r\nWhen building only `Example`, there are no problems because only `Models` is built.\r\nWhen building `Example_Tests`, both `Models` and `Models.default-Mocks` are built since Feature has the dependency on `Models`. Due to the fact that they are both trying to build the same files (and codegen can change them) at the same time (because `Models.default-Mocks` doesn't depend on `Models`), I often end up with a failed build due to something like `error: input file 'Generated.swift' was modified during the build`.\r\n\r\nNow there are several workarounds for this, the most obvious being to not run codegen as a script phase and instead put that on the developer as a manual step any time an input file is changed, but ideally I wouldn't have to do that.\r\n\r\nNone of this would be a problem if subspecs had their own targets.\r\n> Its a good change to split subspecs maybe into their own target but it is a _huge_ change. We should definitely consider this for a 1.8.0 or 2.0.0 instead.\r\n\r\nIn my opinion having each subspec be built as it's own target could be a large improvement to the experience of working with subspecs. This should resolve one of the most common problems I have with subspecs. There is no compiler guarantee that a restrictive subspec will actually compile until you create a project that only pulls in the smaller subspec.\r\nExample:\r\n```\r\nPod::Spec.new do |s|\r\n  s.name = 'Commons'\r\n\r\n  s.subspec 'Core' do |ss|\r\n    ss.source_files = 'Sources\/Core\/**\/*.swift'\r\n  end\r\n\r\n  s.subspec 'Extensions' do |ss|\r\n    ss.source_files = 'Sources\/Extensions\/**\/*.swift'\r\n    ss.dependency 'Commons\/Core'\r\n  end\r\nend\r\n```\r\n\r\nSomeone makes a change in `Commons\/Core` that uses something from `Commons\/Extensions`.\r\n\r\nIn:\r\n```\r\ntarget 'Commons_Example' do\r\n    pod 'Commons', :path => '.\/'\r\nend\r\n```\r\nThat compiles are runs just fine, but in:\r\n```\r\ntarget 'Feature_Example' do\r\n    pod 'Commons\/Core', :path => '.\/'\r\nend\r\n```\r\nThe compiler will complain about unknown symbols.\r\n\r\nI believe this would be a fundamental change to how subspecs work, but could be a huge improvement for people making heavy use of subspecs.\r\n\r\nAside from actually implementing the change in cocoapods, I think the biggest roadblock to a change like this will be the number of currently functional podspecs that won't work correctly because inter-subspec dependencies aren't listed correctly. If you look in my original `Models` example I made this mistake, it's highly likely that `Models\/Extensions` should have a dependency on `Models\/Core`.","Hello, \r\nI have right now exactly the same issue than @jgongo ,\r\nI have a library than contains a specific subspec useful just for testing porpuses.\r\n\r\nThe podfile is something as:\r\n```\r\ntarget 'FTMTableSectionModules_Example' do\r\n  pod 'FTMTableSectionModules', :path => '..\/'\r\n  \r\n  target 'FTMTableSectionModules_Tests' do\r\n    inherit! :search_paths\r\n    pod 'FTMTableSectionModules\/TestHelpers', :path => '..\/'\r\n  end\r\nend\r\n```\r\n\r\nThe result is exactly the same. Main app works without problem, however running unit testing always fails in runtime\r\n\r\nIf I'm right we still don't have a solution for this right?\r\n\r\nThanks","@fjtrujy I finally ended up splitting the test support classes into their own pod. HTH!","I was thinking to do exactly the same things, most probably I would do exactly the same.\r\nAnyway, let's see if guys from @CocoaPodsBot come with a solution.\r\nThanks","Hi there,\r\nthis problem still appears on 1.9.3\/1.10.0 beta, is it going to be changed or this is intended behaviour ?","The issue is still open and without any PRs attached to it. Not sure if this is going to be changed or not. Any help would be appreciated here.","Hello. Any news on this? Do you guys think the only way is with a separate a separate pod? ","I have an even more difficult case where the subspec includes `@testable import` of the pod so if I try to make a separate pod by forking the dependency it still doesn't work as the module is not built for testing during validation."],"labels":["t2:defect"]},{"title":"Caching the results of running prepare_command can cause issues.","body":"# Report\r\n\r\nCocoaPods caches any files produced by the `prepare_command`. If any of these files depend on the version of Xcode a user is running this can cause stale files to be installed as part of a pod. Removing the `Podfile.lock` file and `Pods` directory is not sufficient (though many users believe it is). The issue is somewhat exacerbated by the fact that without the `--verbose` flag CocoaPods does not mention that it is using a cached copy of the pod. Indeed, consider the following output:\r\n\r\n````\r\nAnalyzing dependencies\r\nDownloading dependencies\r\nInstalling IDZSwiftCommonCrypto (0.9.1)\r\nGenerating Pods project\r\nIntegrating client project\r\nSending stats\r\nPod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.\r\n````\r\nseems reasonable to conclude that the pod had been downloaded.\r\n\r\nFollowing the principle of least surprise it seems to me that it would be better if CocoaPods cached the state of the pod *before* the `prepare_command` had been run and ran it on the cached copy after installation in the user's directory.\r\n\r\nI know this is probably only an issue for a small number of pods, but it took quite some time to diagnose the issue. To get an idea of the sort of confusion this can cause see: IDZSwiftCommonCrypto Issues: [51](https:\/\/github.com\/iosdevzone\/IDZSwiftCommonCrypto\/issues\/51) [78](https:\/\/github.com\/iosdevzone\/IDZSwiftCommonCrypto\/issues\/78).\r\n\r\n## What did you do?\r\n\r\n1) Upgraded Xcode\r\n2) Removed `Podfile.lock` and `Pods` directory\r\n3) Ran `pod install`\r\n\r\n## What did you expect to happen?\r\n\r\nThe pod installation should be identical to what I would have obtained had the pod not been in the cache.\r\n\r\n## What happened instead?\r\n\r\nSince the cached version of the pod contained results of running `prepare_command` with an older version of Xcode come files in the pod were out of date.\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.2.1\r\n        Ruby : ruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin15]\r\n    RubyGems : 2.6.8\r\n        Host : Mac OS X 10.13.1 (17B35a)\r\n       Xcode : 9.1 (9B55)\r\n         Git : git version 2.13.6 (Apple Git-96)\r\nRuby lib dir : \/Users\/danny\/.rvm\/rubies\/ruby-2.3.3\/lib\r\nRepositories : fft-specs - \/Users\/danny\/fft\/apps\/Specs.git @ 0d92977b59385238cf908d2819e03b6f433eeed2\r\n               IDZPodspecs - https:\/\/github.com\/iosdevzone\/IDZPodspecs.git @ 7c0aefd6723b21eec2efe0ff6c2c5e82a9db1743\r\n               iosdevzone - https:\/\/github.com\/iOSDevZone\/IDZPodspecs.git @ 7c0aefd6723b21eec2efe0ff6c2c5e82a9db1743\r\n               master - https:\/\/github.com\/CocoaPods\/Specs.git @ 83159e39295ad4f576c4524f10e57e6de4fc1aed\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/danny\/.rvm\/gems\/ruby-2.3.3\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\nclaide-plugins        : 0.9.2\r\ncocoapods-deintegrate : 1.0.1\r\ncocoapods-playgrounds : 1.2.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.2.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n\r\n## Project that demonstrates the issue\r\n\r\nThe issue is demonstrated by:\r\nhttps:\/\/github.com\/iosdevzone\/IDZSwiftCommonCrypto\r\neven using `xcode-select` to switch active Xcodes can demonstrate the problem. See the generated `module.map` files. \r\n","comments":["Prepare commands are only supposed to be executed once during fresh installation of the pod. I see your concern and problem though.\r\n\r\nWould it be better to use a `script_phase` instead to execute this as part of Xcode compilation since it depends on Xcode version? Script phase support is being added in 1.4.0.\r\n\r\nYou may use this feature today in 1.4.0.beta.2.","@iosdevzone see https:\/\/github.com\/CocoaPods\/Core\/blob\/master\/lib\/cocoapods-core\/specification\/dsl.rb#L1285-L1322","Yup, sounds like `script_phase` is exactly what I need. Thanks for the info! The Xcode project uses a script phase so it's a closer match to what I want. Don't want to push users to rely on beta CocoaPods so will wait until it is in a released version.\r\n\r\nStill think the caching behavior is a bit surprising. Perhaps a mention in documentation for `prepare_command` highlighting \"download\" vs. \"install from cache\" would be useful. ","@iosdevzone I marked it as an easy enhancement. No plans on implementing this soon. Anyone who feels contributing can jump right in!"],"labels":["t1:enhancement","d1:easy"]},{"title":"Previously installed pods for a smaller subset of platforms can be incomplete on incremental installation","body":"# Report\r\n\r\n## What did you do?\r\n\r\nThis is not at all specific to the involved pod, but this allows to reproduce this issue. It must be a podspec which is on multiple platforms on which it uses different proper subsets of source files.\r\n\r\n1. Assume initially a Podfile as:\r\n```ruby\r\ntarget \"TargetA\" do\r\n  platform :ios, '10.0'\r\n  pod \"Fabric\"\r\nend\r\n```\r\n\r\n2. Run `pod install`\r\n3. Add a target on a different platform using the same pod:\r\n```diff\r\ntarget \"TargetA\" do\r\n  platform :ios, '10.0'\r\n  pod \"Fabric\"\r\nend\r\n\r\n+target \"TargetB\" do\r\n+  platform :macos, '10.13'\r\n+  pod \"Fabric\"\r\n+end\r\n```\r\n\r\n## What did you expect to happen?\r\n\r\nInstall all pod dependencies correctly.\r\n\r\n## What happened instead?\r\n\r\nPod Fabric is missing the platform-specific sources for macOS.\r\n\r\n## Workaround\r\n\r\nNuke the Pods directory and run `pod install` again.\r\n\r\n## Why does that go wrong?\r\n\r\nThis happens because the `PodDirCleaner` has cleaned the pod previously based on just including source files belonging to the selected subset of platforms, here iOS. When we add macOS as a platform, the `SandboxAnalyzer` doesn't know for what platforms this pod was installed before as this information is not present in the sandbox manifest, so that it cannot know that the pod has to be flagged as changed. So the pod will be categorized as unchanged and the installer will skip any further actions assuming there is nothing further to do.\r\nThe cache which runs the `PodDirCleaner` as well is not affected by this.\r\n\r\n## Proposed Solutions\r\n\r\n### A: Clean more forgiving\r\n\r\nDon't clean files which are specified for platforms which are unused. That would require that the `PodDirCleaner` is initialized with the root spec for all platforms.\r\n\u274e This can blow up the size of the installation for certain cases.\r\n\r\n### B: Add the platform to the sandbox manifest\r\n\r\nStore together with each pod in the sandbox manifest for what platform a pod was used when it was installed. That would allow the `SandboxAnalyzer` to flag the pod as changed and the installer would put the files correctly in place again.\r\n\u274e This requires changes to Core, migration to a new version etc.","comments":["**C: Clear the Pods directory on platforms change.**\r\n  ","~~There's another issue that seems to be a symptom of the same thing.~~\r\n\r\n~~When there's a development podspec that produces more than one target, incremental install only produces the one target that got modified.~~\r\n\r\n~~I think that the entire pod subproject needs to be regenerated.~~\r\n\r\n~~I've made a repo to reproduce it:~~\r\n~~https:\/\/github.com\/igor-makarov\/DemoCPIncrementalBug~~\r\n\r\nEDIT: it wasn't the same issue.","~~I've made PR #8572 that fixes this.~~\r\n\r\n~~I need to add tests to it and I'm not sure how.~~\r\n\r\nEDIT: it wasn't the same issue.","So the issue I was talking about isn't the same as this one. The word \"incremental\" had me mistaken.\r\n\r\nDoes this issue still happen?","I haven't tried yet to know.","I was hoping that @mrackwitz would answer as the OP.  \r\nI feel like this issue from Oct 2017 has a good probability to be not relevant now.","Issue still applies in my quick test.","Workaround is to `rm -rf Pods` and re-run `pod install`."],"labels":["t2:defect","s2:confirmed","d2:moderate","s7:workaround available"]},{"title":"--silent flag is not applied to CocoaPods internal calls","body":"# Report\r\n\r\n## What did you do?\r\n\r\nRun `pod repo remove master`\r\nRun `pod install --silent`\r\n\r\n## What did you expect to happen?\r\n\r\nPods silently installed (no output)\r\n\r\n## What happened instead?\r\n\r\nAll output about setting-up repo is showed.\r\n'Cloning into 'master'... ' \r\n\r\n## CocoaPods Environment\r\n\r\nCocoadpods: 1.2.1\r\nXcode: 8.3.2\r\n","comments":["This is only related to cloning the repos first time. Should be an easy fix for a starter contributor.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n"],"labels":["d1:easy","s2:confirmed"]},{"title":"use PODS_CONFIGURATION_BUILD_DIR in \"Embed Pods Frameworks\"","body":"* [x] I've read and understood the \ud83c\udf08[*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\nI'm wondering if it would be possible, in the **Embed Pods Frameworks** script, to replace instances of the environment variable `BUILT_PRODUCTS_DIR` with `PODS_CONFIGURATION_BUILD_DIR`. The latter is configurable by the user, and as far as I can tell they should be equivalent.\r\n\r\nSo this line in the generated script\r\n\r\n    install_framework \"${PODS_CONFIGURATION_BUILD_DIR}\/Alamofire\/Alamofire.framework\"\r\n\r\nwould become\r\n\r\n    install_framework \"${BUILT_PRODUCTS_DIR}\/Alamofire\/Alamofire.framework\"\r\n\r\nI'm not sure how to accomplish this. These paths seem to be passed to `Generator::EmbedFrameworksScript`.\r\n\r\nBackground: I'm customizing this variable in order to build pods and targets separately on our build system, since we have multiple (mostly identical) targets that use the same pods and we want to reduce our build times by building pod frameworks only once. I do this by running xcodebuild using the projects (Pods.xcodeproj, then MyApp.xcodeproj) instead of the workspace. I believe I've gotten everything working by tweaking `PODS_BUILD_DIR`, the only problem left is that the **Embed Pods Framework** script does not use the PODS_* variables, but rather xcode-computed variables which I can't easily change.\r\n\r\nI'm hoping this change would leave everything functionally identical but add some flexibility for users with unusual needs.\r\n","comments":["@philippelatulippe I am not sure `${PODS_CONFIGURATION_BUILD_DIR}` points to the same folder as `${BUILT_PRODUCTS_DIR}`","Some Xcode variables match for some types of builds but vary for others, like an Archive build for example.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","I agree it probably should use `PODS_CONFIGURATION_BUILD_DIR`","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","keep","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Sounds like this would be a welcomed change is anyone wants to submit a PR \ud83d\udc4d ","If anyone here is looking for a workaround, I've found that setting `BUILD_DIR` and `-derivedDataPath` seems to be sufficient in isolating the builds, and because `BUILT_PRODUCTS_DIR` and `PODS_CONFIGURATION_BUILD_DIR` are both derived from `BUILD_DIR`, everything seems to build correctly."],"labels":["t1:enhancement","t3:discussion","d1:easy"]},{"title":"\"The Podfile contains framework or static library targets, for which the Podfile does not contain host targets\"","body":"# Report\r\n\r\nI am getting the following error:\r\n_[!] The Podfile contains framework or static library targets, for which the Podfile does not contain host targets (targets which embed the framework).\r\nIf this project is for doing framework development, you can ignore this message. Otherwise, add a target to the Podfile that embeds these frameworks to make this message go away (e.g. a test target)._\r\n\r\nSome comments:\r\n- all targets in Podfile are apps except \"Infra\" which is a static library.\r\n- All targets, including Infra, are using Dropbox SDK and therefore must be installed with Dropbox pods\r\n- Infra is an embedded subproject (of static library type) in each App project (i.e. Infra project is embedded in BookApp project)\r\n- I had no issues with this podfile while using cocoapods 1.1.1\r\n- When I remove the Infra target from the Podfile (as following listed), the above cocoapods error is gone however the Infra project will obviously fail to compile in Xcode.\r\n```\r\ntarget 'Infra' do\r\n  project 'Infra\/Infra'\r\n    pod 'ObjectiveDropboxOfficial'\r\nend\r\n\r\n```\r\n## What did you do?\r\nRun `pod install`\r\n\r\n## What did you expect to happen?\r\nInstall all pod dependencies correctly.\r\n\r\n## What happened instead?\r\nError appeared as described above.\r\n\r\n## CocoaPods Environment\r\n\r\nCocoaPods : 1.3.1\r\n        Ruby : ruby 2.3.3p222 (2016-11-21 revision 56859) [universal.x86_64-darwin17]\r\n    RubyGems : 2.5.2\r\n        Host : Mac OS X 10.13 (17A405)\r\n       Xcode : 9.0 (9A235)\r\n         Git : git version 2.13.5 (Apple Git-94)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.3\/usr\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 26d68903bc6ced65547ef95bac7114cb5178d289\r\n\r\n```\r\nplatform :ios, '9.0'\r\n workspace 'My Apps'\r\n\r\ntarget 'BookApp' do\r\n  project 'BookApp\/BookApp'\r\n    pod 'ObjectiveDropboxOfficial'\r\nend\r\n\r\ntarget 'BookApp Pro' do\r\n  project 'BookApp\/BookApp'\r\n    pod 'ObjectiveDropboxOfficial'\r\nend\r\n\r\ntarget 'MovieApp' do\r\n  project 'MovieApp\/MovieApp'\r\n    pod 'ObjectiveDropboxOfficial'\r\nend\r\n\r\ntarget 'MovieApp Pro' do\r\n  project 'MovieApp\/MovieApp'\r\n    pod 'ObjectiveDropboxOfficial'\r\nend\r\n\r\ntarget 'MusicApp' do\r\n  project 'MusicApp\/MusicApp'\r\n    pod 'ObjectiveDropboxOfficial'\r\nend\r\n\r\ntarget 'MusicApp Pro' do\r\n  project 'MusicApp\/MusicApp'\r\n    pod 'ObjectiveDropboxOfficial'\r\nend\r\n\r\ntarget 'Infra' do\r\n  project 'Infra\/Infra'\r\n    pod 'ObjectiveDropboxOfficial'\r\nend\r\n```","comments":["This is not an error, rather a warning. You did not see this prior to latest upgrade because this warning did not exist in a previous version.\r\n\r\nHaving targets in the podfile that are static libraries or dynamic frameworks is probably fine but CocoaPods is just warning you that these targets are not embedded within other targets and they are supposed to.\r\n\r\nThis is a friendly warning and while slightly annoying I don't think there is anything for us to do here.\r\n\r\nCompilation should continue to work just fine for you @yoasha ","@dnkoutso thank you for your reply. Is there any way to \"tell\" CocoaPods that either 'BookApp', 'MovieApp', or 'MusicApp' are the host target of the 'Infra' static library target? I guess there is a way to do that in order to prevent the warning.","Is there a way to silence this warning? It is showing up incorrectly for me. I have an xcode project file in my workspace that builds an internal framework that is not under pod control and it is embedded normally via Xcode's embed frameworks phase. I use Cocoapods to manage dependency of this internal framework's dependency, so it is giving me this warning about a framework target not being embedded. \r\n\r\nI am not sure what this warning is supposed to tell me, or honestly how it would ever give actionable, correct information. The suggestion it gives, to embed it within some other target in the Podfile, does not seem like the thing I actually want to do. The warning doesn't even tell you which target it is complaining about.","+1 for @bdorfman s comment, would be nice to be able to silence it! :) ","The warning is extremely annoying.","Suggestions for ways to make it less annoying would be welcome","I agree with @bdorfman, embedding the framework in another target that IS on the Podfile when I'm not actually going to use it there doesn't seem like a great fix.\r\n\r\nIs it possible to flag the framework in the Podfile as internal? If it was explicitly declared as such it would make sense when the warning disappeared.","This can be silenced by adding an installation option.","Are you referencing `install!`? Which option would silence? I noticed the `integrate_targets` which sounds along the same lines but I haven't looked into the details of the available options for this spec.\r\n\r\n```\r\ninstall! 'cocoapods',\r\n         :integrate_targets => false\r\n```","yes there is also another one for multiple pod sources support here https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/installer\/installation_options.rb#L109\r\n\r\nShould be fairly easy to implement. Keep in mind if it goes there it will be a global option, i.e you cannot customize it per target. For per target customization it will need a DSL added to the Core.","The `integrate_targets => false ` option silenced the warning for me! It also silenced everything else though.\r\n\r\nUnfortunately, the `warn_for_multiple_pod_sources => false` option didn't silence the relevant warning warning for me. Do I have it right?\r\n```\r\ninstall! 'cocoapods',\r\n         :warn_for_multiple_pod_sources => false\r\n```\r\nI prefer this solution as it is cleaner and makes more sense, if it worked. It has a very descriptive name specifically for this case and I've definitely run into this warning before and just hadn't bothered to look into how to silence it effectively. Thank you for your help on this!","@bornbrie you may have misunderstood me. There is no option today and `integrate_targets` is a completely different option that only downloads dependencnies.\r\n\r\n`warn_for_multiple_pod_sources` is also different.\r\n\r\nWhat I am saying is we need to add a *new* one that can be configured by folks to disable this warning.","Oh perfect, no wonder it wasn't working haha. At least it's not broken! Silly me. @dnkoutso Thank you for clarifying Sorry!","I'd also like to note that the message itself makes little sense for a static library target. It doesn't need a host target which embeds the library since it's static, linking is enough.","Sorry to bust this one open again, but I receive this warning when defining an `abstract_target` as well.\r\n\r\nThe warning tells me that the 'abstact target' is the culprit, but I can't really add that target to any of _my_ targets...feels like the chicken and egg problem here.","Unless I missed something this errant warning still exists for static libraries, no embedding makes sense for those since they are compiled into targets using it...?","This is work for me.\r\n```\r\ntarget 'BookApp' do\r\n  project 'BookApp\/BookApp'\r\n    pod 'ObjectiveDropboxOfficial'\r\n\r\n    \/\/\/\/\/ Add the test targets to remove the warning.\r\n    target 'BookAppTests' do\r\n    end\r\n\r\nend\r\n```","> This is work for me.\r\n> \r\n> ```\r\n> target 'BookApp' do\r\n>   project 'BookApp\/BookApp'\r\n>     pod 'ObjectiveDropboxOfficial'\r\n> \r\n>     \/\/\/\/\/ Add the test targets to remove the warning.\r\n>     target 'BookAppTests' do\r\n>     end\r\n> \r\n> end\r\n> ```\r\n\r\nGreat solution for me! Thank you."],"labels":["t1:enhancement","d1:easy"]},{"title":"Feature request: CocoaPods using Conditional Variable Assignment","body":"**Cocoapods version**: 1.3.1<\/br>\r\n**Xcode version**: 9.0 (9A235)\r\n\r\n\r\nCocoapods is generating a lot of xcconfig files which creates overhead when having custom xcconfig files in project.\r\n\r\nI expected cocoapods to generate one `xcconfig` file per target using conditional variable assignment in each file for each scheme. Instead, for each scheme and each target an `xcconfig` file was created. Many of which with very few differences.\r\n\r\nThis creates a big problem for projects with multiple targets and multiple schemes. In our case we have 5 schemes (`Debug`, `Release`, `Profile`, `AdHoc` and `AdHoc Dev`) and about 9 targets. \r\nWhen we would like to create specific config files for some of our targets, it means that we need to create 6 `xcconfig` files for each target.\r\n\r\nEg.\r\n`shared.xcconfig` which sets settings like version number ect.\r\n`App.xcconfig` which sets the different apps config setting.\r\n`App-{configuration}.xcconfig` which includes the `App.xcconfig` and Pods configuration only.\r\nThis creates a lot of overhead.\r\n\r\n## Current:\r\n\r\n**Shared.xcconfig**:\r\n\r\n```\r\nBUNDLE_VERSION = 4.4.0\r\nBUILD_NUMBER = 1\r\n```\r\n\r\n**App1.xcconfig**:\r\n\r\n```\r\n#include \"Shared.xcconfig\"\r\nBUNDLE_IDENIFIER = \"net.myapp.app1\"\r\n```\r\n\r\n**App1-Debug.xcconfig**:\r\n\r\n```\r\n#include \"App1.xcconfig\"\r\n#include \"Pods\/Target Support Files\/Product1\/Pods-App1.Debug.xcconfig\"\r\n```\r\n\r\n## Requested\r\n\r\nInstead I would like cocapods to create one `Pods\/Target Support Files\/Product1\/Pods-App1.xcconfig` and have the following example content (of course, the below is shortened and values are incorrect):\r\n\r\n```\r\nALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES\r\nALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES[config=Release] = NO\r\n\r\nFRAMEWORK_SEARCH_PATHS = $(inherited) \"\"\r\nFRAMEWORK_SEARCH_PATHS[config=Release] = $(inherited) \"Something different\"\r\n\r\nPODS_CONFIGURATION_BUILD_DIR[config=Debug] = $PODS_BUILD_DIR\/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)\r\n\r\nPODS_PODFILE_DIR_PATH[config=Debug] = ${SRCROOT}\/.\r\n\r\nPODS_ROOT[config=Debug] = ${SRCROOT}\/Pods\r\n```\r\n\r\nHence the addition of conditional variable assignment using `[config=Debug]` and `[config=Release]`. More information [here](https:\/\/pewpewthespells.com\/blog\/xcconfig_guide.html#ConditionalVariableAssignment).\r\n\r\nThat way I can assign `App1.xcconfig` in Xcode to `App1` under `Configuration Debug` with the contents of `App1.xcconfig` being the following:\r\n\r\n**App1.xcconfig**:\r\n\r\n```\r\n#include \"Shared.xcconfig\"\r\n#include \"Pods\/Target Support Files\/Product1\/Pods-App1.xcconfig\"\r\n\r\nBUNDLE_IDENIFIER = \"net.myapp.app1\"\r\n```\r\n\r\nI hope my feature request was properly written according to your guidelines. I also believe that this is something many users might have use of. Especially those with large projects.","comments":["@ppeelen thanks for this enhancement request. I personally need to think it through myself but this would be a larger change in how CocoaPods works.\r\n\r\nGenerally the xcconfig file generation has been the slowest part in a large project and this would help with performance but there are other things to consider before implementing this.","Of course, I understand that this is not an easy item to tackle. A recommendation would be to have cocoapods backwards compatible using a variable in the Podsfile. E.g. `use_cva` or `use_seperate_xcconfig`.","hey guys,\r\n\r\nIs there any work done on this issue ? We also have same exact issue.\r\n\r\n"],"labels":["t1:enhancement","t3:discussion","d3:hard"]},{"title":"Multiple Targets - linker command failed with exit code 1","body":"# Report\r\n\r\n## What did you do?\r\n\r\nSet up targets in Podfile as follows:\r\n```\r\ntarget 'Views' do\r\n    pod 'RxCocoa'\r\n    pod 'RxDataSources'\r\n    pod 'RxSwift'\r\n    pod 'SlackTextViewController'\r\nend\r\ntarget 'Engine' do\r\n    pod 'Branch'\r\n    pod 'GooglePlaces'\r\n    pod 'RealmSwift'\r\n    pod 'RxCocoa'\r\n    pod 'RxSwift'\r\nend\r\n```\r\nWithin the `Views` framework I made sure that the `SlackTextViewController` use is private and not exposed.\r\nThe `Engine` frame links to the `Views` target, but shouldn't require `SlackTextViewController` for anything.\r\n\r\n## What did you expect to happen?\r\n\r\nEngine compiles because the publicly exposed interface of `Views` uses types known to the framework.\r\n\r\n## What happened instead?\r\n\r\n`Engine` compilation fails with the error:\r\n>> ld: framework not found SlackTextViewController for architecture x86_64\r\n>> clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.3.1\r\n        Ruby : ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\r\n    RubyGems : 2.0.14.1\r\n        Host : Mac OS X 10.12.6 (16G29)\r\n       Xcode : 9.0 (9A235)\r\n         Git : git version 2.13.5 (Apple Git-94)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.0\/usr\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ d5ece662b6639444a80a41c63d3ed5f793460a5d\r\n               officeserve-pods - https:\/\/github.com\/OfficeServe\/ios-podspecs.git @ f3d4e07afee12073c9a236031d8b3c4d16eb6e3b\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.1\r\ncocoapods-playgrounds : 1.2.2\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.2.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nplatform :ios, '9.0'\r\nuse_frameworks!\r\n\r\n# ignore all warnings from all pods\r\ninhibit_all_warnings!\r\n\r\ntarget 'Hypit' do\r\n    pod 'Alamofire'\r\n    pod 'AlamofireImage', '~> 3.1'\r\n    pod 'Argo'\r\n    pod 'Auth0', '~> 1.0'\r\n    pod 'Branch'\r\n    pod 'Crashlytics'\r\n    pod 'Curry'\r\n    pod 'Fabric'\r\n    pod 'GooglePlaces'\r\n    pod 'Lock', '~> 2.0'\r\n    pod 'Instabug', '~> 7.0'\r\n    pod 'Interpolate'\r\n    pod 'OneSignal'\r\n    pod 'Mixpanel-swift'\r\n    pod 'Pulley', '1.3.0'\r\n    pod 'RealmSwift'\r\n    pod 'RxCocoa'\r\n    pod 'RxDataSources'\r\n    pod 'RxRealm'\r\n    pod 'RxSwift'\r\n    pod 'SlackTextViewController'\r\n    pod 'SwiftyUserDefaults'\r\n        pod 'TTTAttributedLabel'\r\nend\r\n\r\ntarget 'Core' do\r\n    pod 'Alamofire'\r\n    pod 'Auth0', '~> 1.0'\r\n    pod 'Mixpanel-swift'\r\n    pod 'OneSignal'\r\n    pod 'RealmSwift'\r\n    pod 'RxCocoa'\r\n    pod 'RxSwift'\r\n    pod 'SwiftyUserDefaults'\r\nend\r\n\r\ntarget 'ViewModels' do\r\n    pod 'RxCocoa'\r\nend\r\n\r\ntarget 'Views' do\r\n    pod 'RxCocoa'\r\n    pod 'RxDataSources'\r\n    pod 'RxSwift'\r\n    pod 'SlackTextViewController'\r\nend\r\n\r\ntarget 'Routing' do\r\n    # Realm is only a dependency because Core exposes Realm objects\r\n    # In the future Core should be refactored to expose immutable value types\r\n    pod 'RealmSwift'\r\n    pod 'RxCocoa'\r\n    pod 'RxSwift'\r\nend\r\n\r\ntarget 'Service' do\r\n  pod 'RxCocoa'\r\n  pod 'RxSwift'\r\nend\r\n\r\ntarget 'Engine' do\r\n    # Realm is only a dependency because Core exposes Realm objects\r\n    # In the future Core should be refactored to expose immutable value types\r\n    pod 'Branch'\r\n    pod 'GooglePlaces'\r\n    pod 'RealmSwift'\r\n    pod 'RxCocoa'\r\n    pod 'RxSwift'\r\nend\r\n\r\ntarget 'OneSignalNotificationServiceExtension' do\r\n  pod 'OneSignal'\r\nend\r\n\r\npost_install do |installer|\r\n    installer.pods_project.targets.each do |target|\r\n        target.build_configurations.each do |config|\r\n            config.build_settings['SWIFT_VERSION'] = '3.0'\r\n        end\r\n    end\r\n\r\n    installer.pods_project.build_configurations.each { |bc|\r\n        bc.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'\r\n    }\r\nend\r\n```\r\n\r\n## Sample Project Demonstrating Issue\r\n\r\nProject can be found here: https:\/\/www.dropbox.com\/sh\/2vzfs5s4pvxsztr\/AAACccj9QJB_-RmP8-jX1gUCa?dl=0","comments":["Can you please attach a sample project? You are halfway there with the detailed Podfile and report you provided","I'm trying and failing to reproduce this in a sample project. Once I succeed I will post it here.","@dnkoutso I have updated with a sample project.","@Infinity-James hm interesting case. I am trying to see if you are supposed to be hiding the \"SlackTextViewController\" framework. \r\n\r\nThere is no such built-in functionality in CocoaPods to do that but I am still investigating how to achieve it.","@Infinity-James in other words I think we are looking for a feature enhancement here or perhaps the use of a `post_install` hook to mark the framework as private.","I believe CocoaPods would be improved with the ability to establish these real boundaries as to the frameworks to which a target links. A 'fix' for the error is to add `pod SlackTextViewController` to the target in the `Podfile`. However, this clutters the targets imports and is disingenuous. I can maintain the boundaries in a 'soft' manner by simply never importing `SlackTextViewController`, but having it compiled with the target is lame.","@Infinity-James I find out why this happens. The `CONFIGURATION_BUILD_DIR` for each pod is setup as `$PODS_CONFIGURATION_BUILD_DIR\/<name>`. This causes the output artifact to be inside a subfolder within derived data.\r\n\r\nWhen Xcode reaches the link phase of 'Engine' it looks into a few standard paths on where the produced frameworks are to find them. Since `SlackTextViewController.framework` is present inside a subfolder, Xcode does not find it.\r\n\r\nTry it in your sample project and copy the `SlackTextViewController.framework` into the root derived data folder and rebuild, it succeeds for me.\r\n\r\nYou may fix this by providing a `post_install` hook to update your project to look into other paths for pre-built frameworks although I do not know the exact setting Xcode uses to find those frameworks by default.\r\n\r\nIn the meantime we could be fixing this for CocoaPods so I am marking it as confirmed and medium bug.","@dnkoutso You're a hero. It's been a really positive experience to have you working with me on this issue and taking it seriously. I really appreciate the time you've spent looking into this. \ud83d\ude04"],"labels":["t2:defect","s2:confirmed","d2:moderate"]},{"title":"Integrate Deploy into Cocoapods","body":"# Report\r\n\r\nA while back I built https:\/\/github.com\/jcampbell05\/cocoapods-deploy\/ as a quick way of implementing the `bundle deploy` functionality. Sometimes all you want is to simply install the source for the pods without having to incur the cost of checking versions or the local pod repository on the machine.\r\n\r\nI also want the security of not installing the incorrect version if for example the lockfile doesn't yet specify a pod version and you run `pod install`.\r\n\r\nBack in the days of Cocoapods pre-beta and 1.0 I was able to achieve a speed up of 73% which had a huge effect when building projects under Travis CI.\r\n\r\nWhilst these speedups may not be as large now the amazing work dantomi did with 1.3.0 :) I still think there is a need for a command like this.\r\n\r\nFor me as the plugin's author I'm finding that it relies on a few ugly monkey patches and is quite tied into how Cocoapod works so I believe it should belong in the core.\r\n\r\nHowever even if you disagree or even if this never happens I think there are a few tweaks I would like to contribute.\r\n\r\n# How does it work ?\r\n\r\nWe check for and read the podfile as well as the lockfile. We figure out the location to download the source code from for each pod based on the source of the podfile and download it for the specified version in the lockfile.\r\n\r\nBefore we trigger the installation step, we transform the dependencies specified in the podfile (in memory, disk isn't touched), so that they all point to the downloaded source code. Without this the install step will throw an error since the `deploy` command stops the local repositories on the machine from being updated.\r\n\r\nOnce this is done, the user should be able to build their project as normal\r\n\r\n# What do I need to do ?\r\n\r\nBelow I'll outline the tweaks I need to make this feasible or even just to help improve the cocoapods core.\r\n\r\nThis will be my first time contributing so would appreciate help in implementing this.\r\n\r\n- [ ]  Add the `pod deploy` command specified here -  https:\/\/github.com\/jcampbell05\/cocoapods-deploy\/blob\/master\/lib\/cocoapods-deploy\/command\/deploy.rb\r\n- [ ] Add the `DeployTransformer` class which transforms the podfile specifications to point at the downloaded copies of the source code for each pod - https:\/\/github.com\/jcampbell05\/cocoapods-deploy\/blob\/master\/lib\/cocoapods-deploy\/deploy_transformer.rb\r\n- [ ] Add \/ Refactor ? the `DeployDownloader` class which figure out how to download the source for a pod, we use our own class to turn off validation and to work with the `DeployTransformer` to figure out where to download them from (The original one needs the pod repo on the local computer- https:\/\/github.com\/jcampbell05\/cocoapods-deploy\/blob\/master\/lib\/cocoapods-deploy\/deploy_downloader.rb\r\n- [ ] We patch the resolve to change how dependency resolution is preformed, in how patched version we just make sure each resolved dependency has the correct version download - https:\/\/github.com\/jcampbell05\/cocoapods-deploy\/blob\/master\/lib\/cocoapods-deploy\/command\/deploy.rb#L48\r\n- [ ] We patch the ExternalSources to allow us to disable validation for certain podspecs, without this not all pods can be installed (see comments) https:\/\/github.com\/jcampbell05\/cocoapods-deploy\/blob\/master\/lib\/cocoapods-deploy\/command\/deploy.rb#L91\r\n- [ ] We have to subclass the installer to be able to use our own analyse, to disable pre-downloads and disable modification to the lockfile - https:\/\/github.com\/jcampbell05\/cocoapods-deploy\/blob\/master\/lib\/cocoapods-deploy\/deploy_installer.rb#L5\r\n- [ ] We have to subclass the analyser to stop it returning repo sources that cocoapods normall tries to install (even when we disable installing the podspec repos with the standard flag) - https:\/\/github.com\/jcampbell05\/cocoapods-deploy\/blob\/master\/lib\/cocoapods-deploy\/deploy_analyzer.rb\r\n\r\nWould love to know your thoughts on what you think I could contribute :) \r\n\r\n\r\n","comments":["This sounds like a big feature that would have an impact on a lot of things, are you willing to stick around to build this out and maintain it? I'd rather not include non-essential anymore giving how scarce the team is on time and how close SwiftPM is to being useful.","@orta Yes I would be very willing to add this and I think this would be useful for a lot of projects I use it with.\r\n\r\nI could start by just by allowing the plugin to work with CP without monkey patches.","@jcampbell05 still any appetite for this? Otherwise I think I am going to close it.","@dnkoutso I'm still working on removing the monkey patches should have a couple of PRs soon\r\n"],"labels":["t1:enhancement","d3:hard"]},{"title":"Duplicated implementation with pod 1.2.1","body":"* [x] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\nAfter updating from `1.1.1` to `1.2.1` I see duplicated implementation for all the frameworks I use inside my internal framework. Like:\r\n\r\n```\r\nobjc[33965]: Class CLSURLSession is implemented in both \/Users\/lucabartoletti\/Library\/Developer\/Xcode\/DerivedData\/SampleCocoapodsIssue-fmnrtlootruozbdjmxepcxupyell\/Build\/Products\/Debug-iphonesimulator\/SampleCocoapodsIssueFramework.framework\/SampleCocoapodsIssueFramework (0x109f710e0) and \/Users\/lucabartoletti\/Library\/Developer\/CoreSimulator\/Devices\/5CBE6348-71A0-4B47-8DD7-FF23E4E22705\/data\/Containers\/Bundle\/Application\/DB2EA3E2-0D43-454F-AED3-8896779C621F\/SampleCocoapodsIssue.app\/SampleCocoapodsIssue (0x106aa0f38). One of the two will be used. Which one is undefined.\r\n```\r\nThis started happening after `1.2.1` update.\r\n\r\nSo I created a sample projects that has the same structure of my real Podfile.\r\n\r\n```\r\nproject 'SampleCocoapodsIssue.xcodeproj'\r\n\r\nplatform :ios, '9.0'\r\n\r\nabstract_target 'Phone' do\r\n  target 'SampleCocoapodsIssueFramework' do\r\n    pod 'Fabric'\r\n    pod 'Crashlytics'\r\n  end\r\n  \r\n  abstract_target 'App'  do\r\n    target 'SampleCocoapodsIssue' do\r\n      pod 'AFNetworking'    \r\n    end\r\n  end\r\nend\r\n```\r\n\r\n## What did you do?\r\n\r\nUpdated to `1.2.1`\r\nRun `pod install`\r\n\r\n## What did you expect to happen?\r\n\r\nTo not see duplicated symbols. When I run `pod install` with `1.1.1` my xcconfig are:\r\n\r\n`Pods-Phone-App-SampleCocoapodsIssue.debug`\r\n```\r\nALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = NO\r\nGCC_PREPROCESSOR_DEFINITIONS = $(inherited) COCOAPODS=1\r\nHEADER_SEARCH_PATHS = $(inherited) \"${PODS_ROOT}\/Headers\/Public\" \"${PODS_ROOT}\/Headers\/Public\/AFNetworking\" \"${PODS_ROOT}\/Headers\/Public\/Crashlytics\" \"${PODS_ROOT}\/Headers\/Public\/Fabric\"\r\nLIBRARY_SEARCH_PATHS = $(inherited) \"$PODS_CONFIGURATION_BUILD_DIR\/AFNetworking\"\r\nOTHER_CFLAGS = $(inherited) -isystem \"${PODS_ROOT}\/Headers\/Public\" -isystem \"${PODS_ROOT}\/Headers\/Public\/AFNetworking\" -isystem \"${PODS_ROOT}\/Headers\/Public\/Crashlytics\" -isystem \"${PODS_ROOT}\/Headers\/Public\/Fabric\"\r\nOTHER_LDFLAGS = $(inherited) -ObjC -l\"AFNetworking\" -framework \"CoreGraphics\" -framework \"MobileCoreServices\" -framework \"Security\" -framework \"SystemConfiguration\"\r\nPODS_BUILD_DIR = $BUILD_DIR\r\nPODS_CONFIGURATION_BUILD_DIR = $PODS_BUILD_DIR\/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)\r\nPODS_ROOT = ${SRCROOT}\/Pods\r\n```\r\n\r\n`Pods-Phone-SampleCocoapodsIssueFramework.debug`\r\n```\r\nALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = NO\r\nFRAMEWORK_SEARCH_PATHS = $(inherited) \"${PODS_ROOT}\/Crashlytics\/iOS\" \"${PODS_ROOT}\/Fabric\/iOS\"\r\nGCC_PREPROCESSOR_DEFINITIONS = $(inherited) COCOAPODS=1\r\nHEADER_SEARCH_PATHS = $(inherited) \"${PODS_ROOT}\/Headers\/Public\" \"${PODS_ROOT}\/Headers\/Public\/AFNetworking\" \"${PODS_ROOT}\/Headers\/Public\/Crashlytics\" \"${PODS_ROOT}\/Headers\/Public\/Fabric\"\r\nOTHER_CFLAGS = $(inherited) -isystem \"${PODS_ROOT}\/Headers\/Public\" -isystem \"${PODS_ROOT}\/Headers\/Public\/AFNetworking\" -isystem \"${PODS_ROOT}\/Headers\/Public\/Crashlytics\" -isystem \"${PODS_ROOT}\/Headers\/Public\/Fabric\"\r\nOTHER_LDFLAGS = $(inherited) -ObjC -l\"c++\" -l\"z\" -framework \"Crashlytics\" -framework \"Fabric\" -framework \"Security\" -framework \"SystemConfiguration\" -framework \"UIKit\"\r\nPODS_BUILD_DIR = $BUILD_DIR\r\nPODS_CONFIGURATION_BUILD_DIR = $PODS_BUILD_DIR\/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)\r\nPODS_ROOT = ${SRCROOT}\/Pods\r\n```\r\n## What happened instead?\r\n\r\nAfter `pod install` with `1.2.1` I see:\r\n\r\n`Pods-Phone-App-SampleCocoapodsIssue.debug`\r\n```\r\nFRAMEWORK_SEARCH_PATHS = $(inherited) \"${PODS_ROOT}\/Crashlytics\/iOS\" \"${PODS_ROOT}\/Fabric\/iOS\"\r\nGCC_PREPROCESSOR_DEFINITIONS = $(inherited) COCOAPODS=1\r\nHEADER_SEARCH_PATHS = $(inherited) \"${PODS_ROOT}\/Headers\/Public\" \"${PODS_ROOT}\/Headers\/Public\/AFNetworking\" \"${PODS_ROOT}\/Headers\/Public\/Crashlytics\" \"${PODS_ROOT}\/Headers\/Public\/Fabric\"\r\nLIBRARY_SEARCH_PATHS = $(inherited) \"$PODS_CONFIGURATION_BUILD_DIR\/AFNetworking\"\r\nOTHER_CFLAGS = $(inherited) -isystem \"${PODS_ROOT}\/Headers\/Public\" -isystem \"${PODS_ROOT}\/Headers\/Public\/AFNetworking\" -isystem \"${PODS_ROOT}\/Headers\/Public\/Crashlytics\" -isystem \"${PODS_ROOT}\/Headers\/Public\/Fabric\"\r\nOTHER_LDFLAGS = $(inherited) -ObjC -l\"AFNetworking\" -l\"c++\" -l\"z\" -framework \"CoreGraphics\" -framework \"Crashlytics\" -framework \"Fabric\" -framework \"MobileCoreServices\" -framework \"Security\" -framework \"SystemConfiguration\" -framework \"UIKit\"\r\nPODS_BUILD_DIR = $BUILD_DIR\r\nPODS_CONFIGURATION_BUILD_DIR = $PODS_BUILD_DIR\/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)\r\nPODS_PODFILE_DIR_PATH = ${SRCROOT}\/.\r\nPODS_ROOT = ${SRCROOT}\/Pods\r\n```\r\n\r\n`Pods-Phone-SampleCocoapodsIssueFramework.debug`\r\n```\r\nFRAMEWORK_SEARCH_PATHS = $(inherited) \"${PODS_ROOT}\/Crashlytics\/iOS\" \"${PODS_ROOT}\/Fabric\/iOS\"\r\nGCC_PREPROCESSOR_DEFINITIONS = $(inherited) COCOAPODS=1\r\nHEADER_SEARCH_PATHS = $(inherited) \"${PODS_ROOT}\/Headers\/Public\" \"${PODS_ROOT}\/Headers\/Public\/AFNetworking\" \"${PODS_ROOT}\/Headers\/Public\/Crashlytics\" \"${PODS_ROOT}\/Headers\/Public\/Fabric\"\r\nOTHER_CFLAGS = $(inherited) -isystem \"${PODS_ROOT}\/Headers\/Public\" -isystem \"${PODS_ROOT}\/Headers\/Public\/AFNetworking\" -isystem \"${PODS_ROOT}\/Headers\/Public\/Crashlytics\" -isystem \"${PODS_ROOT}\/Headers\/Public\/Fabric\"\r\nOTHER_LDFLAGS = $(inherited) -ObjC -l\"c++\" -l\"z\" -framework \"Crashlytics\" -framework \"Fabric\" -framework \"Security\" -framework \"SystemConfiguration\" -framework \"UIKit\"\r\nPODS_BUILD_DIR = $BUILD_DIR\r\nPODS_CONFIGURATION_BUILD_DIR = $PODS_BUILD_DIR\/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)\r\nPODS_PODFILE_DIR_PATH = ${SRCROOT}\/.\r\nPODS_ROOT = ${SRCROOT}\/Pods\r\n```\r\n\r\nthe problem is that the App OTHER_LDFLAGS contains Fabric and Crashlytics. If I run the same pod file with `1.1.1` this doesn't happen.\r\n\r\n## CocoaPods Environment\r\n\r\n```\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.2.1\r\n        Ruby : ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-darwin16]\r\n    RubyGems : 2.6.11\r\n        Host : Mac OS X 10.12.5 (16F73)\r\n       Xcode : 8.3.3 (8E3004b)\r\n         Git : git version 2.11.0 (Apple Git-81)\r\nRuby lib dir : \/Users\/lucabartoletti\/.rvm\/rubies\/ruby-2.4.0\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 64e7a481da1576c895c65a4ae4e2de181be6faf7\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/lucabartoletti\/.rvm\/gems\/ruby-2.4.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-amimono     : 0.0.10\r\ncocoapods-deintegrate : 1.0.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.2.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nproject 'SampleCocoapodsIssue.xcodeproj'\r\n\r\n# Uncomment the next line to define a global platform for your project\r\nplatform :ios, '9.0'\r\n\r\n\r\n\r\n\r\nabstract_target 'Phone' do\r\n  target 'SampleCocoapodsIssueFramework' do\r\n    pod 'Fabric'\r\n    pod 'Crashlytics'\r\n  end\r\n  \r\n  abstract_target 'App'  do\r\n    target 'SampleCocoapodsIssue' do\r\n      # Uncomment the next line if you're using Swift or would like to use dynamic frameworks\r\n      # use_frameworks!\r\n      \r\n      pod 'AFNetworking'    \r\n    end\r\n  end\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nSample project:\r\nhttps:\/\/www.dropbox.com\/s\/accpjnjhb31ktwx\/SampleCocoapodsIssue.zip?dl=0\r\n","comments":["Also getting the same issue, with Cocoapods versions 1.2.1 and 1.3.0.beta.2.\r\nIn our case, we have specific pods causing us issues - Firebase, Fabric and AppsFlyerFramework - other pods are fine.\r\n\r\nThe issue is easily reproducible by:\r\n1. creating a project\r\n2. adding an embedded Cocoa Touch framework\r\n3. add any of these dependencies to the framework\r\n\r\nResult: Errors in output and at least with Firebase, results in a crash after a few seconds.\r\n\r\nHere's the [Podfile](https:\/\/gist.github.com\/yahmad\/f7702ab61ef4faa93415a94ea5415b39) from a quick reproduction.","The problem probably arises because the pods specified in the framework are also linked to your app that hosts the frameworks.\r\n\r\nYou may be able to remove the double linking via a `post_install` hook in the meantime.\r\n\r\nThis might require bigger changes to the codebase to re-wire correctly the dependencies.\r\n\r\nPRs welcome!","Is it possible to setup a `post_install` hook to remove all dependencies from a whole framework? \r\n\r\nI can find examples like the following - where you can remove specific source files - but hopefully you could just specify the specific pods\/frameworks you want to completely ignore?\r\n\r\n    post_install do |installer|\r\n        installer.pods_project.targets.each do |target|\r\n            if target.name == 'Pods-Earthlings'\r\n                source_files = target.source_build_phase.files\r\n                dummy = source_files.find do |file|\r\n                    file.file_ref.name == 'SomeDuplicate.m'\r\n                end\r\n                source_files.delete dummy\r\n            end\r\n        end\r\n    end","Hi, thanks @dnkoutso. Not sure if you are replying to me or to @yahmad. \r\n\r\nIn my case, as reproduced in the sample project above, with the same project and same Podfile I have the `Class XXX is implemented in both` problem with Cocoapods 1.2.1 but not if you use 1.1.1.\r\n\r\nSo my question is why 1.2.1 started linking those framework in the App while 1.1.1 is not doing so? It's an expected thing or is a bug\r\n\r\nTo say it in other words, It is still unclear to me if 1.2.1 is buggy and 1.1.1 is right or if 1.2.1 is doing the right thing and it exposed a problem in our project config","This issue is occurring for me in 1.3.1.\r\nLike @yahmad, the steps to reproduce are extremely simple. I have created a project with an app target and a Cocoa framework target, which is linked against my app target. In my Podfile, I have declared 'Fabric' a dependency of my framework target, which conspicuously uses a vendored framework. Here is my Podfile:\r\n\r\n```\r\nplatform :ios, '10.0'\r\nuse_frameworks!\r\n\r\ntarget 'MyKit' do\r\n    pod 'Fabric'\r\nend\r\n\r\ntarget 'DuplicateSymbols' do\r\nend\r\n```\r\n(MyKit is my framework target, and DuplicateSymbols is my app target)","This is generally confirmed. As I've explained its because the pods on a dynamic framework target are ALSO linked to the app target.\r\n\r\nIf I find time I will attempt a fix but in the meantime as I said in the previous response PRs welcome.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","This should stay open","Posting the workaround that I'm currently using in case it's helpful to anyone. It was previously [mentioned](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/6918#issuecomment-319447830) that you can use a `post_install` hook to remove the double linking, but I find it cleaner to do it in a `pre_install` hook. The issue occurs in the analyzer which runs before the `pre_install` hook. So you only have to change one thing if you make the change there. Using the example from https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/6918#issuecomment-325686872, add the following to your `Podfile`.\r\n\r\n```ruby\r\npre_install do |installer|\r\n  embedded_target = installer.aggregate_targets.find { |aggregate_target| aggregate_target.name == 'Pods-MyKit' }\r\n  host_target = installer.aggregate_targets.find { |aggregate_target| aggregate_target.name == 'Pods-DuplicateSymbols' }\r\n  host_target.pod_targets = host_target.pod_targets - embedded_target.pod_targets\r\nend\r\n```\r\n\r\nFrom what I can tell, this issue was first introduced in https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/6575 and first released as v1.2.1.\r\n\r\nPlease let me know if you notice any potential issues with my workaround.\r\n\r\nRelated issues:\r\n* https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/7126\r\n* https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/7155","I hoped that #7592 would also fix this, but in my tests it doesn't","I make a workaround to fix this issue. https:\/\/stackoverflow.com\/a\/52773670\/2446684"],"labels":["s2:confirmed","d2:moderate"]},{"title":"removing a target leaves broken .xcconfig and .framework file references","body":"# Report\r\n\r\n## What did you do?\r\n\r\n- delete a target for which there were previously configured pods in the Podfile\r\n- delete the target's block from the Podfile\r\n- run `pod install`\r\n\r\n## What did you expect to happen?\r\n\r\nAll CocoaPods setup for that target should be cleaned up from the Xcode project.\r\n\r\n## What happened instead?\r\n\r\n- two references to (now missing) `.xcconfig` files are left in the Pods group\r\n- a reference to a (now missing) `.framework` file is left in the Frameworks group\r\n\r\nHere, the ShareExt target was added to the project & Podfile and later removed:\r\n\r\n<img width=\"316\" alt=\"screen shot 2017-06-30 at 15 55 28\" src=\"https:\/\/user-images.githubusercontent.com\/28465\/27738807-c70d46a6-5dac-11e7-8d99-7bbc45a31480.png\">\r\n\r\nNote: if I first remove the target block from the Podfile and run `pod install` *before* removing the target from Xcode, the `.xcconfig` entries are correctly removed. The `Pods_ShareExt.framework` entry however is still left in the Xcode project:\r\n\r\n<img width=\"316\" alt=\"screen shot 2017-06-30 at 16 00 14\" src=\"https:\/\/user-images.githubusercontent.com\/28465\/27738942-402d4a4a-5dad-11e7-9d23-57cb7a362620.png\">\r\n\r\n\r\n\r\n## CocoaPods Environment\r\n\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.3.0.beta.2\r\n        Ruby : ruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin16]\r\n    RubyGems : 2.6.8\r\n        Host : Mac OS X 10.12.5 (16F73)\r\n       Xcode : 8.3.3 (8E3004b)\r\n         Git : git version 2.11.0 (Apple Git-81)\r\nRuby lib dir : \/Users\/kuba\/.rvm\/rubies\/ruby-2.3.3\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 8923943e4910f5a92169ede9332cef619cc195fe\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/kuba\/.rvm\/gems\/ruby-2.3.3\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.2.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\ntarget 'RemovingTargetTest' do\r\n  use_frameworks!\r\n  platform :osx, '10.12'\r\n\r\n  pod 'CocoaLumberjack'\r\nend\r\n```\r\n\r\n### Podfile _before the target was removed_\r\n\r\n```ruby\r\ntarget 'RemovingTargetTest' do\r\n  use_frameworks!\r\n  platform :osx, '10.12'\r\n\r\n  pod 'CocoaLumberjack'\r\nend\r\n\r\ntarget 'ShareExt' do\r\n    use_frameworks!\r\n    platform :osx, '10.12'\r\n\r\n    pod 'CocoaLumberjack'\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/www.dropbox.com\/s\/yi0znug6otnq8zc\/RemovingTargetTest.zip?dl=0\r\n\r\n(git history included)\r\n\r\nThe test project was done in Xcode 9 beta 2, but I've seen this happening earlier in Xcode 8 too.\r\n","comments":["Same thing happens when you have targets grouped under an abstract target (in which case CocoaPods adds a prefix to the file names) and then you remove the abstract targets and move the target definitions to the root. In that case, the prefixed versions of `.xcconfig` and `.framework` entries stay in the Xcode project, and unlike the above case, there is no workaround of deleting the target in the Xcode first (since the target isn't deleted at all):\r\n\r\n<img width=\"349\" alt=\"screen shot 2017-07-01 at 08 17 11\" src=\"https:\/\/user-images.githubusercontent.com\/28465\/27759665-19316c80-5e36-11e7-8d10-b6eeab92b7b7.png\">\r\n\r\n## Podfile (before)\r\n\r\n```ruby\r\nabstract_target 'Mac' do\r\n  target 'AbstractTargetTest' do\r\n    use_frameworks!\r\n    pod 'CocoaLumberjack'\r\n  end\r\nend\r\n```\r\n\r\n## Podfile (after)\r\n\r\n```ruby\r\ntarget 'AbstractTargetTest' do\r\n  use_frameworks!\r\n  pod 'CocoaLumberjack'\r\nend\r\n```","Does `bundle exec pod deintegrate` then `bundle exec pod install` remove them?","Yup, in both scenarios `pod deintegrate` removes all `.xconfig` and `.framework` entries and `pod install` recreates only the correct ones.","@dnkoutso I think this might be related to you removing the 0.34 migration or something similar to that?","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","This issue will be auto-closed because there hasn't been any activity for a few months. Feel free to [open a new one](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/new) if you still experience this problem :+1:\n","This is still an issue. @segiddins I don't think its related to that change. I can repro it.","@mackuba this is an old issue, I cannot reproduce at the moment anymore. Will try your sample project now.","repro'd and I only get the `.framework` file remaining, not the `xcconfig` files."],"labels":["t2:defect","d1:easy","s2:confirmed"]},{"title":"configuration not work for dependency","body":"CP 1.2.0 and CP 1.2.1, I have a Podfile: \r\n```\r\npod \"DebugTool\", :configuration=>\"Debug\"\r\n```\r\n\r\nAfter `pod install`, the Podfile.lock is \r\n```\r\n - DebugTool\r\n    - Aspects\r\n    - CocoaLumberjack\r\n    - FLEX\r\n    - LumberjackConsole\r\n    - MGBenchmark\r\n    - MMPlaceHolder\r\n    - NBUCore\r\n    - NBULog\r\n    - XLForm\r\n```\r\n\r\nAnd the `MGBenchmark` will not be used by other pods. So I hope the `MGBenchmark` will be not link under `Release` configuration.\r\n\r\nBut I found the release.xcconfig:\r\n```\r\nOTHER_LDFLAGS = $(inherited) -ObjC -l\"Aspects\" -l\"CocoaLumberjack\"  -l\"FLEX\" -l\"LumberjackConsole\" -l\"MGBenchmark\" -l\"MMPlaceHolder\"  -l\"NBUCore\" -l\"NBULog\" -l\"XLForm\"\r\n```\r\nThe `DebugTool`'s dependencies all be link besides the `DebugTool`. I think it is not correct.","comments":["We have the same issue.","We also have the same issue!  It's unreasonable.","@Whirlwind can you provide a quick sample project demonstrating this? ","Nevermind I was able to reproduce using another case.","Workaround is to explicitly define dependency tree as `:configuration => ['Debug']` which sucks but it does the trick.\r\n\r\nUntil we get a better solution.","Do we have a nice solution about it? I hard to explicitly define all dependencies in my Podfile.","The Podfile is code, you could write a function that does that for you","The dependencies is required by other pods, and I could not list them in a Podfile.","That's fine, CocoaPods can handle the de-duping between the Podfile definition and the Podspec dependencies. So long as it's only defined once in the Podfile.","The PR was closed for this issue so I am punting from 1.8.","Any updates here?"],"labels":["t2:defect","s2:confirmed","d2:moderate","s7:workaround available"]},{"title":"Share Pods between configurations","body":"Firstly many many apologies if there is already an issue in this regard. \r\n\r\nI wish to know if it's possible to setup Pods to share `Pod.xcconfig` across multiple target configurations as follows:\r\n\r\n<img width=\"564\" alt=\"screen shot 2017-06-07 at 12 21 54\" src=\"https:\/\/user-images.githubusercontent.com\/274318\/26875940-ee8072aa-4b7b-11e7-810d-505a992a287d.png\">\r\n\r\nI was able to find a StackOverflow question:\r\nhttps:\/\/stackoverflow.com\/questions\/39147855\/how-to-stop-cocoapods-from-creating-xcconfig-file-for-each-configuration#comment75778711_39147855\r\n\r\nI have a few reasons for wanting to do so. The most important reason being due to using a static library within a subproject of my workspace in which only has one configuration & I do not wish to manage multiple configurations verbatim to my main target. As outlined here: \r\nhttps:\/\/stackoverflow.com\/questions\/13808853\/why-is-a-static-librarys-header-file-not-found-for-archiving","comments":[],"labels":["t1:enhancement","d2:moderate"]},{"title":"Provide a Way to lint for ARM architectures","body":"* [x] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI tried to lint my spec which depends on third-party binaries I cannot rebuild on my own:\r\n\r\n    pod spec lint --verbose --fail-fast\r\n\r\n## What did you expect to happen?\r\n\r\nCocoaPods should try to build an example app for every single subspec and fail for any binary that does not support bitcode (as the spec does not disable bitcode by default).\r\n\r\n## What happened instead?\r\n\r\n* If a library supports bitcode: I didn't get any errors for the subspec. \u2705\r\n* For some of the other libraries, I got errors and disabled bitcode only in their subspecs. \u2705 \r\n* For some other libraries (e.g. [Smaato 8.0.9](https:\/\/downloads.smaato.com\/ios\/SOMA-iOS-SDK-8.0.9.zip)): It didn't. \u26d4\ufe0f\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.2.1\r\n        Ruby : ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-darwin16]\r\n    RubyGems : 2.6.11\r\n        Host : Mac OS X 10.12.4 (16E195)\r\n       Xcode : 8.3.2 (8E2002)\r\n         Git : git version 2.11.0 (Apple Git-81)\r\nRuby lib dir : \/Users\/herzi\/.brew\/Cellar\/ruby\/2.4.1_1\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 182cdd99b5255548e8abbc503ebd453e35f15168\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/herzi\/.brew\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.2.0\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nI figured that Xcode builds fine for the simulator but fails to build release versions for the real target devices. Could you add a switch to the pod cli-tool to run lint against with arm64\/arm7 architectures.","comments":["Agree, that does make sense - want to try take a look at it?","Sure. I have \u2013 however \u2013 not been involved with the development of cocoa pods itself, I might need some assistance on the way through.","@herzi start by looking into `validator.rb` (https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/lib\/cocoapods\/validator.rb)"],"labels":["t1:enhancement","d2:moderate"]},{"title":"Pod lib lint doesn't validate tvOS target","body":"\ud83c\udf08\r\n\r\n* [x] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nWith an incorrect podspec configuration for tvOS (eg - [missing files](https:\/\/github.com\/Quick\/Nimble\/commit\/e3c1a78af33b3fa778207fcc6ba33221838c0788) in target).\r\n\r\n```bash\r\npod lib lint Nimble.podspec\r\n# ...tag repo + push tag...\r\npod trunk push Nimble.podspec\r\n```\r\n\r\n## What did you expect to happen?\r\n\r\nI expected `pod lib lint` to fail instead of only finding it out on `pod trunk push`.\r\n\r\n## What happened instead?\r\n\r\n`pod lib lint` passes but than `pod trunk push` fails validation because it can't compile tvOS. Alternatively if there's another command I should be running in CI to validate a podspec across multiple targets. One usually doesn't like to find out if the podspec is valid half-way through cutting a release \ud83d\ude05.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.2.1.beta.1\r\n        Ruby : ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-darwin16]\r\n    RubyGems : 2.6.8\r\n        Host : Mac OS X 10.12.4 (16E195)\r\n       Xcode : 8.3 (8E162)\r\n         Git : git version 2.11.0 (Apple Git-81)\r\nRuby lib dir : \/usr\/local\/var\/rbenv\/versions\/2.4.0\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 60f90f7c52833d380e182bc80989d90329eb8505\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/var\/rbenv\/versions\/2.4.0\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.1.2\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nN\/A","comments":["@jeffh thanks for the report! This sounds like a bug. I can't guarantee a timeline for when this will be fixed, but I've tagged the issue appropriately. Since you have a working repro case, we'd certainly appreciate a PR or further investigation with details posted here if you can spare the time! Thanks again!","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","We took a look and `pod lib lint` doesn't catch the error because it builds in place and can find the header file that happens to be in the same directory as the CwlMachBadInstructionHandler.m file that fails to build in `pod spec lint`. `pod spec lint` builds the sources from a clean temp directory so it catches the missing header problem.\r\n\r\nIn short, it is better to run `pod spec lint` instead of `pod lib lint` before `pod trunk push`.\r\n\r\n","@paulb777 interesting...perhaps we should have the validator clean stuff for each platform.","@dnkoutso Yeah, building in a clean directory would make `pod lib lint` more consistent with `pod spec lint`"],"labels":["t2:defect","d1:easy","s3:detailed"]},{"title":"pod update does not pick the latest pre-release pod","body":"* [x] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nWe have internal pod repo, with some pods that have pre-release version, e.g. `1.1.0-beta.1` for `XYZ` pod.\r\n\r\nPodfile for my project looks like:\r\n```\r\n ...\r\n pod 'XYZ'\r\n ...\r\n```\r\n\r\nRun `pod update` does not install the latest version of the pod that have pre-release version\r\n\r\n## What did you expect to happen?\r\n\r\nUpdate \"XYZ\" pod to version 1.1.0-beta.1 (using above example)\r\n\r\n## What happened instead?\r\n\r\nPod that has pre-release version is not updated. If XYZ-1.1.0-beta.1 is already installed, it is downgraded to the latest version without the pre-release label.\r\n\r\nQ: is this the expected behavior? Is there an option to pick the latest pre-release version of the pod?\r\n","comments":["Hi @minwoolee! Thanks for bringing this up! I believe to get this behavior, you'll need to do something like:\r\n\r\n`pod 'XYZ', '1.1.0-beta.1'`\r\n\r\nThis will ensure that `pod update` doesn't change your pod's version, since by default I believe it skips pre-release versions.","@benasher44 thanks. Do you know if there is a way to override that behavior, and alway update to the latest version including the pre-release version?","Pretty sure it works only on non-pre-release versions. \r\n\r\nIf it doesn't support resolving upwards when you've already declared a prerelease, e.g. `pod \"thing\", \"~> 0.1.1a\"` updating to `0.1.1b` then I'd be up for a accepting a PR supporting resolving upwards.","I'd also be happy to review a PR that supports some kind of `--pre` flag similar to that in bundler!","Hey everyone,\r\n\r\nSince this is still open, I just wanted to ask if is this still the case or did it change now?\r\n\r\nNamely: If one does _not_ specify a version in the podfile, will it or will it not update to beta versions?"],"labels":["t1:enhancement","d2:moderate"]},{"title":"Missing header file with use_frameworks! ","body":"# Report\r\n\r\n## What did you do?\r\n\r\nI created a new podspec file which contains some dependencies. \r\n\r\n```\r\nPod::Spec.new do |s|\r\n  s.name             = \"ChatSDK\"\r\n  s.version          = \"4.2.5\"\r\n  s.summary          = \"Chat SDK - Mobile messaging framework for iOS\"\r\n  s.homepage         = \"http:\/\/chatsdk.co\"\r\n  s.license          = 'MIT'\r\n  s.author           = { \"Ben Smiley\" => \"ben@chatsdk.co\" }\r\n  s.source           = { :git => \"https:\/\/github.com\/chat-sdk\/chat-sdk-ios.git\", :tag => s.version.to_s }\r\n\r\n  s.platform     = :ios, '7.0'\r\n  s.requires_arc = true\r\n  \r\n  s.subspec 'Core' do |core|\r\n\r\n    core.source_files = ['Core\/**\/*']\r\n\r\n    core.dependency 'Firebase\/Core'\r\n    core.dependency 'Firebase\/Database'\r\n    core.dependency 'Firebase\/Storage'\r\n    core.dependency 'Firebase\/Auth'\r\n  end\r\nend\r\n```\r\n\r\nI created a new Xcode project with Xcode 8.2 and added a podfile.\r\n\r\n```\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\n\r\nuse_frameworks!\r\n\r\ntarget 'PodTest' do\r\n  \r\n  pod \"ChatSDK\/Core\", :path => \"..\/\"\r\n\t\r\nend\r\n```\r\n\r\nI ran `pod install` using Cocoapods 1.2.0.  \r\n\r\n## What did you expect to happen?\r\n\r\nI expected the pods to install correctly and for the project to compile. \r\n\r\n## What happened instead?\r\n\r\nThere is an error message `FirebaseAnalytics\/FirebaseAnalytics.h file not found`. This prevents the project from compiling. However, it works if I remove the `use_frameworks!` flag or if I add the Firebase dependencies directly to the Podfile. \r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.2.0\r\n        Ruby : ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\r\n    RubyGems : 2.0.14.1\r\n        Host : Mac OS X 10.12.2 (16C67)\r\n       Xcode : 8.2 (8C38)\r\n         Git : git version 2.10.1\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.0\/usr\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ dee0949e9974fff9df1e6dcacec3b0f1675165df\r\n               master_old - https:\/\/github.com\/CocoaPods\/Specs.git @ 55393b63a3da4576423ef07b8d1f6f244594638d\r\n               private - https:\/\/bensmiley@bitbucket.org\/bensmiley\/pods.git @ 4f14e0b26b6c6e249d49c8fa37d0eba40dde3d99\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.1.2\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\r\n\r\nuse_frameworks!\r\n\r\ntarget 'PodTest' do\r\n  \r\n  pod \"ChatSDK\/Core\", :path => \"..\/\"\r\n\t\t\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/www.dropbox.com\/s\/49xvnx3341k64hi\/PodTest.zip?dl=0","comments":["What I've found is that in this situation, the dependent frameworks aren't linked against the ChatSDK framework. This means that any code inside the ChatSDK framework can't access the Firebase libraries. \r\n\r\nThere is a workaround which involves adding the frameworks and linker flags manually: \r\n\r\n```\r\n    core.pod_target_xcconfig = { \r\n        \"OTHER_LDFLAGS\" => '$(inherited) -framework \"FirebaseDatabase\" -framework \"FirebaseCore\" -framework \"FirebaseAuth\" -framework \"FirebaseStorage\" -framework \"FirebaseInstanceID\" -framework \"FirebaseAnalytics\" -framework \"FirebaseDatabase\"', \r\n        \"CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES\" => 'YES',\r\n        \"FRAMEWORK_SEARCH_PATHS\" => '$(inherited) \"${PODS_ROOT}\/FirebaseAuth\/Frameworks\" \"${PODS_ROOT}\/FirebaseCore\/Frameworks\" \"${PODS_ROOT}\/FirebaseDatabase\/Frameworks\" \"${PODS_ROOT}\/FirebaseInstanceID\/Frameworks\" \"${PODS_ROOT}\/FirebaseStorage\/Frameworks\" \"${PODS_ROOT}\/FirebaseAnalytics\/Frameworks\"' \r\n\t}\r\n```\r\n\r\nThis isn't ideal because it means the frameworks are linked to the project twice which causes warnings in Xcode when the project runs. ","Hi @bensmiley! Is PodTest a framework\/library-type target?","No, it's a standard app target - to build the project to run on a device.","Definitely confirmed. Need to see what exactly is wrong here.","So this is a bit difficult but I think CocoaPods should do the right thing. \r\n\r\nBasically your dynamic framework target \"ChatSDK\" should be the only one responsible for linking and having the framework search paths for the Firebase vendored static framework libraries. This means the app should not include the framework search paths or the linker flags for the Firebase stuff otherwise you end up with duplicate symbols when you launch the app.\r\n\r\n@bensmiley this will be a bit more complicated to solve but I will try to get it in for 1.2.1 as its a great fix around vendored static frameworks and vendored static libraries.","@dnkoutso That sounds great. In the meantime adding the xcconfig settings does allow the project to compile. The only issue we are seeing is that it creates two separate instances of the Firebase libraries. That means that there can be some problems with singletons because if you use a Firebase singleton from the main project, it will be a different instance than if you used one from the pod's code. ","We've also noticed other issues around the use_frameworks! functionality. We have a modular project and we would like to be able to do the following:\r\n\r\nHave multiple podspecs each with subpods. For example:\r\n\r\n```\r\nChatSDK\r\n   - Core\r\n   - UI\r\n        - dependency 'ChatSDK\/Core'\r\n        - dependency 'Firebase'\r\n   - Other subspecs\r\n\r\nChatSDKModules\r\n    - Module 1\r\n        - dependency 'ChatSDK\/UI'\r\n    - Module 2\r\n```\r\n\r\nWe have noticed that with the use frameworks flag, this kind of structure creates a lot of issues. Firstly, when importing modules with Swift, we were getting errors saying \"Cannot build module...\" so we've stopped using subspecs. We've also noticed that dependencies between modules don't work very well so Module 1 isn't able to access the Firebase libraries. \r\n\r\nI'm not an expert in the Xcode build process but in using Cocoapods it feels like the above requirements should just work. I can understand that it may be complicated to implement but it would be useful if there were a document which detailed the limitations of Cocoapods so that we could plan the structure of our project accordingly. \r\n","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Struggling with the same problems as @bensmiley. Having tons of dependancy issues since I switched to use_frameworks! with modular project.","Upgrade cocoapods to 1.3.0\r\nsudo gem uninstall cocoapods\r\nsudo gem install cocoapods --pre","@suniljaiswal2014  I am using cocoapods to 1.3.1, issue does exists.","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","This issue will be auto-closed because there hasn't been any activity for a few months. Feel free to [open a new one](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/new) if you still experience this problem :+1:\n","Keep","This problem still exists in Cocoapods 1.5.0"],"labels":["t2:defect","s2:confirmed","d2:moderate"]},{"title":"Disable cocoapods-stats and remove any\/all data that is currently stored","body":"* [\u2022] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\nI installed `cocoapods`\r\n\r\n## What did you expect to happen?\r\nI expected to be able to manage dependencies for my code.\r\n\r\n## What happened instead?\r\nI was able to manage dependencies for my code.\r\n\r\nBut wait, there's more! Y'all started tracking information about what code I\/everyone else use\/s under the guise of analytics data for package maintainers.\r\n\r\nThis was annoying in the past, and people could disable it on a per-project or per-machine basis. Given, recent current events, this tracking has become more disturbing, and one-off exceptions aren't quite good enough anymore.\r\n\r\nI understand that you spent a lot of time working on code to collect and analyze all of this data, or that seeing numbers helps excite people and convince them to continue to use cocoapods, and as a result, you may be reluctant to give this information up.\r\n\r\nPlease do so anyway.\r\n\r\nHaving no data is significantly more secure than having data that you claim to anonymize, but still store in unaggregated form for up to 24 hours.\r\n\r\n```\r\n## CocoaPods Environment\r\nz% pod --version\r\n1.1.1\r\nz% ruby --version\r\nruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin16]\r\nz% gem list\r\n\r\n*** LOCAL GEMS ***\r\n\r\n...\r\ncocoapods (1.1.1)\r\ncocoapods-core (1.1.1)\r\ncocoapods-deintegrate (1.0.1)\r\ncocoapods-downloader (1.1.2)\r\ncocoapods-plugins (1.0.0)\r\ncocoapods-search (1.0.0)\r\ncocoapods-stats (1.0.0)\r\ncocoapods-trunk (1.1.1)\r\ncocoapods-try (1.1.0)\r\n...\r\n```\r\n","comments":["Thanks for the issue, personally, I'm not convinced that we should shut down the stats. \r\n\r\nThey _are_ anonymized, you can read the source code for the gem and the server, and changes to de-anonymize it would require client changes which would be extremely visible to everyone involved. \r\n\r\nThe data sent is minimal, and useless for anything other than measuring types of targets used, we need nothing on individuals, and don't keep anything else.","I'm glad you trust that anonymized data will always stay anonymous, but that doesn't tend to hold up when a significant amount of resources are thrown at a data set.\r\n\r\nI'm also glad you believe everyone can trust that the code the server is running is the same as the code that's on GitHub without modification, but, I don't necessarily know how that can be proved. (This could be as innocent as changing the path of a log and accidentally putting it into a public folder, or as malicious as a backdoor that you don't know about.)\r\n\r\nAnd finally, I'm glad that you can't come up with any other uses for this data, but, i'm pretty sure that being able to target specific individuals, projects, or dependencies is still a concern nonetheless.","Given we run services that link emails and IP addresses, we already posses the capability to link pods used to individuals. It's not a theoretical capability -- it's one any of us could exploit within a matter of minutes.","While you or I may be OK with sharing that data, its not a choice we should make for others.","What if we let people make the choice on first `pod` invocation after upgrading to, or installing, the version where we tweak this? We could even link to a page about how this data is used, stored, and our ability to access it. The message would also inform folks about the commands to globally enable and disable stats. I think this would be a good combination of allowing people to choose and being upfront about what's going on.\r\n\r\nHere's an example of what this might look like after someone say runs `gem upgrade cocoapods` and then tries running `pod install` after the update.\r\n\r\n```\r\n~\/Code\/Ruby\/CocoaPods [master] $\r\n\r\nWelcome to CocoaPods!\r\n\r\nCocoaPods collects data on its usage because <reasons x, y, and z>. Checkout more information on how we use this data here: <url>.\r\n\r\nSharing these stats with us would really help us out!\r\n\r\nIf you don't feel comfortable enabling this now, no worries! Run `pod stats enable` to enable this at a later time, and you can run `pod stats disable` to disable stats too.\r\n\r\nEnable sharing stats? (y\/n)\r\n```\r\n\r\nIf the person responds with anything other than affirmative, stats are left disabled. The wording should be deliberated on, but I think you get the idea? This may not solve everything, but I think this is a start.","@benasher44 How would `pod stats enable\/disable` record this? For my team's use, we'd like this to be stored in our repository, so either in the Podfile or Podfile.lock.\r\n\r\nEDIT: Fastlane provides an `opt_out_usage` command that can be placed in the `Fastfile` to achieve this.","I imagine it'd store it in Podfile.lock and in ~\/.cocoapods. This way, there'd be a global setting, and the Podfile.lock can disable per project (i.e. Podfile.lock takes precedency if answer is disable). Maybe you pass a path to the Podfile to disable for the project? The command\/API design should be deliberated on more as well.","As for verifying the code you're getting is actually what we published, I think we could start signing CocoaPods and its associated gems (Xcodeproj, Core, etc.). Rubygems already has support for [signed gems](http:\/\/guides.rubygems.org\/security\/). I even found instructions on [how to manually verify gem signatures](http:\/\/docs.seattlerb.org\/rubygems\/Gem\/Security.html#module-Gem::Security-label-Manually+verifying+signatures).\r\n\r\nI think the final concern that was raised and should be addressed is existing logged stats. I need some more info here before I can propose solutions, so I'll be trying to learn as much as I can over the next week or so. But initially, I think we should be working on a doc (if one doesn't exist) that explains CocoaPods stats usage. From there, we might be able to advise on how to verify that information locally (i.e. this is how you can verify exactly what gets sent up). I think we should go further than that, but I don't have enough info to be sure right now.","If you want to put something in your podfile, `ENV['COCOAPODS_DISABLE_STATS'] = 'true'` will do it","> What if we let people make the choice on first `pod` invocation\u2026\r\n\r\nClearly knowing that stats are being collected, where data is going, and why all the data is needed are all incredibly important things that I believe your suggestions address.\r\n\r\nThat is to say, everything in this post sounds wonderful and absolutely respectful of the people who are using CocoaPods. It would absolutely go a long way to address many of my concerns.\r\n\r\nThe current system\u200a\u2014\u200awhere _maybe_ people notice the \"Sending Pod Stats\" message amid the rest of the messages that are emitted from `pod install`, and where _maybe_ people can find the right keywords to search for online to bring up the one blog post (instead of the plugin itself, written in a language that you may not be familiar with), and where _maybe_ people know that `--verbose` exists and maybe guess that it enables non-core plugin logging\u200a\u2014\u200ais not that great.\r\n\r\nAsking people to opt-in shows an amazing amount of trust in your users that is currently lacking: you say what you're doing and ask them to trust you, and hope that they say yes.\r\n\r\nI really do appreciate you suggesting and considering this course of action. (Conversely, opting people in, and not giving them a choice shows the opposite: that you don't trust people to help you out and believe that your end goals are more important than that of anyone else.)\r\n\r\n> As for verifying the code you're getting is actually what we published\u2026\r\n\r\nThis would also be phenomenal. `https` is great, but, depending on how the machine is provisioned by IT staff at offices, still potentially MITM-able.","I understand that it may seem like I'm armchair-quarterbacking this whole thing by not being terribly involved in the project and then coming in and filing a big ask. That definitely isn't my intention, and I am super grateful that y'all are having this conversation with me. Thank you!","I've been giving this a lot more thought and discussing this with others. There is a lot more to consider, which I wasn't careful in considering when I made my initial proposals.\r\n\r\n#### Considerations\r\n\r\n1. Moving to opt-in would make stats not useful and therefore not worth the maintenance and sponsorship (sponsored DBs and compute time).\r\n1. Any changes we want to consider should be done knowing that CocoaPods is maintained by folks that don't work on it full time, and therefore this work does not have a definitive timeframe.\r\n\r\n#### Near Term Improvements\r\n\r\nGiven those considerations, I think there are still a couple of changes that could be made in a reasonable timeframe.\r\n\r\n1. We can start signing released CocoaPods gems. This will assure folks that what we're releasing is the same code you can inspect on GitHub.\r\n1. Show a message about stats collection to ensure users are informed on first `pod` invocation that includes links and a clear method for opting out (could re-show it on each update).\r\n\r\n#### Medium Term Improvements\r\n\r\n1. The concern raised by @segiddins about linking individuals to pods used applies solely to pod authors afaik. This isn't most CocoaPods users, but the concern should be addressed. We store the IP address for the trunk sessions to give pod authors a way to logout their other trunk sessions identified by IP address. We could have people name their trunk sessions instead, upon logging in.\r\n\r\nI think these couple of small improvements on their own seem like a good faith effort to improve transparency around CocoaPods stats.\r\n\r\n@zadr I would like to know more detail about your concerns surrounding the stats data that's stored for 24 hours though, so that we can attempt to address them. Thanks!","> Moving to opt-in would make stats not useful\u2026\r\n\r\nI still don't buy this argument (you're describing a behavior and an assumption without an explanation) but won't push it anymore.\r\n\r\n> Show a message about stats collection to ensure users are informed on first pod invocation\u2026\r\n\r\nDoes this mean that everyone is opted into stats at least once? Or will the invocation give people a chance to cancel their `pod` command or to opt out right away?\r\n\r\n> The concern raised by @segiddins about linking individuals to pods used applies solely to pod authors afaik\u2026\r\n\r\nEvery stats request sent by `pod` goes over the internet, which means you receive an IP address with the stats data. I'm unclear how this isn't [ed: the same]\r\n\r\n> \u2026concerns surrounding the stats data that's stored for 24 hours\u2026\r\n\r\nit's 24 hours where data is stored on a per-user basis in potentially de-anonymizable form on a server? maintained by\u2026 people? a person?\r\n\r\n@benasher44 The changes and investigations you're describing definitely do feel like a good faith effort, and I do appreciate you coming up with small discrete steps that can be accomplished to help address privacy and security concerns.","Making stats opt-in would greatly diminish the value of any conclusions you could draw by looking at aggregate stats, which is the whole point of collecting aggregate stats. Is that clearer?\r\n\r\nShowing the message wouldn't do anything on its own, but we would do something to give you a chance to opt-out before sending stats the first time (i.e. maybe exiting before actually running the desired command, and then making you run the command again assuming you would have opted out if you wanted to by that point). The exact details would be discussed in PR, since there are a few other things you *could* do (another option for example: `sleep` for a period of time after seeing the message the first time to give you a chance to bail out, but I think there are better options).\r\n\r\nFor the \"linking individuals to pods\" concern, I agree that you can use an IP address in HTTP request logs to separate and group HTTP traffic from others (and therefore user behavior within that service). However, linking that traffic to a specific person requires identifying information. From what I can tell, this can only currently be done for pod authors because of what I mentioned earlier regarding trunk sessions.\r\n\r\nFor the 24hr data issue, we again lack the necessary data to link that to a specific person (similar to the HTTP request log issue earlier).","> Making stats opt-in would greatly diminish the value of any conclusions you could draw by looking at aggregate stats, which is the whole point of collecting aggregate stats. Is that clearer?\r\n\r\nNot really. To rephrase what I was saying into the form of a question: Why do you\/others believe that the value of stats will diminish if they become opt-in?\r\n\r\n> However, linking that traffic to a specific person requires identifying information. From what I can tell, this can only currently be done for pod authors because of what I mentioned earlier regarding trunk sessions.\r\n\r\nI'm confused by this argument. An IP address is largely an identifiable piece of information for many people. How is stats data stored in unaggregated form not a link to people?\r\n\r\nAnyway, look, I'm not a privacy or security expert. I filed this issue because I had privacy concerns. I really appreciate you taking the time to talk with me about this. I really do. But, I'm getting the feeling that you (and other core contributors) are on the same boat as me, and that none of us are experts in this area.\r\n\r\nCocoapods is a big enough project that if someone were to put a call out for an expert to help consult on this, there might be someone out there who would bite and help out, so, would that be a thing that could be looked into?","The value in the data comes from the stats representing a distinguishable set of users (in this case): most, if not all, users of CocoaPods. It's reasonable to expect that people wouldn't take the time to opt-in or simply won't know to do it. With minimal people providing data, there's minimal data. With minimal data, there's little to glean about the data in aggregate, since that aggregate data isn't representative of anything meaningful: the subset of users opting in.\r\n\r\nFor the IP address issue, even if we can come to an agreement on what IP address means, I'm not even sure there's all that much CocoaPods can do in the large scheme of things. If I haven't said this already, we don't explicitly collect IP address for stats. The stats service is run on heroku, which has logging like *most web servers*. If you don't want your IP address collected on the internet, there are well-documented [ways of doing this](https:\/\/www.iplocation.net\/hide-ip-address) (link from quick google search). If you use CocoaPods, it will fetch sources for you from many locations, all of which depend on the pods you're installing. All of these places likely record your IP address, and there's really no way to get around this without not using CocoaPods. Some examples of this include GitHub.com because that's where the main specs repo is, Google (if you use Google pods, since many of them fetch sources directly from the Google website), Ooyala (if you use Ooyala pods, since they maintain their own public specs repo), and the list goes on.\r\n\r\nAs for advice from an expert, CocoaPods is open source and we're always open to contributions from those willing to help out. This especially includes those that can provide more diverse expertise.","Thanks again to everyone that provided support and insight related to this issue! I'm going to lock this for now, since this feels well-explored, and there are now action items. Again, we'd really appreciate any contributions people are willing to make here in the form of PR that work towards the goals we've discussed.\r\n\r\nPlease feel free to open a new issue if you come to this CP issue and feel there are new concerns that have not been addressed, and we'd be happy to try to address them. Have a great day!"],"labels":["t3:discussion"]},{"title":"`PODS_TARGET_SRCROOT` does not work in `user_target_xcconfig`.","body":"Was it a deliberate decision to only make this work in `pod_target_xcconfig`?\r\n\r\nCurrently, when trying to use it in `user_target_xcconfig`, the variable is probably blank and e.g. `$(PODS_TARGET_SRCROOT)\/ReactCommon` expands to `\/ReactCommon`.","comments":["This is re the code introduced in #6037.","I don't think its possible to do that, as _each_ pod will have their own value of `PODS_TARGET_SRCROOT`","Yeah good point, I was thinking about expanding the paths during `pod install`, but it\u2019s definitely not how it would normally work indeed.","An option would be to add `PODS_TARGET_SRCROOT_#{POD_NAME}`, but that's adding a lot of build settings","Would it really matter? I guess it slows down header lookup slightly, but I doubt by much. Alternatively it could be emitted only when any `user_target_xcconfig` setting refers to `PODS_TARGET_SRCROOT_#{POD_NAME}` ?","Will see what I can do."],"labels":["t1:enhancement","s2:confirmed","d2:moderate"]},{"title":"Podspec containing internal fat framework via vendored_frameworks is not finding the current compiled architecture (on example project)","body":"# Report\r\n\r\n## What did you do?\r\n\r\nI'm trying to wrap a dynamic _\"fat\"_ framework inside a pod and exposing an interface to internally use that framework, but not exposing it.\r\n\r\nI've included the project of that framework on the following folder: `SampleDynamicLib\/` and copied the generated `SampleDynamicLib.framework` to the Pod's Frameworks folder:\r\n`BundledCocoapodDynamicFrameworkError\/Frameworks\/`\r\nReferenced on `podspec` via:\r\n`s.vendored_frameworks = 'BundledCocoapodDynamicFrameworkError\/Frameworks\/SampleDynamicLib.framework'`\r\n\r\n(using a simple symlink was making cocoapods to not properly integrating the framework, so I copied the generated _framework_ instead).\r\n\r\nThe pod example project is located on the `Example` dir.\r\nI've run: `bundle && bundle exec pod install` on the example project folder to install the development pod.\r\n\r\n## What did you expect to happen?\r\n\r\nI was hoping to integrate a closed source dynamic _\"fat\"_ framework inside a pod to avoid embedding the framework directly in the project.\r\n\r\n## What happened instead?\r\n\r\nI cannot build my app since when I try to use the pod the app target always triggers an error claiming that the internal framework (active architecture slice) cannot be found:\r\n\r\n`ld: framework not found SampleDynamicLib for architecture x86_64`\r\nor when compiling to the device:\r\n`ld: framework not found SampleDynamicLib for architecture arm64`\r\n\r\nThe weird thing is: this is a fat framework and ALL the architecture slices are inside the framework binary, check via `file` command:\r\n\r\n`$ file BundledCocoapodDynamicFrameworkError\/Frameworks\/SampleDynamicLib.framework\/SampleDynamicLib`\r\n\r\n```\r\nBundledCocoapodDynamicFrameworkError\/Frameworks\/SampleDynamicLib.framework\/SampleDynamicLib: Mach-O universal binary with 4 architectures: [i386: Mach-O dynamically linked shared library i386] [x86_64: Mach-O 64-bit dynamically linked shared library x86_64] [arm_v7: Mach-O dynamically linked shared library arm_v7] [arm64: Mach-O 64-bit dynamically linked shared library arm64]\r\nBundledCocoapodDynamicFrameworkError\/Frameworks\/SampleDynamicLib.framework\/SampleDynamicLib (for architecture i386):\tMach-O dynamically linked shared library i386\r\nBundledCocoapodDynamicFrameworkError\/Frameworks\/SampleDynamicLib.framework\/SampleDynamicLib (for architecture x86_64):\tMach-O 64-bit dynamically linked shared library x86_64\r\nBundledCocoapodDynamicFrameworkError\/Frameworks\/SampleDynamicLib.framework\/SampleDynamicLib (for architecture armv7):\tMach-O dynamically linked shared library arm_v7\r\nBundledCocoapodDynamicFrameworkError\/Frameworks\/SampleDynamicLib.framework\/SampleDynamicLib (for architecture arm64):\tMach-O 64-bit dynamically linked shared library arm64\r\n```\r\n\r\nThis is the second fat framework that I'm trying to integrate, in 2 different projects and this error always pops.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.2.0.rc.1\r\n        Ruby : ruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin16]\r\n    RubyGems : 2.5.2\r\n        Host : Mac OS X 10.12.2 (16C67)\r\n       Xcode : 8.2.1 (8C1002)\r\n         Git : git version 2.11.0\r\nRuby lib dir : \/Users\/ricardo.santos\/.rbenv\/versions\/2.3.3\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ fd00cc25c25fbd7b8994db04fb398018d18db4dd\r\n               swiftyjson - https:\/\/github.com\/SwiftyJSON\/SwiftyJSON.git @ adf34cfb4c9f2ff4e3c420c6d9fb1e2eaf3b3791\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/Users\/ricardo.santos\/.rbenv\/versions\/2.3.3\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.1.2\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\nuse_frameworks!\r\n\r\ntarget 'BundledCocoapodDynamicFrameworkError_Example' do\r\n  pod 'BundledCocoapodDynamicFrameworkError', :path => '..\/'\r\n\r\n  target 'BundledCocoapodDynamicFrameworkError_Tests' do\r\n    inherit! :search_paths\r\n\r\n    pod 'Quick', '~> 1.0.0'\r\n    pod 'Nimble', '~> 5.1.1'\r\n  end\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nThis is the example of the pod that wraps a fat `.framework` here: https:\/\/github.com\/crsantos\/BundledCocoapodDynamicFrameworkError\r\n\r\nIf you have any more doubts, please shout.","comments":["We are seeing the same issue with Google Analytics using `1.2.0` but not with `1.2.0.rc1` any thoughts on this would be great.","I believe this is confirmed. Seems like the `-framework \"SampleDynamicLib\"` is not added. Perhaps because its a local development pod will keep digging.","@crsantos the way to work around is by splitting your podspec into two, one for your lib with the sources and another one with just the vendored framework. I did it locally and it worked. I understand this is not ideal but we are discussing whether this has to change in CocoaPods.","Do you mean separate specs or just a Core spec for my wrapper lib and a subspec for the vendored framework?\r\n\r\nOne note: I don't have the source of the vendored framework","Not sure if the subspec would work but worth a shot. Splitting into two different podspecs should work.","I will try it and come back to you to confirm, but I guess that solution is perfectly viable \ud83d\udc4d \r\nMuch better than embedding the framework directly on `.pbxproj` \ud83d\ude04 \r\n","@dnkoutso We are seeing the same issue with simply using Google Analytics as a vendor dependency, it is working fine in a `1.2.0.rc1` but the `1.2.0` release something seems to have changed.\r\n\r\nExample Podfile:\r\n```\r\nplatform :ios, '9.0'\r\n\r\n#Workspace\r\nworkspace 'SampleProjectIOS'\r\n\r\n#Project\r\nproject 'SampleProject\/SampleProject.xcodeproj'\r\n\r\ndef common_pods\r\n    #Pods\r\n    pod 'Google\/Analytics'\r\n    pod 'Google\/SignIn'\r\n\r\nend\r\n\r\ntarget 'SampleProject' do\r\n    use_frameworks!\r\n    common_pods\r\n    target 'SampleProjectTests' do\r\n        inherit! :search_paths\r\n        pod 'Nimble', '~> 5.1.1'\r\n    end\r\nend\r\n```\r\n\r\nAny thoughts?","Catching up:\r\n\r\n> Not sure if the subspec would work but worth a shot. Splitting into two different podspecs should work.\r\n\r\nDidn't work using subspec, as you suspected.\r\n\r\n> the way to work around is by splitting your podspec into two, one for your lib with the sources and another one with just the vendored framework\r\n\r\nConfirmed and it works fine having a podspec with only the vendored framework. \r\n\r\n**The tradeoffs are**\r\n* I need to create a second pod just to wrap the first one (or I don't need it at all if I jut use the framework's public headers directly)\r\n* I can't `import` my \"framework only\" pod via its podspec name, but I have to `import SampleDynamicLib` instead\r\n\r\nSo for my case, that can work fine, my main problem was how can I reuse this dynamic framework across projects without embedding it in the project.\r\n\r\nThe main issue is: If we bundle some sources that try to access that vendored framework, the build will fail as @dnkoutso stated, because `-framework \"SampleDynamicLib\"` is not being added.\r\n\r\nThanks @dnkoutso for the tips. \ud83d\udcaa \r\n","@crsantos would you mind sharing your two Podspecs? I'm having the same issue and not sure I understand what the 2 Podspecs need to contain.\r\n\r\nThanks!","Sure, my bad. Here you can check the 2 gists:\r\n\r\nThis is using the same repo for both specs and sources: `SameRepoForAllPodSpecsAndSource`\r\n\r\n[SampleDynamicLibPod.podspec](https:\/\/gist.github.com\/crsantos\/3e8485695662913e869e375668b2bb71)\r\n[WrapperAroundSampleDynamicLibPod.podspec](https:\/\/gist.github.com\/crsantos\/f2448d87be96dd21c2211eb65e776245)\r\n\r\nOne caveat: on the wrapper, you can't `import SampleDynamicLibPod` module name. \r\nBut the `import SampleDynamicLib` instead, we already discussed that above.\r\n\r\nDon't forget that using multiple podspecs on the same repo requires some care: like `FacebookSDk` does, you can prefix your tags with the name of the module: `:tag => \"#{s.name}-#{s.version.to_s}\"`.\r\n\r\nIf you have any doubt, please shout. Hope that helps\r\n\r\n**NOTE** : if you don't need to wrap something around your Dynamic library, you can opt out the second `podspec`.","@crsantos  Thanks for the info. It seems I have similar problem. However I wasn't able to solve it with your approach.  Maybe you have completed example https:\/\/github.com\/crsantos\/BundledCocoapodDynamicFrameworkError with the podspecs you have given and you can push it to master or another branch. I would really appreciate it. \r\n\r\nThanks, anyway.","@Sander-Kornev The repo you linked is the proof that the error occurs.\r\nHow to bypass it is just a matter of using 2 specs like I explained on the [previous comment](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/6409#issuecomment-278594418)\r\n\r\nwith these two `podspecs` gists:\r\n[SampleDynamicLibPod.podspec](https:\/\/gist.github.com\/crsantos\/3e8485695662913e869e375668b2bb71)\r\n[WrapperAroundSampleDynamicLibPod.podspec](https:\/\/gist.github.com\/crsantos\/f2448d87be96dd21c2211eb65e776245)\r\n\r\n**NOTE** on the `SampleDynamicLibPod` you can't have any code that imports the framework, only on `WrapperAroundSampleDynamicLibPod`","I might have a closer look at this and figure it out.","Should this work with development pods?  I am running 1.3.1 and it seems that the dSYM is not copied (or symlinked).","@crsantos I try 2 podspec on my project but get this error when run `pod install` on project that use Wrapper pod spec\r\n```\r\ntarget has transitive dependencies that include static binaries: (PATH TO .framework)\r\n```\r\n\r\nHave you got this error too?","> Have you got this error too?\r\n\r\n\r\n@sarunw Can't remember, but I guess not. \r\nThe problem I stated happened on `1.2.0.rc.1`, I don't know if this still happens.\r\nBut I passed that a long time ago, by creating just a POD1 with just the framework inside, and creating another POD2 that wraps POD1 and uses it as a dependency.\r\n"],"labels":["t2:defect","s2:confirmed","d3:hard"]},{"title":"Issue with dynamic framework target and debug\/release configurations","body":"* [X] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI created an empty Swift project with the pod below.\r\nThis project has 2 targets: `test`and `xxxx`. The target `xxxx` is a dynamic framework.\r\n\r\n## What did you expect to happen?\r\n\r\nIn my podfile, I specified that the pod `Alamofire` has to be used in the target `xxxx` in `Release`.\r\nI expect `Alamofire` to be installed in my target `xxxx` only when I build for `Release`.\r\n\r\n## What happened instead?\r\n\r\nIf I look at the generated `Pods-test-frameworks.sh` file, I see the following:\r\n\r\n````\r\nif [[ \"$CONFIGURATION\" == \"Debug\" ]]; then\r\n  install_framework \"$BUILT_PRODUCTS_DIR\/Alamofire\/Alamofire.framework\"\r\nfi\r\nif [[ \"$CONFIGURATION\" == \"Release\" ]]; then\r\n  install_framework \"$BUILT_PRODUCTS_DIR\/Alamofire\/Alamofire.framework\"\r\nfi\r\n`````\r\n\r\nSo it looks like the `Alamofire` pod is beeing installed in `Debug` and `Release`, but should be only installed in `Release`.\r\n\r\nAnother question, why this code is inside `Pods-test-frameworks.sh`? As `Alamofire` is only in target `xxxx`, it should be in `Pods-xxxx-frameworks.sh`? By the way, this file does not exist.\r\n\r\nIf I moved `Alamofire` to the `test` target in my podfile, everything looks fine.\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.2.0.beta.3\r\n        Ruby : ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\r\n    RubyGems : 2.0.14.1\r\n        Host : Mac OS X 10.12.2 (16C67)\r\n       Xcode : 8.2.1 (8C1002)\r\n         Git : git version 2.10.1 (Apple Git-78)\r\nRuby lib dir : \/System\/Library\/Frameworks\/Ruby.framework\/Versions\/2.0\/usr\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ c70e0b791e0727f7353f01d9992f1ece62a493e2\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.1.2\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\ntarget 'test' do\r\n  use_frameworks!\r\n\r\nend\r\n\r\ntarget 'xxxx' do\r\n  use_frameworks!\r\n\r\n  pod 'Alamofire', :configurations => ['Release']\r\nend\r\n```\r\n\r\n\r\n## Project that demonstrates the issue\r\n\r\nJust create an empty project with the following pod above.\r\n","comments":["Can you try `pod 'Alamofire', :configuration => 'Release'` to see if that makes a difference?","No difference.","I was able to confirm this locally. I'll try to have a look at this soon.","@apemobilu actually, I wasn't able to reproduce this exactly. Could you try removing your Pods directory and running `pod install` again? That fixed it for me. The code does appear to be honoring the `:configuration(s)` setting, so maybe there's some other issue going on. Also, is that Podfile you posted accurate? I'm not sure how the test target has any pods installed in it, since there don't appear to be any set for that target in your Podfile.","@benasher44 I have created a new project using the same podfile and still see the same results.\r\n\r\n````\r\nif [[ \"$CONFIGURATION\" == \"Debug\" ]]; then\r\n  install_framework \"$BUILT_PRODUCTS_DIR\/Alamofire\/Alamofire.framework\"\r\nfi\r\nif [[ \"$CONFIGURATION\" == \"Release\" ]]; then\r\n  install_framework \"$BUILT_PRODUCTS_DIR\/Alamofire\/Alamofire.framework\"\r\nfi\r\n`````\r\n\r\nThe podfile I am using is for testing purpose. Of course, my real project is a lot bigger with a more complex podfile :)","@apemobilu ah okay I see what's going on here. `xxxx` is a framework target, and framework targets can't have frameworks embedded in them (for iOS projects anyway, so we stick to this for all platforms). To mitigate this, we install the pods from the framework target into all targets, in which the framework target is integrated. This is why it's installing `xxxx`'s pods into your `test` target (`test` integrates `xxxx`, so it needs `xxxx`'s pod deps). It looks like we're not carrying over the configuration options along with it.","@benasher44 Thanks for the explanation and for confirming the issue :)","@benasher44 can this be fixed for the next version?","@jafara hard to say. I haven't had much time to write CocoaPods code in awhile. It's on my radar, and that's the best I can say at the moment unfortunately. Anyone else is certainly welcome to pick this up and give it a shot though!","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","@benasher44 Hi, any news concerning this issue?","I wonder if anyone can recommend a workaround for this? Since getting an M1 Mac I'd like to exclude Google components from the DEBUG build (I think this could be a good idea anyway for improving build times).\r\n\r\nAnyway, if anyone has any suggestions I'd be grateful."],"labels":["t2:defect","s2:confirmed","r:frameworks"]},{"title":"Add `--force` flag to `pod update` to force update a pod, even if this updates other pods as well","body":"* [x] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\nSay I have a project, currently its `Podfile` and `Podfile.lock` are like this:\r\n\r\n```\r\n# Podfile\r\npod 'PodA', '~> 1.0'\r\npod 'PodB', '~> 1.0'\r\n\r\n#Podfile.lock\r\n  - PodA (1.0.0):\r\n    - PodB (~> 1.0) # PodA's podspec specifies that PodB's version should be ~> 1.0\r\n  - PodB (1.0.0)\r\n```\r\n\r\n\r\nImagine PodA and PodB are maintained by a pro. The pro updates PodA to `1.3`, PodB to `1.1`. And in PodA `1.3`'s podspec, he specifies the dependency PodB's version is `~> 1.1`.\r\n\r\nNow A novice user has received PodA's update notification, he wants to update PodA to `1.3`. So he runs `pod update PodA`. \r\n\r\nSo the desired result is:\r\n\r\n```\r\n#Podfile\r\npod 'PodA', '~> 1.0'\r\npod 'PodB', '~> 1.0'\r\n\r\n#Podfile.lock\r\n  - PodA (1.3):\r\n    - PodB (~> 1.1)\r\n  - PodB (1.1)\r\n```\r\n\r\nHowever, PodA would not be updated to `1.3`, since PodB's version is locked in `Podfile.lock`, and the novice user has to run `pod update PodA PodB` to update PodA to `1.3` and PodB to `1.1`.\r\n\r\nFor the novice user to discover that he needs to update PodB and PodA at the same time, he is expected to open Podfile.lock and extract the information from there, which maybe too much for the novice user.\r\n\r\nSo I think it would make cocoapods more user friendly if we can:\r\n\r\n1. add a flag like `--force` to `pod update`, so that if the novice user finds that he cannot update PodA running `pod update PodA`, he can run `pod update PodA --force`, which would updates other related pods the new PodA's podspec requires\r\n2. if `pod update PodA` cannot update PodA to the available newest version because its dependency's version is locked in `Podfile.lock`, some message will be printed","comments":["Currently, to mimic the `pod update PodA --force` behavior, One has to write some code or do these manually that:\r\n\r\n1. extract all version constraints of PodA from `Podfile.lock`, which is PodA `~> 1.0`\r\n2. the newest version of PodA is `1.3`, which satisfies PodA `~> 1.0`, so we want to get PodA to `1.3`\r\n3. from version `1.3` of PodA's `podspec` extract its dependencies' version constraints, which is PodB `~> 1.1`\r\n4. with PodB `~> 1.1`, compare it with the actual version of PodA's dependency PodB in `Podfile.lock`, which is PodB `1.0`\r\n5. we find that PodB `~> 1.1`(PodA's `1.3` version's requirement) conflicts with PodB `1.0`(in Podfile.lock)\r\n6. we know we should update PodB as well, so we run `pod update PodA PodB`\r\n","This suggestion seems reasonable to me. I'm not sure of the difficulty in implementing such a flag, but I'll tag this as a good enhancement. Thanks!","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","This feature request is still valid.","This would be nice to have. Thanks"],"labels":["t1:enhancement","d2:moderate"]},{"title":"Pods that are used by embedded dynamic frameworks can't be found in linked targets.","body":"* [x] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\r\n\r\n# Report\r\n\r\n## What did you do?\r\n\r\nI've an iOS application (Objective-C) which is composed of three main targets, testing aside: the app itself, a share extension, and an embedded dynamic framework. The framework exists to share code between the app and the share extension, and it has dependencies on third-party frameworks managed by CocoaPods. Both the app target and the extension target will be including classes from the framework, and so also including the framework's dependencies.\r\n\r\nI'm able to run `pod install` just fine and everything _seems_ to be generated OK (though I'm not 100% sure as to which Build Phase scripts should be present on which targets), but when building the app I get errors related to the dependency libraries.\r\n\r\n## What did you expect to happen?\r\n\r\nI expect both the app and extension targets to be able to link to the framework target (which could be anything, but I'll reference AFNetworking for example), and reference the dependencies included by it.\r\n\r\n## What happened instead?\r\n\r\nWhen asking CocoaPods to use static libraries, I get the following error:\r\n\r\n`\/Users\/craig\/Code\/ios\/FrameworkDependencyDemo\/SharedFramework\/SharedClass.h:10:9: Include of non-modular header inside framework module 'SharedFramework.SharedClass'`\r\n\r\nAfter reading around I tried configuring CocoaPods with `use_frameworks!`, but then I get the following errors instead:\r\n\r\n`\/Users\/craig\/Code\/ios\/FrameworkDependencyDemo\/SharedFramework\/SharedClass.h:10:9: 'AFNetworking\/AFNetworking.h' file not found`\r\n`\/Users\/craig\/Code\/ios\/FrameworkDependencyDemo\/ShareExtension\/ShareViewController.h:11:9: Could not build module 'SharedFramework'`\r\n\r\nThe same issue occurs if only the app target's code references the shared framework. It's important to note that the error occurs as Xcode is building either the app target or the extension target \u2013\u00a0the shared framework itself builds fine.\r\n\r\nI looked at the `Embed Pods Frameworks` build step shell script for the app target and AFNetworking is in there at the bottom:\r\n\r\n```\r\nif [[ \"$CONFIGURATION\" == \"Debug\" ]]; then\r\n  install_framework \"$BUILT_PRODUCTS_DIR\/AFNetworking\/AFNetworking.framework\"\r\nfi\r\nif [[ \"$CONFIGURATION\" == \"Release\" ]]; then\r\n  install_framework \"$BUILT_PRODUCTS_DIR\/AFNetworking\/AFNetworking.framework\"\r\nfi\r\nif [ \"${COCOAPODS_PARALLEL_CODE_SIGN}\" == \"true\" ]; then\r\n  wait\r\nfi\r\n```\r\n\r\nThough I noticed that AFNetworking's dependencies aren't in there \u2013\u00a0which might be related to #6123 or #6245?\r\n\r\nI also came across #4254 which looks similar, but adding the de-duplication flag to a config file didn't address the issue for me (assuming I added it correctly).\r\n\r\nEssentially my question is \u2013\u00a0is this approach supported? I couldn't find an explicit example anywhere in the documentation, and it seems like a common use case to me, but perhaps this is expected behaviour? If not, is this a bug, or am I missing some configuration somewhere? Thanks!\r\n\r\n## CocoaPods Environment\r\n\r\n### Stack\r\n\r\n```\r\n   CocoaPods : 1.2.0.beta.1\r\n        Ruby : ruby 2.3.2p217 (2016-11-15 revision 56796) [x86_64-darwin15]\r\n    RubyGems : 2.5.2\r\n        Host : Mac OS X 10.11.6 (15G1108)\r\n       Xcode : 8.1 (8B62)\r\n         Git : git version 2.9.3 (Apple Git-75)\r\nRuby lib dir : \/usr\/local\/Cellar\/ruby\/2.3.2\/lib\r\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ 1ca34e62c1b5bb3f19ee1c499d7de71611faa7fa\r\n```\r\n\r\n### Installation Source\r\n\r\n```\r\nExecutable Path: \/usr\/local\/bin\/pod\r\n```\r\n\r\n### Plugins\r\n\r\n```\r\ncocoapods-deintegrate : 1.0.1\r\ncocoapods-plugins     : 1.0.0\r\ncocoapods-search      : 1.0.0\r\ncocoapods-stats       : 1.0.0\r\ncocoapods-trunk       : 1.1.1\r\ncocoapods-try         : 1.1.0\r\n```\r\n\r\n### Podfile\r\n\r\n```ruby\r\n# Uncomment the next line to define a global platform for your project\r\n# platform :ios, '9.0'\r\n\r\nuse_frameworks!\r\n\r\ntarget 'FrameworkDependencyDemo' do\r\n  # Uncomment the next line if you're using Swift or would like to use dynamic frameworks\r\n  # use_frameworks!\r\n\r\n  # Pods for FrameworkDependencyDemo\r\n\r\nend\r\n\r\ntarget 'SharedFramework' do\r\n  # Uncomment the next line if you're using Swift or would like to use dynamic frameworks\r\n  # use_frameworks!\r\n\r\n  # Pods for SharedFramework\r\n  pod 'AFNetworking'\r\n\r\nend\r\n\r\ntarget 'ShareExtension' do\r\n  # Uncomment the next line if you're using Swift or would like to use dynamic frameworks\r\n  # use_frameworks!\r\n\r\n  # Pods for ShareExtension\r\n\r\nend\r\n```\r\n\r\n## Project that demonstrates the issue\r\n\r\nhttps:\/\/github.com\/craigmarvelley\/FrameworkDependencyDemo","comments":["Hi @craigmarvelley! This should be fixed in #6216, which is on master and will be available in an upcoming release. I have a sample project setup that I think matches your setup here: https:\/\/github.com\/benasher44\/CocoaPodsLibExample. Can you try using CocoaPods master (and that sample setup as a reference) and see if that works for you?","Thanks for the assistance @benasher44 :) Your sample project builds for me, and there's an improvement with my sample project in that\u00a0the framework's class and its dependencies are now fully resolved in the app target. \r\n\r\nThe extension target, however, still won't build. Looking at the build log it seems that the extension is being built before the framework. I've tried adding the framework as a target dependency of the extension as we've done with the app target and it now builds after the framework, but the original issue persists \u2013\u00a0AFNetworking's umbrella header isn't found.\r\n\r\nI hacked the extension's Pod xcconfig file to include \r\n\r\n```\r\nFRAMEWORK_SEARCH_PATHS = $(inherited) \"$PODS_CONFIGURATION_BUILD_DIR\/AFNetworking\"\r\n```\r\nand\r\n```\r\nOTHER_CFLAGS = $(inherited) -iquote \"$PODS_CONFIGURATION_BUILD_DIR\/AFNetworking\/AFNetworking.framework\/Headers\"\r\nOTHER_LDFLAGS = $(inherited) -framework \"AFNetworking\"\r\n```\r\n\r\nto match the app and framework Pod xcconfig files, and it built. So there's possibly an issue with CocoaPods not detecting that it needs to also relate the framework's dependencies to the extension?","Further to this: just noticed that in my proper app my unit test target is suffering from the same problem \u2013\u00a0it's unable to link to dependencies of the main app target in which it is embedded when `use_frameworks!` is on. Going back to static libraries solves the problem.","I have an idea for a solution, but it may take me some time to get to working on this fix. I haven't had as much time to sit down and work on larger CP fixes, so I appreciate your patience on this one!","No problem, appreciate you taking the time to look at it! Anything you need that I can help with, let me know.","Any progress on this issue or is the only solution at the moment to create a framework project (not just a framework target) like here: https:\/\/github.com\/benasher44\/CocoaPodsLibExample ?","@petergoldstein I've been spread pretty thin for the last few months, so I haven't had time to look at this yet. I'm not sure a framework project will work any better than a framework target. The issue is that CocoaPods doesn't handle dependencies that are 2 levels deep into dependent targets (i.e. a pod that's used by framework, which is only used by an extension; framework pods would have to be embedded alongside the extensions in its apps, if that makes sense).","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","Would you mind keeping this open please, in the hope that it could be addressed at some point? ","Looks like this got closed before https:\/\/github.com\/CocoaPods\/CocoaPods\/commit\/625156b57c9bc19c2abfc5928e7b866f753cb0d8 landed.","Is there a workaround?\r\n","I have the same Problem. @craig-miller I think you could create a new pod with the dependencies declared in the podspec and publish it to a private pod repo. But this was actually my attempt on trying to avoid that. Has anyone a better idea?","Why has this not been fixed yet?","@kajensen if you want it fixed the fastest way to get it fixed is by contributing. CocoaPods is maintained and improved from free time of various people.","Fair enough. Just confusing to me with how popular CP is that using an embedded framework in a project with cocoapods has been broken for 12 months.\r\n\r\nCan you point me to where to get started? Seems like a high barrier to entry to start working on something like CP","@kajensen unfortunately there is not enough documentation on the architecture of cocoapods. It's a good point you raise regarding someone who has experience to write one up. I might be doing that. In the meantime clone this repo and begin from `installer.rb` which is responsible for performing all steps with when `pod install` (or even `pod update`) executes.","Hi everyone,\r\nAny news on this particular issue ?\r\nThanks :)","Hi, same problem here.\r\nPlease let us know if we can provide more information to help solving this.\r\nThanks!","I'm hitting this issue as well. It does seem that the root cause is the appex xcconfig file is missing the configuration for the dependencies (it's missing `FRAMEWORK_SEARCH_PATHS`, `OTHER_CFLAGS`, and `OTHER_LDFLAGS`, though in my limited testing on the first is necessary for the build to succeed). Curiously, it's also missing `OTHER_SWIFT_FLAGS = $(inherited) \"-D\" \"COCOAPODS\"` even though it has the equivalent for `GCC_PREPROCESSOR_DEFINITIONS`.\r\n\r\nThis makes me wonder if the appex xcconfig generation is somehow completely separate from the normal xcconfig generation? Because I can't think of any reason why `OTHER_SWIFT_FLAGS ` would have been intentionally omitted here.","This issue has hit me as well when trying to build a shared framework to support an extension.","I also have this issue. An ugly workaround is to copy your Framework's dependencies to your App's dependencies; this becomes very ugly when you have a static framework (GoogleMaps for example) and now you have a static library doubly linked.\r\n\r\nTo resolve this, Cocoapods will need to inspect the project for Target B and see that Target A is being imported by Target B, and link libraries accordingly.","My current workaround is to add a `post_install` hook that manually fixes up the properties on my appex targets and re-saves the xcconfigs back to disk.","Hi dnkoutso , \r\nPlease can help me .\r\nRegarding third party framework add in podspec file .","Sigh, this really big issue for me :(","when creating new project i also ecounter this problem can some please help me with this much appreciated\r\ntried uninstalling and installing the xcode same problem but works fine in simulator \r\n\r\n<img width=\"368\" alt=\"screen shot 2018-10-30 at 10 02 21 pm\" src=\"https:\/\/user-images.githubusercontent.com\/22063776\/47723493-97cc9000-dc8f-11e8-8f73-56c81deabb78.png\">\r\n","> when creating new project i also ecounter this problem can some please help me with this much appreciated\r\n> tried uninstalling and installing the xcode same problem but works fine in simulator\r\n> \r\n> <img alt=\"screen shot 2018-10-30 at 10 02 21 pm\" width=\"368\" src=\"https:\/\/user-images.githubusercontent.com\/22063776\/47723493-97cc9000-dc8f-11e8-8f73-56c81deabb78.png\">\r\n\r\nHi ...\r\nPlease see me your .podspec file ","> > when creating new project i also ecounter this problem can some please help me with this much appreciated\r\n> > tried uninstalling and installing the xcode same problem but works fine in simulator\r\n> > <img alt=\"screen shot 2018-10-30 at 10 02 21 pm\" width=\"368\" src=\"https:\/\/user-images.githubusercontent.com\/22063776\/47723493-97cc9000-dc8f-11e8-8f73-56c81deabb78.png\">\r\n> \r\n> Hi ...\r\n> Please see me your .podspec file\r\n\r\nAdd this line you can solve this issue\r\n  s.resources = \"<YourDirectoryName>\/**\/*.{png,jpeg,jpg,storyboard,xib}\"\r\n","@lilyball Could you please share your `post_install` for others to use if possible? I am struggling with the same issue and it is very annoying.","@nickskull Here's what our `post_install` does. We haven't touched it in a while so I don't know if there are any other build settings it should be doing, but this has been working so far. It's pretty gross though.\r\n\r\n```ruby\r\npost_install do |installer|\r\n  pods_dependency = installer.aggregate_targets.find { |aggregate_target| aggregate_target.label == \"Pods-DependentFramework\" }\r\n  if pods_dependency.nil? then\r\n    Pod::UI::warn \"Could not find aggregate target for Pods-DependentFramework; appex targets will likely fail to build\"\r\n    return\r\n  end\r\n\r\n  # Fix up app extensions\r\n  [\"Pods-App-MessageExtension\", \"Pods-App-TodayExtension\"].each do |app_label|\r\n    pods_aggregate_target = installer.aggregate_targets.find { |aggregate_target| aggregate_target.label == app_label }\r\n    if pods_aggregate_target.nil? then\r\n      Pod::UI::warn \"Could not find aggregate target for #{app_label}; appex target will likely fail to build\"\r\n      next\r\n    end\r\n    pods_aggregate_target.xcconfigs.each do |configuration, xcconfig|\r\n      pods_dependency_xcconfig = pods_dependency.xcconfigs[configuration]\r\n      if pods_dependency_xcconfig.nil?\r\n        Pod::UI::warn \"Could not find xcconfig for Pods-DependentFramework configuration #{configuration}\"\r\n        next\r\n      end\r\n\r\n      # The frameworks property controls the OTHER_LDFLAGS\r\n      if xcconfig.frameworks.intersect?(pods_dependency_xcconfig.frameworks) then\r\n        Pod::UI::warn \"#{app_label} (#{configuration}) and Pods-DependentFramework both contain framework(s) #{xcconfig.frameworks.intersection(pods_dependency_xcconfig.frameworks).inspect}\",\r\n                      [\"Check if CocoaPods has fixed the issue with propagating dependencies from DependentFramework to the app extensions.\",\r\n                        \"If so, update the Podfile to remove the code for doing this manually.\"]\r\n      end\r\n      xcconfig.frameworks.merge(pods_dependency_xcconfig.frameworks)\r\n\r\n      # Update FRAMEWORK_SEARCH_PATHS\r\n      if !merge_build_setting(xcconfig, pods_dependency_xcconfig, \"FRAMEWORK_SEARCH_PATHS\") then\r\n        Pod::UI::warn \"DependentFramework (#{configuration}) does not define FRAMEWORK_SEARCH_PATHS\",\r\n                      [\"The Podfile should be updated.\"]\r\n      end\r\n\r\n      # Update OTHER_CFLAGS\r\n      if !merge_build_setting(xcconfig, pods_dependency_xcconfig, \"OTHER_CFLAGS\") then\r\n        Pod::UI::warn \"DependentFramework (#{configuration}) does not define OTHER_CFLAGS\",\r\n                      [\"The Podfile should be updated.\"]\r\n      end\r\n\r\n      # Copy OTHER_SWIFT_FLAGS\r\n      if ![\"\", \"$(inherited)\"].find_index(xcconfig.attributes.fetch(\"OTHER_SWIFT_FLAGS\", \"\")).nil? then\r\n        other_swift_flags = pods_dependency_xcconfig.attributes.fetch(\"OTHER_SWIFT_FLAGS\", \"\")\r\n        if [\"\", \"$(inherited)\"].find_index(other_swift_flags).nil? then\r\n          xcconfig.merge!(\"OTHER_SWIFT_FLAGS\" => other_swift_flags)\r\n        else\r\n          Pod::UI::warn \"DependentFramework (#{configuration}) does not define OTHER_SWIFT_FLAGS\",\r\n                        [\"The Podfile should be updated.\"]\r\n        end\r\n      else\r\n        Pod::UI::warn \"#{app_label} (#{configuration}) defines OTHER_SWIFT_FLAGS\",\r\n                      [\"It's defined as '#{xcconfig.attributes[\"OTHER_SWIFT_FLAGS\"]}'\",\r\n                        \"The Podfile should be updated.\"]\r\n      end\r\n\r\n      # Save back to disk as CocoaPods has already written it out itself.\r\n      xcconfig.save_as(pods_aggregate_target.xcconfig_path(configuration))\r\n    end # pods_aggregate_target.xcconfigs.each\r\n  end # [app targets].each\r\nend\r\n```\r\n\r\nAlso we're still on CocoaPods 1.5.3 (due to an issue which the just-released 1.6.2 finally fixes so we'll be trying that out shortly), so I'm not sure if CocoaPods 1.6.x or 1.7.x affects what we're doing here at all."],"labels":["t2:defect","r:frameworks"]},{"title":" weak dependency another pod","body":"- [\u2705 ] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\n# Report\n## What did you do?\n\nI creat a new podspec.\n## What did you expect to happen?\n\nI hope weak dependency another pod \"FMDB\/SQLCipher\".\n\nIf \"FMDB\/SQLCipher\" has been installed,the follow configs is install;else,it will be ignored\n\n```\ns.weak_dependency       = { :dependency => \"FMDB\/SQLCipher\", :version => \"2.6\", :xcconfig => = { 'OTHER_CFLAGS' => '$(inherited) -DFMDB_SQLCipher', :library => \"sqlite3\"}}\n```\n## What happened instead?\n\nNone\n## CocoaPods Environment\n### Stack\n\n```\n   CocoaPods : 1.1.0.rc.2\n        Ruby : ruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-darwin15]\n    RubyGems : 2.5.1\n        Host : Mac OS X 10.11.6 (15G1004)\n       Xcode : 8.0 (8A218a)\n         Git : git version 2.8.4 (Apple Git-73)\nRuby lib dir : \/usr\/local\/Cellar\/ruby\/2.3.1\/lib\nRepositories : master - https:\/\/github.com\/CocoaPods\/Specs.git @ d0d690838934b3da52e3f75600f9866eb7b00db3\n```\n### Installation Source\n\n```\nExecutable Path: \/usr\/local\/bin\/pod\n```\n### Plugins\n\n```\ncocoapods-deintegrate : 1.0.1\ncocoapods-plugins     : 1.0.0\ncocoapods-search      : 1.0.0\ncocoapods-stats       : 1.0.0\ncocoapods-trunk       : 1.0.0\ncocoapods-try         : 1.1.0\n```\n","comments":["@sunbohong you can use #if __has_include\n","@pinguo-gaoshan \nIn many case,it worked.But,as i know,it can't specify a version.\n","We don't support weak linking frameworks in CocoaPods, if I recall it was because of a frameworks issue, but you may have to use the issue search to find the exact reasons.\n","@orta  \n\nAs far as i know, cocoapods support [weak_frameworks](https:\/\/guides.cocoapods.org\/syntax\/podspec.html#weak_frameworks)\n\nAnd this issue is a request for support of **weak dependency**.\n","Ah yeah, that's what I meant, not linking to Apple's code weakly\n","This sounds interesting! We don't have plans to work on something like this given the complexity, but we'd definitely be open to a PR to explore it!\n","`#if __has_include` only works when using static linking, so this feature is really helpful since I already have used many `#if __has_include` when static linking the pods, and that makes it hard for me to `use_frameworks!`","+1 to this enhancement request.","+1"],"labels":["t1:enhancement","d3:hard"]},{"title":"Playgrounds\/IBDesignables can't use pod dependencies","body":"# Report\n## What did you do?\n\nAssume I have a project, which includes a playground. I run `pod install` on a Podfile like that:\n\n``` ruby\nuse_frameworks!\n\npod \"Alamofire\"\ntarget \"MyApp\"\n```\n## What did you expected to happen?\n\nI'd expect that I could successfully import Alamofire into my playground. This would have worked with the old scoping until 0.39, but broke with the 1.0 prereleases.\n## What happened instead?\n\nThe framework isn't found, because pod targets are now scoped by default and playgrounds don't support to extend their framework search paths.\n# Solutions\n\nI see two actual possible solutions for this issue and not solving the issue as a possible alternative decision.\n## A: Naive Solution\n\nOnly scope pod targets, if there are different conflicting pod variants, which would require that. (Note: Different pod variants per platform are not conflicting as the default configuration build dir is already scoped by platform.) But this might be easily overseen and doesn't really behave predictable for users. This will cause unnecessary confusion.\nBut having conflicting pod variants is in general fine, so warning on the installation, that there are dependencies, which can't be used in playgrounds doesn't seem to be appropriate. Informing isn't enough, because it wouldn't appear without verbose mode. Scanning the project directory for playgrounds and scanning all contained Swift files for their imports would happen to early and miss imports, which would be added after running `pod install`.\n## B: Elaborate Solution\n\nAllow to declare the playground explicitly in the Podfile:\n\n``` ruby\nuse_frameworks!\n\npod \"Alamofire\"\nplayground \"MyApp.playground\"\ntarget \"MyApp\"\n```\n\nThis would tell the analyzer to generate the Pod dependencies at least once unscoped. If necessary, pod targets can be duplicated.\nThis would make the behavior of pods in playgrounds explicit and predictable.\nUsing different pod variants for different playgrounds would lead to conflicts, which would have to fail the installation. e.g.\n\n``` ruby\nuse_frameworks!\n\nplayground \"Foo.playground\" do\n  pod \"BananaKit\/PalmTree\"\nend\n\nplayground \"Bar.playground\" do\n  pod \"BananaKit\/Fruit\"\nend\n```\n### Tasks\n\nThis would require the following subtasks to be solved:\n- [ ] Extend the Podfile DSL to support the `playground` declaration. This should work similar to `target`, but wouldn't support any of the installer directives as `inherit!`, `use_frameworks!` etc.\n- [ ] Extend the Podfile linter to forbid `use_frameworks!(false)` for declared playgrounds.\n- [ ] Extend the Core model to support a `PlaygroundDefinition` (subclass of `TargetDefinition`)\n- [ ] Extend the analyzer to generate unscoped pod targets for playgrounds or recognize that there is a conflict and throw an exception\n## C: Rejection - That's not among CocoaPods' responsibilities.\n\nWe can build plugins, which helps to workaround this issue as https:\/\/github.com\/neonichu\/ThisCouldBeUsButYouPlaying. If the Xcode team should ever decide to support adding additional framework search paths or even xcconfigs for playgrounds, we could re-evaluate this discussion and utilize these new functionalities to treat playgrounds mostly like usual targets.\n\n\/c @neonichu \n","comments":["I like solution B a lot, but am wondering if there is ever a situation where the unscoped framework would take precedence over the scoped ones for the other targets. I'm assuming we can't really remove the unscoped directory from the search path. Have we investigated that scenario, yet?\n","Oh, that's an interesting thought you bring up there. That would definitely require further investigation.\nOne more theoretic idea to mitigate that would be to build umbrella frameworks for playgrounds, which contain all the other frameworks. But this would require submodule support in the Swift compiler and some advanced linker reexport wizardry.\n","After we found out that this is relevant to support IBDesignables for the Interface Builder as well, it might make sense to generalize this to an option, which can be specified via the `install!` directive. e.g.\n\n``` ruby\ninstall! :unscoped => true\n```\n\nThat could work independent from the existing option `:deduplicate_targets`.\n","I'm a bit concerned with the UX of that. It's quite a way from seeing `IBDesignable` not work to realizing the `unscoped` option is the solution. I don't have a better solution, though :disappointed: \n","Yeah, I share your concerns here, but I don't see any better option, which would unify playgrounds and `IBDesignable`. A blog post plus documentation in the guides around that topic could help a lot.\n","Yeah, I'm not really sure I even get what `unscoped` means after reading this thread, explaining it to people without the context could be tough. Feels like:\n\n``` ruby\nabstract_target do\n  # using this\n  playground \"path\/To\/Example.playground\"\n  # or\n  support_iboutlets!\n\n  pod \"Thingy\"\nend\n```\n\nfeels more DSL-like \/ recognizable\n","At first look I thought that syntax proposed by @orta would be super inconsistent. But it still makes sense with my initial proposal B as we can use it to determine the platform.\nI would though prefer to name it after the thing which should be supported: `support_ibdesignable!`.\n","sure, makes sense \n","hello,\n\nwe recently upgraded to 1.0.0 and immediately started to experience the IBDeisgnable problem stated by many threads mentioned above. This issue has made IB unusable for us, a serious problem... is there a temporary workaround while the community searching for long term solution?\n","@connectdotz you should be able to use a similar approach to what is used inside https:\/\/github.com\/neonichu\/ThisCouldBeUsButYouPlaying as a workaround:\n\n``` ruby\nuse_frameworks!\n\ntarget 'DateToolsPlayground' do\npod 'DateTools'\nend\n\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['CONFIGURATION_BUILD_DIR'] = '$PODS_CONFIGURATION_BUILD_DIR'\n    end\n  end\nend\n```\n\nBut keep in mind this can break integration if your project is in a non-trivial situation where you have multiple pod targets producing build products with the same name. **Be careful in applying this workaround!**\n","that worked. Thanks!\n","Confirming that workaround proposed by @neonichu works with IBDesignables, CP 1.0.1 and XCode 7.3. Thanks.\n","https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/5334#issuecomment-223444937 workaround fixes playground execution errors:\n\n```\nPlayground execution failed: error: Couldn't lookup symbols:\n  __TMaC10MyFramework18MyClass\n```\n\n but cause many build warnings like:\n\n```\nld: warning: directory not found for option '-F...\/Build\/Products\/Debug-iphonesimulator\/Bolts'\n```\n","Any update on this issue? We encountered this error in our UI framework and were able to bypass it thanks to @neonichu workaround, but not having support for IBDesignables out of the box is worrying. Can we do anything to help?\n","Nothing from our side, you're welcome to take a stab at adding the DSL attributes [mentioned above](https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/5334#issuecomment-219539114) - feels pretty spec'd out\n","Hi,\nJust a comment about the proposed workaround:\n\nIf you have pure 'resource bundle' targets, then these targets will not have a $PODS_CONFIGURATION_BUILD_DIR (because nothing it being built).\nThis means that the target installation will install to wrong directory - and the \"_-resources.sh\" script in Pods\/Target Support\/Pods-All-_\/ will fail.\n\nYou can solve this by skipping the proposed workaround if the target is of type 'com.apple.product-type.bundle'.\nSo @neonichu 's workaround from above becomes:\n\n```\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    next if target.product_type == \"com.apple.product-type.bundle\"\n    target.build_configurations.each do |config|\n      config.build_settings['CONFIGURATION_BUILD_DIR'] = '$PODS_CONFIGURATION_BUILD_DIR'\n    end\n  end\nend\n```\n\nAt work we use HockeySDK which adds bundle targets and cause the original workaround to fail.\n","We recently ran into a similar issue with IBDesignables \"image not found\" issues, and were able to work around the problem by adding FRAMEWORK_SEARCH_PATHS to the runpath search paths.\n\n```\npost_install do |installer|\n  installer.pods_project.build_configurations.each do |config|\n    config.build_settings['LD_RUNPATH_SEARCH_PATHS'] = [\n      '$(FRAMEWORK_SEARCH_PATHS)'\n    ]\n  end\nend\n```\n","None of these workarounds work for me. \ud83d\ude1e \n\nStill getting `Image not found` errors when trying to render IBDesignables that imports a module that uses a pod.\n","**Update:** I was able to work around this by explicitly adding `'$BUILT_PRODUCTS_DIR\/[Scoped Dependency Directory]'` for the dependency that couldn't be found. I hate this solution, but at least I can render designables again.\n\nExample Podfile:\n\n``` ruby\nsource 'https:\/\/github.com\/CocoaPods\/Specs.git'\nuse_frameworks!\n\npod 'XCGLogger', '~> 4.0.0'\n\nabstract_target 'iOS' do\n  platform :ios, '10.0'\n\n  target 'MyiOSTarget' do\n  end\n\n  target 'Designables Target' do\n  end\nend\n\nabstract_target 'macOS' do\n  platform :osx, '10.10'\n\n  target 'MyMacTarget' do\n  end\nend\n```\n\n...and my \"Runpath Search Paths\" setting for the \"Designables Target\" looks like this:\n\n![image](https:\/\/cloud.githubusercontent.com\/assets\/639833\/20110015\/a703905e-a5b0-11e6-9bb3-7c1268e91386.png)\n\nIs there a better way to fix this?\n","Guys please. We need a fix for this issue! Not a workaround!\r\nIt's been almost 6 months from the original report by @mrackwitz !!","Hi @gask - there's enough information here for you to take a stab at an implementation if it's a blocking issue for you. Remember this is a community project, no-one gets paid for working on it.","@paulz Warnings could be eliminated by modifying @neonichu snippet a bit:\r\n```\r\npost_install do |installer|\r\n  installer.pods_project.targets.each do |target|\r\n    # add this line\r\n    target.new_shell_script_build_phase.shell_script = \"mkdir -p $PODS_CONFIGURATION_BUILD_DIR\/#{target.name}\"\r\n    target.build_configurations.each do |config|\r\n      config.build_settings['CONFIGURATION_BUILD_DIR'] = '$PODS_CONFIGURATION_BUILD_DIR'\r\n    end\r\n  end\r\nend\r\n```","Is there any update on this issue a year later? Any fix planned?","> Hi @gask - there's enough information here for you to take a stab at an implementation if it's a blocking issue for you. Remember this is a community project, no-one gets paid for working on it.\r\n\r\nNothing's changed, you're welcome to take a look though","The problem has seemed to reappear with a vengeance in Xcode 8.3.2 using Cocoapods 1.2.1. None of the workarounds seems to work anymore, short of removing \"@IBDesignable\" from any custom UI components.\r\n\r\nI get that this is a group of volunteers, but this issue really needs to be addressed. It's making it very difficult to keep using Cocoapods for any serious work. Thanks for your dedication and effort on this project, but this issue should be prioritized.","Respectfully @picciano, people work on problems that they are having at this point in the lifecycle of this project. CocoaPods is mature, stable and is used in millions of apps. If you're having problems with this issue, then it might be time to try contributing back to the project and help fix it for everyone? \r\n\r\nI know I'm repeating myself on this thread, but this is how people start contributing.","I added what I think is a related issue on StackOverflow [here](https:\/\/stackoverflow.com\/questions\/44139175\/cant-use-vendored-framework-cocoapod-inside-workspace-playground), with a sample project. Not sure if it's exactly the same issue, or if this is an appropriate place to post this comment, but I tried some work-arounds mentioned in this thread with no luck.","@arifken 's solution worked for us, on cocoapods `1.2.1` Xcode `8.3.3`","I have tried the workaround with LD_RUNPATH_SEARCH_PATHS and it worked really well. \r\nThank you @arifken\r\nLink to comment with workaround:\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/5334#issuecomment-255831772\r\n\r\nCocoapods 1.3.1, Xcode 8.3.3\r\n\r\nIMO this workaround looks like a good fix to be implemented permanently.\r\nP.S.\r\nI have added `next unless config.name == 'Debug'` to make sure that I don't ship binaries to users with patched LD_RUNPATH_SEARCH_PATHS","@neonichu 's fix worked for me. Fantastic - thank you :).","I'm writing a pod containing ibdesignables as well as pod dependencies and I'm running into the interface builder issue in this discussion when using the pod in apps. I would like to contribute towards fixing the problem, but don't really understand enough about the XCode build process (yet). Probably don't understand enough about how CocoaPods work either.\r\n\r\nBut I found that when I add this to my podspec the problem goes away:\r\n```\r\ns.pod_target_xcconfig = { 'LD_RUNPATH_SEARCH_PATHS' => '$(FRAMEWORK_SEARCH_PATHS)' }\r\n```\r\n\r\nThe comments from @adc-amatosov here https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/5334#issuecomment-332990608 makes me wonder if this has some side-effects for production apps that I'm not aware of. I would be really happy if anyone could point me in the right direction to understanding this better.","We have enjoyed brief period of playground happiness while using CocoaPods 1.3.1.\r\nAll our frameworks built either in Swift or Objective-C or both worked nicely with playgrounds (we don't use IBDesignables).\r\n\r\nThen we moved on to CocoaPods 1.5.0 and Xcode 9.2 and most of playgrounds no longer work.\r\nWe're often getting errors like this:\r\n\r\n```\r\nPlayground execution failed:\r\n\r\nerror: Couldn't lookup symbols:\r\n  _OBJC_CLASS_$_ObcClassName\r\n```\r\n\r\nWhere `ObjCClassName` is Objective-c class implemented in the dependency framework, i.e. playground is in the same project as framework `A`, and `A` depends on `B`, and `ObjcClassName` is in `B`, so it's a transient dependency.\r\n\r\nI've tried all the workarounds mentioned in this thread, as well as sticking `-ObjC` for `LDFLAGS` everywhere it would make sense, but no luck.\r\n\r\nI wonder what I'm missing. My issue is not about designables, but about CocoaPods and Playgrounds.\r\n\r\nMaybe someone faced this issue with 1.5.0?\r\nI'd appreciate any help, thanks.","@mgrebenets There's a regression in 1.5.0. I've opened an issue here, feel free to +1 it: https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/7689","> I have added next unless config.name == 'Debug' to make sure that I don't ship binaries to users with patched LD_RUNPATH_SEARCH_PATHS\r\n\r\n@adc-amatosov what exactly does this do. Should I add it? ","@keronsen 's solution in conjuction with \r\n`post_install do |installer|\r\n    installer.pods_project.build_configurations.each do |config|\r\n        config.build_settings.delete('CODE_SIGNING_ALLOWED')\r\n        config.build_settings.delete('CODE_SIGNING_REQUIRED')\r\n    end\r\nend`\r\nin our Podfile fixed the issue for us. But why?\r\nCan anyone explain, what exactly is happening there?","@appleitung The post_install step is the only thing needed. Doesn't seem like LD_RUNPATH_SEARCH_PATHS adds any effect. See here: \r\n\r\nhttps:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/7689#issuecomment-384951495","@appleitung I've tried both post install fixes, individually and together, still getting the same error.","good","@appleitung Just that post_install was enought for me to get rid of the errors. Probably it just bypass code signing for each pod.","This was causing me huge issues, breaking my whole storyboard in the latest version of Xcode. Pod in question was MultiSlider. Adding the post_install from @appleitung fixed it for me. Can someone from the Cocoapods team explain what is going on here?","Interface Builder seems to require code signing when it builds frameworks to render their designable views, CocoaPods was force disabling code signing for Pod frameworks.\r\n\r\nThe `1.6.0.beta.2` release includes the change that matches the workaround, so if this is a blocker for you please try out the beta.","Seem like not only Cocoapods issue, but in general Xcode IB Designable issue.\r\n\r\nI have my own dynamic framework target in the project that defines IBDesignable.\r\n\r\nWhat fixed the issue for me was adding $FRAMEWORK_SEARCH_PATHS to LD_RUNPATH_SEARCH_PATHS\r\n\r\nTo make it safe for production I customize for Simulator only:\r\n```\r\n\"LD_RUNPATH_SEARCH_PATHS[sdk=iphonesimulator*]\" = \"$(inherited) $FRAMEWORK_SEARCH_PATHS\";\r\n```\r\n\r\nGit diff with come context:\r\n```\r\nDYLIB_INSTALL_NAME_BASE = \"@rpath\";\r\nINFOPLIST_FILE = MyDynamicFrameworkTarget\/Info.plist;\r\nINSTALL_PATH = \"$(LOCAL_LIBRARY_DIR)\/Frameworks\";\r\n+\"LD_RUNPATH_SEARCH_PATHS[sdk=iphonesimulator*]\" = \"$(inherited) $FRAMEWORK_SEARCH_PATHS\";\r\nMODULEMAP_FILE = \"$(PRODUCT_NAME:c99extidentifier)\/$(PRODUCT_NAME:c99extidentifier).modulemap\";\r\nPRODUCT_BUNDLE_IDENTIFIER = \"${MAIN_BUNDLE_ID}.$(PRODUCT_NAME:rfc1034identifier)\";\r\n\r\n```\r\n\r\nPost install step (https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/5334#issuecomment-255831772) also did not work, as it only changes search paths for pods target.\r\n\r\nI've tried using `1.6.0.rc1` and it did not fix the issue for me.\r\n","@mortenbekditlevsen answers solves for me, i create dummy single app, then add target, develop a framework. The framework itself use CocoaPods. \r\n\r\nI didn't have this issue until i create new IBDesignables class and the storyboard in my framework starts to crash","@paulz is your modification to the Build Setting of the app that uses the pod that has the IBDesignable OR is your modification to the Build Setting of the Framework? I've been confused by where the paths need to be modified, in some solutions it appears it is needed In both :-\/","I think I've run into this issue too, but worked around it in my case by moving the `IBDesignable` classes into their own framework target which does not have any cocoapods-managed dependencies.","As @paulz mentioned,\r\n\r\nAdding\r\n\r\n`s.pod_target_xcconfig = { 'LD_RUNPATH_SEARCH_PATHS[sdk=iphonesimulator*]' => '$(inherited) $FRAMEWORK_SEARCH_PATHS' }`\r\n\r\nto the `.podspec` file did it for me and it shouldn't have any secondary effects when building for production."],"labels":["t1:enhancement","s2:confirmed","d3:hard","r:frameworks"]},{"title":"Can't exclude 'foo.h.in' if I include 'foo.h' in podspec","body":"## What did you do?\n\nRepository has 'mkdio.h' and 'mkdio.h.in'\nPodspec has:\n\n```\ns.source_files = 'mkdio.h'\ns.exclude_files = 'mkdio.h.in'\n```\n## What did you expected to happen?\n\nOnly the header gets included.\n## What happened instead?\n\nBoth files get included.\n## Workaround\n\nFor now, I'm using:\n\n```\ns.prepare_command = 'rm mkdio.h.in'\ns.source_files = 'mkdio.h'\n```\n","comments":["I was unable to reproduce this with CP 1.0 beta 8. You shouldn't even need to use `exclude_files` unless you're using a glob for `source_files`.\n\nCould you please share a project which reproduces this?\n","Project: master branch of https:\/\/github.com\/tomaz\/appledoc.git\n\n1) Edit \"[Specs\/Discount.podspec](https:\/\/github.com\/tomaz\/appledoc\/blob\/master\/Specs\/discount.podspec)\" to remove the `rm *.in`:\n\n```\n<   s.prepare_command = '.\/configure.sh && make blocktags && rm *.in'\n>   s.prepare_command = '.\/configure.sh && make blocktags'\n```\n\n2) Run `pod deintegrate && pod install`\n\nFile _Pod\/Discount\/mkdio.h.in_ will be added, even if unneeded\n","Maybe it is the line `s.public_header_files = 'mkdio.h'` which is adding `mkdio.h.in`, and not the `source_files` line.\n","Thanks, I was able to reproduce this now.\n","probot-stale, please remove \"awaiting input\"","I'm unable to reproduce this using CocoaPods `1.4.0` - @Coeur is this still an issue?","@amorde I reproduced it with CocoaPods `1.5.0`. Please follow the steps from my comment from Apr 24, 2016."],"labels":["t2:defect"]},{"title":"Build errors when linting projects that expose C++ in headers","body":"- [x] I've read and understood the [*CONTRIBUTING guidelines and have done my best effort to follow](https:\/\/github.com\/CocoaPods\/CocoaPods\/blob\/master\/CONTRIBUTING.md).\n# Report\n\nUsing latest beta, there's an issue when linting a library that has C++ in its headers. The file `CocoaPods\/Lint\/App\/main.m` is ObjC, and gets compilation errors when the library has C++ in its headers.\n## What did you do?\n\n`pod spec lint --private MyLibrary.podspec`\n## What did you expected to happen?\n\nI expected it to lint successfully. It does with the latest release of cocoapods (0.39.0) but not the latest pre-release (1.0.0.beta.6)\n## What happened instead?\n\nBuild errors pointing to `CocoaPods\/Lint\/App\/main.m`. For example:\n\n`fatal error: 'unordered_map' file not found`\n\nor\n\n`error: unknown type name 'namespace'`\n## Podfile\n\nNo `Podfile` is involved. This was linting a `.podspec`.\n","comments":["Can you please share a podspec & its source files so we can reproduce the issue? Thanks!\n","Project: https:\/\/github.com\/facebook\/FBAllocationTracker\nPodspec: https:\/\/github.com\/facebook\/FBAllocationTracker\/blob\/master\/FBAllocationTracker.podspec\n\nthanks\n","The issue here is that we generate an app target in 1.0 which imports a Pod to catch more errors during the linting process. The generated code is ObjC, though, which Pods like yours with C++ headers break, as you already discovered.\n\nI see two possible fixes:\n- Just make the generated files ObjC++ unconditionally.\n- Somehow determine if C++ is used by any headers and switch to ObjC++ in that case.\n\nI _think_ we can go with the first approach as headers probably won't hit any of the C vs. C++ incompatibilities and the second approach would likely be brittle.\n","First one sounds reasonable. Another possibility is generating as .m, compiling, and if that fails, re-generate as .mm, compile again, and if that works it's known to be C++. It would be slower linting for projects that use C++ in the headers, but would avoid any linkage issues for libraries that don't extern \"C\".\n","@kastiglione running `pod spec lint` succeeds for me with FBAllocationTracker master\n","@segiddins The podspec has since been updated. It was version 0.1 that was failing.\n","Hm so since those all still use `.h` extensions, I can't think of a good way of detecting this\n","Unfortunately, there's also no real standard for C++ header extensions, it goes all the way from `.h` over `.hh` to even having no extension. :sob:\n","Maybe we could switch to generating ObjC++ if `library` contains `c++` \u2014 this doesn't necessarily mean that a Pod's header exposes C++, but at least we would limit this to Pods which are (partially) written in C++.\n","That's not a bad place to start.\n","@neonichu but then that kinda screws of pods like Realm that use c++ but purposefully don't expose any to the user? idk, it just kinda sucks either way :P\n","Couldn't just the linter generate a dummy `.mm` file also? Xcode takes care of the rest.\n","But that could (potentially) break imports of raw C headers\n","@neonichu \nI have same trouble. But I can make the lint project be succeeded!\nDo this (Use --no-clean --use-libraries):\n\n```\npod lib lint --sources='http:\/\/gitlab.baidao.com\/ios\/ytx-pod-specs.git,master' --verbose --use-libraries --no-clean\n```\n\nopen the temporary lint project like \n\n```\nopen \/var\/folders\/w2\/khz8t6h10q51lx_hvw8ds9wr0000gn\/T\/CocoaPods\/Lint\/App.xcworkspace\n```\n\nRename \"main.m\" to \"main.mm\" in xcode.\nModify \"main.mm\" like this: (Do not use `@import` )\n\n```\n#import <Foundation\/Foundation.h>\n#import <UIKit\/UIKit.h>\n#import <YTXChart\/YTXChart.h>\nint main() {}\n```\n\nRun the command which is executed in 'pod lib lint'\n\n```\nxcodebuild clean build -workspace App.xcworkspace -scheme App -configuration Release CODE_SIGN_IDENTITY=- -sdk iphonesimulator -destination id=F76ED5E4-9AB6-4BC1-8BD1-87676A2B08CC\n```\n\nFinally,  BUILD SUCCEEDED\n\n```\nTouch \/Users\/apple\/Library\/Developer\/Xcode\/DerivedData\/App-beckcjxzcqwvwhbhxsbzztinnxlo\/Build\/Products\/Release-iphonesimulator\/App.app\n    cd \/var\/folders\/w2\/khz8t6h10q51lx_hvw8ds9wr0000gn\/T\/CocoaPods\/Lint\n    export PATH=\"\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/iPhoneSimulator.platform\/Developer\/usr\/bin:\/Applications\/Xcode.app\/Contents\/Developer\/usr\/bin:\/opt\/local\/bin:\/opt\/local\/sbin:\/Users\/apple\/bin:\/usr\/local\/bin:\/usr\/local\/bin:\/usr\/bin:\/bin:\/usr\/sbin:\/sbin:\/opt\/X11\/bin:\/Users\/apple\/android-sdk\/platform-tools:\/Users\/apple\/android-sdk\/tools:\/Users\/apple\/apache-ant-1.9.2\/bin:\/Users\/apple\/oclint\/bin:\/Users\/apple\/.gem\/ruby\/2.0.0\/bin\"\n    \/usr\/bin\/touch -c \/Users\/apple\/Library\/Developer\/Xcode\/DerivedData\/App-beckcjxzcqwvwhbhxsbzztinnxlo\/Build\/Products\/Release-iphonesimulator\/App.app\n\n** BUILD SUCCEEDED **\n```\n\nSo could you add a new parameter like '--use-c++' ? The new parameter will create a new temporary lint project. There is a \"Main.mm\" in this project.\n\nThis is my podspec:\n\n``` ruby\nPod::Spec.new do |s|\n  s.name             = \"YTXChart\"\n  s.version          = \"0.15.1\"\n  s.summary          = \"YTXChart for pod\"\n\n# This description is used to generate tags and improve search results.\n#   * Think: What does it do? Why did you write it? What is the focus?\n#   * Try to keep it short, snappy and to the point.\n#   * Write the description between the DESC delimiters below.\n#   * Finally, don't worry about the indent, CocoaPods strips it!\n  s.description      = \"\u94f6\u5929\u4e0bChart, \u4f9d\u8d56AFNetworking\"\n\n  s.homepage         = \"http:\/\/gitlab.baidao.com\/ios\/YTXChart.git\"\n  # s.screenshots     = \"www.example.com\/screenshots_1\", \"www.example.com\/screenshots_2\"\n  s.license          = 'MIT'\n  s.author           = { \"caojun-mac\" => \"78612846@qq.com\" }\n  s.source           = { :git => \"http:\/\/gitlab.baidao.com\/ios\/YTXChart.git\", :tag => s.version }\n  # s.social_media_url = 'https:\/\/twitter.com\/<TWITTER_USERNAME>'\n\n  s.platform     = :ios, '7.0'\n  s.requires_arc = true\n\n  s.source_files  = \"Pod\/Classes\/painter\/*.{h,m,mm}\", \"Pod\/Classes\/painterview\/*.{h,m,mm}\", \"Pod\/Classes\/chart\/*.{h,m,mm}\", \"Pod\/Classes\/core\/*.{h,mm}\", \"Pod\/Classes\/core\/**\/*.{h,m,mm,inl}\"\n\n  # s.resource_bundles = {\n  #   'YTXChart' => ['Pod\/Assets\/*.png']\n  # }\n\n  s.frameworks = 'Foundation', 'UIKit'\n  s.libraries = 'sqlite3', 'c++'\n\n  s.dependency 'YTXServerId'\n  s.dependency 'AFNetworking', '~> 2.0'\n\nend\n```\n\nPS: This repo lint succeeded at 0.39.0 and  build succeeded in xcode GUI by using 'cmd+B'.\n","Hi @mdsb100 \n\nI have followed your steps and  I come at the BUILD SUCCEEDED,\n\nBut I don't understood when I use the '--use-c++' parameters and finish my repo lint. \n\nCan you explain a little more about this steps. Big Thanks.\n","@ezefranca \nI just suggest the contributor to add '--use-c++' parameter for creating a lint project like my steps.\n\n'.mm' would include static c++ library like 'std'. 'main.mm' is the entrance, so it must be a '.mm'.\n\nWe can add a static c++ library in XCode, but it does not work. Unless you rename the main.m to main.mm.\n\n'@import' check this [import-vs-import-ios-7](http:\/\/stackoverflow.com\/questions\/18947516\/import-vs-import-ios-7)\n\nI do not know why the c++ project can not be a Module. May be this:\n\n**You don't actually need to use the @import keyword. If you opt-in to using modules, all #import and #include directives are mapped to use @import automatically. That means that you don't have to change your source code (or the source code of libraries that you download from elsewhere). Supposedly using modules improves the build performance too, especially if you haven't been using PCHs well or if your project has many small source files.**\n\nYou can test simple c++ project and use '@import'.\n","@segiddins\nWhen you plan to fix it? \n","@mdsb100 we haven't really come up with a good fix yet, so that's a prerequisite to implementing one, sorry\n","@segiddins \nCan you give a thought to my solution which is my previous comment in this issue.\nI have to switch to cocoapods@0.39.0 to lint and publish my c++\/oc pod library.\n","We don't want to add new command line options for linting unless strictly necessary\n","+1\n\nIs there any workaround to this? At least a way to push to a private repo without passing the linting stage?\n","@mikewoodworth\nCurrently you have to switch 0.39.0 to lint and publish\n","I'd advocate for a `--use-c++` flag, until a better solution is found. As it stands cocopods 1.0.1 is effectively useless as soon as c++ is used anywhere. Together with #5441 (support for symlinks; which is on hold), it seems like one should advocate to stick with 0.39.0 :(\n","@mdsb100 niubility!\n","Is there new message?\r\n\r\nWe can not use cocoapod@0.39.0 for now. Because some third-party depended module must need cocoapod@1.0.0 to publish\/lint!!!\r\n\r\nWe cant rewrite c++ to oc... \r\n\r\nPlease help me","@mdsb100 \u73b0\u5728\u597d\u50cf\u6ca1\u8fd9\u4e2a\u95ee\u9898\u4e86\u5427","@a83988029 cocoapod@1.1.1 \u4e0d\u80fd\u53d1\u554a \u4f60\u80fd\u53d1\uff1f","@mdsb100 \u6211\u80fd\u554a","@mdsb100 pod repo push private-repo \u4f9d\u8d56c++header\u7684xxx.podspec --allow-warnings --verbose --use-libraries","\u4f60\u7684\u5e93\u5728\u4e0d\u5728github\u4e0a \u6211\u53bb\u7814\u7a76\u4e0b","@mdsb100 \u4e0d\u5728github\uff0c\u6211\u4eec\u7528\u7684\u516c\u53f8\u5185\u90e8\u7684gitlab","1.1.1\u4e48 \u6211\u8868\u793a\u8fd8\u662f\u4e0d\u884c\u554a","@mdsb100 \u662f1.1.1\uff0c\u6211\u8fd9\u6ca1\u95ee\u9898","\u90a3\u4f60lint\u80fd\u8fc7\u4e48\uff1f\u4f60\u4eec\u4e0dlint\u7684\uff1f","\u6211\u4e0dlint\u554a\uff0cpush\u6210\u529f\u4e86\u4e0d\u5c31\u884c\u4e86\u4e48\uff0cpush\u5931\u8d25\u4e86\u4e5f\u80fd\u770b\u5230\u9519\u8bef\u5728\u54ea\uff0c\u4e00\u822c\u4e0dlint","Finally, I figure out solution.\r\n\r\nIf you repo call the name is 'YTXChart', And you should add a 'YTXChart.h'.  This header file does not contain any  c++ header . In a word,   'YTXChart.h' can be empty. You can create a 'YTXChartHeader.h' contains origin content, this header can contain c++.\r\n\r\nLint passed! Test in cocoapods@1.1.1\r\n\r\nChange your code in your main project:\r\n```\r\n<YTXChart\/Chart.h>\r\n```\r\nto\r\n```\r\n<YTXChart\/YTXChartHeader.h>\r\n```\r\n\r\n\u6700\u7ec8\uff0c\u6211\u627e\u5230\u4e86\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u3002\r\n\u5982\u679c\u4f60\u7684repo\u540d\u5b57\u662f'YTXChart'\uff0c\u4f60\u9700\u8981\u6709\u4e00\u4e2a\u53eb\u505a'YTXChart.h'\u7684\u5934\u6587\u4ef6\u3002\u8fd9\u4e2a\u5934\u6587\u4ef6\u4e0d\u5305\u542b\u4efb\u4f55c++\u7684\u5185\u5bb9\uff08\u5305\u62ecimport\u7684\u5176\u4ed6\u5934\u6587\u4ef6\uff09\u3002\u4e00\u53e5\u8bdd\uff0c 'YTXChart.h' \u53ef\u4ee5\u662f\u7a7a\u7684\u3002\u4f60\u53ef\u4ee5\u589e\u52a0\u4e00\u4e2a'YTXChartHeader.h'\u5305\u542b\u539f\u6765\u5934\u6587\u4ef6\u91cc\u7684\u5185\u5bb9\uff0c\u8fd9\u4e2a\u5934\u6587\u4ef6\u53ef\u4ee5\u542b\u6709c++\u3002\r\n\r\nLint \u901a\u8fc7! \u6d4b\u8bd5\u7248\u672c cocoapods@1.1.1\r\n\r\n\u5728\u4f60\u7684\u4e3b\u5de5\u7a0b\u91cc\u9762\u628a\u4ee3\u7801\u6539\u6210\uff1a\r\n```\r\n<YTXChart\/Chart.h>\r\n```\r\nto\r\n```\r\n<YTXChart\/YTXChartHeader.h>\r\n```","@mdsb100 \r\n\u4e3a\u5565\u4e00\u5b9a\u8981lint\r\n\u76f4\u63a5push\u6709\u4ec0\u4e48\u95ee\u9898\u5417","\u5f53\u7136\u8981Lint\uff0c\u5408\u89c4\u554a\u3002\u6211\u8fd9\u8fb9\u662flint\u4e0d\u8fc7push\u4e5f\u4e0d\u8fc7\u7684\u3002","My workaround was to edit cocoapods source to use C++ then I could push. \r\n\r\n(Don't worry this is a private repo)","@ntnmrndn any chance you can make this repo public\/forkable? I think we're ready to go the same way. Perhaps we can all pool our efforts to maintain as a fork until they are ready to move on this?","@mikewoodworth I edited the file in place on my computer. I created a gist with the one file I changed (validator.rb) https:\/\/gist.github.com\/ntnmrndn\/5f91755c12812390b3ae8dec73c1154e\r\n\r\nI don't think maintaining a fork is a good idea, since it would be incompatible with the main cocoa pods. We should however try to move forward on this issue. ","To sum up the previous talks and current status, it seems \r\n\r\n- We do not support c++ headers because we are compiling in objective-c instead of c++.\r\n- We do not have a good solution to differentiate C++ from C from Objective C headers\r\n- We do not want to add command line options\r\n- We do not want to compile in ObjectiveC++ by default because it might in turn break C compatibility\r\n- We do not want to do both Objective C and Objective C++ because  it might break mixed C\/C++\r\n\r\nSo far the only option I see is to add a field to the podspec.\r\n\r\nThis could looks like this:\r\n\r\n```\r\n# \u2015\u2015\u2015 Source Code \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 #\r\n  #\r\n  #  CocoaPods is smart about how it includes source code. For source files\r\n  #  giving a folder will include any swift, h, m, mm, c & cpp files.\r\n  #  For header files it will include any header in the folder.\r\n  #  Not including the public_header_files will make all headers public.\r\n  #\r\n\r\n  s.source_files  = \"Classes\", \"Classes\/**\/*.{h,m}\"\r\n  s.exclude_files = \"Classes\/Exclude\"\r\n\r\n  # s.public_header_files = \"Classes\/**\/*.h\"\r\n  # s.public_cpp_header_files = \"Classes\/**\/*.h[pp]?}\"\r\n```\r\n\r\nIf s.public_cpp_header_files contains files, we include them (and just them) in a separate `main.mm` file, while they are excluded from `main.m` compilation.\r\n\r\nThis should preserve backward compatibility and fix our issue.\r\n\r\nIf I could get feedback on this option quickly, I might find the time to implement it.\r\nAny thoughts ?","@ntnmrndn I think that sounds fair. I think a few other maintainers should weigh in and then perhaps implement this.","That would be nice","In 1.2.1.beta.1 a new option `--skip-import-validation` was added to match the behavior of 0.39.x. This means you can push Pods without performing linking (overall risky to do) but it should unblock most of the C++ pods that fail to link because the generated `main.m` does not work properly.\r\n\r\nUntil a much better solution is added I believe the flag should help most to publish.\r\n\r\nSee https:\/\/github.com\/CocoaPods\/CocoaPods\/pull\/6420","Is there no \"setting\" to say that headers in a specific folder are C++ headers?\r\n\r\nWouldn't that be a good solution? (I know nothing about implementing it)\r\n\r\nEDIT: \r\n@ntnmrndn proposes that solution, it looks good to me \ud83d\udc4d ","\u4f7f\u7528\u4e86 --use-libraries \u4e4b\u540e\u5c31\u53ef\u4ee5\u4e86","Was able to solve the linting issue by changing `app_target_helper.rb` for cocoapod version 1.4.0 to this [gist](https:\/\/gist.github.com\/priteshrnandgaonkar\/dcca9639a3bc0a3b9adecae3a2b3b0c4). It replicates the logic given by @ntnmrndn above\r\n\r\n\r\n","I just spent many hours trying to fix this same thing. Why is this not mentioned anywhere on the CocoaPods website ? "],"labels":["t2:defect","s7:workaround available"]},{"title":"Canceling during prepare_command causes it to be skipped next time","body":"I'm using `prepare_command` to build a library ([OpenCV v2.4.11](https:\/\/github.com\/CocoaPods\/Specs\/blob\/d57d4872bb1c666a6712eda4c0e63188226ed172\/Specs\/OpenCV\/2.4.11\/OpenCV.podspec.json)) during `pod install`. However I noticed that if I cancel the `pod install` while it's in the middle of the `prepare_command` phase, that on the next run it skips the `prepare_command` phase entirely as if it was successful.\n\nI presume this is because it's checking for the existence of the cache folder, which exists after the `git clone` phase is successful., yet the cache isn't \"correct\" until the `prepare_command` has been successfully completed.\n","comments":["Could probably be fixed by running in a temp dir and moving when finished. \n","There hasn't been any activity on this issue recently. Due to the high number of incoming GitHub notifications, we have to clean some of the old issues, as many of them have already been resolved with the latest updates.\n","This remains an easy fix","I cant repro this. I've tried cancelling myself but also forcing an `exit 1` and it correctly prevents installing the pod and adding it to the cache. "],"labels":["t2:defect","d1:easy"]},{"title":"Add support for the dSYM for a prebuilt binary.","body":"When a prebuilt binary has been stripped of its debug symbols, adding this will still allow for a better debugging experience during development.\n\nFrom #1696:\n\n> LLDB supports remapping of dSYM source paths via embedded UUID property lists: http:\/\/lldb.llvm.org\/symbols.html\n","comments":["Regarding how to specify this in the spec, I\u2019m thinking we could do something like:\n\n``` ruby\ns.vendored_library = { :name => 'PLCrashReporter', :dSYM => 'PLCrashReporter.dSYM' }\n```\n\nAnd possibly default to `NAME.dSYM` if it exists? In which case just `s.vendored_library = 'PLCrashReporter'` would work as well.\n\n\/cc @irrationalfab \n","The default option sounds great!\n","Issue has been confirmed by @joelparsons\n","Issue has been confirmed by @davelyon\n","Will this still be necessary given that iOS now supports frameworks?\n","@segiddins Yes, I think a framework should behave the same way.\n\n``` ruby\ns.vendored_framework = { :name => 'Stencil.framework', :dSYM => 'Stencil.framework.dSYM' }\n```\n\n``` shell\n\u251c\u2500\u2500 Stencil.framework\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Headers -> Versions\/Current\/Headers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Modules -> Versions\/Current\/Modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Resources -> Versions\/Current\/Resources\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Stencil -> Versions\/Current\/Stencil\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Versions\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 A\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 Headers\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Stencil-Swift.h\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Stencil.h\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 Modules\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Stencil.swiftmodule\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 x86_64.swiftdoc\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 x86_64.swiftmodule\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 module.modulemap\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 Resources\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Info.plist\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 Stencil\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 Current -> A\n\u2514\u2500\u2500 Stencil.framework.dSYM\n    \u2514\u2500\u2500 Contents\n        \u251c\u2500\u2500 Info.plist\n        \u2514\u2500\u2500 Resources\n            \u2514\u2500\u2500 DWARF\n                \u2514\u2500\u2500 Stencil\n\n15 directories, 10 files\n```\n","@kylef is there no place in the `.framework` itself to put a dSYM?\n","I'm not sure, but this is how Xcode generates it, separately.\n","+1 for this issue. Would be awesome for CocoaPods to have support for dsyms for a framework. \n","@ulhas the quickest way to get a feature like this into CocoaPods would be to submit a PR for it :rocket: \n","Basically dSYM and .bcsymbolmap support is a copy 3 files to Products directory. Is there any hook where this files can be specified? Like resources. [Script example](http:\/\/developers.atinternet-solutions.com\/wp-content\/uploads\/2015\/06\/copy_files_phase.png)\n","I know this is an old issue but we just hit this case and worth adding support. The proposed API seems good. ","Can this be closed? #6536 was merged\r\n\r\nI hope this will be released soon \ud83d\udc4d ","Not sure if it should. The original issue was discussing adding a DSL option. Let's wait and see how the current implementation that assumes the same name goes.","I'm really looking forward to have this feature.\r\nI'm planning to use vendored SDK for the project I'm working on, and the ability to just link them instead of instead of building them every time sounds awesome but I really need to wrap up all the dSYM into the final application dSYM in order to easily track down crashes in my App and frameworks too.\r\n\r\nIs this intended for this purpose? Is there any planned release date for this?","If you use bundler you can lock CocoaPods to a specific SHA. \r\n\r\nThis should ship this week or next with 1.3.0.beta.1.","@dnkoutso is there usage documentation for #6536 ?  maybe an example .podspec?","No, there is no DSL added for it. If you attach a dSYM next to the .framework then it will automatically be detected and processed by CocoaPods.","For anyone who wants to follow progress here, CocoaPods now supports vendored `dSYM` support but only if the name of the `dSYM` matches that of the vendored framework.\r\n\r\nThis issue will remain open to extend the DSL to allow pod authors to specify a specific\/different name of a `dSYM` file.","Having this issue now. CocoaPods does appear to copy over the DSYM files when following this plan, but it's not moving to Apple when using Bitcode. Can anyone confirm?","@dnkoutso could you please make it clear, how it should match?\r\nIf I have `WebRTC.framework`, should I place a `WebRTC.dSYM` or `WebRTC.framework.dSYM` in same folder?\r\nThaks","@rostopira must be `WebRTC.framework.dSYM`"],"labels":["t1:enhancement","d2:moderate"]}]