{"markdown": "# react-native-maps [![npm version](https://img.shields.io/npm/v/react-native-maps.svg?style=flat)](https://www.npmjs.com/package/react-native-maps)\n\nReact Native Map components for iOS + Android\n\n## Contributing\n\nThis project is being maintained by a small group of people, and any help with issues and pull requests are always appreciated. If you are able and willing to contribute, please read the [guidelines](./CONTRIBUTING.md).\n\n## Installation\n\nSee [Installation Instructions](docs/installation.md).\n\nSee [Setup Instructions for the Included Example Project](docs/examples-setup.md).\n\n## Compatibility\n\n`react-native-maps` requires `react-native >= 0.64.3`.\n\n## Component API\n\n[`<MapView />` Component API](docs/mapview.md)\n\n[`<Marker />` Component API](docs/marker.md)\n\n[`<Callout />` Component API](docs/callout.md)\n\n[`<Polygon />` Component API](docs/polygon.md)\n\n[`<Polyline />` Component API](docs/polyline.md)\n\n[`<Circle />` Component API](docs/circle.md)\n\n[`<Overlay />` Component API](docs/overlay.md)\n\n[`<Heatmap />` Component API](docs/heatmap.md)\n\n[`<Geojson />` Component API](docs/geojson.md)\n\n## General Usage\n\n```js\nimport MapView from 'react-native-maps';\n```\n\nor\n\n```js\nvar MapView = require('react-native-maps');\n```\n\nThis MapView component is built so that features on the map (such as Markers, Polygons, etc.) are\nspecified as children of the MapView itself. This provides an intuitive and react-like API for\ndeclaratively controlling features on the map.\n\n### Rendering a Map with an initial region\n\n## MapView\n\n```jsx\n<MapView\n  initialRegion={{\n    latitude: 37.78825,\n    longitude: -122.4324,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421,\n  }}\n/>\n```\n\n### Using a MapView while controlling the region as state\n\n```jsx\ngetInitialState() {\n  return {\n    region: {\n      latitude: 37.78825,\n      longitude: -122.4324,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421,\n    },\n  };\n}\n\nonRegionChange(region) {\n  this.setState({ region });\n}\n\nrender() {\n  return (\n    <MapView\n      region={this.state.region}\n      onRegionChange={this.onRegionChange}\n    />\n  );\n}\n```\n\n### Rendering a list of markers on a map\n\n```jsx\nimport {Marker} from 'react-native-maps';\n\n<MapView region={this.state.region} onRegionChange={this.onRegionChange}>\n  {this.state.markers.map((marker, index) => (\n    <Marker\n      key={index}\n      coordinate={marker.latlng}\n      title={marker.title}\n      description={marker.description}\n    />\n  ))}\n</MapView>;\n```\n\n### Rendering a Marker with a custom image\n\n1. You need to generate an `png` image with various resolution (lets call them `custom_pin`) - for more information go to [Android](https://developer.android.com/studio/write/resource-manager#import), [iOS](https://developer.apple.com/documentation/xcode/adding-images-to-your-xcode-project)\n2. put all images in Android drawables and iOS assets dir\n3. Now you can use the following code:\n\n```jsx\n<Marker\n  coordinate={{latitude: latitude, longitude: longitude}}\n  image={{uri: 'custom_pin'}}\n/>\n```\n\nNote: You can also pass the image binary data like `image={require('custom_pin.png')}`, but this will not scale good with the different screen sizes.\n\n### Rendering a Marker with a custom view\n\nNote: This has performance implications, if you wish for a simpler solution go with a custom image (save your self the head ache)\n\n```jsx\n<Marker coordinate={{latitude: latitude, longitude: longitude}}>\n  <MyCustomMarkerView {...marker} />\n</Marker>\n```\n\n### Rendering a custom Marker with a custom Callout\n\n```jsx\nimport {Callout} from 'react-native-maps';\n\n<Marker coordinate={marker.latlng}>\n  <MyCustomMarkerView {...marker} />\n  <Callout>\n    <MyCustomCalloutView {...marker} />\n  </Callout>\n</Marker>;\n```\n\n### Draggable Markers\n\n```jsx\n<MapView initialRegion={...}>\n  <Marker draggable\n    coordinate={this.state.x}\n    onDragEnd={(e) => this.setState({ x: e.nativeEvent.coordinate })}\n  />\n</MapView>\n```\n\n### Using a custom Tile Overlay\n\n#### Tile Overlay using tile server\n\n```jsx\nimport {UrlTile} from 'react-native-maps';\n\n<MapView region={this.state.region} onRegionChange={this.onRegionChange}>\n  <UrlTile\n    /**\n     * The url template of the tile server. The patterns {x} {y} {z} will be replaced at runtime\n     * For example, http://c.tile.openstreetmap.org/{z}/{x}/{y}.png\n     */\n    urlTemplate={this.state.urlTemplate}\n    /**\n     * The maximum zoom level for this tile overlay. Corresponds to the maximumZ setting in\n     * MKTileOverlay. iOS only.\n     */\n    maximumZ={19}\n    /**\n     * flipY allows tiles with inverted y coordinates (origin at bottom left of map)\n     * to be used. Its default value is false.\n     */\n    flipY={false}\n  />\n</MapView>;\n```\n\nFor Android: add the following line in your AndroidManifest.xml\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\nFor IOS: configure [App Transport Security](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33) in your app\n\n#### Tile Overlay using local tiles\n\nTiles can be stored locally within device using xyz tiling scheme and displayed as tile overlay as well. This is usefull especially for offline map usage when tiles are available for selected map region within device storage.\n\n```jsx\nimport {LocalTile} from 'react-native-maps';\n\n<MapView region={this.state.region} onRegionChange={this.onRegionChange}>\n  <LocalTile\n    /**\n     * The path template of the locally stored tiles. The patterns {x} {y} {z} will be replaced at runtime\n     * For example, /storage/emulated/0/mytiles/{z}/{x}/{y}.png\n     */\n    pathTemplate={this.state.pathTemplate}\n    /**\n     * The size of provided local tiles (usually 256 or 512).\n     */\n    tileSize={256}\n  />\n</MapView>;\n```\n\nFor Android: LocalTile is still just overlay over original map tiles. It means that if device is online, underlying tiles will be still downloaded. If original tiles download/display is not desirable set mapType to 'none'. For example:\n\n```\n<MapView\n  mapType={Platform.OS == \"android\" ? \"none\" : \"standard\"}\n>\n```\n\nSee [OSM Wiki](https://wiki.openstreetmap.org/wiki/Category:Tile_downloading) for how to download tiles for offline usage.\n\n### Overlaying other components on the map\n\nPlace components that you wish to overlay `MapView` underneath the `MapView` closing tag. Absolutely position these elements.\n\n```jsx\nrender() {\n  return (\n    <MapView\n      region={this.state.region}\n    />\n    <OverlayComponent\n      style={{position: \"absolute\", bottom: 50}}\n    />\n  );\n}\n```\n\n### Customizing the map style\n\nCreate the json object, or download a generated one from the [google style generator](https://mapstyle.withgoogle.com/).\n\n```jsx\n// The generated json object\nmapStyle = [ ... ]\n\nrender() {\n  return (\n    <MapView\n      region={this.state.region}\n      onRegionChange={this.onRegionChange}\n      customMapStyle={mapStyle}\n    />\n  );\n}\n```\n\nFor iOS, in addition to providing the `mapStyle` you will need to do the following\n\n```jsx\nimport MapView, { PROVIDER_GOOGLE } from 'react-native-maps'\n\n// ...\n\n<MapView\n  provider={PROVIDER_GOOGLE}\n  customMapStyle={MapStyle}\n>\n```\n\nThen add the AirGoogleMaps directory:\n\nhttps://github.com/react-native-maps/react-native-maps/blob/1e71a21f39e7b88554852951f773c731c94680c9/docs/installation.md#ios\n\nAn unofficial step-by-step guide is also available at https://gist.github.com/heron2014/e60fa003e9b117ce80d56bb1d5bfe9e0\n\n### MapView Events\n\nThe `<MapView />` component and its child components have several events that you can subscribe to.\nThis example displays some of them in a log as a demonstration.\n\n![](http://i.giphy.com/3o6UBpncYQASu2WTW8.gif) ![](http://i.giphy.com/xT77YdviLqtjaecRYA.gif)\n\n### Tracking Region / Location\n\n![](http://i.giphy.com/3o6UBoPSLlIKQ2dv7q.gif) ![](http://i.giphy.com/xT77XWjqECvdgjx9oA.gif)\n\n### Programmatically Changing Region\n\nOne can change the mapview's position using refs and component methods, or by passing in an updated\n`region` prop. The component methods will allow one to animate to a given position like the native\nAPI could.\n\n![](http://i.giphy.com/3o6UB7poyB6YJ0KPWU.gif) ![](http://i.giphy.com/xT77Yc4wK3pzZusEbm.gif)\n\n### Changing the style of the map\n\n![](http://i.imgur.com/a9WqCL6.png)\n\n### Arbitrary React Views as Markers\n\n![](http://i.giphy.com/3o6UBcsCLoLQtksJxe.gif) ![](http://i.giphy.com/3o6UB1qGEM9jYni3KM.gif)\n\n### Using the MapView with the Animated API\n\nThe `<MapView />` component can be made to work with the Animated API, having the entire `region` prop\nbe declared as an animated value. This allows one to animate the zoom and position of the MapView along\nwith other gestures, giving a nice feel.\n\nFurther, Marker views can use the animated API to enhance the effect.\n\n![](http://i.giphy.com/xT77XMw9IwS6QAv0nC.gif) ![](http://i.giphy.com/3o6UBdGQdM1GmVoIdq.gif)\n\nIssue: Since android needs to render its marker views as a bitmap, the animations APIs may not be\ncompatible with the Marker views. Not sure if this can be worked around yet or not.\n\nMarkers' coordinates can also be animated, as shown in this example:\n\n![](http://i.giphy.com/xTcnTelp1OwGPu1Wh2.gif) ![](http://i.giphy.com/xTcnT6WVpwlCiQnFW8.gif)\n\n### Polygon Creator\n\n![](http://i.giphy.com/3o6UAZWqQBkOzs8HE4.gif) ![](http://i.giphy.com/xT77XVBRErNZl3zyWQ.gif)\n\n### Other Overlays\n\nSo far, `<Circle />`, `<Polygon />`, and `<Polyline />` are available to pass in as children to the\n`<MapView />` component.\n\n![](http://i.giphy.com/xT77XZCH8JpEhzVcNG.gif) ![](http://i.giphy.com/xT77XZyA0aYeOX5jsA.gif)\n\n### Gradient Polylines (iOS MapKit only)\n\nGradient polylines can be created using the `strokeColors` prop of the `<Polyline>` component.\n\n![](https://i.imgur.com/P7UeqAm.png?1)\n\n### Default Markers\n\nDefault markers will be rendered unless a custom marker is specified. One can optionally adjust the\ncolor of the default marker by using the `pinColor` prop.\n\n![](http://i.giphy.com/xT77Y0pWKmUUnguHK0.gif) ![](http://i.giphy.com/3o6UBfk3I58VIwZjVe.gif)\n\n### Custom Callouts\n\nCallouts to markers can be completely arbitrary react views, similar to markers. As a result, they\ncan be interacted with like any other view.\n\nAdditionally, you can fall back to the standard behavior of just having a title/description through\nthe `<Marker />`'s `title` and `description` props.\n\nCustom callout views can be the entire tooltip bubble, or just the content inside of the system\ndefault bubble.\n\nTo handle press on specific subview of callout use `<CalloutSubview />` with `onPress`.\nSee `Callouts.js` example.\n\n![](http://i.giphy.com/xT77XNePGnMIIDpbnq.gif) ![](http://i.giphy.com/xT77YdU0HXryvoRqaQ.gif)\n\n### Image-based Markers\n\nMarkers can be customized by just using images, and specified using the `image` prop.\n\n![](http://i.imgur.com/mzrOjTR.png)\n\n### Draggable Markers\n\nMarkers are draggable, and emit continuous drag events to update other UI during drags.\n\n![](http://i.giphy.com/l2JImnZxdv1WbpQfC.gif) ![](http://i.giphy.com/l2JIhv4Jx6Ugx1EGI.gif)\n\n### Lite Mode ( Android )\n\nEnable lite mode on Android with `liteMode` prop. Ideal when having multiple maps in a View or ScrollView.\n\n![](http://i.giphy.com/qZ2lAf18s89na.gif)\n\n### On Poi Click (Google Maps Only)\n\nPoi are clickable, you can catch the event to get its information (usually to get the full detail from Google Place using the placeId).\n\n![](https://media.giphy.com/media/3480VsCKnHr31uCLU3/giphy.gif)\n\n### Animated Region\n\nThe MapView can accept an `AnimatedRegion` value as its `region` prop. This allows you to utilize the Animated API to control the map's center and zoom.\n\n```jsx\nimport MapView, { AnimatedRegion, Animated } from 'react-native-maps';\n\ngetInitialState() {\n  return {\n    region: new AnimatedRegion({\n      latitude: LATITUDE,\n      longitude: LONGITUDE,\n      latitudeDelta: LATITUDE_DELTA,\n      longitudeDelta: LONGITUDE_DELTA,\n    }),\n  };\n}\n\nonRegionChange(region) {\n  this.state.region.setValue(region);\n}\n\nrender() {\n  return (\n    <Animated\n      region={this.state.region}\n      onRegionChange={this.onRegionChange}\n    />\n  );\n}\n```\n\n### Animated Marker Position\n\nMarkers can also accept an `AnimatedRegion` value as a coordinate.\n\n```jsx\nimport Mapview, { AnimatedRegion, MarkerAnimated } from 'react-native-maps';\n\ngetInitialState() {\n  return {\n    coordinate: new AnimatedRegion({\n      latitude: LATITUDE,\n      longitude: LONGITUDE,\n    }),\n  };\n}\n\ncomponentWillReceiveProps(nextProps) {\n  const duration = 500\n\n  if (this.props.coordinate !== nextProps.coordinate) {\n    if (Platform.OS === 'android') {\n      if (this.marker) {\n        this.marker.animateMarkerToCoordinate(\n          nextProps.coordinate,\n          duration\n        );\n      }\n    } else {\n      this.state.coordinate.timing({\n        ...nextProps.coordinate,\n        useNativeDriver: true, // defaults to false if not passed explicitly\n        duration\n      }).start();\n    }\n  }\n}\n\nrender() {\n  return (\n    <MapView initialRegion={...}>\n      <MarkerAnimated\n        ref={marker => { this.marker = marker }}\n        coordinate={this.state.coordinate}\n      />\n    </MapView>\n  );\n}\n```\n\n### Take Snapshot of map\n\n```jsx\nimport MapView, { Marker } from 'react-native-maps';\n\ngetInitialState() {\n  return {\n    coordinate: {\n      latitude: LATITUDE,\n      longitude: LONGITUDE,\n    },\n  };\n}\n\ntakeSnapshot () {\n  // 'takeSnapshot' takes a config object with the\n  // following options\n  const snapshot = this.map.takeSnapshot({\n    width: 300,      // optional, when omitted the view-width is used\n    height: 300,     // optional, when omitted the view-height is used\n    region: {..},    // iOS only, optional region to render\n    format: 'png',   // image formats: 'png', 'jpg' (default: 'png')\n    quality: 0.8,    // image quality: 0..1 (only relevant for jpg, default: 1)\n    result: 'file'   // result types: 'file', 'base64' (default: 'file')\n  });\n  snapshot.then((uri) => {\n    this.setState({ mapSnapshot: uri });\n  });\n}\n\nrender() {\n  return (\n    <View>\n      <MapView initialRegion={...} ref={map => { this.map = map }}>\n        <Marker coordinate={this.state.coordinate} />\n      </MapView>\n      <Image source={{ uri: this.state.mapSnapshot.uri }} />\n      <TouchableOpacity onPress={this.takeSnapshot}>\n        Take Snapshot\n      </TouchableOpacity>\n    </View>\n  );\n}\n```\n\n### Zoom to Specified Markers\n\nPass an array of marker identifiers to have the map re-focus.\n\n![](http://i.giphy.com/3o7qEbOQnO0yoXqKJ2.gif) ![](http://i.giphy.com/l41YdrQZ7m6Dz4h0c.gif)\n\n### Zoom to Specified Coordinates\n\nPass an array of coordinates to focus a map region on said coordinates.\n\n![](https://cloud.githubusercontent.com/assets/1627824/18609960/da5d9e06-7cdc-11e6-811e-34e255093df9.gif)\n\n### Troubleshooting\n\n#### My map is blank\n\n- Make sure that you have [properly installed](docs/installation.md) react-native-maps.\n- Check in the logs if there is more informations about the issue.\n- Try setting the style of the MapView to an absolute position with top, left, right and bottom values set.\n- Make sure you have enabled Google Maps API in [Google developer console](https://console.developers.google.com/apis/library)\n\n```javascript\nconst styles = StyleSheet.create({\n  map: {\n    ...StyleSheet.absoluteFillObject,\n  },\n});\n```\n\n```jsx\n<MapView\n  style={styles.map}\n  // other props\n/>\n```\n\n#### Inputs don't focus\n\n- When inputs don't focus or elements don't respond to tap, look at the order of the view hierarchy, sometimes the issue could be due to ordering of rendered components, prefer putting MapView as the first component.\n\nBad:\n\n```jsx\n<View>\n  <TextInput />\n  <MapView />\n</View>\n```\n\nGood:\n\n```jsx\n<View>\n  <MapView />\n  <TextInput />\n</View>\n```\n\n#### Children Components Not Re-Rendering\n\nComponents that aren't declared by this library (Ex: Markers, Polyline) must not be children of the MapView component due to MapView's unique rendering methodology. Have your custom components / views outside the MapView component and position absolute to ensure they only re-render as needed.\nExample:\nBad:\n\n```jsx\n<View style={StyleSheet.absoluteFillObject}>\n  <MapView style={StyleSheet.absoluteFillObject}>\n    <View style={{position: 'absolute', top: 100, left: 50}} />\n  </MapView>\n</View>\n```\n\nGood:\n\n```jsx\n<View style={StyleSheet.absoluteFillObject}>\n  <MapView style={StyleSheet.absoluteFillObject} />\n  <View style={{position: 'absolute', top: 100, left: 50}} />\n</View>\n```\n\nSource: https://github.com/react-native-maps/react-native-maps/issues/1901\n\n#### Crashing with EXC_BAD_ACCESS on iOS when switching apps\n\n`<MapView>` using Apple Maps in `mapType: \"standard\"` will sometimes crash when you background the app or switch into another app. This is only an issue in XCode using Metal API Validation, and won't happen in production. To eliminate this problem even while debugging in XCode, go to `Edit Scheme... -> Run (Debug) -> Diagnostics` and uncheck `Metal -> API Validation`. (h/t [@Simon-TechForm](https://github.com/Simon-TechForm)).\n\nSource: https://github.com/react-native-maps/react-native-maps/issues/3957#issuecomment-924161121\n\n#### onRegionChangeComplete() callback is called infinitely\n\nIf changing the state in `onRegionChangeComplete` is called infinitely, add a condition to limit these calls to occur only when the region change was done as a result of a user's action.\n\n```javascript\nonRegionChangeComplete={ (region, gesture) => {\n\t// This fix only works on Google Maps because isGesture is NOT available on Apple Maps\n\tif (!gesture.isGesture) {\n    return;\n  }\n\n  // You can use\n  dispatch({ type: \"map_region\", payload: { mapRegion: region }}); // if using useReducer\n\t// setMapRegionState(region); // if using useState\n}}\n```\n\nSource: https://github.com/react-native-maps/react-native-maps/issues/846#issuecomment-1210079461\n\n## License\n\n     Copyright (c) 2017 Airbnb\n\n     Licensed under the The MIT License (MIT) (the \"License\");\n     you may not use this file except in compliance with the License.\n     You may obtain a copy of the License at\n\n        https://raw.githubusercontent.com/airbnb/react-native-maps/master/LICENSE\n\n     Unless required by applicable law or agreed to in writing, software\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     See the License for the specific language governing permissions and\n     limitations under the License.\n"}