[{"title":"JDK test tasks do not have dependencies set up correctly","body":"Re-running a test task will not recompile main sources, for example. Probably need to abandon copying the regular test task inputs and set things up ourselves.","comments":[],"labels":["PR welcome"]},{"title":"R8 full mode and @Streaming giving runtime error with minifyEnabled","body":"Using Retrofit 2.9.0 and AGP 8.0.1 with fixes from https:\/\/github.com\/square\/retrofit\/issues\/3751 I still get one more error with R8 in full mode:\r\n\r\n```\r\nE  java.lang.IllegalArgumentException: Response must include generic type (e.g., Response<String>)\r\n     for method ContentApi.getRawFile\r\n        at retrofit2.Utils.methodError(SourceFile:54)\r\n        at retrofit2.Utils.methodError(SourceFile:43)\r\n        at retrofit2.HttpServiceMethod.parseAnnotations(SourceFile:77)\r\n        at retrofit2.ServiceMethod.parseAnnotations(SourceFile:39)\r\n        at retrofit2.Retrofit.loadServiceMethod(SourceFile:202)\r\n        at retrofit2.Retrofit$1.invoke(SourceFile:160)\r\n        at java.lang.reflect.Proxy.invoke(Proxy.java:1006)\r\n        at $Proxy23.getRawFile(Unknown Source)\r\n        at com.kivra.android.repository.ContentFileDownloader.downloadFile(SourceFile:40)\r\n        at com.kivra.android.repository.ContentPartFileTransform.fetchContentFiles(SourceFile:56)\r\n        at com.kivra.android.repository.ContentPartFileTransform.access$fetchContentFiles(SourceFile:28)\r\n        at com.kivra.android.repository.ContentPartFileTransform$transformData$2.invokeSuspend(SourceFile:42)\r\n        at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(SourceFile:33)\r\n        at kotlinx.coroutines.DispatchedTask.run(SourceFile:106)\r\n        at kotlinx.coroutines.internal.LimitedDispatcher.run(SourceFile:42)\r\n        at kotlinx.coroutines.scheduling.TaskImpl.run(SourceFile:95)\r\n        at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(SourceFile:570)\r\n        at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(SourceFile:750)\r\n        at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(SourceFile:677)\r\n        at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(SourceFile:664)\r\n```\r\n\r\nThis is how the signature looks like:\r\n```\r\n    @Streaming\r\n    @GET(\"{apiVersion}\/{actorType}\/{actorKey}\/content\/{contentKey}\/file\/{fileKey}\/raw\/{fileName}\")\r\n    suspend fun getRawFile(\r\n        @Path(\"apiVersion\") apiVersion: String,\r\n        @Path(\"actorType\") actorType: String,\r\n        @Path(\"actorKey\") actorKey: String,\r\n        @Path(\"contentKey\") contentKey: String,\r\n        @Path(\"fileKey\") fileKey: String,\r\n        @Path(\"fileName\") fileName: String\r\n    ): Response<ResponseBody>\r\n```\r\n\r\nMy best guess is that <ResponseBody> is getting stripped away but I don't know how to configure to not remove it. I thought this would have done it but apparently not:\r\n```\r\n# R8 full mode strips generic signatures from return types if not kept.\r\n-if interface * { @retrofit2.http.* public *** *(...); }\r\n-keep,allowoptimization,allowshrinking,allowobfuscation class <3>\r\n```\r\n\r\nSo perhaps something is missing still from this commit: https:\/\/github.com\/square\/retrofit\/commit\/59d302aedce5edae4806efac57b630d4fe8c27db ?","comments":["That commit is not in the released version. Copy it into your project shrinker config and it should work until the next version is released.","Ah sorry! I was meaning to say I added that bit locally and it did not fix this issue","Keeping the replaced rules and adding the new ones from the commit https:\/\/github.com\/square\/retrofit\/commit\/59d302aedce5edae4806efac57b630d4fe8c27db fixed the issue for me.\r\n\r\n```\r\n# With R8 full mode generic signatures are stripped for classes that are not\r\n# kept. Suspend functions are wrapped in continuations where the type argument\r\n# is used.\r\n-keep,allowobfuscation,allowshrinking class kotlin.coroutines.Continuation\r\n-keep,allowobfuscation,allowshrinking interface retrofit2.Call\r\n-keep,allowobfuscation,allowshrinking class retrofit2.Response\r\n\r\n# R8 full mode strips generic signatures from return types if not kept.\r\n-if interface * { @retrofit2.http.* public *** *(...); }\r\n-keep,allowoptimization,allowshrinking,allowobfuscation class <3>\r\n```","I have same problem when update AndroidStudio Flamingo & Gradle8.0.2\r\nWhen i call a post method,  crash:\r\n` java.lang.IllegalArgumentException: Unable to create call adapter for interface w4.d`\r\n\r\nBut i solve this\uff0c add [\"retrofit\/src\/main\/resources\/META-INF\/proguard\/retrofit2.pro\"](https:\/\/github.com\/square\/retrofit\/blob\/master\/retrofit\/src\/main\/resources\/META-INF\/proguard\/retrofit2.pro) all code into my proguard-rules.pro file\r\n \r\nMaybe we can wait for retrofit2 update new version to solve this problem totally.\r\n\r\n","I am facing a similar issue with `@Streaming` annotated functions, not really a crash but just the app loading forever (only on minified builds).\r\nWhat is interesting to point out is:\r\n- This works on debug builds (`minifyEnbaled = false`)\r\n- This does not works on signed builds (`minifyEnbaled = true`). Note: Tried both fullR8Support enabled and disabled.\r\n- This works on signed builds (`minifyEnbaled = true`) if I add the `HttpLoggingInterceptor`\r\n\r\nFinally, I have 2 very similar interfaces that are `@Streaming` annotated, and one works while the other doesn't (on signed builds with `minifyEnbaled = true`).\r\nThe working one is something like\r\n```\r\n    @Streaming\r\n    @GET\r\n    suspend fun downloadFile(@Url fileUrl: String): ResponseBody\r\n```\r\n\r\nThe **non**-working one is something like:\r\n```\r\n    @Streaming\r\n    @GET(\"api\/{${MY_ID}}\/bob\")\r\n    suspend fun downloadDocument(@Path(MY_ID) myId: String, @Query(TYPE) type: String): ResponseBody\r\n```\r\n\r\nThe only difference I can spot between the two is the different types of params added?\r\n\r\nUpdate: removing the `@Streaming` tag solves the issue \ud83e\udd14  Although that could be explained by the network protocol not supporting it, it still doesn't explain why it works on debug builds or with the logging interceptor \ud83d\ude05 "],"labels":["Needs Info"]},{"title":"Client-Side host load-balance","body":" - [ ] Feature Request. i have found my company use client-side ip load-balance,the http domain is a special service identifier\uff0cfor example:global-user-credit\uff0cthen have a common method to get ip list from register center,then perform client-side load balancing\u3002but this special service identifier cannot be recognized by retrofit\u2018s HttpUrl class.so i have requirement,the  OkHttpClient.Builder to provider a new method ,for example:baseUrlFactory\uff0callows us to dynamically set base IP.","comments":["Our general policy for this has been to use an OkHttp interceptor to rewrite the Request object to target the desired host. You can use a global host at the Retrofit layer or even just use a dummy domain like `example.com` to ensure the interceptor is required to rewrite the URL.\r\n\r\nIn the future, we may consider a factory for base URLs which is invoked each time a request is created."],"labels":["Feature"]},{"title":"Throwing retrofit2.HttpException HTTP 500 Internal Server Error, although exception is handled","body":"I am using coroutines to call the api, If the response code is 500 then the app is crashing even though I'm catching the exception. Below is the implementation:\r\n```\r\ninterface OnboardingApi {\r\n        @PUT(\"\/verifyOtp\")\r\n        suspend fun verifyOtp(@Body verifyOtpRequest: VerifyOtpRequest): Response<VerifyOtpResponse?>\r\n}\r\n\r\noverride suspend fun verifyOtp(verifyOtpPayload: VerifyOtpPayload): VerifyOtpResponse? {\r\n        try {\r\n            val response = onboardingApi.verifyOtp(\r\n                VerifyOtpRequest(\r\n                    getDeviceDetails(sharedPreferencesHelper),\r\n                    verifyOtpPayload.mobile,\r\n                    verifyOtpPayload.otp\r\n                )\r\n            )\r\n            return if (response.isSuccessful) {\r\n                response.body()\r\n            } else {\r\n                RetrofitUtils.getErrorBody<VerifyOtpResponse>(response.errorBody())\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            FirebaseCrashlytics.getInstance().recordException(e)\r\n        }\r\n        return null\r\n    }\r\n\r\nand here is the stacktrace of the crash:\r\nFatal Exception: retrofit2.HttpException: HTTP 500 Internal Server Error\r\n       at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.java:53)\r\n       at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:161)\r\n       at com.google.firebase.perf.network.InstrumentOkHttpEnqueueCallback.onResponse(InstrumentOkHttpEnqueueCallback.java:71)\r\n       at okhttp3.RealCall$AsyncCall.execute(RealCall.java:203)\r\n       at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1162)\r\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:636)\r\n       at java.lang.Thread.run(Thread.java:764)```","comments":["I have the same issue, any updates on this? ","Is this really a Retrofit2 problem or an internal FirebasePerf problem (I'm having the same issue)","I have the same issue with no dependencies on Firebase. The issue is in okhttp: any status code != 200 throws an unhandled exception, causing a crash. Timeout also causes app crash.","any update on this still having it ?","> any update on this still having it ?\r\n\r\nI personally searched in my codebase and then found a code like this in a `okhttp3.Authenticator`. (inside of its `authenticate()` method)\r\n\r\n```kotlin\r\nsomeCoroutineScope.launch {\r\n            \/\/ a retrofit call gets 4XX\r\n        }\r\n```\r\n\r\nbut it needs to have exception handlers:\r\n\r\n```kotlin\r\nscope.launch(CoroutineExceptionHandler { _, ex -> logThisException(ex) }) {\r\n            \/\/ a retrofit call gets 4XX\r\n        }\r\n```\r\n\r\nthis is how i fixed for now.","> > any update on this still having it ?\r\n> \r\n> I personally searched in my codebase and then found a code like this in a `okhttp3.Authenticator`. (inside of its `authenticate()` method)\r\n> \r\n> ```kotlin\r\n> someCoroutineScope.launch {\r\n>             \/\/ a retrofit call gets 4XX\r\n>         }\r\n> ```\r\n> \r\n> but it needs to have exception handlers:\r\n> \r\n> ```kotlin\r\n> scope.launch(CoroutineExceptionHandler { _, ex -> logThisException(ex) }) {\r\n>             \/\/ a retrofit call gets 4XX\r\n>         }\r\n> ```\r\n> \r\n> this is how i fixed for now.\r\n\r\nIf I use that exception handler, I lose the original exception and get\r\n```\r\nCoroutineCancelationException\r\n```\r\nI need to recover the original OkHttp exception, which has messages from the server","Same issue here.. any one found any solution yet?","Without a failing test case or minimally-reproducing sample project that demonstrates the problem it's impossible to know what's going on. I'll leave the issue open for 30 days in case someone wants to make one of those to aid us in debugging."],"labels":["Needs Info"]},{"title":"Add support for Kotlin's Result","body":"Now that inline classes are stable in Kotlin 1.5.0, it would be nice to have API endpoints return [Result](https:\/\/kotlinlang.org\/api\/latest\/jvm\/stdlib\/kotlin\/-result\/) to wrap the outcome (success\/failure) of a retrofit call, instead of returning a value or throwing an exception.\r\n\r\nFor example:\r\n\r\n```\r\n@GET(\"me\")\r\nsuspend fun getUser(): Result<User>\r\n```","comments":["I doubt if Retrofit should support kotlin Result at this moment, because returning kotlin Result from functions is not the default behavior.\r\n\r\nAnyway, [this call adapter](https:\/\/gist.github.com\/kobito-kaba\/1c209f01a74d190beb771ba7567a4d91) will work for your use case.\r\nnote:\r\nThat call adapter will work for `suspend fun foo() : Result<Foo>` , but won't work for `fun foo(): Result<Foo>` in some reasons.","Initially I thought that might be a good addition, but I guess you can always use [runCatching](https:\/\/kotlinlang.org\/api\/latest\/jvm\/stdlib\/kotlin\/run-catching.html) if you want the type wrapped in `Result`\r\n\r\n```\r\nval user: Result<User> = runCatching {\r\n    api.getUser()\r\n }\r\n```","> val user: Result\\u003CUser> = runCatching {\\n    api.getUser()\\n }\n\n","You can try my solution - https:\/\/github.com\/agamula90\/RetrofitKx, hosted on mavenCentral, based on retrofit + moshi + ksp if you are are looking for better kotlin api"],"labels":["Feature"]},{"title":"Service interface extending doesn't work with Proguard\/R8","body":"Hi, since latest versions now support service interface subclassing, as to facilitate versioning, I did just so\r\n\r\n```\r\ninterface ConfigApi {\r\n    suspend fun configuration(): Response<ConfigurationResponse>\r\n}\r\n\r\ninterface V1ConfigAp : ConfigApi {\r\n    @GET(\"api\/v1\/config\")\r\n    override suspend fun configuration(): Response<ConfigurationResponse>\r\n}\r\n\r\ninterface V2ConfigAp : ConfigApi {\r\n    @GET(\"api\/v2\/config\")\r\n    override suspend fun configuration(): Response<ConfigurationResponse>\r\n}\r\n```\r\nI'm on android. If run in debug, everything works.\r\nIf run with R8 turned on, at runtime I get\r\n```\r\n2021-03-26 18:10:06.503 22986-23211\/foo.bar W\/Default: HTTP method annotation is required (e.g., @GET, @POST, etc.).\r\n        for method b.a\r\n    java.lang.IllegalArgumentException: HTTP method annotation is required (e.g., @GET, @POST, etc.).\r\n        for method b.a\r\n\r\n```\r\n\r\nIf I explicitly keep the class `-keep class foo.bar.V2ConfigApi { *; }` it works\r\n\r\nIt appears R8 ignores the \"implementing\" interface V2ConfigApi (Its only reference is in a dagger module provider method, and nowhere else), and just uses the base one, which obviously doesn't have the annotations.\r\n\r\nI can live with the keep rule for now, but it's footgunny, since almost nothing requires app level keep rules now\r\nIs there a general rule to be extracted? (and then possibly merged into the library)\r\n\r\nAndroid\r\nAGP 4.1.2\r\nRetrofit 2.9.0","comments":["Although I'd naively expect this to already be that general rule\r\n\r\nhttps:\/\/github.com\/square\/retrofit\/blob\/master\/retrofit\/src\/main\/resources\/META-INF\/proguard\/retrofit2.pro#L9",":\/","As a workaround we could annotate the base class too:\r\n\r\n```\r\ninterface ConfigApi {\r\n    @GET(\"api\/v1\/config\")\r\n    suspend fun configuration(): Response<ConfigurationResponse>\r\n}\r\n\r\ninterface V1ConfigAp : ConfigApi {\r\n    @GET(\"api\/v1\/config\")\r\n    override suspend fun configuration(): Response<ConfigurationResponse>\r\n}\r\n\r\n\r\ninterface V2ConfigAp : ConfigApi {\r\n    @GET(\"api\/v2\/config\")\r\n    override suspend fun configuration(): Response<ConfigurationResponse>\r\n}\r\n```","I need a project which reproduces the behavior in order to investigate.","@JakeWharton created a reproducible sample here: https:\/\/github.com\/dmytroKarataiev\/RetrofitProguard\/tree\/master","`-keep class kotlin.coroutines.Continuation`"],"labels":["Needs Info"]},{"title":"Make HttpException implement CopyableThrowable + add test","body":"Fixes https:\/\/github.com\/square\/retrofit\/issues\/3474","comments":["@ferinagy @frantisek-nagy just created a fork with your changes and it seems like I still don't get the stack trace of the call site, am I missing anything? Not sure how tests are working fine.","> @ferinagy @frantisek-nagy just created a fork with your changes and it seems like I still don't get the stack trace of the call site, am I missing anything? Not sure how tests are working fine.\r\n\r\nHi, maybe you are hitting this case? https:\/\/github.com\/Kotlin\/kotlinx.coroutines\/issues\/2607 ","> > @ferinagy @frantisek-nagy just created a fork with your changes and it seems like I still don't get the stack trace of the call site, am I missing anything? Not sure how tests are working fine.\r\n> \r\n> Hi, maybe you are hitting this case? [Kotlin\/kotlinx.coroutines#2607](https:\/\/github.com\/Kotlin\/kotlinx.coroutines\/issues\/2607)\r\n\r\nOh, I see, any workaround for this?"],"labels":["Blocked"]},{"title":"When using suspending async\/await, stacktrace contains no application code","body":"Can be reproduced by simple test:\r\n\r\n```kotlin\r\n  @Test fun await404() {\r\n    val retrofit = Retrofit.Builder()\r\n            .baseUrl(server.url(\"\/\"))\r\n            .addConverterFactory(ToStringConverterFactory())\r\n            .build()\r\n    val example = retrofit.create(Service::class.java)\r\n\r\n    server.enqueue(MockResponse().setResponseCode(404))\r\n\r\n    try {\r\n      runBlocking {\r\n        val deferred = async { example.body()  }\r\n\r\n        deferred.await()\r\n      }\r\n      fail()\r\n    } catch (e: HttpException) {\r\n      val writer = StringWriter()\r\n      e.printStackTrace(PrintWriter(writer))\r\n\r\n      val trace = writer.toString()\r\n\r\n      assertThat(\"KotlinSuspendTest\" in trace).isTrue()\r\n      assertThat(\"await404\" in trace).isTrue()\r\n    }\r\n  }\r\n```\r\n\r\nBy default the stacktrace will look like:\r\n\r\n```\r\nretrofit2.HttpException: HTTP 404 Client Error\r\n\tat retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)\r\n\tat retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:161)\r\n\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:174)\r\n\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\nThis is not very helpful, as we don't know which call caused the exception. \r\n\r\nAttempt at fixing can be found in https:\/\/github.com\/square\/retrofit\/pull\/3475, comments appreciated. That would lead to following trace:\r\n\r\n```\r\nretrofit2.HttpException: HTTP 404 Client Error\r\n\t(Coroutine boundary)\r\n\tat retrofit2.KotlinSuspendTest$await404$1$deferred$1.invokeSuspend(KotlinSuspendTest.kt:190)\r\nCaused by: retrofit2.HttpException: HTTP 404 Client Error\r\n\tat retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)\r\n\tat retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:161)\r\n\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:174)\r\n\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```","comments":["Requires `CopyableThrowable` to move to stable first, unfortunately.","That is unfortunate, I did not notice it still has `@ExperimentalCoroutinesApi`.\r\n\r\nIs there anyway we could do this locally - like via some `CallAdapter`? Or do we need to fork + use `CopyableThrowable`?\r\n\r\nBecause right now, we are having crashes with stacktrace without any app code in our crash console with no way to find where they are coming from.","I have added wrong headers that caused me that HTTP 400 Bad request error.\r\n\r\nremoving the following worked\r\n      .addHeader(\"Content-Encoding\", \"UTF-8\")\r\n      .header(\"Accept-Encoding\", \"identity\")\r\n      \r\n      might help someone\r\n      ","Here is a 'small but ugly' workaround that I use:\r\n\r\n        \/\/ workaround for https:\/\/github.com\/square\/retrofit\/issues\/3474 so that we can see the URL and where the stacktraces came from\r\n        fun wrapToBeTraceable(throwable: Throwable): Throwable {\r\n            if (throwable is HttpException) {\r\n                return Exception(\"${throwable.response()}\", throwable)\r\n            }\r\n            return throwable\r\n        }\r\n\r\nAnd then in all my catch blocks I invoke wrapToBeTraceable() in the exception\r\nI still dont get the exact call site, but the stack trace will indicate which catch-block that wrapped the Exception, and that's much better than nothing.\r\n\r\n\r\nAnd then I add it to the uncaught exceptions handlers as well\r\n\r\n    private fun setUncaughtCrashHandler() {\r\n        val priorExceptionHandler = Thread.getDefaultUncaughtExceptionHandler()\r\n        Thread.setDefaultUncaughtExceptionHandler { t, throwable ->\r\n            \/\/ workaround for retrofit+coroutines that will not show the real original call stack trace\r\n            val e = Logger.wrapToBeTraceable(throwable)   \r\n            priorExceptionHandler?.uncaughtException(t, e)\r\n        }\r\n    }\r\n\r\nAs I said its ugly, but I cant see any other options :-| \r\n","> `CopyableThrowable`\u4e0d\u5e78\u7684\u662f\uff0c\u9700\u8981\u5148\u7a33\u5b9a\u4e0b\u6765\u3002\r\n\r\nI change net request to coroutine ,  My code also happened , CoroutineExceptionHandler and try cach  all can not  solve , I am going to collapse","This issue is still occurring on com.squareup.retrofit2:retrofit:2.9.0\r\n\r\nFatal Exception: retrofit2.HttpException: HTTP 422 Unprocessable Entity\r\n       at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)\r\n       at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:161)\r\n       at okhttp3.RealCall$AsyncCall.execute(RealCall.java:174)\r\n       at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)\r\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)\r\n       at java.lang.Thread.run(Thread.java:929)\r\n\r\nMy stacktrace does not refer to any application code. Are there any workarounds? ","Yes @Red7M , you can surround all calls to retrofit in try\/catch blocks.\r\nAnd then you invoke wrapToBeTraceable() to get the real stack trace:\r\nLike\r\n```\r\n            try {\r\n                ... some call to retrofit\r\n            } catch (notUseFullExteption: Exception) {\r\n                val useFullExteption = Logger.wrapToBeTraceable(notUseFullExteption) \r\n                useFullExteption.printStackTrace()  \/\/ or whatever logging\r\n            }\r\n\r\n```\r\nits ugly but the only way I can see to get at least some useful information.\r\n\r\n\r\n","Any updates on this? @JakeWharton \r\nIn our last release we have thousands of 502 errors and no way of finding out what call exactly caused them. Not blaiming Retrofit, just stating. I will try the workaround and hope for the best.","Use an OkHttp interceptor and look up the `Invocation` tag on the `Request` to attribute status codes back to functions.\n\nUpdates will be posted as comments or status changes on the issue.","Very nice, thank you! That was tremendously helpful :)\r\n\r\nIf anyone here has the same problem, here is our implementation of such an interceptor:\r\n\r\n```\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics\r\nimport okhttp3.Interceptor\r\nimport okhttp3.Response\r\nimport retrofit2.HttpException\r\nimport retrofit2.Invocation\r\nimport timber.log.Timber\r\n\r\n\/**\r\n * This Interceptor will log unsuccessful http calls to crashlytics with a hint of the last calling method name.\r\n *\/\r\nclass InvocationInterceptor(private val additionalLog: String) : Interceptor {\r\n\r\n    override fun intercept(chain: Interceptor.Chain): Response {\r\n\r\n        val request = chain.request()\r\n        val tag = request.tag(Invocation::class)\r\n        val response = chain.proceed(request)\r\n\r\n        if (!response.isSuccessful && tag != null){\r\n            val clazz = tag.method().declaringClass.`package`?.name + tag.method().declaringClass.name\r\n            val method = tag.method().name\r\n            val arguments = tag.arguments()\r\n            val responseCode = response.code\r\n            val message = \"+++ Unsuccessful HTTP Call [$responseCode]: $clazz.$method $arguments ($additionalLog)\"\r\n\r\n            Timber.e(message)\r\n            FirebaseCrashlytics.getInstance().recordException(RuntimeException(message))\r\n        }\r\n\r\n        return response\r\n    }\r\n\r\n}\r\n```","> Very nice, thank you! That was tremendously helpful :)\r\n> \r\n> If anyone here has the same problem, here is our implementation of such an interceptor:\r\n> \r\n\r\ntag.arguments()  may contain PII data and probably shouldn't be logged to firebase if you care about that. For us it was enough to take tag.method().toString() to get useful information about what triggered the request. And then we just sent it as a log so that it will be uploaded to Crashlytics only if a crash is logged.\r\n\r\nIt will log something like this:\r\n\r\n_Network request called from: public abstract java.lang.Object foo.bar.SomeClient.doNetworkRequest(java.lang.Double,kotlin.coroutines.Continuation)_\r\n\r\n\r\n```\r\nclass InvocationInterceptor : Interceptor {\r\n    override fun intercept(chain: Interceptor.Chain): Response {\r\n        val request = chain.request()\r\n        request.tag(Invocation::class.java)?.let {\r\n            val method = tag.method().toString()\r\n            val message = \"Network request called from: $method\"\r\n            FirebaseCrashlytics.getInstance().log(message)\r\n        } ?: FirebaseCrashlytics.getInstance().recordException(RuntimeException(\"No Invocation tag found on request.\"))\r\n        \r\n        return chain.proceed(request)\r\n    }\r\n}\r\n```","\r\nTo prevent the app from crashing, I incorporated the following code into the application that inherits from the base application class.\r\n\r\nThread.setDefaultUncaughtExceptionHandler { thread: Thread, throwable: Throwable ->\r\n            \/\/ Handle the uncaught exception, e.g., log it or report it\r\n            Log.d(TAG, \"exceptionsHandler: ${throwable.message}\")\r\n}\r\n"],"labels":["Enhancement","Blocked"]},{"title":"Tags try to sign","body":"They shouldn't.\r\n\r\nhttps:\/\/github.com\/square\/retrofit\/runs\/686587741","comments":["Same Problem..."],"labels":["Bug"]},{"title":"Conditional retrofit's call cancellation on dispose in RxJavaCallAdapter","body":"[Feature] request\r\nCurrently retrofit's call is cancelled as soon as RxJava subscription is disposed, i.e.\r\nhttps:\/\/github.com\/square\/retrofit\/blob\/46dc939a0dfb470b3f52edc88552f6f7ebb49f42\/retrofit-adapters\/rxjava2\/src\/main\/java\/retrofit2\/adapter\/rxjava2\/CallEnqueueObservable.java#L94\r\n\r\nSometimes client doesn't need the result of execution right in place but the result is required later.\r\n\r\nThere is an option to mark scheduler in RxJava as interruptible or not. But continuously running thread will not allow retrofit call proceed if subscription was disposed because of call cancellation from the link above.","comments":["OkHttp will interrupt the thread itself if you are using blocking requests. Can you express the problem in some kind of test case or sample that I can run? I'm not really understanding what you think the problem is in practice.","Preconditions:\r\n1. I have a bunch of requests. \r\n2. The next one debounce(disposes) the previous one.\r\n3. I have OkHttpInterceptor installed to check if my access_token is expired or about to be expired. There is a synchronous logic of refreshing token inside interceptor. \r\n4. All synchronization logic between all requests done on interceptor's level. Every upcoming request is waiting while token is refreshing.\r\n\r\nProblem:\r\nIf one of the latest requests has started refreshing token and the next one is trying to dispose it the result of refreshing token will be lost cause call cancellation.\r\n\r\nOf course there are multiple other approaches how to avoid this problem and let the previous API call to be cancelled. But I realized that it's kind of limitation from retrofit + rx part.\r\n\r\nIf I understand the logic of https:\/\/github.com\/square\/retrofit\/blob\/46dc939a0dfb470b3f52edc88552f6f7ebb49f42\/retrofit-adapters\/rxjava2\/src\/main\/java\/retrofit2\/adapter\/rxjava2\/CallEnqueueObservable.java \r\ncorrectly, every time rx subscription is disposed - http call is canceled.\r\n\r\nWhat if I want to dispose the subscription but keep api call running?\r\n\r\nLet's say in Android I'm leaving an activity and dispose all the requests cause I don't need my pending APIs calling the target activity back cause it is not running any more. And I don't want to prevent pending APIs reach the server. With this sample I don't mean that API calls tied up on activity's logic and the right solution would be moving them out to Worker or something like that.\r\nIt's just for demonstration purpose.\r\n\r\nMy final thoughts are the following: It makes sense to let API call continue to execute event if the subscription was disposed. I think it's strong relation between Rx and Retrofit.\r\nFor example: there is an experimental API in Rx's Schedulers which allow us to control the behavior of Scheduler Worker: http:\/\/reactivex.io\/RxJava\/javadoc\/io\/reactivex\/schedulers\/Schedulers.html#from-java.util.concurrent.Executor-boolean-\r\n\r\nRelated question on stackoverflow:\r\nhttps:\/\/stackoverflow.com\/questions\/47794454\/prevent-dispose-to-cancel-network-request\r\n","@danaimset did you get any fix for that case?\r\n\r\n@JakeWharton I have the same problem, the refresh token request is interrupted because it is triggered dispose of."],"labels":["Needs Info"]},{"title":"Invocation on package private interface not supported in Java 14","body":"Java 14 changes some of the rules on method handle invocations, which requires minor adjustments to dynamic proxies. This restricts some invocations due to not having the same level of access permissions.\r\n\r\nI haven't looked into your implementation, but in my own usage I had to change a call from\r\n`.privateLookupIn(interfaceClass, MethodHandles.lookup().in(interfaceClass))`\r\nto\r\n`.privateLookupIn(interfaceClass, MethodHandles.lookup())`.\r\n\r\nThe following passes on Java 11 and fails on Java 14.\r\n\r\n```java\r\npublic class InvokeTest {\r\n\r\n  @Test\r\n  public void invoke() throws IOException {\r\n    Retrofit retrofit = new Retrofit.Builder()\r\n        .baseUrl(\"https:\/\/example.com\/\")\r\n        .build();\r\n    var client = retrofit.create(Client.class);\r\n    client.syncCall();\r\n  }\r\n\r\n  interface Client {\r\n    @GET(\"\/call\")\r\n    Call<Void> call();\r\n\r\n    default Response<Void> syncCall() throws IOException {\r\n      return call().execute();\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n<details>\r\n<summary>\r\nIllegalAccessException: class is not public\r\n<\/summary>\r\nFAILED: invoke\r\njava.lang.reflect.UndeclaredThrowableException\r\n\tat $Proxy7.syncCall(Unknown Source)\r\n\tat InvokeTest.invoke(InvokeTest.java:23)\r\n\tat java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base\/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base\/java.lang.reflect.Method.invoke(Method.java:564)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base\/java.util.ArrayList.forEach(ArrayList.java:1510)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:766)\r\n\tat org.testng.TestRunner.run(TestRunner.java:587)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:384)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:286)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1109)\r\n\tat org.testng.TestNG.runSuites(TestNG.java:1039)\r\n\tat org.testng.TestNG.run(TestNG.java:1007)\r\n\tat org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)\r\n\tat org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)\r\n\tat org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)\r\nCaused by: java.lang.IllegalAccessException: class is not public: InvokeTest$Client.syncCall[Ljava.lang.Object;@3a4621bd\/invokeSpecial, from interface InvokeTest$Client (unnamed module @31dadd46)\r\n\tat java.base\/java.lang.invoke.MemberName.makeAccessException(MemberName.java:954)\r\n\tat java.base\/java.lang.invoke.MethodHandles$Lookup.checkAccess(MethodHandles.java:2977)\r\n\tat java.base\/java.lang.invoke.MethodHandles$Lookup.checkMethod(MethodHandles.java:2917)\r\n\tat java.base\/java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(MethodHandles.java:3062)\r\n\tat java.base\/java.lang.invoke.MethodHandles$Lookup.getDirectMethodNoSecurityManager(MethodHandles.java:3055)\r\n\tat java.base\/java.lang.invoke.MethodHandles$Lookup.unreflectSpecial(MethodHandles.java:2540)\r\n\tat retrofit2.Platform.invokeDefaultMethod(Platform.java:111)\r\n\tat retrofit2.Retrofit$1.invoke(Retrofit.java:147)\r\n\t... 30 more\r\n<\/details>","comments":["Thanks for the report. We finally have the infrastructure to actually test this and it seems like we're missing coverage for this case. It _was_ mitigated for early Java versions but I guess we omitted a test. Either that or the fact that our tests live in the same package as the code means we're not testing what we think (since that's the shape of nearly all of our tests). Will look.","Yep. Reproduced by moving our existing default method tests to a subpackage.\r\n\r\n`privateLookupIn` is Java 9+ so we either need to reflect on that or move to a multi-release jar. Any thoughts on that? When we fixed #3281 the person wasn't too keen on MR jars because they shadow the library.","It was trivial to fix by making the interface public and since the outer class was package private it had no visibility leak. I\u2019d be fine with this in your backlog, but you might not be since others will upgrade slowly and might hit this.\r\n\r\nI would use reflection, as I did similar in caffeine for a Java 9 api (delayedExecutor). If you cache the method object it is fast to invoke. MRJars are poorly supported and very rare, so I wouldn\u2019t have a popular project be the first adopter.\r\n\r\nThere was a memory leak with method handles that bit me in JDK8, which you should probably be aware of. https:\/\/github.com\/ben-manes\/caffeine\/issues\/222"],"labels":["Bug"]},{"title":"JaxbConverterFactory doesn't recognize @XmlJavaTypeAdapter","body":"What kind of issue is this?\r\n\r\n - [ ] Question. This issue tracker is not the place for questions. If you want to ask how to do\r\n       something, or to understand why something isn't working the way you expect it to, use Stack\r\n       Overflow. https:\/\/stackoverflow.com\/questions\/tagged\/retrofit\r\n\r\n - [ ] Bug report. If you\u2019ve found a bug, spend the time to write a failing test. Bugs with tests\r\n       get fixed. Here\u2019s an example: https:\/\/gist.github.com\/swankjesse\/6608b4713ad80988cdc9\r\n\r\n - [x] Feature Request. Start by telling us what problem you\u2019re trying to solve. Often a solution\r\n       already exists! Don\u2019t send pull requests to implement new features without first getting our\r\n       support. Sometimes we leave features out on purpose to keep the project small.\r\n\r\nThe way JAXB deals with classes that doesn't have a no-arg constructor or classes with final fields is by using an [XmlAdapter](https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/javax\/xml\/bind\/annotation\/adapters\/XmlAdapter.html), and to configure an XmlAdapter for some class, we need to annotate this class with [XmlJavaTypeAdapter](https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/javax\/xml\/bind\/annotation\/adapters\/XmlJavaTypeAdapter.html).\r\n\r\nThe problem happens if the root is an immutable class, in this case, the root java class will be annotated with `XmlJavaTypeAdapter`, which the JaxbConverterFactory doesn't recognize (it only checks `isAnnotationPresent` for `XmlRootElement`), and will return a null value, so retrofit will assume that the request\/response cannot be converted using JAXB.\r\n\r\nIt would be an easy change to also check for XmlJavaTypeAdapter annotation.\r\n\r\nComplete tutorial: http:\/\/blog.bdoughan.com\/2010\/12\/jaxb-and-immutable-objects.html","comments":["My question is \"why Jaxb is suggested solution\" if it does not support no-arg constructor classes? Its almost all Data Classes in Kotlin when dealing with Api.","Well... I honestly didn't try to analyse the impact of this bug in Kotlin, I was trying to do it in Java. But, regardless of the language, Jaxb does know how to support no-arg constructor classes, it's the retrofit library that doesn't check for all annotations used by Jaxb. It is not about Jaxb being the suggested solution, I don't if it the best solution, it totally depends on what you are trying to do with retrofit, but the fact remains that retrofit has Jaxb converters, so it only make sense for this support to be complete, especially that this bug impacts only cases where the root class is immutable, so this is clearly a defect, not something that is left out by design.\r\n\r\nAlso, the simpleXML is deprecated, and the readme clearly directs the user to go for Jaxb, so in case I am dealing with an endpoint that accepts\/returns an XML request\/response body, I'll need to use Jaxb."],"labels":["Bug"]},{"title":"java.io.EOFException: End of input at line 1 column 1 path $","body":"I launch this request with retrofit_version = '2.6.2'\r\nMy data actually get saved on my Server (API) Side but I still get this error\r\n\r\nMy Retrofit Request\r\nRequest{method=POST, url=http:\/\/poseidon.mail.com:8080\/api\/networkers\/, tags={class retrofit2.Invocation=za.co.zone.marketingapp.data.network.api.MarketingApiService.upsertNetworkerAsync() [NetworkerData(id=null, name=Steve, lastName=Jobs, phone=1081010810, email=steve.jobs@gmail.com, timestamp=2019-10-15T10:32:27.641, addressId=null, networkerSettings=null, networkerSecurity=NetworkerSecurity(username=steve, password=password, active=true, roles=[USER, API], permissions=[USER, API]))]}}\r\n\r\nE\/AndroidRuntime: FATAL EXCEPTION: main\r\n    Process: za.co.zone.marketingapp, PID: 27127\r\n    java.io.EOFException: End of input at line 1 column 1 path $\r\n        at com.google.gson.stream.JsonReader.nextNonWhitespace(JsonReader.java:1397)\r\n        at com.google.gson.stream.JsonReader.doPeek(JsonReader.java:550)\r\n        at com.google.gson.stream.JsonReader.peek(JsonReader.java:426)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:207)\r\n        at retrofit2.converter.gson.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:39)\r\n        at retrofit2.converter.gson.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:27)\r\n        at retrofit2.OkHttpCall.parseResponse(OkHttpCall.java:225)\r\n        at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:121)\r\n        at okhttp3.RealCall$AsyncCall.execute(RealCall.java:206)\r\n        at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)\r\n        at java.lang.Thread.run(Thread.java:764)\r\nI\/Process: Sending signal. PID: 27127 SIG: 9\r\nProcess 27127 terminated.","comments":["Setting some debugging points to capture the true request to simulate the POST with Postman I got the following results confirming that the request is valid and the returning data is actually perfect\r\nI copied the JSON value directly from the debugger and pasted it into Postman - set the POST URL and executed with perfect result! \r\n![RetrofitBug1](https:\/\/user-images.githubusercontent.com\/22202038\/66836392-85f80180-ef61-11e9-9d9a-5417d502988b.JPG)\r\n![RetrofitBug2](https:\/\/user-images.githubusercontent.com\/22202038\/66836401-885a5b80-ef61-11e9-86f2-a42056bb5b8b.JPG)\r\n\r\n\r\n","This usually happens when you inadvertantly consume the body in an interceptor. Do you have any interceptors? Can you express the problem in a failing test case or executable sample?","This is my API I guess the addInterceptor(requestInterceptor) is a good starting point?\r\naddInterceptor(connectivityInterceptor)  handles the event of no internet connections\r\n\r\nThis exact API works for the @GET request perfectly! but failes on the @POST\r\nThanx so far @JakeWharton \r\n```\r\ninterface MarketingApiService {\r\n\t\r\n\t@GET(value = PROGRESS_URL)\r\n\tfun getProgressAsync(): Deferred<ProgressResponse>\r\n\t\r\n\t@GET(value = \"$PROGRESS_URL\/{ID}\")\r\n\tfun getProgressSelfAsync(@Path(value = \"ID\") ID: String): Deferred<ProgressEntry>\r\n\t\r\n\t@POST(value = PROGRESS_URL)\r\n\tfun upsertProgressEntryAsync(@Body progressData: ProgressData): Deferred<ProgressEntry>\r\n\t\r\n\tcompanion object {\r\n\t\toperator fun invoke(\r\n\t\t\tconnectivityInterceptor: ConnectivityInterceptor \/\/ injecting interface (Kodein)\r\n\t\t): MarketingApiService {\r\n\t\t\t\r\n\t\t\tval requestInterceptor = Interceptor { chain ->\r\n\t\t\t\t\r\n\t\t\t\tval url = chain.request()\r\n\t\t\t\t\t.url()\r\n\t\t\t\t\t.newBuilder()\r\n\t\t\t\t\t.build()\r\n\t\t\t\tval request = chain.request()\r\n\t\t\t\t\t.newBuilder()\r\n\t\t\t\t\t.url(url)\r\n\t\t\t\t\t.build()\r\n\t\t\t\t\r\n\t\t\t\treturn@Interceptor chain.proceed(request)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tval okHttpClient = OkHttpClient.Builder()\r\n\t\t\t\t.addInterceptor(requestInterceptor)\r\n\t\t\t\t.addInterceptor(connectivityInterceptor) \/\/ injected interface via Kodein\r\n\t\t\t\t.build()\r\n\t\t\t\r\n\t\t\treturn Builder()\r\n\t\t\t\t.client(okHttpClient)\r\n\t\t\t\t.baseUrl(BASE_URL)\r\n\/\/\t\t\t\t.addConverterFactory(nullOnEmptyConverterFactory)\r\n\t\t\t\t.addCallAdapterFactory(CoroutineCallAdapterFactory())\r\n\t\t\t\t.addConverterFactory(GsonConverterFactory.create())\r\n\t\t\t\t.build()\r\n\t\t\t\t.create(MarketingApiService::class.java)\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nand the interceptor\r\n```\r\nclass ConnectivityInterceptorImpl(\r\n\tcontext: Context\r\n) : ConnectivityInterceptor {\r\n\t\r\n\tprivate val appContext = context.applicationContext\r\n\t\r\n\toverride fun intercept(chain: Interceptor.Chain): Response {\r\n\t\tif (!isOnline())\r\n\t\t\tthrow NoConnectivityException()\r\n\t\treturn chain.proceed(chain.request())\r\n\t}\r\n\t\r\n\tprivate fun isOnline(): Boolean {\r\n\t\tval connectivityManager = appContext.getSystemService(Context.CONNECTIVITY_SERVICE)\r\n\t\t\t\tas ConnectivityManager\r\n\t\t\r\n\t\tval networkInfo = connectivityManager.activeNetworkInfo\r\n\t\treturn networkInfo !== null && networkInfo.isConnected\r\n\t}\r\n}\r\n```"],"labels":["Needs Info"]},{"title":"Stream bodies from first-party converters","body":"We currently do not to guard against mutable inputs, but that doesn't seem worth optimizing for. Plus it defers even more work to the HTTP thread.","comments":["Looking at a PR for this but want to make sure I understand it correctly. Using Moshi as an example - should it work like this?\r\n\r\n```java\r\n@Override public RequestBody convert(final T value) {\r\n  return new RequestBody() {\r\n    @Override public MediaType contentType() {\r\n      return MEDIA_TYPE;\r\n    }\r\n\r\n    @Override public void writeTo(BufferedSink sink) throws IOException {\r\n      try (JsonWriter writer = JsonWriter.of(sink)) {\r\n        adapter.toJson(writer, value);\r\n      }\r\n    }\r\n  };\r\n}\r\n```","Eh just went ahead and opened a PR https:\/\/github.com\/square\/retrofit\/pull\/3220"],"labels":["Feature"]},{"title":"Retrofit 2.6.1 gradle build taking more than 30 minutes to run","body":"v2.6.1 takes more than 30 minutes to build in android.\r\nIf I use v2.5.0 than it takes normal time to build in android.\r\nCan someone guild me what's the problem in v2.6.1?","comments":["Retrofit is a jar with little ability to impact build times. Can you create a standalone sample that reproduces the behavior?"],"labels":["Needs Info"]},{"title":"Add support for \"-G\" curl option","body":"In Stripe APIs the filtering can be done by sending parameters with \"-G\" curl option, as example https:\/\/stripe.com\/docs\/api\/accounts\/list#list_accounts-created\r\n```\r\ncurl https:\/\/api.stripe.com\/v1\/accounts?limit=3 \\\r\n   -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\r\n   -d created[lte]=1517443200 \\\r\n   -G \r\n```\r\n\r\nWhen used, this option will make all data specified with -d, --data, --data-binary or --data-urlencode to be used in an HTTP GET request instead of the POST request that otherwise would be used. The data will be appended to the URL with a '?' separator.\r\nFrom https:\/\/curl.haxx.se\/docs\/manpage.html","comments":["What is the final URL of that example and how is it different than regular\nquery parameters?\n\nOn Sat, Aug 3, 2019, 2:01 AM Alex <notifications@github.com> wrote:\n\n> In Stripe APIs the filtering can be done by sending parameters with \"-G\"\n> curl option, as example\n> https:\/\/stripe.com\/docs\/api\/accounts\/list#list_accounts-created\n>\n> curl https:\/\/api.stripe.com\/v1\/accounts?limit=3 \\\n>   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc: \\\n>   - d \"created[lt]=1385798567\" \\\n>   -G\n>\n> When used, this option will make all data specified with -d, --data,\n> --data-binary or --data-urlencode to be used in an HTTP GET request instead\n> of the POST request that otherwise would be used. The data will be appended\n> to the URL with a '?' separator.\n> From https:\/\/curl.haxx.se\/docs\/manpage.html\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/3187?email_source=notifications&email_token=AAAQIEN7EVPDFOVRIPRGOIDQCUNKPA5CNFSM4IJCKF22YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HDFS5RA>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAAQIEOAOAJYKPGRH5L3EZTQCUNKPANCNFSM4IJCKF2Q>\n> .\n>\n","I've imported the curl request into Postman and it generates\r\n```\r\nGET https:\/\/api.stripe.com\/v1\/accounts?limit=3?created[lte]=1517443200\r\n```","https:\/\/github.com\/postmanlabs\/curl-to-postman\/issues\/4","I don't really understand how this is useful over `@Query`-annotated parameters. Can you please provide an example of what you are trying to achieve that is impossible with `@Query` and `@QueryMap`?","Has been almost a year now, but for someone looking for the same than @raderio, maybe this will help. With the Jake's comment, I just looked for annotation @Query, and as an example:\r\n\r\n`    @GET(\"Route\")\r\n    Observable<RoutesResponse> getRoutes(@Query(\"where\") String query, @HeaderMap Map<String, String> headers);`\r\n\r\nI had a POJO for that query but It doesn't work with @Query as it gives me a 500 Internal Server Error, and I just, convert it to a String with gson:\r\n\r\n`restClient.getRoutes(getGson().toJson(request), headers); \/\/ getGson() is in the RequestModel`\r\n"],"labels":["Needs Info"]},{"title":"Multiplatform support","body":"Given that okio went multiplatform already, and okhttp is slowly [going](https:\/\/github.com\/square\/okhttp\/issues\/4723) towards that direction, would it be possible for Retrofit to go multiplatform some day? I'm just curious what are the required steps for this, apart from the actual conversion to Kotlin (which is not planned yet, according to the issue I mentioned). \r\n\r\nI would see moving from reflection-based annotation parsing (as I assume it's not working in native) to compile-time annotation processing + codegen of interfaces' implementations (instead of `create` method) as a necessary step, but what could be else?","comments":["No earlier than 2 years. More realistically probably 4 or 5 years.\r\n\r\nTo say Okio went multiplatform is true, but it lacks the facilities for even implementing OkHttp in multiplatform contexts (specifically, timeouts and deadlines). So we're really blocked on Okio finishing itself going multiplatform and exposing this behavior, likely through coroutines. Additionally, blocking IO simply doesn't work in places like JavaScript so it's not clear Okio is even ready to be utilized there. Essential functionality like the gzip and deflate support are absent on non-JVM platforms. That's the first blocker.\r\n\r\nNext, OkHttp is now written in Kotlin but it's API is coupled to the JVM. Decoupling this will be a large effort and almost certainly require breaking the API. Not to mention the reimplementation on JS and native, or delegation to platform-specific equivalents in a way that provide consistent behavior. This can probably be done on native, but OkHttp doesn't seem the right layer of abstraction for adapting JS clients. That's the second blocker.\r\n\r\nFinally, Retrofit relies on mechanisms which are not available on JS or native or do not have satisfying equivalents. Switching to code generation is not at all easy because of the behavior of converter factories and call adapter factories. This was evaluated 5-ish years ago and deemed infeasible or requiring too many trade-offs. That leaves reflection, which is possible, but blocked on Kotlin again. And it would also would likely mean taking a kotlin-reflect dependency on the JVM which is currently a complete non-starter.\r\n\r\nNow Retrofit is a layer where abstraction over multiple HTTP clients could be done, and it probably could be done in about a year. But it would mean severely restricting the API where there weren't any converters or adapters so `suspend fun` was your only choice and `kotlinx.serialization` types, `UByteArray`, or `String` were the only supported return types (or `Response<T>` of those types). That might be something I would build, but it would be the opposite of Retrofit.\r\n\r\nIt's not that I'm opposed to this. I want this. It just doesn't seem feasible in the next few years as it requires significant work on our upstream dependencies first. I'll be pushing for, following, and in some cases contributing that work. But this is _definitely_ not something you should be holding your breath on.","Excluding js, is it easier to implement on other platforms?Android,IOS,MacOS,Windows,Linux and so on.","No\n\nOn Sun, Sep 1, 2019, 1:55 AM mengrong.yang <notifications@github.com> wrote:\n\n> Excluding js, is it easier to implement on other\n> platforms?Android,IOS,MacOS,Windows,Linux and so on.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/3181?email_source=notifications&email_token=AAAQIENG2P7XHYEGMV6PBTDQHNKOJA5CNFSM4IH26TZ2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD5T3FTI#issuecomment-526889677>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAAQIEM52EK3STXOINFJMLLQHNKOJANCNFSM4IH26TZQ>\n> .\n>\n","Is this any more possible now then when this was posted a year ago? \r\n\r\nAt a glance OkHttp and Okio seem to be in the similar positions so I would guess not, but would be interesting to hear if there's any internal conversations amongst yourselves","No change.\n\nMaybe with KSP eventually supporting multiplatform, but it's not super interesting to me right now to explore considering how experimental it is.\n\nOn Thu, Oct 15, 2020, at 1:52 PM, CharlieTap wrote:\n> \n\n> Is this any more possible now then when this was posted a year ago?\n\n> At a glance OkHttp and Okio seem to be in the similar positions so I would guess not, but would be interesting to hear if there's any internal conversations amongst yourselves\n\n\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub <https:\/\/github.com\/square\/retrofit\/issues\/3181#issuecomment-709490506>, or unsubscribe <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAAQIEOLUVANILFTEH33Z6DSK4ZF3ANCNFSM4IH26TZQ>.\n\n","@JakeWharton ksp is stable now","Is the status the same here? Would OkHttp 5.0 change the equation at all? https:\/\/github.com\/square\/okhttp\/issues\/6963","I don't think it changes all that much until there's a working client on multiple platforms that I can evaluate. And I'm concerned about mentions of not supporting JS such that I may have to remove OkHttp entirely from Retrofit's public API to accomplish multiplatform.","Without relying on OkHttp, Ktor client seems like a good candidate","Possibly, although it itself is merely a wrapper around actual HTTP clients like OkHttp. I would prefer OkHttp for obvious reasons, but I also want to make sure it's the right reasons. Currently we gain a lot from exposing it as public API and I'm not sure Ktor client has the same level of features because it's an abstraction over existing clients.\r\n\r\nFor example, OkHttp's tagging allows us to expose details about the Retrofit method to OkHttp interceptors. This is a wildly powerful feature that is going to be very challenging to replicate in a multiplatform context both because of the problem of the multiplatform HTTP client but also the lack of reflection in multiplatform.","Weirdly have used the Ktor client API in two projects since writing that comment and it is very, very painful. Maybe they fixed it up in 2.0, but the latest stable one is not pleasant and I would not want to build on top of it here.","If it makes retrofit happen, we should work out how to try to make OkHttp JS happen.","JS is my most used platform after JVM\/Android. I almost never use native. If you don't make it happen I'll just ship an HTTP client abstraction similar to Retrofit 1 with end-to-end coroutines and it will be a little painful but work just fine. It's probably a wise design decision anyway because I also would love to support Java 11's built-in HTTP client, too. This makes multiplatform HTTP client _configuration_ a separate concern from Retrofit's perspective. So if OkHttp chooses to not work on JS then you can only do common configuration on JVM\/Android\/native and that's fine from Retrofit's perspective. In this regard I like Ktor client's design.","I did just recently come across a library that is multiplatform and inspired by Retrofit, called [Ktorfit](https:\/\/github.com\/Foso\/Ktorfit). Not sure if something similar could be done with respect to Retrofit, although that implementation is built on top of Ktor 2.0 and used KSP. ","For most people, the core of retrofit, which is the most popular feature, is that it makes the network layer implementation of the application **declarative** (describe the API by interface with methods and the help of annotations, that is really cool), although this is implemented through `reflect.Proxy` (and this is now possible achived by ksp or kapt), while adapter and converter are specific to the extensibility and flexibility on the jvm platform, and yes, they are currently part of retrofit too , but they are not the most important part, and discarding them temporarily will not \"be the opposite of Retrofit\", if there are more options for adapter and converter at multiplatform in the future, it will not be too late to add these features back.\r\n\r\nso I think it's time to move on.","Excited to see that [Retrofit 5.0.0-alpha4](https:\/\/square.github.io\/okhttp\/changelogs\/changelog\/#version-500-alpha4) added experimental JS and iOS support! \r\n\r\nThat obviously doesn't address any of the reflection-based reasons that Retrofit isn't multiplatform-friendly, but I figured that this was relevant info for folks following or stumbling across this issue","That's OkHttp, not Retrofit","5 years after, what's the current thoughts about this one?","> 5 years after, what's the current thoughts about this one?\r\n\r\nWe can use ``` ktorfit ```"],"labels":["Icebox"]},{"title":"is there \"adapter-rxjava3\" ?","body":"Updated to **RxJava3**, and I have to exclude **RxJava2** from gradle dependencies required by **adapter-rxjava2**.\r\n","comments":["Despite being binary _incompatible_, RxJava 3 re-uses the same Java package name and groupId and thus cannot live alongside RxJava 2. I don't really want to maintain two copies of the same adapter. I guess we could point the source sets and tests at the same folders and just declare different deps.","@1001101 check this Repo https:\/\/github.com\/akarnokd\/RxJavaRetrofitAdapter","> @1001101 check this Repo https:\/\/github.com\/akarnokd\/RxJavaRetrofitAdapter\r\n\r\nNice! It's always the same VersionName to RxJava3?","> @1001101 check this Repo https:\/\/github.com\/akarnokd\/RxJavaRetrofitAdapter\r\n\r\nThanks saved my day","It's now available -> https:\/\/github.com\/square\/retrofit\/blob\/master\/CHANGELOG.md#version-290-2020-05-20\r\n\r\n> New: RxJava 3 adapter!\r\n> The Maven coordinates are com.squareup.retrofit2:adapter-rxjava3"],"labels":["Feature"]},{"title":"RuntimeException thrown in interceptor never notifies Call","body":"If an `okhttp3.Interceptor` throws an exception, the `suspend` function in a Retrofit interface never completes (neither returning a value or throwing an exception).\r\n\r\nA sample project demonstrating the issue with a simple JUnit test can be found here: https:\/\/github.com\/robfletcher\/retrofit-coroutines-hang\r\n\r\nThe real situation when I've encountered this is when an SSL handshake fails.\r\n\r\nFWIW the same behavior is seen using https:\/\/github.com\/JakeWharton\/retrofit2-kotlin-coroutines-adapter with Retrofit 2.5.0","comments":["When an SSL handshake fails that should throw an IOException, which should be recovered gracefully.\r\n\r\nThis is an IllegalStateException, which typically results in an application crash.","It does the same thing if the interceptor throws `IOException`.","This should be trivial to test. It's likely we already have coverage for\nIOException subtypes but probably worth doing both.\n\nOn Thu, May 30, 2019 at 10:17 PM Jesse Wilson <notifications@github.com>\nwrote:\n\n> When an SSL handshake fails that should throw an IOException, which should\n> be recovered gracefully.\n>\n> This is an IllegalStateException, which typically results in an\n> application crash.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/3110?email_source=notifications&email_token=AAAQIELH4PZJ4S6OKGIKFHDPYCDENA5CNFSM4HROX6D2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODWUAIOQ#issuecomment-497550394>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAAQIEM4VTTTZOCCCVMXRELPYCDENANCNFSM4HROX6DQ>\n> .\n>\n","This test shows `IOException` being propagated properly\r\n\r\nhttps:\/\/github.com\/square\/retrofit\/blob\/master\/retrofit\/src\/test\/java\/retrofit2\/KotlinSuspendTest.kt#L85-L99","Sorry, away from computer right now but does the exception in that case get raised from an interceptor? I\u2019ve seen exceptions propagate successfully in other cases. The issue I\u2019m hitting seems to specifically pertain to interceptors.\r\n\r\nI\u2019ll update my example when I get to work in a couple hours. ","OkHttp is implemented as a chain of interceptors. The last interceptor just\ntalks to a Socket instead of calling chain.proceed. So yes, but beyond\nthat, Retrofit doesn't care about from where the exception originates in\nOkHttp since it only talks to OkHttp through one API:\nCall.enqueue(Callback).\n\nOn Fri, May 31, 2019 at 9:36 AM Rob Fletcher <notifications@github.com>\nwrote:\n\n> Sorry, away from computer right now but does the exception in that case\n> get raised from an interceptor? I\u2019ve seen exceptions propagate successfully\n> in other cases. The issue I\u2019m hitting seems to specifically pertain to\n> interceptors.\n>\n> I\u2019ll update my example when I get to work in a couple hours.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/3110?email_source=notifications&email_token=AAAQIEMFW4X5HATNXRPTOQLPYESXTA5CNFSM4HROX6D2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODWVHRXA#issuecomment-497711324>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAAQIEPF5526BNR4RCRRJALPYESXTANCNFSM4HROX6DQ>\n> .\n>\n","Ok, my mistake. I could swear I had tested this with `IOException` but when I updated my example it no longer fails. We must be doing something that ends up throwing another type of exception in our SSL interceptor (integrating with Netflix's metatron cert auth system) or very possibly just doing something fundamentally dumb with coroutines.\r\n\r\nEven so, I'm inclined to think that hanging in the case of a `RuntimeException` is potentially very difficult for people to debug.\r\n\r\nEdit: yeah, I tested it with `IOException` in a more involved integration test within our app, but there must be something else we're doing wrong.\r\n\r\nFurther edit: found the problem in some (internal) library code we use that wraps checked exceptions up in `RuntimeException`.","Still probably worth a test\n\nOn Fri, May 31, 2019 at 12:55 PM Rob Fletcher <notifications@github.com>\nwrote:\n\n> Ok, my mistake. I could swear I had tested this with IOException but when\n> I updated my example it no longer fails. We must be doing something that\n> ends up throwing another type of exception in our SSL interceptor\n> (integrating with Netflix's metatron cert auth system).\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/3110?email_source=notifications&email_token=AAAQIEJ3X5JOOVSW333UKFDPYFKA3A5CNFSM4HROX6D2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODWVZGBY#issuecomment-497783559>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAAQIEOGSGNLPG3C44VTPDTPYFKA3ANCNFSM4HROX6DQ>\n> .\n>\n","So this is a severe design flaw in OkHttp it turns out. Non-`IOException`s thrown in an `enqueue`'d request result in no callback whatsoever.","Glad I wasn't wasting your time!","Blocked by https:\/\/github.com\/square\/okhttp\/issues\/5151","Hi, are there any updates on this issue ? There's a workaround where we can catch any exception thrown in Interceptors and rethrow them as IOException but it would be nice to have a fix soon :)","Just adding a workaround here in case it helps. Actually in my case even IOExceptions are not propagating back. Retrofit 2.6.2, okhttp 4.2.0\r\n\r\nI wanted to deal with this at point of call rather than add an UncaughtExceptionHandler.\r\n\r\nSo the workaround was to add an interceptor which catches any IOExceptions, and returns a blank response with a magic status code.\r\n\r\n```\r\nprivate val errorInterceptor = object : Interceptor {\r\n        override fun intercept(chain: Interceptor.Chain): okhttp3.Response {\r\n            return try {\r\n                chain.proceed(chain.request())\r\n            } catch (e: IOException) {\r\n                okhttp3.Response.Builder()\r\n                    .code(418)\r\n                    .request(chain.request())\r\n                    .body(object: ResponseBody() {\r\n                        override fun contentLength() = 0L\r\n                        override fun contentType(): MediaType? = null\r\n                        override fun source(): BufferedSource = Buffer()\r\n                    })\r\n                    .message(e.message ?: e.toString())\r\n                    .protocol(Protocol.HTTP_1_1)\r\n                    .build()\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nThis could be combined with a Result object like in the answer here: https:\/\/stackoverflow.com\/questions\/57625272\/retrofit-2-6-0-custom-coroutines-calladapterfactory where the status code or message is checked and a NetworkError returned.","Hi @robfletcher, are there any updates on this issue? "],"labels":["OkHttp","Bug","Blocked"]},{"title":"Invalid Malformed URL","body":"The path of a URL contains a colon symbol which is causing the call to fail.\r\n\r\nUsing version com.squareup.retrofit2:retrofit:2.5.0\r\n\r\nCode:\r\n```\r\npublic interface ClientApi {\r\n    @PUT(\"user:email={email}\/login\")\r\n    Call<ResponseBody> login(@Path(\"email\") String email, @Body String pass);\r\n\r\n    @PUT(\".\/user:email={email}\/login\")\r\n    Call<ResponseBody> loginRelative(@Path(\"email\") String email, @Body String pass);\r\n...\r\n```\r\n\r\n**Regular path**\r\nStack trace:\r\n```\r\nCaused by: java.lang.IllegalArgumentException: Malformed URL. Base: https:\/\/test.com\/restapi\/, Relative: user:email=me@test.com\/login\r\n        at retrofit2.RequestBuilder.get(RequestBuilder.java:221)\r\n        at retrofit2.RequestFactory.create(RequestFactory.java:111)\r\n        at retrofit2.OkHttpCall.createRawCall(OkHttpCall.java:190)\r\n        at retrofit2.OkHttpCall.execute(OkHttpCall.java:173)\r\n        at Service.login(Service.java:38)\r\n```\r\nThink the code needs to treat the relative portion of the URL like an absolute URL when parsing.\r\n\r\n**Relative path**\r\nUsing a retaliative path  annotation `.\/` does not solve this issue.\r\nStack trace:\r\n```\r\nCaused by: java.lang.IllegalArgumentException: @Path parameters shouldn't perform path traversal ('.' or '..'):\r\n        at retrofit2.RequestBuilder.addPathParam(RequestBuilder.java:113)\r\n        at retrofit2.ParameterHandler$Path.apply(ParameterHandler.java:99)\r\n        at retrofit2.RequestFactory.create(RequestFactory.java:108)\r\n        at retrofit2.OkHttpCall.createRawCall(OkHttpCall.java:190)\r\n        at retrofit2.OkHttpCall.execute(OkHttpCall.java:173)\r\n```\r\n\r\nBug report unit test\r\nhttps:\/\/gist.github.com\/nathancassano\/f675e2fd1c64d4b6002afea37bf5fee4","comments":["Yeah this should be allowed.\r\n\r\ncc @swankjesse ","can I work on this issue? ","No, we need to study to learn what the correct behavior is.","Is there any news about this issue? This problem causes a version lock to 2.4.0.","Hi, any update on this?","Hi any update on this? colon in a path variable seem to be encoded as `%253A` instead of just `%3A`. ","Hey can I pick this issue?","Still an isue....","The following interface doesn't even exists in the repository \r\n","I am using the latest retrofit version and this issue persists.   Can you specify the specific Interface you say does not exist, or would it be better for me to find teh line in retrofit that generates the error msg?","Still an isue....\r\n\r\n"],"labels":["Bug"]},{"title":"Parse Kotlin metadata manually to honor nullability and avoid kotlin-metadata-jvm dep","body":"Version: 2.6.0-SNAPSHOT\r\nException: KotlinNullPointerException\r\nMessage: Response from {path to my suspend fun...} was null but response body type was declared as non-null\r\n\r\nThe current structure of my suspend fun in my service interface:\r\n```\r\n@POST(\"api\/...\")\r\nsuspend fun request(@Body body: Body): Response?\r\n```\r\n\r\nI'm using Gson for serialization.\r\n\r\nIs there a way to declare the response body type as nullable that I'm missing? I've tried adding null safety on my response object with `?` and `@Nullable` with no success.","comments":["Not currently. I'm working on a parser for Kotlin metadata so we don't have\nto depend on a gigantic jar to read one isNullable boolean.\n\nOn Thu, Apr 11, 2019, 8:27 PM Aidan Laing <notifications@github.com> wrote:\n\n> Version: 2.6.0-SNAPSHOT\n> Exception: KotlinNullPointerException\n> Message: Response from {path to my suspend fun...} was null but response\n> body type was declared as non-null\n>\n> The current structure of my suspend fun in my service interface:\n>\n> @POST(\"api\/...\")\n> suspend fun request(@Body body: Body): Response?\n>\n> I'm using Gson for serialization.\n>\n> Is there a way to declare the response body type as nullable that I'm\n> missing? I've tried adding null safety on my response object with ? and\n> @Nullable with no success.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/3075>, or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAEEEb6RFk0-5aDUMDF6fMlN9U2r9w7Hks5vf9MHgaJpZM4crGCw>\n> .\n>\n","@JakeWharton Please notice that suspend ...: List<*> also is not supported. \r\nVersion: 2.6.0-SNAPSHOT\r\nFor instance: `suspend fun fetchStrings(): List<String>`","I'm not sure how that's related to null body handling. Feel free to file a\nseparate issue with a failing test case.\n\nOn Wed, Apr 17, 2019, 9:41 PM Rodion Mostovoy <notifications@github.com>\nwrote:\n\n> @JakeWharton <https:\/\/github.com\/JakeWharton> Please notice that suspend\n> ...: List<*> also is not supported.\n> Version: 2.6.0-SNAPSHOT\n> For instance: suspend fun fetchStrings(): List<string>\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/3075#issuecomment-484323140>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAAQIEKC4PRPCZTA5WTQBNDPQ7GTBANCNFSM4HFMMCYA>\n> .\n>\n","Added @JakeWharton I'm getting a similar KotlinNullPointerException using a service that returns 204 (no content) on a delete call. Something like this:\r\n`@DELETE(\"\/api\/{id}\") suspend fun deleteItem(@Path(\"id\") id: String)`\r\nWould that use case also be fixed as part of this issue?","No. That's #2867","Hi there! Any chance to get update on this issue? :) Want to move to 2.6.0 and remove all other dependencies but can't cause of null response body not supported :(","Moved to [#2867](https:\/\/github.com\/square\/retrofit\/issues\/2867)","That is not related to this issue. It's #2867.","So at this moment we should force an exception with a interceptor for 204 responses?","This issue has nothing to do with 204 handling and when it's fixed 204 handling won't have changed in any way. That's #2867.","Just in case it helps. I was experiencing the exact same KotlinNPE issue over the last 2 days and after trying Converters and Adapters what really worked was to return `Response<Unit>` in the retrofit method declaration.\r\n\r\nI use Retrofit 2.6.0.","Any progress? We've just changed some of our REST endpoints to 204. So I thought it would be enought to just remove response type (making it `Unit`), but no.\r\n\r\nUsing `Response<Unit>` works :+1:","Why not:\r\n\r\nhttps:\/\/github.com\/Kotlin\/kotlinx.reflect.lite ","Because it doesn't provide the necessary info","> Using `Response<Unit>` works\r\n\r\nIn this case retrofit does not throw any exception when got 4xx codes\r\nReproduced at 2.6.2","That is the expected behavior for that return type.","Is it something that is open for a PR or do you want to implement it yourself in Retrofit or as an external project and use it here? I see that there is an old [branch](https:\/\/github.com\/square\/retrofit\/tree\/jakew\/nully\/2019-02-15) so I'd like to ask first before spending some time on it.","Feel free to give it a shot\n\nOn Tue, Feb 25, 2020, at 5:31 AM, Micha\u0142 Sikora wrote:\n> Is it something that is open for a PR or do you want to implement it yourself in Retrofit or as an external project and use it here? I see that there is an old branch <https:\/\/github.com\/square\/retrofit\/tree\/jakew\/nully\/2019-02-15> so I'd like to ask first before spending some time on it.\n\n\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub <https:\/\/github.com\/square\/retrofit\/issues\/3075?email_source=notifications&email_token=AAAQIELMEQYZS3ED6MORGVDRETXOJA5CNFSM4HFMMCYKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEM3NYOQ#issuecomment-590797882>, or unsubscribe <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAAQIENX2JYOB4K4V6XXXVDRETXOJANCNFSM4HFMMCYA>.\n\n","Found that empty response failed with the NPE mentioned. To cope with that problem, I wrapped all my backend json calls (on the backend side) inside an array. So if the result was empty, I returned an empty array at least.\r\n\r\nJust a tip to solve the problem if you have access and ability to change your backend data source.\r\n\r\nRG","> > Using `Response<Unit>` works\r\n> \r\n> In this case retrofit does not throw any exception when got 4xx codes\r\n> Reproduced at 2.6.2\r\n\r\nHi, to handle empty response only choice seems like `Response<Void>` but that makes 4xx look like success. \r\nAny proper way to handle both **empty response** AND **see 4xx as error** (e.g. `@GET suspend fun` should throw exception) ?\r\n\r\n**Update**: Using custom response converter suggested in #1554 works fine, (not converting empty body and returning null in such cases). But return type in API interface must be `Unit` instead of `Any?`. Otherwise it throws exception written above by OP","https:\/\/github.com\/square\/retrofit\/issues\/3075#issuecomment-586156499\r\n> Why not:\r\n> \r\n> https:\/\/github.com\/Kotlin\/kotlinx.reflect.lite\r\n\r\nhttps:\/\/github.com\/square\/retrofit\/issues\/3075#issuecomment-586279157\r\n> Because it doesn't provide the necessary info\r\n\r\nAre you sure? It looks to me like you *can* read \"one `isNullable` boolean\" right here: https:\/\/github.com\/Kotlin\/kotlinx.reflect.lite\/blob\/47bfb95540f361143add39300017c6904720812a\/src\/main\/java\/kotlinx\/reflect\/lite\/api.kt#L45-L47\r\n","Any new on this?\r\n\r\nHow to handle 400 codes and empty body?\r\nI tried everything in this topic, but nothing worked. \r\n\r\nSuccess called with the 400 error \r\n\r\n","I have added wrong headers that caused me that HTTP 400 Bad request error.\r\n\r\nremoving the following worked\r\n      .addHeader(\"Content-Encoding\", \"UTF-8\")\r\n      .header(\"Accept-Encoding\", \"identity\")\r\n      \r\n      might help someone\r\n      ","@JakeWharton not any updates about this? Its been 2 years since issue has open :D","right now I handled this by a simple try catch like this\r\n```\r\ntry {\r\n                ResultWrapper.Success(request.invoke())\r\n            } catch (e: KotlinNullPointerException) {\r\n                ResultWrapper.NoContentError\r\n            }\r\n```","Having an interceptor that rewrites the http 204 and 205 responses to 200 should work best.","Hi, I hit this a few times recently, so I thought I'd give it a shot: https:\/\/github.com\/square\/retrofit\/pull\/3544. Any feedback is welcome.","If you get `No type arguments expected for class Response` when using `Response<Unit>`, make sure you're using `retrofit2.Response<>` and not something like `okhttp3.Response`. That fixed the issue for me","> If you get `No type arguments expected for class Response` when using `Response<Unit>`, make sure you're using `retrofit2.Response<>` and not something like `okhttp3.Response`. That fixed the issue for me\r\n\r\nThis saved me a lot of digging, was using a `Response<T>` class from my module","any suggestion for flow?"],"labels":["Enhancement"]},{"title":"Access to full Response object in Converter","body":"What kind of issue is this?\r\n\r\n - [ ] Question. This issue tracker is not the place for questions. If you want to ask how to do\r\n       something, or to understand why something isn't working the way you expect it to, use Stack\r\n       Overflow. https:\/\/stackoverflow.com\/questions\/tagged\/retrofit\r\n\r\n - [ ] Bug report. If you\u2019ve found a bug, spend the time to write a failing test. Bugs with tests\r\n       get fixed. Here\u2019s an example: https:\/\/gist.github.com\/swankjesse\/6608b4713ad80988cdc9\r\n\r\n - [ X] Feature Request. Start by telling us what problem you\u2019re trying to solve. Often a solution\r\n       already exists! Don\u2019t send pull requests to implement new features without first getting our\r\n       support. Sometimes we leave features out on purpose to keep the project small.\r\n\r\n\r\nOur application is consuming hypermedia responses which have some links:\r\n\r\n```javascript\r\n{\r\n    \"_links\": {\r\n      \"foo\": {\r\n        \"href\": \"\/bar\"\r\n      }\r\n    }\r\n}\r\n```\r\n\r\nWe want to move to retrofit, and we can use the @Url annotation for dynamic urls.\r\n\r\nThe issue i'm having is that if the href is absolute, which is a new requirement for us, we will follow it correctly.  However the links we get on the resulting page, would still be relative, but would use the baseUrl of the retrofit client, rather than the base of the response where the links were loaded from.\r\n\r\nSo the first response might have the following link sequence:\r\n\r\nhttps:\/\/my.api.com\/call\r\n    link1 -> https:\/\/some.other.api.com\/call\r\n\r\nhttps:\/\/some.other.api.com\/call\r\n    link2 -> \/call2\r\n\r\nThe way we're dealing with this now is to turn all links into absolute links at parse time, since we have the Response object available to us to the get the url that loaded the response. \r\n\r\nHowever, with retrofit, i'm not seeing a way of doing this within a Converter.Factory.  It seems to be agnostic to where the response body actually came from.  So link2 would still use https:\/\/my.api.com as the baseUrl, since that's what's on the retrofit client\r\n\r\nI'd like to be able to access the request URL as part of the Converter.Factory instance so that i can use it in my parsing logic.","comments":["Yeah I think in the next major version I'll abandon the unified `Converter` interface and create separate ones so that additional information can be provided. There's a bunch of design here with things like multipart bodies and form URL bodies that will need figured out. Also we're looking to add web socket and SSE support which further complicates.","I can't think of a good workaround for now either.\r\n\r\nThe only way to sneak data into the converter would be to put it inside the content type. So you could have an interceptor which, when receiving a response, grabbed the final URL and tucked it into the content type. Then your converter would parse out that URL from the content type and use it to resolve the links into absolute ones. Really not great, but it would work...","I wasn't suggesting changing the Converter interface.  It's more the factory class i was thinking.\r\nLooking further at the HttpServiceMethod it looks like the body isn't available at the time the responseBodyConverter is being created.  So I don't really see a good workaround either.  Perhaps i can work around it at a higher level, and post process the object after retrofit returns and examine all the various annotations we use to determine what a url is, and do it then.\r\n\r\n","Yeah the factory is called once per endpoint and then reused for the life\nof the instance.\n\nOn Tue, Jan 22, 2019, 6:42 PM Matt Inger <notifications@github.com wrote:\n\n> I wasn't suggesting changing the Converter interface. It's more the\n> factory class i was thinking.\n> Looking further at the HttpServiceMethod it looks like the body isn't\n> available at the time the responseBodyConverter is being created. So I\n> don't really see a good workaround either. Perhaps i can work around it at\n> a higher level, and post process the object after retrofit returns and\n> examine all the various annotations we use to determine what a url is, and\n> do it then.\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/2987#issuecomment-456608924>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAEEESwmprVQHApw8u1xb8kgzwuBZoW3ks5vF6HqgaJpZM4ZSZ42>\n> .\n>\n","Widening this to access to the full `Response` in converting a response. It's been requested for access to headers in the past, although I can't find an issue for that. Perhaps it was requested elsewhere. There is #2480 which covers a converter being able to contribute headers for creating a request.","Can't find an existing issue for accessing headers in a converter, but here's my +1 for that use case","Is the issue below solves?\r\n> So the first response might have the following link sequence:\r\n> \r\n> https:\/\/my.api.com\/call\r\n> link1 -> https:\/\/some.other.api.com\/call\r\n> \r\n> https:\/\/some.other.api.com\/call\r\n> link2 -> \/call2\r\n\r\n\r\n```java \r\n @Test\r\n  public void getWithJavaUriUrl() {\r\n    class Example {\r\n      @GET\r\n      Call<ResponseBody> method(@Url URI url) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    Request request = buildRequest(Example.class, URI.create(\"foo\/bar\/\"));\r\n    assertThat(request.method()).isEqualTo(\"GET\");\r\n    assertThat(request.headers().size()).isZero();\r\n    assertThat(request.url().toString()).isEqualTo(\"http:\/\/example.com\/foo\/bar\/\");\r\n    assertThat(request.body()).isNull();\r\n  }\r\n\r\n  @Test\r\n  public void getWithStringUrlAbsolute() {\r\n    class Example {\r\n      @GET\r\n      Call<ResponseBody> method(@Url String url) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    Request request = buildRequest(Example.class, \"https:\/\/example2.com\/foo\/bar\/\");\r\n    assertThat(request.method()).isEqualTo(\"GET\");\r\n    assertThat(request.headers().size()).isZero();\r\n    assertThat(request.url().toString()).isEqualTo(\"https:\/\/example2.com\/foo\/bar\/\");\r\n    assertThat(request.body()).isNull();\r\n  }\r\n```","My team and I were waiting for a solution on how to read headers from the response into the result JSON DTO with Retrofit.\r\nFor our code, this would require an update to the GSON converter to add a custom annotation (something like \"ResponseHeader\") that would set the corresponding field.\r\n\r\nSome backend teams keep telling us: \"It's the protocol to return stuff like page count, page total, and nonce, in the headers of the response. We don't want to add it in the body just for you.\"\r\n\r\nI currently have to deal with the WooCommerce apis, and several apis return important headers (\"X-WP-TotalPages\", \"X-WC-Store-API-Nonce\", ...).\r\nThe below is my attempt to add the Nonce as part of the DTO needed for the app:\r\n```\r\nclass CartInfoDTO(\r\n    @field:[Expose SerializedName(\"id\")] val id: Long?,\r\n    @field:[Expose SerializedName(\"created_at\")] val createdAt: Long?,\r\n    @field:[Expose SerializedName(\"items_count\")] val itemsCount: Int?,\r\n    @field:[Expose SerializedName(\"items_qty\")] val itemsQty: Int?,\r\n    @field:[Expose SerializedName(\"customer\")] val customer: CustomerDTO?,\r\n    @field:[Expose SerializedName(\"totals\")] val totals: Totals?,\r\n    @field:[Expose SerializedName(\"coupon_code\")] val couponCode: String?,\r\n    @field:[Expose SerializedName(\"discounted_total_price\")] val discountedTotalPrice: Double?,\r\n    @field:[Expose SerializedName(\"discount_amount\")] val discountAmount: Double?,\r\n    var nonce: String?,\r\n)\r\n```\r\nAnd having to read the response as is:\r\n```\r\n@GET\r\nfun getCartInfo(\r\n    @Url url: String = \"${ApiContract.SHOP_BASE_URL_ALT}store\/cart\"\r\n): Observable<Response<CartInfoDTO>>\r\n```\r\n```\r\nclass GetCartInfoUseCase\r\n@Inject constructor(\r\n        private val api: ShopRestApi,\r\n        @Named(\"subscribe\") subscribeScheduler: Scheduler,\r\n        @Named(\"observe\") observeScheduler: Scheduler\r\n) : UseCase<CartInfoDTO, Unit>(subscribeScheduler, observeScheduler) {\r\n    \r\n    override fun buildUseCaseObservable(params: Unit): Observable<CartInfoDTO> {\r\n        return api.getCartInfo()\r\n            .map {\r\n                if (it.isSuccessful) {\r\n                    it.body()!!\r\n                        .apply { nonce = it.headers()[\"X-WC-Store-API-Nonce\"] }\r\n                } else {\r\n                    throw HttpException(it)\r\n                }\r\n            }\r\n    }\r\n}\r\n```"],"labels":["Feature"]},{"title":"duplicate class when using recommended protobuf-lite","body":"In [protobuf documents](https:\/\/github.com\/google\/protobuf-gradle-plugin#default-outputs) it's recommended to use `protobuf-lite` instead of `protobuf`\r\n\r\n> Android projects: no default output will be added. Since Protobuf 3.0.0, protobuf-lite is the recommended Protobuf library for Android, and you will need to add it as a codegen plugin.\r\n\r\nBut `protobuf-convertor` has a dependency for `protobuf` and when we add `protobuf-lite` to project, in building time occurred this **duplicate** error:\r\n```\r\nAGPBI: {\"kind\":\"error\",\"text\":\"Program type already present: com.google.protobuf.AbstractMessageLite\",\"sources\":[{}],\"tool\":\"D8\"}\r\n:app:transformDexArchiveWithExternalLibsDexMergerForDebug FAILED\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nExecution failed for task ':app:transformDexArchiveWithExternalLibsDexMergerForDebug'.\r\n> com.android.builder.dexing.DexArchiveMergerException: Error while merging dex archives: \/Users\/farhad\/Desktop\/prototest\/app\/build\/intermediates\/transforms\/dexBuilder\/debug\/0.jar, \/Users\/farhad\/Desktop\/prototest\/app\/build\/intermediates\/transforms\/dexBuilder\/debug\/1.jar,....\r\n  Program type already present: com.google.protobuf.AbstractMessageLite\r\n  Learn how to resolve the issue at https:\/\/developer.android.com\/studio\/build\/dependencies#duplicate_classes.\r\n```\r\nand we should exclude default `protobuf` dependency from `protobuf-convertor` like this:\r\n```\r\n    implementation ('com.squareup.retrofit2:converter-protobuf:2.3.0'){\r\n        exclude group: 'com.google.protobuf'\r\n    }\r\n```\r\n**In my opinion it's a bug and requires description to prevent confusion among users.**","comments":["> it's recommended to use protobuf-lite instead of protobuf\r\n\r\nThis is only true for Android and not the JVM. Our supplied protobuf converter works for both. We can add once sentence to the README for this, but it's not a bug.","Yes. That's required for android developers.","It's only recommended, not required. Regular protobuf works fine as well.","I'd like to note that while regular protobuf does work fine, you'll end up hitting duplicate class errors because of this when using other Android libraries that prefer protobuf-lite (we hit this with the Chromecast play services framework dependency). It would definitely be good to update the docs on this one.","As a developer who is newer to Android running into this issue was extremely confusing. Here is where I ended up:\r\n\r\n```gradle\r\n    implementation('com.squareup.retrofit2:converter-protobuf:2.9.0') {\r\n      exclude group: 'com.google.protobuf'\r\n    }\r\n```"],"labels":["Documentation"]},{"title":"Question: Do I need to close ResponseBody?","body":"When Retrofit2 returns okhttp3.ResponseBody then it has to be closed in order to avoid memory leaks, right? It's something what I have just noticed in our code and am not sure.\r\n```\r\n@GET(\"accountId\")\r\n@WorkerThread\r\nCall<ResponseBody> getUserData(@Header(NetworkConstants.Header.AUTHORIZATION) String accessToken);\r\n\r\n...\r\nResponse<ResponseBody> response = interface.getUserData();\r\n\/\/ do something with response\r\nresponse.body().close()\r\n```\r\nhttps:\/\/stackoverflow.com\/questions\/53265862\/do-i-need-to-close-response","comments":["Only if you have `@Streaming` on the method. Otherwise it's fully buffered. We should document it as such.","@JakeWharton Is this done? Can I work on this?","I am getting cannot make a new request because the previous response is still open: please call response.close().\r\n\r\nAny solution?"],"labels":["Documentation"]},{"title":"@Path may not be encoding all reserved characters, for instance brackets","body":"```java\r\n        RequestBuilder builder = new RequestBuilder(\r\n                \"GET\",\r\n                HttpUrl.get(\"https:\/\/github.com\"),\r\n                \"square\/{name1}\/{name2}\",\r\n                null,\r\n                null,\r\n                false,\r\n                false,\r\n                false\r\n        );\r\n        builder.addPathParam(\"name1\", \"retro{}fit\", false);\r\n        builder.addPathParam(\"name2\", \"iss[]ues\", false);\r\n        assertEquals(\"https:\/\/github.com\/square\/retro%7B%7Dfit\/iss%5B%5Des\", builder.build().url().toString());\r\n```\r\n\r\nFrom [rfc3986#section-3.3](http:\/\/tools.ietf.org\/html\/rfc3986#section-3.3) I would assume that also `[` and `]` characters that are part of a path segment would need to be percent-encoded?","comments":["I'll look into this next week unless @swankjesse wants to beat me to the punch (but that seems unlikely because we're both busy for the same reason). For unfortunate reasons we have to duplicate the encoding choices of OkHttp when it comes to paths. So whatever it does, we should be doing, and it is where the conversations about why should be had. That being said, maybe we want to write some kind of test which samples the entire ASCII space and some other interesting ranges to ensure we always match beahvior.","We changed some APIs for query parameters in OkHttp 3.10. For path parameters it depends on which method you call. Retrofit might be telling OkHttp to retain the encoding here. Unfortunately fixing this risks breaking other users.\r\n\r\nhttps:\/\/publicobject.com\/2017\/08\/01\/url-encoding-is-material\/","Hi guys, \r\n\r\nDo you have any update on that issue ? Did you have the time to discuss about a solution or a fix ?\r\n\r\nThank you","Hello, I work with mink-lparrouy, any news on this ?","Updates will be posted as comments on the issue\n\nOn Thu, May 2, 2019 at 3:50 AM Andoni <notifications@github.com> wrote:\n\n> Hello, I work with mink-lparrouy, any news on this ?\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/2940#issuecomment-488581289>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAAQIELMKL2NDMXQNBHNQGTPTKMNXANCNFSM4F7Q2PCA>\n> .\n>\n","+1 ran into this problem also","Ran into it today. I wanted to enforce a pre-encoded string, so, I replaced the `String` path parameter with a String wrapper.\r\nThe wrapper's `toString()` method is overriden to return the encoded value of the wrapped string. \r\n\r\nBefore:\r\n\r\n`get(@Path(\"key\")  value: String)`\r\n\r\nAfter:\r\n\r\n`get(@Path(\"key\")  value: UriString)`\r\n\r\nwhere UriString is:\r\n\r\n> data class UriString(private val value: String) {\r\n>     \/**\r\n>      * @return uri encoded [value]\r\n>      *\/\r\n>     override fun toString(): String {\r\n>         return Uri.encode(value)\r\n>     }\r\n> }\r\n\r\nI'd have preferred doing it with an interceptor or something attached to the client itself, but the request url is already fully-formed by the time it is intercepted. If there's a better\/ more efficient way, would love to know."],"labels":["OkHttp"]},{"title":"Retrofit 2 Close ErrorResponse Body","body":"I am using retrofit 2 and I was wondering if i have to call the close function when receiving an error body or retrofit closes it automatically?.\r\n\r\npublic void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\r\n    if (response.isSuccessful()) {\r\n        \/\/ Success\r\n    } else {\r\n        response.errorBody().close(); ???????????????????\r\n    }\r\n}\r\n\r\nThank you\r\n","comments":["The error body's source is buffered completely and closed by Retrofit.\r\nhttps:\/\/github.com\/square\/retrofit\/blob\/5088b0df6f2c52fcead426dafbb04214225e0cc7\/retrofit\/src\/main\/java\/retrofit2\/OkHttpCall.java#L212","Sounds like we just need a sentence in the documentation","@JakeWharton @NightlyNexus\r\nSo everything is closed by retrofit automatically?\r\nThen why is there a close function?\r\nAlso when does the close function takes place? After the callback's execution or before?\r\nThe same goes for the response.body()?","For the same reason there's a close on InputStream despite\nByteArrayInputStream not requiring you to close.\n\nBut yes, unless you are @Streaming you do not need to close anything.\n\nOn Thu, Oct 18, 2018 at 3:44 PM George Paouris <notifications@github.com>\nwrote:\n\n> @JakeWharton <https:\/\/github.com\/JakeWharton> @NightlyNexus\n> <https:\/\/github.com\/NightlyNexus>\n>\n>\n> So everything is closed by retrofit automatically?\n> Then why is there a close function?\n> Also when does the close function takes place? After the callback's\n> execution or before?\n>\n> The same goes for the response.body()?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/2929#issuecomment-431135999>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAEEESvnG8HPydZ9FB_1Hk4laYWW1ctGks5umNofgaJpZM4Xtxjh>\n> .\n>\n","@JakeWharton \r\n\r\n> \r\n> For the same reason there's a close on InputStream despite ByteArrayInputStream not requiring you to close. But yes, unless you are @streaming you do not need to close anything.\r\n> [\u2026](#)\r\n> On Thu, Oct 18, 2018 at 3:44 PM George Paouris ***@***.***> wrote: @JakeWharton <https:\/\/github.com\/JakeWharton> @NightlyNexus <https:\/\/github.com\/NightlyNexus> So everything is closed by retrofit automatically? Then why is there a close function? Also when does the close function takes place? After the callback's execution or before? The same goes for the response.body()? \u2014 You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub <[#2929 (comment)](https:\/\/github.com\/square\/retrofit\/issues\/2929#issuecomment-431135999)>, or mute the thread <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAEEESvnG8HPydZ9FB_1Hk4laYWW1ctGks5umNofgaJpZM4Xtxjh> .\r\n\r\nAnd what reason should that be?","Modeling more than one source of data\n\nOn Thu, Oct 18, 2018 at 4:01 PM George Paouris <notifications@github.com>\nwrote:\n\n> @JakeWharton <https:\/\/github.com\/JakeWharton>\n>\n> For the same reason there's a close on InputStream despite\n> ByteArrayInputStream not requiring you to close. But yes, unless you are\n> @streaming <https:\/\/github.com\/streaming> you do not need to close\n> anything.\n> \u2026 <#m_561261150799913299_>\n> On Thu, Oct 18, 2018 at 3:44 PM George Paouris ***@***.***> wrote:\n> @JakeWharton <https:\/\/github.com\/JakeWharton>\n> https:\/\/github.com\/JakeWharton @NightlyNexus\n> <https:\/\/github.com\/NightlyNexus> https:\/\/github.com\/NightlyNexus So\n> everything is closed by retrofit automatically? Then why is there a close\n> function? Also when does the close function takes place? After the\n> callback's execution or before? The same goes for the response.body()? \u2014\n> You are receiving this because you were mentioned. Reply to this email\n> directly, view it on GitHub <#2929 (comment)\n> <https:\/\/github.com\/square\/retrofit\/issues\/2929#issuecomment-431135999>>,\n> or mute the thread\n> https:\/\/github.com\/notifications\/unsubscribe-auth\/AAEEESvnG8HPydZ9FB_1Hk4laYWW1ctGks5umNofgaJpZM4Xtxjh\n> .\n>\n> And what reason should that be?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/2929#issuecomment-431141065>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAEEEdODZn3AQRBy0xcY1hxJy0FX0eUwks5umN4QgaJpZM4Xtxjh>\n> .\n>\n","@JakeWharton Is this done? If pending, Can I work on this?"],"labels":["Documentation"]},{"title":"Support For Matrix Param In Retrofit","body":"Both Java Server Side framework for Rest Web Services Spring MVC and Jax Rs have support for Matrix Param.\r\nRetrofit is the poular java and android client for Rest Web Services and don't have support for matrix param. Sound's strange.\r\nHere are the url from java docs of Jax Rs and Spring MVC:\r\nhttps:\/\/docs.oracle.com\/javaee\/7\/api\/javax\/ws\/rs\/MatrixParam.html\r\nhttps:\/\/docs.spring.io\/spring\/docs\/current\/javadoc-api\/org\/springframework\/web\/bind\/annotation\/MatrixVariable.html\r\n\r\nHere is a url to Spring MVC example explaning Matrix param:\r\nhttps:\/\/www.baeldung.com\/spring-mvc-matrix-variables\r\n\r\nHere is lik to RFC standard explaning matrix variable:\r\nhttps:\/\/tools.ietf.org\/html\/rfc3986#section-3.3\r\n\r\nSo please add support for Matrix Variable in Retrofit.\r\n\r\n ","comments":["That RFC does not define anything about these so-called \"matrix\" path parameters. It merely states that you _may_ use those characters to delimit sub-segments inside of a single path segment. The link you supply which states the RFC defines anything about path parameters is inaccurate.\r\n\r\nHowever, this can already be accomplished by using your own annotation, a `Map` type, and a registered string converter which renders the object to a String using whatever mechanism and joining characters that you want.\r\n\r\nSince it's not part of any official HTTP spec and you can build this into Retrofit using its existing extension mechanisms, I'm inclined not to do anything here.","I would welcome this as a sample, in fact.","> That RFC does not define anything about these so-called \"matrix\" path parameters. It merely states that you _may_ use those characters to delimit sub-segments inside of a single path segment. The link you supply which states the RFC defines anything about path parameters is inaccurate.\r\n> \r\n> However, this can already be accomplished by using your own annotation, a `Map` type, and a registered string converter which renders the object to a String using whatever mechanism and joining characters that you want.\r\n> \r\n> Since it's not part of any official HTTP spec and you can build this into Retrofit using its existing extension mechanisms, I'm inclined not to do anything here.\r\n\r\nCan you provide link to reference documentation which describe how to do it with custom annotation, map and a registered string converter. Or some similar case.","The [javadoc for `@Path`][1] talks about how values are encoded by asking [the `Retrofit.stringConverter()` method][2]. The `Type` and an array of parameter `Annotation` instances are supplied to that method which are forwarded to every registered [`Converter.Factory`'s `stringConverter` method][3]. From that method, if you can handle the type, you return a `Converter` that takes the object and converters it to a string however you choose.\r\n\r\nWe have a sample which uses a JSON serializer to convert a query param using this mechanism: https:\/\/github.com\/square\/retrofit\/blob\/00e82dfbe19fd1a9b725b134b70dafe6a0bde8f4\/samples\/src\/main\/java\/com\/example\/retrofit\/JsonQueryParameters.java\r\n\r\n [1]: http:\/\/square.github.io\/retrofit\/2.x\/retrofit\/retrofit2\/http\/Path.html\r\n [2]: http:\/\/square.github.io\/retrofit\/2.x\/retrofit\/retrofit2\/Retrofit.html#stringConverter-java.lang.reflect.Type-java.lang.annotation.Annotation:A-\r\n [3]: http:\/\/square.github.io\/retrofit\/2.x\/retrofit\/retrofit2\/Converter.Factory.html#stringConverter-java.lang.reflect.Type-java.lang.annotation.Annotation:A-retrofit2.Retrofit-"],"labels":["Documentation"]},{"title":" The exception of mergeDelayError in Rxjava and Retrofit","body":"\r\nI encountered this requirement. In an activity, I need to request four network interfaces. In order to facilitate the use, the mergeDelayError operation of Rxjava conforms to a request, but the actual situation is that when one of the requests is wrong, it will cause Retrofit to trigger. RxJavaCallAdapterFactory this class. This caused the subscription to be cancelled, which prevented me from requesting requests from other networks.\r\n","comments":["Are you saying there's a bug? If so, could you please provide a self-contained code snippet that demonstrates the behavior?\r\n\r\nOtherwise Retrofit makes a request when you subscribe and cancels when you unsubscribe which is pretty standard as far as Rx goes...","There are four such network requests in my needs, they need to be requested together in one page. But with the resulting callbacks that have successfully requested four requests, there have been four callbacks that failed, which is not friendly to the interface. I think the operators in Rxjava can solve this problem, so I tried to use it like this.\r\n\r\n```java\r\n   public Subscription getHallPageData(Subscriber subscriber) {\r\n\r\n        Observable<List<BannerBean>> banner = RetrofitHelper\r\n                .getService(IActivityService.class)\r\n                .getBanner()\r\n                .map(new HttpResultFunc<List<BannerBean>>());\r\n\r\n        Observable<List<Bulletin>> bulletin = RetrofitHelper\r\n                .getService(IActivityService.class)\r\n                .getBulletin()\r\n                .map(new HttpResultFunc<List<Bulletin>>());\r\n\r\n        Observable<HotLotteryBean> home = RetrofitHelper\r\n                .getService(ILotteryService.class)\r\n                .getHomeLottery()\r\n                .map(new HttpResultFunc<>());\r\n\r\n        Observable<AllMode> all = RetrofitHelper\r\n                .getService(ILotteryService.class)\r\n                .getAllLottery()\r\n                .map(new HttpResultFunc<>());\r\n\r\n        Observable<Object> merge = Observable.mergeDelayError(banner, bulletin, home, all);\r\n\r\n        return toSubscribe(merge, subscriber);\r\n    }\r\n```\r\n\r\nThis use seems to be no problem. In the test environment, I can get the data of four interfaces through one subscription, and only two callbacks, the code becomes simple. However, this is not the case in a formal environment. When one of the four network interface data has a problem, the subscription will be cancelled in advance and the remaining network interfaces cannot be requested. like this. .\r\n\r\n```\r\n07-10 10:11:06.495 11229-11291\/? D\/OkHttp: --> POST http:\/\/103.100.62.125:8383\/mobile\/banner.html\r\n    Content-Length: 0\r\n    Host: wanjiba.net\r\n    User-Agent: app_android\r\n    VersionName: 1.0.0\r\n    SysCode: 5.1.1\r\n    Brand: OPPO\r\n    Model: A37fw\r\n    serialNo: 05965c077ce1ba2e061e0c1097b92d2a\r\n    Cookie: SID=Rc0rXjeniIPsXml9A7yn4o+sg32Y2N4A9O3LM7evvPjDZtxuJt7aAJD1PIhEkH+0WzkcFHBp+euxlgHAjF1pCQjRu8p+0X7cuB5VinXwORY=; Path=\/; HttpOnly\r\n    --> END POST (0-byte body)\r\n07-10 10:11:06.595 11229-11291\/? D\/OkHttp: <-- 200 OK http:\/\/103.100.62.125:8383\/mobile\/banner.html (97ms)\r\n    Server: openresty\r\n    Date: Tue, 10 Jul 2018 02:11:06 GMT\r\n    Content-Type: text\/html;charset=utf-8\r\n    Transfer-Encoding: chunked\r\n    Connection: keep-alive\r\n    Vary: Accept-Encoding\r\n    Set-Cookie: route=e4d72e5932637c415a9cacdfc2d328b2; Path=\/\r\n    Content-Disposition: inline;filename=f.txt\r\n    uuid: 0111d8e26ecc3fffe8cfc37fdd4f0112\r\n    {\"error\":0,\"data\":[]}\r\n    <-- END HTTP (21-byte body)\r\n    --> POST http:\/\/103.100.62.125:8383\/mobile\/bulletin.html\r\n    Content-Length: 0\r\n    Host: wanjiba.net\r\n    User-Agent: app_android\r\n    VersionName: 1.0.0\r\n    SysCode: 5.1.1\r\n    Brand: OPPO\r\n    Model: A37fw\r\n    serialNo: 05965c077ce1ba2e061e0c1097b92d2a\r\n    Cookie: SID=Rc0rXjeniIPsXml9A7yn4o+sg32Y2N4A9O3LM7evvPjDZtxuJt7aAJD1PIhEkH+0WzkcFHBp+euxlgHAjF1pCQjRu8p+0X7cuB5VinXwORY=; Path=\/; HttpOnly\r\n    --> END POST (0-byte body)\r\n    <-- HTTP FAILED: java.io.IOException: Canceled\r\n```","Unclear what action we should take on this. Can you provide a failing test case?","Same error here retrofit 2.4 and rxjava 2.2.0","Same error here retrofit 2.5 and rxjava 2.2.3\r\n\r\nand \r\n\r\n \r\n\r\n> ProGuard\r\n\r\n`-keepattributes Signature, InnerClasses, EnclosingMethod\r\n\r\n_Retain service method parameters when optimizing._ \r\n-keepclassmembers,allowshrinking,allowobfuscation interface * {\r\n    @retrofit2.http.* <methods>;\r\n}`\r\n\r\neverything in debug work!!\r\nnot work in release variant .... \r\n\r\n> Data Model\r\n\r\n`\r\ndata class TokenModel(val access_token: String, val refresh_token: String)\r\n`\r\n\r\nApi Interface\r\n\r\n`\r\n @POST(\"oauth\/token?vas_id=1\")\r\n    fun login(@Body parameters: Map<String,String>) : Single<TokenModel>\r\n`\r\n\r\nretrofit cannot map to model  \r\n"],"labels":["Needs Info"]},{"title":"Abandon JSR 305 for some other annotations","body":"JSR 305 is a broken non-standard that will slowly die and which doesn't work with Kotlin by default. Rather than prolong its life, let's flip our role and become a harbinger of its death.","comments":["https:\/\/www.jetbrains.com\/help\/idea\/nullable-and-notnull-annotations.html","I'd love to help here once the direction we want to move in is clear. JetBrain's annotations do seem like a good fit.","The JetBrains ones are certainly the leading candidates but it'd be nice for them to land KEEP-99 before we migrate.","Now that this is showing up in other places (JavaPoet) I'll put up a sample PR and we can merge once KEEP-99 lands?"],"labels":["Enhancement"]},{"title":"Unused custom annotations on method parameters should fail matching for default string converter.","body":"`@GET(\"\/\") Call<ResponseBody> queryParameter(@Foo @Query(\"foo\") Object foo);`\r\nThis method currently will work without a custom string converter. The built-in string converter will simply call foo.toString(), and `@Foo` will be silently ignored.  (...apparently, my first GH issue on Retrofit.)","comments":["The biggest problem here is `@NonNull`\/`@Nullable` annotations.","yeah, awkward.\r\nMy first thought was for Retrofit 3 to have explicit qualifier annotations for methods and parameters that are given in the factory, instead of all the annotations like Retrofit 2. That's more API overhead, though.","Does anybody inspect the `retrofit2.http` annotations in a Converter.Factory? I can't recall if there was a use case or if it was convenience.","It was mostly laziness to not have to filter them for each parameter\nhandler. Also the string converter is supposed to be a catch-all. It\nemulates old behavior before we added string converters where everything\nhad toString() called on it. I think we document this somewhere.\n\nOn Thu, Mar 15, 2018, 6:52 PM Eric Cochran <notifications@github.com> wrote:\n\n> Does anybody inspect the retrofit2.http annotations in a\n> Converter.Factory? I can't recall if there was a use case or if it was\n> convenience.\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/2694#issuecomment-373548134>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAEEEaxAj0O8e5hCXQ2X3KmbmoQGGkd-ks5tevCcgaJpZM4Ss-I0>\n> .\n>\n","Moving this to an enhancement in 3.0 where we'll probably go the Dagger \/ Moshi route."],"labels":["Enhancement"]},{"title":"Make it clearer in the doc the difference between using a relative and an absolute path","body":"The [doc](http:\/\/square.github.io\/retrofit\/) mentions the term \"relative URL\" but doesn't explicitly differentiates between using an absolute and a relative one, e.g.:\r\n`@GET(\"users\/list\")` vs `@GET(\"\/users\/list\")`, they seem to be resolved [here](https:\/\/github.com\/square\/okhttp\/blob\/master\/okhttp\/src\/main\/java\/okhttp3\/HttpUrl.java#L1446).\r\n\r\nI believe it would be better to **explicitly** mention the difference in the page quick doc\/example, or deny absolute URLs.\r\n\r\nhttps:\/\/github.com\/influxdata\/influxdb-java\/issues\/268","comments":["It's documented on [`Retrofit.Builder#baseUrl`][1] which every HTTP method annotation links to with the statement:\r\n\r\n> See [base URL][1] for details of how this is resolved against a base URL to create the full endpoint URL.\r\n\r\n [1]: http:\/\/square.github.io\/retrofit\/2.x\/retrofit\/retrofit2\/Retrofit.Builder.html#baseUrl-okhttp3.HttpUrl-","I'm not saying it's not documented, I'm advocating for making it a bit more explicit on the \"quick-steps\" doc on the [page](http:\/\/square.github.io\/retrofit\/). My point being that there's no need to inflict unnecessary missteps onto a new user with such a mundane detail."],"labels":["Documentation"]},{"title":"Response from 202 code in to JSON","body":"\r\ni want to convert the Response in to JSON and show it to the User .I was able to display 200 response but in 202,i am failed.\r\n\r\nGson gson = new Gson();\r\nSuccessResponse signupResponse = response.body();\r\nString sSignupResponse = gson.toJson(signUpResponse, SuccessResponse.class);\r\nshould i do the same for 202 too? i created another POJO like ErrorResponse with message and code ,replaced the SuccessRespone with ErrorResponse","comments":["If you need to convert 202s differently than 200s you'll have to write a custom call adapter which returns a `responseType()` of `ResponseBody.class` and then does the conversion manually based on the response code. There isn't a good sample of this currently, but I would welcome one."],"labels":["Documentation"]},{"title":"Support Google Protobuf nano","body":"The new converter version is not **protobuf nano** converter.\r\nhttps:\/\/github.com\/square\/retrofit\/tree\/cdf16a83babdf21e0f11e332be7412c2c9dd8071\/retrofit-converters\/protobuf-nano\/src\/main\/java\/retrofit2\/converter\/protobuf\/nano","comments":["This is not a bug. It's a feature request and there's already a PR for it."],"labels":["Enhancement"]},{"title":"Support for multiple\/stream-of values in Rx adapter","body":"Looking through the source code of `adapter-rxjava` it seems like the only supported scenario is single observable even though all-purpose `Observable` is allowed as return type. Would it be beneficial to support more generic use-case when observable emits multiple values?\r\n\r\nI was able to work this on with the following code (based on okhttp streaming example)\r\n```\r\n@GET(\"stream\")\r\n@Streaming\r\nObservable<ResponseBody> stream();\r\n```\r\n\r\n```\r\nPublishSubject<String> subject = PublishSubject.create();\r\nsubject.subscribe(System.out::println, System.err::println, () -> System.out.println(\"Completed!\"));\r\nretrofit.stream().subscribe(\r\n        body -> {\r\n            try {\r\n                BufferedSource source = body.source();\r\n                Buffer buffer = new Buffer();\r\n                while (!source.exhausted()) {\r\n                    source.read(buffer, 8192);\r\n                    subject.onNext(buffer.readUtf8());\r\n                }\r\n            } catch (Exception e) { subject.onError(e); }\r\n        },\r\n        subject::onError,\r\n        subject::onCompleted);\r\n```\r\n\r\nThis code is not the best one for sure, just an illustration. I can receive values emitted through Observable from my service in a streaming fashion now aka server-send events, though. For example, I can request a set of documents from Couchbase that uses Rx natively in their client and receive them as they are emitted by DB instead of waiting for all documents to come together on service and then being sent to me. The code obviously missing body converters so it will become even more verbose in the real world scenario. \r\n\r\nSeems like this type of feature can live inside `adapter-rxjava`.","comments":["Related to hooking up Retrofit to Web Sockets.","See https:\/\/github.com\/JakeWharton\/retrofit2-reactor-adapter\/issues\/10#issuecomment-373074991"],"labels":["Enhancement"]},{"title":"Adapters are not documented well ","body":"The documentation at https:\/\/square.github.io\/retrofit\/ does not tell users about the existing RxJava, Guava and Java8 adapter options.\nAlso, I realize that you want to keep the project small but you could at least link to some other call adapters. I'm looking at https:\/\/github.com\/square\/retrofit\/tree\/master\/retrofit-adapters which misses support for Bolts and Agera (lightweight Rx). Many people already have Bolts via the Facebook SDK and Agera is nice to know when you can't use multidex as Rx is giant.\nHere are links to implementations:\nhttps:\/\/github.com\/zeng1990java\/retrofit-bolts-call-adapter\nhttps:\/\/github.com\/drakeet\/retrofit-agera-call-adapter\n","comments":["The website should be updated to at least mention them. It's hard to balance what's important for the website or else it would turn into being 100 pages long.\n\n> you could at least link to some other call adapters\n\nNone existed at the time because we invented the API and therefore had the only implementations. A [Wiki page](https:\/\/github.com\/square\/retrofit\/wiki\/Call-Adapters) has always existed which I just updated to link to the two you provided.\n\nThat said...\n\n> Many people already have Bolts via the Facebook SDK \n\nWe also have AsyncTask via the Android SDK but that does not mean one should use it.\n\n> Agera is nice to know when you can't use multidex as Rx is giant\n\nYes it's hard to squeeze in RxJava when the support libraries and play services eating up about 80,000 methods.\n","I added a new section for adapters"],"labels":["Documentation"]},{"title":"Provide Call delegate sample","body":"Right now we have a custom Call sample but not one that delegates and wraps. This can be useful for measuring RTT times, for example.\n\nFrom https:\/\/twitter.com\/jaredculp\/status\/777963686459834368\n","comments":[],"labels":["Documentation"]},{"title":"Should @Headers support target type?","body":"Currently this `annotation` limit its `target` to method. It would be nice to extend its funcionality to support `target` `type` too. Frequently, I need to repeat some headers, e.g, api key, method by method. \n\nI know I can use an `interceptor` for that matter; but, still, I prefer to keep my interface decorate with as much annotations as possible; because this metadata serves very well to ilustrate the REST api specifications.\n\nI could try to submit a PR, in case this would be deemed appropriate.\n","comments":["As soon as this exists we need precedence rules. That might break the benefits of this. (DRY vs. bigger abstractions).\n","One simple approach could be throwing an `exception` when a header is present on both method and type. That way there would be not need to set precedence rules.\n","`@Header` and `@HeaderMap` require a parameter value so I'm assuming you are only referring to `@Headers` which is the only one of the three whose data exists completely statically? We've avoided adding any type-level annotations so far and I'm not eager to really start. How many endpoints are you defining?\n","You are right, `@Headers` would be the only one elegible to be supported as type-level annotation (I've updated the tittle of the issue to reflect it). \n\nAbout the number of endpoints which I define, well, it depends on the application. The current one has about 40.  \n\nI just can use an `interceptor`. But I thought that a type-level `@Headers` could reflect better this kind of requirement. \n"],"labels":["Enhancement"]},{"title":"Support default methods on Android","body":"This requires breaking apart `Platform` a bit so that we can conditionally enable features based on availability, not strictly platform.\n","comments":["`java.lang.invoke.*` is missing from NP2. We can't support default methods without it.\n","Missing from NP4 which was the API stability release. So no dice for Android, and no work for me for now. Yay!\n","Probably doable in O. Not going to bother looking for a bit since it'll require changing our `Platform` class to be feature-focused instead of platform-focused since the potential combinatorial explosion of platforms is daunting.","Any update on this now that Android Gradle Plugin 3+ adds default method support? ","This issue is for runtime support, not compile-time support.","Related: https:\/\/github.com\/square\/retrofit\/issues\/2234"],"labels":["Enhancement","Blocked"]},{"title":"Passing one interceptor only per request using okhttp Call proxies","body":"Hi,\n\nI've seen here #261 the work and discussions about how to add header per request and not globally for all requests. But the solution of adding @header parameters is not convenient for my use case (I have lots of endpoints method to implement and headers as well).\n\nIs there a way to pass to the okhttp Call proxies an interceptor (for one request of this proxy only) dynamically?\n\nThank you!\n","comments":["You want to pass an interceptor as a parameter?\n","Nop that is what I want to avoid.\n\nI would like to add interceptor like we do for networkInterceptor or interceptor but not as global for all requests, just only per request. And the thing is that apparently there is no mean to pass this \"local\" sporadic interceptor with the Call proxy.\n\nExcept using the object com.squareup.okhttp.Request. But I would like to use Retrofit.\n","How do you associate the interceptor with the desired endpoint for which it is to apply?\n","Oh yeah I understand your point. It's true that on my proxy I'm going to have multiple endpoint and it could be just applied on this group of endpoints. (why not..)\n\nSo in another way, in order to control all the global interceptors to set them just once per request using Retrofit proxies, what would be the best solution to do this? I wanted to manage my interceptors, but there is no id for them as they are in a list (com.squareup.okhttp.OkHttpClient#interceptors or network ones).\n\nWhat could be the best? Setting global interceptors is interesting but sometimes you would like to set just per request a header.\n","I still don't understand the API you are looking for. You don't want a global interceptor but you also don't want a per-call interceptor. Can you phrase the request in the form of code?\n","Ok sorry.\n\nI want a per-call interceptor. How can I achieve that ? Is the only solution is to use the @header parameters?\n","You can use a `@Header` param for a dynamic, per-endpoint value, the `@Headers` method annotation for a fixed, per-endpoint value, or use an global OkHttp interceptor and match on the request path (or anything else) for modifying the request in any arbitrary way. We don't have any other ways to customize a single endpoint.\n","First of all thank you for the client and this release beta3. Huge work!\n\nUnfortunately I still stuck with Retrofit proxies to access to the original request, update the headers per call and to retrieve easily the original response.\n\nTo explain more, because it's globally the same subject: **how to get\/update original request and response with proxies.**\n\n### Request\n\nAs explained here #1367, we need to properly access to the original request but also to be able to update it on the fly per call. ([reflection is mandatory](https:\/\/github.com\/nuxeo\/nuxeo-java-client\/blob\/master\/nuxeo-java-client\/src\/main\/java\/org\/nuxeo\/java\/client\/api\/objects\/NuxeoEntity.java#L151-L156) for now)\n\n**Request Headers**\n\nThe problem of the 'dynamic' `@header` parameters are that the maintenance of such apis is impossible. We have to duplicate all our methods in order to insert all possible headers and it doesn't even allow to add custom header to apis in general (we should have a header with explicit name inside the annotation). \n\nThe principle of `@header` can be nice for certain use case but when you have multiple endpoints like [this](https:\/\/github.com\/nuxeo\/nuxeo-java-client\/blob\/master\/nuxeo-java-client\/src\/main\/java\/org\/nuxeo\/java\/client\/api\/methods\/RepositoryAPI.java#L38-L146), you cannot maintain all of those headers you would like to put per request.\n\n-> The need of having the possibility to change the request within the proxies is necessary to use Retrofit proxies in general with lots of APIs.\n\nIn general, could it be possible to provide to the `retrofit2.RequestFactory` some informations like header through `retrofit2.Call.execute()` method ? And not just taking into account the annotations in the proxied interface?\n\n### Response\n\nAs mentioned here #1385, following your comment around the `Call.Factory`, I couldn't find a way to do it properly.\n","Hello Jake,\n\nJust to know if it would be possible. Something like this (just a awful draft) https:\/\/github.com\/vpasquier\/retrofit\/commit\/ab75508136b9f90b5e952429acf79d1b36096264\n\nI could work on that but tell me its interesting for you as well to have dynamic headers.\n","Call should not appear to be mutable.\n\nOn Tue, Jan 12, 2016 at 3:13 PM Vladimir Pasquier notifications@github.com\nwrote:\n\n> Hello Jake,\n> \n> Just to know if it would be possible. Something like this (just a awful\n> draft) vpasquier@ab75508\n> https:\/\/github.com\/vpasquier\/retrofit\/commit\/ab75508136b9f90b5e952429acf79d1b36096264\n> \n> I could work on that but tell me its interesting for you as well to have\n> dynamic headers.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/square\/retrofit\/issues\/1422#issuecomment-171093665.\n","I understand. But do you have an idea how to achieve it? Do you have hint to achieve it? I can find an idea and work on it but I wanted to know what you think about my previous message and this feature in the principle. The call is mutable but it has been filled by annotations by the parser.\n","I do actually have an idea how to achieve this and I want to request this as well:\n\nProblem is, that within the retrofit2.CallAdapter there's no option to modify\/intercept the okhttp3.Request building. To solve @vpasquier s (and my problem), we need to at least be able to add a Tag to the request object.   \n\nProblem I face at the moment is, that when you implement the CallAdapter<T> interface, you have to impement the adapt method, which returns an already set Call<T> Object (which is created by retrofit as OkHttpCall) and contains the created and not accessible okhttp3.Request object already.\n\nSome possible options that could handle this issue (to satify both your points):\n- Instead of implementing retrofit2.CallAdapter.adapt(retrofit2.Call<T> call) having to implement something like this: retrofit2.Call<T> adapt(okhttp3.Request request) so we're able to modify the request object before it will be in the okhttp3.Call. \n- having an optional method (so CallAdapter could be an abstract i.e.) \n\n```\n    \/\/ returns the rawRequest by default\n    okhttp3.Request modifyRequest(okhttp3.Request(Builder?!) rawRequest)\n```\n- set a tag to the Call<T> which will be handed into the request when the request is created\n\nThere are lots of possibilities, this were just a few. \n\nThen this modified request can be reached in the okhttp3.Interceptor then. (to full fill @vpasquier s requirement) and it's immutable (to full fill @JakeWharton s)\n\nWhat do you think?\n","A CallAdapter exists solely to change the return type of a service method. It runs before any `Request` is even created and does so synchronously when the service method is called. The `Request` is lazy and does not get created until you call `execute` or `enqueue` (or the adapted type, like RxJava's `Observable` does it for you).\n\nI'm open to a hook into the `Request` creation but it likely needs a good bit of thought as it will have to be something new.\n","Yeah, I've taken a look to the code on the weekend and I agree to that. It's not as easy as I thought it would. But still possible. If I find some time, I'll try to create a solution\n","This is one step in the direction already.\nhttps:\/\/github.com\/square\/retrofit\/pull\/1484\n\nWhat could work now:\n\nin the adapt method we could take the request (using the new retrofit2.Call#request method), modify it as we want (using okhttp.Request#newBuilder) and pass it into an own implementation of retrofit2.Call which we can then return in the CallAdapter#adapt method. So in general this is working already, but it's not the best solution since everyone has to implement it's own \"special\" retrofit.Call.\n\nAnd intercepting the request creation as @JakeWharton mentioned seems way nicer to me as well.\n"],"labels":["Enhancement"]},{"title":"Documentation for MockRetrofit","body":"It is completely unclear how to use MockRetrofit to mock API responses. Will documentation be added?\n","comments":["there's some unofficial documentation here - http:\/\/riggaroo.co.za\/retrofit-2-mocking-http-responses\/\n\nbut something more official would be nice!\n","There's also the unit tests: https:\/\/github.com\/square\/retrofit\/blob\/master\/retrofit-mock\/src\/test\/java\/retrofit2\/mock\/BehaviorDelegateTest.java and sample: https:\/\/github.com\/square\/retrofit\/blob\/master\/samples\/src\/main\/java\/com\/example\/retrofit\/SimpleMockService.java\n"],"labels":["Documentation"]},{"title":"How can I avoid request parameter names getting encoded when making a form-urlencoded POST request?","body":"Hello all!\n\nFirst of all, RetroFit and RetroFit 2.0 are awesome, I've used them in several Android Apps in the past couple of years with great success, well, those Apps had decent backend APIs... but now... I'm working with this horribly designed API (made with ruby on rails) and I can't change the API. This nightmarish API has (among other awful things) POST methods with parameters such as:\n- user[email]\n- location[address]\n- location[city]\n\nAnd I've created this method to consume one of the methods:\n\n``` java\n@FormUrlEncoded\n@POST(\"userExists.json\")\nCall<ExistsResponse> emailExists(@Field(\"user[email]\") String email);\n```\n\nMy service is created with a GsonConverterFactory with the following GSON object:\n\n```\n            Gson gson = new GsonBuilder()\n                    .excludeFieldsWithModifiers(Modifier.TRANSIENT)\n                    .setDateFormat(WebService.API_DATE_FORMAT)\n                    .disableHtmlEscaping()\n                    .create();\n```\n\nI read that using disableHtmlEscaping() on the gson object would help but it didn't.\n\nThe problem I'm having is that the square brackets in the parameter name is getting encoded like this:\n\n```\n... D\/OkHttp: user%5Bemail%5D=email%40example.com\n```\n\n(Yes!, I'm using the very neat [HttpLoggingInterceptor](https:\/\/github.com\/square\/okhttp\/tree\/master\/okhttp-logging-interceptor) to log the body of the requests!)\n\nThis is driving me crazy, I've tried all the possible ways to make this request and the backend API keeps sending me 404 because it is not understanding the request parameter names.\n\nIs there a way to tell retrofit not to encode the parameter names in the body of a post request?\n\nYour help will be greatly appreciated!\n\nHappy holidays!\n","comments":["AFAIK: Passed string value is not going through converter (Gson) since it's\na Form parameter. Try @Field(encoded = true)\n\nOn Thu, Dec 24, 2015, 05:03 Oscar S. notifications@github.com wrote:\n\n> Hello all!\n> \n> First of all, RetroFit and RetroFit 2.0 are awesome, I've used them in\n> several Android Apps in the past couple of years with great success, well,\n> those Apps had decent backend APIs... but now... I'm working with this\n> horribly designed API (made with ruby on rails) and I can't change the API.\n> This nightmarish API has (among other awful things) POST methods with\n> parameters such as:\n> - user[email]\n> - location[address]\n> - location[city]\n> \n> And I've created this method to consume one of the methods:\n> \n> @FormUrlEncoded\n> @POST(\"userExists.json\")Call<ExistsResponse> emailExists(@Field(\"user[email]\") String email);\n> \n> My service is created with a GsonConverterFactory with the following GSON\n> object:\n> \n> ```\n>         Gson gson = new GsonBuilder()\n>                 .excludeFieldsWithModifiers(Modifier.TRANSIENT)\n>                 .setDateFormat(WebService.API_DATE_FORMAT)\n>                 .disableHtmlEscaping()\n>                 .create();\n> ```\n> \n> I read that using disableHtmlEscaping() on the gson object would help but\n> it didn't.\n> \n> The problem I'm having is that the square brackets in the parameter name\n> is getting encoded like this:\n> \n> ... D\/OkHttp: user%5Bemail%5D=email%40example.com\n> \n> (Yes!, I'm using the very neat HttpLoggingInterceptor\n> https:\/\/github.com\/square\/okhttp\/tree\/master\/okhttp-logging-interceptor\n> to log the body of the requests!)\n> \n> This is driving me crazy, I've tried all the possible ways to make this\n> request and the backend API keeps sending me 404 because it is not\n> understanding the request parameter names.\n> \n> Is there a way to tell retrofit not to encode the parameter names in the\n> body of a post request?\n> \n> Your help will be greatly appreciated!\n> \n> Happy holidays!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/square\/retrofit\/issues\/1407.\n> \n> ## \n\n@artem_zin\n","Digging around, I found this commit [4c38147](https:\/\/github.com\/square\/retrofit\/commit\/4c38147577d47227b05c0bdb0e8bfefd0f995dec?diff=split) made by @JakeWharton that adds methods to tell if the field name or value should be encoded or not in the body.\n\nBut, I can't find a way to use them... will keep trying.\n\nUPDATE: Ok... apparently this worked at some point in retrofit one, not retrofit2. :(\n","There is a test case that proves `encoded=true` works: https:\/\/github.com\/square\/retrofit\/blob\/90729eb2ae2f3329281c1f9813ab1de3daa71ad0\/retrofit\/src\/test\/java\/retrofit2\/RequestBuilderTest.java#L1488-L1498. What output do you get when you use it?\n","Hey thank you @JakeWharton, you rock man!,\n\nEvidently I missed that test case. I tried with:\n\n```\n@Field(value = \"user[email]\", encoded = false)\n```\n\nand the request didn't went through, then I tried with:\n\n```\n@Field(value = \"user[email]\", encoded = true)\n```\n\nand that was all I had to do in order to get a response from this API.\n\nOn the other hand, there seems to be an issue with the HttpLoggingInterceptor because the output in my log is still:\n\n```\n... D\/OkHttp: user%5Bemail%5D=email%40example.com\n```\n","i have meet this question,too.forexample:Date type\uff0cbrackets\n","Stop spamming our issues. This is your one and only warning.\n\n(Their comment was since deleted)\n\nOn Fri, Jun 3, 2016 at 12:41 AM AMIT SHEKHAR notifications@github.com\nwrote:\n\n> You can use this library . This library supports this\n> Android Networking\n> https:\/\/github.com\/amitshekhariitbhu\/AndroidNetworking\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https:\/\/github.com\/square\/retrofit\/issues\/1407#issuecomment-223489318,\n> or mute the thread\n> https:\/\/github.com\/notifications\/unsubscribe\/AAEEEX_rEgq_ZiW4cDdz0WLykbVoc4pgks5qH7CDgaJpZM4G64vQ\n> .\n","I am facing the same issue after upgrading to Retrofit 2.0\n\nTried Both :\n @Field(value = \"email\", encoded = false) String email\n@Field(value = \"email\", encoded = true) String email\n\nGetting same result \"sriramji.k**%40**gmail.com\", but i want \"sriramji.k@gmail.com\" \n","@JakeWharton Please help me out of this issue","This issue can be fix if you add one more method in `Formbody.Builder` like\r\n```\r\npublic static final class Builder {\r\n......\r\npublic Builder addPlainText(String name, String value) {\r\n      names.add(name);\r\n      values.add(value);\r\n      return this;\r\n    }\r\n.....\r\n}\r\n```","I ran into the same issue since I upgraded from retrofit 1.9 to retofit 2.\r\n\r\n`@Field(value = \"videos[]\") List<Integer> videoIds`\r\nResult: videos%5B%5D=4340934\r\n\r\n`@Field(value = \"videos[]\", encoded = true) List<Integer> videoIds`\r\nResult: videos%5B%5D=4340934\r\n\r\nI am not sure how the encoded parameter works but I guess this is only for the values of the field?\r\n\r\n@sriramji did you find any solution for this?","@mzander For now i created my own `FormBody.Builder` like i said before\r\n\r\n```\r\n @POST(LOGIN_URL)\r\n Call<BaseResponse> loginUser(@Body RequestBody body);\r\n```\r\n\r\n```\r\n RequestBody formBody = new FormBody.Builder()\r\n                .add(EMAIL, emailId.getText().toString())\r\n                .add(PASSWORD, password.getText().toString())\r\n                .build();\r\n\r\n Call<BaseResponse> loginCall = RetorfitService.service.loginUser(formBody);\r\n```\r\n\r\n","I've read the source code of Retrofit and Okhttp, here is the key:\r\n```java\r\n\/\/ in package okhttp3\r\npublic final class HttpUrl {\r\n  static final String QUERY_ENCODE_SET = \" \\\"'<>#\";\r\n  static final String QUERY_COMPONENT_ENCODE_SET = \" \\\"'<>#&=\";\r\n  static final String QUERY_COMPONENT_ENCODE_SET_URI = \"\\\\^`{|}\";\r\n  static final String FORM_ENCODE_SET = \" \\\"':;<=>@[]^`{}|\/\\\\?#&!$(),~\";\r\n\r\n  static void canonicalize(Buffer out, String input, int pos, int limit, String encodeSet,\r\n      boolean alreadyEncoded, boolean strict, boolean plusIsSpace, boolean asciiOnly) {\r\n    Buffer utf8Buffer = null; \/\/ Lazily allocated.\r\n    int codePoint;\r\n    for (int i = pos; i < limit; i += Character.charCount(codePoint)) {\r\n      codePoint = input.codePointAt(i);\r\n      if (alreadyEncoded\r\n          && (codePoint == '\\t' || codePoint == '\\n' || codePoint == '\\f' || codePoint == '\\r')) {\r\n        \/\/ Skip this character.\r\n      } else if (codePoint == '+' && plusIsSpace) {\r\n        \/\/ Encode '+' as '%2B' since we permit ' ' to be encoded as either '+' or '%20'.\r\n        out.writeUtf8(alreadyEncoded ? \"+\" : \"%2B\");\r\n      } else if (codePoint < 0x20\r\n          || codePoint == 0x7f\r\n          || codePoint >= 0x80 && asciiOnly\r\n          || encodeSet.indexOf(codePoint) != -1\r\n          || codePoint == '%' && (!alreadyEncoded || strict && !percentEncoded(input, i, limit))) {\r\n        \/\/ Percent encode this character.\r\n        if (utf8Buffer == null) {\r\n          utf8Buffer = new Buffer();\r\n        }\r\n        utf8Buffer.writeUtf8CodePoint(codePoint);\r\n        while (!utf8Buffer.exhausted()) {\r\n          int b = utf8Buffer.readByte() & 0xff;\r\n          out.writeByte('%');\r\n          out.writeByte(HEX_DIGITS[(b >> 4) & 0xf]);\r\n          out.writeByte(HEX_DIGITS[b & 0xf]);\r\n        }\r\n      } else {\r\n        \/\/ This character doesn't need encoding. Just copy it over.\r\n        out.writeUtf8CodePoint(codePoint);\r\n      }\r\n    }\r\n}\r\n```\r\nDraw a conclusion is that, @Query won't encode char '[' and ']' into percent-encoding, but @Field will. So if you use @Query(\"user[email]\"), it will be ok, but @Field(\"user[email]\") will fail","Any clue how to solve this problem? I'm facing the same issue.\r\nI have an API call like this:\r\n```\r\n@FormUrlEncoded\r\n@POST(Constantes.URL_AUTHENTICATE)\r\nCall<Object> authenticateUser(@Field(\"name\") String name , @Field(\"password\") String pwd);\r\n```\r\n\r\nAnd when the password parameter is an encoded string, for example, _MTIzNA==_ and when I make the request this String becomes _MTIzNA%3D%3D_.\r\n\r\nI've tried what @sriramji says and I've used a FormBody builder like this\r\n```\r\n RequestBody formBody = new FormBody.Builder()\r\n  .add(\"name\", etUserName.getText().toString())\r\n  .add(\"password\", new String(encodeValue))\r\n.build();\r\n```\r\n\r\nBut didn't work either. I've searched a lot but I didn't find anything. Any help will be appreciated.","Anybody solve this problem?\r\nplease help...))","I've done this to solve the problem.\r\nI have an Interceptor on my httpclient and when the method equals to post or put I decode de body. This is my code.\r\n\r\n```\r\n       HttpLoggingInterceptor logging = new HttpLoggingInterceptor();\r\n        logging.setLevel(HttpLoggingInterceptor.Level.BODY);\r\n        OkHttpClient.Builder httpClient = new OkHttpClient.Builder();\r\n        httpClient.addInterceptor(new Interceptor() {\r\n            @Override\r\n            public Response intercept(Interceptor.Chain chain) throws IOException {\r\n                Request original = chain.request();\r\n\r\n                \/\/El problema es que codifica los parametros del body y no los queremos codificados\r\n                String postBody = bodyToString(original.body());\r\n                String newPostBody = URLDecoder.decode(postBody);\r\n                RequestBody body = original.body();\r\n                RequestBody requestBody = null;\r\n\r\n                if(body!=null){\r\n                    requestBody = RequestBody.create(original.body().contentType(),newPostBody);\r\n                }\r\n\r\n                \/\/ Aqui el problema es que se tiene que modificar el body en los put y los post para decodificar,\r\n                \/\/ pero los get y delete no tienen body\r\n                Request request;\r\n                if (original.method().equals(\"post\")) {\r\n                    request = original.newBuilder()\r\n                            .method(original.method(), original.body())\r\n                            .post(requestBody)\r\n                            .build();\r\n                }else if(original.method().equals(\"put\")){\r\n                    request = original.newBuilder()\r\n                            .method(original.method(), original.body())\r\n                            .put(requestBody)\r\n                            .build();\r\n                }else{\r\n                    request = original.newBuilder()\r\n                            .method(original.method(), original.body())\r\n                            .build();\r\n                }\r\n\r\n\r\n                return chain.proceed(request);\r\n            }\r\n\r\n            public String bodyToString(final RequestBody request){\r\n                try {\r\n                    final RequestBody copy = request;\r\n                    final Buffer buffer = new Buffer();\r\n                    if(copy != null)\r\n                        copy.writeTo(buffer);\r\n                    else\r\n                        return \"\";\r\n                    return buffer.readUtf8();\r\n                }\r\n                catch (final IOException e) {\r\n                    return \"did not work\";\r\n                }\r\n            }\r\n        });\r\n\r\n        httpClient.addInterceptor(logging);\r\n```","@adriamt what does your API Interface look like? Tried your solution but no success.","I've got two classes, my interface : \r\n\r\n```java\r\npublic interface MyApi{\r\n    @FormUrlEncoded\r\n    @POST(Constantes.URL_USER)\r\n    Call<Object> createUser(\r\n            @Field(value=\"name\") String name,\r\n            @Field(value=\"password\") String pwd);\r\n}\r\n```\r\nI have other calls, but all look like this and then my RestClient:\r\n\r\n```java\r\npublic class MyRestClient {\r\n    public static MyApi REST_CLIENT;\r\n    private static String ROOT = BuildConfig.API_HOST;\r\n\r\n    static {\r\n        setupRestClient();\r\n    }\r\n\r\n    public MyRestClient() {}\r\n\r\n    private static void setupRestClient() {\r\n\r\n        HttpLoggingInterceptor logging = new HttpLoggingInterceptor();\r\n        logging.setLevel(HttpLoggingInterceptor.Level.BODY);\r\n        OkHttpClient.Builder httpClient = new OkHttpClient.Builder();\r\n        httpClient.addInterceptor(new Interceptor() {\r\n            @Override\r\n            public Response intercept(Interceptor.Chain chain) throws IOException {\r\n                Request original = chain.request();\r\n\r\n                String postBody = bodyToString(original.body());\r\n                String newPostBody = URLDecoder.decode(postBody);\r\n                RequestBody body = original.body();\r\n                RequestBody requestBody = null;\r\n\r\n                if(body!=null){\r\n                    requestBody = RequestBody.create(original.body().contentType(),newPostBody);\r\n                }\r\n\r\n                Request request;\r\n                if (original.method().equals(\"post\")) {\r\n                    request = original.newBuilder()\r\n                            .method(original.method(), original.body())\r\n                            .post(requestBody)\r\n                            .build();\r\n                }else if(original.method().equals(\"put\")){\r\n                    request = original.newBuilder()\r\n                            .method(original.method(), original.body())\r\n                            .put(requestBody)\r\n                            .build();\r\n                }else{\r\n                    request = original.newBuilder()\r\n                            .method(original.method(), original.body())\r\n                            .build();\r\n                }\r\n\r\n\r\n                return chain.proceed(request);\r\n            }\r\n\r\n            public String bodyToString(final RequestBody request){\r\n                try {\r\n                    final RequestBody copy = request;\r\n                    final Buffer buffer = new Buffer();\r\n                    if(copy != null)\r\n                        copy.writeTo(buffer);\r\n                    else\r\n                        return \"\";\r\n                    return buffer.readUtf8();\r\n                }\r\n                catch (final IOException e) {\r\n                    return \"did not work\";\r\n                }\r\n            }\r\n        });\r\n\r\n        httpClient.addInterceptor(logging);\r\n\r\n        OkHttpClient client = httpClient\r\n                .readTimeout(60, TimeUnit.SECONDS)\r\n                .writeTimeout(60, TimeUnit.SECONDS)\r\n                .build();\r\n\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(Date.class, new DateDeserializer()).setLenient().create();\r\n\r\n\r\n        Retrofit retrofit = new Retrofit.Builder()\r\n                .baseUrl(ROOT)\r\n                .addConverterFactory(GsonConverterFactory.create(gson))\r\n                .client(client)\r\n                .build();\r\n\r\n        REST_CLIENT = retrofit.create(MyApi.class);\r\n    }\r\n\r\n    public static MyApi get() {\r\n        return REST_CLIENT;\r\n    }\r\n\r\n    public staticMyApi post() {\r\n        return REST_CLIENT;\r\n    }\r\n\r\n    public static MyApi put() {\r\n        return REST_CLIENT;\r\n    }\r\n\r\n    public static MyApi delete() {\r\n        return REST_CLIENT;\r\n    }\r\n}\r\n```\r\nI don't know if its the best solution but it works for me for the moment.","A very simple solution is to pass the value encoded and then add the encoded = true flag to retrofit. \r\n\r\n`String item = \"MTUwNTIyODgxMDg4Mw==\";`\r\n\r\n` encodedItem = URLEncoder.encode(item, \"utf-8\");`\r\n\r\n`@Query(value = \"item\", encoded = true) String item`\r\n\r\nThis way when the time comes it'll decode it.\r\n\r\n","@NeLk42 but how I can use your solution in POST parameters?\r\nI need send params like this ( key : value) \r\nlogin[name] : some-name\r\ndate : 2017-08-28T12:12:12+0200\r\nand request looks like\r\n```\r\n@FormUrlEncoded\r\n@POST(urlLogin)\r\nCall<Login> signIn(@Field(\"login[name]\") String name,      \r\n                               @Field(\"date\")   String date);\r\n```\r\n@adriamt I'm had trying  your solution, but when I changing request body, then I can't parse back them to key-value params  and I don't know what I 'm sending ....\r\n\r\nI don't know what i'm doing wrong .. :(","@Nan0fm Can you try this?\r\n\r\nBefore passing the value, encode it.\r\n```\r\nString username = getUsername();\r\nString encodedUsername = URLEncoder.encode(username, \"utf-8\");\r\nretrofitObject.signIn(encodedUsername, date)\r\n```\r\n\r\nLet retrofit know that you've encoded that value.\r\n```\r\n@FormUrlEncoded\r\n@POST(urlLogin)\r\nCall<Login> signIn(@Field(\"login[name]\", encoded = true) String name,      \r\n                               @Field(\"date\")   String date);\r\n```\r\n\r\nIn my case, I'm using it to validate a SHA512 encoded password against a signed header, I don't see why it shouldn't work for you.","@sriramji can you give a full code?\r\nbecause you add a method called addPlainText then your demo use add method. is it your new added method?","yeah that was my added method. It is not recommended but I have no other choice, so i created my own custom FormBody class\r\n\r\nThis is the class that we need to look\r\n```\r\n\r\n\r\npackage okhttp3;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport okhttp3.internal.Util;\r\nimport okio.Buffer;\r\nimport okio.BufferedSink;\r\n\r\npublic final class FormBody extends RequestBody {\r\n    private static final MediaType CONTENT_TYPE = MediaType.parse(\"application\/x-www-form-urlencoded\");\r\n    private final List<String> encodedNames;\r\n    private final List<String> encodedValues;\r\n\r\n    private FormBody(List<String> encodedNames, List<String> encodedValues) {\r\n        this.encodedNames = Util.immutableList(encodedNames);\r\n        this.encodedValues = Util.immutableList(encodedValues);\r\n    }\r\n\r\n    public int size() {\r\n        return this.encodedNames.size();\r\n    }\r\n\r\n    public String encodedName(int index) {\r\n        return (String)this.encodedNames.get(index);\r\n    }\r\n\r\n    public String name(int index) {\r\n        return HttpUrl.percentDecode(this.encodedName(index), true);\r\n    }\r\n\r\n    public String encodedValue(int index) {\r\n        return (String)this.encodedValues.get(index);\r\n    }\r\n\r\n    public String value(int index) {\r\n        return HttpUrl.percentDecode(this.encodedValue(index), true);\r\n    }\r\n\r\n    public MediaType contentType() {\r\n        return CONTENT_TYPE;\r\n    }\r\n\r\n    public long contentLength() {\r\n        return this.writeOrCountBytes((BufferedSink)null, true);\r\n    }\r\n\r\n    public void writeTo(BufferedSink sink) throws IOException {\r\n        this.writeOrCountBytes(sink, false);\r\n    }\r\n\r\n    private long writeOrCountBytes(BufferedSink sink, boolean countBytes) {\r\n        long byteCount = 0L;\r\n        Buffer buffer;\r\n        if(countBytes) {\r\n            buffer = new Buffer();\r\n        } else {\r\n            buffer = sink.buffer();\r\n        }\r\n\r\n        int i = 0;\r\n\r\n        for(int size = this.encodedNames.size(); i < size; ++i) {\r\n            if(i > 0) {\r\n                buffer.writeByte(38);\r\n            }\r\n\r\n            buffer.writeUtf8((String)this.encodedNames.get(i));\r\n            buffer.writeByte(61);\r\n            buffer.writeUtf8((String)this.encodedValues.get(i));\r\n        }\r\n\r\n        if(countBytes) {\r\n            byteCount = buffer.size();\r\n            buffer.clear();\r\n        }\r\n\r\n        return byteCount;\r\n    }\r\n\r\n    public static final class Builder {\r\n        private final List<String> names = new ArrayList();\r\n        private final List<String> values = new ArrayList();\r\n\r\n        public Builder() {\r\n        }\r\n\r\n        public FormBody.Builder add(String name, String value) {\r\n            this.names.add(HttpUrl.canonicalize(name, \" \\\"':;<=>@[]^`{}|\/\\\\?#&!$(),~\", false, false, true, true));\r\n            this.values.add(HttpUrl.canonicalize(value, \" \\\"':;<=>@[]^`{}|\/\\\\?#&!$(),~\", false, false, true, true));\r\n            return this;\r\n        }\r\n\r\n        public FormBody.Builder addEncoded(String name, String value) {\r\n            this.names.add(HttpUrl.canonicalize(name, \" \\\"':;<=>@[]^`{}|\/\\\\?#&!$(),~\", true, false, true, true));\r\n            this.values.add(HttpUrl.canonicalize(value, \" \\\"':;<=>@[]^`{}|\/\\\\?#&!$(),~\", true, false, true, true));\r\n            return this;\r\n        }\r\n\r\n        public FormBody build() {\r\n            return new FormBody(this.names, this.values);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\nIn Builder Inner class add your custom method \r\n\r\n```\r\npublic FormBody.Builder addPlainText(String name, String value) {\r\n            this.names.add(name);\r\n            this.values.add(value);\r\n            return this;\r\n}\r\n```\r\n","The problem was finally solved \uff01\r\n![image](https:\/\/user-images.githubusercontent.com\/20508257\/34238775-7c4c9aac-e63e-11e7-9aa7-6be2be8ab552.png)\r\n\r\nadd @Headers(\"Content-Type:application\/x-www-form-urlencoded; charset=utf-8\")","\u8fd8\u662f\u4e0d\u884c","Neither the extra content-type header nor setting the encoded to false works. The fields still got encoded.","The Field(encoded = true) directive is ONLY there for the scenario that the value you're sending is already encoded. Setting encoded = true does NOT disable encoding it simply ensures the value is not double encoded.\r\n\r\nUnfortunately though, as has been mentioned, a lot of people want to turn the encoding off altogether. focussing on the behaviour of the encoded option in the Field is not the place to get this as this is not by design, for turning the encoding off - it is only to stop double encoding.\r\n\r\nA feature request should rather be logged to add a flag to turn off encoding altogether via a @Field annotation.","I am passing a complex POJO\r\n@POST(\"project\/{pro_id}\/sender\")\r\n    Single<AssetRenderResponse> uploadRenderingJSON(\r\n            @Path(\"pro_id\") String proId, @Body RenderRequest renderRequest);\r\n\r\nSome fields of the POJO are already encoded using StringEscapeUtils.escapeJava(textCaption);\r\n\r\nHow can I avoid the strings getting encoded again. Since double quotes and backslash are converted to \\\\\\\" and \\\\\\\\ respectively.\r\n\r\nPlease suggest.","I'm facing same situation.","I'm having this problem and nothing of the solutions above is working","[\r\n    {\r\n        \"ofsNo\": \"180007\",\r\n        \"dispatchDate\": \"07\/04\/2018\",\r\n        \"vehicleNo\": \"ka45p3654\",\r\n        \"transporterName\": \"trns\",\r\n        \"depotName\": \"KSBCL\",\r\n        \"ofsId\": 1\r\n    },\r\n    {\r\n        \"ofsNo\": \"180004\",\r\n        \"dispatchDate\": \"07\/04\/2018\",\r\n        \"vehicleNo\": \"KA09B6435\",\r\n        \"transporterName\": \"trns\",\r\n        \"depotName\": \"KSBCL\",\r\n        \"ofsId\": 10006\r\n    }\r\n]\r\n\r\nHi every one \r\ni want get ofsno in spinner and  base on ofsno populate value into EditText like as\r\n        \"dispatchDate\": \"07\/04\/2018\",\r\n        \"vehicleNo\": \"KA09B6435\",\r\n        \"transporterName\": \"trns\",\r\n        \"depotName\": \"KSBCL\", etc\r\nbut using retrofit \r\n\r\npublic void networkCall(){\r\n        ofsworld = new ArrayList<OfsId>();\r\n        \/\/ Create an array to populate the spinner\r\n        ofsIdArrayList = new ArrayList<String>();\r\n        final ApiInterface apiInterface = ApiClient.getClient().create(ApiInterface.class);\r\n        Call<List<OfsId>> call =apiInterface.getOfsID();\r\n        call.enqueue(new Callback<List<OfsId>>() {\r\n            @Override\r\n            public void onResponse(Call<List<OfsId>> call, Response<List<OfsId>> response) {\r\n                 if (response.isSuccessful()){\r\n                     Log.d(\"data\",String.valueOf(response));\r\n                 }\r\n\r\n               try {\r\n                    List<OfsId> ofsIds = response.body();\r\n                    for (int i=0;i<ofsIds.size();i++){\r\n                        if (i==0){\r\n                            \/\/String code = ofsIds.get(i).getOfsNo();\r\n                            String leaveType = ofsIds.get(i).getOfsNo();\r\n                            String dipatchDate = ofsIds.get(i).getDispatchDate();\r\n                            String depotName = ofsIds.get(i).getDepotName();\r\n                            String vechicleNo = ofsIds.get(i).getVehicleNo();\r\n                            String trnsName = ofsIds.get(i).getTransporterName();\r\n                            ofsIdArrayList.add(leaveType);\r\n                            et_DispatchDate.setText(dipatchDate);\r\n                            et_DepotName.setText(depotName);\r\n                            et_VechicleNo.setText(vechicleNo);\r\n                            et_TransporterName.setText(trnsName);\r\n\r\n\r\n                        }\r\n\r\n\r\n                        arrayAdapter = new ArrayAdapter(MainActivity.this,android.R.layout.simple_spinner_item,ofsIdArrayList);\r\n                        arrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n                        ofs_Spinner.setAdapter(arrayAdapter);\r\n                    }\r\n\r\n                }catch (Exception e){\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<List<OfsId>> call, Throwable t) {\r\n\r\n            }\r\n        });\r\n    }","There is still no solution","I have tried most of the solutions above, but no one works. It took me almost  half of the day to finally resolve this problem.\r\n\r\n\r\nApi interface : (**Note:  do not use the @FormUrlEncoded  annotation.**)\r\n\r\n```\r\n@POST(\"\/jdai\/snapshop\")\r\n@Headers(\"Content-Type:text\/plain\")\r\nCall<JDAiResultBean> postServer(@QueryMap Map<String, String> queryMap, @Body RequestBody body); \r\n```\r\nBuild your post parameters like as below. \r\n```\r\nString url = \"channel_id=\" + CHANNEL_ID  + \"&imgBase64=\" + mImageBase64 + \"&topK=1\";\r\nMediaType mediaType = MediaType.parse(\"text\/plain\");\r\nRequestBody body = RequestBody.create(mediaType, url);\r\napi.postServer(queryMap, body);\r\n```\r\nThat's all. Hope this could save your time. \r\n\r\n","Please Use **encoded = true**\r\n@Query(value = \"email\", encoded = true)\r\n\r\n\r\n@HTTP(method = \"DELETE\", path = \"\/endurl\", hasBody = true)\r\nObservable<String> deleteContact(@Query(value = \"email\", encoded = true) String email);","I am running into this now, and none of the solutions are working. It's encoding an email and password in a form and now it's throwing errors.","i have tried all above solution no solution worked for my problem \r\ni am sending encrypted params in POST request witch add special character during encoding and OKHTTP adding special codes as mention above"],"labels":["Needs Info"]},{"title":"Maps do not support multi-values","body":"hi,\nwe are using retrofit 1.9 and we declared our endpoint as\n\n```\n@GET(\"\/path\")\nResponse get(@QueryMap Map<String, String> queryParams);\n```\n\nwhich works fine and is expanded to ex. `host\/path?rq=1&ra=2` for input `{\"rq\": \"1\", \"ra\": \"2\"}`. \n\nright now we need to support multivalue same as described here https:\/\/futurestud.io\/blog\/retrofit-multiple-query-parameters-of-same-name but for @QueryMap. and declaring endpoint as\n\n```\n@GET(\"\/path\")\nResponse get(@QueryMap Map<String, List<String>> queryParams);\n```\n\ndoesn't help at all as value is expanded to its string equivalent ex. `host\/path?rq=[1,2]` for input `{\"rq\": [\"1\", \"2\"]}`. we would like to get same behavior as for @Query ex. `host\/path?rq=1&rq=2` for input `{\"rq\": [\"1\", \"2\"]}`.\n\nis there any work around for now?\n","comments":["None of the maps support this currently, no.\n","is there any road map. we solve the issue adding another parameter with @Query annotation which supports multi value. but this is ugly\n","In my project I serialized my object via GSON to string and with @Query annotation I succeed to send it probably \n","it is not about serializing but properly handling multivalues for one key\n","`@PartMap` does not support multi values as well. One trick around it is to extend `Map` and overriding `Map#entrySet()`, though this can break as it depends on the internals.\n","Most likely #1184 provides some help with this.\n","thanks! it seems will do the trick!\n","in the meantime, i hacked this together for anyone who absolutely needs this and can't wait - https:\/\/gist.github.com\/mandybess\/dca2e8a0527aff2d8e0688c17297c945\n","I have a simple trick. \r\n\r\n```java\r\npublic class ProxyRetrofitQueryMap extends HashMap<String, Object> {\r\n    public ProxyRetrofitQueryMap(Map<String, Object> m) {\r\n        super(m);\r\n    }\r\n\r\n    @Override\r\n    public Set<Entry<String, Object>> entrySet() {\r\n        Set<Entry<String, Object>> originSet = super.entrySet();\r\n        Set<Entry<String, Object>> newSet = new HashSet<>();\r\n\r\n        for (Entry<String, Object> entry : originSet) {\r\n            String entryKey = entry.getKey();\r\n            if (entryKey == null) {\r\n                throw new IllegalArgumentException(\"Query map contained null key.\");\r\n            }\r\n            Object entryValue = entry.getValue();\r\n            if (entryValue == null) {\r\n                throw new IllegalArgumentException(\r\n                        \"Query map contained null value for key '\" + entryKey + \"'.\");\r\n            }\r\n            else if(entryValue instanceof List) {\r\n                for(Object arrayValue:(List)entryValue)\t {\r\n                    if (arrayValue != null) { \/\/ Skip null values\r\n                        Entry<String, Object> newEntry = new AbstractMap.SimpleEntry<>(entryKey, arrayValue);\r\n                        newSet.add(newEntry);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                Entry<String, Object> newEntry = new AbstractMap.SimpleEntry<>(entryKey, entryValue);\r\n                newSet.add(newEntry);\r\n            }\r\n        }\r\n        return newSet;\r\n    }\r\n}\r\n```\r\nand use that class => @Querymap or @FieldMap.\r\n","hi, is this supported in the lastest retrofit version  ?","@jm-lim's solution, converted for Kotlin: \r\n\r\n```kotlin\r\nclass ProxyRetrofitQueryMap(m: MutableMap<String, Any>) : HashMap<String, Any>(m) {\r\n    override val entries: MutableSet<MutableMap.MutableEntry<String, Any>>\r\n        get() {\r\n            val originSet: Set<Map.Entry<String?, Any?>> = super.entries\r\n            val newSet: MutableSet<MutableMap.MutableEntry<String, Any>> = HashSet()\r\n            for ((key, entryValue) in originSet) {\r\n                val entryKey = key ?: throw IllegalArgumentException(\"Query map contained null key.\")\r\n                \/\/ Skip null values\r\n                requireNotNull(entryValue) { \"Query map contained null value for key '$entryKey'.\" }\r\n                if (entryValue is List<*>) {\r\n                    for (arrayValue in entryValue) {\r\n                        if (arrayValue != null) { \/\/ Skip null values\r\n                            val newEntry: MutableMap.MutableEntry<String, Any> =\r\n                                    SimpleEntry(entryKey, arrayValue)\r\n                            newSet.add(newEntry)\r\n                        }\r\n                    }\r\n                } else {\r\n                    val newEntry: MutableMap.MutableEntry<String, Any> = SimpleEntry(entryKey, entryValue)\r\n                    newSet.add(newEntry)\r\n                }\r\n            }\r\n            return newSet\r\n        }\r\n}\r\n```","Any update on this or should we go with custom solution? @JakeWharton ","+1 on this issue.  Please support Map<String, Iterable<Object>> (or any of guava, spring, commons-collections multimaps) as a parameter annotated with @QueryMap \r\n\r\nbtw - if your input already has data on the form Map<String, List<String>>\r\nthe solution of @lgtout and @jm-lim could be reduced to something like:\r\n\r\n```    \r\n    private class ProxyRetrofitQueryMap(val original: Map<String, List<String>>) : AbstractMap<String, String>() {\r\n        override val entries: Set<Map.Entry<String, String>>\r\n            get() {\r\n                return original.entries.flatMap { (key, value) -> value.map { SimpleEntry(key, it) } }.toSet()\r\n            }\r\n    }\r\n```"],"labels":["Feature"]},{"title":"No documentation for custom Converter","body":"Would it be possible to add in some documentation on defining a custom converter with examples?\n","comments":["What is missing? `Converter` and `Converter.Factory` have documentation, there's 6 built-in examples for 3 serialization formats, and the test code has a trivial example in `ToStringConverterFactory`.\n","You are correct, there is enough there if you dig into the code.  However the main site provides examples for everything, without having to dig into the code.  Certainly not a huge deal at all, just thought it would be nice to see an example that accompanied this text.\n\n<blockquote>\nCUSTOM CONVERTERS\nIf you need to communicate with an API that uses a content-format that Retrofit does not support out of the box (e.g. YAML, txt, custom format) or you wish to use a different library to implement an existing format, you can easily create your own converter. Create a class that extends the Converter.Factory class and pass in an instance when building your adapter.\n<\/blockquote>\n"],"labels":["Documentation"]},{"title":"Figure out and test primitive array string converter interaction.","body":"Given `@Query(\"foo\") int[] foo`,\n\nDo we let you specify a custom `Converter<Integer, String>` and detail how each `int` is rendered? Or do we just not allow primitive arrays to have their component type specified by a converter at all and force `String.valueOf` on them.\n","comments":[],"labels":["Enhancement"]},{"title":"How to perform cascade queries?","body":"I've got a situation where I need to log in and then fetch useful data. Unfortunately, the login is via a form and the site times out pretty fast. Therefore, I'd need to perform two (or more) calls in sequence (i.e. make sure the login call finished before executing the second one). So far I came with 2 variants:\n1. enqueue the second call from within the `onResponse()` of the first one\n2. Use Observables with map()\n\nIs there an advised approach for this?\n\nPS: Also on [SO](http:\/\/stackoverflow.com\/q\/33240340\/515948).\n","comments":["Questions on StackOverflow do not need duplicated here. The issue tracker is for bug reports and feature requests. I will try to answer on the linked question later (if no one has beaten me to it).\n","True. Thought it could have some relevance to documentation as an interesting use case.\n","Fair. I need to start tracking documentation improvements as issues.\n","Interesting is this too, with parallel requests also, it will be nice to have something included in retrofit for this :)\n\nFor now for multiple cascading request I use an asynTask and make all retrofit call synchronous in it. \nFor two request you can do it in the `OnResponse` method but more will be ugly.\n","The gist is that you use RxJava or ListenableFuture or CompletableFuture as\nyour mechanism of composition and control over the parallel\/serial\nexecution. Retrofit itself won't be providing higher-level APIs for this,\nbut that also doesn't prevent you from executing Calls in parallel or\nserially either, there's just a bit of manual bookkeeping.\n\nOn Mon, Mar 14, 2016, 11:28 AM Jaumard notifications@github.com wrote:\n\n> Interesting is this too, with parallel requests also, it will be nice to\n> have something included in retrofit for this :)\n> \n> For now for multiple cascading request I use an asynTask and make all\n> retrofit call synchronous in it.\n> For two request you can do it in the OnResponse method but more will be\n> ugly.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/square\/retrofit\/issues\/1213#issuecomment-196368254.\n","@JakeWharton  Sorry to trouble you. And I am facing the same situation, I need to make two serial requests. You mentioned we can use RxJava or ListenableFuture or CompletableFuture to implement this mechanism. But I still can not figure out the solution, could you kindly give us a sample. Thank you very much.\n"],"labels":["Documentation"]},{"title":"Include debug info into exceptions","body":"What do you think about a flag for including debug info (such as `request.toString()`) into exceptions?\n\nUsage:\n\n``` java\nRetrofit retrofit = new Retrofit.Builder()\n    .baseUrl(API_URL)\n    .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n    .addConverterFactory(GsonConverterFactory.create())\n    .includeDebugInfoIntoExceptions(BuildConfig.DEBUG) \/\/ only for internal builds!\n    .build();\n```\n\nExample of a stacktrace of incorrect call via RxJava **without** debug info:\n![screen shot 2015-10-03 at 23 22 48](https:\/\/cloud.githubusercontent.com\/assets\/967132\/10264954\/cf9ae624-6a25-11e5-95f2-566c2c662940.png)\n\nExample of a stacktrace of incorrect call via RxJava **with** included debug info:\n![screen shot 2015-10-03 at 23 23 14](https:\/\/cloud.githubusercontent.com\/assets\/967132\/10264956\/de297cd2-6a25-11e5-8b2d-16e34e8d6c3c.png)\n\nAsync request (RxJava, etc) loses information about its start point (jumps to the other Thread and booms there), stacktraces become useless :crying_cat_face:. \n\nLogging is a great helper too! But sometimes you just don't want to log all the requests to keep the log readable, but you also want to see as much info as possible about the problems. Once I've spent several hours on trying to fix a request that was correct but because of a massive amount of async requests in the app \u2014 the last thing before the crash that I saw was a log of this correct request when the actual problem was in a request that fired few seconds before this.\n\nAt the moment, I have a draft of this feature where I add `request.toString()` to the exception message. And it works even if you fail before the request execution (converters\/calladapters detection problems), also we can include more info in case of response parsing fail.\n","comments":["One problem is that URLs occasionally contain sensitive data in them, and exceptions get posted to relatively insecure bug trackers.\n","That's why it's a flag which you can enable only for internal\/debug builds!\n\nOn Sun, Oct 4, 2015, 01:08 Jesse Wilson notifications@github.com wrote:\n\n> One problem is that URLs occasionally contain sensitive data in them, and\n> exceptions get posted to relatively insecure bug trackers.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/square\/retrofit\/issues\/1162#issuecomment-145294007.\n> \n> ## \n\n@artem_zin\n","This seems fairly low-leverage for a setting. We try and prefer sane\ndefaults that work for most than exposing every possible configuration. I'd\nrather pick something that can always be used.\n\nOn Sat, Oct 3, 2015, 7:08 PM Artem Zinnatullin notifications@github.com\nwrote:\n\n> That's why it's a flag which you can enable only for internal\/debug builds!\n> \n> On Sun, Oct 4, 2015, 01:08 Jesse Wilson notifications@github.com wrote:\n> \n> > One problem is that URLs occasionally contain sensitive data in them, and\n> > exceptions get posted to relatively insecure bug trackers.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https:\/\/github.com\/square\/retrofit\/issues\/1162#issuecomment-145294007.\n> > \n> > ## \n> \n> @artem_zin\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/square\/retrofit\/issues\/1162#issuecomment-145296584.\n","> I'd rather pick something that can always be used.\n\nI've thought about this a lot, but I just don't know how to include URL (since it's most valuable info for the REST client) into the exception and don't leak any sensitive info\u2026 So I came to the flag that could be enabled\/disabled for particular types of builds and will be disabled by default.\n\nMoreover, I would like to use this option to include URL and response body to the exception in case of response parsing fail (imagine unexpected\/incorrect JSON\/etc) to make debugging and error fixing extra easy task with Retrofit!\n\nPicasso has same setting (`setIndicatorsEnabled()`) and everybody loves it!\n","Would just the static information pulled from the method be suitable? You won't get information like path\/query values or headers, but it should be enough.\n\n> Picasso has same setting (setIndicatorsEnabled()) and everybody loves it!\n\nThat is a vastly different setting than anything proposed in this issue.\n","> Would just the static information pulled from the method be suitable?\n\nHope you mean method of user created interface used for `retrofit.create()` and not the HTTP method? If so \u2014 it would be nice to see something  like `... problem occurred during execution of GitHubService.contributors()`!\n","That and the relative path template, HTTP method, etc.\n","LGTM, I'll work on it if you don't mind.\n\nOn Fri, Oct 9, 2015, 5:26 PM Jake Wharton notifications@github.com wrote:\n\n> That and the relative path template, HTTP method, etc.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/square\/retrofit\/issues\/1162#issuecomment-146886452.\n> \n> ## \n\n@artem_zin\n","Please do!\n\nOn Fri, Oct 9, 2015 at 11:21 AM Artem Zinnatullin notifications@github.com\nwrote:\n\n> LGTM, I'll work on it if you don't mind.\n> \n> On Fri, Oct 9, 2015, 5:26 PM Jake Wharton notifications@github.com\n> wrote:\n> \n> > That and the relative path template, HTTP method, etc.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https:\/\/github.com\/square\/retrofit\/issues\/1162#issuecomment-146886452.\n> > \n> > ## \n> \n> @artem_zin\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/square\/retrofit\/issues\/1162#issuecomment-146901715.\n","Hi guys, how about using okhttp interceptors for logging. If you use dagger you can easily inject a Retrofit instance with logging interceptor when needed (i.e. debug mode). If you don't need logging you can inject Retrofit without It.\r\nHave a look at this https:\/\/stackoverflow.com\/questions\/32514410\/logging-with-retrofit-2"],"labels":["Enhancement"]},{"title":"Support for server sent events ","body":"Hello,\nI am trying to consume the following using retrofit\n\nhttps:\/\/mesosphere.github.io\/marathon\/docs\/rest-api.html#get-v2-events\nI could not find a suitable command\/documentation for consuming server sent events. Does retrofit currently support it ? If not is it on the roadmap for future releases.\n\nThansk!\n","comments":["http:\/\/square.github.io\/retrofit\/javadoc\/retrofit\/http\/Streaming.html\n\nAlso https:\/\/github.com\/square\/retrofit\/issues\/568\n\nAlso https:\/\/github.com\/square\/retrofit\/releases\/tag\/parent-1.6.0\n\nSo basically annotate your `@GET(\"\/v2\/events\")` with `@Streaming` as well.\n","We don't offer a way to handle this automatically including deserialization of these events (usually people wanting this use websockets which we do plan to support). That said, I'm pretty sure there's a way to hack a `CallAdapter` and `Converter` pair together to make this work. I'll have to give it a go some day this week and see what I can come up with.\n","Spec https:\/\/html.spec.whatwg.org\/multipage\/comms.html\n\nInfo:\n- http:\/\/www.html5rocks.com\/en\/tutorials\/eventsource\/basics\/\n- https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Server-sent_events\/Using_server-sent_events\n- http:\/\/caniuse.com\/#feat=eventsource\n\nAn interesting spec. The \"data:\" prefix seems wasteful, but hopefully no one has a newline-laden message body. I would have preferred a series of length-prefixed, opaque binary payloads for the message bodies.\n","Been thinking about this for a while, and I have an idea of the approach I want to take when I get around to implementing. Merely writing it down so I don't forget when I come back to this post-beta2.\n\nThe semantics of `Call` prevent reusing its type for this, and that's probably a good thing since it fundamentally (sort of) differs from a one-shot request\/response exchange. Another type will be introduced (likely in a sibling artifact) for representing SSE calls. For the purposes of discussing it, we'll name it `EventCall`.\n\nThere will be an `EventCallAdapterFactory` which needs registered with `Retrofit.Builder`. It will match the `EventCall` return type on service methods. It will require the `@Streaming` annotation be present on the method. Unlike a normal `CallAdapter.Factory`, it will cache the response type in its created `CallAdapter`, but return `ResponseBody` from `responseType()`. This, combined with the required `@Streaming` annotation will allow the `CallAdapter` instance effective access to the streaming socket.\n\n`EventCall` will be parameterized just like `Call` and as previously mentioned that response type will be cache, but not exposed. A `Converter` will be obtained from the `Retrofit` instance for the response type which will be used for deserializing each server-sent message. It is the responsibility of this converter to deal with variance in the message types. That is, only one type will be exposed and if the user wants different message types then a common superclass of interface must be used and some other means of casting in user-code to the right type.\n\nWhen a `ResponseBody` is received its `source()` will be wrapped in a custom `Source` that exposes the individual messages as single `Source` instances that can be wrapped up in their own `ResponseBody` instances, passed to the `Converter`, and the resulting object fed back to the user. This is will be similar to how websockets work in OkHttp.\n\n`EventCall` will expose an asynchronous method. It takes a callback, very similar to `Call`, except that the successful callback will be called once for each event. It's not clear whether synchronous is useful here as it undermines the transport mechanism (by providing something like an `Iterator<T>`), but perhaps there's room for synchronous connection and then attaching the callback?\n\nRxJava integration lends itself well to this model, but having this ship as a separate artifact creates an unfortunate wannabe-love-triangle of dependencies that prevent the simple integration. Since we have no way of differentiating `Observable<T>` for normal request\/response and `Observable<T>` for SSE we'll probably need a method-level annotation to denote, which will lend itself to the separate artifact anyway, but resulting in the need for this `CallAdapter.Factory` to be registered before the normal RxJava one. But this can be figured out after all the aforementioned things are integrated.\n","Is this still in the pipeline? If so do you have a rough timetable for release?\n","No timeline. Unsure if we'll ever support it natively.\n\nOn Wed, Aug 17, 2016 at 12:03 PM Keith Murray notifications@github.com\nwrote:\n\n> Is this still in the pipeline? If so do you have a rough timetable for\n> release?\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https:\/\/github.com\/square\/retrofit\/issues\/1029#issuecomment-240460365,\n> or mute the thread\n> https:\/\/github.com\/notifications\/unsubscribe-auth\/AAEEEcQWhLkyqXqKzZw2LZnkLB53nhEkks5qgzDRgaJpZM4FxUsd\n> .\n","There is one other Android library which handles Server-Sent Events found here:\r\nhttps:\/\/github.com\/tylerjroach\/eventsource-android\r\n\r\nHaving this integrated in Retrofit2 would be convenient.","@RyanRamchandar we did an implementation, is still under development and we need to change few things, but you can use it as a reference. \r\nhttps:\/\/github.com\/heremaps\/okhttp\/tree\/master\/okhttp-sse\r\n","As the 2.2.0 version was released a couple of months ago and this was not included, are there any plans to support SSE with Retrofit any time soon? And by the way @skimarxall the link https:\/\/github.com\/heremaps\/okhttp\/tree\/master\/okhttp-sse is not working anymore, is there any place where I can find the implementation even if it's still under development?","We adopt a different approach, instead of trying to add it in the OkHttp lib, we re-build it as a plugin. The library is under legal review since we are releasing it under my company GitHub, this process is slow sometimes but I expect to have it live soon. I will then update the link.\r\n\r\nBtw we are using OkHttp not retrofit. ","@skimarxall  please keep us updated once You make the library public.","@skimarxall  is there any update on SSE? we are just looking for something like that for our service.\r\n","I'm sorry for the delay but for internal reasons the open source review has\nbeen delayed. I'll try to push it so in the upcoming weeks it's released.\n\nOn Fri, Jun 23, 2017, 15:23 jaroslawk <notifications@github.com> wrote:\n\n> @skimarxall <https:\/\/github.com\/skimarxall> is there any update on SSE?\n> we are just looking for something like that for our service.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/1029#issuecomment-310664097>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AChIaUwGQ7j1aOXhnFBkgVxq-KfV_hiUks5sG7xogaJpZM4FxUsd>\n> .\n>\n","Thank you! \ud83d\udc4d ","Finally, we publish our SSE library (OkSse)\r\nhttps:\/\/github.com\/heremaps\/oksse","Some changes here @JakeWharton ","Since [OkHttp](https:\/\/github.com\/square\/okhttp\/tree\/master\/okhttp-sse) already supports SSE I'm looking forward to seeing SSE support on Retrofit also \ud83d\ude03 ."],"labels":["Feature"]},{"title":"Allow specifying default @Field values.","body":"As we know,we can use `@Field` annotation to specify a field in a `@POST` method, like this:\n\n``` java\n    @POST\n    void doSomething(@Field String params,@Field String anotherParams)\n```\n\nI need specify a default value to a field in a POST request,but i have no idea how to do it.\n\nDoes Retrofit support specify a default field for POST request?  If not,cloud you add a feature to support this?\n\n``` java\n    @POST\n    @DefaultField(params = \"defaultValue\")\n    void doSomething(@Field String anotherParams)\n```\n\nAny comment is welcome.Thanks.:)\n","comments":["I am missing this as well. AWS for example uses thousands of default fields which need to be injected on every request. I admit retrofit is not a good choice for a non-REST conform api as AWS [which is not retrofit's fault], but I want to use the same library for all API endpoints in my project, and retrofit is a great choice for all others. I am currently using a custom client implementation where I add these things to the request before it is sent, but it's sort of a mess.\n\nMy suggestion would be to add a parameter to either use @DefaultField as mentioned here http:\/\/stackoverflow.com\/questions\/26697054\/retrofit-how-to-send-a-post-request-with-constant-fields - but I would also like to see @DefaultFieldMap() where I can add a whole bunch of default fields to a request.\n","+1 for this\n","+1\n","+1!\n","Yet another clamoring for this feature :D\n","You may use [Java Method Invocation Builder](https:\/\/github.com\/tomasbjerre\/java-method-invocation-builder) for this.\n\nThen you can annotate the interface like this:\n\n```\n@GenerateMethodInvocationBuilder\npublic interface BitBucketServerService {\n @GET(\"\/rest\/api\/1.0\/projects\/{projectkey}\/repos\/{repositoryslug}\/pull-requests?direction={direction}&at={at}&state={state}&order={order}&withattributes={withattributes}&withproperties={withproperties}\")\n Call<BitbucketServerResponse<BitBucketServerPullRequest>> pullRequests(\/\/\n   @Default(\"PROJ\") @Query(\"projectkey\") String projectKey,\/\/\n   @Default(\"REPO\") @Query(\"repositoryslug\") String repositoryslug,\/\/\n   @Default(\"INCOMING\") @Query(\"direction\") String direction,\/\/\n   @Default(\"23\") @Query(\"at\") String at,\/\/\n   @Default(\"OPEN\") @Query(\"state\") String state,\/\/\n   @Default(\"NEWEST\") @Query(\"order\") String order,\/\/\n   @Default(\"true\") @Query(\"withattributes\") String withattributes,\/\/\n   @Default(\"true\") @Query(\"withproperties\") String withproperties);\n}\n```\n\nAnd only use default values except for the values that you actually want to change, like this:\n\n```\nBitBucketServerServicePullRequestsBuilder.pullRequests()\n .withAt(\"24\")\n .invoke(bitBucketServerService);\n```\n","+1\uff0cany good ideas ?\n","@oliverhausler are you sure the solution mentioned at stackoverflow worked?Can you paste your code?\n","This seems to still be an issue\/desire so I thought I'd contribute my two cents of how I've been going about it. You can see my full explanation [here](https:\/\/stackoverflow.com\/a\/52858339\/6754057) but the short version is I define my full @POST method (with all arguments included) in an interface (say, \"AuthWebservice\"), but then add a second method in the same interface, without any annotations and with only the arguments that I want. I then make a class called AuthWebserviceWrapper that takes an \"base\" instance of AuthWebservice in its constructor. Most of the time AuthWebserviceWrapper just calls the corresponding methods on the base, but the wrapper class allows you to override the \"extra\" methods you added to call the base methods with default values. Anywhere you'd retrieve an instance of AuthWebservice (including but not limited to Dagger\/DI), you just return an instance of your wrapper, wrapped around the default implementation provided by Retrofit.","I gave it a raw go at https:\/\/github.com\/vitorhugods\/retrofit\/commit\/ba191e12388aef9af86775260ecee2ef93458347. The base idea allows static defined parameters, not only `@Field`, even though I have just implemented the `DefaultField` so far, but it can be easily replicated.\r\n\r\nYou can see an example of implementation at the [RequestFactoryTest#simpleDefaultFormEncoded](https:\/\/github.com\/vitorhugods\/retrofit\/commit\/ba191e12388aef9af86775260ecee2ef93458347#diff-a6ac6d4b0de43c33e9aa449ff2bb0d55R2517):\r\n```java\r\n  @Test public void simpleDefaultFormEncoded() {\r\n    class Example {\r\n      @FormUrlEncoded \/\/\r\n      @POST(\"\/foo\") \/\/\r\n      @DefaultParameters(fields = {\r\n        @DefaultField(name = \"foo\", value = \"bar\"),\r\n        @DefaultField(name = \"ping\", value = \"pong\")\r\n      })\r\n      Call<ResponseBody> method(@Field(value = \"John\") String person) {\r\n        return null;\r\n      }\r\n    }\r\n    Request request = buildRequest(Example.class, \"Doe\");\r\n    RequestBody body = request.body();\r\n    assertBody(body, \"John=Doe&foo=bar&ping=pong\");\r\n    assertThat(body.contentType().toString()).isEqualTo(\"application\/x-www-form-urlencoded\");\r\n  }\r\n```\r\n\r\nI would really appreciate some feedback."],"labels":["Enhancement"]},{"title":"Allow access to OkHttp's WebSocket type","body":"``` java\ninterface Service {\n  @GET(\"\/chat\/{id}\")\n  Call<WebSocket> chat(\n      @Path(\"id\") String id);\n}\n```\n","comments":["Whoa.\n","There's problems here:\n\n`WebSocket` is solely a writing type. Messages that are read come in as callbacks to the `WebSocketListener` which is also what has the open\/failure callbacks. Additionally, we are re-using the failure callback for both setup failure and then protocol or transport failure down the line.\n\nA potential solution would be to split the listener into two callback classes: one for the connection and one for messages. This could be done either here as a set of wrappers, or in OkHttp. You may remember that my initial API for WebSocket was done in this way before you commented that we could consolidate them into one.\n\nHowever, the split is not entirely a solution because we have a threading problems. When we get the `WebSocket` instance in `onOpen` we are on the reader thread. Once that method returns, it sits on the loop reading messages from the wire. If the call adapter choses to move threads before handing the `WebSocket` to the caller, there's a timing issue where messages might be dropped because a listener has not been set.\n\nOne potential solution would be to do the callback split, change `onOpen` to `onConnected`, and add a method like `start(WebSocketListener)` to `WebSocket`. This would just be a `CountDownLatch` that holds the reader thread up for a period of time (like the connect timeout that we already have on the `OkHttpClient`) in case threads need to be moved.\n\nI don't have other solutions in mind yet so I'm open to those and thoughts on what I proposed above.\n","We'll want Retrofit's web socket to make `onMessage` take a `<T>`, and similarly for `sendMessage`.\n\nI'm guessing Retrofit will encapsulate OkHttp's `WebSocket` and layer its own abstraction on top, to handle type adapters and threading. This is symmetric with `Call`, right?\n","Making it typed is very interesting. And that will of course require an abstraction. I'll experiment with it.\n","APIs to look at for inspiration\/samples:\n- Slack: https:\/\/api.slack.com\/rtm\n- IRC Cloud: https:\/\/github.com\/irccloud\/irccloud-tools\/wiki\/API-Stream-Message-Reference\n- Chrome DevTools: https:\/\/developer.chrome.com\/devtools\/docs\/debugger-protocol\n- Trello: Not documented online beyond the WebSocket connect endpoint, but you can use Chrome DevTools to inspect.\n","Thinking about this more, I think it requires a `WebSocketCall` type in Retrofit which is parameterized on incoming type `I` and outgoing type `O`. Unfortunately this presents a problem for call adapters since they won't work with this type.\n","Here's the untested prototype so far: https:\/\/github.com\/square\/retrofit\/compare\/jw\/websocket\n","I would like to see this happen, how can i help you guys\n","Still waiting... :-(\n","I'd at-least like some sort of update please? Is this going ahead or not?\n","how about now? any updates? its almost 2017","Updates will be put as comments in this issue. No new comments means no new\nupdates.\n\nOn Tue, Dec 13, 2016, 2:00 PM \u4e16\u5916\u6843\u6e90 <notifications@github.com> wrote:\n\n> how about now? any updates? its almost 2017\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/924#issuecomment-266829306>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAEEEUNmMnc7iCD0D5P4ybfiQEbrl1GMks5rHutZgaJpZM4FNFSf>\n> .\n>\n","I did not find anything about Web Sockets in Retrofit version 2.2.\r\n(https:\/\/github.com\/square\/retrofit\/blob\/parent-2.2.0\/CHANGELOG.md)\r\nWhen will you add a web socket to Retrofit?\r\n","There is no timeframe\n\nOn Sat, Mar 11, 2017, 10:53 PM taejungkim <notifications@github.com> wrote:\n\n> I did not find anything about Web Sockets in Retrofit version 2.2.\n> When will you add a web socket to Retrofit?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/924#issuecomment-285920342>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAEEEVIjZHMXuYOmUKhIcE2WlkZ9TNiDks5rk2xHgaJpZM4FNFSf>\n> .\n>\n","I will use Okhttp version 3.5 websocket.\r\nHowever, I hope Retrofit will support web sockets.","When we should expect web sockets in retrofit ;) ? ","@nowakprojects For now, I think it's safe to assume that\r\n\r\n> There is no timeframe\r\n","Is there any news?","@EnnaKenT Don't sell yourself dreams.","\\- *knock knock*\r\n\\- who's there?\r\n\\- developers waiting for Websockets in Retrofit\r\n\\- uhm, sorry, nobody's home now","I'm available to hire to do this work, but if you want it for free then\nit's going to be on my schedule. Enjoy the rest of the free code in the\nmean time!\n\nOn Sat, Apr 7, 2018, 8:43 AM Albert <notifications@github.com> wrote:\n\n>\n>    - *knock knock*\n>    - who's there?\n>    - developers waiting for Websockets in Retrofit\n>    - uhm, sorry, nobody's home now\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/924#issuecomment-379466703>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAEEEVx_Sojk3eIBYdC2ZLTwsatkyDTEks5tmLRkgaJpZM4FNFSf>\n> .\n>\n","Umm yes I\u2019ll pay when can you start.","All in support of locking this thread until it becomes relevant?","I don't think that's necessary. With any luck we'll be able to knock this\nout in the next few months.\n\nOn Mon, Apr 9, 2018, 11:08 AM Forrest Hopkins <notifications@github.com>\nwrote:\n\n> All in support of locking this thread until it becomes relevant?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/square\/retrofit\/issues\/924#issuecomment-379842592>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAEEEaXNJzda1V1iVMWB-sW8e2WrR-OGks5tm6OWgaJpZM4FNFSf>\n> .\n>\n","For those still waiting for WebSocket support.. tinder came up with Scarlet a Retrofit for WebSockets. https:\/\/github.com\/Tinder\/Scarlet","@mhdtouban and it's in Kotlin, too! Gorgeous."],"labels":["Feature"]},{"title":"Expose RequestAction for pluggable parameters handlers.","body":"There's a lot of types people want to use for a lot of things. Having a mechanism to support custom parameter type handling would provide an extension point (albeit an advanced one) to prevent the further need to one-off these in the future. Bonus points if we can somehow figure out how to build the first-party behavior using this mechanism.\n#613.\n","comments":["+1\n","+1\n","+1\n","+1\n","+1\n","This mechanism exists (`RequestAction`) but its exposure is being punted to 2.1. That said, type handlers (aka converters) for non-body parameters which want a string (like `@Path`, `@Header`, etc.) will be supported to allow the use of alternate types (like `Date`, et. al.).\n","Now that 2.1 is out is there a way to do this or has it been pushed to 2.2?\n","Not yet\n\nOn Sat, Jul 9, 2016, 3:47 AM Mateusz Czeladka notifications@github.com\nwrote:\n\n> Now that 2.1 is out is there a way to do this?\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https:\/\/github.com\/square\/retrofit\/issues\/626#issuecomment-231521591,\n> or mute the thread\n> https:\/\/github.com\/notifications\/unsubscribe\/AAEEEUsdASWy_hp6S1A-NjznCn8h921Dks5qT1IRgaJpZM4Crm16\n> .\n","Have a look at my draft implementation of this feature (https:\/\/github.com\/iwo\/retrofit\/commit\/e843d9f94b114ea809d43bf7c6eaf38e4764275c) and let me know what you think.\nTo simplify review this commit only rearranges existing code without major flow changes or optimization. I'll extract and reuse common `ParameterHandler` code in further commits.\n\n**Design implications**\nTo allow users to create custom `ParameterHandler` classes `RequestBuilder` API needs to be public. All the published methods should be reviewed and documented. The linked issues should be reviewed to ensure that the published `RequestBuilder` API provides enough low level access to allow for implementation of all the peculiar use cases mentioned.\n\n**Code style consideration**\nI moved built in `ParameterHandler` implementation to a separate package. They could be nested under  `ParameterHandler` abstract class but it would make this file really long (probably around 1k LOC). The trade-off is that package local methods can no longer be used and `Utlis` is made public. On the other hand, there is a chance that users implementing custom handlers will benefit from access to `Utils` methods so maybe it's a good thing.\n\nPlease let me know what you think about this approach.\n","More changes in [pluggable-parameters-handlers](https:\/\/github.com\/iwo\/retrofit\/commits\/pluggable-parameters-handlers) branch.\n\nThe code duplication got significantly reduced so it may make sense to merge some of this changes even if you decide not to make the pluggable parameter handlers API public at this point.\n","Could somebody look if @iwo branch could be incorporated? This is the only thing blocking us to move to Retrofit 2.x\n","what is the status of this feature?","+1","+1","+1","+1","+1 - What's the status of this?","+1","+1","+1","+1","bump, using strings to pass data to okhttp is bad","Hey. Are there anymore updates on this? Being able to do something like:\r\n```\r\n@Authenticated(TOKEN_TYPE)\r\n@GET(\"\/example\/path\")\r\nCall<ResponseObject> getStuff();\r\n```\r\nAnd read the Annotation in an interceptor would be very useful...","You can already do that. Call `Request.tag(Invocation.class)` which provides the `Method` and then call `getAnnotation(Authenticated.class)`.","Alright, I'll give it a try. Thanks. I hadn't found any references or hints to this on the Retrofit site (probably makes sense, as it's a too complex scenario for there putting it there).","Hi @JakeWharton, is this feature being actively being planned on for an upcoming release? I'd like to be able to pass a Date object as a query parameter without having to manually transform it to a String first","That is already supported. Register a `StringConverterFactory` on your `Retrofit.Builder` which handles `Date` and converts it to a string in whichever manner you see fit.\r\n\r\nUnfortunately there's no sample for this, but I'd accept a PR for one if you want to write one.\r\n\r\n@cosminstefanxp Here's a sample for `Invocation` use: https:\/\/github.com\/square\/retrofit\/blob\/bcf07d0dffefb4ca1a33d431f5d38cab888b7d11\/samples\/src\/main\/java\/com\/example\/retrofit\/InvocationMetrics.java","@JakeWharton pardon my ignorance, I thought `Converter`s were only for request\/response bodies? (at least based on some of the docs, which say \"converting HTTP response body\"). Just to clarify, you're saying this will convert query params too?\r\n\r\nAnd if so, could this potentially be used to to convert a `List<String>` query param into a comma separated list? (iirc, I believe the current behavior is to simply include each item in the list as multiple, separate, repeated query params)","Ah, well, looking at this (https:\/\/github.com\/square\/retrofit\/blob\/master\/samples\/src\/main\/java\/com\/example\/retrofit\/JsonQueryParameters.java), I think both questions I had can be answered in the positive. Sorry for the confusion!\r\n\r\nSo, then, I must be misunderstanding this issue. How is it different than what is possible already?","It would let you perform arbitrary mutation of the request based on a parameter. So, for example, in the `List<String>` case (assuming there was no built-in support) you could choose to comma-separate the values into a single query parameter or you could emit one query parameter for each item in the list. You could even affect multiple things, like add a header based and a query parameter at the same time.","@JakeWharton Was exploring `stringConverter` some more as a result of the discussion above - there seems to be a limitation when attempting to convert an `Iterable` query param (see: https:\/\/github.com\/square\/retrofit\/blob\/master\/retrofit\/src\/main\/java\/retrofit2\/RequestFactory.java#L441): the `stringConverter` is only called for the `iterableType` of the `parameterizedType`. And then, `ParameterHandler.Query`**::iterable()** is invoked rather than just `ParameterHandler.Query`. \r\n\r\nAll this to say, unless I am still misunderstanding how to appropriately use `stringConverter`, I think my CSV use case would necessitate the resolution of this issue, due to nature of how `Iterable` Query params are handled by Retrofit","Hmmmm, it has been opened 6 years ago and still no luck?\r\nI put my vote that transformations are not the part of serialisation and should be done before but totally disagree about objects serialization. For example, the OAS3 generates schemas and has `form` style encoding to encode objects to query as key values(map), more could be found [here](https:\/\/swagger.io\/docs\/specification\/serialization\/)","bump","no"],"labels":["Feature"]},{"title":"Request and response logging of the unserialized Java types","body":"Hi,\nI'd like to log only request and response body along with http status code and execution time (no headers, urls and methods names). Is there possibility to make log level mechanism more flexible? For example use some interface or simple class with methods like isLogStatus(), isLogBody() etc. and ovveride it for own needs.\nThanks\n","comments":["Log is already an interface. You can create a class of your own that prints as little or as much as you want, and then set it on the RestAdapter, like so: \n\n```\n   RestAdapter restAdapter = new RestAdapter.Builder().setLog(new MyLogImpl()).build();\n```\n\nWhat you print is up to you. I'd also suggest looking into the Emitter class, for help with printing.\n","Log is an interface but LogLevel is not. I would need to check message content passed to Log.log() method to reject e.g. headers, which is not very handy and require a knowledge of RestAdapter message format.\nThanks.\n\nBTW. Where is the class Emitter. I couldn't find it in Retrofit.\n","Huh, I apologize. I thought that was part of retrofit, looking closer, it's just an interface I made to abstract away that part of output. \n\nI could envision a LogLevel builder that contains methods for setting the logging of headers, body, url, and status, among others. What else would you want to see in the builder?\n","Things that you mentioned + exceptions are sufficient for me. \nThanks a lot for interest.\n","Writing this down so it's not in my head:\n\nLoggers will get callbacks for request and response much like they do internally. Log level will become part of the default logging impl. You can replace the logger with one of your own.\n","@JakeWharton is that planned for 2.0 or also for the 1.x branch?\n","This is all 2.0 stuff. I'm trying to wrap up a 1.6 this week so I can start the work on 2.0 ASAP.\n","Another thing: how do we handle binary vs text data by default?\n","We need to be sure to hand the `Class<?>` reference to the logger for which the events are being generated so that loggers can present the logs as if the interfaces themselves were generating them.\n","Came here looking for a solution to logging binary data - for now, I will use a different rest adapter.  Do we need to consider the case where a TypedFile contains ASCII data and should potentially be logged?\n","It looks like 2.0.0-beta1 removed logging support altogether in commit 40bfa340bb back in January. Any idea when it might return?\n","Nope. Maybe never. Use OkHttp interceptors in the mean time.\n\nOn Mon, Aug 31, 2015 at 12:37 PM Hosam Aly notifications@github.com wrote:\n\n> It looks like 2.0.0-beta1 removed logging support altogether in commit\n> 40bfa34\n> https:\/\/github.com\/square\/retrofit\/commit\/40bfa340bbff6b18c691f74b40e09f27b98ab920\n> back in January. Any idea when it might return?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/square\/retrofit\/issues\/378#issuecomment-136423624.\n","Thanks. FWIW, here is an example for a logging interceptor for OkHttp:\nhttps:\/\/github.com\/square\/okhttp\/wiki\/Interceptors\n","Any chances to have default supported by Square logging interceptor implementation for OkHttp with logging of the bodies of the request and response like it was in Retrofit 1.x? I believe every second person would be interested in having that instead of tweaking the snippet from https:\/\/github.com\/square\/okhttp\/wiki\/Interceptors to log full request\/response for debugging every time.\n","Is this already resolved by https:\/\/github.com\/square\/okhttp\/pull\/1874?\n\n```\nOkHttpClient client = new OkHttpClient();\nHttpLoggingInterceptor logging = new HttpLoggingInterceptor();\nlogging.setLevel(Level.BASIC);\nclient.interceptors().add(logging);\n```\n","No. That's logging at the HTTP layer which I mostly don't care about.\nRetrofit needs logging at the application layer using your types, not HTTP,\nfor the representation.\n\nOn Sun, Sep 27, 2015, 3:33 PM Cemalettin Koc notifications@github.com\nwrote:\n\n> Is this already solved by square\/okhttp#1874\n> https:\/\/github.com\/square\/okhttp\/pull\/1874?\n> \n> OkHttpClient client = new OkHttpClient();\n> HttpLoggingInterceptor logging = new HttpLoggingInterceptor();\n> logging.setLevel(Level.BASIC);\n> client.interceptors().add(logging);\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/square\/retrofit\/issues\/378#issuecomment-143589285.\n"],"labels":["Feature"]}]