[{"title":"Enhance Error Message for using `:=` or `let` in Non-data.table-aware Environment","body":"**Description:**\r\n\r\nThis PR addresses issue #5721. The current error message generated when `:=` is used directly in an environment not aware of data.table (`cedta()` returns `FALSE`) can be misleading. This PR enhances the error message to provide more specific guidance to the user.\r\n\r\n**Changes Made:**\r\n- Added a check in the `[.data.table` function to detect the presence of `:=` or `let` in the `j` argument.\r\n- If `:=` or `let` is detected, a more specific error message is thrown, advising the user to ensure that data.table is imported and used explicitly in their package.\r\n\r\n**Proposed Error Message:**\r\n\r\n```\r\n\"[ was called on a data.table in an environment that is not data.table-aware (i.e. cedta()), but ':=' or 'let' was used, implying the owner of this call really intended for data.table methods to be called. See vignette('datatable-importing') for details on properly importing data.table.\"\r\n```\r\n\r\n\r\nCloses #5721\r\n","comments":["## [Codecov](https:\/\/app.codecov.io\/gh\/Rdatatable\/data.table\/pull\/6019?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Rdatatable) Report\nAttention: Patch coverage is `50.00000%` with `1 lines` in your changes are missing coverage. Please review.\n> Project coverage is 97.52%. Comparing base [(`b4ae3ef`)](https:\/\/app.codecov.io\/gh\/Rdatatable\/data.table\/commit\/b4ae3ef6b2a043b12092d822bd999201cc5330d5?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Rdatatable) to head [(`e237b3e`)](https:\/\/app.codecov.io\/gh\/Rdatatable\/data.table\/pull\/6019?dropdown=coverage&src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Rdatatable).\n\n| [Files](https:\/\/app.codecov.io\/gh\/Rdatatable\/data.table\/pull\/6019?dropdown=coverage&src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Rdatatable) | Patch % | Lines |\n|---|---|---|\n| [R\/data.table.R](https:\/\/app.codecov.io\/gh\/Rdatatable\/data.table\/pull\/6019?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Rdatatable#diff-Ui9kYXRhLnRhYmxlLlI=) | 50.00% | [1 Missing :warning: ](https:\/\/app.codecov.io\/gh\/Rdatatable\/data.table\/pull\/6019?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Rdatatable) |\n\n<details><summary>Additional details and impacted files<\/summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master    #6019      +\/-   ##\n==========================================\n- Coverage   97.53%   97.52%   -0.01%     \n==========================================\n  Files          80       80              \n  Lines       14913    14915       +2     \n==========================================\n+ Hits        14545    14546       +1     \n- Misses        368      369       +1     \n```\n\n\n\n<\/details>\n\n[:umbrella: View full report in Codecov by Sentry](https:\/\/app.codecov.io\/gh\/Rdatatable\/data.table\/pull\/6019?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Rdatatable).   \n:loudspeaker: Have feedback on the report? [Share it here](https:\/\/about.codecov.io\/codecov-pr-comment-feedback\/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Rdatatable).\n","Can someone suggest, how to write tests for this error ? , this error only occurs in not data.table aware enviroment(cedta() == false) , how to mimic such environment in tests, I have tried searching for it , wasn't able to find anything helpful."],"labels":["help-wanted"],"number":6019},{"title":"Introduce Source Hint in colnamesInt Function for Error Clarity","body":"**Summary:**\r\nAdded an optional `source` argument to the `colnamesInt` function to provide a hint about the source of errors.\r\n\r\n**Details:**\r\n- Added a new argument `source` to the `colnamesInt` function.\r\n- Used the `source` argument to provide hints about the source of errors.\r\n- This enhancement improves the clarity of error messages, making it easier for users to identify the source of errors.\r\n- Added the source wherever the function `colnamesInt` was called.\r\n- Writing test for the testing the accuracy of the updated error messages in `tests.Rraw`.\r\n\r\nThis PR Closes #5039 ","comments":["## [Codecov](https:\/\/app.codecov.io\/gh\/Rdatatable\/data.table\/pull\/6008?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Rdatatable) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Project coverage is 97.50%. Comparing base [(`54f9048`)](https:\/\/app.codecov.io\/gh\/Rdatatable\/data.table\/commit\/54f904831cafc37ba841958fbdbc614b8baac4c8?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Rdatatable) to head [(`c2fefb5`)](https:\/\/app.codecov.io\/gh\/Rdatatable\/data.table\/pull\/6008?dropdown=coverage&src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Rdatatable).\n> Report is 1 commits behind head on master.\n\n\n<details><summary>Additional details and impacted files<\/summary>\n\n\n```diff\n@@           Coverage Diff           @@\n##           master    #6008   +\/-   ##\n=======================================\n  Coverage   97.50%   97.50%           \n=======================================\n  Files          80       80           \n  Lines       14884    14884           \n=======================================\n  Hits        14513    14513           \n  Misses        371      371           \n```\n\n\n\n<\/details>\n\n[:umbrella: View full report in Codecov by Sentry](https:\/\/app.codecov.io\/gh\/Rdatatable\/data.table\/pull\/6008?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Rdatatable).   \n:loudspeaker: Have feedback on the report? [Share it here](https:\/\/about.codecov.io\/codecov-pr-comment-feedback\/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Rdatatable).\n","The error messages should be meaningful. Adding the line number where the call took place provides no such information to the user and has only drawbacks over using traces, e.g. line numbers need to be updated every time code is added.\r\n\r\nI converted it back to a draft.","@MichaelChirico Is these changes in source Information enough or their is need for more context .","@MichaelChirico @ben-schwen @jangorecki  @HughParsonage can someone review this PR please and suggest if there is need for further changes :)","I guess the tricky part here are the nested calls where the function is not directly called by the user itself but happening as a subcall, e.g. as with `setdiff_` and `.duplicated.helper`, so I'm not sure about the source messages there.\r\n\r\nDefinitely already an improvement but still not perfect.","@jangorecki WDYT about `colnamesInt()` returning `NULL`, or negative integers, instead of erroring itself? Then let caller handle the error. Might be easier than trying to jam everything into this `source=` argument.\r\n\r\nAlternatively, we could have `colnamesInt()` signal a custom error class, and caller can `tryCatch()` its way to giving a more helpful error. WDYT?","NULL and negatives sounds good. We just need to differentiate each of the errors raised by it, so couple negative numbers.","> @jangorecki WDYT about `colnamesInt()` returning `NULL`, or negative integers, instead of erroring itself? Then let caller handle the error. Might be easier than trying to jam everything into this `source=` argument.\r\n> \r\n> Alternatively, we could have `colnamesInt()` signal a custom error class, and caller can `tryCatch()` its way to giving a more helpful error. WDYT?\r\n\r\nIt seems that this PR might not be suitable for addressing the issue, so should i close this PR and work on the alternate approach ? Additionally, which alternate approach is preferable \"letting caller handle the error directly\" or \" creating custom error class\" ."],"labels":["enhancement"],"number":6008},{"title":"Remove exported [.data.table","body":"As noted this was for `DT()`; we can (possibly) restore the export if we restore `DT()`. For now, I find it strange to export such a method.","comments":["This breaks related tests:\r\n\r\nhttps:\/\/github.com\/Rdatatable\/data.table\/blob\/475115fd00e82008ff739406b0e4efe133c8b73e\/inst\/tests\/tests.Rraw#L17653-L17707\r\n\r\nShould we:\r\n\r\n 1. Comment out those tests\r\n 2. Add `` `[.data.table` = data.table:::`[.data.table` `` alias at the top of the suite","Why do we need to export it anyway? Wasn't there issue asking for that, which has been closer when that was added? Not precisely related to DT()","I haven't looked into it, presumably git blame will tell us some more history","Here's the relevant commit, presumably there's a smarter way to construct the call:\r\n\r\nhttps:\/\/github.com\/Rdatatable\/data.table\/pull\/5176\/files"],"labels":["breaking-change"],"number":6002},{"title":"Run GHA on Windows, drop Appveyor test","body":"Now we have 3 different apps for CI: GHA, Appveyor, and GLCI (this is down from 4 since we dropped Travis).\r\n\r\nAIUI, we only need Appveyor to run CI on Windows, but GHA supports this. So we should add a Windows test to GHA and drop Appveyor for simplicity.","comments":["Windows is tested in GLCI so we could just drop appveyor.","Well if GHA supports Windows I'm in favor of using it to build it in our CI. Should we build it on R-current or R-devel? Will file the PR later","> Windows is tested in GLCI so we could just drop appveyor.\r\n\r\nhmm but we still need PRs CI to fail if they're not working on windows, otherwise I would've merged #5995 prematurely. is it possible for GLCI to post a GitHub comment if it fails?","yes it is possible to post comments @Anirban166 is working on that for #4687 ","But AFAIU GLCI is only run once nightly on master?","Yes GLCI run once a day, then it make sense to have some win job here then. GLCI does not fail as a GLCI, it builds the site and publish results of failed tests jobs. So the individual test jobs would have to report back to GH.","> Yes GLCI run once a day, then it make sense to have some win job here then. GLCI does not fail as a GLCI, it builds the site and publish results of failed tests jobs. So the individual test jobs would have to report back to GH.\r\n\r\nYes and if we merge multiple PRs on a single day then the report will always end up in the latest merged PR or we would need to run a second time."],"labels":["ci"],"number":5998},{"title":"dcast() retains key incorrectly when run on .SD and the RHS contains a level matching the input key","body":"Seen while writing #5992.\r\n\r\nI'm not sure I've understood the root issue here, but this looks wrong:\r\n\r\n```r\r\ninput = CJ(a = letters, b = letters, c= letters)[, V := rnorm(.N)][, mean(V), by = .(a, b)]\r\nkey(input[, dcast(.SD, a ~ b, value.var = \"V1\")])\r\n# [1] \"a\" \"b\"\r\nkey(dcast(input, a ~ b, value.var = \"V1\"))\r\n# [1] \"a\"\r\n```\r\n\r\nThe key should be the same in both cases.","comments":["Seems also related to #4888 since output has multiple columns named `a`\r\n"],"labels":["bug"],"number":5993}]