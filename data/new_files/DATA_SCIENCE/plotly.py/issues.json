[{"title":"Inconsistent row and col parameters used to add vline to faceted subplots","body":"I'm trying to have a vertical line added to faceted plots, with the line being at a different position for every subplot. Here's a MRE:\r\n```py\r\nimport plotly.express as px\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom itertools import product\r\n\r\n# Prepare data\r\ncombinations = list(product(range(1, 11), repeat=2))\r\ndf = pd.DataFrame(combinations, columns=['cat', 'x'])\r\ndf['y'] = np.random.randint(1, 100, size=len(df))\r\n\r\n# Figure\r\nfig = px.line(df, x='x', y='y', facet_col='cat', facet_col_wrap=3)\r\n\r\n# Add vlines in a loop\r\ndef generate_lines(n, d):\r\n    tuples_list = []\r\n    a = 1  # Initial value for a\r\n    b = 1  # Initial value for b\r\n    for i in range(1, n+1):\r\n        tuples_list.append((i, a, b))\r\n        if i % d == 0:  # Check if the divider is reached\r\n            a += 1  # Increment a when the divider is reached\r\n            b = 1   # Reset b to 1 when the divider is reached\r\n        else:\r\n            b += 1  # Increment b otherwise\r\n    return tuples_list\r\n\r\nlines = generate_lines(10, 3)\r\nfor i, a, b in lines:\r\n    fig.add_vline(x=i, row=a, col=b, opacity=1, line_width=2, line_dash='dash', line_color='red')\r\n\r\nfig.show()\r\n```\r\n\r\nWhat this code should produce is a vertical line at the value of the `cat` parameter but this is obviously not the case:\r\n\r\n![image](https:\/\/github.com\/plotly\/plotly.py\/assets\/7341811\/c0e3cbb0-7aa0-4c8f-984d-3c7eec8b0e5d)\r\n\r\nIt took me a while to figure out what's actually happening. The issue is that the `row` argument does not start at the top left in the same way as faceting does, but instead starts at the bottom left. As a result, the (1,2) plot with a value of 2 is not shown because that's an empty space (would correspond to `cat=11`) and the 2nd subplot does not receive their vertical line.\r\n\r\nThis leads to inconsistencies and the required code to make the location more complicated because e.g. reducing the number of categories to 9 would mean that (1,1) needs to suddenly get a value of 7. \r\n\r\nThe behavior would be more intuitive if row 1 was the top one instead of the bottom one. If this is not a bug but a feature, it would be good to have this explicitly stated in the documentation \/ API reference.\r\n\r\nUsing plotly 5.13.0","comments":[],"labels":["bug","sev-2"],"number":4553},{"title":"proposed addition of a df.agg stacked go.bar example","body":"\\### Documentation PR\r\n\r\n- [ X] I've [seen the `doc\/README.md` file](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/doc\/README.md)\r\n- [ X ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch\r\n- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible\r\n- [ X] Every new\/modified example has a descriptive title and motivating sentence or paragraph\r\n- [ X] Every new\/modified example is independently runnable\r\n- [ X?] Every new\/modified example is optimized for short line count\tand focuses on the Plotly\/visualization-related aspects of the example rather than the computation required to produce the data being visualized\r\n- [ X] Meaningful\/relatable datasets are used for all new examples instead of randomly-generated data where possible\r\n- [ N\/A] The random seed is set if using randomly-generated data in new\/modified examples\r\n- [ N\/A ] New\/modified remote datasets are loaded from https:\/\/plotly.github.io\/datasets and added to https:\/\/github.com\/plotly\/datasets\r\n- [ X ] Large computations are avoided in the new\/modified examples in favour of loading remote datasets that represent the output of such computations\r\n\r\nwe want to show the DF agg; I can move some of the other spadework to separate hidden files if needbe\r\n\r\n- [ x ] Imports are `plotly.graph_objects as go` \/ `plotly.express as px` \/ `plotly.io as pio`\r\n- [ ] Data frames are always called `df`\r\n- [ ] `fig = <something>` call is high up in each new\/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)\r\n- [ X ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new\/modified example\r\n- [ Z] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new\/modified example\r\n- [X ] `fig.show()` is at the end of each new\/modified example\r\n- [ X ] `plotly.plot()` and `plotly.iplot()` are not used in any new\/modified example\r\n- [ X ] Hex codes for colors are not used in any new\/modified example in favour of [these nice ones](https:\/\/github.com\/plotly\/plotly.py\/issues\/2192)\r\n\r\n## Code PR\r\n\r\n- [ ] I have read through the [contributing notes](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.\r\n- [ ] I have added tests (if submitting a new feature or correcting a bug) or\r\n  modified existing tests.\r\n- [ ] For a new feature, I have added documentation examples in an existing or\r\n  new tutorial notebook (please see the doc checklist as well).\r\n- [ ] I have added a CHANGELOG entry if fixing\/changing\/adding anything substantial.\r\n- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).\r\n\r\n-->\r\n","comments":["Thank you for sharing this, @rl-utility-man "],"labels":["documentation"],"number":4546},{"title":"Feat request: ability to select multiple shapes to erase","body":"Currently, individual shapes can be selected and erased through the canvas controls on `dcc.Graph`:\r\n\r\n![canvas-shape-delete-f7580477ecaf331b11b56b59b2fe6454](https:\/\/github.com\/plotly\/plotly.py\/assets\/40243147\/f641f191-94dd-49c5-810e-03c6d0803fe7)\r\n\r\nHowever, it would be useful to be able to click on multiple shapes and erase them collectively. Perhaps using a CTRL-based clicker similar to how some OS file browsers allow a custom selection of files to be selected. ","comments":[],"labels":["feature","p3"],"number":4536},{"title":"[feature request] Option to add \"select\" mode on any figure (specifically, Heatmap)","body":"It doesn't seem possible to add a \"select\" dragmode to a figure with a `go.Heatmap` object. You can specify the starting `dragmode` as `\"select\"`, in which case you can immediately drag and select. But if I wanted to pan, I can't choose to select afterwards. I cannot add it to the modebar. I would like to be able to do this so I can select a region of interest on my heatmap, and setup a callback to set this region of interest in my code. I don't care about actually selecting the points in the heatmap, just the bounds of the selection box.\r\n\r\nMy workaround to this is to add a `go.Scatter` to my figure:\r\n\r\n```python\r\nlayout =  go.Layout(\r\n        showlegend=False,\r\n        autosize=False,\r\n        xaxis=dict(\r\n            showgrid=False,\r\n            zeroline=False,\r\n            visible=False,\r\n            range=[0, images.shape[2] - 1],\r\n        ),\r\n        yaxis=dict(\r\n            showgrid=False,\r\n            zeroline=False,\r\n            visible=False,\r\n            range=[images.shape[1] - 1, 0],\r\n            scaleanchor=\"x\",\r\n            scaleratio=1,\r\n        ),\r\n        dragmode=\"zoom\",\r\n        modebar=go.layout.Modebar(remove=[\"lasso\"]),\r\n    )\r\n\r\nheat = go.FigureWidget(\r\n    data=[\r\n        go.Scatter(\r\n            x=[0],\r\n            y=[0],\r\n        ),\r\n        go.Heatmap(z=current_image, colorscale=\"Viridis\"),\r\n    ],\r\n    layout=layout,\r\n)\r\n```\r\n\r\nThis works, but is kind of silly...","comments":["Thank you for the suggestion, @swelborn "],"labels":["feature","p4"],"number":4531},{"title":"[Feature Request] Simple independent axes for facet_row and facet_col","body":"Right now it is possible to have independent axes labels\/ticks for facets using this trick: https:\/\/stackoverflow.com\/questions\/60997189\/how-can-i-make-faceted-plots-in-plotly-have-their-own-individual-yaxes-tick-labe\r\n\r\nHowever, it is kind of hard to remember the 4-line solution by heart.\r\n\r\nIs it possible to add something like `independent_facet_y=True` in the kwargs for plots that support facet? For plots where e.g., facet is age and y axis is height, it's very difficult to interpret data since the smaller values are basically invisible without doing this.\r\n\r\nIdeally setting the flag would display axes ticks for each plot and scale the plots according to each facet's range.\r\n\r\nFor example, seaborn has sharex and sharey arguments that basically do this https:\/\/seaborn.pydata.org\/generated\/seaborn.catplot.html#seaborn-catplot","comments":["Thanks for the suggestion, @EmreAtes "],"labels":["feature","p4"],"number":4530}]