[{"title":"[WIP] BUG: Alternative attempt to fix sf_errstate","body":"<!-- \r\nThanks for contributing a pull request! Please ensure that\r\nyour PR satisfies the checklist before submitting:\r\nhttp:\/\/scipy.github.io\/devdocs\/dev\/contributor\/development_workflow.html#checklist-before-submitting-a-pr\r\n\r\nAlso, please name and describe your PR as you would write a\r\ncommit message:\r\nhttp:\/\/scipy.github.io\/devdocs\/dev\/contributor\/development_workflow.html#writing-the-commit-message\r\n\r\nDepending on your changes, you can skip CI operations and save time and energy: \r\nhttp:\/\/scipy.github.io\/devdocs\/dev\/contributor\/continuous_integration.html#skipping\r\n\r\nNote that we are a team of volunteers; we appreciate your\r\npatience during the review process.\r\n\r\nAgain, thanks for contributing!\r\n-->\r\n\r\n#### Reference issue\r\n<!--Example: Closes gh-WXYZ.-->\r\nThis PR is an alternative to #20316. I just wanted to see what the minimal set of changes needed would be, and what would happen in CI with this. I'm doing this more to help me review #20316 than to propose it as a serious alternative.\r\n\r\n#### What does this implement\/fix?\r\n<!--Please explain your changes.-->\r\n\r\n#### Additional information\r\n<!--Any additional information you think is important.-->\r\n","comments":["@rgommers, the job builds a wheel on windows. Are we running against a fundamental limitation like mentioned [here](https:\/\/github.com\/mesonbuild\/meson-python\/blob\/2daa991ce41b206e0a83065c8861646ac1821ae0\/mesonpy\/_rpath.py#L61-L64) or is there some secret sauce to get this to work because the shared library is being used only by extension modules that live alongside it in the same folder?\r\n\r\nI guess maybe something with `delvewheel` like here?\r\n\r\n```\r\n      - name: Build\r\n        run: |\r\n          python -m build --no-isolation -x -Csetup-args=\"-Duse-pythran=false\"\r\n\r\n          # Vendor openblas.dll and the DLL's it depends on into the wheel \r\n          $env:wheel_name=Get-ChildItem -Path dist\/* -Include *.whl\r\n          delvewheel repair --add-path c:\\opt\\openblas\\openblas_dll --add-path c:\\-w dist $env:wheel_name\r\n          \r\n          python -m pip install $env:wheel_name\r\n```"],"labels":["defect","scipy.special","C\/C++","Meson"],"number":20321},{"title":"ENH: Generalised ufuncs in special","body":"This PR follows the [one](https:\/\/github.com\/scipy\/scipy\/pull\/20260) merged yesterday about overhauling the ufunc machinery. The purpose here is to extend that slightly (and only slightly) so that SciPy special can support generalised ufuncs for some of its existing functions. In particular, I am thinking of all the functions in _specfun.pyx. These include the Legendre polynomials, Airy and Bessel function zeros, and so on. No doubt others will follow.\r\n\r\nThese functions differ from their counterparts in that their kernels may take arrays as their inputs or outputs. A canonical example is matrix multiplication over stacks of matrices. Here it is a bit simpler, essentially we have special functions that return outputs with one or more additional dimensions. Usually these additional dimensions corrrespond simply to a value `n` in the input, so we have a function producing an array of shape `(n, ...)`. Currently, these functions in SciPy only work for scalar input, so given a value `x` the output is an array of size n. But there is no reason to have such a restriction, we could easily be given an array `x` of shape `(d0, ..., dm)` and get output of shape `(n, d0, ..., dm)`. Here we introduce such functionality.\r\n\r\nThis is actually quite a small change. We need to use NumPy's generalised ufunc machinery, namely `PyUFunc_FromFuncAndDataAndSignature` and pass an appropriate signature. Let's focus on `lpn`. With the new machinery, this is just:\r\n```\r\nPyObject *_lpn = SpecFun_NewGUFunc({special::lpn}, 2, \"_lpn\", \"docstring here\", \"()->(n),(n)\");\r\nPyModule_AddObjectRef(_special_ufuncs, \"_lpn\", _lpn);\r\n```\r\n\r\nThen, at the Cython \/ Python level, The Legendre polynomials `lpn` went from:\r\n```\r\ndef lpn(int n, double z):\r\n    \"\"\"\r\n    Compute Legendre polynomials Pn(x) and their derivatives\r\n    Pn'(x). This is a wrapper for the function 'specfun_lpn'.\r\n    \"\"\"\r\n    cdef double *ppn\r\n    cdef double *ppd\r\n    cdef cnp.npy_intp dims[1]\r\n    dims[0] = n + 1\r\n\r\n    pn = cnp.PyArray_ZEROS(1, dims, cnp.NPY_FLOAT64, 0)\r\n    pd = cnp.PyArray_ZEROS(1, dims, cnp.NPY_FLOAT64, 0)\r\n    ppn = <cnp.float64_t *>cnp.PyArray_DATA(pn)\r\n    ppd = <cnp.float64_t *>cnp.PyArray_DATA(pd)\r\n    specfun_lpn(n, z, ppn, ppd)\r\n    return pn, pd\r\n```\r\nto:\r\n```\r\ndef lpn(n, z):\r\n    \"\"\"\r\n    Compute Legendre polynomials Pn(x) and their derivatives\r\n    Pn'(x). This is a wrapper for the function 'specfun_lpn'.\r\n    \"\"\"\r\n\r\n    pn = np.zeros((n + 1,) + np.shape(z), dtype = np.float64)\r\n    pd = np.zeros((n + 1,) + np.shape(z), dtype = np.float64)\r\n    return _lpn(z, out = (pn, pd))\r\n```\r\nThis also has the additional benefit of eliminating the need for Cython in these functions.\r\n\r\nThe last change is at the C++ level. This one is perhaps mostly for @steppi to check out. We need a very simple struct or class that can act as the C++-equivalent of a view (pointer, shape, and strides). Although there is nothing yet in C++17, that is actually already accepted into later versions of the standard, namely [std::span](https:\/\/en.cppreference.com\/w\/cpp\/container\/span) in C++20 and [std::mdspan](https:\/\/en.cppreference.com\/w\/cpp\/container\/mdspan) in C++23. Since we only support C++17, we can either create our own versions of these or create another data structure that is equivalent. It is just pointer, shape, and strides. CuPy does exactly the latter.\r\n\r\nIn this PR I made my own `std::span`. The Legendre polynomials then become, in C++.\r\n```\r\ninline void lpn(double x, std::span<double> pn, std::span<double> pd) {\r\n    specfun::lpn(pn.size() - 1, x, pn.data(), pd.data());\r\n}\r\n```\r\nAnd the generalised ufunc is published as above.\r\n\r\nPutting this here now for thoughts.\r\n\r\n\r\n","comments":[],"labels":["enhancement","scipy.special","C\/C++","Cython"],"number":20320},{"title":"BUG: signal: Fix scalar input issue of signal.lfilter","body":"<!-- \r\nThanks for contributing a pull request! Please ensure that\r\nyour PR satisfies the checklist before submitting:\r\nhttp:\/\/scipy.github.io\/devdocs\/dev\/contributor\/development_workflow.html#checklist-before-submitting-a-pr\r\n\r\nAlso, please name and describe your PR as you would write a\r\ncommit message:\r\nhttp:\/\/scipy.github.io\/devdocs\/dev\/contributor\/development_workflow.html#writing-the-commit-message\r\n\r\nDepending on your changes, you can skip CI operations and save time and energy: \r\nhttp:\/\/scipy.github.io\/devdocs\/dev\/contributor\/continuous_integration.html#skipping\r\n\r\nNote that we are a team of volunteers; we appreciate your\r\npatience during the review process.\r\n\r\nAgain, thanks for contributing!\r\n-->\r\n\r\n#### Reference issue\r\n<!--Example: Closes gh-WXYZ.-->\r\nFix #11359 \r\n\r\n#### What does this implement\/fix?\r\n<!--Please explain your changes.-->\r\nFixed the scalar input issue of `signal.lfilter` and add a test for it.\r\n\r\n#### Additional information\r\n<!--Any additional information you think is important.-->\r\n","comments":[],"labels":["defect","scipy.signal"],"number":20318},{"title":"MAINT\/DEV: rename `skip_if_array_api` to `skip_xp_backends`","body":"#### Reference issue\r\nDiscussion in gh-20285 @mdhaber \r\n\r\n#### What does this implement\/fix?\r\nRenames the marker and the fixture to avoid confusion.\r\n\r\n#### Additional information\r\nOpen to suggestions for a better name.","comments":["I can't immediately see the CI failure on other PRs - strange...","Doesn't look related, though. I'll give others a bit to suggest names, but LGTM (assuming the CI failure is indeed unrelated), and I can merge if you remind me : ) Might want the history to ignore this commit.","thanks for the thorough review as always Tyler :)\r\n\r\n> As for using .git-blame-ignore-revs, I guess you could, though I suspect the history around the array API transformations on these functions is already full of simple mechanical changes made in bulk.\r\n\r\nI also think that the blame is not much use to anyone around these lines at the minute, so this probably won't change things."],"labels":["maintenance","DX"],"number":20317},{"title":"[WIP] BUG: special: Fix special function errstate","body":"The `special` module in `scipy` has functions for error handling, namely `geterr`, `seterr`, and `errstate`. They are analogous to the ones in NumPy. I've personally never used them, but in the process of doing [other work](https:\/\/github.com\/scipy\/scipy\/pull\/20260) for `special` it became clear these do not appear to be working correctly.\r\n\r\nWhat's the problem? Well, they rely on static variables in `sf_error.c` to be set. For that to behave properly, there must be only one copy of these variables. From what I see in the `meson.build` of `special`, `sf_error.c` is getting compiled in all over the place. That means there would be many copies of these state variables.\r\n\r\nI've never used this functionality from `special`, but I don't want it to hold up other efforts. So I'm proposing a fix in this PR. The way forward is to turn `sf_error.c` into a single shared library that everything else links to. This was not as easy as it sounds because `sf_error.c` currently has all kinds of Python C API calls. That's not really workable. So I adapted it to take in a generic callback, which we can set from Cython to replicate the same behaviour as before.\r\n\r\nAt the end of the day, this is not a feature that I use. So I'd greatly appreciate if someone that **does** use this feature can check this out.\r\n\r\ncc @steppi","comments":["Nice. I spent 30 minutes on this today and also discovered the Python C api calls blocking making it a shared library. If I understand correctly, I think you\u2019ve taken the right approach, but I haven\u2019t looked at the code yet. ","Getting the following error on CI.\r\n\r\n```\r\n~\/work\/scipy\/scipy\/tools ~\/work\/scipy\/scipy\r\n----------- All the test files were installed --------------\r\n----------- All the .pyi files were installed --------------\r\n..\/build\/scipy\/special\/libspecial_error.so: too many public symbols!\r\n00000000000014f0 T set_error\r\n0000000000001370 T sf_error\r\n0000000000001420 T sf_error_check_fpe\r\n00000000000011e0 T sf_error_get_action\r\n0000000000004080 D sf_error_messages\r\n00000000000011c0 T sf_error_set_action\r\n0000000000001200 T sf_error_set_callback\r\n0000000000001210 T sf_error_set_callback_fpe\r\n0000000000001220 T sf_error_v\r\n```\r\n\r\nThis seems to be part of SciPy's build process. Not sure what the deal is, but @rgommers I see you've run into it [before](https:\/\/github.com\/scipy\/scipy\/issues\/15996). ","@izaid, could we have a shared library just for the shared state, and then sprinkle in the Python API stuff separately?","> @izaid, could we have a shared library just for the shared state, and then sprinkle in the Python API stuff separately?\r\n\r\n@steppi I think that's what I've done here? There are no Python API calls in the shared library I've pushed. They come in through a function pointer. Let me know if you see differently.","That error is a check for symbol visibility. We've had issues with symbol clashes when multiple copies of SciPy were floating around (IIRC in an embedding scenario, can't remember exactly). So we introduced a linker script to hide everything except `PyInit_xxx` in extension modules (on top of Meson using `-fvisibility=hidden|inlineshidden` for extension modules by default): https:\/\/github.com\/scipy\/scipy\/blob\/e4655a65036585d2c91ff8fb336b0cbce01a3b3f\/meson.build#L119-L131\r\n\r\nWe are shipping exactly zero shared libraries right now; they can be problematic. If it's only used from multiple extension modules in a single directory it may work; if not then it's going to be a problem (especially on Windows, because of the lack of RPATH support). \r\n\r\nI'll have a closer look later. Once things work in regular CI we should run a full set of wheel builds on this PR (pushing a commit with `[wheel build]` in the first line of the commit message will do that).","> That error is a check for symbol visibility. We've had issues with symbol clashes when multiple copies of SciPy were floating around (IIRC in an embedding scenario, can't remember exactly). So we introduced a linker script to hide everything except `PyInit_xxx` in extension modules (on top of Meson using `-fvisibility=hidden|inlineshidden` for extension modules by default):\r\n> \r\n> https:\/\/github.com\/scipy\/scipy\/blob\/e4655a65036585d2c91ff8fb336b0cbce01a3b3f\/meson.build#L119-L131\r\n> \r\n> We are shipping exactly zero shared libraries right now; they can be problematic. If it's only used from multiple extension modules in a single directory it may work; if not then it's going to be a problem (especially on Windows, because of the lack of RPATH support).\r\n> \r\n> I'll have a closer look later. Once things work in regular CI we should run a full set of wheel builds on this PR (pushing a commit with `[wheel build]` in the first line of the commit message will do that).\r\n\r\nThanks @rgommers! Yes, that's what I thought, that the error was checking if there was exactly one visible symbol (i.e. is this a Python extension).\r\n\r\nAgain, my goal here is to fix what appears to be an existing issue. I wouldn't have proposed the shared library solution if I saw another easy way. And, if there is one, happy to discuss it. ","If it works in our CI and wheel builds, then it should be fine - all other methods to build\/distribute binaries are more sane and won't have issues with shared libraries.\r\n\r\nIt would be useful to make the symbol names more specific if possible. Something like `sf_error` (and definitely `set_error`) is so generic that it's likely to result in conflicts. Is it possible to prepend `scipy_` to the symbol names?","> If it works in our CI and wheel builds, then it should be fine - all other methods to build\/distribute binaries are more sane and won't have issues with shared libraries.\r\n> \r\n> It would be useful to make the symbol names more specific if possible. Something like `sf_error` (and definitely `set_error`) is so generic that it's likely to result in conflicts. Is it possible to prepend `scipy_` to the symbol names?\r\n\r\nSure, happy to do that. I'll do that once you let me know what needs to happen with the linking issues above.","You can skip all checking for this extension in the test script (`tools\/check_pyext_symbol_hiding.sh`).","> > @izaid, could we have a shared library just for the shared state, and then sprinkle in the Python API stuff separately?\r\n> \r\n> @steppi I think that's what I've done here? There are no Python API calls in the shared library I've pushed. They come in through a function pointer. Let me know if you see differently.\r\n\r\nSorry, the **just** was doing a lot of work there. I know you're doing that already. I meant, why not make a more minimal set of changes like here, https:\/\/github.com\/scipy\/scipy\/compare\/main...steppi:scipy:sf_error_state?expand=1?\r\n\r\nI still get linking errors though.\r\n\r\nUpdate: ah, sorry, I meant to write \"just\" before and my dyslexia made me not see that I didn't","> Sorry, the **just** was doing a lot of work there. I know you're doing that already. I meant, why not make a more minimal set of changes like here, https:\/\/github.com\/scipy\/scipy\/compare\/main...steppi:scipy:sf_error_state?expand=1?\r\n\r\nNevermind, that doesn't even work to make the error handling work. I'm out of my element here. At some point I'd like to understand what's going on though.","> > Sorry, the **just** was doing a lot of work there. I know you're doing that already. I meant, why not make a more minimal set of changes like here, https:\/\/github.com\/scipy\/scipy\/compare\/main...steppi:scipy:sf_error_state?expand=1?\r\n> \r\n> Nevermind, that doesn't even work to make the error handling work. I'm out of my element here. At some point I'd like to understand what's going on though.\r\n\r\nI think a working version of that is just the same thing ultimately? Shared library that needs to be linked to multiple locations.","fwiw, If I build with  `python dev.py build` on this branch and then `import scipy.special as special` I get\r\n\r\n```\r\nIn [1]: import scipy.special as special\r\n---------------------------------------------------------------------------\r\nImportError                               Traceback (most recent call last)\r\nCell In[1], line 1\r\n----> 1 import scipy.special as special\r\n\r\nFile ~\/scipy\/build-install\/lib\/python3.11\/site-packages\/scipy\/special\/__init__.py:777\r\n    773 import warnings\r\n    775 from ._sf_error import SpecialFunctionWarning, SpecialFunctionError\r\n--> 777 from . import _ufuncs\r\n    778 from ._ufuncs import *\r\n    780 # Replace some function definitions from _ufuncs to add Array API support\r\n\r\nImportError: libspecial_error.so: cannot open shared object file: No such file or directory\r\n```\r\n","> fwiw, If I build with `python dev.py build` on this branch and then `import scipy.special as special` I get\r\n> \r\n> ```\r\n> In [1]: import scipy.special as special\r\n> ---------------------------------------------------------------------------\r\n> ImportError                               Traceback (most recent call last)\r\n> Cell In[1], line 1\r\n> ----> 1 import scipy.special as special\r\n> \r\n> File ~\/scipy\/build-install\/lib\/python3.11\/site-packages\/scipy\/special\/__init__.py:777\r\n>     773 import warnings\r\n>     775 from ._sf_error import SpecialFunctionWarning, SpecialFunctionError\r\n> --> 777 from . import _ufuncs\r\n>     778 from ._ufuncs import *\r\n>     780 # Replace some function definitions from _ufuncs to add Array API support\r\n> \r\n> ImportError: libspecial_error.so: cannot open shared object file: No such file or directory\r\n> ```\r\n\r\nThat might have something to do with how it gets installed in `meson.build`, but I don't know. I don't normally use meson, I'm just getting used to it now with SciPy.","> I think a working version of that is just the same thing ultimately? Shared library that needs to be linked to multiple locations.\r\n\r\nSorry, I just don't understand why some of the changes you've made are needed due to my own ignorance of these things, and I don't understand why the naive thing I tried doesn't work. You're work shouldn't be blocked by me not being an expert in these matters though, but I should try to catch up.","Huh, \r\n\r\n```\r\nIn [2]: with special.errstate(all=\"raise\"):\r\n   ...:     special.gammaln(-1)\r\n   ...:\r\n```\r\n\r\ndoesn't raise for me locally on your branch either. This is installing with `pip install .` for each.","> Huh,\r\n> \r\n> ```\r\n> In [2]: with special.errstate(all=\"raise\"):\r\n>    ...:     special.gammaln(-1)\r\n>    ...:\r\n> ```\r\n> \r\n> doesn't raise for me locally on your branch either. This is installing with `pip install .` for each.\r\n\r\n@steppi You should now, I just tested. Forgot to put `-DSP_SPECFUN_ERROR` back in the `cpp_args` for `_special_ufuncs`.","> fwiw, If I build with `python dev.py build` on this branch and then `import scipy.special as special` I get\r\n> \r\n> ```\r\n> In [1]: import scipy.special as special\r\n> ---------------------------------------------------------------------------\r\n> ImportError                               Traceback (most recent call last)\r\n> Cell In[1], line 1\r\n> ----> 1 import scipy.special as special\r\n> \r\n> File ~\/scipy\/build-install\/lib\/python3.11\/site-packages\/scipy\/special\/__init__.py:777\r\n>     773 import warnings\r\n>     775 from ._sf_error import SpecialFunctionWarning, SpecialFunctionError\r\n> --> 777 from . import _ufuncs\r\n>     778 from ._ufuncs import *\r\n>     780 # Replace some function definitions from _ufuncs to add Array API support\r\n> \r\n> ImportError: libspecial_error.so: cannot open shared object file: No such file or directory\r\n> ```\r\n\r\nI don't see this on my Mac, what OS are you on?","> > Huh,\r\n> > ```\r\n> > In [2]: with special.errstate(all=\"raise\"):\r\n> >    ...:     special.gammaln(-1)\r\n> >    ...:\r\n> > ```\r\n> > \r\n> > \r\n> >     \r\n> >       \r\n> >     \r\n> > \r\n> >       \r\n> >     \r\n> > \r\n> >     \r\n> >   \r\n> > doesn't raise for me locally on your branch either. This is installing with `pip install .` for each.\r\n> \r\n> @steppi You should now, I just tested. Forgot to put `-DSP_SPECFUN_ERROR` back in the `cpp_args` for `_special_ufuncs`.\r\n\r\nNice! My version of this also works now; I'd also left that out. I'm far in the weeds of trying to get this to work on meson now. I'm on Linux.","> > > Huh,\r\n> > > ```\r\n> > > In [2]: with special.errstate(all=\"raise\"):\r\n> > >    ...:     special.gammaln(-1)\r\n> > >    ...:\r\n> > > ```\r\n> > > \r\n> > > \r\n> > >     \r\n> > >       \r\n> > >     \r\n> > > \r\n> > >       \r\n> > >     \r\n> > > \r\n> > >     \r\n> > >   \r\n> > > doesn't raise for me locally on your branch either. This is installing with `pip install .` for each.\r\n> > \r\n> > \r\n> > @steppi You should now, I just tested. Forgot to put `-DSP_SPECFUN_ERROR` back in the `cpp_args` for `_special_ufuncs`.\r\n> \r\n> Nice! My version of this also works now; I'd also left that out. I'm far in the weeds of trying to get this to work on meson now. I'm on Linux.\r\n\r\nI suspect the issue is to do with the relative path for shared libraries, perhaps meson defaults to absolute path or something.  I'm looking at the meson docs. ","@steppi I think this is relevant, see https:\/\/github.com\/mesonbuild\/meson\/issues\/3038\r\n\r\nIs there a SciPy meson expert?","> @steppi I think this is relevant, see [mesonbuild\/meson#3038](https:\/\/github.com\/mesonbuild\/meson\/issues\/3038)\r\n> \r\n> Is there a SciPy meson expert?\r\n\r\nI\u2019ve been reading about rpath too. It\u2019s Ralf, but let\u2019s not bug him too much, he\u2019s busy enough as it is. ","@steppi and I have been looking into this, we're not sure, but we think the rpath isn't being set correctly on the shared_library. I see:\r\n\r\n```\r\nreadelf -d ~\/git\/scipy\/build-install\/lib\/python3\/dist-packages\/scipy\/special\/_special_ufuncs.cpython-310-x86_64-linux-gnu.so \r\n\r\nDynamic section at offset 0x25db0 contains 28 entries:\r\n  Tag        Type                         Name\/Value\r\n 0x0000000000000001 (NEEDED)             Shared library: [libspecial_error.so]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libstdc++.so.6]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libm.so.6]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libgcc_s.so.1]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\r\n 0x000000000000000c (INIT)               0x2000\r\n 0x000000000000000d (FINI)               0x19174\r\n 0x0000000000000019 (INIT_ARRAY)         0x26da0\r\n 0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)\r\n 0x000000000000001a (FINI_ARRAY)         0x26da8\r\n 0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)\r\n 0x000000006ffffef5 (GNU_HASH)           0x2f0\r\n 0x0000000000000005 (STRTAB)             0x948\r\n 0x0000000000000006 (SYMTAB)             0x318\r\n 0x000000000000000a (STRSZ)              991 (bytes)\r\n 0x000000000000000b (SYMENT)             24 (bytes)\r\n 0x0000000000000003 (PLTGOT)             0x27000\r\n 0x0000000000000002 (PLTRELSZ)           1320 (bytes)\r\n 0x0000000000000014 (PLTREL)             RELA\r\n 0x0000000000000017 (JMPREL)             0x1300\r\n 0x0000000000000007 (RELA)               0xeb0\r\n 0x0000000000000008 (RELASZ)             1104 (bytes)\r\n 0x0000000000000009 (RELAENT)            24 (bytes)\r\n 0x000000006ffffffe (VERNEED)            0xdb0\r\n 0x000000006fffffff (VERNEEDNUM)         4\r\n 0x000000006ffffff0 (VERSYM)             0xd28\r\n 0x000000006ffffff9 (RELACOUNT)          37\r\n 0x0000000000000000 (NULL)               0x0\r\n```\r\n\r\nI wonder if we just need to inject `.\/` before `libspecial_error.so` somehow.","That should fix it. I needed to add the `install_dir` for the shared library.","@izaid, my preference for the short term would be to go with #20321 instead. It attempts to reduce the shared library to the minimum set of things needed to manage the shared state, with `sf_error.c` being otherwise unchanged. The shared library exports only the two symbols `scipy_sf_error_set_action` and `scipy_sf_error_get_action`. I've prepended `scipy` following @rgommers suggestion. I think it's better to make the minimum necessary fix to leave our options more open for the future, and then revisit special function error handling later on.\r\n\r\n I've managed to get it working for all but one CI job, `Windows tests \/ cp311 (build sdist + wheel), full, no pythran (pull_request)`"],"labels":["scipy.special","C\/C++","Cython","Meson"],"number":20316}]