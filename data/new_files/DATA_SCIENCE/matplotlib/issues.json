[{"title":"[ENH]: Please add `matplotlib.patches.RoundedRectangle`","body":"### Problem\n\n* I'm always frustrated when `matplotlib.patches.Rectangle` does not round the corners of the rectangle because it requires padding and other rectangle-irrelevant values.\r\n* I would like it if there is a clsas or method like `matplotlib.patches.RoundedRectangle(xy, width, height, corner_radius, **kwargs)` that can take any radius <= max(width, height) because `matplotlib.patches.FancyBboxPatch` does **not** round the rectangle as much as possible.\r\n* Here is a sample image of what I am asking for \r\n![rect_showing](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/72375763\/a4193acb-8be0-4294-a585-d5affe135900)\r\n\n\n### Proposed solution\n\nPlease add\/implement `matplotlib.patches.RoundedRectangle(xy, width, height, corner_radius, **kwargs)`","comments":["You can round the edges a fair amount using the [boxstyle](https:\/\/matplotlib.org\/devdocs\/api\/_as_gen\/matplotlib.patches.BoxStyle.html#matplotlib.patches.BoxStyle) parameter\r\ne.g.\r\n\r\n```py\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.patches as patches\r\n\r\nfig, ax = plt.subplots()\r\nrect = patches.FancyBboxPatch((.2, .2),\r\n                              boxstyle=\"round, pad=0.1, rounding_size=0.2\",\r\n                              width=.4,\r\n                              height=.4,\r\n                              fill=True)\r\nax.add_patch(rect)\r\nax.set_aspect('equal')\r\nplt.show()\r\n```\r\n![Screenshot 2024-03-24 011123](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/9763064\/88916080-2ef6-48db-b42f-d29dafac5916)\r\n\r\n","@saranti **Wow nice! Thank you brother**. Could you please tell me what's relation between the two: `pad=0.1` and `rounding_size=0.2`?\n\nI mean, how `rounding_size` requires `pad` value or how `pad` value affects `rounding_size`?\n\nLet, given that `width` and `height` **are equal**. Then, if `rounding_size` = `width\/2`  must produce a *circle* of the same radius as `rounding_size`.\n\nThanks again. "],"labels":["New feature"],"number":27969},{"title":"MNT: Remove remaining 3.7 deprecations","body":"## PR summary\r\n\r\nNot sure why I missed listing these in #26865.\r\n\r\n## PR checklist\r\n\r\n- [n\/a] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines","comments":["Looks like Appveyor is running out of time?  I re-started it but same result."],"labels":["topic: mpl_toolkit","topic: legend","Maintenance"],"number":27968},{"title":"BUG: Fix NonUniformImage if x or y axis are log scale","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\n\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n\r\nThis PR fixes bug with NonUniformImage, where the image distorts when panning\r\nwith logarithmic x or y scale.\r\n\r\nCloses #27820.\r\n\r\n![Figure_1](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/37683428\/86e6233d-2282-448d-8c65-182e982d4716)\r\n\r\n> Original image\r\n\r\n![Figure_2](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/37683428\/aadd7e06-93bd-4005-9a94-45e682798e4e)\r\n\r\n> Image after panning to the left\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: images"],"number":27964},{"title":"[MNT]: Streamline mpltoolkits.axes_grid.Grid API","body":"### Summary\n\nThe current interface is neither very intuitive nor practical nor in line with the traditional gridspec logic.\n\n### Proposed fix\n\nHalf a note to self, because this is not completely thought through:\r\n\r\n- The parameter `ngrids` seems not to be working (usage raises)\r\n- The attributes `ngrids` is not helpful. It's misnomed (naxes would be better), and it's equivalent to `len(grid)` or `len(grid.axes_all)`.\r\n- Not sure what we need `grid.axes_llc` for. That seems quite specific.\r\n- The 2D grid arrangement `axes_row`, `axes_column` are lists of lists. In contrast `subplots` returns an array. Thus, you need double indexing `grid.axes_row[row][col}` and cannot use the multi-index `axs[row, col]`.\r\n- Having the `direction` parameter and `grid.axes_row`, `grid.axes_column` is basically two redundant approaches towards ordering.\r\n\r\nPossible improvements:\r\n- deprecate `ngrids` attribute\r\n- add an attribute `grid.axes` or maybe even  `grid.axs` (in analogy to `fig, axs = plt.subplots(2, 3)`), which is a ndarray of the Axes. Hence one could do `grid.axs[row, column]`.\r\n- maybe (??) soft-deprecate axes_all, axes_row, axes_col, direction?\r\n-  in `Grid.__init__` make everything after `nrows_ncols` kw-only\r\n- would be nice to have a default `rect`, but that requires reorganizing parameter order because that's before `nrows_ncols`.\r\n  Might be possible migrate\r\n  ```\r\n  def __init__(self, fig, rect, nrows_ncols, *, ...)\r\n  ```\r\n  to \r\n  ```\r\n  def __init__(self, nrows_ncols, *, rect, ...)\r\n  ```\r\n  with reasonable deprecation warnings and catching inappropriate use. - But would have to think this through","comments":["Is there a reason to cultivate this interface at all?  Isn't it superseded by features of modern matplotlib?","Is it? If so, we should at least add a discouraged note with replacement recommendations. But I believe we have no replacement at least for the ImagGrid subclass (which is from where I came here).","It's probably not exactly the same, but `fig, axs = plt.subplots(2, 2, layout='compressed')` will give you something very similar and more idiomatic.  ","Yes, this helps with the layout. But AFAIK, the shared colorbar handling is not reasonably developed.","On a general note, I\u2019d be happy to get rid of axes_grid1, because having two different interfaces is  awful user experience and additional maintenance cost. However, I feel this is a longer way and it may still be worth to improve on the existing structures.","> Yes, this helps with the layout. But AFAIK, the shared colorbar handling is not reasonably developed.\r\n\r\n```\r\nfig, axs = plt.subplots(2, 2, layout='compressed')\r\n\r\nfor i in range(4):\r\n    pc = axs.flat[i].imshow(np.random.randn(30, 30))\r\nfig.colorbar(pc, ax=axs)\r\n\r\nplt.show()\r\n```\r\n![Test](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1562854\/83b36113-3bcf-4f48-a113-38cb5a1826a6)\r\n\r\nEDIT: I think Axes grid does some extra things with different sized images, but that is pretty niche.  I wouldnt' object to moving that functionality into the main branch.  I just haven't done it because I've never had to make such a plot.  ","> I\u2019d be happy to get rid of axes_grid1, because having two different interfaces is awful user experience and additional maintenance cost. However, I feel this is a longer way and it may still be worth to improve on the existing structures.\r\n\r\nI agree with this, but I'm not sure it's worth trying to improve what is there versus improving the main library to do the same things. \r\n","The major issue with the above plots is that the colorbar is only associated with one image. So if you don't set the same explicit limits on each imshow and rely on auto-scaling, the same color may represent different values in different images. \r\n\r\nI thought `ImageGrid` was doing something cleverer here. But it turns out, I've been doing this in my personal wrapper function on `ImageGrid` to make it usable :upside_down_face:. ","Yeah, I'm not aware that `ImageGrid` somehow links the norms.  For sure that would be useful in some contexts, but is probably better handled by the user or a wrapper (I do this all the time as well, though usually for pcolormesh)","> The parameter ngrids seems not to be working (usage raises)\r\n\r\nFrom a quick look I appear to have broken that in #15639; a patch may be\r\n```patch\r\ndiff --git i\/lib\/mpl_toolkits\/axes_grid1\/axes_grid.py w\/lib\/mpl_toolkits\/axes_grid1\/axes_grid.py\r\nindex 720d985414..5ea1714871 100644\r\n--- i\/lib\/mpl_toolkits\/axes_grid1\/axes_grid.py\r\n+++ w\/lib\/mpl_toolkits\/axes_grid1\/axes_grid.py\r\n@@ -144,9 +144,9 @@ class Grid:\r\n             axes_array[row, col] = axes_class(\r\n                 fig, rect, sharex=sharex, sharey=sharey)\r\n         self.axes_all = axes_array.ravel(\r\n-            order=\"C\" if self._direction == \"row\" else \"F\").tolist()\r\n-        self.axes_column = axes_array.T.tolist()\r\n-        self.axes_row = axes_array.tolist()\r\n+            order=\"C\" if self._direction == \"row\" else \"F\").tolist()[:ngrids]\r\n+        self.axes_column = [[ax for ax in col if ax] for col in axes_array.T]\r\n+        self.axes_row = [[ax for ax in row if ax] for row in axes_array]\r\n         self.axes_llc = self.axes_column[0][-1]\r\n \r\n         self._init_locators()\r\n@@ -256,7 +256,10 @@ class Grid:\r\n             return\r\n         for i in range(self._nrows):\r\n             for j in range(self._ncols):\r\n-                ax = self.axes_row[i][j]\r\n+                try:\r\n+                    ax = self.axes_row[i][j]\r\n+                except IndexError:\r\n+                    continue\r\n                 if isinstance(ax.axis, MethodType):\r\n                     bottom_axis = SimpleAxisArtist(ax.xaxis, 1, ax.spines[\"bottom\"])\r\n                     left_axis = SimpleAxisArtist(ax.yaxis, 1, ax.spines[\"left\"])\r\n ```"],"labels":["topic: mpl_toolkit","Maintenance"],"number":27963},{"title":"DOC: Document axes_grid1.Grid attributes","body":null,"comments":[],"labels":["topic: mpl_toolkit","Documentation: API"],"number":27962}]