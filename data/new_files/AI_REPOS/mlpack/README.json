{"markdown": "<h2 align=\"center\">\n  <a href=\"https://mlpack.org\"><img src=\"https://cdn.jsdelivr.net/gh/mlpack/mlpack.org@e7d36ed8/mlpack-black.svg\" style=\"background-color:rgba(0,0,0,0);\" height=230 alt=\"mlpack: a fast, header-only machine learning library\"></a>\n  <br>a fast, header-only machine learning library<br>\n</h2>\n\n<h5 align=\"center\">\n  <a href=\"https://mlpack.org\">Home</a> |\n  <a href=\"https://www.mlpack.org/docs.html\">Documentation</a> |\n  <a href=\"https://www.mlpack.org/community.html\">Community</a> |\n  <a href=\"https://www.mlpack.org/questions.html\">Help</a> |\n  <a href=\"https://webchat.freenode.net/?channels=mlpack\">IRC Chat</a>\n</h5>\n\n<p align=\"center\">\n  <a href=\"https://dev.azure.com/mlpack/mlpack/_build?definitionId=1\"><img alt=\"Azure DevOps builds (job)\" src=\"https://img.shields.io/azure-devops/build/mlpack/84320e87-76e3-4b6e-8b6e-3adaf6b36eed/1/master?job=Linux&label=Linux%20Build&style=flat-square\"></a>\n  <a href=\"https://opensource.org/license/BSD-3-Clause\"><img src=\"https://img.shields.io/badge/License-BSD%203--Clause-blue.svg?style=flat-square\" alt=\"License\"></a>\n  <a href=\"https://numfocus.org/donate-to-mlpack\"><img src=\"https://img.shields.io/badge/sponsored%20by-NumFOCUS-orange.svg?style=flat-square&colorA=E1523D&colorB=007D8A\" alt=\"NumFOCUS\"></a>\n</p>\n\n<p align=\"center\">\n  <em>\n    Download:\n    <a href=\"https://www.mlpack.org/files/mlpack-4.3.0.tar.gz\">current stable version (4.3.0)</a>\n  </em>\n</p>\n\n**mlpack** is an intuitive, fast, and flexible header-only C++ machine learning\nlibrary with bindings to other languages.  It is meant to be a machine learning\nanalog to LAPACK, and aims to implement a wide array of machine learning methods\nand functions as a \"swiss army knife\" for machine learning researchers.\n\nmlpack's lightweight C++ implementation makes it ideal for deployment, and it\ncan also be used for interactive prototyping via C++ notebooks (these can be\nseen in action on mlpack's [homepage](https://www.mlpack.org/)).\n\nIn addition to its powerful C++ interface, mlpack also provides command-line\nprograms, Python bindings, Julia bindings, Go bindings and R bindings.\n\n***Quick links:***\n\n - Quickstart guides: [C++](doc/quickstart/cpp.md),\n   [CLI](doc/quickstart/cli.md), [Python](doc/quickstart/python.md),\n   [R](doc/quickstart/R.md), [Julia](doc/quickstart/julia.md),\n   [Go](doc/quickstart/go.md)\n - [mlpack homepage](https://www.mlpack.org/)\n - [mlpack documentation](https://www.mlpack.org/docs.html)\n - [Examples repository](https://github.com/mlpack/examples/)\n - [Tutorials](doc/tutorials/README.md)\n - [Development Site (Github)](https://github.com/mlpack/mlpack/)\n\n[//]: # (numfocus-fiscal-sponsor-attribution)\n\nmlpack uses an [open governance model](./GOVERNANCE.md) and is fiscally\nsponsored by [NumFOCUS](https://numfocus.org/).  Consider making a\n[tax-deductible donation](https://numfocus.org/donate-to-mlpack) to help the\nproject pay for developer time, professional services, travel, workshops, and a\nvariety of other needs.\n\n<div align=\"center\">\n  <a href=\"https://numfocus.org/\">\n    <img height=\"60\"\n         src=\"https://raw.githubusercontent.com/numfocus/templates/master/images/numfocus-logo.png\"\n         align=\"middle\"\n         alt=\"NumFOCUS logo\">\n  </a>\n</div>\n<br>\n\n## 0. Contents\n\n 1. [Citation details](#1-citation-details)\n 2. [Dependencies](#2-dependencies)\n 3. [Installing and using mlpack in C++](#3-installing-and-using-mlpack-in-c)\n 4. [Building mlpack bindings to other languages](#4-building-mlpack-bindings-to-other-languages)\n     1. [Command-line programs](#4i-command-line-programs)\n     2. [Python bindings](#4ii-python-bindings)\n     3. [R bindings](#4iii-r-bindings)\n     4. [Julia bindings](#4iv-julia-bindings)\n     5. [Go bindings](#4v-go-bindings)\n 5. [Building mlpack's test suite](#5-building-mlpacks-test-suite)\n 6. [Further resources](#6-further-resources)\n\n## 1. Citation details\n\nIf you use mlpack in your research or software, please cite mlpack using the\ncitation below (given in BibTeX format):\n\n    @article{mlpack2023,\n        title     = {mlpack 4: a fast, header-only C++ machine learning library},\n        author    = {Ryan R. Curtin and Marcus Edel and Omar Shrit and \n                     Shubham Agrawal and Suryoday Basak and James J. Balamuta and \n                     Ryan Birmingham and Kartik Dutt and Dirk Eddelbuettel and \n                     Rishabh Garg and Shikhar Jaiswal and Aakash Kaushik and \n                     Sangyeon Kim and Anjishnu Mukherjee and Nanubala Gnana Sai and \n                     Nippun Sharma and Yashwant Singh Parihar and Roshan Swain and \n                     Conrad Sanderson},\n        journal   = {Journal of Open Source Software},\n        volume    = {8},\n        number    = {82},\n        pages     = {5026},\n        year      = {2023},\n        doi       = {10.21105/joss.05026},\n        url       = {https://doi.org/10.21105/joss.05026}\n    }\n\nCitations are beneficial for the growth and improvement of mlpack.\n\n## 2. Dependencies\n\n**mlpack** requires the following additional dependencies:\n - C++14 compiler\n - [Armadillo](https://arma.sourceforge.net)      &nbsp;&emsp;>= 9.800\n - [ensmallen](https://ensmallen.org)      &emsp;>= 2.10.0\n - [cereal](http://uscilab.github.io/cereal/)         &ensp;&nbsp;&emsp;&emsp;>= 1.1.2\n\nIf the STB library headers are available, image loading support will be\navailable.\n\nIf you are compiling Armadillo by hand, ensure that LAPACK and BLAS are enabled.\n\n## 3. Installing and using mlpack in C++\n\n*See also the [C++ quickstart](doc/quickstart/cpp.md).*\n\nSince mlpack is a header-only library, installing just the headers for use in a\nC++ application is trivial.\n\nFrom the root of the sources, configure and install\nin the standard CMake way:\n\n```sh\nmkdir build && cd build/\ncmake ..\nsudo make install\n```\n\nIf the `cmake ..` command fails due to unavailable dependencies, consider either using the\n`-DDOWNLOAD_DEPENDENCIES=ON` option as detailed in [the following\nsubsection](#31-additional-build-options), or ensure that mlpack's dependencies\nare installed, e.g. using the system package manager.  For example, on Debian\nand Ubuntu, all relevant dependencies can be installed with `sudo apt-get\ninstall libarmadillo-dev libensmallen-dev libcereal-dev libstb-dev g++ cmake`.\n\nAlternatively, since CMake v3.14.0 the `cmake` command can create the build\nfolder itself, and so the above commands can be rewritten as follows:\n\n```sh\ncmake -S . -B build\nsudo cmake --build build --target install\n```\n\nDuring configuration, CMake adjusts the file `mlpack/config.hpp` using the\ndetails of the local system.  This file can be modified by hand as necessary\nbefore or after installation.\n\n### 3.1. Additional build options\n\nYou can add a few arguments to the `cmake` command to control the behavior of\nthe configuration and build process.  Simply add these to the `cmake` command.\nSome options are given below:\n\n - `-DDOWNLOAD_DEPENDENCIES=ON` will automatically download mlpack's\n   dependencies (ensmallen, Armadillo, and cereal).  Installing Armadillo this\n   way is not recommended and it is better to use your system package manager\n   when possible (see [below](#31a-linking-with-autodownloaded-armadillo)).\n - `-DCMAKE_INSTALL_PREFIX=/install/root/` will set the root of the install\n   directory to `/install/root` when `make install` is run.\n - `-DDEBUG=ON` will enable debugging symbols in any compiled bindings or tests.\n\nThere are also options to enable building bindings to each language that mlpack\nsupports; those are detailed in the following sections.\n\nOnce headers are installed with `make install`, using mlpack in an application\nconsists only of including it.  So, your program should include mlpack:\n\n```c++\n#include <mlpack.hpp>\n```\n\nand when you link, be sure to link against Armadillo.  If your example program\nis `my_program.cpp`, your compiler is GCC, and you would like to compile with\nOpenMP support (recommended) and optimizations, compile like this:\n\n```sh\ng++ -O3 -std=c++14 -o my_program my_program.cpp -larmadillo -fopenmp\n```\n\nNote that if you want to serialize (save or load) neural networks, you should\nadd `#define MLPACK_ENABLE_ANN_SERIALIZATION` before including `<mlpack.hpp>`.\nIf you don't define `MLPACK_ENABLE_ANN_SERIALIZATION` and your code serializes a\nneural network, a compilation error will occur.\n\nSee the [C++ quickstart](doc/quickstart/cpp.md) and the\n[examples](https://github.com/mlpack/examples) repository for some examples\nof mlpack applications in C++, with corresponding `Makefile`s.\n\n#### 3.1.a. Linking with autodownloaded Armadillo\n\nWhen the autodownloader is used to download Armadillo\n(`-DDOWNLOAD_DEPENDENCIES=ON`), the Armadillo runtime library is not built and\nArmadillo must be used in header-only mode.  The autodownloader also does not\ndownload dependencies of Armadillo such as OpenBLAS.  For this reason, it is\nrecommended to instead install Armadillo using your system package manager,\nwhich will also install the dependencies of Armadillo.  For example, on Ubuntu\nand Debian systems, Armadillo can be installed with\n\n```sh\nsudo apt-get install libarmadillo-dev\n```\n\nand other package managers such as `dnf` and `brew` and `pacman` also have\nArmadillo packages available.\n\nIf the autodownloader is used to provide Armadillo, mlpack programs cannot be\nlinked with `-larmadillo`.  Instead, you must link directly with the\ndependencies of Armadillo.  For example, on a system that has OpenBLAS\navailable, compilation can be done like this:\n\n```sh\ng++ -O3 -std=c++14 -o my_program my_program.cpp -lopenblas -fopenmp\n```\n\nSee [the Armadillo documentation](https://arma.sourceforge.net/faq.html#linking)\nfor more information on linking Armadillo programs.\n\n### 3.2. Reducing compile time\n\nmlpack is a template-heavy library, and if care is not used, compilation time of\na project can be increased greatly.  Fortunately, there are a number of ways to\nreduce compilation time:\n\n * Include individual headers, like `<mlpack/methods/decision_tree.hpp>`, if you\n   are only using one component, instead of `<mlpack.hpp>`.  This reduces the\n   amount of work the compiler has to do.\n\n * Only use the `MLPACK_ENABLE_ANN_SERIALIZATION` definition if you are\n   serializing neural networks in your code.  When this define is enabled,\n   compilation time will increase significantly, as the compiler must generate\n   code for every possible type of layer.  (The large amount of extra\n   compilation overhead is why this is not enabled by default.)\n\n * If you are using mlpack in multiple .cpp files, consider using [`extern\n   templates`](https://isocpp.org/wiki/faq/cpp11-language-templates) so that the\n   compiler only instantiates each template once; add an explicit template\n   instantiation for each mlpack template type you want to use in a .cpp file,\n   and then use `extern` definitions elsewhere to let the compiler know it\n   exists in a different file.\n\nOther strategies exist too, such as precompiled headers, compiler options,\n[`ccache`](https://ccache.dev), and others.\n\n## 4. Building mlpack bindings to other languages\n\nmlpack is not just a header-only library: it also comes with bindings to a\nnumber of other languages, this allows flexible use of mlpack's efficient\nimplementations from languages that aren't C++.\n\nIn general, you should *not* need to build these by hand---they should be\nprovided by either your system package manager or your language's package\nmanager.\n\nBuilding the bindings for a particular language is done by calling `cmake` with\ndifferent options; each example below shows how to configure an individual set\nof bindings, but it is of course possible to combine the options and build\nbindings for many languages at once.\n\n### 4.i. Command-line programs\n\n*See also the [command-line quickstart](doc/quickstart/cli.md).*\n\nThe command-line programs have no extra dependencies.  The set of programs that\nwill be compiled is detailed and documented on the [command-line program\ndocumentation page](https://www.mlpack.org/doc/stable/cli_documentation.html).\n\nFrom the root of the mlpack sources, run the following commands to build and\ninstall the command-line bindings:\n\n```sh\nmkdir build && cd build/\ncmake -DBUILD_CLI_PROGRAMS=ON ../\nmake\nsudo make install\n```\n\nYou can use `make -j<N>`, where `N` is the number of cores on your machine, to\nbuild in parallel; e.g., `make -j4` will use 4 cores to build.\n\n### 4.ii. Python bindings\n\n*See also the [Python quickstart](doc/quickstart/python.md).*\n\nmlpack's Python bindings are available on\n[PyPI](https://pypi.org/project/mlpack/) and\n[conda-forge](https://anaconda.org/conda-forge/mlpack), and can be installed\nwith either `pip install mlpack` or `conda install -c conda-forge mlpack`.\nThese sources are recommended, as building the Python bindings by hand can be\ncomplex.\n\nWith that in mind, if you would still like to manually build the mlpack Python\nbindings, first make sure that the following Python packages are installed:\n\n - setuptools\n - wheel\n - cython >= 0.24\n - numpy\n - pandas >= 0.15.0\n\nNow, from the root of the mlpack sources, run the following commands to build\nand install the Python bindings:\n\n```sh\nmkdir build && cd build/\ncmake -DBUILD_PYTHON_BINDINGS=ON ../\nmake\nsudo make install\n```\n\nYou can use `make -j<N>`, where `N` is the number of cores on your machine, to\nbuild in parallel; e.g., `make -j4` will use 4 cores to build.  You can also\nspecify a custom Python interpreter with the CMake option\n`-DPYTHON_EXECUTABLE=/path/to/python`.\n\n### 4.iii. R bindings\n\n*See also the [R quickstart](doc/quickstart/R.md).*\n\nmlpack's R bindings are available as the R package\n[mlpack](https://cran.r-project.org/web/packages/mlpack/index.html) on CRAN.\nYou can install the package by running `install.packages('mlpack')`, and this is\nthe recommended way of getting mlpack in R.\n\nIf you still wish to build the R bindings by hand, first make sure the following\ndependencies are installed:\n\n - R >= 4.0\n - Rcpp >= 0.12.12\n - RcppArmadillo >= 0.9.800.0\n - RcppEnsmallen >= 0.2.10.0\n - roxygen2\n - testthat\n - pkgbuild\n\nThese can be installed with `install.packages()` inside of your R environment.\nOnce the dependencies are available, you can configure mlpack and build the R\nbindings by running the following commands from the root of the mlpack sources:\n\n```sh\nmkdir build && cd build/\ncmake -DBUILD_R_BINDINGS=ON ../\nmake\nsudo make install\n```\n\nYou may need to specify the location of the R program in the `cmake` command\nwith the option `-DR_EXECUTABLE=/path/to/R`.\n\nOnce the build is complete, a tarball can be found under the build directory in\n`src/mlpack/bindings/R/`, and then that can be installed into your R environment\nwith a command like `install.packages(mlpack_3.4.3.tar.gz, repos=NULL,\ntype='source')`.\n\n### 4.iv. Julia bindings\n\n*See also the [Julia quickstart](doc/quickstart/julia.md).*\n\nmlpack's Julia bindings are available by installing the\n[mlpack.jl](https://github.com/mlpack/mlpack.jl) package using\n`Pkg.add(\"mlpack.jl\")`.  The process of building, packaging, and distributing\nmlpack's Julia bindings is very nontrivial, so it is recommended to simply use\nthe version available in `Pkg`, but if you want to build the bindings by hand\nanyway, you can configure and build them by running the following commands from\nthe root of the mlpack sources:\n\n```sh\nmkdir build && cd build/\ncmake -DBUILD_JULIA_BINDINGS=ON ../\nmake\n```\n\nIf CMake cannot find your Julia installation, you can add\n`-DJULIA_EXECUTABLE=/path/to/julia` to the CMake configuration step.\n\nNote that the `make install` step is not done above, since the Julia binding\nbuild system was not meant to be installed directly.  Instead, to use handbuilt\nbindings (for instance, to test them), one option is to start Julia with\n`JULIA_PROJECT` set as an environment variable:\n\n```sh\ncd build/src/mlpack/bindings/julia/mlpack/\nJULIA_PROJECT=$PWD julia\n```\n\nand then `using mlpack` should work.\n\n### 4.v. Go bindings\n\n*See also the [Go quickstart](doc/quickstart/go.md).*\n\nTo build mlpack's Go bindings, ensure that Go >= 1.11.0 is installed, and that\nthe Gonum package is available.  You can use `go get` to install mlpack for Go:\n\n```sh\ngo get -u -d mlpack.org/v1/mlpack\ncd ${GOPATH}/src/mlpack.org/v1/mlpack\nmake install\n```\n\nThe process of building the Go bindings by hand is a little tedious, so\nfollowing the steps above is recommended.  However, if you wish to build the Go\nbindings by hand anyway, you can do this by running the following commands from\nthe root of the mlpack sources:\n\n```sh\nmkdir build && cd build/\ncmake -DBUILD_GO_BINDINGS=ON ../\nmake\nsudo make install\n```\n\n## 5. Building mlpack's test suite\n\nmlpack contains an extensive test suite that exercises every part of the\ncodebase.  It is easy to build and run the tests with CMake and CTest, as below:\n\n```sh\nmkdir build && cd build/\ncmake -DBUILD_TESTS=ON ../\nmake\nctest .\n```\n\nIf you want to test the bindings, too, you will have to adapt the CMake\nconfiguration command to turn on the language bindings that you want to\ntest---see the previous sections for details.\n\n## 6. Further Resources\n\nMore documentation is available for both users and developers.\n\n***User documentation***:\n\n - [Matrices in mlpack](doc/user/matrices.md)\n - [Loading and saving mlpack objects](doc/user/load_save.md)\n - [Cross-Validation](doc/user/cv.md)\n - [Hyper-parameter Tuning](doc/user/hpt.md)\n - [Building mlpack from source on Windows](doc/user/build_windows.md)\n - [Sample C++ ML App for Windows](doc/user/sample_ml_app.md)\n - [mlpack core library documentation](doc/user/core.md)\n - [Examples repository](https://github.com/mlpack/examples/)\n\n***Tutorials:***\n\n - [Alternating Matrix Factorization (AMF)](doc/tutorials/amf.md)\n - [Artificial Neural Networks (ANN)](doc/tutorials/ann.md)\n - [Approximate k-Furthest Neighbor Search (`approx_kfn`)](doc/tutorials/approx_kfn.md)\n - [Collaborative Filtering (CF)](doc/tutorials/cf.md)\n - [DatasetMapper](doc/tutorials/datasetmapper.md)\n - [Density Estimation Trees (DET)](doc/tutorials/det.md)\n - [Euclidean Minimum Spanning Trees (EMST)](doc/tutorials/emst.md)\n - [Fast Max-Kernel Search (FastMKS)](doc/tutorials/fastmks.md)\n - [Image Utilities](doc/tutorials/image.md)\n - [k-Means Clustering](doc/tutorials/kmeans.md)\n - [Linear Regression](doc/tutorials/linear_regression.md)\n - [Neighbor Search (k-Nearest-Neighbors)](doc/tutorials/neighbor_search.md)\n - [Range Search](doc/tutorials/range_search.md)\n - [Reinforcement Learning](doc/tutorials/reinforcement_learning.md)\n\n***Developer documentation***:\n\n - [Writing an mlpack binding](doc/developer/iodoc.md)\n - [mlpack Timers](doc/developer/timer.md)\n - [mlpack automatic bindings to other languages](doc/developer/bindings.md)\n - [The ElemType policy in mlpack](doc/developer/elemtype.md)\n - [The KernelType policy in mlpack](doc/developer/kernels.md)\n - [The MetricType policy in mlpack](doc/developer/metrics.md)\n - [The TreeType policy in mlpack](doc/developer/trees.md)\n\nTo learn about the development goals of mlpack in the short- and medium-term\nfuture, see the [vision document](https://www.mlpack.org/papers/vision.pdf).\n\nIf you have problems, find a bug, or need help, you can try visiting\nthe [mlpack help](https://www.mlpack.org/questions.html) page, or [mlpack on\nGithub](https://github.com/mlpack/mlpack/).  Alternately, mlpack help can be\nfound on Matrix at `#mlpack`; see also the\n[community](https://www.mlpack.org/community.html) page.\n"}