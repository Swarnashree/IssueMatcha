[{"title":"ActiveSupport::Cache.expand_cache_key sometimes returns falsely same key in parallel tests","body":"### Steps to reproduce\r\nThats the hard part here! I still didnt figure out how to reproduce it safely. \r\nWhat i can tell is that this does not happen when i execute a single testcase. It also doesnt happen when i set parallel workers to `1`.\r\n\r\nWhen parallel workers is set to `processors` and all tests are executed via `rails test`, the following test is breaking repeatedly:\r\n```ruby\r\n      it \"returns updated records omitting cache and returning new etag\" do\r\n        get \"\/apis\/v1\/me\/tickets\"\r\n        assert_valid_json_response\r\n\r\n        assert_changes ->{ last_response.headers[\"etag\"] } do\r\n          travel 1.second\r\n          tickets(:multi).touch\r\n\r\n          get \"\/apis\/v1\/me\/tickets\"\r\n          assert_valid_json_response\r\n        end\r\n      end\r\n```\r\nThe etag header is calculated basically via this line of code which i also found out to return the same **wrong key**. The `updated_at` on the record `tickets(:multi)` changes, but the underlying query fetching the `max(tickets.updated_at)` seem to return an older timestamp? At least the timestamp in the key remains the same.\r\n```\r\nActiveSupport::Cache.expand_cache_key current_user.tickets.visible\r\n```\r\nThe visible scope: \r\n```\r\nscope :visible, -> { joins(:admittances).where(tickets: {hidden: false}).merge(Admittance.visible).group(\"tickets.id\")}\r\n```\r\n\r\n### Expected behavior\r\nThe etag header should change in the same way whether i execute a single test or all together without flakiness. \r\n\r\n### Actual behavior\r\nThe etag header **remains equal** which is wrong. But this happens only when executing all tests parallelized which is kinda flaky.\r\n\r\n### Notes\r\nI found out that changing the scope implementation from `group` to `distinct` fixes it:\r\n```\r\nscope :visible, -> { joins(:admittances).where(tickets: {hidden: false}).merge(Admittance.visible).select(\"distinct on (#{table_name}.id) #{table_name}.*\")}\r\n```\r\n\r\n### System configuration\r\n**Rails version**: 7.1.2\r\n\r\n**Ruby version**: 3.2.2\r\n","comments":["Can you use one of the [bug report templates](https:\/\/github.com\/rails\/rails\/blob\/main\/guides\/bug_report_templates\/action_controller.rb) to provide something reproducible? Otherwise its not really possible to figure out what's happening","Can you post the output of `current_user.tickets.visible.to_sql` ? \r\nUnsure, but I suspect you might have an ambiguous column `updated_at` clashing from the join. \r\n"],"labels":["more-information-needed"],"number":51399},{"title":"Ignore destroyed records in CollectionAssociation#empty?","body":"Fix: https:\/\/github.com\/rails\/rails\/issues\/51388\r\n\r\nThis commit isn't in a mergeable state, it's just to better understand the issue at hand. There is likely similar issues in other methods and it would need some tests.\r\n\r\n","comments":[],"labels":["activerecord"],"number":51397},{"title":"[Fix #49259] backtrace_cleaner in the console","body":"### Motivation \/ Background\r\n\r\nThis Pull Request has been created because the current `backtrace_cleaner.rb` does not work as intended in the Rails console. The silencer is too aggressive and removes the entire backtrace. Users expect to be able to see what lines of their application code an exception was raised from. See the video below for a demo of the bug.\r\n\r\nThe reason this is an issue in the Rails console and not elsewhere is because of irb's `handle_exception` [method](https:\/\/github.com\/ruby\/irb\/blob\/89bca01bbac51325a605e31d55e451f251bc5255\/lib\/irb.rb#L1218), which generates the backtrace from `Exception#full_message` rather than `Exception#backtrace` - `Rails::BacktraceCleaner` expects the latter. The difference in formatting between the two results in the silencer removing all lines.\r\n\r\nCloses #49259 \r\n\r\n### Detail\r\n\r\nThis Pull Request creates a new `Rails::FullMessageCleaner` class which inherits from `ActiveSupport::BacktraceCleaner`. I'm proposing this as a solution rather than altering `Rails::BacktraceCleaner` because\r\n\r\n1. The existing class works as expected in other contexts - changing it to work in both the console and the other contexts would be difficult, because\r\n2. They are serving a similar but different enough purpose: one cleans `Exception#backtrace`, and one cleans an array of backtrace lines that irb gets from `Exception#full_message`. These inputs are different enough I think a new class is warranted.\r\n\r\n### Additional information\r\n\r\nI added tests that use a real exception from whatever ruby version the test environment is running, as well as a hard coded ruby 2 test. I wasn't able to tophat this on a rails app using a ruby 2 version - it was difficult to get a test rails app using my development version of rails running on ruby 2. \r\n\r\nhttps:\/\/github.com\/rails\/rails\/assets\/4535650\/81d2b486-5c26-4a08-8705-e25630bd3602\r\n\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["railties"],"number":51396},{"title":"Expose @association as a reader in ActiveRecord_Associations_CollectionProxy","body":"This makes it possible to reflect on associations. For example, Blog.first.posts.association.owner would show that the blog is the owner of the association.\r\n\r\n## Why?\r\n\r\nI have a link helper in my Rails app that reflects on associations, like this: `show(@blog.posts)`. Currently I can't reflect on that association unless I access a private instance variable:\r\n\r\n```ruby\r\n@blog.posts.instance_variable_get(\"@association\").target\r\n```\r\n\r\nThis commit exposes the `@association` object in a public API so I can reflect on associations.\r\n","comments":[],"labels":["activerecord"],"number":51395},{"title":"Bump `NODE_LTS_VERSION` to 20.11.1","body":"### Motivation \/ Background\r\n\r\nIn e8638c9a942e94f097dc8f37a3b58ac067a5ca16 we introduced a constant to\r\nstore the version of Node to be used when generating `.node-version`.\r\n\r\nSince then, the [current LTS][LTS] version of Node is now `20.11.1` as\r\nof [2024-02-14][date].\r\n\r\n[LTS]: https:\/\/nodejs.github.io\/nodejs.dev\/en\/about\/releases\/\r\n[date]: https:\/\/nodejs.org\/en\/blog\/release\/v20.11.1\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["railties"],"number":51393}]