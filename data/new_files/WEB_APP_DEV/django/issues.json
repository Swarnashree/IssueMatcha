[{"title":"Fixed #35319 -- Move the link to add a related object inside the .selector-available column for FilteredSelectMultiple","body":"# Trac ticket number\r\nticket-35319\r\n\r\n# Branch description\r\nMoves the link to add a related object inside the `.selector-available` column for FilteredSelectMultiple.\r\n\r\n# Checklist\r\n- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->\r\n- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.\r\n- [x] I have checked the \"Has patch\" **ticket flag** in the Trac system.\r\n- [ ] I have added or updated relevant **tests**.\r\n- [ ] I have added or updated relevant **docs**, including release notes if applicable.\r\n- [ ] For UI changes, I have attached **screenshots** in both light and dark modes.\r\n","comments":["@knyghty I've created this draft PR to test my current approach. \r\n\r\nIn `admin\/js\/SelectFilter2.js`, we check if the original related field widget has an add link. If it does, we move it to the header and hide the original link.\r\n\r\nOne problem with this current patch is that the add link opens in the current tab and not as a popup, which I will look into and fix.","> @knyghty I've created this draft PR to test my current approach.\r\n> \r\n> In `admin\/js\/SelectFilter2.js`, we check if the original related field widget has an add link. If it does, we move it to the header and hide the original link.\r\n> \r\n> One problem with this current patch is that the add link opens in the current tab and not as a popup, which I will look into and fix.\r\n\r\nThank you @hrushikeshrv for working on this. Please note that we should ensure that the link is present providing a few selenium tests (or at least ensure that if the link is not shown, for whatever reason, there are existing tests that fail)."],"labels":["selenium"],"number":17996},{"title":"Fixed #35189 -- Render admin collapsible fieldsets with <details>.","body":"TL;DR: Improve the accessibility of admin fieldsets and collapse them with a native HTML implementation.\r\n\r\n- Ticket: [#35189](https:\/\/code.djangoproject.com\/ticket\/35189)\r\n- Proof of concept: [Example 2: Details inside (no JS)](https:\/\/codepen.io\/MHLut\/pen\/LYaqYrz)\r\n- [Initial discussion on Discord, accessibility channel ](https:\/\/discord.com\/channels\/856567261900832808\/1207376857800900618)\r\n\r\n## Important facts\r\n\r\n- Works with the main model fieldset and stacked inline fieldsets.\r\n- This change removes all JavaScript for collapsible fieldsets.\r\n- I have recycled as much CSS as possible.\r\n- JavaScript used to check if a fieldset could be collapsible. With JS gone, I moved that check to the Fieldset helper class in Python.\r\n- The translations for \"Show\" and \"Hide\" are now redundant.\r\n- A new translation \"Fields\" (context \"form fields\") was introduced.\r\n\r\n## Known issues\r\n\r\n- No existing CSS bugs were fixed. \r\n  - Example: The font size of the fieldset is below 16px\/1rem.\r\n  - Example: The fieldset heading is hard to distinguish in `forced-colors` mode.\r\n  - Context: Style for `.collapse. h3` in `forms.css` was copied from `.module h2, .module caption, .inline-group h2` in `base.css`.\r\n- The `<h3>` heading in stacked inlines should be a `<h4>`; however, it was originally a `<h2>`, so it's still better than before.\r\n\r\nA potential UX issue could be that the clickable area of the fieldset has moved: You click on the details toggle (\"fields\") instead of the blue fieldset header.\r\n\r\n## Screenshots\r\n\r\nA collapsible fieldset; collapsed:\r\n![ticket-35189_001_collapsed](https:\/\/github.com\/django\/django\/assets\/2210890\/ba3da5d7-a02c-436e-baac-d0b4889cf64e)\r\n\r\nA collapsible fieldset; expanded:\r\n![ticket-35189_002_expanded](https:\/\/github.com\/django\/django\/assets\/2210890\/d971e320-d448-48fd-855a-25d07018a190)\r\n\r\nA fieldset that cannot be collapsed due to a validation error:\r\n![ticket-35189_003_incollapsible-error](https:\/\/github.com\/django\/django\/assets\/2210890\/762fb882-1406-49ed-9bb0-db2270cf1526)\r\n\r\nA collapsible fieldset inside a stacked inline; collapsed:\r\n![ticket-35189_004_collapsed-on-stacked-inline](https:\/\/github.com\/django\/django\/assets\/2210890\/69601af6-dc5a-4c4d-aa1f-983b77962c62)\r\n\r\nA collapsible fieldset inside a stacked inline; cannot be collapsed due to a validation error:\r\n![ticket-35189_005_incollapsible-error-on-stacked-inline](https:\/\/github.com\/django\/django\/assets\/2210890\/637ab781-4792-470d-ab22-a87b5f83ed16)","comments":["~~buildbot, test on selenium.~~ I don\u2019t think that works anymore \ud83d\ude05","For those interested in the heading layout (hello accessibility team), here is an example from my local test project.\r\n\r\nLayout:\r\n\r\n- Main fieldset\r\n- Collapsible fieldset: Address\r\n- Collapsible fieldset: Contact details\r\n- Collapsible fieldset: Notes\r\n- Stacked inline: Social links\r\n  - Main fieldset\r\n  - Fieldset: Username\r\n  - Collapsible fieldset: Profile URL\r\n- Tabular inline: Extra data\r\n  - Main fieldset\r\n\r\nBefore:\r\n\r\n```\r\n\u2013 H1: Change person\r\n\u2013\u2013 H2: Django Test Person (Django, they\/them\/theirs)\r\n\u2013\u2013 H2: Address (Show)\r\n\u2013\u2013 H2: Contact details (Show)\r\n\u2013\u2013 H2: Notes (Show)\r\n\u2013\u2013 H2: Social links\r\n\u2013\u2013\u2013 H3: Social link: django-software-foundation @ LinkedIn Delete\r\n\u2013\u2013 H2: Username\r\n\u2013\u2013 H2: Profile URL (Show)\r\n\u2013\u2013\u2013 H3: Social link: #2 Remove\r\n\u2013\u2013 H2: Username\r\n\u2013\u2013 H2: Profile URL (Show)\r\n\u2013\u2013 H2: Extra data\r\n```\r\n\r\nAfter:\r\n\r\n```\r\n\u2013 H1: Change person\r\n\u2013\u2013 H2: Django Test Person (Django, they\/them\/theirs)\r\n\u2013\u2013\u2013 H3: Address\r\n\u2013\u2013\u2013 H3: Contact details\r\n\u2013\u2013\u2013 H3: Notes\r\n\u2013\u2013 H2: Social links\r\n\u2013\u2013\u2013 H3: Social link: django-software-foundation @ LinkedIn Delete\r\n\u2013\u2013\u2013 H3: Username\r\n\u2013\u2013\u2013 H3: Profile URL\r\n\u2013\u2013\u2013 H3: Social link: #2 Remove\r\n\u2013\u2013\u2013 H3: Username\r\n\u2013\u2013\u2013 H3: Profile URL\r\n\u2013\u2013 H2: Extra data\r\n```\r\n\r\n_Generated using https:\/\/zoebijl.github.io\/table-of-contents\/_","I have removed the draft status of the PR. I expect that people will have feedback on the look and feel of the feature and that the code will require some changes. ~~As such, I have not fixed every Selenium test yet.~~","I didn't realize you can make inline admins collapsible as well. I will work on adding that feature.\r\n\r\nEdit: Fixed!"],"labels":["selenium","Djangonauts :rocket:"],"number":17910},{"title":"Fixed #10403 -- Added a declarative syntax for FormSet, ModelFormSet & InlineFormSet.","body":"This patch is an update of @Parth1811 's [closed PR](https:\/\/github.com\/django\/django\/pull\/11481). \r\nIt includes classes for FormSet, ModelFormSet, and InlineFormSet, allowing for the creation of formsets using a declarative syntax instead of a factory.","comments":["Thanks @Mitchina, for taking the time to work on this ancient PR.\r\nI have lost the context for this, but the overall changes look promising to me.","> Thanks @Mitchina, for taking the time to work on this ancient PR. I have lost the context for this, but the overall changes look promising to me.\r\n\r\nHi @Parth1811, thank you for the encouragement! I'm glad to hear that you find the changes promising. Your changes and @carltongibson directions have been fundamental to me and I truly appreciate the opportunity to build upon them. I hope we can get it in!"],"labels":["Djangonauts :rocket:"],"number":17905},{"title":"Fixed #34789: `filter_horizontal` duplicates entries in \"Chosen\" column after instance is added via in another field using the \"plus\" JS action","body":"This is largely based off the work of @yokeshwaran1 and the closed PR https:\/\/github.com\/django\/django\/pull\/17219.\r\n\r\nThis PR replaces the Selenium Test with a more active walkthrough to recreate the bug.\r\n\r\nTicket Link: https:\/\/code.djangoproject.com\/ticket\/34789#no1\n\n<!-- bot: {\"reminders\":[{\"id\":1,\"who\":\"nessita\",\"what\":\"check on progress\",\"when\":\"2024-04-01T09:00:00.000Z\"}]} -->","comments":["Resolved the issue commented on above. Interestingly, the failure was actually caused when using a model with casing like this:\r\n\r\n`FooBar`\r\n\r\nThe uppercase results in `data-model-ref checking` `foobar` against `foo bar`, and therefore `data-model-ref` does not pick up the match. \r\n\r\nBy changing the model name to this: `Foobar`, it prevents the added space and therefore `data-model-ref` is able to make the correct match.\r\n\r\nThis issue already exists in main so not relevant to this specific fix. I think @yokeshwaran1 already posted a ticket for the adjacent bug, but if not we can create a new one.\r\n\r\nNote if trying to reproduce: The model with the casing issue was resolved by turning `TransitionState` into `Transitionstate`","Hey @devin13cox, thank you for your work so far!\r\n\r\nI have restarted my review in this branch\/ticket but I have an issue, I'm not being able to reproduce the original report using latest `main` (nor Django 5.0.3 nor Django 4.2). Can you confirm if you are still able to reproduce?\r\n\r\nI'm using the same models as before:\r\n```python\r\nfrom django.db import models\r\n\r\n\r\nclass State(models.Model):\r\n    label = models.CharField(max_length=255)\r\n\r\n    def __str__(self):\r\n        return self.label\r\n\r\n\r\nclass Transition(models.Model):\r\n    source = models.ManyToManyField(State, related_name=\"transition_source\")\r\n    target = models.ForeignKey(State, related_name=\"transition_target\", on_delete=models.CASCADE)\r\n\r\n    def __str__(self):\r\n        return f\"Sources: {', '.join(s.label for s in self.source.all())} -- Target: {self.target.label}\"\r\n```\r\n\r\nAnd the same admin:\r\n```python\r\nfrom django.contrib import admin\r\n\r\nfrom .models import State, Transition, TransitionTriple\r\n\r\n\r\nclass TransitionAdmin(admin.ModelAdmin):\r\n    filter_horizontal = [\"source\"]\r\n\r\n\r\nadmin.site.register(State)\r\nadmin.site.register(Transition, TransitionAdmin)\r\n```\r\nLet me know! Thank you. ","@devin13cox  I spent quite some time debugging why I wasn't able to reproduce. Finally I realized I was trying to reproduce a slightly different issue :facepalm:. We have two bugs to solve (as we have said in the past), unclear whether we want to solve them in the same PR or not:\r\n\r\n1. One issue is the reported one, when adding a new related entry using the \"+\" sign from the FK field, the M2M with the `filter_horizontal` gets incorrectly updated. For this, I think your proposed solution could work, I will go back to review this diff with that in mind, will submit updates on this soon.\r\n2. The other issue is when adding a new related entry using the \"+\" sign from from the M2M field. In this case, no other widget gets updated, but really it should update all other fields listing instances of the related model just added. For this, I tracked down the issue to the selector used in `dismissAddRelatedObjectPopup` to decide whether to call `updateRelatedSelectsOptions` or not. Basically the `id` used in the `document.getElementById` is wrong for the M2M widget (but correct for the single FK field, so we may need to fix the call site to pass the proper `name`):\r\n```diff\r\n--- a\/django\/contrib\/admin\/static\/admin\/js\/admin\/RelatedObjectLookups.js\r\n+++ b\/django\/contrib\/admin\/static\/admin\/js\/admin\/RelatedObjectLookups.js\r\n@@ -119,7 +119,7 @@\r\n \r\n     function dismissAddRelatedObjectPopup(win, newId, newRepr) {\r\n         const name = removePopupIndex(win.name);\r\n-        const elem = document.getElementById(name);\r\n+        const elem = document.getElementById(name + '_from');\r\n         if (elem) {\r\n             const elemName = elem.nodeName.toUpperCase();\r\n             if (elemName === 'SELECT') {\r\n```","> Resolved the issue commented on above.\r\n\r\n:trophy: \r\n\r\n> Interestingly, the failure was actually caused when using a model with casing like this: `FooBar`\r\n\r\nI think this is in fact another issue, not the one reported in ticket-34789.\r\n\r\n> The uppercase results in `data-model-ref checking` `foobar` against `foo bar`, and therefore `data-model-ref` does not pick up the match.\r\n> \r\n> By changing the model name to this: `Foobar`, it prevents the added space and therefore `data-model-ref` is able to make the correct match.\r\n> \r\n> This issue already exists in main so not relevant to this specific fix. I think @yokeshwaran1 already posted a ticket for the adjacent bug, but if not we can create a new one.\r\n> \r\n> Note if trying to reproduce: The model with the casing issue was resolved by turning `TransitionState` into `Transitionstate`\r\n\r\nWhen I first read this comment, I wasn't sure what you mean. Now, after having been debugging things in this code for a few hours, I understand that we have 3 issues: the two I detailed in my previous comment, and a third one which can be described as:\r\n\r\n_The update of related objects fails in the admin when the related model has a name in camel case._\r\n\r\nDo you agree? I don't think we have tickets for each of the three issues, would you fancy filing ticket for 2 and 3?","> _The update of related objects fails in the admin when the related model has a name in camel case._\r\n> \r\n> Do you agree? I don't think we have tickets for each of the three issues, would you fancy filing ticket for 2 and 3?\r\n\r\nAfter some more debugging, I believe the fix for the third issue should something along these lines:\r\n```diff\r\n\r\ndiff --git a\/django\/contrib\/admin\/templates\/admin\/widgets\/related_widget_wrapper.html b\/django\/contrib\/admin\/templates\/admin\/widgets\/related_widget_wrapper.html\r\nindex 8e4356a95c..99b20545af 100644\r\n--- a\/django\/contrib\/admin\/templates\/admin\/widgets\/related_widget_wrapper.html\r\n+++ b\/django\/contrib\/admin\/templates\/admin\/widgets\/related_widget_wrapper.html\r\n@@ -1,5 +1,5 @@\r\n {% load i18n static %}\r\n-<div class=\"related-widget-wrapper\" {% if not model_has_limit_choices_to %}data-model-ref=\"{{ model }}\"{% endif %}>\r\n+<div class=\"related-widget-wrapper\" {% if not model_has_limit_choices_to %}data-model-ref=\"{{ model_name }}\"{% endif %}>\r\n     {{ rendered_widget }}\r\n     {% block links %}\r\n         {% spaceless %}\r\ndiff --git a\/django\/contrib\/admin\/widgets.py b\/django\/contrib\/admin\/widgets.py\r\nindex fc0cd941d1..9633ebb1a1 100644\r\n--- a\/django\/contrib\/admin\/widgets.py\r\n+++ b\/django\/contrib\/admin\/widgets.py\r\n@@ -328,6 +328,7 @@ class RelatedFieldWidgetWrapper(forms.Widget):\r\n             \"name\": name,\r\n             \"url_params\": url_params,\r\n             \"model\": rel_opts.verbose_name,\r\n+            \"model_name\": rel_opts.model_name,\r\n             \"can_add_related\": self.can_add_related,\r\n             \"can_change_related\": self.can_change_related,\r\n             \"can_delete_related\": self.can_delete_related,\r\n```\r\n\r\nWould you have some time to create the ticket and propose a patch? :medal_sports: ","Hey @nessita, thank you for taking a deep dive into this! I was not aware of the m2m issue, but that makes sense. I can set aside some time next week to introduce the patch and some tests.\r\n\r\nAs for the third issue, that's exactly what I was describing. Simply a naming issue.\r\n\r\nWould it make sense to make alterations to the scope of this ticket due to the related nature and push it all together? Or would you prefer separate patches for these items?\r\n\r\nAdding to this ticket would likely simplify it, especially for the third issue (could simply alter the existing test to utilize camel casing). The M2M would need a slightly different setup.","> Hey @nessita, thank you for taking a deep dive into this! I was not aware of the m2m issue, but that makes sense. I can set aside some time next week to introduce the patch and some tests.\r\n\r\nAmazing, thank you!\r\n\r\nI had the Selenium tests running for this PR (see actions outcome) and there was a failure, would you also have time to see if that's related to your work?\r\n\r\n> As for the third issue, that's exactly what I was describing. Simply a naming issue.\r\n> \r\n> Would it make sense to make alterations to the scope of this ticket due to the related nature and push it all together? Or would you prefer separate patches for these items?\r\n\r\nI think we should have separated patches, that allows to have a tidier git history and it also helps in the unlikely case that we need to revert a given change due to a regression.\r\n\r\n> Adding to this ticket would likely simplify it, especially for the third issue (could simply alter the existing test to utilize camel casing). The M2M would need a slightly different setup.\r\n\r\nYeah, I know that merging fixes is simpler in the short term, but in the medium to long term, it really pays off to have a clean git history.\r\n\r\nThank you!!!\r\n\r\n\/remind me to check on progress in 2 weeks\r\n\r\n","@nessita set a reminder for **4\/1\/2024**"],"labels":["selenium","reminder"],"number":17897},{"title":"Fixed #35235 -- ArrayAgg() doesn't return default when filter contains __in=[].","body":"https:\/\/code.djangoproject.com\/ticket\/35235\r\n\r\nNew to Django core here and wanting to try for next djangonaut run, thought I could try to triage by writing some quickie tests to see if I could replicate the issue... and I can't. My 2 additional tests (and all of them, actually) pass locally. \r\n\r\nLet me know if this is not a good approach.","comments":["I wonder if we should also add a test around `_output_field_or_none` though it could be a bit too trivial \ud83e\udd14\r\n\r\neg\r\n\r\n```\r\ndef test_output_field_or_none(self):\r\n    expression = FooExpression()\r\n    self.assertIsNone(assert expression._output_field_or_none)\r\n    new_output_field = BooleanField()\r\n    expression.output_field = new_output_field\r\n    self.assertIs(expression._output_field_or_none, new_output_field)\r\n```","@shangxiao\r\n\r\n> I wonder if we should also add a test around _output_field_or_none though it could be a bit too trivial \ud83e\udd14\r\n\r\nI think it might be worth it yes just to capture that is it an unexpected behaviour of `BaseExpression`\r\n\r\nAlso do you know how to trigger a benchmark run on a PR? I figured it might be worth a run to assert our expectations wrt\/to `_output_field_or_none` _uncaching_ hold.\r\n\r\nMy expectations are that since every expression is composed of other expressions that they resolve their output field from and eventually cache them it should have no impact but it might be valuable to confirm prior to merging if it's just a few more CPU cycle away.","BTW I also just noticed `_output_field_resolved_to_none` which gets assigned in `output_field` and it seems that flag might also warrant clearing? I wonder if its existence warrants the usage of a slightly more involved solution that has `output_field` assignment clear both `_output_field_or_none` and `_output_field_resolved_to_none` instead.","> BTW I also just noticed `_output_field_resolved_to_none` which gets assigned in `output_field` and it seems that flag might also warrant clearing? I wonder if its existence warrants the usage of a slightly more involved solution that has `output_field` assignment clear both `_output_field_or_none` and `_output_field_resolved_to_none` instead.\r\n\r\nI saw that. Initially I figured we could ignore it as it's only used in that module, but as folks always say we don't know how this module gets used out in the wild \ud83d\ude1d\r\n\r\nA simpler (and possibly more Pythonic?) approach could just be to remove flags altogether and raise a different exception type, and use that as the distinguishing factor as to whether `_output_field_or_none()` reraises.\r\n\r\neg\r\n\r\n```\r\n--- a\/django\/db\/models\/expressions.py\r\n+++ b\/django\/db\/models\/expressions.py\r\n@@ -172,7 +172,6 @@ class BaseExpression:\r\n     empty_result_set_value = NotImplemented\r\n     # aggregate specific fields\r\n     is_summary = False\r\n-    _output_field_resolved_to_none = False\r\n     # Can the expression be used in a WHERE clause?\r\n     filterable = True\r\n     # Can the expression can be used as a source expression in Window?\r\n@@ -310,8 +309,7 @@ class BaseExpression:\r\n         \"\"\"Return the output type of this expressions.\"\"\"\r\n         output_field = self._resolve_output_field()\r\n         if output_field is None:\r\n-            self._output_field_resolved_to_none = True\r\n-            raise FieldError(\"Cannot resolve expression type, unknown output_field\")\r\n+            raise ValueError(\"Cannot resolve expression type, unknown output_field\")\r\n         return output_field\r\n\r\n     @property\r\n@@ -323,8 +321,7 @@ class BaseExpression:\r\n         try:\r\n             return self.output_field\r\n         except FieldError:\r\n-            if not self._output_field_resolved_to_none:\r\n-                raise\r\n+            raise\r\n\r\n     def _resolve_output_field(self):\r\n         \"\"\"\r\n```\r\n\r\n","Or maybe this is better as it keeps the API consistent - this way it doesn't disrupt folks expecting `FieldError` from `.output_field`.\r\n\r\nI know Mariusz doesn't like specific exceptions but this is a practice I find valuable - a practice which I got from old mate Raymond Hettinger in one of his presentations.\r\n\r\nAnyway though the point I'm making is that \"state is the root of all evil\" (aside from premature optimisation that is \ud83d\ude01)\r\n\r\n```\r\n--- a\/django\/db\/models\/expressions.py\r\n+++ b\/django\/db\/models\/expressions.py\r\n@@ -166,13 +166,16 @@ class Combinable:\r\n         return NegatedExpression(self)\r\n\r\n\r\n+class OutputFieldIsNoneError(FieldError):\r\n+    pass\r\n+\r\n+\r\n class BaseExpression:\r\n     \"\"\"Base class for all query expressions.\"\"\"\r\n\r\n     empty_result_set_value = NotImplemented\r\n     # aggregate specific fields\r\n     is_summary = False\r\n-    _output_field_resolved_to_none = False\r\n     # Can the expression be used in a WHERE clause?\r\n     filterable = True\r\n     # Can the expression can be used as a source expression in Window?\r\n@@ -310,8 +313,9 @@ class BaseExpression:\r\n         \"\"\"Return the output type of this expressions.\"\"\"\r\n         output_field = self._resolve_output_field()\r\n         if output_field is None:\r\n-            self._output_field_resolved_to_none = True\r\n-            raise FieldError(\"Cannot resolve expression type, unknown output_field\")\r\n+            raise OutputFieldIsNoneError(\r\n+                \"Cannot resolve expression type, unknown output_field\"\r\n+            )\r\n         return output_field\r\n\r\n     @property\r\n@@ -322,9 +326,10 @@ class BaseExpression:\r\n         \"\"\"\r\n         try:\r\n             return self.output_field\r\n+        except OutputFieldIsNoneError:\r\n+            return\r\n         except FieldError:\r\n-            if not self._output_field_resolved_to_none:\r\n-                raise\r\n+            raise\r\n\r\n     def _resolve_output_field(self):\r\n         \"\"\"\r\n```","I like the `OutputFieldIsNoneError` approach a lot, it seems like it should have been this way in the first place.\r\n\r\nOne small tweak I would make; the whole `except FieldError: raise` branch is now unnecessary\r\n\r\n```diff\r\n--- a\/django\/db\/models\/expressions.py\r\n+++ b\/django\/db\/models\/expressions.py\r\n@@ -166,13 +166,16 @@ class Combinable:\r\n         return NegatedExpression(self)\r\n\r\n\r\n+class OutputFieldIsNoneError(FieldError):\r\n+    pass\r\n+\r\n+\r\n class BaseExpression:\r\n     \"\"\"Base class for all query expressions.\"\"\"\r\n\r\n     empty_result_set_value = NotImplemented\r\n     # aggregate specific fields\r\n     is_summary = False\r\n-    _output_field_resolved_to_none = False\r\n     # Can the expression be used in a WHERE clause?\r\n     filterable = True\r\n     # Can the expression can be used as a source expression in Window?\r\n@@ -310,8 +313,9 @@ class BaseExpression:\r\n         \"\"\"Return the output type of this expressions.\"\"\"\r\n         output_field = self._resolve_output_field()\r\n         if output_field is None:\r\n-            self._output_field_resolved_to_none = True\r\n-            raise FieldError(\"Cannot resolve expression type, unknown output_field\")\r\n+            raise OutputFieldIsNoneError(\r\n+                \"Cannot resolve expression type, unknown output_field\"\r\n+            )\r\n         return output_field\r\n\r\n     @property\r\n@@ -322,9 +326,10 @@ class BaseExpression:\r\n         \"\"\"\r\n         try:\r\n             return self.output_field\r\n+        except OutputFieldIsNoneError:\r\n+            return\r\n-         except FieldError:\r\n-            if not self._output_field_resolved_to_none:\r\n-                raise\r\n\r\n     def _resolve_output_field(self):\r\n         \"\"\"","Ah yes of course you're right, one of those forest-trees moments \ud83d\ude02","@sharonwoo Just need some tests around `_output_field_or_none` \ud83d\udc4d "],"labels":["benchmark"],"number":17890}]