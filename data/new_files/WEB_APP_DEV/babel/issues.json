[{"title":"[Bug]: Wrong transpilling @babel\/standalone@7.24.3 when destructuring to a new object","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\nUsing https:\/\/unpkg.com\/@babel\/standalone@7.24.3\/babel.min.js\r\n...\r\n(sorry for jQuery use here, its just a test case)\r\n        const c = $('script[type=\"text\/babel\"]').text()\r\n        var js = Babel.transform(c, { presets: [\"react\",\"es2015-no-commonjs\"] }).code;\r\n        $(\"body\").append($('<script type=\"module\">').text(js))\r\n...\r\n<script type=\"text\/babel\" data-type=\"module\" data-presets=\"react\">\r\n.......\r\n.....Some react app stuff here\r\n....\r\n console.log({...tags,[newTag.current.key]:newTag.current.val}) \/\/This is the important line, the thing here is to construct a new object from tags props adding a new key:value to the new object\r\n....\r\n<\/script>\r\n\r\nThis line is transpilled to:\r\nconsole.log(_defineProperty({}, newTag.current.key, newTag.current.val));\r\nloosing the prev tags object props...\r\n\r\nI had to change this line to this in order to be well transpilled:\r\nsetTags({...tags,...{[newTag.current.key]:newTag.current.val}}) \/\/Notice that now the new prop is encapsulated in a seconly destructured object, and now this is well interpreted as:\r\nsetTags({\r\n      ...tags,\r\n      ..._defineProperty({}, newTag.current.key, newTag.current.val)\r\n    });\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nTested the code widthout transpilling and works well so I supouse it is well formed.\n\n### Environment\n\nChrome Versi\u00f3n 122.0.6261.129 (Build oficial) (64 bits)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nSorry if i dont make the ticket well, I just worked around, but think this could be a problem for someon else and too dificult to describe in a search engine.\r\nThnx in advance.","comments":["Hey @marionicolas! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: needs triage"],"number":16378},{"title":"fix: TypeScript annotation affects output","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #16375 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          | \u221a\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | \u221a\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nChanges in `traverse`, I'm not sure if anyone uses it, but this has been unreliable before.","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/56569"],"labels":["PR: Bug Fix :bug:"],"number":16377},{"title":"[Bug]: TypeScript annotation that contains the name of the annotated class method changes final output","body":"### Input code\r\n\r\n[REPL link](https:\/\/babeljs.io\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=true&code_lz=KYDwDg9gTgLgBAYwDYEMDOa4BEUxQI3WDgG8AoOOGKFAOzRQRgEsJaAKCyuAeh7gCSAMyoALYjACeYYnVoQ8LNnHFRiCNnmb0xxAFS0UAW2IQRMcXBMWIAEz1dKfXbTjN4CUXQDmwTKIgAd10rYBtbN0wNIzBmJGBbADo4ACVgQxM4AANqOgYmVlosx15-fGAkILg6CLRgYgDgi1MAVxgwNsQvWl80RJKEFCQkQgQAawAuOHZc-kYlWimAFRo5grYASjgAXgA-OBbaMflA2gAaLi3ybjg1GBaoVwtmPrx8eMTZ_IXOG8p2EBbPaIIYjRhjdi0YDBHAQFZ5eaFAEbDYXG4bADcXAAvmRcUA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Ctypescript&prettier=false&targets=Node-2&version=7.24.0&externalPlugins=&assumptions=%7B%7D)\r\n\r\n```ts\r\nexport class Database {\r\n  transaction(\r\n    \/\/ If the type annotation here contains the *name of the method*\r\n    \/\/ then it changes how the method is compiled. Rename `transaction`\r\n    \/\/ below and see how the output changes.\r\n    callback: (transaction: Transaction) => unknown,\r\n  ) {\r\n    return this.table.transaction(\r\n      (x) => callback(new DaoTransaction(x)),\r\n    );\r\n  }\r\n}\r\n\r\n```\r\n\r\n\r\n### Current and expected behavior\r\n\r\nThis is a class method called `transaction` that has a parameter called `callback`, which has the following type annotation\r\n```ts\r\ncallback: (transaction: Transaction) => unknown\r\n```\r\nnote that the parameter in the TypeScript annotation is called `transaction`, like the name of the method the parameter is defined for. \r\n\r\nThe TypeScript annotation **should not affect how the code is compiled** but what I've noticed is that the output is much different **when the annotation contains the name of the method**. When thats the case it outputs:\r\n```js\r\n_proto.transaction = function (_transaction) {\r\n    function transaction(_x) {\r\n      return _transaction.apply(this, arguments);\r\n    }\r\n    transaction.toString = function () {\r\n      return _transaction.toString();\r\n    };\r\n    return transaction;\r\n  }(function (\r\n  \/\/ If the type annotation here contains the *name of the method*\r\n  \/\/ then it changes how the method is compiled. Rename `transaction`\r\n  \/\/ below and see how the output changes.\r\n  callback) {\r\n    return this.table.transaction(function (x) {\r\n      return callback(new DaoTransaction(x));\r\n    });\r\n  });\r\n  ```\r\n  \r\n but if you were to remove the annotation or rename the parameter like\r\n ```ts\r\ncallback: (t: Transaction) => unknown\r\n```\r\nthen the output is much simpler, skipping the wrapping function that writes `toString` for whatever reason\r\n```js\r\n _proto.transaction = function transaction(\r\n  \/\/ If the type annotation here contains the *name of the method*\r\n  \/\/ then it changes how the method is compiled. Rename `transaction`\r\n  \/\/ below and see how the output changes.\r\n  callback) {\r\n    return this.table.transaction(function (x) {\r\n      return callback(new DaoTransaction(x));\r\n    });\r\n  };\r\n  ```\r\n\r\n\r\n### Environment\r\n\r\nSee: the REPL link\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @aweary! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: needs triage"],"number":16375},{"title":"Improve `super.x` output","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | `Fixes #1, Fixes #2` <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nI personally don't like having to call `getPrototypeOf` every time because it's slow, but we have a test that relies on this behavior.\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/30521560\/31079817-1ac8-493d-84c6-131a3ef7e833)\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/56568"],"labels":["PR: Output optimization :microscope:"],"number":16374},{"title":"[Bug]: Exception when combining a decorated class, a decorated method, and a static field","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@rollup\/plugin-babel\n\n### Input code\n\n```js\r\nfunction decorate() {\r\n  return function (target, context) {}\r\n}\r\n\r\n@decorate() \/\/ this does not have to be the same decorator as on the method\r\nclass Test {\r\n  static something = 42;\r\n  @decorate() \/\/ this does not have to be the same decorator as on the class\r\n  method() {}\r\n}\r\n```\n\n### Configuration file name\n\nbabel.config.mjs\n\n### Configuration\n\n```js\r\n\/* eslint-env node *\/\r\n\r\nconst config = {\r\n  presets: [[\"@babel\/preset-env\", {}], \"@babel\/preset-typescript\"],\r\n};\r\n\r\nif (process.env.NODE_ENV === \"test\") {\r\n  config.plugins = [\r\n    [\r\n      \"@babel\/plugin-proposal-decorators\",\r\n      {\r\n        version: \"2023-11\",\r\n      },\r\n    ],\r\n  ];\r\n}\r\n\r\nexport default config;\r\n```\n\n### Current and expected behavior\n\nCurrent behavior: The code above results in `TypeError: _initClass is not a function`. This happens in my current setup when I combine a decorated class, a decorated method, and a static field. Removal of any of the aforementioned elements prevents the error from occurring.\r\n\r\nExpected behavior: no exceptions.\n\n### Environment\n\nSystem:\r\n    OS: Linux 6.5 Ubuntu 22.04.4 LTS 22.04.4 LTS (Jammy Jellyfish)\r\n  Binaries:\r\n    Node: 20.11.0 - ~\/.volta\/tools\/image\/node\/20.11.0\/bin\/node\r\n    npm: 10.2.4 - ~\/.volta\/tools\/image\/node\/20.11.0\/bin\/npm\r\n  npmPackages:\r\n    @babel\/cli: ^7.22.5 => 7.24.1 \r\n    @babel\/core: ^7.22.1 => 7.24.3 \r\n    @babel\/plugin-proposal-decorators: ^7.22.3 => 7.24.1 \r\n    @babel\/preset-env: ^7.22.4 => 7.24.3 \r\n    @babel\/preset-typescript: ^7.21.5 => 7.24.1 \r\n    eslint: ^8.41.0 => 8.57.0 \n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @SirPepe! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Mhh, I cannot reproduce this on the repl :thinking: \r\n\r\nhttps:\/\/babeljs.io\/repl#?browsers=chrome%20120&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=GYVwdgxgLglg9mABAEwKYTgJwIZVQCgEpEBvAKEUU1ShEyVElgUXym0wHMaAaRDMHgAeUYiQC-ZSWQACaDDjxFEAehWIoACxgBnFHFR6wcKIk3YAbqg1xEAI2tbrO7AFtr8rLiyJselk6I7lpwyGQQADZ-egAqhqbklDrssBCIOnDB2mCciAC8iAAsAEwA3BSIcuheSsRqGtp6yAZGJmaWjrYODc5uHtWKPn6IAZrWkdEVWaHKElJkZGCoAO6IcclEZEA&debug=false&forceAllTransforms=false&modules=commonjs&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=&prettier=false&targets=&version=7.24.3&externalPlugins=%40babel%2Fplugin-proposal-decorators%407.24.1&assumptions=%7B%7D\r\n\r\nIf I copy the generated code and run it, it doesn't throw.\r\n\r\nCould you share a runnable example?","I stripped almost everything from my project: https:\/\/github.com\/SirPepe\/babel-decorators-repro\r\n\r\nRunning `npm run build` with the static field *included* results the following code:\r\n\r\n```\r\nfunction _identity(x) {\r\n  return x;\r\n}\r\n\r\nlet _initClass;\r\nlet _Test;\r\nnew class extends _identity {\r\n  something = 42;\r\n  constructor() {\r\n    super(_Test), _initClass();\r\n  }\r\n}();\r\n\r\nexport { _Test as Test };\r\n```\r\n\r\n`_initClass()` is obviously not going to work. If I *remove* the static field from `index.ts`, `_initClass()` is there, alongside all the other helper functions that I would expect.","As a workaround, please set the typescript preset option `allowDeclareFields: true`. It will be defaulted to `true` in Babel 8 anyway.\r\n\r\nThis is essentially a plugin ordering issue: the typescript transform currently runs after the decorator transform, so the `applyDecs` call inserted in a temporary property is removed by the typescript transform, because historically ts doesn't use [[define]] for fields."],"labels":["i: bug","Spec: Decorators","area: plugin ordering"],"number":16373},{"title":"[Bug]: Babel TypeScript syntax throws with error recovery enabled where offical does not","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n```ts\r\nparse(\"foo.\", { errorRecovery: true })\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nCurrently getting `SyntaxError`.\r\n\r\nExpected the parser to allow empty identifiers in error recovery mode, like TypeScript's parser does:\r\nhttps:\/\/ts-ast-viewer.com\/#code\/GYexDog\r\n\r\nSimilar to the other syntax errors as listed in the release notes about error recovery:\r\nhttps:\/\/babeljs.io\/blog\/2019\/11\/05\/7.7.0#parser-error-recovery-10363\r\n\r\nThis is crucial to get auto completion to work as expected.\n\n### Environment\n\n- System:\r\n  - OS: Linux 6.5 Ubuntu 22.04.4 LTS 22.04.4 LTS (Jammy Jellyfish)\r\n- Binaries:\r\n  - Node: 20.8.1 - ~\/.nvm\/versions\/node\/v20.8.1\/bin\/node\r\n  - npm: 10.1.0 - ~\/.nvm\/versions\/node\/v20.8.1\/bin\/npm\r\n  - pnpm: 8.12.1 - ~\/.nvm\/versions\/node\/v20.8.1\/bin\/pnpm\r\n  - bun: 1.0.21 - ~\/.nvm\/versions\/node\/v20.8.1\/bin\/bun\r\n- npmPackages:\r\n  - @babel\/core: ^7.23.3 => 7.23.3 \r\n  - @babel\/parser: ^7.24.1 => 7.24.1 \r\n  - @babel\/plugin-proposal-async-do-expressions: ^7.23.3 => 7.23.3 \r\n  - @babel\/plugin-proposal-do-expressions: ^7.23.3 => 7.23.3 \r\n  - @babel\/plugin-proposal-throw-expressions: ^7.23.3 => 7.23.3 \r\n  - @babel\/plugin-syntax-typescript: ^7.23.3 => 7.23.3 \r\n  - @babel\/preset-env: ^7.23.6 => 7.23.6 \r\n  - @babel\/preset-react: ^7.23.3 => 7.23.3 \r\n  - @babel\/preset-typescript: ^7.23.3 => 7.23.3 \r\n  - babel-plugin-module-resolver: ^5.0.0 => 5.0.0\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nI have a dialect of TypeScript that compiles to TypeScript to get language features supported like types and auto completion and I use Babel to do this compilation. So even if TypeScript can deal with `foo.` just fine, if Babel does not, my language features fail too work.","comments":["Hey @msteen! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: needs triage"],"number":16371},{"title":"Fix incorrect function hoisting in some case statements","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Mitigates #14960\r\n| Patch: Bug Fix?          | Yes\r\n| Major: Breaking Change?  | No\r\n| Minor: New Feature?      | No\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  | No\r\n| License                  | MIT\r\n\r\nThe linked issue https:\/\/github.com\/babel\/babel\/issues\/14960 shows a case where babel breaks the behavior of a code snippet:\r\n\r\n```js\r\nswitch ('what') {\r\ndefault:\r\n    console.log(a())\r\n    function a() { return 1; }\r\n}\r\n```\r\n\r\nThe issue is that `function a() {}` gets converted into `var a = function() {}`, but isn't hoisted to the top as it should. Babel currently hoists functions correctly when they are in block statements, but not in case statements.\r\nFixing this problem in **all** cases is difficult, due to the issue pointed to in an answer to that ticket:\r\n\r\n```js\r\nswitch (x) {\r\n  case 0:\r\n    let num = 3;\r\n    log(0);\r\n  default:\r\n    log(1);\r\n    function log(s) { console.log(s || num) }\r\n}\r\n```\r\n\r\nIn the example above, moving log to the first case breaks the second, but keeping the log in the second case does not address the first.\r\n\r\nNevertheless, the current behavior is a problem. This Pull Request addresses this by hoisting the function to the start of the matching case. This does not address all issues, but it shouldn't break anything that isn't already broken, and it should fix issues as the function is \"more hoisted\" than it used to be. Notably, this fixes issues with functions that are only ever referenced in the same case that declares them, which is the case I encountered.","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/56548","jest failed, but I believe it has since been fixed by this: https:\/\/github.com\/jestjs\/jest\/pull\/14976","Yes :+1: ","> I'm not sure if changing `babel-plugin-transform-block-scoped-functions` would be better.\r\n\r\nIt could be done there too, but it would mean moving the logic of hoisting there.\r\nMoving it there seems doable, but it would mean the equivalent bug (if there is one) for \"Annex B.3.3\" code would not be fixed or would need a duplicated fix."],"labels":["PR: Bug Fix :bug:"],"number":16363},{"title":"[Bug]: The internal class binding captured in element decorators should not be mutated","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n```js\r\n{\r\n  const errs = [];\r\n  const fns = [];\r\n  const captureAndAssertUninitialized = function (fn) {\r\n    fns.push(fn);\r\n    try {\r\n      fn();\r\n    } catch (err) {\r\n      errs.push(err);\r\n    } finally {\r\n      return v => v;\r\n    }\r\n  }\r\n\r\n  @captureAndAssertUninitialized(() => C)\r\n  class C {\r\n    @captureAndAssertUninitialized(() => C) [captureAndAssertUninitialized(() => C)]\r\n  }\r\n\r\n  console.log(errs, fns.map(fn => fn()));\r\n\r\n  C = null;\r\n\r\n  console.log(fns.map(fn => fn()));\r\n}\r\n```\r\n[REPL](https:\/\/babeljs.io\/repl\/build\/56517#?browsers=chrome%20120&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=ATDGHsDsGcBdgKYCcnWAXmAbQLoG4AoECGeAMxg23yLCjmAENpplYA5cWASUgEtYfRgBs-ALwQATAIKRJAYUYAHWAFckCKmVWRQgqMAAUFAJTAA3rRAVoAOiWroAC2OQThECFhIAnhaueFIbuAQC-YIywoE5GyEhmlp6ecXYOzoZxIUnhZHyQIsJ-iUnAGmpIkMAAbhgAfNUenqG0zbQAAsysSBxcvAJCohIycooq6giGwXXA8ia0oMKdM_5JHSxsnDz8giLiUrIKyuUTU-j1s9idG73bA3vDh2Mak2ZnMyY4LQTz9ODCCLZhOAAOYZFDQAA0wBstgAtspXNMgiYUYRaPIqJBVMJhGjiL9_oCQa47PClIi3sjUUA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env&prettier=false&targets=&version=7.24.0%2Bpr.16350&externalPlugins=%40babel%2Fplugin-proposal-decorators%407.23.9&assumptions=%7B%7D)\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n```json\r\n{\r\n  \"plugins\": [[\"proposal-decorators\", { \"version\": \"2023-11\" }]]\r\n}\r\n```\n\n### Current and expected behavior\n\nCurrent:\r\n\r\nThe first `console.log` prints `[ReferenceError], [C, C, C]`, the second `console.log` prints `[null, null, null]`.\r\n\r\nExpected:\r\n\r\nThe first `console.log` should print `[ReferenceError, ReferenceError, ReferenceError], [C, C, C]`,\r\nbecause decorators and computed keys are evaluated before the class binding is bound. \r\n\r\nThe second `console.log` should print `[null, C, C]`, because `C` within the class decorators points to the mutable binding created in BindingClassDeclarationEvaluation, while `C` in the element decorators and computed keys point to the internal immutable class binding.\n\n### Environment\n\nREPL\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nThis is the point 6 of https:\/\/github.com\/babel\/babel\/issues\/16117.","comments":["Hey @JLHwung! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: bug","Spec: Decorators"],"number":16356},{"title":"[Bug]: sourceCode.getScope is not a function (`@babel\/eslint-plugin`)","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```\r\n\/\/ na\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nThis issue is concerning `eslint` and `@babel\/eslint-plugin`.\r\n\r\nWhen upgrading ESLint to `8.37.0`, the following lint error can be observed. When using `8.36.0` linting works as expected.\r\n\r\n```\r\nsourceCode.getScope is not a function\r\nOccurred while linting \/Users\/username\/folder\/index.js:1\r\nRule: \"@babel\/no-invalid-this\"\r\n```\r\n\r\n[Release notes for `8.37.0`](https:\/\/github.com\/eslint\/eslint\/releases\/tag\/v8.37.0)\r\n\r\nI suspect the cause of the issue could be [`feat: Copy getScope() to SourceCode`](https:\/\/github.com\/eslint\/eslint\/pull\/17004).\n\n### Environment\n\npackage.json\r\n```\r\n\"@babel\/core\": \"7.24.0\",\r\n\"@babel\/eslint-parser\": \"7.23.10\",\r\n\"@babel\/eslint-plugin\": \"7.23.5\",\r\n\"@babel\/preset-react\": \"7.23.3\",\r\n\"eslint\": \"8.37.0\",\r\n```\r\n\r\n.eslintrc\r\n```\r\n{\r\n  \"rules\": {\r\n    \"new-cap\": 0,\r\n    \"@babel\/new-cap\": 2,\r\n      \r\n    \"no-invalid-this\": 0,\r\n    \"@babel\/no-invalid-this\": 2,\r\n      \r\n    \"no-unused-expressions\": 0,\r\n    \"@babel\/no-unused-expressions\": 2,\r\n      \r\n    \"object-curly-spacing\": 0,\r\n    \"@babel\/object-curly-spacing\": [2, \"always\"],\r\n      \r\n    \"semi\": 0,\r\n    \"@babel\/semi\": [2, \"never\"],\r\n  },\r\n  \"plugins\": [\r\n    \"@babel\"\r\n  ]\r\n}\r\n```\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @01taylop! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","When using with ESLint 8, `@babel\/no-invalid-this` delegates the rule to ESLint's built-in `no-invalid-this` rule since ESLint 8 supports class properties well:\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/5ca9b9a84f5f06d16704c53717c9baae2b347839\/eslint\/babel-eslint-plugin\/src\/rules\/no-invalid-this.cjs#L7-L11\r\n\r\nYou can try to remove the `@babel\/no-invalid-this` rule and use `no-invalid-this`. If the error persists, that would be more like an ESLint regression.","That's good to know, thank you! The same applies to `@babel\/semi` so I made a similar change to my config.\r\n\r\nI must have missed this because I upgraded `@babel\/eslint-plugin` before upgrading to ESLint 8. We could look at updating the docs\/README.md to better highlight the rules being delegated.\r\n\r\nUnfortunately, however, changing these two rules exposes a similar issue in the `@babel\/object-curly-spacing` rule:\r\n\r\n```\r\nCannot read properties of undefined (reading 'getFirstToken')\r\n```\r\n\r\nThis error occurs from ESLint version [`8.40.0`](https:\/\/github.com\/eslint\/eslint\/releases\/tag\/v8.40.0) onwards, `8.39.0` is fine. Still investigating the cause of this - there is nothing obvious that stands out in the Release Notes.","Do you have a repo we can clone to reproduce the error?"],"labels":["i: needs triage"],"number":16340},{"title":"[Bug]: plugin-transform-regenerator together with async-to-generator incorrectly shadow function name in local scope","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/cli\r\n\r\n### Input code\r\n\r\nI have a REPL of the large minified build where we encountered the bug. Unfortunately, while I could track down the incriminated plugins, I haven't managed to single out a smaller portion of code where the bug could be reproduced.\r\n\r\n[REPL](https:\/\/drive.proton.me\/urls\/N50FRZCJNM#mP9DtYNhYgUS)\r\n\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n`npx babel --plugins=@babel\/plugin-transform-destructuring,@babel\/plugin-transform-for-of,@babel\/plugin-transform-spread,@babel\/plugin-transform-classes,@babel\/plugin-transform-regenerator, @babel\/plugin-transform-regenerator, @babel\/plugin-transform-async-to-generator`\r\n\r\n### Current and expected behavior\r\n\r\nCurrent (line references based on the REPL): the class `n` declared at L7 and instantiated in the function `Rr` at L3297 of the original code is shadowed by a var declaration in the transformed code (at L5599). As a result, the instantiation fails due to `n` being undefined.\r\n\r\nExpected: the var declaration uses a different name.\r\n\r\n\r\n### Environment\r\n\r\n    Babel: 7.23.9 (@babel\/core 7.23.9)\r\n    OS: macOS 12.7.2\r\n    Node: 20.11.0\r\n    Yarn: 4.1.0 \r\n    npm: 8.15.0\r\n\r\n### Possible solution\r\n\r\nNot really a solution, but excluding either `@babel\/plugin-transform-async-to-generator` or `@babel\/plugin-transform-regenerator` fixes the issue.\r\n\r\n### Additional context\r\n\r\nI noticed that dropping the code after the affected function (`Rr`) results in a correct transformation, hence something in the rest of the code must be playing a role too.","comments":["Hey @larabr! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: needs triage"],"number":16334}]