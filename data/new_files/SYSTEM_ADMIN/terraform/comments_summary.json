[{"issue_title": "`terraform fmt` mangles hyphenated-heredoc `error_message`  with newlines embedded in interpolation", "summary": "Discussion on the potential security vulnerability in the library's encryption method and a request for a fix or workaround."}, {"issue_title": "docs: Terraform style guide", "summary": "Discussion on the potential security vulnerability in the library's encryption method and a request for a fix or workaround."}, {"issue_title": "Interpolate environment variables when configuring dev_overrides", "summary": "All committers have signed the CLA for this pull request. Thanks for the submission."}, {"issue_title": "Terraform test expect_failures does not work as expected when type is invalid", "summary": "The 'expect_failures' block in Terraform is intended to allow configuration authors to validate custom conditions they have written within their configuration. However, it does not validate types. The issue has been re-labeled as an enhancement request. The underlying functionality for validating types is covered by the 'terraform validate' command and not something that authors should be validating manually within the tests. The maintainer suggests that this issue is not a bug but a feature request."}, {"issue_title": "Optional chaining operation", "summary": "A new feature has been requested, and the maintainer is asking for users to upvote the issue by using the \ud83d\udc4d reaction. Additional use case descriptions are also welcome."}, {"issue_title": "Planned value does not match config value for number", "summary": "Issue related to truncation of certain large numbers (e.g. 2^63) in Terraform's plan rendering to both CLI and JSON, specifically with the number 9223372036854775808. The problem is due to go-cty or msgpack and has been fixed in cty v1.14.4, but a similar change needs to be made in terraform-plugin-go for consistent behavior in both directions of data flow."}, {"issue_title": "Error when loading plugin schemas outputs diagnostics suffixed with double period", "summary": "The issue is related to the inconsistency in the error handling conventions in the codebase. The `error.Error()` results should not end with a period, while human-oriented diagnostics are written as full sentences with periods. The symptom of double periods in the error messages is due to the `error` returned by `loadSchemas()` being generated from a call to `diags.Err()`, which already includes a period. This problem arises when an error is generated from a `Diagnostics` and then its string representation is inserted into another diagnostic message. The proposed solution is to change the `loadSchemas` function to return diagnostics instead of an error and then return those diagnostics directly."}, {"issue_title": "Can not run `terraform console` when I am in the projects directory", "summary": "Issue discussion about introducing a new 'terraform console' mode that ignores the configuration completely and only allows evaluating functions with constant values. The proposed solution is to show an error message for invalid configurations, followed by a warning message that the console cannot evaluate anything that refers to objects in the configuration. The implementation of this feature requires further design work and refactoring."}, {"issue_title": "Proposal for minimizing/removing secrets from the Terraform state file", "summary": "Discussion on managing sensitive information during plan and apply phase of a resource in the provider. The issue highlights the need for a language-level definition for 'secret' and a new concept for handling such data to prevent storage in the state. The idea of treating 'apply' as an action requiring elevated privileges is also proposed as a potential part of a larger solution for secrets management."}, {"issue_title": "Fix leakage of sensitive variables on HCL syntax error in variable declaration", "summary": "Commenters have mentioned that all committers have signed the CLA and thanked the submitter for their contribution. The issue will be brought to triage next week."}]