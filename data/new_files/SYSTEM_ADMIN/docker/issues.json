[{"title":"[24.0 backport] plugin: fix mounting \/etc\/hosts when running in UserNS","body":"Backport #47558 to 24.0\n\n---\n\n<!--\r\nPlease make sure you've read and understood our contributing guidelines;\r\nhttps:\/\/github.com\/moby\/moby\/blob\/master\/CONTRIBUTING.md\r\n\r\n** Make sure all your commits include a signature generated with `git commit -s` **\r\n\r\nFor additional information on our contributing process, read our contributing\r\nguide https:\/\/docs.docker.com\/opensource\/code\/\r\n\r\nIf this is a bug fix, make sure your description includes \"fixes #xxxx\", or\r\n\"closes #xxxx\"\r\n\r\nPlease provide the following information:\r\n-->\r\n\r\n**- What I did**\r\nFix `error mounting \"\/etc\/hosts\" to rootfs at \"\/etc\/hosts\": mount \/etc\/hosts:\/etc\/hosts (via \/proc\/self\/fd\/6), flags: 0x5021: operation not permitted`.\r\n\r\nThis error was introduced in 7d08d84b039d2f4661a2242e765a141e65943920 (`dockerd-rootless.sh: set rootlesskit --state-dir=DIR`) that changed the filesystem of the state dir from \/tmp to \/run (in a typical setup).\r\n\r\nFixes #47248\r\n\r\n**- How I did it**\r\n\r\nApplied `mountsopts.FixUpOCI`\r\n\r\n**- How to verify it**\r\n```\r\ndocker plugin install ghcr.io\/ibm\/docker-logdna:1.0.1\r\n```\r\n\r\n**- Description for the changelog**\r\n<!--\r\nWrite a short (one line) summary that describes the changes in this\r\npull request for inclusion in the changelog.\r\nIt must be placed inside the below triple backticks section:\r\n-->\r\n```markdown changelog\r\nplugin: fix mounting \/etc\/hosts when running in UserNS\r\n```\r\n\r\n**- A picture of a cute animal (not mandatory but encouraged)**\r\n\r\n\ud83d\udc27 \n","comments":[],"labels":["area\/plugins","area\/rootless","kind\/bugfix"],"number":47625},{"title":"[23.0 backport] plugin: fix mounting \/etc\/hosts when running in UserNS","body":"Backport #47558 to 23.0\n\n---\n\n<!--\r\nPlease make sure you've read and understood our contributing guidelines;\r\nhttps:\/\/github.com\/moby\/moby\/blob\/master\/CONTRIBUTING.md\r\n\r\n** Make sure all your commits include a signature generated with `git commit -s` **\r\n\r\nFor additional information on our contributing process, read our contributing\r\nguide https:\/\/docs.docker.com\/opensource\/code\/\r\n\r\nIf this is a bug fix, make sure your description includes \"fixes #xxxx\", or\r\n\"closes #xxxx\"\r\n\r\nPlease provide the following information:\r\n-->\r\n\r\n**- What I did**\r\nFix `error mounting \"\/etc\/hosts\" to rootfs at \"\/etc\/hosts\": mount \/etc\/hosts:\/etc\/hosts (via \/proc\/self\/fd\/6), flags: 0x5021: operation not permitted`.\r\n\r\nThis error was introduced in 7d08d84b039d2f4661a2242e765a141e65943920 (`dockerd-rootless.sh: set rootlesskit --state-dir=DIR`) that changed the filesystem of the state dir from \/tmp to \/run (in a typical setup).\r\n\r\nFixes #47248\r\n\r\n**- How I did it**\r\n\r\nApplied `mountsopts.FixUpOCI`\r\n\r\n**- How to verify it**\r\n```\r\ndocker plugin install ghcr.io\/ibm\/docker-logdna:1.0.1\r\n```\r\n\r\n**- Description for the changelog**\r\n<!--\r\nWrite a short (one line) summary that describes the changes in this\r\npull request for inclusion in the changelog.\r\nIt must be placed inside the below triple backticks section:\r\n-->\r\n```markdown changelog\r\nplugin: fix mounting \/etc\/hosts when running in UserNS\r\n```\r\n\r\n**- A picture of a cute animal (not mandatory but encouraged)**\r\n\r\n\ud83d\udc27 \n","comments":[],"labels":["area\/plugins","area\/rootless","kind\/bugfix"],"number":47624},{"title":"Disabling the default bridge changes Docker's behavior regarding DOCKER-USER chain","body":"### Description\r\n\r\nWhat I was trying to do is use \"netfilter-persistent\" together with Docker. The logic was that the rules governed by \"netfilter-persistent\" only touched INPUT and OUTPUT chains, and added the DOCKER-USER chain, placed it at the top of the FORWARD chain, and manipulated the rules in the DOCKER-USER chain. Docker would then continue from here, adding its own rules _after_ the jump to DOCKER-USER.\r\n\r\nThe overall intent was to be able to control the forwarded traffic from Docker out to the Internet at large.\r\n\r\nWhat I discovered was that adding `\"bridge\": \"none\"` to `\/etc\/docker\/daemon.json` changes Docker's behavior in a rather unpredictable fashion.\r\n\r\nBy default, and when the setting is not there then Docker creates `docker0` adapter, creates DOCKER-USER, adds jump to it to the top of the FORWARD chain before adding the other chains, isolation stages and all the other stuff. So, all is good. I can manually manipulate DOCKER-USER to enforce more stricter control.\r\n\r\nWhen I add the setting, Docker's behavior changes. It no longer creates `docker0` (which is expected) but it also does not create DOCKER-USER, and doesn't place a jump to it to the top of the FORWARD chain. Instead, it only creates the other chains and the isolation stages. This is rather perplexing, at least to me, and looks like a bug.\r\n\r\nIf I use `iptables` commands to add DOCKER-USER manually, add it to the top of FORWARD chain, and add rules to this chain, and put it to start before Docker (by manipulating \"docker.service\"'s systemd file) then when Docker starts it takes its own rules and inserts them _before_ the jump to DOCKER-USER. This is also rather peculiar.\r\n\r\nNote that I have a workaround for this, so all I want is for someone who knows Docker's internal behavior better than me take a look and explain why Docker omits the DOCKER-USER chain when the default bridge is set to \"none\".\r\n\r\n### Reproduce\r\n\r\n1. Install \"moby-engine\"\r\n2. Use `docker network create --driver=bridge my-bridge` to create a user-defined bridge network\r\n3. Use `systemctl stop docker` to shutdown Docker\r\n4. Use `iptables -F`and `iptables -X` on \"filter\" and \"nat\" tables to ensure everything is clean\r\n5. Use `systemctl start docker` to restart Docker\r\n6. With `iptables -S` ensure that jump to DOCKER-USER chain is at the top of FORWARD chain\r\n7. Use `systemctl stop docker` to shutdown Docker\r\n8. Add `\"bridge\": \"none\"` to \/etc\/docker\/daemon.json\r\n9. Use `iptables -F`and `iptables -X` on \"filter\" and \"nat\" tables to clean all rules again\r\n10. Use `systemctl start docker` to restart Docker\r\n11. With `iptables -S` observe the jump to DOCKER-USER chain has not been added\r\n\r\n### Expected behavior\r\n\r\nExpected behavior is that `\"bridge\": \"none\"` does not affect DOCKER-USER chain's addition or placement in the rules. Docker should behave consistently in this regard, and it should always ensure that jump to DOCKER-USER occurs before any other rules.\r\n\r\n### docker version\r\n\r\n```bash\r\nClient:\r\n Version:           24.0.9-1\r\n API version:       1.43\r\n Go version:        go1.20.13\r\n Git commit:        293681613032e6d1a39cc88115847d3984195c24\r\n Built:             Wed Jan 31 20:53:14 UTC 2024\r\n OS\/Arch:           linux\/amd64\r\n Context:           default\r\n\r\nServer:\r\n Engine:\r\n  Version:          24.0.9-1\r\n  API version:      1.43 (minimum version 1.12)\r\n  Go version:       go1.20.13\r\n  Git commit:       fca702de7f71362c8d103073c7e4a1d0a467fadd\r\n  Built:            Thu Feb  1 00:12:23 2024\r\n  OS\/Arch:          linux\/amd64\r\n  Experimental:     false\r\n containerd:\r\n  Version:          1.6.30-1\r\n  GitCommit:        d68034c2fe20ce0fc29692f87afced1edf7d77da\r\n runc:\r\n  Version:          1.1.12-1\r\n  GitCommit:        51d5e94601ceffbbd85688df1c928ecccbfa4685\r\n docker-init:\r\n  Version:          0.19.0\r\n  GitCommit:        de40ad0\r\n```\r\n\r\n\r\n### docker info\r\n\r\n```bash\r\nClient:\r\n Version:    24.0.9-1\r\n Context:    default\r\n Debug Mode: false\r\n Plugins:\r\n  buildx: Docker Buildx (Docker Inc.)\r\n    Version:  0.13.1-1\r\n    Path:     \/usr\/libexec\/docker\/cli-plugins\/docker-buildx\r\n\r\nServer:\r\n Containers: 1\r\n  Running: 0\r\n  Paused: 0\r\n  Stopped: 1\r\n Images: 3\r\n Server Version: 24.0.9-1\r\n Storage Driver: overlay2\r\n  Backing Filesystem: extfs\r\n  Supports d_type: true\r\n  Using metacopy: false\r\n  Native Overlay Diff: true\r\n  userxattr: false\r\n Logging Driver: journald\r\n Cgroup Driver: cgroupfs\r\n Cgroup Version: 1\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\r\n Swarm: inactive\r\n Runtimes: io.containerd.runc.v2 runc\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: d68034c2fe20ce0fc29692f87afced1edf7d77da\r\n runc version: 51d5e94601ceffbbd85688df1c928ecccbfa4685\r\n init version: de40ad0\r\n Security Options:\r\n  seccomp\r\n   Profile: builtin\r\n Kernel Version: 5.15.146.1-microsoft-standard-WSL2\r\n Operating System: Ubuntu 22.04.4 LTS\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 12\r\n Total Memory: 15.58GiB\r\n Name: DESKTOP-5M6TJ8E\r\n ID: 9f4523df-2d8d-46b7-a5a1-069d47c921f4\r\n Docker Root Dir: \/var\/lib\/docker\r\n Debug Mode: false\r\n Experimental: false\r\n Insecure Registries:\r\n  127.0.0.0\/8\r\n Live Restore Enabled: false\r\n\r\nWARNING: No blkio throttle.read_bps_device support\r\nWARNING: No blkio throttle.write_bps_device support\r\nWARNING: No blkio throttle.read_iops_device support\r\nWARNING: No blkio throttle.write_iops_device support\r\n```\r\n\r\n\r\n### Additional Info\r\n\r\nThis test was executed in Windows 11's WSL, using Ubuntu 22.04 distro.","comments":[],"labels":["status\/0-triage","kind\/bug"],"number":47622},{"title":"Restore the SetKey prestart hook.","body":"**- What I did**\r\n\r\n- Fix https:\/\/github.com\/moby\/moby\/issues\/47619\r\n- Partially reverted https:\/\/github.com\/moby\/moby\/commit\/0046b16d87105d334b72f5e98efd28bbd94d9659 - daemon: set libnetwork sandbox key w\/o OCI hook\r\n- Partially reverted https:\/\/github.com\/moby\/moby\/pull\/47521\/commits\/ef5295cda40d3d2babb5ce85ffcf67371c3ecb47 - Don't configure IPv6 addr\/gw when IPv6 disabled.\r\n\r\nRunning SetKey to store the OCI Sandbox key after task creation, rather than from the OCI prestart hook, meant it happened after sysctl settings were applied by the runtime - which was the intention, we wanted to complete Sandbox configuration after IPv6 had been disabled by a sysctl if that was going to happen.\r\n\r\nBut, it meant '--sysctl' options for a specfic network interface caused container task creation to fail, because the interface is only moved into the network namespace during SetKey.\r\n\r\n**- How I did it**\r\n\r\nRestored the SetKey prestart hook.\r\n\r\nRegenerate config files that depend on the container's support for IPv6 after the task has been created.\r\n\r\nThe changes in the second partially-reverted commit, to check IPv6 support before assigning an interface address\/gateway would no longer work, but are no longer necessary.  IPv6 addresses applied during the SetKey prestart hook will be removed when the sysctl disabling IPv6 in the container is applied.\r\n\r\n**- How to verify it**\r\n\r\nAdded a regression test, to make sure it's possible to set an interface-specfic sysctl.\r\n\r\nThe tests for IPv6 addresses in '\/etc\/hosts' when IPv6 is disabled still work.\r\n\r\n**- Description for the changelog**\r\n```markdown changelog\r\nFix a regression that meant network interface specific `--sysctl` options prevented container startup.\r\n```","comments":[],"labels":["area\/networking","kind\/bugfix"],"number":47621},{"title":"failed to register layer: operation not permitted","body":"### Description\r\n\r\nSome Docker images throw the error \"failed to register layer: operation not permitted\" when the user tries to pull them in Docker running inside a systemd-nspawn container.\r\n\r\nThe described behavior is tested on Arch nspawn (instructions in the \"Reproduce\" section) and on NixOS Containers (tested on 23.11 and unstable).\r\n\r\nThis issue probably affects all bitnami images, but it's only tested on the following ones:\r\n- bitnami\/minideb:bookworm\r\n- bitnami\/mariadb:11.2\r\n- bitnami\/joomla:5\r\n- bitnami\/drupal:10\r\n\r\nAnd it also happens on this image:\r\n- linuxserver\/nextcloud:27.1.1 (issue: https:\/\/github.com\/linuxserver\/docker-nextcloud\/issues\/371)\r\n\r\nDocker works fine with other images like:\r\n- hello-world\r\n- debian:bookworm\r\n- mariadb:11.2\r\n- serjs\/go-socks5-proxy\r\n- niklasf\/fishnet:2\r\n- portainer\/portainer-ce\r\n\r\n### Reproduce\r\n\r\n1. Create a new systemd-nspawn container. I tested it on Arch following their instructions: https:\/\/wiki.archlinux.org\/title\/Systemd-nspawn\r\n\t```bash\r\n\t# Prepare the environment\r\n\tpacman -S arch-install-scripts\r\n\tmkdir \/opt\/arch-nspawn\r\n\tpacstrap -K -c \/opt\/arch-nspawn base docker\r\n\t\r\n\t# Enter the environment\r\n\tsystemd-nspawn -D \/opt\/arch-nspawn\r\n\t\r\n\t# Reset root password and exit\r\n\tpasswd root\r\n\tlogout\r\n\t```\r\n2. Create a new bridge network or use an existing one on host. I reused my virbr0, from libvirt.\r\n3. Start the container with the following command to disable seccomp and enable private networking. Docker may not run with seccomp and\/or host networking.\r\n`SYSTEMD_SECCOMP=0 systemd-nspawn -b --network-bridge=your-bridge -D \/opt\/arch-nspawn`\r\n4. Login with root and the previous passwod\r\n5. Start the Docker services with `systemctl start docker`\r\n6. Set an IP for the host0 interface, a gateway and a nameserver in `\/etc\/resolv.conf`\r\n\t```bash\r\n\tip a add 192.168.122.2\/24 dev host0\r\n\tip l set dev host0 up\r\n\tip r add default via 192.168.122.1\r\n\techo \"nameserver 9.9.9.9\" >\/etc\/resolv.conf\r\n\t```\r\n7. Try to pull, or run any of the mentioned images\r\n\t```bash\r\n\tdocker run --rm -it hello-world # Should succeed\r\n\tdocker pull bitnami\/mariadb:11.2 # Should throw the described error\r\n\t```\r\n\r\n### Expected behavior\r\n\r\nDocker should be able to pull any image\r\n\r\n### docker version\r\n\r\n```bash\r\nClient:\r\n Version:           25.0.4\r\n API version:       1.44\r\n Go version:        go1.22.1\r\n Git commit:        1a576c50a9\r\n Built:             Wed Mar 13 15:44:41 2024\r\n OS\/Arch:           linux\/amd64\r\n Context:           default\r\n\r\nServer:\r\n Engine:\r\n  Version:          25.0.4\r\n  API version:      1.44 (minimum version 1.24)\r\n  Go version:       go1.22.1\r\n  Git commit:       061aa95809\r\n  Built:            Wed Mar 13 15:44:41 2024\r\n  OS\/Arch:          linux\/amd64\r\n  Experimental:     false\r\n containerd:\r\n  Version:          v1.7.14\r\n  GitCommit:        dcf2847247e18caba8dce86522029642f60fe96b.m\r\n runc:\r\n  Version:          1.1.12\r\n  GitCommit:        \r\n docker-init:\r\n  Version:          0.19.0\r\n  GitCommit:        de40ad0\r\n```\r\n\r\n\r\n### docker info\r\n\r\n```bash\r\nClient:\r\n Version:    25.0.4\r\n Context:    default\r\n Debug Mode: false\r\n\r\nServer:\r\n Containers: 0\r\n  Running: 0\r\n  Paused: 0\r\n  Stopped: 0\r\n Images: 2\r\n Server Version: 25.0.4\r\n Storage Driver: overlay2\r\n  Backing Filesystem: btrfs\r\n  Supports d_type: true\r\n  Using metacopy: true\r\n  Native Overlay Diff: false\r\n  userxattr: false\r\n Logging Driver: json-file\r\n Cgroup Driver: systemd\r\n Cgroup Version: 2\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local splunk syslog\r\n Swarm: inactive\r\n Runtimes: io.containerd.runc.v2 runc\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: dcf2847247e18caba8dce86522029642f60fe96b.m\r\n runc version: \r\n init version: de40ad0\r\n Security Options:\r\n  seccomp\r\n   Profile: builtin\r\n  cgroupns\r\n Kernel Version: 6.7.9-zen1-1-zen\r\n Operating System: Arch Linux\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 12\r\n Total Memory: 31.25GiB\r\n Name: arch-nspawn\r\n ID: c782b9f8-d825-479c-b58e-ecc08d6758cc\r\n Docker Root Dir: \/var\/lib\/docker\r\n Debug Mode: false\r\n Experimental: false\r\n Insecure Registries:\r\n  127.0.0.0\/8\r\n Live Restore Enabled: false\r\n```\r\n\r\n\r\n### Additional Info\r\n\r\n_No response_","comments":["Found the solution. It looks like it required a user namespace inside systemd-nspawn. This is done in the CLI by adding the `-U` flag (resulting command: `SYSTEMD_SECCOMP=0 systemd-nspawn -b --network-bridge=your-bridge -D \/opt\/arch-nspawn -U`).\r\n\r\nIn the case of NixOS Containers, adding `containers.<name>.extraFlags = [ \"-U\" ];` to the config should do the trick.","Enabling user namespace triggers another error upon starting the Docker Containers, that seems common in unprivileged environments:\r\n\r\n```\r\ndocker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"sysfs\" to rootfs at \"\/sys\": mount sysfs:\/sys (via \/proc\/self\/fd\/7), flags: 0xf: operation not permitted: unknown.\r\n```\r\n\r\nI am working on finding solution to that as well.\r\n\r\nEDIT: Probably related to https:\/\/github.com\/systemd\/systemd\/issues\/27994\r\n\r\nBased on [this comment](https:\/\/github.com\/systemd\/systemd\/issues\/27994#issuecomment-1704005670), a workaround is to run `SYSTEMD_SECCOMP=0 systemd-nspawn -b --network-bridge=your-bridge -D \/opt\/arch-nspawn -U --bind=\/proc:\/run\/proc --bind=\/sys:\/run\/sys`"],"labels":["status\/0-triage","kind\/bug"],"number":47620},{"title":"simple run command with --sysctl for network interface fails after upgrade","body":"### Description\r\n\r\nafter upgrade my Debian from bullseye to bookworm today,  my container failed to work.\r\n\r\ni traced it down to this simple command:\r\n\r\n> docker run --rm --sysctl net.ipv4.conf.eth0.forwarding=1 alpine \r\ndocker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: open \/proc\/sys\/net\/ipv4\/conf\/eth0\/forwarding: no such file or directory: unknown.\r\n\r\nbut when the container is started, the _eth0_ conf is right there. maybe network interface renaming timing changed ?\r\nand if i change the interface name to _lo_ or _all,_ the above command works fine.\r\n\r\nunfortunately, i have to rely on the interface name: if i use _all_ to set both _forwarding=1_ and _accept_ra=2_, the container seems not respected _accept_ra_ setting. in other words, if i use following commands, the containers won't get its IPv6 address form RA. (_XXX_ is my custom IPv6 enabled MacVLAN network)\r\n\r\n> docker run -it --rm --network XXX --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.conf.all.accept_ra=2 ubuntu bash\r\ndocker run -it --rm --network XXX --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.conf.all.accept_ra=2 alpine sh\r\n\r\n### Reproduce\r\n\r\nfor _--sysctl_ failure:\r\n1. _docker run --rm --sysctl net.ipv4.conf.eth0.forwarding=1 alpine sh_ will fail\r\n\r\nfor no IPv6 address from RA (this probably not related to docker, just i can't use _all_ for interface name)\r\n1. create a IPv6 enabled network XXX\r\n2. _docker run -it --rm --network XXX --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.conf.all.accept_ra=2 alpine sh_ will not get IPv6 address from RA\r\n\r\n### Expected behavior\r\n\r\n_No response_\r\n\r\n### docker version\r\n\r\n```bash\r\nClient: Docker Engine - Community\r\n Version:           26.0.0\r\n API version:       1.45\r\n Go version:        go1.21.8\r\n Git commit:        2ae903e\r\n Built:             Wed Mar 20 15:18:02 2024\r\n OS\/Arch:           linux\/arm64\r\n Context:           default\r\n\r\nServer: Docker Engine - Community\r\n Engine:\r\n  Version:          26.0.0\r\n  API version:      1.45 (minimum version 1.24)\r\n  Go version:       go1.21.8\r\n  Git commit:       8b79278\r\n  Built:            Wed Mar 20 15:18:02 2024\r\n  OS\/Arch:          linux\/arm64\r\n  Experimental:     false\r\n containerd:\r\n  Version:          1.6.28\r\n  GitCommit:        ae07eda36dd25f8a1b98dfbf587313b99c0190bb\r\n runc:\r\n  Version:          1.1.12\r\n  GitCommit:        v1.1.12-0-g51d5e94\r\n docker-init:\r\n  Version:          0.19.0\r\n  GitCommit:        de40ad0\r\n```\r\n\r\n\r\n### docker info\r\n\r\n```bash\r\nClient: Docker Engine - Community\r\n Version:    26.0.0\r\n Context:    default\r\n Debug Mode: false\r\n Plugins:\r\n  buildx: Docker Buildx (Docker Inc.)\r\n    Version:  v0.13.1\r\n    Path:     \/usr\/libexec\/docker\/cli-plugins\/docker-buildx\r\n  compose: Docker Compose (Docker Inc.)\r\n    Version:  v2.25.0\r\n    Path:     \/usr\/libexec\/docker\/cli-plugins\/docker-compose\r\n\r\nServer:\r\n Containers: 5\r\n  Running: 5\r\n  Paused: 0\r\n  Stopped: 0\r\n Images: 16\r\n Server Version: 26.0.0\r\n Storage Driver: overlay2\r\n  Backing Filesystem: extfs\r\n  Supports d_type: true\r\n  Using metacopy: false\r\n  Native Overlay Diff: true\r\n  userxattr: false\r\n Logging Driver: json-file\r\n Cgroup Driver: systemd\r\n Cgroup Version: 2\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local splunk syslog\r\n Swarm: inactive\r\n Runtimes: io.containerd.runc.v2 runc\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: ae07eda36dd25f8a1b98dfbf587313b99c0190bb\r\n runc version: v1.1.12-0-g51d5e94\r\n init version: de40ad0\r\n Security Options:\r\n  seccomp\r\n   Profile: builtin\r\n  cgroupns\r\n Kernel Version: 6.1.21-v8+\r\n Operating System: Debian GNU\/Linux 12 (bookworm)\r\n OSType: linux\r\n Architecture: aarch64\r\n CPUs: 4\r\n Total Memory: 3.705GiB\r\n Name: rpi4\r\n ID: 60af6eb1-813d-4d13-929e-23993c2a56dc\r\n Docker Root Dir: \/var\/lib\/docker\r\n Debug Mode: false\r\n Experimental: false\r\n Insecure Registries:\r\n  127.0.0.0\/8\r\n Live Restore Enabled: false\r\n\r\nWARNING: No memory limit support\r\nWARNING: No swap limit support\r\n```\r\n\r\n\r\n### Additional Info\r\n\r\n_No response_","comments":["i pinned docker-ce to **25.0.5**, my container works as before.\r\n\r\nso i guess it's caused by the recent **26** release.","Hi @jwfang - thank you for narrowing down the issue and raising the clear report.\r\n\r\nIt's fallout from https:\/\/github.com\/moby\/moby\/pull\/47062 - in https:\/\/github.com\/moby\/moby\/pull\/47062\/commits\/0046b16d87105d334b72f5e98efd28bbd94d9659 we moved some of the network configuration from a pre-start hook in the runtime to after the container task has been created.\r\n\r\nAs you suggest, that means the network interface renaming (moving one end of a veth device into the container namespace in `Sandbox.populateNetworkResources`, `sb.osSbox.AddInterface`) happens after sysctls are applied by the runtime.\r\n\r\ncc @corhere - I think we'll need to go back to using the pre-start hook."],"labels":["kind\/bug","area\/networking","status\/confirmed","version\/26.0"],"number":47619},{"title":"Windows: Process running within Docker Container throws OOM error but container doesn't report the error","body":"### Description\r\n\r\nI noticed an issue where a process running within a docker container on a Windows VM reported an Out of Memory error according to the logs emitted by docker, however the container itself reported as not exiting due to an OOM error (OOMKilled flag was false when running `docker inspect <containerid>`) and the exit code reported from the container never matched the expected exit code for an OOM error (Exit code 137). When trying to see if linux had the same behavior when it comes to the process running inside of the container reporting an OOM error, the docker container reported that it was killed due to OOM (OOMKilled flag was true when running `docker inspect <containerid>` and container reported exit code of 137). I always saw the same behavior in regards to the container reporting that itself wasn't killed due to OOM while the process was reporting OOM errors.\r\n\r\n### Reproduce\r\n\r\nWindows Reproduction Steps:\r\n1. Created simple DockerFile \r\n\r\n```\r\nFROM mcr.microsoft.com\/windows\/servercore:ltsc2019\r\n\r\nCOPY test.ps1 .\r\n\r\nENTRYPOINT [\"powershell.exe\"]\r\n\r\nCMD [\".\\\\test.ps1\"]\r\n```\r\n\r\ntest.ps1 contents\r\n```\r\nfunction Consume-Memory {\r\n    $mem = @()\r\n\r\n    while ($true) {\r\n        # Allocate 10 MB of memory\r\n        $data = New-Object byte[] (100*1024*1024)\r\n        if (-not $data) {\r\n            throw \"Failed to allocate memory. Exiting...\"\r\n        }\r\n        $mem += $data\r\n        Write-Host \"Allocated chunks: $($mem.Count)\"\r\n        Start-Sleep -Seconds 10  # Adjust sleep duration as necessary\r\n    }\r\n}\r\n\r\nfunction Main {\r\n    Consume-Memory\r\n}\r\n\r\nMain\r\n```\r\n\r\n\r\n2. Built an image using the above file `docker build -t <yourtaghere> .`\r\n3. Ran a docker container using `docker run -m 256 <tag here> `\r\n4. Monitored the container memory usage using `docker stats` \r\n5. When container would eventually exit, I inspected the container using `docker inspect <containeridhere>`\r\n6. Verified the container did not set the OOMKilled flag as True when the associated docker logs for the container through the path given in the above `docker inspect` command and process running within the container reported stopping due to an out of memory error.\r\n\r\n\r\nLinux Reproduction Steps:\r\n\r\nThese steps are relatively short and simpler than the windows steps. \r\n\r\n1. Created simple Dockerfile\r\n```\r\nFROM public.ecr.aws\/amazonlinux\/amazonlinux:latest\r\n\r\nCMD [\"python3\", \"-c\", \"foo=' '*1024*1024*512; import time; time.sleep(10)\"]\r\n```\r\n2. Built the image and initiated a container from the image with a limit of 512mb for the container. I used `docker build -t <yourtaghere>` and `docker run -m 512 <tag here>`\r\n4. The container would exit almost immediately, emitting exit code 137 which represents an OOM error and the process alongside reported an OutOfMemoryException.\r\n\r\n### Expected behavior\r\n\r\nDocker container running on Windows when encountered with an OutOfMemory error from the process running within the container should report itself as being killed due to OOM error which is the behavior on linux.\r\n\r\n### docker version\r\n\r\n```bash\r\nWindows Client:\r\nClient:\r\n Version:           22.06.0-beta.0-189-g4e05b45a90.m\r\n API version:       1.41 (downgraded from 1.42)\r\n Go version:        go1.19.2\r\n Git commit:        4e05b45a90\r\n Built:             Sat Oct 29 21:48:57 2022\r\n OS\/Arch:           windows\/amd64\r\n Context:           default\r\n\r\nServer:\r\n Engine:\r\n  Version:          20.10.23\r\n  API version:      1.41 (minimum version 1.24)\r\n  Go version:       go1.18.10\r\n  Git commit:       6051f14291\r\n  Built:            Wed Oct 25 18:58:05 2023\r\n  OS\/Arch:          windows\/amd64\r\n  Experimental:     false\r\n\r\nLinux Version:\r\nClient:\r\n Version:           20.10.25\r\n API version:       1.41\r\n Go version:        go1.19.9\r\n Git commit:        b82b9f3\r\n Built:             Wed Jul 12 19:37:13 2023\r\n OS\/Arch:           linux\/amd64\r\n Context:           default\r\n Experimental:      true\r\n\r\nServer:\r\n Engine:\r\n  Version:          20.10.25\r\n  API version:      1.41 (minimum version 1.12)\r\n  Go version:       go1.19.9\r\n  Git commit:       5df983c\r\n  Built:            Wed Jul  5 00:00:00 2023\r\n  OS\/Arch:          linux\/amd64\r\n  Experimental:     false\r\n containerd:\r\n  Version:          1.7.11\r\n  GitCommit:        64b8a811b07ba6288238eefc14d898ee0b5b99ba\r\n runc:\r\n  Version:          1.1.11\r\n  GitCommit:        4bccb38cc9cf198d52bebf2b3a90cd14e7af8c06\r\n docker-init:\r\n  Version:          0.19.0\r\n  GitCommit:        de40ad0\r\n```\r\n\r\n\r\n### docker info\r\n\r\n```bash\r\nLinux Info:\r\nClient:\r\n Context:    default\r\n Debug Mode: false\r\n Plugins:\r\n  buildx: Docker Buildx (Docker Inc., 0.0.0+unknown)\r\n\r\nServer:\r\n Containers: 9\r\n  Running: 1\r\n  Paused: 0\r\n  Stopped: 8\r\n Images: 11\r\n Server Version: 20.10.25\r\n Storage Driver: overlay2\r\n  Backing Filesystem: xfs\r\n  Supports d_type: true\r\n  Native Overlay Diff: true\r\n  userxattr: false\r\n Logging Driver: json-file\r\n Cgroup Driver: systemd\r\n Cgroup Version: 2\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\r\n Swarm: inactive\r\n Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: 64b8a811b07ba6288238eefc14d898ee0b5b99ba\r\n runc version: 4bccb38cc9cf198d52bebf2b3a90cd14e7af8c06\r\n init version: de40ad0\r\n Security Options:\r\n  seccomp\r\n   Profile: default\r\n  cgroupns\r\n Kernel Version: 6.1.79-99.164.amzn2023.x86_64\r\n Operating System: Amazon Linux 2023.3.20240312\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 4\r\n Total Memory: 7.493GiB\r\n Name: ip-172-31-40-192.us-west-2.compute.internal\r\n ID: 4YDE:PK2F:GCNR:2KXX:4QIW:GJZP:AHPB:7P4V:5KKU:GPJO:IC4Y:UFT4\r\n Docker Root Dir: \/var\/lib\/docker\r\n Debug Mode: false\r\n Registry: https:\/\/index.docker.io\/v1\/\r\n Labels:\r\n Experimental: false\r\n Insecure Registries:\r\n  127.0.0.0\/8\r\n Live Restore Enabled: false\r\n\r\nWindows Info:\r\nClient:\r\n Context:    default\r\n Debug Mode: false\r\n\r\nServer:\r\n Containers: 23\r\n  Running: 0\r\n  Paused: 0\r\n  Stopped: 23\r\n Images: 28\r\n Server Version: 20.10.23\r\n Storage Driver: windowsfilter\r\n  Windows:\r\n Logging Driver: json-file\r\n Plugins:\r\n  Volume: local\r\n  Network: ics internal l2bridge l2tunnel nat null overlay private transparent\r\n  Log: awslogs etwlogs fluentd gcplogs gelf json-file local logentries splunk syslog\r\n Swarm: inactive\r\n Default Isolation: process\r\n Kernel Version: 10.0 17763 (17763.1.amd64fre.rs5_release.180914-1434)\r\n Operating System: Windows Server 2019 Datacenter Version 1809 (OS Build 17763.5458)\r\n OSType: windows\r\n Architecture: x86_64\r\n CPUs: 4\r\n Total Memory: 7.707GiB\r\n Name: EC2AMAZ-8CRB3OK\r\n ID: JZVV:HI7E:KKII:ULNM:VNL7:KL22:QPAG:UKU5:Z4KF:IDJC:3IDC:HRU2\r\n Docker Root Dir: C:\\ProgramData\\docker\r\n Debug Mode: false\r\n Registry: https:\/\/index.docker.io\/v1\/\r\n Experimental: false\r\n Insecure Registries:\r\n  127.0.0.0\/8\r\n Live Restore Enabled: false\r\n```\r\n\r\n\r\n### Additional Info\r\n\r\nProcess logs from Windows:\r\n```\r\n{\"log\":\"Allocated chunks: 104857600\\n\",\"stream\":\"stdout\",\"time\":\"2024-03-22T15:51:37.3341515Z\"}\r\n{\"log\":\"Array dimensions exceeded supported range.\\r\\n\",\"stream\":\"stderr\",\"time\":\"2024-03-22T15:52:04.7072964Z\"}\r\n{\"log\":\"At C:\\\\test.ps1:11 char:9\\r\\n\",\"stream\":\"stderr\",\"time\":\"2024-03-22T15:52:04.7072964Z\"}\r\n{\"log\":\"+         $mem += $data\\r\\n\",\"stream\":\"stderr\",\"time\":\"2024-03-22T15:52:04.7072964Z\"}\r\n{\"log\":\"+         ~~~~~~~~~~~~~\\r\\n\",\"stream\":\"stderr\",\"time\":\"2024-03-22T15:52:04.7072964Z\"}\r\n{\"log\":\"    + CategoryInfo          : OperationStopped: (:) [], OutOfMemoryException\\r\\n\",\"stream\":\"stderr\",\"time\":\"2024-03-22T15:52:04.7085132Z\"}\r\n{\"log\":\"    + FullyQualifiedErrorId : System.OutOfMemoryException\\r\\n\",\"stream\":\"stderr\",\"time\":\"2024-03-22T15:52:04.7085132Z\"}\r\n{\"log\":\" \\r\\n\",\"stream\":\"stderr\",\"time\":\"2024-03-22T15:52:04.7085132Z\"}\r\n```\r\n`docker inspect` logs:\r\ndocker inspect exciting_rubin\r\n[\r\n    {\r\n        \"Id\": \"6fe653aeccb41201d50629356f057df650195f63bb16d0070fc31eefeb93a29b\",\r\n        \"Created\": \"2024-03-22T15:50:54.4760729Z\",\r\n        \"Path\": \"powershell.exe\",\r\n        \"Args\": [\r\n            \".\\\\test.ps1\"\r\n        ],\r\n        \"State\": {\r\n            \"Status\": \"exited\",\r\n            \"Running\": false,\r\n            \"Paused\": false,\r\n            \"Restarting\": false,\r\n            \"OOMKilled\": false, `should be true`\r\n            \"Dead\": false,\r\n            \"Pid\": 0,\r\n            \"ExitCode\": 3221225473,\r\n            \"Error\": \"\",\r\n            \"StartedAt\": \"2024-03-22T15:50:56.2195812Z\",\r\n            \"FinishedAt\": \"2024-03-22T16:03:36.7360532Z\"\r\n        },\r\n","comments":["If there is any other information you need regarding this issue, please let me know and I will be happy to provide any other context\/information needed.","This is by design; the Windows Containers code has no way to determine if a container died to an out of memory condition, because of the current underlying implementation:\r\n\r\nhttps:\/\/github.com\/moby\/moby\/blob\/83ae9927fb1dd45b9876479c1783eb970256c04e\/daemon\/monitor.go#L158-L162\r\n\r\nThe underlying implementation is in the shim, the actual \"runtime\" component that manages the lifecycle of containers. It uses `epoll` to find out from the kernel when an OOM condition occurs:\r\n\r\nhttps:\/\/github.com\/containerd\/containerd\/blob\/dcf2847247e18caba8dce86522029642f60fe96b\/runtime\/v2\/runc\/task\/service.go#L65-L69\r\n\r\nhttps:\/\/github.com\/containerd\/containerd\/blob\/dcf2847247e18caba8dce86522029642f60fe96b\/runtime\/v2\/runc\/task\/service.go#L318-L341\r\n\r\nIt's possible this could be supported in the future with the 'containerd' implementation of Windows containers (where we call to a equivalent 'shim' to run containers instead of driving the OS directly, as today Windows does not use a shim, unlike Linux containers); however the equivalent code does not implement any sort of OOM notification as required by containerd:\r\n\r\nhttps:\/\/github.com\/microsoft\/hcsshim\/blob\/a58b41457cca7c4f08f489e15ca1768ebfd84df5\/cmd\/containerd-shim-runhcs-v1\/task_hcs.go\r\n\r\n[Searching the repository](https:\/\/github.com\/microsoft\/hcsshim\/issues?q=is%3Aissue+OOM+), I don't see any issues related to an OOM event; I would suggest creating one (keeping in mind that this may just not be possible on Windows, I don't have the expertise there to say)."],"labels":["area\/runtime","platform\/windows","exp\/expert","kind\/feature"],"number":47618},{"title":"Docker engine starts containers before making shure docker.sock is created on host-system","body":"### Description\n\nI've noticed in some cases docker stop\/start\/restart may fail while using docker services\/containers that need bind-mound to docker.sock. This is the case for example for:\r\n- portainer\r\n- portainer-agent\r\n- traefik\r\n\r\nIn this case for some reason trying to (re)start docker-engine if there is no docker.sock the container bind-mount will result into a empty directory on the host (in this case \/var\/run\/docker.sock will be a directory, not a socket)! Even deleting the directory does not resolve the issue as after stop\/restart the procedure repeats.\r\n\r\nThis is a real problem as the only current solution is to determine to container uuid and delete it in \/var\/lib\/docker\/containers or even delete them all. I don't think this is a gentle and solid solution as we need to re-deploy everything afterwards having an additional downtime then for the docker-server until everything works again as it should.\r\n\r\ndocker-engine should make shure docker.sock is created before even going to start any container that will do any mounts.\n\n### Reproduce\n\n1. install portainer: ```docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v \/var\/run\/docker.sock:\/var\/run\/docker.sock -v portainer_data:\/data portainer\/portainer```\r\n2.systemctl stop docker\r\n3. rm \/var\/run\/docker.sock\r\n4. systemctl start docker\n\n### Expected behavior\n\ndocker should make shure the engine & docker.sock itself is healthy before going to start any services\/containers that require docker is really ready.\n\n### docker version\n\n```bash\nClient:\r\n Version:           24.0.5\r\n API version:       1.43\r\n Go version:        go1.20.7\r\n Git commit:        24.0.5-0ubuntu1\r\n Built:             Wed Aug 16 21:32:36 2023\r\n OS\/Arch:           linux\/amd64\r\n Context:           default\r\npermission denied while trying to connect to the Docker daemon socket at unix:\/\/\/var\/run\/docker.sock: Get \"http:\/\/%2Fvar%2Frun%2Fdocker.sock\/v1.24\/version\": dial unix \/var\/run\/docker.sock: connect: permission denied\n```\n\n\n### docker info\n\n```bash\nClient:\r\n Version:    24.0.5\r\n Context:    default\r\n Debug Mode: false\r\n Plugins:\r\n  buildx: Docker Buildx (Docker Inc.)\r\n    Version:  v0.11.2\r\n    Path:     \/usr\/local\/lib\/docker\/cli-plugins\/docker-buildx\r\n  compose: Docker Compose (Docker Inc.)\r\n    Version:  v2.24.7\r\n    Path:     \/usr\/local\/lib\/docker\/cli-plugins\/docker-compose\r\n  scan: Docker Scan (Docker Inc.)\r\n    Version:  v0.23.0\r\n    Path:     \/usr\/libexec\/docker\/cli-plugins\/docker-scan\r\n\r\nServer:\r\nERROR: permission denied while trying to connect to the Docker daemon socket at unix:\/\/\/var\/run\/docker.sock: Get \"http:\/\/%2Fvar%2Frun%2Fdocker.sock\/v1.24\/info\": dial unix \/var\/run\/docker.sock: connect: permission denied\r\nerrors pretty printing info\n```\n\n\n### Additional Info\n\n_No response_","comments":["> ```shell\r\n> Server:\r\n> ERROR: permission denied while trying to connect to the Docker daemon socket at unix:\/\/\/var\/run\/docker.sock: Get \"http:\/\/%2Fvar%2Frun%2Fdocker.sock\/v1.24\/info\": dial unix \/var\/run\/docker.sock: connect: permission denied\r\n> ```\r\n\r\nWe need the server info before we can triage this issue."],"labels":["status\/0-triage","status\/more-info-needed","kind\/bug"],"number":47615},{"title":"Rootless container internet connectivity not working when iptables disabled","body":"### Description\r\n\r\nI have noticed that any sort of internet request (ping\/curl\/dig) doesn't work inside containers when I set `iptables` to `false` in `~\/.config\/docker\/daemon.json` (rootless daemon config).\r\nWhen I start the `docker` user service it used to log `\"skipping firewalld management for rootless mode\"`, so I thought that the iptables setting is skipped anyway for rootless docker and I disabled it. After all the rootless docker daemon doesn't have the required root access to modify iptables rules and there aren't any changes when I checked with `sudo iptables -L`.\r\n\r\nI think that somewhere in the code some critical internet connectivity thing depends on the state of the iptables setting even if it shouldn't.\r\n\r\n### Reproduce\r\n\r\n1. Setup rootless docker\r\n2. Set `iptables` to `false` in `~\/.config\/docker\/daemon.json`:\r\n   ```json\r\n   {\r\n     \"iptables\": false\r\n   }\r\n   ```\r\n3. Start a docker container and run something like `wget`:\r\n   ```sh\r\n   docker run --rm alpine wget https:\/\/google.com\r\n   ```\r\n4. Internet connectivity isn't working and wget outputs something like:\r\n   ```\r\n   wget: bad address 'google.com'\r\n   ```\r\n5. Remove the `iptables` setting from the `daemon.json` file and try again, wget should work now.\r\n\r\n### Expected behavior\r\n\r\nInternet connectivity should not be affected by the iptables setting in rootless mode.\r\n\r\n### docker version\r\n\r\n```bash\r\nClient: Docker Engine - Community\r\n Version:           25.0.5\r\n API version:       1.44\r\n Go version:        go1.21.8\r\n Git commit:        5dc9bcc\r\n Built:             Tue Mar 19 15:05:34 2024\r\n OS\/Arch:           linux\/amd64\r\n Context:           rootless\r\n\r\nServer: Docker Engine - Community\r\n Engine:\r\n  Version:          25.0.5\r\n  API version:      1.44 (minimum version 1.24)\r\n  Go version:       go1.21.8\r\n  Git commit:       e63daec\r\n  Built:            Tue Mar 19 15:05:34 2024\r\n  OS\/Arch:          linux\/amd64\r\n  Experimental:     false\r\n containerd:\r\n  Version:          1.6.28\r\n  GitCommit:        ae07eda36dd25f8a1b98dfbf587313b99c0190bb\r\n runc:\r\n  Version:          1.1.12\r\n  GitCommit:        v1.1.12-0-g51d5e94\r\n docker-init:\r\n  Version:          0.19.0\r\n  GitCommit:        de40ad0\r\n rootlesskit:\r\n  Version:          2.0.2\r\n  ApiVersion:       1.1.1\r\n  NetworkDriver:    slirp4netns\r\n  PortDriver:       builtin\r\n  StateDir:         \/run\/user\/1000\/dockerd-rootless\r\n slirp4netns:\r\n  Version:          1.2.0\r\n  GitCommit:        656041d45cfca7a4176f6b7eed9e4fe6c11e8383\r\n```\r\n\r\n\r\n### docker info\r\n\r\n```bash\r\nClient: Docker Engine - Community\r\n Version:    25.0.5\r\n Context:    rootless\r\n Debug Mode: false\r\n Plugins:\r\n  buildx: Docker Buildx (Docker Inc.)\r\n    Version:  v0.13.1\r\n    Path:     \/usr\/libexec\/docker\/cli-plugins\/docker-buildx\r\n  compose: Docker Compose (Docker Inc.)\r\n    Version:  v2.25.0\r\n    Path:     \/usr\/libexec\/docker\/cli-plugins\/docker-compose\r\n\r\nServer:\r\n Containers: 0\r\n  Running: 0\r\n  Paused: 0\r\n  Stopped: 0\r\n Images: 1\r\n Server Version: 25.0.5\r\n Storage Driver: overlay2\r\n  Backing Filesystem: extfs\r\n  Supports d_type: true\r\n  Using metacopy: false\r\n  Native Overlay Diff: false\r\n  userxattr: true\r\n Logging Driver: json-file\r\n Cgroup Driver: systemd\r\n Cgroup Version: 2\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local splunk syslog\r\n Swarm: inactive\r\n Runtimes: io.containerd.runc.v2 runc\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: ae07eda36dd25f8a1b98dfbf587313b99c0190bb\r\n runc version: v1.1.12-0-g51d5e94\r\n init version: de40ad0\r\n Security Options:\r\n  seccomp\r\n   Profile: builtin\r\n  rootless\r\n  cgroupns\r\n Kernel Version: 6.1.0-18-amd64\r\n Operating System: Debian GNU\/Linux 12 (bookworm)\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 6\r\n Total Memory: 15.62GiB\r\n Name: ordontest\r\n ID: b5969804-5e9a-42df-a2f7-20690bdbdfe0\r\n Docker Root Dir: \/home\/jonas\/.local\/share\/docker\r\n Debug Mode: false\r\n Experimental: false\r\n Insecure Registries:\r\n  127.0.0.0\/8\r\n Live Restore Enabled: false\r\n```\r\n\r\n\r\n### Additional Info\r\n\r\n_No response_","comments":["cc @akerouanton @robmry @AkihiroSuda ","I think that's to be expected - there are normally iptables masquerade rules in the network namespace the rootless dockerd runs in, needed to route traffic to the outside world, and those aren't set up.\r\n\r\nIs there a reason to want to do this?"],"labels":["status\/0-triage","kind\/bug"],"number":47611},{"title":"docker checkpoint create failed with a huge image.","body":"### Description\r\n\r\nI am trying to use the docker checkpoint feature https:\/\/docs.docker.com\/reference\/cli\/docker\/checkpoint\/.\r\n\r\nI have done the following commands.\r\n```\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:~# docker run --init --security-opt=seccomp:unconfined --name cr -d busybox \/bin\/sh -c 'i=0; while true; do echo $i; i=$(expr $i + 1); sleep 1; done'\r\n7a5fe57e1352c60530ee82a9df977cb4a95d2712e9e769980dcfe2f984362e19\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:~# docker checkpoint create cr checkpoint1\r\ncheckpoint1\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:~# docker start --checkpoint checkpoint1 cr\r\n```\r\nAlso I've tried nginx and redis,and they seems to be working in a nice condition.\r\nBut when I tried to use my own image,I failed.Infact, as the size of this image if about 10GB,I am wondering if this condition is because of the size of current image is too huge or someting.\r\n```\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:~# docker run --init --security-opt=seccomp:unconfined --name trycheck -d luochengxi\/uosvnc:latest\r\n9ddc9685d8276719aa8a7336c8bbc360747736f4728f0419c341019bef8520f6\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:~# docker checkpoint create trycheck cp1\r\nError response from daemon: Cannot checkpoint container trycheck: runc did not terminate successfully: exit status 1: criu failed: type NOTIFY errno 0 path= \/run\/containerd\/io.containerd.runtime.v2.task\/moby\/9ddc9685d8276719aa8a7336c8bbc360747736f4728f0419c341019bef8520f6\/criu-dump.log: unknown\r\n```\r\n\r\n### Reproduce\r\n\r\n```\r\ndocker run --init --security-opt=seccomp:unconfined --name trycheck -d luochengxi\/uosvnc:latest\r\ndocker checkpoint create trycheck cp1\r\n```\r\n\r\n### Expected behavior\r\n\r\ndocker checkpoint create successfully.\r\n\r\n### docker version\r\n\r\n```bash\r\nClient: Docker Engine - Community\r\n Version:           25.0.4\r\n API version:       1.44\r\n Go version:        go1.21.8\r\n Git commit:        1a576c5\r\n Built:             Wed Mar  6 16:32:12 2024\r\n OS\/Arch:           linux\/amd64\r\n Context:           default\r\n\r\nServer: Docker Engine - Community\r\n Engine:\r\n  Version:          25.0.4\r\n  API version:      1.44 (minimum version 1.24)\r\n  Go version:       go1.21.8\r\n  Git commit:       061aa95\r\n  Built:            Wed Mar  6 16:32:12 2024\r\n  OS\/Arch:          linux\/amd64\r\n  Experimental:     true\r\n containerd:\r\n  Version:          1.6.28\r\n  GitCommit:        ae07eda36dd25f8a1b98dfbf587313b99c0190bb\r\n runc:\r\n  Version:          1.1.12\r\n  GitCommit:        v1.1.12-0-g51d5e94\r\n docker-init:\r\n  Version:          0.19.0\r\n  GitCommit:        de40ad0\r\n```\r\n\r\n\r\n### docker info\r\n\r\n```bash\r\nClient: Docker Engine - Community\r\n Version:    25.0.4\r\n Context:    default\r\n Debug Mode: false\r\n Plugins:\r\n  buildx: Docker Buildx (Docker Inc.)\r\n    Version:  v0.13.0\r\n    Path:     \/usr\/libexec\/docker\/cli-plugins\/docker-buildx\r\n  compose: Docker Compose (Docker Inc.)\r\n    Version:  v2.24.7\r\n    Path:     \/usr\/libexec\/docker\/cli-plugins\/docker-compose\r\n\r\nServer:\r\n Containers: 3\r\n  Running: 3\r\n  Paused: 0\r\n  Stopped: 0\r\n Images: 5\r\n Server Version: 25.0.4\r\n Storage Driver: overlay2\r\n  Backing Filesystem: xfs\r\n  Supports d_type: true\r\n  Using metacopy: false\r\n  Native Overlay Diff: true\r\n  userxattr: false\r\n Logging Driver: json-file\r\n Cgroup Driver: systemd\r\n Cgroup Version: 2\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local splunk syslog\r\n Swarm: inactive\r\n Runtimes: runc io.containerd.runc.v2\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: ae07eda36dd25f8a1b98dfbf587313b99c0190bb\r\n runc version: v1.1.12-0-g51d5e94\r\n init version: de40ad0\r\n Security Options:\r\n  apparmor\r\n  seccomp\r\n   Profile: builtin\r\n  cgroupns\r\n Kernel Version: 5.15.0-92-generic\r\n Operating System: Ubuntu 22.04.3 LTS\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 2\r\n Total Memory: 3.493GiB\r\n Name: iZ2zef7sqxs9idaeluuxe0Z\r\n ID: 12769291-2d96-4e49-b1a7-68ec8208c028\r\n Docker Root Dir: \/var\/lib\/docker\r\n Debug Mode: false\r\n Username: luochengxi\r\n Experimental: true\r\n Insecure Registries:\r\n  127.0.0.0\/8\r\n Live Restore Enabled: false\r\n```\r\n\r\n\r\n### Additional Info\r\n\r\nMy CRIU version\r\n```\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:\/# criu --version\r\nVersion: 3.19\r\n```\r\n\r\nThe criu-dump. log.\r\n[criu-dump.log](https:\/\/github.com\/moby\/moby\/files\/14692751\/criu-dump.log)","comments":["Hm... yeah, not immediately clear to me either what's causing CRIU to fail (error comes from CRIU itself).\r\n\r\nAs you mentioned it happened with a large image; things work as expected on smaller images?\r\n\r\nI did notice that the amount of memory on that machine is not very large;\r\n\r\n```\r\nTotal Memory: 3.493GiB\r\n```\r\n\r\nIf you have a test-environment to run on, I'm curious if the issue also reproduces on a machine with more memory available (really thinking out loud here!)\r\n\r\n","Thanks for your reply. \r\n\r\nI'm sorry I cannot get a test-environment which has more memory available right now as I am a poor sophomore, but I will try to borrow one and I promise I will try to show you whether the issue also reproduces on a machine with more memory available\ud83e\udee1\r\n\r\n\ud83d\udc2d\ud83d\udc2d\ud83d\udc2d\r\nHowever,I can show you that it is not because of image size. I use the same machine and I create a Dockerfile.\r\n```dockerfile\r\nFROM  ubuntu:latest\r\n\r\n# I create a 20G file in my image.\r\nRUN fallocate -l 20G rumenz.img\r\n\r\n# to keep the container running\r\nCMD \/bin\/sh -c 'i=0; while true; do echo $i; i=$(expr $i + 1); sleep 1; done'\r\n\r\n```\r\nI build it , and get an image which is more than 20G.And the checkpoint works well.\r\n\r\n```\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:\/dockertest# docker build .\r\n[+] Building 99.5s (6\/6) FINISHED                                             docker:default\r\n => [internal] load build definition from Dockerfile                                    0.0s\r\n => => transferring dockerfile: 171B                                                    0.0s\r\n => [internal] load metadata for docker.io\/library\/ubuntu:latest                        0.0s\r\n => [internal] load .dockerignore                                                       0.0s\r\n => => transferring context: 2B                                                         0.0s\r\n => CACHED [1\/2] FROM docker.io\/library\/ubuntu:latest                                   0.0s\r\n => [2\/2] RUN fallocate -l 20G rumenz.img                                               0.2s\r\n => exporting to image                                                                 99.3s\r\n => => exporting layers                                                                99.3s\r\n => => writing image sha256:66f26beb67c9bb501d1fa891d37e2b2430347c8a26980c92baa3a2be44  0.0s\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:\/dockertest# docker run -d 667\r\nUnable to find image '667:latest' locally\r\n^C\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:\/dockertest# docker run -d 66f\r\nf8f17cd4ca0c1c0d74d8b19e16b858ac66bde97e1b731043d74e179eff872412\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:\/dockertest# docker logs f8f\r\n0\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:\/dockertest# docker checkpoint create f8f cp1\r\ncp1\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:\/dockertest# docker logs f8f\r\n0\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:\/dockertest# docker start --checkpoint cp1 f8f\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:\/dockertest# docker logs f8f\r\n0\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\nroot@iZ2zef7sqxs9idaeluuxe0Z:\/dockertest# \r\n```\r\n\r\n","I tried this feature in a machine with 4 CPUs and about 8GB memory, and its checkpoint worked well with busybox,too.\r\n\r\n```\r\nroot@VM-4-11-ubuntu:\/# docker run --init --security-opt=seccomp:unconfined --name cr -d busybox \/bin\/sh -c 'i=0; while true; do echo $i; i=$(expr $i + 1); sleep 1; done'\r\n63567bf94fe6420be69e5b72095719776219b050780c258a2823ddd2c14af90d\r\nroot@VM-4-11-ubuntu:\/# docker checkpoint create cr checkpoint1\r\ncheckpoint1\r\nroot@VM-4-11-ubuntu:\/# docker start --checkpoint checkpoint1 cr\r\n```\r\n\r\nI attempted to use the luochengxi\/uosvnc:latest image. However, it failed with an output identical to what I received on a machine with 2 CPUs and 4GB of memory. I am now wondering whether Docker's checkpoint feature have any limitations regarding the image itself?\ud83e\udd14\r\n\r\n```\r\nroot@VM-4-11-ubuntu:\/# docker run --init --security-opt=seccomp:unconfined --name trycheck -d luochengxi\/uosvnc:latest\r\n5abcabc7cef16152dbc96d853c8570cc0a2724ac252b3aeeb69ee65957324e24\r\nroot@VM-4-11-ubuntu:\/# docker checkpoint create trycheck cp1\r\nError response from daemon: Cannot checkpoint container trycheck: runc did not terminate succ\r\nessfully: exit status 1: criu failed: type NOTIFY errno 0 path= \/run\/containerd\/io.containerd\r\n.runtime.v2.task\/moby\/5abcabc7cef16152dbc96d853c8570cc0a2724ac252b3aeeb69ee65957324e24\/criu-d\r\nump.log: unknown\r\n```\r\n\r\n### docker version\r\n\r\n```\r\nClient: Docker Engine - Community\r\n Version:           25.0.5\r\n API version:       1.44\r\n Go version:        go1.21.8\r\n Git commit:        5dc9bcc\r\n Built:             Tue Mar 19 15:05:10 2024\r\n OS\/Arch:           linux\/amd64\r\n Context:           default\r\n\r\nServer: Docker Engine - Community\r\n Engine:\r\n  Version:          25.0.5\r\n  API version:      1.44 (minimum version 1.24)\r\n  Go version:       go1.21.8\r\n  Git commit:       e63daec\r\n  Built:            Tue Mar 19 15:05:10 2024\r\n  OS\/Arch:          linux\/amd64\r\n  Experimental:     true\r\n containerd:\r\n  Version:          1.6.28\r\n  GitCommit:        ae07eda36dd25f8a1b98dfbf587313b99c0190bb\r\n runc:\r\n  Version:          1.1.12\r\n  GitCommit:        v1.1.12-0-g51d5e94\r\n docker-init:\r\n  Version:          0.19.0\r\n  GitCommit:        de40ad0\r\n```\r\n\r\n\r\n### docker info\r\n\r\n```\r\nClient: Docker Engine - Community\r\n Version:    25.0.5\r\n Context:    default\r\n Debug Mode: false\r\n Plugins:\r\n  buildx: Docker Buildx (Docker Inc.)\r\n    Version:  v0.13.1\r\n    Path:     \/usr\/libexec\/docker\/cli-plugins\/docker-buildx\r\n  compose: Docker Compose (Docker Inc.)\r\n    Version:  v2.25.0\r\n    Path:     \/usr\/libexec\/docker\/cli-plugins\/docker-compose\r\n\r\nServer:\r\n Containers: 12\r\n  Running: 2\r\n  Paused: 0\r\n  Stopped: 10\r\n Images: 8\r\n Server Version: 25.0.5\r\n Storage Driver: overlay2\r\n  Backing Filesystem: xfs\r\n  Supports d_type: true\r\n  Using metacopy: false\r\n  Native Overlay Diff: true\r\n  userxattr: false\r\n Logging Driver: json-file\r\n Cgroup Driver: systemd\r\n Cgroup Version: 2\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local splunk syslog\r\n Swarm: inactive\r\nroot@VM-4-11-ubuntu:\/# docker info\r\nClient: Docker Engine - Community\r\n Version:    25.0.5\r\n Context:    default\r\n Debug Mode: false\r\n Plugins:\r\n  buildx: Docker Buildx (Docker Inc.)\r\n    Version:  v0.13.1\r\n    Path:     \/usr\/libexec\/docker\/cli-plugins\/docker-buildx\r\n  compose: Docker Compose (Docker Inc.)\r\n    Version:  v2.25.0\r\n    Path:     \/usr\/libexec\/docker\/cli-plugins\/docker-compose\r\n\r\nServer:\r\n Containers: 12\r\n  Running: 2\r\n  Paused: 0\r\n  Stopped: 10\r\n Images: 8\r\n Server Version: 25.0.5\r\n Storage Driver: overlay2\r\n  Backing Filesystem: xfs\r\n  Supports d_type: true\r\n  Using metacopy: false\r\n  Native Overlay Diff: true\r\n  userxattr: false\r\n Logging Driver: json-file\r\n Cgroup Driver: systemd\r\n Cgroup Version: 2\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local splunk syslog\r\n Swarm: inactive\r\n Runtimes: runc io.containerd.runc.v2\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: ae07eda36dd25f8a1b98dfbf587313b99c0190bb\r\n runc version: v1.1.12-0-g51d5e94\r\n init version: de40ad0\r\n Security Options:\r\n  apparmor\r\n  seccomp\r\n   Profile: builtin\r\n  cgroupns\r\n Kernel Version: 5.15.0-86-generic\r\n Operating System: Ubuntu 22.04 LTS\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 4\r\n Total Memory: 7.251GiB\r\n Name: VM-4-11-ubuntu\r\n ID: fb288d48-6587-4207-8dd9-ff7dbd650bb1\r\n Docker Root Dir: \/var\/lib\/docker\r\n Debug Mode: false\r\n Experimental: true\r\n Insecure Registries:\r\n  127.0.0.0\/8\r\n Registry Mirrors:\r\n  https:\/\/mirror.ccs.tencentyun.com\/\r\n Live Restore Enabled: false\r\n```\r\n\r\n\r\n### Additional Info\r\n\r\nMy CRIU version\r\n```\r\nVersion: 3.19\r\n```\r\n\r\nthe log file\r\n[criu-dump.log](https:\/\/github.com\/moby\/moby\/files\/14721221\/criu-dump.log)\r\n\r\n"],"labels":["status\/0-triage","kind\/bug","kind\/experimental","version\/25.0","area\/checkpoint"],"number":47609}]