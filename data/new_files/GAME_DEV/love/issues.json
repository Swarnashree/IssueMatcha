[{"title":"Regression 11.5: key events not triggered when an IME language is active (windows)","body":"If you have a CJK language active then the corresponding keypressed\/keyreleased events are not triggered.\r\n\r\nIt's the same kind of problem that Minecraft has (which uses glfw), so it might have something to do with naive handling of scancode\/virtual-key codes.\r\n\r\ntested on 11.5\r\n\r\nEDIT: works correctly in 11.4 so it's a regression.\r\n\r\ntest code: \r\n\r\n```lua\r\nlocal vkeycode_count = 0\r\nlocal scancode_count = 0\r\n\r\nfunction love.keypressed(vkey,scan,isRepeat)\r\n    if vkey==\"w\" then vkeycode_count = vkeycode_count + 1 end\r\n    if scan==\"w\" then scancode_count = scancode_count + 1 end\r\nend\r\nfunction love.keyreleased(vkey,scan)\r\n    if vkey==\"w\" then vkeycode_count = vkeycode_count - 1 end\r\n    if scan==\"w\" then scancode_count = scancode_count - 1 end\r\nend\r\nfunction love.draw()\r\n    love.graphics.print(\r\n        \"love.keyboard.isDown('w') = \"         .. (love.keyboard.isDown('w')         and \"true\" or \"false\") .. \"\\n\" .. \r\n        \"love.keyboard.isScancodeDown('w') = \" .. (love.keyboard.isScancodeDown('w') and \"true\" or \"false\") .. \"\\n\" .. \r\n        \"vkey w press count = \" .. vkeycode_count .. \"\\n\" ..\r\n        \"scan w press count = \" .. scancode_count\r\n    )\r\nend\r\n```","comments":["Is there a game you know of that does work as you expect on your system?\r\n\r\nThat being said, since love uses SDL for input handling, if it is even possible for apps to control that behaviour then SDL's code would have to change rather than love's code.","re-tested 11.4 works correctly, so it's a regression.\r\n\r\n> Is there a game you know of that does work as you expect on your system?\r\n\r\nOverwatch for example, and basically pretty much any game that started off with an AAA-ish engine.","Are you able to test directly with the latest SDL and file a bug there if needed? love 11.4 used SDL 2.0.18, and 11.5 uses 2.28.5.","latest SDL.dll fails for both 11.4 and 11.5\r\n\r\n11.4's SDL.dll works when copied to 11.5 as well.\r\n\r\nSo it's upstream.","A couple clarifying questions:\r\n* do you get `love.textedited` and `love.textinput` events in that situation?\r\n* is an IME dialog \/ UI element visible at all?\r\n* if you turn text input off, does the behaviour change?","1. first time I've heard of those events. Will test.\r\n2. no element visible whatsoever. Just like with Minecraft\r\n3. what do you mean by turning it off?","> first time I've heard of those events.\r\n\r\nIf you ever want to have a text box or handle typed text from users, you'll definitely want to use those instead of love.keypressed (whereas the latter is good for other game input unrelated to text). :) \r\n\r\n> what do you mean by turning it off?\r\n\r\n[love.keyboard.setTextInput](https:\/\/love2d.org\/wiki\/love.keyboard.setTextInput)\r\n","In both versions, during IME mode no `textinput` events are generated, and `textedited` events are only generated when _changing_ the key pressed (repeat presses do not generate new events, nor do key releases).\r\n\r\nWith `love.keyboard.setTextInput(false)` the IME toolbar is locked into alphanumeric mode, and the keypresses registers correctly.\r\n\r\nSo the only difference between 11.4 and 11.5 is whether or not `isDown\/isScancodeDown\/keypressed\/keyreleased` registers during IME, the `textinput\/textedit\/setTextInput` behaviors are identical.\r\n\r\n```lua\r\nlocal vkeycode_accu = 0\r\nlocal scancode_accu = 0\r\nlocal input_count = 0\r\nlocal edit_count = 0\r\n\r\n\r\nfunction love.mousepressed(x,y,button,istouch,presses)\r\n    if button==3 then love.keyboard.setTextInput( not love.keyboard.hasTextInput() ) end\r\nend\r\n\r\nfunction love.textinput(text)\r\n    input_count = input_count + 1\r\nend\r\n\r\nfunction love.textedited( text, start, length )\r\n    edit_count = edit_count + 1\r\nend\r\n\r\nfunction love.keypressed(vkey,scan,isRepeat)\r\n    if vkey==\"w\" then vkeycode_accu = vkeycode_accu + 1 end\r\n    if scan==\"w\" then scancode_accu = scancode_accu + 1 end\r\nend\r\nfunction love.keyreleased(vkey,scan)\r\n    if vkey==\"w\" then vkeycode_accu = vkeycode_accu - 1 end\r\n    if scan==\"w\" then scancode_accu = scancode_accu - 1 end\r\nend\r\nfunction love.draw()\r\n    love.graphics.print(\r\n        \"love.keyboard.isDown('w') = \"         .. (love.keyboard.isDown('w')         and \"true\" or \"false\") .. \"\\n\" .. \r\n        \"love.keyboard.isScancodeDown('w') = \" .. (love.keyboard.isScancodeDown('w') and \"true\" or \"false\") .. \"\\n\" .. \r\n        \"vkey w accu = \" .. vkeycode_accu .. \"\\n\" ..\r\n        \"scan w accu = \" .. scancode_accu .. \"\\n\" ..\r\n        \"textinput count = \" .. input_count .. \"\\n\" .. \r\n        \"textedited count = \" .. edit_count\r\n    )\r\nend\r\n```","@expikr can you verify if SDL release [2.24.2](https:\/\/github.com\/libsdl-org\/SDL\/releases\/tag\/release-2.24.2) already had this issue or if it still worked? The dll can be found in either the win32 assets ([x86](https:\/\/github.com\/libsdl-org\/SDL\/releases\/download\/release-2.24.2\/SDL2-2.24.2-win32-x86.zip) or [x64](https:\/\/github.com\/libsdl-org\/SDL\/releases\/download\/release-2.24.2\/SDL2-2.24.2-win32-x64.zip)).","2.24.2 fails.","> no element visible whatsoever\r\n\r\n> With love.keyboard.setTextInput(false) the IME toolbar is locked into alphanumeric mode\r\n\r\nI'm a bit confused by this - is there IME-related UI visible and active while text input is active, or is there not?","The IME toolbar is a status indicator in the systray, next to the system clock. \r\n\r\nThe IME character selection overlay element is never visible in Love2D."],"labels":["library dependency","Windows"],"number":2031},{"title":"Low FPS on certain monitor","body":"My CPU is 7800X3D and the graphics card is 7900XTX. Recently, I've been taking a game development course and trying a very simple demo. The only possible reason for the demo running under 300 frames per second might be some software restrictions.\r\n\r\nI have 3 display devices connected to my computer:\r\n\r\nAn LG UltraGear GP95R, which is a 4K 144Hz monitor, connected via DisplayPort.\r\nAn MSI mag274qrf-qd, which is a 2K 165Hz monitor, also connected via DisplayPort.\r\nAnd an LG C1, using an HDMI connection.\r\nWhen I simultaneously connect and enable all three display devices and then launch the demo, the frame rates vary on all three devices. The demo runs at over 500 frames per second on the C1, 144 frames per second on the MSI, and less than 60 frames per second on the GP95R, and it's extremely unstable.\r\nLater, I tried connecting only the GP95R, but the result was the same.\r\n\r\nNormally, when playing games like BG3, such significant differences in frame rates or GPU usage among different devices wouldn't occur.","comments":["> The only possible reason for the demo running under 300 frames per second might be some software restrictions.\r\n\r\nvsync is enabled by default in L\u00d6VE. If your demo's code doesn't turn it off, that'd be a reason for things running at lower than 300 frames per second.\r\n\r\n> less than 60 frames per second on the GP95R, and it's extremely unstable.\r\n\r\nAssuming vsync is enabled, which version of L\u00d6VE are you using? If you're using 11.4 or older maybe try 11.5. Or if you are using 11.5, see if it behaves any differently with [11.4](https:\/\/github.com\/love2d\/love\/releases\/tag\/11.4).\r\n\r\nThat being said, the results of what you've tested so far could be a system display configuration issue on your end (for example if vsync is on in your project, your graphics driver settings on your computer may be overriding it in some situations). It's hard to guess from the info you've provided. The forums or discord server or subreddit may be more appropriate places to figure that sort of thing out.","> > The only possible reason for the demo running under 300 frames per second might be some software restrictions.\r\n> \r\n> vsync is enabled by default in L\u00d6VE. If your demo's code doesn't turn it off, that'd be a reason for things running at lower than 300 frames per second.\r\n> \r\n> > less than 60 frames per second on the GP95R, and it's extremely unstable.\r\n> \r\n> Assuming vsync is enabled, which version of L\u00d6VE are you using? If you're using 11.4 or older maybe try 11.5. Or if you are using 11.5, see if it behaves any differently with [11.4](https:\/\/github.com\/love2d\/love\/releases\/tag\/11.4).\r\n> \r\n> That being said, the results of what you've tested so far could be a system display configuration issue on your end (for example if vsync is on in your project, your graphics driver settings on your computer may be overriding it in some situations). It's hard to guess from the info you've provided. The forums or discord server or subreddit may be more appropriate places to figure that sort of thing out.\r\n\r\nThe 11.4 version works fine on both of my monitors and the demo could easily reach 500 fps.","Thanks for testing. Can you confirm whether you have vsync enabled or disabled in your demo project? And whether you have vsync or adaptive sync overridden in your graphics driver settings? Also uploading your demo project or a test project that reproduces the issue for you here would be helpful.","You can find the demo here. https:\/\/github.com\/games50\/pong \r\nI have tried enabling or disabling vsync in the demo, but the frame rate performance did not show significant changes.\r\n\r\n> And whether you have vsync or adaptive sync overridden in your graphics driver settings? \r\n\r\nI\u2019m not quite sure about this. Here are the screenshots of my AMD software panel.\r\n\r\n![display1](https:\/\/github.com\/love2d\/love\/assets\/47963792\/ae7d1edb-9d57-4729-9205-73069825d114)\r\n![display2](https:\/\/github.com\/love2d\/love\/assets\/47963792\/1f79e17a-35df-423c-82f3-1409da7b6559)\r\n\r\n","If you turn freesync off for the LG display, does love 11.5 behave more consistently there?\r\n\r\nEither way it's super weird that vsync doesn't affect things for you, unless you've forced it off in a driver setting somewhere else."],"labels":["more info needed"],"number":2027},{"title":"Feature request: love.filesystem.newTempFile","body":"there are two ways this could be implemented:\r\n1. create a file in \/tmp and delete it when the program exits as part of the cleanup hook\r\n2. emulate a file via an in-memory buffer.  this could be used on platforms that don't have a ramdisk, although it is a bit more difficult since love2d files have a more complicated interface than lua files\r\n\r\nadditionally, some way to easily move a temporary file to a permanent file would be nice.","comments":["What sort of things would you use this for?\r\n\r\nI'm not sure I like the idea of having a step to clean up files, because L\u00d6VE ultimately doesn't control how it closes (it may crash or be force-quit etc. depending on what people do.)","Not the OP, but it sounds like they just want access to the platform-equivalent 'tmpfile' system call, which if used would mean there'd be no cleanup to register as the operating system itself would handle that.\r\n\r\n[Linux](https:\/\/man7.org\/linux\/man-pages\/man3\/tmpfile.3.html) [Windows](https:\/\/learn.microsoft.com\/en-us\/cpp\/c-runtime-library\/reference\/tmpfile-s) [Mac](https:\/\/developer.apple.com\/library\/archive\/documentation\/System\/Conceptual\/ManPages_iPhoneOS\/man3\/tmpfile.3.html) [Android](https:\/\/developer.android.com\/reference\/java\/io\/File#createTempFile\\(java.lang.String,%20java.lang.String\\))\r\n\r\nI apologize but I'm not able to find a good direct link for a pre-built system call on Apple iOS devices to do this.\r\n\r\nThis is mostly used on desktop platforms for various purposes relating to building a file such as a game save then copying it over to a permanent location as a single operation when done, so that in case of a crash temporary files won't accumulate and won't corrupt the save game without having to assemble the whole save-file in memory first.","Overall I'd rather implement exactly what people actually want\/need rather than a more general temp file API - otherwise situations like this can happen https:\/\/github.com\/libsdl-org\/SDL\/issues\/9256 \r\n\r\nThat being said, from what I understand some uses of temp files are actually extremely hard or even impossible to do in a way that's atomic and safe across different platforms. I also don't want to add an API that seems like it's intended to be safe but actually can't be in practice. So we'd need to do a lot of research into the specifics of individual use cases before implementing anything, I think.","The only two I can think of that's a reasonably sane use, one would be the example I gave above honestly and the other a strained variation of it that doesn't map well to Lua semantics at all so I'll skip it.\r\n\r\nRealistically since there's no piecemeal assembling of files in Love2D anyways only an atomic-ish \"replace the whole file with this data\" there's no way to really benefit from this, for all use-cases I can think of looking across all manner of game engines I'm poking at... the existing filesystem.write() just does what's needed.\r\n\r\nIf in doubt write to a fixed file for the purpose\/phase in the code, then .write(.read()) to its final destination is as atomic as one can get in Love2D AFAIK?","> Realistically since there's no piecemeal assembling of files in Love2D\r\n\r\nthis hasn't been true for some time, see File:write and File:seek","Fwiw on our game we had a numbered backup system for the purposes of safe save files, you don't necessarily need a temporary file; instead you rotate your files and do redundancy checks","yeah, i was actually implementing a replay system, in my case i just write it to a certain position in the save dir."],"labels":["more info needed"],"number":2024},{"title":"Multithreaded job\/task system","body":"Computers, consoles, and phones all have more than one CPU core these days. But aside from audio\/video decoding, all of love's own internal code is singlethreaded. We do have APIs to run Lua code in multiple OS threads, but because each thread needs its own Lua instance it takes work to use efficiently in a lot of situations - independent heavy algorithm processing and asset loading are the two easiest ways to use love's threads right now.\r\n\r\nMost modern game engines have an integrated job\/task system they use with a thread pool, to parallelize their own work (for example render command generation or physics simulation) and often to parallelize game code, all in a fairly simple manner.\r\n\r\nIt'd be nice to have something like that in love - maybe just for internal use to start (if good uses can be found) since more infrastructure and profiling work would need to be done to make it really solid in Lua code. In particular it becomes a lot easier to know how to use and misuse a job\/task system when there's a way to visualize the different parts of a frame and what job threads are doing in a given section, and there would be details to figure out for keeping jobified Lua functions side effect free in a given job thread.\r\n\r\n[enkiTS](https:\/\/github.com\/dougbinks\/enkiTS) seems like a solid library for the base of this sort of thing.","comments":["It is also very good to transfer network interaction (especially UDP) to a child thread, otherwise lags in the game can lead to the loss of datagrams, both receiving and sending. Perhaps it would also be nice to transfer interaction with ENet to other threads.","For networking, a dedicated thread (which is already possible) might make more sense than a job system (which is also already possible, just not as integrated as I'd like). However I'm not sure even a dedicated thread is super useful most of the time for realtime networking.","> However I'm not sure even a dedicated thread is super useful most of the time for realtime networking.\r\n\r\nYes, no one is stopping you from using love2d threads for network activity in versions 7-12. There is no need to build them into the framework."],"labels":["feature"],"number":2020},{"title":"Request: Add x and y params to filedropped() and directorydropped() event callbacks","body":"filedropped(file) => filedropped(file, x, y)\r\ndirectorydropped(path) => directorydropped(path, x, y)\r\n\r\nIn most cases the correct coords can be obtained using mouse.getPosition() inside those two callbacks but not always. Consider the case where the Love2D application has halted because it's waiting for a file dialog to close. If you drag a file or directory from the file dialog onto the halted application window and then close the file dialog, the application has no way of knowing the actual coords of the drop because the mouse has possibly moved between the time of the drop and the closing of the dialog. Adding x and y params to those callbacks will allow the programmer to always know the exact location of the drop.","comments":["Unfortunately SDL2 doesn't provide this with the event, but SDL3 will.","Sounds like my library can jump in here https:\/\/github.com\/EngineerSmith\/isdropping","Perhaps SDL could have an option for automatically bringing a window to the foreground (or making an attempt to) when a drag and drop event occurs (on the release of the mouse button). I think this would be acceptable window behavior (ie. not focus-stealing). Maybe also have an option for bringing the window to the foreground when a mousewheel event occurs. These options could be set with a call like SDL_SetWindowForeground(SDL_DROPFILE | SDL_MOUSEWHEEL) or something better."],"labels":["feature","library dependency","SDL3"],"number":2019}]