[{"title":"Fix playback volume of mono sounds in the lwjgl3 backend","body":"Might fix #6784\r\n\r\nThe position of sound sources was set to (0,0,1) in 3D space, resulting in sounds not playing at full volume. This led to varying levels of audio output volume compared to other backends (stereo sounds weren't affected).\r\n\r\nThis PR sets the position to (0,0,0). In order to not break panning, I had to change the way how 2D panning works.\r\nIf pan is set to 0 (center), sound output shouldn't differ from playing an unpanned sound. This was the case with the original panning calculation and a default source position of (0,0,1).\r\n\r\nThe new panning calculation is based on this [comment](https:\/\/github.com\/kcat\/openal-soft\/issues\/194#issuecomment-392520073) by kcat, the author of OpenAL Soft. If you read the comment, you'll notice a mention of a second variant in the last block. I've chosen this method because the sound output closely matches the output prior to this PR.\r\n\r\nVisual comparison:\r\n`play(volume, pitch, pan)`\r\nThe red line indicates the maximum level of output.\r\n![pr](https:\/\/github.com\/libgdx\/libgdx\/assets\/108926\/b566afcd-bd4c-4c6b-ab43-f6717f459ff6)\r\n","comments":["It's different but sadly still not quite right, in terms of both amplitude and frequency response.\r\n\r\nThree-way comparison of a mono sound in this branch, a mono sound in 1.12.1, a stereo sound in this branch - in that order:\r\n\r\nhttps:\/\/github.com\/libgdx\/libgdx\/assets\/60154347\/00f8b8a0-a5d9-4d2c-94cc-e447ecf933ea\r\n\r\n(FLAC in MP4 container due to GitHub file restrictions - player is muted by default for some reason)\r\n\r\nThe files I'm using for testing (mono version is louder than each stereo channel): [boom-oggs.zip](https:\/\/github.com\/libgdx\/libgdx\/files\/14586341\/boom-oggs.zip)\r\n\r\nEdit: I think we're on the right track, though. By removing where `AL_DIRECT_CHANNELS_SOFT` is set, or setting it to the default `AL_FALSE`, I can get stereo sounds to sound bad like mono ones. Unfortunately, nothing I've done has made mono sounds sound good.","I also notice a slight difference. But for me it's minimal, barely audible, barely visible in the waveform. The difference in your mp4 is brutal. I honestly don't know what's going on.\r\n\r\nWell, even if it doesn't completely solve the problem for you, this PR is also a prerequisite for panning stereo sources, as stereo channels only remain separated at position (0,0,0) (if not panned). If we want to enable that in the future.","Stereo panning would be nice, and I think this makes mono sounds slightly better. Doesn't make them any worse, at least, so I'm not against this. I'm sure panning stereo sources works on GWT; don't see any reason why it shouldn't work for Android either since it just adjusts the volume of the left and right channels independently. iOS I'm not so sure on, but it's sorta the ugly duckling anyway and not a reason to hold desktop back. I'll repeat the experiment if you get stereo panning working, to see if that screws it up as well or if mono sources are a special case."],"labels":["desktop","audio"],"number":7365},{"title":"Retire the gdx-lwjgl3-glfw-awt-macos extension","body":"Retire the gdx-lwjgl3-glfw-awt-macos extension in favour of LWJGL's own solution:\r\n\r\n```java\r\nif (SharedLibraryLoader.isMac) {\r\n    Configuration.GLFW_LIBRARY_NAME.set(\"glfw_async\");\r\n}\r\n```\r\n\r\nThis fixes #6896, #6989, #7059. It also seems to fix #6987 and #6992, but those crashes were hard to reproduce since they only seemed to happen very rarely. I couldn't reproduce #6872, but it might be fixed by this as well. ","comments":["When I tried this in gdx-liftoff, it didn't work any better than the AWT extension. I believe that was in the early days of LWJGL 3.3.3, and things may have changed, but you should try building a .jar version of the LWJGL3 tests and running it on Mac, resizing the window(s), moving them, etc. If it works for you, could you post that JAR here for other Mac users to test? I think so far the best solution is to do what Guacamole does and restart the JVM with the appropriate arguments for the platform. gdx-liftoff bundles StartupHelper with new LWJGL3 projects for this reason, which is mostly the same as the startup code in Guacamole. StartupHelper does also include some support for running on Windows when your username isn't all ASCII (which is a problem because LWJGL3 and libGDX copy DLLs into a temp directory by default, and that is normally inside the user's home dir, but libraries on Windows seem to only be load-able from ASCII paths).\r\n\r\nHere's the gdx-liftoff commit where I reverted the code that would be added here, because there were still problems:\r\n\r\nhttps:\/\/github.com\/libgdx\/gdx-liftoff\/commit\/ee645963f56e4ea0020b61d40bb395e13f861f2a#diff-ca301a9d8cc4f9ff71a5578872faca1a77eeacbe59089cd6d661249b69311c9d","Since LWJGL 3.3.1 (when this was introduced and when liftoff seems to have used it) LWJGL has pushed a couple of fixes for their async lib which seem to have resolved the initial issues. The jar file of the libGDX tests is too big to upload it here, so anyone else who wants to try this will have to clone libGDX and adapt the tests with the code snippet in the PR description above. On my end (M1 macbook) everything works quite well.\r\n\r\nUsing the `-XstartOnFirstThread` argument (either manually or by restarting the JVM) still has one advantage: the window [continues to be rendered](https:\/\/github.com\/libgdx\/libgdx\/pull\/7361\/files#diff-040a0bcb5d798c1906e75ea04d512d8a2ce33b694b8b1c4fe8edd6e6ffd9a2c5R79-R91) when it is resized."],"labels":["glfw-awt-macos"],"number":7361},{"title":"performance: unnecessary window.makeCurrent() in LWJGL3 backend","body":"Please ensure you have given all the following requested information in your report.\r\n\r\n#### Issue details\r\nIn the main loop of a Lwjgl3Application there is a loop which iterates over all Lwjgl3Windows and calls window.makeCurrent() which triggers an OpenGL context switch using glfwMakeContextCurrent(). This is unnecessary to call repeatedly when there is only one single window. Optimizing this will cause my application to run around 10% faster.\r\n\r\nI suggest a simple change:\r\n\r\n```java\r\n                if (currentWindow != window) {\r\n                    window.makeCurrent();\r\n                    currentWindow = window;\r\n                }\r\n```\r\n\r\nThis is sufficient because currentWindow is null initially. So glfwMakeContextCurrent() will be called at least once.\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [x] Windows\r\n- [x] Linux\r\n- [x] macOS\r\n","comments":["Good catch! I think `currentWindow` would need to be set [here](https:\/\/github.com\/libgdx\/libgdx\/blob\/3d8cfb8ce3d86cdf0909ce298c38ecca53d50ea0\/backends\/gdx-backend-lwjgl3\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3Application.java#L560) as well, so that the right context is active in the first render pass after a second window is created. Do you want to submit a PR for this?","> Good catch! I think `currentWindow` would need to be set [here](https:\/\/github.com\/libgdx\/libgdx\/blob\/3d8cfb8ce3d86cdf0909ce298c38ecca53d50ea0\/backends\/gdx-backend-lwjgl3\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3Application.java#L560) as well, so that the right context is active in the first render pass after a second window is created. Do you want to submit a PR for this?\r\n\r\nYes, setting `currentWindow` to the created window and also calling `makeCurrent()` on the it [here](https:\/\/github.com\/libgdx\/libgdx\/blob\/3d8cfb8ce3d86cdf0909ce298c38ecca53d50ea0\/backends\/gdx-backend-lwjgl3\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3Application.java#L464) is also necessary for multi-window support. The additional call to `makeCurrent()` is only needed to update Gdx.graphics, Gdx.input, Gdx.gl, ... for the new active window (currently this is not happening ant therefore a bug in the current implementation).\r\n\r\nEdit: Alternatively, the context switch in `createGlfwWindow` could be reverted to the previous context at the end of the `createWindow` method which calls `glClearColor`, `glClear` and `glfwSwapBuffers` for the created window. In this case we would not need to update the `currentWindow` and also do not need to invoke `makeCurrent()`. I think this is a design question. Getting the current context is a simple call to `glfwGetCurrentContext`.\r\n\r\nI don't have a fork. As these are just a few lines it would probably be easier if someone else pushes\/PRs this.","you can edit file and submit a PR automatically using the github interface, go on the file, then click **edit**, it'll do the work for you","> you can edit file and submit a PR automatically using the github interface, go on the file, then click **edit**, it'll do the work for you\r\n\r\nI opened a PR: https:\/\/github.com\/libgdx\/libgdx\/pull\/7362"],"labels":["enhancement","LWJGL3"],"number":7360},{"title":"Add config for automatic output device fetching on gwt","body":"fixes #7348","comments":["Maybe the limitation for the GWT backend should be mentioned on the interface? That it needs a special property to be set?\r\nOr maybe throwing a exception\/printing an error log when doing `getAvailableOutputDevices`, without the flag set on GWT?"],"labels":["gwt","audio"],"number":7359},{"title":"Use official metal sources","body":"The [metal sources](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/backends\/gdx-backend-robovm-metalangle\/build.gradle) currently used by the robovm-metalangle backend are coming from a dead repo, see [readme](https:\/\/github.com\/kakashidinho\/metalangle\/).\r\n\r\nLibgdx should - at some point - use the official sources as they now cover a wider compatibility as the fork currently used.\r\nThe only issue is that there are no release binaries as far as I can see, so those would need to be built first, but the workflow files for this are in the fork repo, so shouldn't be too much effort.","comments":["While I agree moving to official Angle would be good I think it's not as simple as that. MGLKit API is not part of official Angle so the adapter framework would need to be created. https:\/\/github.com\/kakashidinho\/metalangle\/issues\/81 discusses this possibility but it seems the author doesn't have the time to work on it which suggests it's not such a low effort task."],"labels":["enhancement"],"number":7341}]