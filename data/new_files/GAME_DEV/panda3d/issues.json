[{"title":"Standardize TypedWritable","body":"I've been implementing [BAM support](https:\/\/github.com\/NWPlayer123\/Orthrus\/blob\/233ef49468710f7b047c08273ef873baecd8a2a2\/crates\/panda3d\/src\/bam.rs) recently and with that, I've hit a lot of flaws in documentation of how it actually works. There's [putil\/typedWritable.C.template](https:\/\/github.com\/panda3d\/panda3d\/blob\/master\/panda\/src\/putil\/typedWritable.C.template) and [putil\/typedWritable.h.template](https:\/\/github.com\/panda3d\/panda3d\/blob\/master\/panda\/src\/putil\/typedWritable.h.template) but they haven't been touched since Panda3D was originally open sourced, and in the first handful of commits, [`make_Generic`](https:\/\/github.com\/panda3d\/panda3d\/blob\/master\/panda\/src\/putil\/typedWritable.C.template#L59) shifted to [`make_from_bam`](https:\/\/github.com\/panda3d\/panda3d\/blob\/master\/panda\/src\/putil\/typedWritable.cxx#L98), but a lot of objects were never updated, including the supposed templates.\r\n\r\nYou can see which ones use `make_from_bam` and which use the older style by searching for [`register_factory`](https:\/\/github.com\/search?q=repo%3Apanda3d\/panda3d%20register_factory&type=code), which brings up [a lot of objects](https:\/\/github.com\/panda3d\/panda3d\/blob\/master\/panda\/src\/chan\/animGroup.cxx#L309) that haven't been touched since the initial revision 24 years ago. There's also [this documentation](https:\/\/github.com\/panda3d\/panda3d\/blob\/master\/panda\/src\/doc\/writables.txt#L60) that doesn't even get the name of the template file right.\r\n\r\nWhile I'm here, do we even need `register_with_read_factory` if we have to [initialize it manually](https:\/\/github.com\/panda3d\/panda3d\/blob\/master\/panda\/src\/gobj\/config_gobj.cxx#L640) instead of using a vtable call? The majority of `register_with_read_factory` functions only have a single registration, there's only 3 I saw that need multiple.\r\n\r\nIf you combine all registrations into the config files, you only have to call `BamReader::get_factory()` once per config instead of once per registry function. Either way, you need to refer to individual classes, so you may as well just refer to their functions you're trying to register instead of having a one-liner function in 200+ different files.\r\n\r\nI've just found it hard to track down where each object is reading data from the BamReader, you have to look at `fillin` but it's [not always called](https:\/\/github.com\/panda3d\/panda3d\/blob\/master\/panda\/src\/gobj\/textureStage.cxx#L362) when reading a BAM file so you have to look for `make_from_bam` but it's not always called that so you have to look at `register_with_read_factory`. I don't want three layers of abstraction for every object I look at, I want one.","comments":["Thank you for sharing your frustrations.\r\n\r\nWe can't use a vtable call for `register_with_read_factory` since those can only be done on an already-constructed object.  I'm not sure what the Panda designers' reason was to create a separate method for this, it does seem slightly unnecessary.  I'd be happy to consider a change to directly call `register_factory` in the config files.\r\n\r\nThe reason why we do need a separate virtual `fillin` method is that further updates to a particular object will end up needing to call `fillin` again in order to adopt the changed fields.  This is useful when synchronizing Panda scenes over a socket connection.\r\n\r\nFor the default TextureStage, it is important that it is always resolved to the singleton default TextureStage, so checking the field and returning this pointer in `make_from_bam` was the easiest way to implement this.  This isn't actually the best way to implement this, since it breaks when streaming changes to this object.  It should instead just \"peek\" at the first value in the datagram, or it should implement `change_this` like RenderState does.\r\n\r\nI wasn't aware of the existence of those templates or documentation files.  I agree we need to update or remove them, and also update the remaining cases of factory functions that are not called `make_from_bam`.\r\n\r\nPlease note the existence of [this document](https:\/\/rdb.name\/panda3d\/bam-format.md), which contains my own notes as I wrote my own [bam writer library](https:\/\/github.com\/rdb\/pybamwriter), though it looks like you might already be largely past the point where this might be useful.","> We can't use a vtable call for `register_with_read_factory` since those can only be done on an already-constructed object. I'm not sure what the Panda designers' reason was to create a separate method for this, it does seem slightly unnecessary. I'd be happy to consider a change to directly call `register_factory` in the config files.\r\n\r\nAh, right. The only reason I could see keeping registration in each cxx is to keep all class-specific behavior there, but now that every registered function is called `make_from_bam` and is easy enough to find, it'd be better to centralize it in the config files.\r\n\r\n> The reason why we do need a separate virtual `fillin` method is that further updates to a particular object will end up needing to call `fillin` again in order to adopt the changed fields. This is useful when synchronizing Panda scenes over a socket connection.\r\n\r\nMakes sense, I haven't looked into runtime behavior much yet.\r\n\r\n> Please note the existence of [this document](https:\/\/rdb.name\/panda3d\/bam-format.md), which contains my own notes as I wrote my own [bam writer library](https:\/\/github.com\/rdb\/pybamwriter), though it looks like you might already be largely past the point where this might be useful.\r\n\r\nSaves me the work of having to go through each bam revision when adding crate documentation, thanks!\r\n"],"labels":["cleanup","discussion"],"number":1630},{"title":"finalize_distribution_options entry point requires panda3d import","body":"## Description\r\nPanda3D registers a finalize_distribution_options as of 1.10.13 to fix #1394, which also gets called when using commands other than build_apps due to limitations in setuptools.\r\n\r\nHowever, this causes an import of FreezeTool, which imports Panda3D modules.  If there is an issue with the Panda3D installation, this causes unrelated uses of setuptools to fail.\r\n\r\n## Steps to Reproduce\r\n1. Introduce an issue with the Panda3D C++ modules, eg. by deleting panda3d\/core.so\r\n2. Try to install Pillow using pip\r\n3. Observe the panda3d.core install error\r\n\r\n## Proposed Fix\r\nPut our finalize_distribution_options hook in a separate module, so that it doesn't trigger an import of other Panda3D modules\r\n\r\n## Environment\r\n * Operating system: macOS 14.4\r\n * System architecture: arm64\r\n * Panda3D version: 1.10.14+\r\n * Installation method: built from source\r\n * Python version (if using Python): 3.12\r\n","comments":[],"labels":["regression"],"number":1624},{"title":"how to use LerpFunctionInterval and functools.partial not working","body":"## Description\r\n\r\nhttps:\/\/docs.panda3d.org\/1.10\/python\/reference\/direct.interval.LerpInterval#direct.interval.LerpInterval.LerpFunctionInterval\r\n\r\nIt's a bit unclear how to use this function, but it's also not working correctly.\r\n\r\nThe expected behavior is this:\r\n\r\n * I provide a function\r\n * I set the lerp to start\r\n * panda will lerp over the value and change the value as specified by the function\r\n * the unclear part is how the function gets access to the object to change it's properties\r\n * as part of that, it is unclear from the docs how `function` needs to be defined to do this.\r\n \r\nOne solution was identified on discord and confirmed as working is this:\r\n\r\n```\r\ndef my_custom_function(self,value):\r\n    # something\r\n    self.value = value\r\n\r\nm = MyPandaObject()\r\nMyPandaObject.my_custom_function = my_custom_function # assign the function to the *class* not the instance\r\nmy_lerp = LerpFunctionInterval(m.my_custom_function,2,15,30) # instance now has the function as a method\r\nmy_lerp .start()\r\n```\r\nE.g. I used it to change the framesize of a DirectFrame like this:\r\n\r\n```\r\ndef lerpmyframesize(self,x_val):\r\n    self[\"frameSize\"] = (-x_val, x_val ,-0.05, 0.05)\r\nDirectFrame.lerpmyframesize = lerpmyframesize\r\nmy_lerp = LerpFunctionInterval(F.lerpmyframesize, 0.2, 0, 0.4)\r\nmy_lerp.start()\r\n```\r\n\r\n\r\n-------------------\r\n\r\nThe bugged behavior is this: It was also suggested that `functools.partial` should work, but it produces this error message:\r\n\r\n```\r\n  File \"\/home\/myuser\/.local\/lib\/python3.10\/site-packages\/direct\/interval\/LerpInterval.py\", line 845, in __init__\r\n    (function.__name__,\r\nAttributeError: 'functools.partial' object has no attribute '__name__'. Did you mean: '__ne__'?\r\n```\r\n\r\nthere was conversation around this here:\r\n\r\nhttps:\/\/discord.com\/channels\/524691714909274162\/1057767450843824198\/1213462368093208698\r\n\r\n\r\n## Steps to Reproduce\r\nrun this:\r\n```\r\nimport functools\r\nfrom direct.showbase.ShowBase import ShowBase\r\nfrom direct.interval.LerpInterval import LerpFunctionInterval\r\n\r\ndef testf(test_string, value):\r\n    # hello should be set as static by functools, val should change and be printed to console\r\n    print(test_string, value)\r\n\r\n\r\nclass Wrapper:\r\n    def __init__(self):\r\n        self.b = ShowBase()\r\n\r\n        # this part fixes the test_string\r\n        my_partial = functools.partial(testf, \"hello\")\r\n        my_lerp = LerpFunctionInterval(my_partial, 2, 0, 1)\r\n        my_lerp.start()\r\n\r\n\r\ndef main():\r\n    W = Wrapper()\r\n    while True:\r\n        W.b.taskMgr.step()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n## Environment\r\n * Operating system: linux\/ubuntu\r\n * System architecture: -\r\n * Panda3D version: 1.11.0.dev3233\r\n * Installation method: ?\r\n * Python version (if using Python): Python 3.10.12 (main, Nov 20 2023, 15:14:05)\r\n * Compiler (if using C++): -\r\n","comments":[],"labels":["bug"],"number":1623},{"title":"Font.setOutline does not work entirely correctly","body":"## Description\r\nsetOutline for text does not work correctly. We talked about it on discord, I'm just writing it down so we can get to it eventually.\r\n\r\nHere is a snippet, you should be able to flip the colors with the commented code and \"on my machine\" it's either yellow with a black out line or black with a black outline.\r\n\r\nrdb mentioned there being some conditions necessary, so it may just be a documentation issue, but I didn't find how to do this from the manual\/api\/code etc.\r\n\r\n```\r\nfrom direct.showbase import ShowBase\r\nfrom panda3d.core import TextNode\r\n\r\n\r\nclass Wrapper:\r\n\tdef __init__(self):\r\n\t\t\r\n\t\tself.b = ShowBase.ShowBase()\r\n\t\ttl = TextNode(\"name\")\r\n\t\tposition=(0,0,0)\r\n\t\t\r\n\t\tc1=(1,0.9,0.8,1)\r\n\t\tc2=(0,0,0,1)\r\n\t\t#c1=(1,0,0,1)\r\n\t\t#c2=(0,0,0,1)\r\n\t\t#c1,c2=c2,c1\r\n\t\t\r\n\t\ttl.clear()\r\n\t\ttl.setTextColor(*c1)\r\n\t\tfont = tl.getFont()\r\n\t\tfont.clear()\r\n\t\tfont.setOutline(c2,0.5,0)\r\n\t\t\r\n\t\ttl.set_text(\"test 123\")\r\n\t\t\r\n\t\tprint(font.getOutlineColor())\r\n\t\t\r\n\t\ttextNodePath = aspect2d.attachNewNode(tl)\r\n\t\ttextNodePath.setScale(0.05)\r\n\t\ttextNodePath.setPos(position)\r\n\r\ndef main():\r\n\tW = Wrapper()\r\n\twhile True:\r\n\t\tW.b.taskMgr.step()\r\n\r\nif __name__==\"__main__\":\r\n\tmain()\r\n```\r\n\r\n## Use Case\r\nUse case is obvious. It's not urgent and black outlines work.\r\n","comments":["The problem is that setTextColor modulates _everything_, you should use setFg\/set_fg on the font if you want to set the text colour without modulating the outline.","Ok, this works, but I would really like to have this mentioned in the outline function docs and the manual, because I think it's  not obvious that \"text\" has more than \"text color\" and actually \"text[foreground]\" is what needs to be set.\r\n\r\n```\r\nfrom direct.showbase import ShowBase\r\nfrom panda3d.core import TextNode\r\n\r\nclass Wrapper:\r\n\tdef __init__(self):\r\n\t\t\r\n\t\tself.b = ShowBase.ShowBase()\r\n\t\ttl = TextNode(\"name\")\r\n\t\tposition=(0,0,0)\r\n\t\t\r\n\t\tc1=(1,0.9,0.8,1)\r\n\t\tc2=(0,0,0,1)\r\n\t\t#c1=(1,0,0,1)\r\n\t\t#c2=(0,0,0,1)\r\n\t\tc1,c2=c2,c1\r\n\t\t\r\n\t\ttl.clear()\r\n\t\tfont = tl.getFont()\r\n\t\tfont.clear()\r\n\t\tfont.setFg(c1)\r\n\t\tfont.setOutline(c2,0.5,0)\r\n\t\t\r\n\t\ttl.set_text(\"test 123\")\r\n\t\t\r\n\t\tprint(font.getOutlineColor())\r\n\t\t\r\n\t\ttextNodePath = aspect2d.attachNewNode(tl)\r\n\t\ttextNodePath.setScale(0.05)\r\n\t\ttextNodePath.setPos(position)\r\n\r\ndef main():\r\n\tW = Wrapper()\r\n\twhile True:\r\n\t\tW.b.taskMgr.step()\r\n\t\tdt = W.b.clock.dt\r\n\r\nif __name__==\"__main__\":\r\n\tmain()\r\n```\t"],"labels":["enhancement"],"number":1621},{"title":"Implement SteamAudio SDK","body":"## Description\r\nThe [Steam Audio SDK](https:\/\/valvesoftware.github.io\/steam-audio\/index.html) was just [fully open sourced](https:\/\/steamcommunity.com\/games\/596420\/announcements\/detail\/7745698166044243233). This is a modern, actively-developed audio processing library designed by Valve specifically for 3D games and VR, and could prove to be a powerful addition to the default OpenAL-Soft library for Panda3D.\r\n\r\n## Use Case\r\nSteam Audio most likely supports or augments many features that Panda3D currently implements with OpenAL, and may have the benefit of a simpler, more modern API with easy access to more features tailored to 3D games specifically. I haven't done an extensive comparison myself ([here is a list of the features in the SteamAudio C API](https:\/\/valvesoftware.github.io\/steam-audio\/doc\/capi\/reference.html)), but there are some discussions floating on it by people more knowledgeable than me, such as [here](https:\/\/www.reddit.com\/r\/pcgaming\/comments\/1av1a6a\/steam_audio_open_source_release\/).\r\nIt may not be worth the effort, as OpenAL-Soft seems to meet Panda3D's needs, but I figured I'd start the dialogue here.\r\n","comments":["If I understand the terms of the Apache 2.0 license correctly, the developer must distribute his application under this license, that is, as an open source. Which is an imposition of licensing, I don't think Panda3D users will be thrilled.","> If I understand the terms of the Apache 2.0 license correctly, the developer must distribute his application under this license, that is, as an open source. Which is an imposition of licensing, I don't think Panda3D users will be thrilled.\r\n\r\nI'm not a licensing expert but the breakdown on this page seems to suggest that you don't need to apply the Apache 2.0 license to projects that use software under that license https:\/\/fossa.com\/blog\/open-source-licenses-101-apache-license-2-0\/\r\n\r\nSpecifically: \r\n> [Use the code commercially](https:\/\/fossa.com\/blog\/which-open-source-license-is-the-best-for-commercialization\/): Companies can include the licensed code in proprietary software that they then sell to customers.","https:\/\/github.com\/ValveSoftware\/steam-audio\/blob\/master\/LICENSE.md\r\n\r\nAs indicated here in part 4, paragraph \"c\", it is required to keep the copyright notice form. The problem is that the author of the work can simply include a mention of copyright at the beginning of the source code. Accordingly, you will be forced to distribute it further in this form.\r\n\r\nMaybe I'm exaggerating, but that's how I understand it.\r\n\r\n\r\n\r\n","> https:\/\/github.com\/ValveSoftware\/steam-audio\/blob\/master\/LICENSE.md\r\n> \r\n> As indicated here in part 4, paragraph \"c\", it is required to keep the copyright notice form. The problem is that the author of the work can simply include a mention of copyright at the beginning of the source code. Accordingly, you will be forced to distribute it further in this form.\r\n> \r\n> Maybe I'm exaggerating, but that's how I understand it.\r\n\r\nMy understanding is that applies to a derivative of SteamAudio itself, not any project that uses a binary from the unmodified source. But that's definitely at or beyond the limit of my understanding, so I'll let someone more qualified\/experienced figure that out","Yes, that's right, in fact, you are allowed to change the license at your discretion with compatibility. However, I also don't understand what to do with the SteamAudio source code.","apache 2.0 is not a copyleft license, so it shouldn't be an issue on that front","> However, I also don't understand what to do with the SteamAudio source code.\n\nFrom my understating, SteamAudio could replace OpenAL-Soft as an HRTF provider. SteamAudio also provides lots of effects processing for modeled and simulated 3D environments, presumably with high efficiency and with a good API. Of course those last two points are to be actually investigated, first, but it seems promising.\n\nAlso I'm not sure what sort of VR support Panda3D has but SteamAudio seems to tout its VR-capabilities.\n\nPanda3D would just implement these as features with some simple way to utilize them, I'm thinking","I suppose SteamAudio going open source doesn't actually affect what I'm proposing, but it makes it more of a pretty option for inclusion, just for being open source, but also since it could be modified for Panda3D's needs and avoid any sort of potential proprietary licensing needs.","Certainly seems worth implementing.  The Apache license is not a problem."],"labels":["enhancement"],"number":1619}]