[{"title":"WebSocketRequest Should Support Validation","body":"## Problem\r\n\r\nCurrently, `validation()`'s variants don't exist for `WebSocketRequest` (as discussed in #3851). Validation should be added to ensure parity with other requests and allow customized handling.\r\n\r\n","comments":[],"labels":["feature request"],"number":3853},{"title":"Add Conformance To ClientTransport From swift-openapi-generator","body":"* [x] I've read, understood, and done my best to follow the [*CONTRIBUTING guidelines](https:\/\/github.com\/Alamofire\/Alamofire\/blob\/master\/CONTRIBUTING.md).\r\n\r\n## Problem\r\n\r\nCurrently Alamofire doesn't have conformance to `ClientTransport` which is needed if we want to use the new swift-openapi-generator: https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10171\/\r\n\r\n## Feature Request\r\n\r\nIf we want to continue to use Alamofire in conjunction with the swift-openapi-generator, `ClientTransport` conformance is needed, as we need to supply it to the generated Client as a valid transport type to perform http operations: https:\/\/github.com\/apple\/swift-openapi-generator\/tree\/7bd8dadd99daafca1ece911209863124a07621f1?tab=readme-ov-file#using-a-generated-api-client\r\n\r\n## Value to Alamofire\r\n\r\nSince this is an apple supported plugin, continuing to use the same Http library is going to be invaluable, and since alamofire is supported by openapi's cli, the next step would be to support it as a part of apple's tools as well.\r\n","comments":["I've never seen client API generators generate any API code I'd ever want to use, but I'll leave this here in case anyone wants to pick it up as a new feature. It seems rather involved, especially for the streaming version."],"labels":["feature request"],"number":3826},{"title":"Multiple AF.upload cannot be concurrent","body":"> \u2139 Please fill out this template when filing an issue.\r\n> All lines beginning with an \u2139 symbol instruct you with what info we expect. You can delete those lines once you've filled in the info.\r\n>\r\n> Per our [*CONTRIBUTING guidelines](https:\/\/github.com\/Alamofire\/Alamofire\/blob\/master\/CONTRIBUTING.md), we use GitHub for\r\n> bugs and feature requests, not general support. Other issues should be opened on Stack Overflow with the tag `alamofire`.\r\n>\r\n> Please remove this line and everything above it before submitting.\r\n\r\n* [x] I've read, understood, and done my best to follow the [*CONTRIBUTING guidelines](https:\/\/github.com\/Alamofire\/Alamofire\/blob\/master\/CONTRIBUTING.md).\r\n\r\n## What did you do?\r\n\r\nWhen I use AF.upload to initiate multiple upload tasks, the multiple upload tasks are always executed serially. As a result, other requests I want to execute after the upload is successful must also be executed after all uploads are completed. In other words, upload seems to be blocking other requests. But this is not the case when I use AFNetwork\r\n\r\n## What did you expect to happen?\r\n\r\nWhen I use AF.upload to initiate multiple upload tasks, they can be executed concurrently without blocking other requests.\r\n\r\n## What happened instead?\r\n\r\nBlocking other requests\r\n\r\n## Alamofire Environment\r\n\r\n**Alamofire Version: 5.8.1\r\n**Dependency Manager: cocoapods\r\n**Xcode Version: 15.1\r\n**Swift Version:  Swift 5\r\n**Platform(s) Running Alamofire: 17.1\r\n**macOS Version Running Xcode: 14.2.1\r\n\r\n## Demo Project\r\n\r\n```\r\n        DispatchQueue.global().async {\r\n            AF.upload(\r\n                    multipartFormData: {\r\n                        $0.append(fileData, withName: name, fileName: fileName, mimeType: mimeType)\r\n                    },\r\n                    to: uploadURL,\r\n                    headers: headers)\r\n                .responseDecodable(of: APIResponse<APIResult>.self) { response in\r\n                    DispatchQueue.main.async {\r\n                        \/\/\/ other request\r\n                    }\r\n                }\r\n        }\r\n```\r\n","comments":["There's nothing in Alamofire that triggers this behavior. If you're seeing this it's likely `URLSession` is attempting to optimize your connectivity or otherwise preventing the app from overloading the network connections. Or it may be that your server doesn't allow multiple uploads at the same time.\r\n\r\nP.S. The `DispatchQueue` usage you have here is unnecessary. Neither the `global()` or the call back to `main` does anything. Alamofire completion handlers are on `main` by default."],"labels":["needs investigation"],"number":3810},{"title":"Memory leak from RequestInterceptor.swift file","body":"* [x] I've read, understood, and done my best to follow the [*CONTRIBUTING guidelines](https:\/\/github.com\/Alamofire\/Alamofire\/blob\/master\/CONTRIBUTING.md).\r\n\r\n## What did you do?\r\nI utilized the leak instrument and detected the memory leak originating from the function `adapt` in the file `RequestInterceptor.swift`. In fact, this function failed to add a weak reference in its closure.\r\n\r\n![image](https:\/\/github.com\/Alamofire\/Alamofire\/assets\/143064266\/8811e728-63fe-4c87-b1bd-6e799753f071)\r\n![image](https:\/\/github.com\/Alamofire\/Alamofire\/assets\/143064266\/98cca7ad-06e1-49a4-b55b-bb21c5f31d9d)\r\n\r\n\r\n## What did you expect to happen?\r\n\r\nI expected to add weak or unowned into the `adapt` function's closure, as this would prevent the memory leak from occurring.\r\n\r\n## What happened instead?\r\n\r\nIt still retained the reference that caused the memory leak.\r\n\r\n## Alamofire Environment\r\n\r\nAlamofire Version: 5.7.1\r\nDependency Manager: SPM\r\nXcode Version: 14.3.1 (14E300c)\r\nSwift Version: 5\r\nPlatform(s) Running Alamofire: iOS Simulator\r\nmacOS Version Running Xcode: 13.5.1 Ventura\r\n","comments":["Can you provide an example project that reproduces this leak? There really shouldn't be a leak here, as all of the captures should be released once the nested adapt calls are complete."],"labels":["needs investigation"],"number":3766},{"title":"Multiple token refresh issue in AuthenticationInterceptor","body":"* [X] I've read, understood, and done my best to follow the [*CONTRIBUTING guidelines](https:\/\/github.com\/Alamofire\/Alamofire\/blob\/master\/CONTRIBUTING.md).\r\n\r\n## What did you do?\r\n\r\n\u2139 Replaced private and public keys for JWT token (on the server).\r\nBefore that everything was working as it should be and it's working fine for different host. It's just not working on the host where we changed public and private keys for JWT.\r\n\r\n## What did you expect to happen?\r\n\r\n\u2139 Alamofire request will attach Authorization token in request header  \r\n\r\n## What happened instead?\r\n\r\n\u2139 Authenticator \"func refresh\" triggered 5 times (with success response with token) and after that triggered next API call without authorization header and response of that call is:\r\n`Alamofire.AFError.requestAdaptationFailed(error: Alamofire.AuthenticationError.excessiveRefresh)`\r\n\r\n\r\n## Alamofire Environment\r\n\r\n**Alamofire Version:**5.4.3\r\n**Dependency Manager:**Pod\r\n**Xcode Version:**14.3.1\r\n**Swift Version:**5.8.1\r\n**Platform(s) Running Alamofire:** iOS\r\n**macOS Version Running Xcode:**Ventura 13.4 \r\n\r\n## Demo Project\r\n\r\n\u2139 Please link to or upload a project we can download that reproduces the issue.\r\n","comments":["Sorry, there's not enough here for us to investigate. It sounds like you're using the `AuthenticationInterceptor` and changed how authentication works, so it's likely you need to update some of your other logic for detecting auth errors or detecting that the credential is attached to the request. I suggest you investigate further and, if you can't solve it, attach your `AuthenticationInterceptor` implementation or a reproducible project so we can better investigate what's going on."],"labels":["needs investigation"],"number":3735}]